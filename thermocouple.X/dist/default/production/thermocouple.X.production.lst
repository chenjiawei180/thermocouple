

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Jul 21 11:01:19 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	intentry,global,class=CODE,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	dabs	1,0x7E,2
    97  0000                     	;# 
    98  0001                     	;# 
    99  0002                     	;# 
   100  0003                     	;# 
   101  0004                     	;# 
   102  0005                     	;# 
   103  0006                     	;# 
   104  0007                     	;# 
   105  0008                     	;# 
   106  0009                     	;# 
   107  000A                     	;# 
   108  000B                     	;# 
   109  000C                     	;# 
   110  000D                     	;# 
   111  000E                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0015                     	;# 
   116  0016                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001C                     	;# 
   124  008C                     	;# 
   125  008D                     	;# 
   126  008E                     	;# 
   127  0090                     	;# 
   128  0091                     	;# 
   129  0092                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0097                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  0116                     	;# 
   144  0117                     	;# 
   145  011D                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  018E                     	;# 
   149  0191                     	;# 
   150  0191                     	;# 
   151  0192                     	;# 
   152  0193                     	;# 
   153  0193                     	;# 
   154  0194                     	;# 
   155  0195                     	;# 
   156  0196                     	;# 
   157  0197                     	;# 
   158  0199                     	;# 
   159  019A                     	;# 
   160  019B                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019C                     	;# 
   165  019C                     	;# 
   166  019D                     	;# 
   167  019E                     	;# 
   168  019F                     	;# 
   169  020D                     	;# 
   170  0210                     	;# 
   171  0211                     	;# 
   172  0211                     	;# 
   173  0212                     	;# 
   174  0212                     	;# 
   175  0213                     	;# 
   176  0213                     	;# 
   177  0214                     	;# 
   178  0214                     	;# 
   179  0215                     	;# 
   180  0215                     	;# 
   181  0215                     	;# 
   182  0216                     	;# 
   183  0216                     	;# 
   184  0217                     	;# 
   185  0217                     	;# 
   186  0291                     	;# 
   187  0291                     	;# 
   188  0292                     	;# 
   189  0293                     	;# 
   190  0298                     	;# 
   191  0298                     	;# 
   192  0299                     	;# 
   193  029A                     	;# 
   194  0394                     	;# 
   195  0395                     	;# 
   196  0396                     	;# 
   197  0FE4                     	;# 
   198  0FE5                     	;# 
   199  0FE6                     	;# 
   200  0FE7                     	;# 
   201  0FE8                     	;# 
   202  0FE9                     	;# 
   203  0FEA                     	;# 
   204  0FEB                     	;# 
   205  0FED                     	;# 
   206  0FEE                     	;# 
   207  0FEF                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  0010                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0015                     	;# 
   227  0016                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001C                     	;# 
   235  008C                     	;# 
   236  008D                     	;# 
   237  008E                     	;# 
   238  0090                     	;# 
   239  0091                     	;# 
   240  0092                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0097                     	;# 
   244  0099                     	;# 
   245  009A                     	;# 
   246  009B                     	;# 
   247  009B                     	;# 
   248  009C                     	;# 
   249  009D                     	;# 
   250  009E                     	;# 
   251  010C                     	;# 
   252  010D                     	;# 
   253  010E                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  018E                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0194                     	;# 
   266  0195                     	;# 
   267  0196                     	;# 
   268  0197                     	;# 
   269  0199                     	;# 
   270  019A                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019C                     	;# 
   276  019C                     	;# 
   277  019D                     	;# 
   278  019E                     	;# 
   279  019F                     	;# 
   280  020D                     	;# 
   281  0210                     	;# 
   282  0211                     	;# 
   283  0211                     	;# 
   284  0212                     	;# 
   285  0212                     	;# 
   286  0213                     	;# 
   287  0213                     	;# 
   288  0214                     	;# 
   289  0214                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0216                     	;# 
   294  0216                     	;# 
   295  0217                     	;# 
   296  0217                     	;# 
   297  0291                     	;# 
   298  0291                     	;# 
   299  0292                     	;# 
   300  0293                     	;# 
   301  0298                     	;# 
   302  0298                     	;# 
   303  0299                     	;# 
   304  029A                     	;# 
   305  0394                     	;# 
   306  0395                     	;# 
   307  0396                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000D                     	;# 
   333  000E                     	;# 
   334  0010                     	;# 
   335  0011                     	;# 
   336  0012                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001B                     	;# 
   345  001C                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  0090                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0095                     	;# 
   353  0096                     	;# 
   354  0097                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  010C                     	;# 
   363  010D                     	;# 
   364  010E                     	;# 
   365  0116                     	;# 
   366  0117                     	;# 
   367  011D                     	;# 
   368  018C                     	;# 
   369  018D                     	;# 
   370  018E                     	;# 
   371  0191                     	;# 
   372  0191                     	;# 
   373  0192                     	;# 
   374  0193                     	;# 
   375  0193                     	;# 
   376  0194                     	;# 
   377  0195                     	;# 
   378  0196                     	;# 
   379  0197                     	;# 
   380  0199                     	;# 
   381  019A                     	;# 
   382  019B                     	;# 
   383  019B                     	;# 
   384  019B                     	;# 
   385  019B                     	;# 
   386  019C                     	;# 
   387  019C                     	;# 
   388  019D                     	;# 
   389  019E                     	;# 
   390  019F                     	;# 
   391  020D                     	;# 
   392  0210                     	;# 
   393  0211                     	;# 
   394  0211                     	;# 
   395  0212                     	;# 
   396  0212                     	;# 
   397  0213                     	;# 
   398  0213                     	;# 
   399  0214                     	;# 
   400  0214                     	;# 
   401  0215                     	;# 
   402  0215                     	;# 
   403  0215                     	;# 
   404  0216                     	;# 
   405  0216                     	;# 
   406  0217                     	;# 
   407  0217                     	;# 
   408  0291                     	;# 
   409  0291                     	;# 
   410  0292                     	;# 
   411  0293                     	;# 
   412  0298                     	;# 
   413  0298                     	;# 
   414  0299                     	;# 
   415  029A                     	;# 
   416  0394                     	;# 
   417  0395                     	;# 
   418  0396                     	;# 
   419  0FE4                     	;# 
   420  0FE5                     	;# 
   421  0FE6                     	;# 
   422  0FE7                     	;# 
   423  0FE8                     	;# 
   424  0FE9                     	;# 
   425  0FEA                     	;# 
   426  0FEB                     	;# 
   427  0FED                     	;# 
   428  0FEE                     	;# 
   429  0FEF                     	;# 
   430  0000                     	;# 
   431  0001                     	;# 
   432  0002                     	;# 
   433  0003                     	;# 
   434  0004                     	;# 
   435  0005                     	;# 
   436  0006                     	;# 
   437  0007                     	;# 
   438  0008                     	;# 
   439  0009                     	;# 
   440  000A                     	;# 
   441  000B                     	;# 
   442  000C                     	;# 
   443  000D                     	;# 
   444  000E                     	;# 
   445  0010                     	;# 
   446  0011                     	;# 
   447  0012                     	;# 
   448  0015                     	;# 
   449  0016                     	;# 
   450  0016                     	;# 
   451  0017                     	;# 
   452  0018                     	;# 
   453  0019                     	;# 
   454  001A                     	;# 
   455  001B                     	;# 
   456  001C                     	;# 
   457  008C                     	;# 
   458  008D                     	;# 
   459  008E                     	;# 
   460  0090                     	;# 
   461  0091                     	;# 
   462  0092                     	;# 
   463  0095                     	;# 
   464  0096                     	;# 
   465  0097                     	;# 
   466  0099                     	;# 
   467  009A                     	;# 
   468  009B                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  010C                     	;# 
   474  010D                     	;# 
   475  010E                     	;# 
   476  0116                     	;# 
   477  0117                     	;# 
   478  011D                     	;# 
   479  018C                     	;# 
   480  018D                     	;# 
   481  018E                     	;# 
   482  0191                     	;# 
   483  0191                     	;# 
   484  0192                     	;# 
   485  0193                     	;# 
   486  0193                     	;# 
   487  0194                     	;# 
   488  0195                     	;# 
   489  0196                     	;# 
   490  0197                     	;# 
   491  0199                     	;# 
   492  019A                     	;# 
   493  019B                     	;# 
   494  019B                     	;# 
   495  019B                     	;# 
   496  019B                     	;# 
   497  019C                     	;# 
   498  019C                     	;# 
   499  019D                     	;# 
   500  019E                     	;# 
   501  019F                     	;# 
   502  020D                     	;# 
   503  0210                     	;# 
   504  0211                     	;# 
   505  0211                     	;# 
   506  0212                     	;# 
   507  0212                     	;# 
   508  0213                     	;# 
   509  0213                     	;# 
   510  0214                     	;# 
   511  0214                     	;# 
   512  0215                     	;# 
   513  0215                     	;# 
   514  0215                     	;# 
   515  0216                     	;# 
   516  0216                     	;# 
   517  0217                     	;# 
   518  0217                     	;# 
   519  0291                     	;# 
   520  0291                     	;# 
   521  0292                     	;# 
   522  0293                     	;# 
   523  0298                     	;# 
   524  0298                     	;# 
   525  0299                     	;# 
   526  029A                     	;# 
   527  0394                     	;# 
   528  0395                     	;# 
   529  0396                     	;# 
   530  0FE4                     	;# 
   531  0FE5                     	;# 
   532  0FE6                     	;# 
   533  0FE7                     	;# 
   534  0FE8                     	;# 
   535  0FE9                     	;# 
   536  0FEA                     	;# 
   537  0FEB                     	;# 
   538  0FED                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541  0000                     	;# 
   542  0001                     	;# 
   543  0002                     	;# 
   544  0003                     	;# 
   545  0004                     	;# 
   546  0005                     	;# 
   547  0006                     	;# 
   548  0007                     	;# 
   549  0008                     	;# 
   550  0009                     	;# 
   551  000A                     	;# 
   552  000B                     	;# 
   553  000C                     	;# 
   554  000D                     	;# 
   555  000E                     	;# 
   556  0010                     	;# 
   557  0011                     	;# 
   558  0012                     	;# 
   559  0015                     	;# 
   560  0016                     	;# 
   561  0016                     	;# 
   562  0017                     	;# 
   563  0018                     	;# 
   564  0019                     	;# 
   565  001A                     	;# 
   566  001B                     	;# 
   567  001C                     	;# 
   568  008C                     	;# 
   569  008D                     	;# 
   570  008E                     	;# 
   571  0090                     	;# 
   572  0091                     	;# 
   573  0092                     	;# 
   574  0095                     	;# 
   575  0096                     	;# 
   576  0097                     	;# 
   577  0099                     	;# 
   578  009A                     	;# 
   579  009B                     	;# 
   580  009B                     	;# 
   581  009C                     	;# 
   582  009D                     	;# 
   583  009E                     	;# 
   584  010C                     	;# 
   585  010D                     	;# 
   586  010E                     	;# 
   587  0116                     	;# 
   588  0117                     	;# 
   589  011D                     	;# 
   590  018C                     	;# 
   591  018D                     	;# 
   592  018E                     	;# 
   593  0191                     	;# 
   594  0191                     	;# 
   595  0192                     	;# 
   596  0193                     	;# 
   597  0193                     	;# 
   598  0194                     	;# 
   599  0195                     	;# 
   600  0196                     	;# 
   601  0197                     	;# 
   602  0199                     	;# 
   603  019A                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019C                     	;# 
   609  019C                     	;# 
   610  019D                     	;# 
   611  019E                     	;# 
   612  019F                     	;# 
   613  020D                     	;# 
   614  0210                     	;# 
   615  0211                     	;# 
   616  0211                     	;# 
   617  0212                     	;# 
   618  0212                     	;# 
   619  0213                     	;# 
   620  0213                     	;# 
   621  0214                     	;# 
   622  0214                     	;# 
   623  0215                     	;# 
   624  0215                     	;# 
   625  0215                     	;# 
   626  0216                     	;# 
   627  0216                     	;# 
   628  0217                     	;# 
   629  0217                     	;# 
   630  0291                     	;# 
   631  0291                     	;# 
   632  0292                     	;# 
   633  0293                     	;# 
   634  0298                     	;# 
   635  0298                     	;# 
   636  0299                     	;# 
   637  029A                     	;# 
   638  0394                     	;# 
   639  0395                     	;# 
   640  0396                     	;# 
   641  0FE4                     	;# 
   642  0FE5                     	;# 
   643  0FE6                     	;# 
   644  0FE7                     	;# 
   645  0FE8                     	;# 
   646  0FE9                     	;# 
   647  0FEA                     	;# 
   648  0FEB                     	;# 
   649  0FED                     	;# 
   650  0FEE                     	;# 
   651  0FEF                     	;# 
   652  0000                     	;# 
   653  0001                     	;# 
   654  0002                     	;# 
   655  0003                     	;# 
   656  0004                     	;# 
   657  0005                     	;# 
   658  0006                     	;# 
   659  0007                     	;# 
   660  0008                     	;# 
   661  0009                     	;# 
   662  000A                     	;# 
   663  000B                     	;# 
   664  000C                     	;# 
   665  000D                     	;# 
   666  000E                     	;# 
   667  0010                     	;# 
   668  0011                     	;# 
   669  0012                     	;# 
   670  0015                     	;# 
   671  0016                     	;# 
   672  0016                     	;# 
   673  0017                     	;# 
   674  0018                     	;# 
   675  0019                     	;# 
   676  001A                     	;# 
   677  001B                     	;# 
   678  001C                     	;# 
   679  008C                     	;# 
   680  008D                     	;# 
   681  008E                     	;# 
   682  0090                     	;# 
   683  0091                     	;# 
   684  0092                     	;# 
   685  0095                     	;# 
   686  0096                     	;# 
   687  0097                     	;# 
   688  0099                     	;# 
   689  009A                     	;# 
   690  009B                     	;# 
   691  009B                     	;# 
   692  009C                     	;# 
   693  009D                     	;# 
   694  009E                     	;# 
   695  010C                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  0116                     	;# 
   699  0117                     	;# 
   700  011D                     	;# 
   701  018C                     	;# 
   702  018D                     	;# 
   703  018E                     	;# 
   704  0191                     	;# 
   705  0191                     	;# 
   706  0192                     	;# 
   707  0193                     	;# 
   708  0193                     	;# 
   709  0194                     	;# 
   710  0195                     	;# 
   711  0196                     	;# 
   712  0197                     	;# 
   713  0199                     	;# 
   714  019A                     	;# 
   715  019B                     	;# 
   716  019B                     	;# 
   717  019B                     	;# 
   718  019B                     	;# 
   719  019C                     	;# 
   720  019C                     	;# 
   721  019D                     	;# 
   722  019E                     	;# 
   723  019F                     	;# 
   724  020D                     	;# 
   725  0210                     	;# 
   726  0211                     	;# 
   727  0211                     	;# 
   728  0212                     	;# 
   729  0212                     	;# 
   730  0213                     	;# 
   731  0213                     	;# 
   732  0214                     	;# 
   733  0214                     	;# 
   734  0215                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0216                     	;# 
   738  0216                     	;# 
   739  0217                     	;# 
   740  0217                     	;# 
   741  0291                     	;# 
   742  0291                     	;# 
   743  0292                     	;# 
   744  0293                     	;# 
   745  0298                     	;# 
   746  0298                     	;# 
   747  0299                     	;# 
   748  029A                     	;# 
   749  0394                     	;# 
   750  0395                     	;# 
   751  0396                     	;# 
   752  0FE4                     	;# 
   753  0FE5                     	;# 
   754  0FE6                     	;# 
   755  0FE7                     	;# 
   756  0FE8                     	;# 
   757  0FE9                     	;# 
   758  0FEA                     	;# 
   759  0FEB                     	;# 
   760  0FED                     	;# 
   761  0FEE                     	;# 
   762  0FEF                     	;# 
   763  0000                     	;# 
   764  0001                     	;# 
   765  0002                     	;# 
   766  0003                     	;# 
   767  0004                     	;# 
   768  0005                     	;# 
   769  0006                     	;# 
   770  0007                     	;# 
   771  0008                     	;# 
   772  0009                     	;# 
   773  000A                     	;# 
   774  000B                     	;# 
   775  000C                     	;# 
   776  000D                     	;# 
   777  000E                     	;# 
   778  0010                     	;# 
   779  0011                     	;# 
   780  0012                     	;# 
   781  0015                     	;# 
   782  0016                     	;# 
   783  0016                     	;# 
   784  0017                     	;# 
   785  0018                     	;# 
   786  0019                     	;# 
   787  001A                     	;# 
   788  001B                     	;# 
   789  001C                     	;# 
   790  008C                     	;# 
   791  008D                     	;# 
   792  008E                     	;# 
   793  0090                     	;# 
   794  0091                     	;# 
   795  0092                     	;# 
   796  0095                     	;# 
   797  0096                     	;# 
   798  0097                     	;# 
   799  0099                     	;# 
   800  009A                     	;# 
   801  009B                     	;# 
   802  009B                     	;# 
   803  009C                     	;# 
   804  009D                     	;# 
   805  009E                     	;# 
   806  010C                     	;# 
   807  010D                     	;# 
   808  010E                     	;# 
   809  0116                     	;# 
   810  0117                     	;# 
   811  011D                     	;# 
   812  018C                     	;# 
   813  018D                     	;# 
   814  018E                     	;# 
   815  0191                     	;# 
   816  0191                     	;# 
   817  0192                     	;# 
   818  0193                     	;# 
   819  0193                     	;# 
   820  0194                     	;# 
   821  0195                     	;# 
   822  0196                     	;# 
   823  0197                     	;# 
   824  0199                     	;# 
   825  019A                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019B                     	;# 
   829  019B                     	;# 
   830  019C                     	;# 
   831  019C                     	;# 
   832  019D                     	;# 
   833  019E                     	;# 
   834  019F                     	;# 
   835  020D                     	;# 
   836  0210                     	;# 
   837  0211                     	;# 
   838  0211                     	;# 
   839  0212                     	;# 
   840  0212                     	;# 
   841  0213                     	;# 
   842  0213                     	;# 
   843  0214                     	;# 
   844  0214                     	;# 
   845  0215                     	;# 
   846  0215                     	;# 
   847  0215                     	;# 
   848  0216                     	;# 
   849  0216                     	;# 
   850  0217                     	;# 
   851  0217                     	;# 
   852  0291                     	;# 
   853  0291                     	;# 
   854  0292                     	;# 
   855  0293                     	;# 
   856  0298                     	;# 
   857  0298                     	;# 
   858  0299                     	;# 
   859  029A                     	;# 
   860  0394                     	;# 
   861  0395                     	;# 
   862  0396                     	;# 
   863  0FE4                     	;# 
   864  0FE5                     	;# 
   865  0FE6                     	;# 
   866  0FE7                     	;# 
   867  0FE8                     	;# 
   868  0FE9                     	;# 
   869  0FEA                     	;# 
   870  0FEB                     	;# 
   871  0FED                     	;# 
   872  0FEE                     	;# 
   873  0FEF                     	;# 
   874  0000                     	;# 
   875  0001                     	;# 
   876  0002                     	;# 
   877  0003                     	;# 
   878  0004                     	;# 
   879  0005                     	;# 
   880  0006                     	;# 
   881  0007                     	;# 
   882  0008                     	;# 
   883  0009                     	;# 
   884  000A                     	;# 
   885  000B                     	;# 
   886  000C                     	;# 
   887  000D                     	;# 
   888  000E                     	;# 
   889  0010                     	;# 
   890  0011                     	;# 
   891  0012                     	;# 
   892  0015                     	;# 
   893  0016                     	;# 
   894  0016                     	;# 
   895  0017                     	;# 
   896  0018                     	;# 
   897  0019                     	;# 
   898  001A                     	;# 
   899  001B                     	;# 
   900  001C                     	;# 
   901  008C                     	;# 
   902  008D                     	;# 
   903  008E                     	;# 
   904  0090                     	;# 
   905  0091                     	;# 
   906  0092                     	;# 
   907  0095                     	;# 
   908  0096                     	;# 
   909  0097                     	;# 
   910  0099                     	;# 
   911  009A                     	;# 
   912  009B                     	;# 
   913  009B                     	;# 
   914  009C                     	;# 
   915  009D                     	;# 
   916  009E                     	;# 
   917  010C                     	;# 
   918  010D                     	;# 
   919  010E                     	;# 
   920  0116                     	;# 
   921  0117                     	;# 
   922  011D                     	;# 
   923  018C                     	;# 
   924  018D                     	;# 
   925  018E                     	;# 
   926  0191                     	;# 
   927  0191                     	;# 
   928  0192                     	;# 
   929  0193                     	;# 
   930  0193                     	;# 
   931  0194                     	;# 
   932  0195                     	;# 
   933  0196                     	;# 
   934  0197                     	;# 
   935  0199                     	;# 
   936  019A                     	;# 
   937  019B                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019C                     	;# 
   942  019C                     	;# 
   943  019D                     	;# 
   944  019E                     	;# 
   945  019F                     	;# 
   946  020D                     	;# 
   947  0210                     	;# 
   948  0211                     	;# 
   949  0211                     	;# 
   950  0212                     	;# 
   951  0212                     	;# 
   952  0213                     	;# 
   953  0213                     	;# 
   954  0214                     	;# 
   955  0214                     	;# 
   956  0215                     	;# 
   957  0215                     	;# 
   958  0215                     	;# 
   959  0216                     	;# 
   960  0216                     	;# 
   961  0217                     	;# 
   962  0217                     	;# 
   963  0291                     	;# 
   964  0291                     	;# 
   965  0292                     	;# 
   966  0293                     	;# 
   967  0298                     	;# 
   968  0298                     	;# 
   969  0299                     	;# 
   970  029A                     	;# 
   971  0394                     	;# 
   972  0395                     	;# 
   973  0396                     	;# 
   974  0FE4                     	;# 
   975  0FE5                     	;# 
   976  0FE6                     	;# 
   977  0FE7                     	;# 
   978  0FE8                     	;# 
   979  0FE9                     	;# 
   980  0FEA                     	;# 
   981  0FEB                     	;# 
   982  0FED                     	;# 
   983  0FEE                     	;# 
   984  0FEF                     	;# 
   985  0000                     	;# 
   986  0001                     	;# 
   987  0002                     	;# 
   988  0003                     	;# 
   989  0004                     	;# 
   990  0005                     	;# 
   991  0006                     	;# 
   992  0007                     	;# 
   993  0008                     	;# 
   994  0009                     	;# 
   995  000A                     	;# 
   996  000B                     	;# 
   997  000C                     	;# 
   998  000D                     	;# 
   999  000E                     	;# 
  1000  0010                     	;# 
  1001  0011                     	;# 
  1002  0012                     	;# 
  1003  0015                     	;# 
  1004  0016                     	;# 
  1005  0016                     	;# 
  1006  0017                     	;# 
  1007  0018                     	;# 
  1008  0019                     	;# 
  1009  001A                     	;# 
  1010  001B                     	;# 
  1011  001C                     	;# 
  1012  008C                     	;# 
  1013  008D                     	;# 
  1014  008E                     	;# 
  1015  0090                     	;# 
  1016  0091                     	;# 
  1017  0092                     	;# 
  1018  0095                     	;# 
  1019  0096                     	;# 
  1020  0097                     	;# 
  1021  0099                     	;# 
  1022  009A                     	;# 
  1023  009B                     	;# 
  1024  009B                     	;# 
  1025  009C                     	;# 
  1026  009D                     	;# 
  1027  009E                     	;# 
  1028  010C                     	;# 
  1029  010D                     	;# 
  1030  010E                     	;# 
  1031  0116                     	;# 
  1032  0117                     	;# 
  1033  011D                     	;# 
  1034  018C                     	;# 
  1035  018D                     	;# 
  1036  018E                     	;# 
  1037  0191                     	;# 
  1038  0191                     	;# 
  1039  0192                     	;# 
  1040  0193                     	;# 
  1041  0193                     	;# 
  1042  0194                     	;# 
  1043  0195                     	;# 
  1044  0196                     	;# 
  1045  0197                     	;# 
  1046  0199                     	;# 
  1047  019A                     	;# 
  1048  019B                     	;# 
  1049  019B                     	;# 
  1050  019B                     	;# 
  1051  019B                     	;# 
  1052  019C                     	;# 
  1053  019C                     	;# 
  1054  019D                     	;# 
  1055  019E                     	;# 
  1056  019F                     	;# 
  1057  020D                     	;# 
  1058  0210                     	;# 
  1059  0211                     	;# 
  1060  0211                     	;# 
  1061  0212                     	;# 
  1062  0212                     	;# 
  1063  0213                     	;# 
  1064  0213                     	;# 
  1065  0214                     	;# 
  1066  0214                     	;# 
  1067  0215                     	;# 
  1068  0215                     	;# 
  1069  0215                     	;# 
  1070  0216                     	;# 
  1071  0216                     	;# 
  1072  0217                     	;# 
  1073  0217                     	;# 
  1074  0291                     	;# 
  1075  0291                     	;# 
  1076  0292                     	;# 
  1077  0293                     	;# 
  1078  0298                     	;# 
  1079  0298                     	;# 
  1080  0299                     	;# 
  1081  029A                     	;# 
  1082  0394                     	;# 
  1083  0395                     	;# 
  1084  0396                     	;# 
  1085  0FE4                     	;# 
  1086  0FE5                     	;# 
  1087  0FE6                     	;# 
  1088  0FE7                     	;# 
  1089  0FE8                     	;# 
  1090  0FE9                     	;# 
  1091  0FEA                     	;# 
  1092  0FEB                     	;# 
  1093  0FED                     	;# 
  1094  0FEE                     	;# 
  1095  0FEF                     	;# 
  1096  0000                     	;# 
  1097  0001                     	;# 
  1098  0002                     	;# 
  1099  0003                     	;# 
  1100  0004                     	;# 
  1101  0005                     	;# 
  1102  0006                     	;# 
  1103  0007                     	;# 
  1104  0008                     	;# 
  1105  0009                     	;# 
  1106  000A                     	;# 
  1107  000B                     	;# 
  1108  000C                     	;# 
  1109  000D                     	;# 
  1110  000E                     	;# 
  1111  0010                     	;# 
  1112  0011                     	;# 
  1113  0012                     	;# 
  1114  0015                     	;# 
  1115  0016                     	;# 
  1116  0016                     	;# 
  1117  0017                     	;# 
  1118  0018                     	;# 
  1119  0019                     	;# 
  1120  001A                     	;# 
  1121  001B                     	;# 
  1122  001C                     	;# 
  1123  008C                     	;# 
  1124  008D                     	;# 
  1125  008E                     	;# 
  1126  0090                     	;# 
  1127  0091                     	;# 
  1128  0092                     	;# 
  1129  0095                     	;# 
  1130  0096                     	;# 
  1131  0097                     	;# 
  1132  0099                     	;# 
  1133  009A                     	;# 
  1134  009B                     	;# 
  1135  009B                     	;# 
  1136  009C                     	;# 
  1137  009D                     	;# 
  1138  009E                     	;# 
  1139  010C                     	;# 
  1140  010D                     	;# 
  1141  010E                     	;# 
  1142  0116                     	;# 
  1143  0117                     	;# 
  1144  011D                     	;# 
  1145  018C                     	;# 
  1146  018D                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0194                     	;# 
  1154  0195                     	;# 
  1155  0196                     	;# 
  1156  0197                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019D                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  020D                     	;# 
  1169  0210                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0216                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0217                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0298                     	;# 
  1190  0298                     	;# 
  1191  0299                     	;# 
  1192  029A                     	;# 
  1193  0394                     	;# 
  1194  0395                     	;# 
  1195  0396                     	;# 
  1196  0FE4                     	;# 
  1197  0FE5                     	;# 
  1198  0FE6                     	;# 
  1199  0FE7                     	;# 
  1200  0FE8                     	;# 
  1201  0FE9                     	;# 
  1202  0FEA                     	;# 
  1203  0FEB                     	;# 
  1204  0FED                     	;# 
  1205  0FEE                     	;# 
  1206  0FEF                     	;# 
  1207  0000                     	;# 
  1208  0001                     	;# 
  1209  0002                     	;# 
  1210  0003                     	;# 
  1211  0004                     	;# 
  1212  0005                     	;# 
  1213  0006                     	;# 
  1214  0007                     	;# 
  1215  0008                     	;# 
  1216  0009                     	;# 
  1217  000A                     	;# 
  1218  000B                     	;# 
  1219  000C                     	;# 
  1220  000D                     	;# 
  1221  000E                     	;# 
  1222  0010                     	;# 
  1223  0011                     	;# 
  1224  0012                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  001A                     	;# 
  1232  001B                     	;# 
  1233  001C                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  0090                     	;# 
  1238  0091                     	;# 
  1239  0092                     	;# 
  1240  0095                     	;# 
  1241  0096                     	;# 
  1242  0097                     	;# 
  1243  0099                     	;# 
  1244  009A                     	;# 
  1245  009B                     	;# 
  1246  009B                     	;# 
  1247  009C                     	;# 
  1248  009D                     	;# 
  1249  009E                     	;# 
  1250  010C                     	;# 
  1251  010D                     	;# 
  1252  010E                     	;# 
  1253  0116                     	;# 
  1254  0117                     	;# 
  1255  011D                     	;# 
  1256  018C                     	;# 
  1257  018D                     	;# 
  1258  018E                     	;# 
  1259  0191                     	;# 
  1260  0191                     	;# 
  1261  0192                     	;# 
  1262  0193                     	;# 
  1263  0193                     	;# 
  1264  0194                     	;# 
  1265  0195                     	;# 
  1266  0196                     	;# 
  1267  0197                     	;# 
  1268  0199                     	;# 
  1269  019A                     	;# 
  1270  019B                     	;# 
  1271  019B                     	;# 
  1272  019B                     	;# 
  1273  019B                     	;# 
  1274  019C                     	;# 
  1275  019C                     	;# 
  1276  019D                     	;# 
  1277  019E                     	;# 
  1278  019F                     	;# 
  1279  020D                     	;# 
  1280  0210                     	;# 
  1281  0211                     	;# 
  1282  0211                     	;# 
  1283  0212                     	;# 
  1284  0212                     	;# 
  1285  0213                     	;# 
  1286  0213                     	;# 
  1287  0214                     	;# 
  1288  0214                     	;# 
  1289  0215                     	;# 
  1290  0215                     	;# 
  1291  0215                     	;# 
  1292  0216                     	;# 
  1293  0216                     	;# 
  1294  0217                     	;# 
  1295  0217                     	;# 
  1296  0291                     	;# 
  1297  0291                     	;# 
  1298  0292                     	;# 
  1299  0293                     	;# 
  1300  0298                     	;# 
  1301  0298                     	;# 
  1302  0299                     	;# 
  1303  029A                     	;# 
  1304  0394                     	;# 
  1305  0395                     	;# 
  1306  0396                     	;# 
  1307  0FE4                     	;# 
  1308  0FE5                     	;# 
  1309  0FE6                     	;# 
  1310  0FE7                     	;# 
  1311  0FE8                     	;# 
  1312  0FE9                     	;# 
  1313  0FEA                     	;# 
  1314  0FEB                     	;# 
  1315  0FED                     	;# 
  1316  0FEE                     	;# 
  1317  0FEF                     	;# 
  1318  0000                     	;# 
  1319  0001                     	;# 
  1320  0002                     	;# 
  1321  0003                     	;# 
  1322  0004                     	;# 
  1323  0005                     	;# 
  1324  0006                     	;# 
  1325  0007                     	;# 
  1326  0008                     	;# 
  1327  0009                     	;# 
  1328  000A                     	;# 
  1329  000B                     	;# 
  1330  000C                     	;# 
  1331  000D                     	;# 
  1332  000E                     	;# 
  1333  0010                     	;# 
  1334  0011                     	;# 
  1335  0012                     	;# 
  1336  0015                     	;# 
  1337  0016                     	;# 
  1338  0016                     	;# 
  1339  0017                     	;# 
  1340  0018                     	;# 
  1341  0019                     	;# 
  1342  001A                     	;# 
  1343  001B                     	;# 
  1344  001C                     	;# 
  1345  008C                     	;# 
  1346  008D                     	;# 
  1347  008E                     	;# 
  1348  0090                     	;# 
  1349  0091                     	;# 
  1350  0092                     	;# 
  1351  0095                     	;# 
  1352  0096                     	;# 
  1353  0097                     	;# 
  1354  0099                     	;# 
  1355  009A                     	;# 
  1356  009B                     	;# 
  1357  009B                     	;# 
  1358  009C                     	;# 
  1359  009D                     	;# 
  1360  009E                     	;# 
  1361  010C                     	;# 
  1362  010D                     	;# 
  1363  010E                     	;# 
  1364  0116                     	;# 
  1365  0117                     	;# 
  1366  011D                     	;# 
  1367  018C                     	;# 
  1368  018D                     	;# 
  1369  018E                     	;# 
  1370  0191                     	;# 
  1371  0191                     	;# 
  1372  0192                     	;# 
  1373  0193                     	;# 
  1374  0193                     	;# 
  1375  0194                     	;# 
  1376  0195                     	;# 
  1377  0196                     	;# 
  1378  0197                     	;# 
  1379  0199                     	;# 
  1380  019A                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019B                     	;# 
  1384  019B                     	;# 
  1385  019C                     	;# 
  1386  019C                     	;# 
  1387  019D                     	;# 
  1388  019E                     	;# 
  1389  019F                     	;# 
  1390  020D                     	;# 
  1391  0210                     	;# 
  1392  0211                     	;# 
  1393  0211                     	;# 
  1394  0212                     	;# 
  1395  0212                     	;# 
  1396  0213                     	;# 
  1397  0213                     	;# 
  1398  0214                     	;# 
  1399  0214                     	;# 
  1400  0215                     	;# 
  1401  0215                     	;# 
  1402  0215                     	;# 
  1403  0216                     	;# 
  1404  0216                     	;# 
  1405  0217                     	;# 
  1406  0217                     	;# 
  1407  0291                     	;# 
  1408  0291                     	;# 
  1409  0292                     	;# 
  1410  0293                     	;# 
  1411  0298                     	;# 
  1412  0298                     	;# 
  1413  0299                     	;# 
  1414  029A                     	;# 
  1415  0394                     	;# 
  1416  0395                     	;# 
  1417  0396                     	;# 
  1418  0FE4                     	;# 
  1419  0FE5                     	;# 
  1420  0FE6                     	;# 
  1421  0FE7                     	;# 
  1422  0FE8                     	;# 
  1423  0FE9                     	;# 
  1424  0FEA                     	;# 
  1425  0FEB                     	;# 
  1426  0FED                     	;# 
  1427  0FEE                     	;# 
  1428  0FEF                     	;# 
  1429  0000                     	;# 
  1430  0001                     	;# 
  1431  0002                     	;# 
  1432  0003                     	;# 
  1433  0004                     	;# 
  1434  0005                     	;# 
  1435  0006                     	;# 
  1436  0007                     	;# 
  1437  0008                     	;# 
  1438  0009                     	;# 
  1439  000A                     	;# 
  1440  000B                     	;# 
  1441  000C                     	;# 
  1442  000D                     	;# 
  1443  000E                     	;# 
  1444  0010                     	;# 
  1445  0011                     	;# 
  1446  0012                     	;# 
  1447  0015                     	;# 
  1448  0016                     	;# 
  1449  0016                     	;# 
  1450  0017                     	;# 
  1451  0018                     	;# 
  1452  0019                     	;# 
  1453  001A                     	;# 
  1454  001B                     	;# 
  1455  001C                     	;# 
  1456  008C                     	;# 
  1457  008D                     	;# 
  1458  008E                     	;# 
  1459  0090                     	;# 
  1460  0091                     	;# 
  1461  0092                     	;# 
  1462  0095                     	;# 
  1463  0096                     	;# 
  1464  0097                     	;# 
  1465  0099                     	;# 
  1466  009A                     	;# 
  1467  009B                     	;# 
  1468  009B                     	;# 
  1469  009C                     	;# 
  1470  009D                     	;# 
  1471  009E                     	;# 
  1472  010C                     	;# 
  1473  010D                     	;# 
  1474  010E                     	;# 
  1475  0116                     	;# 
  1476  0117                     	;# 
  1477  011D                     	;# 
  1478  018C                     	;# 
  1479  018D                     	;# 
  1480  018E                     	;# 
  1481  0191                     	;# 
  1482  0191                     	;# 
  1483  0192                     	;# 
  1484  0193                     	;# 
  1485  0193                     	;# 
  1486  0194                     	;# 
  1487  0195                     	;# 
  1488  0196                     	;# 
  1489  0197                     	;# 
  1490  0199                     	;# 
  1491  019A                     	;# 
  1492  019B                     	;# 
  1493  019B                     	;# 
  1494  019B                     	;# 
  1495  019B                     	;# 
  1496  019C                     	;# 
  1497  019C                     	;# 
  1498  019D                     	;# 
  1499  019E                     	;# 
  1500  019F                     	;# 
  1501  020D                     	;# 
  1502  0210                     	;# 
  1503  0211                     	;# 
  1504  0211                     	;# 
  1505  0212                     	;# 
  1506  0212                     	;# 
  1507  0213                     	;# 
  1508  0213                     	;# 
  1509  0214                     	;# 
  1510  0214                     	;# 
  1511  0215                     	;# 
  1512  0215                     	;# 
  1513  0215                     	;# 
  1514  0216                     	;# 
  1515  0216                     	;# 
  1516  0217                     	;# 
  1517  0217                     	;# 
  1518  0291                     	;# 
  1519  0291                     	;# 
  1520  0292                     	;# 
  1521  0293                     	;# 
  1522  0298                     	;# 
  1523  0298                     	;# 
  1524  0299                     	;# 
  1525  029A                     	;# 
  1526  0394                     	;# 
  1527  0395                     	;# 
  1528  0396                     	;# 
  1529  0FE4                     	;# 
  1530  0FE5                     	;# 
  1531  0FE6                     	;# 
  1532  0FE7                     	;# 
  1533  0FE8                     	;# 
  1534  0FE9                     	;# 
  1535  0FEA                     	;# 
  1536  0FEB                     	;# 
  1537  0FED                     	;# 
  1538  0FEE                     	;# 
  1539  0FEF                     	;# 
  1540  0000                     	;# 
  1541  0001                     	;# 
  1542  0002                     	;# 
  1543  0003                     	;# 
  1544  0004                     	;# 
  1545  0005                     	;# 
  1546  0006                     	;# 
  1547  0007                     	;# 
  1548  0008                     	;# 
  1549  0009                     	;# 
  1550  000A                     	;# 
  1551  000B                     	;# 
  1552  000C                     	;# 
  1553  000D                     	;# 
  1554  000E                     	;# 
  1555  0010                     	;# 
  1556  0011                     	;# 
  1557  0012                     	;# 
  1558  0015                     	;# 
  1559  0016                     	;# 
  1560  0016                     	;# 
  1561  0017                     	;# 
  1562  0018                     	;# 
  1563  0019                     	;# 
  1564  001A                     	;# 
  1565  001B                     	;# 
  1566  001C                     	;# 
  1567  008C                     	;# 
  1568  008D                     	;# 
  1569  008E                     	;# 
  1570  0090                     	;# 
  1571  0091                     	;# 
  1572  0092                     	;# 
  1573  0095                     	;# 
  1574  0096                     	;# 
  1575  0097                     	;# 
  1576  0099                     	;# 
  1577  009A                     	;# 
  1578  009B                     	;# 
  1579  009B                     	;# 
  1580  009C                     	;# 
  1581  009D                     	;# 
  1582  009E                     	;# 
  1583  010C                     	;# 
  1584  010D                     	;# 
  1585  010E                     	;# 
  1586  0116                     	;# 
  1587  0117                     	;# 
  1588  011D                     	;# 
  1589  018C                     	;# 
  1590  018D                     	;# 
  1591  018E                     	;# 
  1592  0191                     	;# 
  1593  0191                     	;# 
  1594  0192                     	;# 
  1595  0193                     	;# 
  1596  0193                     	;# 
  1597  0194                     	;# 
  1598  0195                     	;# 
  1599  0196                     	;# 
  1600  0197                     	;# 
  1601  0199                     	;# 
  1602  019A                     	;# 
  1603  019B                     	;# 
  1604  019B                     	;# 
  1605  019B                     	;# 
  1606  019B                     	;# 
  1607  019C                     	;# 
  1608  019C                     	;# 
  1609  019D                     	;# 
  1610  019E                     	;# 
  1611  019F                     	;# 
  1612  020D                     	;# 
  1613  0210                     	;# 
  1614  0211                     	;# 
  1615  0211                     	;# 
  1616  0212                     	;# 
  1617  0212                     	;# 
  1618  0213                     	;# 
  1619  0213                     	;# 
  1620  0214                     	;# 
  1621  0214                     	;# 
  1622  0215                     	;# 
  1623  0215                     	;# 
  1624  0215                     	;# 
  1625  0216                     	;# 
  1626  0216                     	;# 
  1627  0217                     	;# 
  1628  0217                     	;# 
  1629  0291                     	;# 
  1630  0291                     	;# 
  1631  0292                     	;# 
  1632  0293                     	;# 
  1633  0298                     	;# 
  1634  0298                     	;# 
  1635  0299                     	;# 
  1636  029A                     	;# 
  1637  0394                     	;# 
  1638  0395                     	;# 
  1639  0396                     	;# 
  1640  0FE4                     	;# 
  1641  0FE5                     	;# 
  1642  0FE6                     	;# 
  1643  0FE7                     	;# 
  1644  0FE8                     	;# 
  1645  0FE9                     	;# 
  1646  0FEA                     	;# 
  1647  0FEB                     	;# 
  1648  0FED                     	;# 
  1649  0FEE                     	;# 
  1650  0FEF                     	;# 
  1651  0000                     	;# 
  1652  0001                     	;# 
  1653  0002                     	;# 
  1654  0003                     	;# 
  1655  0004                     	;# 
  1656  0005                     	;# 
  1657  0006                     	;# 
  1658  0007                     	;# 
  1659  0008                     	;# 
  1660  0009                     	;# 
  1661  000A                     	;# 
  1662  000B                     	;# 
  1663  000C                     	;# 
  1664  000D                     	;# 
  1665  000E                     	;# 
  1666  0010                     	;# 
  1667  0011                     	;# 
  1668  0012                     	;# 
  1669  0015                     	;# 
  1670  0016                     	;# 
  1671  0016                     	;# 
  1672  0017                     	;# 
  1673  0018                     	;# 
  1674  0019                     	;# 
  1675  001A                     	;# 
  1676  001B                     	;# 
  1677  001C                     	;# 
  1678  008C                     	;# 
  1679  008D                     	;# 
  1680  008E                     	;# 
  1681  0090                     	;# 
  1682  0091                     	;# 
  1683  0092                     	;# 
  1684  0095                     	;# 
  1685  0096                     	;# 
  1686  0097                     	;# 
  1687  0099                     	;# 
  1688  009A                     	;# 
  1689  009B                     	;# 
  1690  009B                     	;# 
  1691  009C                     	;# 
  1692  009D                     	;# 
  1693  009E                     	;# 
  1694  010C                     	;# 
  1695  010D                     	;# 
  1696  010E                     	;# 
  1697  0116                     	;# 
  1698  0117                     	;# 
  1699  011D                     	;# 
  1700  018C                     	;# 
  1701  018D                     	;# 
  1702  018E                     	;# 
  1703  0191                     	;# 
  1704  0191                     	;# 
  1705  0192                     	;# 
  1706  0193                     	;# 
  1707  0193                     	;# 
  1708  0194                     	;# 
  1709  0195                     	;# 
  1710  0196                     	;# 
  1711  0197                     	;# 
  1712  0199                     	;# 
  1713  019A                     	;# 
  1714  019B                     	;# 
  1715  019B                     	;# 
  1716  019B                     	;# 
  1717  019B                     	;# 
  1718  019C                     	;# 
  1719  019C                     	;# 
  1720  019D                     	;# 
  1721  019E                     	;# 
  1722  019F                     	;# 
  1723  020D                     	;# 
  1724  0210                     	;# 
  1725  0211                     	;# 
  1726  0211                     	;# 
  1727  0212                     	;# 
  1728  0212                     	;# 
  1729  0213                     	;# 
  1730  0213                     	;# 
  1731  0214                     	;# 
  1732  0214                     	;# 
  1733  0215                     	;# 
  1734  0215                     	;# 
  1735  0215                     	;# 
  1736  0216                     	;# 
  1737  0216                     	;# 
  1738  0217                     	;# 
  1739  0217                     	;# 
  1740  0291                     	;# 
  1741  0291                     	;# 
  1742  0292                     	;# 
  1743  0293                     	;# 
  1744  0298                     	;# 
  1745  0298                     	;# 
  1746  0299                     	;# 
  1747  029A                     	;# 
  1748  0394                     	;# 
  1749  0395                     	;# 
  1750  0396                     	;# 
  1751  0FE4                     	;# 
  1752  0FE5                     	;# 
  1753  0FE6                     	;# 
  1754  0FE7                     	;# 
  1755  0FE8                     	;# 
  1756  0FE9                     	;# 
  1757  0FEA                     	;# 
  1758  0FEB                     	;# 
  1759  0FED                     	;# 
  1760  0FEE                     	;# 
  1761  0FEF                     	;# 
  1762  0000                     	;# 
  1763  0001                     	;# 
  1764  0002                     	;# 
  1765  0003                     	;# 
  1766  0004                     	;# 
  1767  0005                     	;# 
  1768  0006                     	;# 
  1769  0007                     	;# 
  1770  0008                     	;# 
  1771  0009                     	;# 
  1772  000A                     	;# 
  1773  000B                     	;# 
  1774  000C                     	;# 
  1775  000D                     	;# 
  1776  000E                     	;# 
  1777  0010                     	;# 
  1778  0011                     	;# 
  1779  0012                     	;# 
  1780  0015                     	;# 
  1781  0016                     	;# 
  1782  0016                     	;# 
  1783  0017                     	;# 
  1784  0018                     	;# 
  1785  0019                     	;# 
  1786  001A                     	;# 
  1787  001B                     	;# 
  1788  001C                     	;# 
  1789  008C                     	;# 
  1790  008D                     	;# 
  1791  008E                     	;# 
  1792  0090                     	;# 
  1793  0091                     	;# 
  1794  0092                     	;# 
  1795  0095                     	;# 
  1796  0096                     	;# 
  1797  0097                     	;# 
  1798  0099                     	;# 
  1799  009A                     	;# 
  1800  009B                     	;# 
  1801  009B                     	;# 
  1802  009C                     	;# 
  1803  009D                     	;# 
  1804  009E                     	;# 
  1805  010C                     	;# 
  1806  010D                     	;# 
  1807  010E                     	;# 
  1808  0116                     	;# 
  1809  0117                     	;# 
  1810  011D                     	;# 
  1811  018C                     	;# 
  1812  018D                     	;# 
  1813  018E                     	;# 
  1814  0191                     	;# 
  1815  0191                     	;# 
  1816  0192                     	;# 
  1817  0193                     	;# 
  1818  0193                     	;# 
  1819  0194                     	;# 
  1820  0195                     	;# 
  1821  0196                     	;# 
  1822  0197                     	;# 
  1823  0199                     	;# 
  1824  019A                     	;# 
  1825  019B                     	;# 
  1826  019B                     	;# 
  1827  019B                     	;# 
  1828  019B                     	;# 
  1829  019C                     	;# 
  1830  019C                     	;# 
  1831  019D                     	;# 
  1832  019E                     	;# 
  1833  019F                     	;# 
  1834  020D                     	;# 
  1835  0210                     	;# 
  1836  0211                     	;# 
  1837  0211                     	;# 
  1838  0212                     	;# 
  1839  0212                     	;# 
  1840  0213                     	;# 
  1841  0213                     	;# 
  1842  0214                     	;# 
  1843  0214                     	;# 
  1844  0215                     	;# 
  1845  0215                     	;# 
  1846  0215                     	;# 
  1847  0216                     	;# 
  1848  0216                     	;# 
  1849  0217                     	;# 
  1850  0217                     	;# 
  1851  0291                     	;# 
  1852  0291                     	;# 
  1853  0292                     	;# 
  1854  0293                     	;# 
  1855  0298                     	;# 
  1856  0298                     	;# 
  1857  0299                     	;# 
  1858  029A                     	;# 
  1859  0394                     	;# 
  1860  0395                     	;# 
  1861  0396                     	;# 
  1862  0FE4                     	;# 
  1863  0FE5                     	;# 
  1864  0FE6                     	;# 
  1865  0FE7                     	;# 
  1866  0FE8                     	;# 
  1867  0FE9                     	;# 
  1868  0FEA                     	;# 
  1869  0FEB                     	;# 
  1870  0FED                     	;# 
  1871  0FEE                     	;# 
  1872  0FEF                     	;# 
  1873  0000                     	;# 
  1874  0001                     	;# 
  1875  0002                     	;# 
  1876  0003                     	;# 
  1877  0004                     	;# 
  1878  0005                     	;# 
  1879  0006                     	;# 
  1880  0007                     	;# 
  1881  0008                     	;# 
  1882  0009                     	;# 
  1883  000A                     	;# 
  1884  000B                     	;# 
  1885  000C                     	;# 
  1886  000D                     	;# 
  1887  000E                     	;# 
  1888  0010                     	;# 
  1889  0011                     	;# 
  1890  0012                     	;# 
  1891  0015                     	;# 
  1892  0016                     	;# 
  1893  0016                     	;# 
  1894  0017                     	;# 
  1895  0018                     	;# 
  1896  0019                     	;# 
  1897  001A                     	;# 
  1898  001B                     	;# 
  1899  001C                     	;# 
  1900  008C                     	;# 
  1901  008D                     	;# 
  1902  008E                     	;# 
  1903  0090                     	;# 
  1904  0091                     	;# 
  1905  0092                     	;# 
  1906  0095                     	;# 
  1907  0096                     	;# 
  1908  0097                     	;# 
  1909  0099                     	;# 
  1910  009A                     	;# 
  1911  009B                     	;# 
  1912  009B                     	;# 
  1913  009C                     	;# 
  1914  009D                     	;# 
  1915  009E                     	;# 
  1916  010C                     	;# 
  1917  010D                     	;# 
  1918  010E                     	;# 
  1919  0116                     	;# 
  1920  0117                     	;# 
  1921  011D                     	;# 
  1922  018C                     	;# 
  1923  018D                     	;# 
  1924  018E                     	;# 
  1925  0191                     	;# 
  1926  0191                     	;# 
  1927  0192                     	;# 
  1928  0193                     	;# 
  1929  0193                     	;# 
  1930  0194                     	;# 
  1931  0195                     	;# 
  1932  0196                     	;# 
  1933  0197                     	;# 
  1934  0199                     	;# 
  1935  019A                     	;# 
  1936  019B                     	;# 
  1937  019B                     	;# 
  1938  019B                     	;# 
  1939  019B                     	;# 
  1940  019C                     	;# 
  1941  019C                     	;# 
  1942  019D                     	;# 
  1943  019E                     	;# 
  1944  019F                     	;# 
  1945  020D                     	;# 
  1946  0210                     	;# 
  1947  0211                     	;# 
  1948  0211                     	;# 
  1949  0212                     	;# 
  1950  0212                     	;# 
  1951  0213                     	;# 
  1952  0213                     	;# 
  1953  0214                     	;# 
  1954  0214                     	;# 
  1955  0215                     	;# 
  1956  0215                     	;# 
  1957  0215                     	;# 
  1958  0216                     	;# 
  1959  0216                     	;# 
  1960  0217                     	;# 
  1961  0217                     	;# 
  1962  0291                     	;# 
  1963  0291                     	;# 
  1964  0292                     	;# 
  1965  0293                     	;# 
  1966  0298                     	;# 
  1967  0298                     	;# 
  1968  0299                     	;# 
  1969  029A                     	;# 
  1970  0394                     	;# 
  1971  0395                     	;# 
  1972  0396                     	;# 
  1973  0FE4                     	;# 
  1974  0FE5                     	;# 
  1975  0FE6                     	;# 
  1976  0FE7                     	;# 
  1977  0FE8                     	;# 
  1978  0FE9                     	;# 
  1979  0FEA                     	;# 
  1980  0FEB                     	;# 
  1981  0FED                     	;# 
  1982  0FEE                     	;# 
  1983  0FEF                     	;# 
  1984  0000                     	;# 
  1985  0001                     	;# 
  1986  0002                     	;# 
  1987  0003                     	;# 
  1988  0004                     	;# 
  1989  0005                     	;# 
  1990  0006                     	;# 
  1991  0007                     	;# 
  1992  0008                     	;# 
  1993  0009                     	;# 
  1994  000A                     	;# 
  1995  000B                     	;# 
  1996  000C                     	;# 
  1997  000D                     	;# 
  1998  000E                     	;# 
  1999  0010                     	;# 
  2000  0011                     	;# 
  2001  0012                     	;# 
  2002  0015                     	;# 
  2003  0016                     	;# 
  2004  0016                     	;# 
  2005  0017                     	;# 
  2006  0018                     	;# 
  2007  0019                     	;# 
  2008  001A                     	;# 
  2009  001B                     	;# 
  2010  001C                     	;# 
  2011  008C                     	;# 
  2012  008D                     	;# 
  2013  008E                     	;# 
  2014  0090                     	;# 
  2015  0091                     	;# 
  2016  0092                     	;# 
  2017  0095                     	;# 
  2018  0096                     	;# 
  2019  0097                     	;# 
  2020  0099                     	;# 
  2021  009A                     	;# 
  2022  009B                     	;# 
  2023  009B                     	;# 
  2024  009C                     	;# 
  2025  009D                     	;# 
  2026  009E                     	;# 
  2027  010C                     	;# 
  2028  010D                     	;# 
  2029  010E                     	;# 
  2030  0116                     	;# 
  2031  0117                     	;# 
  2032  011D                     	;# 
  2033  018C                     	;# 
  2034  018D                     	;# 
  2035  018E                     	;# 
  2036  0191                     	;# 
  2037  0191                     	;# 
  2038  0192                     	;# 
  2039  0193                     	;# 
  2040  0193                     	;# 
  2041  0194                     	;# 
  2042  0195                     	;# 
  2043  0196                     	;# 
  2044  0197                     	;# 
  2045  0199                     	;# 
  2046  019A                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019B                     	;# 
  2050  019B                     	;# 
  2051  019C                     	;# 
  2052  019C                     	;# 
  2053  019D                     	;# 
  2054  019E                     	;# 
  2055  019F                     	;# 
  2056  020D                     	;# 
  2057  0210                     	;# 
  2058  0211                     	;# 
  2059  0211                     	;# 
  2060  0212                     	;# 
  2061  0212                     	;# 
  2062  0213                     	;# 
  2063  0213                     	;# 
  2064  0214                     	;# 
  2065  0214                     	;# 
  2066  0215                     	;# 
  2067  0215                     	;# 
  2068  0215                     	;# 
  2069  0216                     	;# 
  2070  0216                     	;# 
  2071  0217                     	;# 
  2072  0217                     	;# 
  2073  0291                     	;# 
  2074  0291                     	;# 
  2075  0292                     	;# 
  2076  0293                     	;# 
  2077  0298                     	;# 
  2078  0298                     	;# 
  2079  0299                     	;# 
  2080  029A                     	;# 
  2081  0394                     	;# 
  2082  0395                     	;# 
  2083  0396                     	;# 
  2084  0FE4                     	;# 
  2085  0FE5                     	;# 
  2086  0FE6                     	;# 
  2087  0FE7                     	;# 
  2088  0FE8                     	;# 
  2089  0FE9                     	;# 
  2090  0FEA                     	;# 
  2091  0FEB                     	;# 
  2092  0FED                     	;# 
  2093  0FEE                     	;# 
  2094  0FEF                     	;# 
  2095  0000                     	;# 
  2096  0001                     	;# 
  2097  0002                     	;# 
  2098  0003                     	;# 
  2099  0004                     	;# 
  2100  0005                     	;# 
  2101  0006                     	;# 
  2102  0007                     	;# 
  2103  0008                     	;# 
  2104  0009                     	;# 
  2105  000A                     	;# 
  2106  000B                     	;# 
  2107  000C                     	;# 
  2108  000D                     	;# 
  2109  000E                     	;# 
  2110  0010                     	;# 
  2111  0011                     	;# 
  2112  0012                     	;# 
  2113  0015                     	;# 
  2114  0016                     	;# 
  2115  0016                     	;# 
  2116  0017                     	;# 
  2117  0018                     	;# 
  2118  0019                     	;# 
  2119  001A                     	;# 
  2120  001B                     	;# 
  2121  001C                     	;# 
  2122  008C                     	;# 
  2123  008D                     	;# 
  2124  008E                     	;# 
  2125  0090                     	;# 
  2126  0091                     	;# 
  2127  0092                     	;# 
  2128  0095                     	;# 
  2129  0096                     	;# 
  2130  0097                     	;# 
  2131  0099                     	;# 
  2132  009A                     	;# 
  2133  009B                     	;# 
  2134  009B                     	;# 
  2135  009C                     	;# 
  2136  009D                     	;# 
  2137  009E                     	;# 
  2138  010C                     	;# 
  2139  010D                     	;# 
  2140  010E                     	;# 
  2141  0116                     	;# 
  2142  0117                     	;# 
  2143  011D                     	;# 
  2144  018C                     	;# 
  2145  018D                     	;# 
  2146  018E                     	;# 
  2147  0191                     	;# 
  2148  0191                     	;# 
  2149  0192                     	;# 
  2150  0193                     	;# 
  2151  0193                     	;# 
  2152  0194                     	;# 
  2153  0195                     	;# 
  2154  0196                     	;# 
  2155  0197                     	;# 
  2156  0199                     	;# 
  2157  019A                     	;# 
  2158  019B                     	;# 
  2159  019B                     	;# 
  2160  019B                     	;# 
  2161  019B                     	;# 
  2162  019C                     	;# 
  2163  019C                     	;# 
  2164  019D                     	;# 
  2165  019E                     	;# 
  2166  019F                     	;# 
  2167  020D                     	;# 
  2168  0210                     	;# 
  2169  0211                     	;# 
  2170  0211                     	;# 
  2171  0212                     	;# 
  2172  0212                     	;# 
  2173  0213                     	;# 
  2174  0213                     	;# 
  2175  0214                     	;# 
  2176  0214                     	;# 
  2177  0215                     	;# 
  2178  0215                     	;# 
  2179  0215                     	;# 
  2180  0216                     	;# 
  2181  0216                     	;# 
  2182  0217                     	;# 
  2183  0217                     	;# 
  2184  0291                     	;# 
  2185  0291                     	;# 
  2186  0292                     	;# 
  2187  0293                     	;# 
  2188  0298                     	;# 
  2189  0298                     	;# 
  2190  0299                     	;# 
  2191  029A                     	;# 
  2192  0394                     	;# 
  2193  0395                     	;# 
  2194  0396                     	;# 
  2195  0FE4                     	;# 
  2196  0FE5                     	;# 
  2197  0FE6                     	;# 
  2198  0FE7                     	;# 
  2199  0FE8                     	;# 
  2200  0FE9                     	;# 
  2201  0FEA                     	;# 
  2202  0FEB                     	;# 
  2203  0FED                     	;# 
  2204  0FEE                     	;# 
  2205  0FEF                     	;# 
  2206                           
  2207                           	psect	idataBANK3
  2208  13BB                     __pidataBANK3:	
  2209                           
  2210                           ;initializer for Bq32k_Time_Init@F2032
  2211  13BB  3401               	retlw	1
  2212  13BC  3444               	retlw	68
  2213  13BD  3410               	retlw	16
  2214  13BE  3402               	retlw	2
  2215  13BF  3418               	retlw	24
  2216  13C0  3407               	retlw	7
  2217  13C1  3416               	retlw	22
  2218  13C2  3400               	retlw	0
  2219  13C3  3400               	retlw	0
  2220  13C4  3400               	retlw	0
  2221                           
  2222                           	psect	stringtext
  2223  1800                     __pstringtext:	
  2224  1800                     _Dis_TAB:	
  2225  1800  34D7               	retlw	215
  2226  1801  3450               	retlw	80
  2227  1802  34B5               	retlw	181
  2228  1803  34F1               	retlw	241
  2229  1804  3472               	retlw	114
  2230  1805  34E3               	retlw	227
  2231  1806  34E7               	retlw	231
  2232  1807  3451               	retlw	81
  2233  1808  34F7               	retlw	247
  2234  1809  34F3               	retlw	243
  2235  180A  3477               	retlw	119
  2236  180B  34E6               	retlw	230
  2237  180C  3487               	retlw	135
  2238  180D  34F4               	retlw	244
  2239  180E  34A7               	retlw	167
  2240  180F  3427               	retlw	39
  2241  1810  3457               	retlw	87
  2242  1811  3420               	retlw	32
  2243  1812  3420               	retlw	32
  2244  1813  3420               	retlw	32
  2245  1814  3420               	retlw	32
  2246  1815                     __end_of_Dis_TAB:	
  2247                           
  2248                           	psect	nvBANK2
  2249  016D                     __pnvBANK2:	
  2250  016D                     _eusartTxBufferRemaining:	
  2251  016D                     	ds	1
  2252  016E                     _timer0ReloadVal:	
  2253  016E                     	ds	1
  2254  000B                     _INTCONbits	set	11
  2255  0011                     _PIR1bits	set	17
  2256  0015                     _TMR0	set	21
  2257  0067                     _RA7	set	103
  2258  0069                     _RB1	set	105
  2259  006B                     _RB3	set	107
  2260  006D                     _RB5	set	109
  2261  009D                     _ADCON0	set	157
  2262  009D                     _ADCON0bits	set	157
  2263  009E                     _ADCON1	set	158
  2264  009C                     _ADRESH	set	156
  2265  009B                     _ADRESL	set	155
  2266  0095                     _OPTION_REG	set	149
  2267  0095                     _OPTION_REGbits	set	149
  2268  0099                     _OSCCON	set	153
  2269  009A                     _OSCSTAT	set	154
  2270  0091                     _PIE1bits	set	145
  2271  008C                     _TRISA	set	140
  2272  008D                     _TRISB	set	141
  2273  008E                     _TRISC	set	142
  2274  04B8                     _SWDTEN	set	1208
  2275  0469                     _TRISB1	set	1129
  2276  046B                     _TRISB3	set	1131
  2277  04B9                     _WDTPS0	set	1209
  2278  04BA                     _WDTPS1	set	1210
  2279  04BB                     _WDTPS2	set	1211
  2280  04BC                     _WDTPS3	set	1212
  2281  04BD                     _WDTPS4	set	1213
  2282  011D                     _APFCON	set	285
  2283  0117                     _FVRCON	set	279
  2284  0117                     _FVRCONbits	set	279
  2285  010C                     _LATA	set	268
  2286  010D                     _LATB	set	269
  2287  010E                     _LATC	set	270
  2288  0860                     _LATA0	set	2144
  2289  0861                     _LATA1	set	2145
  2290  0862                     _LATA2	set	2146
  2291  0863                     _LATA3	set	2147
  2292  0864                     _LATA4	set	2148
  2293  0865                     _LATA5	set	2149
  2294  0866                     _LATA6	set	2150
  2295  0868                     _LATB0	set	2152
  2296  0869                     _LATB1	set	2153
  2297  0870                     _LATC0	set	2160
  2298  0871                     _LATC1	set	2161
  2299  0872                     _LATC2	set	2162
  2300  018C                     _ANSELA	set	396
  2301  018D                     _ANSELB	set	397
  2302  018E                     _ANSELC	set	398
  2303  019F                     _BAUDCON	set	415
  2304  0192                     _PMADRH	set	402
  2305  0191                     _PMADRL	set	401
  2306  0195                     _PMCON1bits	set	405
  2307  0196                     _PMCON2	set	406
  2308  0194                     _PMDATH	set	404
  2309  0193                     _PMDATL	set	403
  2310  0199                     _RCREG	set	409
  2311  019D                     _RCSTA	set	413
  2312  019D                     _RCSTAbits	set	413
  2313  019C                     _SPBRGH	set	412
  2314  019B                     _SPBRGL	set	411
  2315  019A                     _TXREG	set	410
  2316  019E                     _TXSTA	set	414
  2317  0212                     _SSP1ADD	set	530
  2318  0215                     _SSP1CON1	set	533
  2319  0215                     _SSP1CON1bits	set	533
  2320  0214                     _SSP1STAT	set	532
  2321  0214                     _SSP1STATbits	set	532
  2322  0211                     _SSPBUF	set	529
  2323  020D                     _WPUB	set	525
  2324  0210                     _WPUE	set	528
  2325                           
  2326                           ; #config settings
  2327  0000                     
  2328                           	psect	cinit
  2329  0029                     start_initialization:	
  2330  0029                     __initialization:	
  2331                           
  2332                           ; Clear objects allocated to BANK0
  2333  0029  3064               	movlw	low __pbssBANK0
  2334  002A  0084               	movwf	4
  2335  002B  3000               	movlw	high __pbssBANK0
  2336  002C  0085               	movwf	5
  2337  002D  3007               	movlw	7
  2338  002E  3188  2000  3180   	fcall	clear_ram0
  2339                           
  2340                           ; Clear objects allocated to BANK1
  2341  0031  0021               	movlb	1	; select bank1
  2342  0032  01EE               	clrf	__pbssBANK1& (0+127)
  2343  0033  01EF               	clrf	(__pbssBANK1+1)& (0+127)
  2344                           
  2345                           ; Clear objects allocated to BANK2
  2346  0034  3020               	movlw	low __pbssBANK2
  2347  0035  0084               	movwf	4
  2348  0036  3001               	movlw	high __pbssBANK2
  2349  0037  0085               	movwf	5
  2350  0038  304D               	movlw	77
  2351  0039  3188  2000  3180   	fcall	clear_ram0
  2352                           
  2353                           ; Clear objects allocated to BANK3
  2354  003C  30A0               	movlw	low __pbssBANK3
  2355  003D  0084               	movwf	4
  2356  003E  3001               	movlw	high __pbssBANK3
  2357  003F  0085               	movwf	5
  2358  0040  3034               	movlw	52
  2359  0041  3188  2000  3180   	fcall	clear_ram0
  2360                           
  2361                           ; Clear objects allocated to BANK4
  2362  0044  3020               	movlw	low __pbssBANK4
  2363  0045  0084               	movwf	4
  2364  0046  3002               	movlw	high __pbssBANK4
  2365  0047  0085               	movwf	5
  2366  0048  3040               	movlw	64
  2367  0049  3188  2000  3180   	fcall	clear_ram0
  2368                           
  2369                           ; Initialize objects allocated to BANK3
  2370  004C  30BB               	movlw	low __pidataBANK3
  2371  004D  0084               	movwf	4
  2372  004E  3093               	movlw	(high __pidataBANK3)| (0+128)
  2373  004F  0085               	movwf	5
  2374  0050  30D4               	movlw	low __pdataBANK3
  2375  0051  0086               	movwf	6
  2376  0052  3001               	movlw	high __pdataBANK3
  2377  0053  0087               	movwf	7
  2378  0054  300A               	movlw	10
  2379  0055  3193  23B5         	fcall	init_ram
  2380  0057                     end_of_initialization:	
  2381                           ;End of C runtime variable initialization code
  2382                           
  2383  0057                     __end_of__initialization:	
  2384  0057  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2385  0058  0020               	movlb	0
  2386  0059  3184  2C14         	ljmp	_main	;jump to C main() function
  2387                           
  2388                           	psect	bssBANK0
  2389  0064                     __pbssBANK0:	
  2390  0064                     _Cur_Save_Index:	
  2391  0064                     	ds	2
  2392  0066                     _Record_flag:	
  2393  0066                     	ds	1
  2394  0067                     _Usart_Rx_Cnt:	
  2395  0067                     	ds	1
  2396  0068                     _temperature_decimal:	
  2397  0068                     	ds	1
  2398  0069                     _time_count:	
  2399  0069                     	ds	1
  2400  006A                     _uch_cr0:	
  2401  006A                     	ds	1
  2402                           
  2403                           	psect	bssBANK1
  2404  00EE                     __pbssBANK1:	
  2405  00EE                     _CH1_temperature:	
  2406  00EE                     	ds	2
  2407                           
  2408                           	psect	bssBANK2
  2409  0120                     __pbssBANK2:	
  2410  0120                     Two_Display@F2137:	
  2411  0120                     	ds	4
  2412  0124                     _temperature_value:	
  2413  0124                     	ds	4
  2414  0128                     err_Display@F2140:	
  2415  0128                     	ds	4
  2416  012C                     TMR0_ISR@CountCallBack:	
  2417  012C                     	ds	2
  2418  012E                     _CH2_temperature:	
  2419  012E                     	ds	2
  2420  0130                     _Cur_temperature:	
  2421  0130                     	ds	2
  2422  0132                     _temperature_int:	
  2423  0132                     	ds	2
  2424  0134                     _CH1_state:	
  2425  0134                     	ds	1
  2426  0135                     _CH2_state:	
  2427  0135                     	ds	1
  2428  0136                     _Cur_temperature_time_ch1:	
  2429  0136                     	ds	1
  2430  0137                     _Cur_temperature_time_ch2:	
  2431  0137                     	ds	1
  2432  0138                     _Inf_cmd_flag:	
  2433  0138                     	ds	1
  2434  0139                     _LongPressSec:	
  2435  0139                     	ds	1
  2436  013A                     _MAX31856Sec:	
  2437  013A                     	ds	1
  2438  013B                     _Set_time_cmd_flag:	
  2439  013B                     	ds	1
  2440  013C                     _Usart_Run_Flag:	
  2441  013C                     	ds	1
  2442  013D                     _eusartRxCount:	
  2443  013D                     	ds	1
  2444  013E                     _eusartRxHead:	
  2445  013E                     	ds	1
  2446  013F                     _eusartRxTail:	
  2447  013F                     	ds	1
  2448  0140                     _eusartTxHead:	
  2449  0140                     	ds	1
  2450  0141                     _eusartTxTail:	
  2451  0141                     	ds	1
  2452  0142                     _temperature_sign:	
  2453  0142                     	ds	1
  2454  0143                     _tmr_flag:	
  2455  0143                     	ds	1
  2456  0144                     _uch_cjth:	
  2457  0144                     	ds	1
  2458  0145                     _uch_cjtl:	
  2459  0145                     	ds	1
  2460  0146                     _uch_cr1:	
  2461  0146                     	ds	1
  2462  0147                     _uch_ltcbh:	
  2463  0147                     	ds	1
  2464  0148                     _uch_ltcbl:	
  2465  0148                     	ds	1
  2466  0149                     _uch_ltcbm:	
  2467  0149                     	ds	1
  2468  014A                     _uch_mask:	
  2469  014A                     	ds	1
  2470  014B                     _uch_sr:	
  2471  014B                     	ds	1
  2472  014C                     _uch_reg:	
  2473  014C                     	ds	8
  2474  0154                     _rtc_save_ch1:	
  2475  0154                     	ds	7
  2476  015B                     _rtc_save_ch2:	
  2477  015B                     	ds	7
  2478  0162                     _rtc_tm:	
  2479  0162                     	ds	7
  2480  0169                     _display_buff:	
  2481  0169                     	ds	4
  2482                           
  2483                           	psect	bssBANK3
  2484  01A0                     __pbssBANK3:	
  2485  01A0                     _eusartRxBuffer:	
  2486  01A0                     	ds	8
  2487  01A8                     _eusartTxBuffer:	
  2488  01A8                     	ds	8
  2489  01B0                     time_Display@F2143:	
  2490  01B0                     	ds	4
  2491  01B4                     _Usart_Rx_Buff:	
  2492  01B4                     	ds	32
  2493                           
  2494                           	psect	dataBANK3
  2495  01D4                     __pdataBANK3:	
  2496  01D4                     Bq32k_Time_Init@F2032:	
  2497  01D4                     	ds	10
  2498                           
  2499                           	psect	bssBANK4
  2500  0220                     __pbssBANK4:	
  2501  0220                     _Flash_buff:	
  2502  0220                     	ds	64
  2503                           
  2504                           	psect	clrtext
  2505  0800                     clear_ram0:	
  2506                           ;	Called with FSR0 containing the base address, and
  2507                           ;	WREG with the size to clear
  2508                           
  2509  0800  0064               	clrwdt	;clear the watchdog before getting into this loop
  2510  0801                     clrloop0:	
  2511  0801  0180               	clrf	0	;clear RAM location pointed to by FSR
  2512  0802  3101               	addfsr 0,1
  2513  0803  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2514  0804  2801               	goto	clrloop0	;have we reached the end yet?
  2515  0805  3400               	retlw	0	;all done for this memory range, return
  2516                           
  2517                           	psect	inittext
  2518  13B5                     init_ram:	
  2519  13B5  00FE               	movwf	126
  2520  13B6                     initloop:	
  2521  13B6  0012               	moviw fsr0++
  2522  13B7  001E               	movwi fsr1++
  2523  13B8  0BFE               	decfsz	126,f
  2524  13B9  2BB6               	goto	initloop
  2525  13BA  3400               	retlw	0
  2526                           
  2527                           	psect	cstackBANK3
  2528  01DE                     __pcstackBANK3:	
  2529  01DE                     main@data_temp:	
  2530                           
  2531                           ; 2 bytes @ 0x0
  2532  01DE                     	ds	2
  2533  01E0                     main@i:	
  2534                           
  2535                           ; 1 bytes @ 0x2
  2536  01E0                     	ds	1
  2537  01E1                     main@bat_data:	
  2538                           
  2539                           ; 2 bytes @ 0x3
  2540  01E1                     	ds	2
  2541                           
  2542                           	psect	cstackBANK1
  2543  00A0                     __pcstackBANK1:	
  2544  00A0                     Inf_to_Com@tmp_buf:	
  2545                           
  2546                           ; 72 bytes @ 0x0
  2547  00A0                     	ds	72
  2548  00E8                     Inf_to_Com@add_tmp:	
  2549                           
  2550                           ; 2 bytes @ 0x48
  2551  00E8                     	ds	2
  2552  00EA                     Inf_to_Com@crc_tmp:	
  2553                           
  2554                           ; 2 bytes @ 0x4A
  2555  00EA                     	ds	2
  2556  00EC                     Inf_to_Com@i:	
  2557                           
  2558                           ; 1 bytes @ 0x4C
  2559  00EC                     	ds	1
  2560  00ED                     Inf_to_Com@count_tmp:	
  2561                           
  2562                           ; 1 bytes @ 0x4D
  2563  00ED                     	ds	1
  2564                           
  2565                           	psect	cstackCOMMON
  2566  0070                     __pcstackCOMMON:	
  2567  0070                     ?_OSCILLATOR_Initialize:	
  2568  0070                     ?_SPI_Initialize:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ?_EUSART_Initialize:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_ADC_Initialize:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_FVR_Initialize:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_TMR0_Initialize:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_RxFrameCheck:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_TMR0_CallBack:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ??_TMR0_CallBack:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_Bq32k_Time_Init:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_SendCmd_1621:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_Serach_Flash_Head:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_temperature_process:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_Key_Process:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ?_Save_process:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_Sleep_process:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?_Calculate_Time:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_Tc_Display:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?_err_Display:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_Two_Display:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ?_time_Display:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?_Bq32k_Rtc_Read_Time:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_Set_start_flag:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ?_Write_Flash_head:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_Save_Write_time:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ?_Set_finish_flag:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_Write_Flash_finish:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ?_bcd2bin:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_bin2bcd:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ?_Step_control:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ?_Set_time_from_Com:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ?_Inf_to_Com:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_Read_time_to_Com:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ?_PIN_MANAGER_Initialize:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_SYSTEM_Initialize:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ?_SPI_Exchange8bit:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_EUSART_Write:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_EUSART_Transmit_ISR:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ??_EUSART_Transmit_ISR:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ?_EUSART_Receive_ISR:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?_TMR0_ISR:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?_INTERRUPT_InterruptManager:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_main:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?_maxim_31856_read_register:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     ?_maxim_start_conversion:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0070                     ?_maxim_clear_fault_status:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_tc_temperature_trans:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     ?_one_temperature_trans:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     ?_temperature_display:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     ?_I2C_Start:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     ?_I2C_Send_Byte:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     ?_I2C_Receive_Byte:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     ?_I2C_Stop:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ?_Key_Scan:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ?_Bq32k_Rtc_Write_Time:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?_Com_Process:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     RxFrameCheck@frame_len:	
  2734                           ; 2 bytes @ 0x0
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x0
  2738  0070                     	ds	1
  2739  0071                     ??_RxFrameCheck:	
  2740  0071                     ??_TMR0_ISR:	
  2741                           ; 1 bytes @ 0x1
  2742                           
  2743                           
  2744                           ; 1 bytes @ 0x1
  2745  0071                     	ds	4
  2746  0075                     RxFrameCheck@tmp_crc:	
  2747                           
  2748                           ; 2 bytes @ 0x5
  2749  0075                     	ds	2
  2750  0077                     RxFrameCheck@i:	
  2751                           
  2752                           ; 1 bytes @ 0x7
  2753  0077                     	ds	1
  2754  0078                     RxFrameCheck@rx_arr:	
  2755                           
  2756                           ; 1 bytes @ 0x8
  2757  0078                     	ds	1
  2758  0079                     RxFrameCheck@remainder:	
  2759                           
  2760                           ; 2 bytes @ 0x9
  2761  0079                     	ds	2
  2762  007B                     ??_EUSART_Receive_ISR:	
  2763                           
  2764                           ; 1 bytes @ 0xB
  2765  007B                     	ds	2
  2766  007D                     EUSART_Receive_ISR@rx_tmp:	
  2767                           
  2768                           ; 1 bytes @ 0xD
  2769  007D                     	ds	1
  2770                           
  2771                           	psect	cstackBANK0
  2772  0020                     __pcstackBANK0:	
  2773  0020                     ??_INTERRUPT_InterruptManager:	
  2774                           
  2775                           ; 1 bytes @ 0x0
  2776  0020                     	ds	1
  2777  0021                     ??_OSCILLATOR_Initialize:	
  2778  0021                     ??_SPI_Initialize:	
  2779                           ; 1 bytes @ 0x1
  2780                           
  2781  0021                     ??_EUSART_Initialize:	
  2782                           ; 1 bytes @ 0x1
  2783                           
  2784  0021                     ??_ADC_Initialize:	
  2785                           ; 1 bytes @ 0x1
  2786                           
  2787  0021                     ??_FVR_Initialize:	
  2788                           ; 1 bytes @ 0x1
  2789                           
  2790  0021                     ??_TMR0_Initialize:	
  2791                           ; 1 bytes @ 0x1
  2792                           
  2793  0021                     ?_FLASH_EraseBlock:	
  2794                           ; 1 bytes @ 0x1
  2795                           
  2796  0021                     ?_memset:	
  2797                           ; 1 bytes @ 0x1
  2798                           
  2799  0021                     ??_Set_start_flag:	
  2800                           ; 1 bytes @ 0x1
  2801                           
  2802  0021                     ??_Set_finish_flag:	
  2803                           ; 1 bytes @ 0x1
  2804                           
  2805  0021                     ??_Step_control:	
  2806                           ; 1 bytes @ 0x1
  2807                           
  2808  0021                     ??_PIN_MANAGER_Initialize:	
  2809                           ; 1 bytes @ 0x1
  2810                           
  2811  0021                     ??_SPI_Exchange8bit:	
  2812                           ; 1 bytes @ 0x1
  2813                           
  2814  0021                     ??_EUSART_Write:	
  2815                           ; 1 bytes @ 0x1
  2816                           
  2817  0021                     ?_FLASH_WriteWord:	
  2818                           ; 1 bytes @ 0x1
  2819                           
  2820  0021                     ?_SendBit_1621:	
  2821                           ; 1 bytes @ 0x1
  2822                           
  2823  0021                     ?_SendDataBit_1621:	
  2824                           ; 1 bytes @ 0x1
  2825                           
  2826  0021                     ??_I2C_Start:	
  2827                           ; 1 bytes @ 0x1
  2828                           
  2829  0021                     ??_I2C_Send_Byte:	
  2830                           ; 1 bytes @ 0x1
  2831                           
  2832  0021                     ??_I2C_Receive_Byte:	
  2833                           ; 1 bytes @ 0x1
  2834                           
  2835  0021                     ??_I2C_Stop:	
  2836                           ; 1 bytes @ 0x1
  2837                           
  2838  0021                     ??_Key_Scan:	
  2839                           ; 1 bytes @ 0x1
  2840                           
  2841  0021                     ?___bmul:	
  2842                           ; 1 bytes @ 0x1
  2843                           
  2844  0021                     ?_CRC_cal:	
  2845                           ; 1 bytes @ 0x1
  2846                           
  2847  0021                     ?_FLASH_ReadWord:	
  2848                           ; 2 bytes @ 0x1
  2849                           
  2850  0021                     ?_ADC_GetConversion:	
  2851                           ; 2 bytes @ 0x1
  2852                           
  2853  0021                     ?___wmul:	
  2854                           ; 2 bytes @ 0x1
  2855                           
  2856  0021                     ?___awdiv:	
  2857                           ; 2 bytes @ 0x1
  2858                           
  2859  0021                     ?___awmod:	
  2860                           ; 2 bytes @ 0x1
  2861                           
  2862  0021                     ?___lwmod:	
  2863                           ; 2 bytes @ 0x1
  2864                           
  2865  0021                     SPI_Exchange8bit@data:	
  2866                           ; 2 bytes @ 0x1
  2867                           
  2868  0021                     EUSART_Write@txData:	
  2869                           ; 1 bytes @ 0x1
  2870                           
  2871  0021                     SendBit_1621@cnt:	
  2872                           ; 1 bytes @ 0x1
  2873                           
  2874  0021                     SendDataBit_1621@cnt:	
  2875                           ; 1 bytes @ 0x1
  2876                           
  2877  0021                     CRC_cal@frame_len:	
  2878                           ; 1 bytes @ 0x1
  2879                           
  2880  0021                     ___bmul@multiplicand:	
  2881                           ; 1 bytes @ 0x1
  2882                           
  2883  0021                     FLASH_ReadWord@flashAddr:	
  2884                           ; 1 bytes @ 0x1
  2885                           
  2886  0021                     FLASH_WriteWord@flashAddr:	
  2887                           ; 2 bytes @ 0x1
  2888                           
  2889  0021                     FLASH_EraseBlock@startAddr:	
  2890                           ; 2 bytes @ 0x1
  2891                           
  2892  0021                     ___wmul@multiplier:	
  2893                           ; 2 bytes @ 0x1
  2894                           
  2895  0021                     ___awdiv@divisor:	
  2896                           ; 2 bytes @ 0x1
  2897                           
  2898  0021                     ___awmod@divisor:	
  2899                           ; 2 bytes @ 0x1
  2900                           
  2901  0021                     ___lwmod@divisor:	
  2902                           ; 2 bytes @ 0x1
  2903                           
  2904  0021                     memset@c:	
  2905                           ; 2 bytes @ 0x1
  2906                           
  2907                           
  2908                           ; 2 bytes @ 0x1
  2909  0021                     	ds	1
  2910  0022                     ??_Sleep_process:	
  2911  0022                     ??_SYSTEM_Initialize:	
  2912                           ; 1 bytes @ 0x2
  2913                           
  2914  0022                     ?_SPI_Exchange8bitBuffer:	
  2915                           ; 1 bytes @ 0x2
  2916                           
  2917  0022                     ?_maxim_31856_write_register:	
  2918                           ; 1 bytes @ 0x2
  2919                           
  2920  0022                     ??_maxim_31856_read_register:	
  2921                           ; 1 bytes @ 0x2
  2922                           
  2923  0022                     ??_SendBit_1621:	
  2924                           ; 1 bytes @ 0x2
  2925                           
  2926  0022                     ??_SendDataBit_1621:	
  2927                           ; 1 bytes @ 0x2
  2928                           
  2929  0022                     ??___bmul:	
  2930                           ; 1 bytes @ 0x2
  2931                           
  2932  0022                     SPI_Exchange8bitBuffer@bufLen:	
  2933                           ; 1 bytes @ 0x2
  2934                           
  2935  0022                     maxim_31856_write_register@uch_register_value:	
  2936                           ; 1 bytes @ 0x2
  2937                           
  2938  0022                     I2C_Send_Byte@Data:	
  2939                           ; 1 bytes @ 0x2
  2940                           
  2941  0022                     I2C_Receive_Byte@Data:	
  2942                           ; 1 bytes @ 0x2
  2943                           
  2944                           
  2945                           ; 1 bytes @ 0x2
  2946  0022                     	ds	1
  2947  0023                     ??_FLASH_EraseBlock:	
  2948  0023                     ??_CRC_cal:	
  2949                           ; 1 bytes @ 0x3
  2950                           
  2951  0023                     ??_FLASH_ReadWord:	
  2952                           ; 1 bytes @ 0x3
  2953                           
  2954  0023                     ??_ADC_GetConversion:	
  2955                           ; 1 bytes @ 0x3
  2956                           
  2957  0023                     ??_maxim_31856_write_register:	
  2958                           ; 1 bytes @ 0x3
  2959                           
  2960  0023                     SPI_Exchange8bitBuffer@dataOut:	
  2961                           ; 1 bytes @ 0x3
  2962                           
  2963  0023                     FLASH_ReadWord@GIEBitValue:	
  2964                           ; 1 bytes @ 0x3
  2965                           
  2966  0023                     FLASH_EraseBlock@GIEBitValue:	
  2967                           ; 1 bytes @ 0x3
  2968                           
  2969  0023                     maxim_31856_write_register@uch_register_address:	
  2970                           ; 1 bytes @ 0x3
  2971                           
  2972  0023                     maxim_31856_read_register@uch_register_address:	
  2973                           ; 1 bytes @ 0x3
  2974                           
  2975  0023                     SendBit_1621@data:	
  2976                           ; 1 bytes @ 0x3
  2977                           
  2978  0023                     SendDataBit_1621@data:	
  2979                           ; 1 bytes @ 0x3
  2980                           
  2981  0023                     I2C_Send_Byte@i:	
  2982                           ; 1 bytes @ 0x3
  2983                           
  2984  0023                     I2C_Receive_Byte@i:	
  2985                           ; 1 bytes @ 0x3
  2986                           
  2987  0023                     Key_Scan@Key_val:	
  2988                           ; 1 bytes @ 0x3
  2989                           
  2990  0023                     ___bmul@product:	
  2991                           ; 1 bytes @ 0x3
  2992                           
  2993  0023                     FLASH_WriteWord@word:	
  2994                           ; 1 bytes @ 0x3
  2995                           
  2996  0023                     ___wmul@multiplicand:	
  2997                           ; 2 bytes @ 0x3
  2998                           
  2999  0023                     ___awdiv@dividend:	
  3000                           ; 2 bytes @ 0x3
  3001                           
  3002  0023                     ___awmod@dividend:	
  3003                           ; 2 bytes @ 0x3
  3004                           
  3005  0023                     ___lwmod@dividend:	
  3006                           ; 2 bytes @ 0x3
  3007                           
  3008  0023                     memset@n:	
  3009                           ; 2 bytes @ 0x3
  3010                           
  3011                           
  3012                           ; 2 bytes @ 0x3
  3013  0023                     	ds	1
  3014  0024                     ??_SPI_Exchange8bitBuffer:	
  3015  0024                     ?_FLASH_readBlock:	
  3016                           ; 1 bytes @ 0x4
  3017                           
  3018  0024                     ?_I2C_Read_Buffer:	
  3019                           ; 1 bytes @ 0x4
  3020                           
  3021  0024                     ?_I2C_Send_Buffer:	
  3022                           ; 1 bytes @ 0x4
  3023                           
  3024  0024                     ADC_GetConversion@channel:	
  3025                           ; 1 bytes @ 0x4
  3026                           
  3027  0024                     maxim_31856_read_register@uch_register_data:	
  3028                           ; 1 bytes @ 0x4
  3029                           
  3030  0024                     SendBit_1621@i:	
  3031                           ; 1 bytes @ 0x4
  3032                           
  3033  0024                     SendDataBit_1621@i:	
  3034                           ; 1 bytes @ 0x4
  3035                           
  3036  0024                     I2C_Read_Buffer@buff:	
  3037                           ; 1 bytes @ 0x4
  3038                           
  3039  0024                     I2C_Send_Buffer@buff:	
  3040                           ; 1 bytes @ 0x4
  3041                           
  3042  0024                     ___bmul@multiplier:	
  3043                           ; 1 bytes @ 0x4
  3044                           
  3045  0024                     FLASH_readBlock@address:	
  3046                           ; 1 bytes @ 0x4
  3047                           
  3048                           
  3049                           ; 2 bytes @ 0x4
  3050  0024                     	ds	1
  3051  0025                     ??_SendCmd_1621:	
  3052  0025                     ?_WriteAll_1621:	
  3053                           ; 1 bytes @ 0x5
  3054                           
  3055  0025                     ??_memset:	
  3056                           ; 1 bytes @ 0x5
  3057                           
  3058  0025                     ??_bcd2bin:	
  3059                           ; 1 bytes @ 0x5
  3060                           
  3061  0025                     ??_FLASH_WriteWord:	
  3062                           ; 1 bytes @ 0x5
  3063                           
  3064  0025                     ??_maxim_start_conversion:	
  3065                           ; 1 bytes @ 0x5
  3066                           
  3067  0025                     ??_maxim_clear_fault_status:	
  3068                           ; 1 bytes @ 0x5
  3069                           
  3070  0025                     ??___wmul:	
  3071                           ; 1 bytes @ 0x5
  3072                           
  3073  0025                     ??___awdiv:	
  3074                           ; 1 bytes @ 0x5
  3075                           
  3076  0025                     ??___awmod:	
  3077                           ; 1 bytes @ 0x5
  3078                           
  3079  0025                     ??___lwmod:	
  3080                           ; 1 bytes @ 0x5
  3081                           
  3082  0025                     FLASH_WriteWord@GIEBitValue:	
  3083                           ; 1 bytes @ 0x5
  3084                           
  3085  0025                     I2C_Read_Buffer@Length:	
  3086                           ; 1 bytes @ 0x5
  3087                           
  3088  0025                     I2C_Send_Buffer@Length:	
  3089                           ; 1 bytes @ 0x5
  3090                           
  3091  0025                     WriteAll_1621@p:	
  3092                           ; 1 bytes @ 0x5
  3093                           
  3094  0025                     ___wmul@product:	
  3095                           ; 2 bytes @ 0x5
  3096                           
  3097                           
  3098                           ; 2 bytes @ 0x5
  3099  0025                     	ds	1
  3100  0026                     ??_Serach_Flash_Head:	
  3101  0026                     ?_Save_Write_word:	
  3102                           ; 1 bytes @ 0x6
  3103                           
  3104  0026                     ??_Write_Flash_head:	
  3105                           ; 1 bytes @ 0x6
  3106                           
  3107  0026                     ??_Write_Flash_finish:	
  3108                           ; 1 bytes @ 0x6
  3109                           
  3110  0026                     ??_I2C_Read_Buffer:	
  3111                           ; 1 bytes @ 0x6
  3112                           
  3113  0026                     ??_I2C_Send_Buffer:	
  3114                           ; 1 bytes @ 0x6
  3115                           
  3116  0026                     FLASH_readBlock@count:	
  3117                           ; 1 bytes @ 0x6
  3118                           
  3119  0026                     maxim_start_conversion@uch_conversion_mode:	
  3120                           ; 1 bytes @ 0x6
  3121                           
  3122  0026                     SendCmd_1621@command:	
  3123                           ; 1 bytes @ 0x6
  3124                           
  3125  0026                     ___awdiv@counter:	
  3126                           ; 1 bytes @ 0x6
  3127                           
  3128  0026                     ___awmod@counter:	
  3129                           ; 1 bytes @ 0x6
  3130                           
  3131  0026                     ___lwmod@counter:	
  3132                           ; 1 bytes @ 0x6
  3133                           
  3134  0026                     memset@p1:	
  3135                           ; 1 bytes @ 0x6
  3136                           
  3137  0026                     Save_Write_word@data:	
  3138                           ; 1 bytes @ 0x6
  3139                           
  3140                           
  3141                           ; 2 bytes @ 0x6
  3142  0026                     	ds	1
  3143  0027                     ??_FLASH_readBlock:	
  3144  0027                     ?___lwdiv:	
  3145                           ; 1 bytes @ 0x7
  3146                           
  3147  0027                     SPI_Exchange8bitBuffer@dataIn:	
  3148                           ; 2 bytes @ 0x7
  3149                           
  3150  0027                     WriteAll_1621@cnt:	
  3151                           ; 1 bytes @ 0x7
  3152                           
  3153  0027                     I2C_Read_Buffer@ADD:	
  3154                           ; 1 bytes @ 0x7
  3155                           
  3156  0027                     Serach_Flash_Head@count:	
  3157                           ; 1 bytes @ 0x7
  3158                           
  3159  0027                     CRC_cal@rx_arr:	
  3160                           ; 1 bytes @ 0x7
  3161                           
  3162  0027                     ___awdiv@sign:	
  3163                           ; 1 bytes @ 0x7
  3164                           
  3165  0027                     ___awmod@sign:	
  3166                           ; 1 bytes @ 0x7
  3167                           
  3168  0027                     memset@p:	
  3169                           ; 1 bytes @ 0x7
  3170                           
  3171  0027                     ___lwdiv@divisor:	
  3172                           ; 1 bytes @ 0x7
  3173                           
  3174                           
  3175                           ; 2 bytes @ 0x7
  3176  0027                     	ds	1
  3177  0028                     ??_WriteAll_1621:	
  3178  0028                     ??_Save_Write_word:	
  3179                           ; 1 bytes @ 0x8
  3180                           
  3181  0028                     SPI_Exchange8bitBuffer@bytesWritten:	
  3182                           ; 1 bytes @ 0x8
  3183                           
  3184  0028                     FLASH_readBlock@buffer:	
  3185                           ; 1 bytes @ 0x8
  3186                           
  3187  0028                     I2C_Read_Buffer@Flag:	
  3188                           ; 1 bytes @ 0x8
  3189                           
  3190  0028                     I2C_Send_Buffer@ADD:	
  3191                           ; 1 bytes @ 0x8
  3192                           
  3193  0028                     bcd2bin@val:	
  3194                           ; 1 bytes @ 0x8
  3195                           
  3196  0028                     CRC_cal@i:	
  3197                           ; 1 bytes @ 0x8
  3198                           
  3199  0028                     Serach_Flash_Head@data:	
  3200                           ; 1 bytes @ 0x8
  3201                           
  3202  0028                     ___awdiv@quotient:	
  3203                           ; 2 bytes @ 0x8
  3204                           
  3205                           
  3206                           ; 2 bytes @ 0x8
  3207  0028                     	ds	1
  3208  0029                     ??_Bq32k_Rtc_Read_Time:	
  3209  0029                     ?_maxim_31856_read_nregisters:	
  3210                           ; 1 bytes @ 0x9
  3211                           
  3212  0029                     maxim_31856_read_nregisters@uch_buff:	
  3213                           ; 1 bytes @ 0x9
  3214                           
  3215  0029                     WriteAll_1621@addr:	
  3216                           ; 1 bytes @ 0x9
  3217                           
  3218  0029                     I2C_Send_Buffer@i:	
  3219                           ; 1 bytes @ 0x9
  3220                           
  3221  0029                     CRC_cal@remainder:	
  3222                           ; 1 bytes @ 0x9
  3223                           
  3224  0029                     ___lwdiv@dividend:	
  3225                           ; 2 bytes @ 0x9
  3226                           
  3227                           
  3228                           ; 2 bytes @ 0x9
  3229  0029                     	ds	1
  3230  002A                     ??_bin2bcd:	
  3231  002A                     maxim_31856_read_nregisters@uch_nBytes:	
  3232                           ; 1 bytes @ 0xA
  3233                           
  3234  002A                     WriteAll_1621@i:	
  3235                           ; 1 bytes @ 0xA
  3236                           
  3237  002A                     I2C_Send_Buffer@Flag:	
  3238                           ; 1 bytes @ 0xA
  3239                           
  3240  002A                     Serach_Flash_Head@i:	
  3241                           ; 1 bytes @ 0xA
  3242                           
  3243                           
  3244                           ; 2 bytes @ 0xA
  3245  002A                     	ds	1
  3246  002B                     ??_Bq32k_Time_Init:	
  3247  002B                     ??_err_Display:	
  3248                           ; 1 bytes @ 0xB
  3249                           
  3250  002B                     ??_Two_Display:	
  3251                           ; 1 bytes @ 0xB
  3252                           
  3253  002B                     ??_Inf_to_Com:	
  3254                           ; 1 bytes @ 0xB
  3255                           
  3256  002B                     ??_Read_time_to_Com:	
  3257                           ; 1 bytes @ 0xB
  3258                           
  3259  002B                     ??_maxim_31856_read_nregisters:	
  3260                           ; 1 bytes @ 0xB
  3261                           
  3262  002B                     ??___lwdiv:	
  3263                           ; 1 bytes @ 0xB
  3264                           
  3265  002B                     Bq32k_Rtc_Read_Time@temp:	
  3266                           ; 1 bytes @ 0xB
  3267                           
  3268                           
  3269                           ; 10 bytes @ 0xB
  3270  002B                     	ds	1
  3271  002C                     ___lwdiv@counter:	
  3272  002C                     Two_Display@num:	
  3273                           ; 1 bytes @ 0xC
  3274                           
  3275  002C                     err_Display@num:	
  3276                           ; 4 bytes @ 0xC
  3277                           
  3278  002C                     Read_time_to_Com@tmp_buf:	
  3279                           ; 4 bytes @ 0xC
  3280                           
  3281                           
  3282                           ; 16 bytes @ 0xC
  3283  002C                     	ds	1
  3284  002D                     maxim_31856_read_nregisters@uch_register_address:	
  3285  002D                     ___lwdiv@quotient:	
  3286                           ; 1 bytes @ 0xD
  3287                           
  3288  002D                     Bq32k_Time_Init@temp:	
  3289                           ; 2 bytes @ 0xD
  3290                           
  3291                           
  3292                           ; 10 bytes @ 0xD
  3293  002D                     	ds	1
  3294  002E                     ??_one_temperature_trans:	
  3295                           
  3296                           ; 1 bytes @ 0xE
  3297  002E                     	ds	1
  3298  002F                     ??_Tc_Display:	
  3299                           
  3300                           ; 1 bytes @ 0xF
  3301  002F                     	ds	1
  3302  0030                     Tc_Display@count:	
  3303  0030                     Two_Display@number:	
  3304                           ; 1 bytes @ 0x10
  3305                           
  3306                           
  3307                           ; 1 bytes @ 0x10
  3308  0030                     	ds	1
  3309  0031                     bin2bcd@val:	
  3310  0031                     Tc_Display@data:	
  3311                           ; 1 bytes @ 0x11
  3312                           
  3313                           
  3314                           ; 2 bytes @ 0x11
  3315  0031                     	ds	1
  3316  0032                     ??_Bq32k_Rtc_Write_Time:	
  3317                           
  3318                           ; 1 bytes @ 0x12
  3319  0032                     	ds	2
  3320  0034                     Bq32k_Rtc_Write_Time@temp:	
  3321                           
  3322                           ; 10 bytes @ 0x14
  3323  0034                     	ds	1
  3324  0035                     Bq32k_Rtc_Read_Time@p:	
  3325                           
  3326                           ; 1 bytes @ 0x15
  3327  0035                     	ds	1
  3328  0036                     ??_time_Display:	
  3329  0036                     ??_Save_Write_time:	
  3330                           ; 1 bytes @ 0x16
  3331                           
  3332                           
  3333                           ; 1 bytes @ 0x16
  3334  0036                     	ds	2
  3335  0038                     ??_Calculate_Time:	
  3336                           
  3337                           ; 1 bytes @ 0x18
  3338  0038                     	ds	1
  3339  0039                     time_Display@num:	
  3340                           
  3341                           ; 4 bytes @ 0x19
  3342  0039                     	ds	3
  3343  003C                     Read_time_to_Com@crc_tmp:	
  3344                           
  3345                           ; 2 bytes @ 0x1C
  3346  003C                     	ds	2
  3347  003E                     Bq32k_Rtc_Write_Time@p:	
  3348  003E                     Read_time_to_Com@i:	
  3349                           ; 1 bytes @ 0x1E
  3350                           
  3351                           
  3352                           ; 1 bytes @ 0x1E
  3353  003E                     	ds	1
  3354  003F                     ??_Set_time_from_Com:	
  3355                           
  3356                           ; 1 bytes @ 0x1F
  3357  003F                     	ds	1
  3358  0040                     ??_Com_Process:	
  3359                           
  3360                           ; 1 bytes @ 0x20
  3361  0040                     	ds	2
  3362  0042                     Calculate_Time@temp:	
  3363                           
  3364                           ; 4 bytes @ 0x22
  3365  0042                     	ds	4
  3366  0046                     Calculate_Time@temp1:	
  3367                           
  3368                           ; 4 bytes @ 0x26
  3369  0046                     	ds	4
  3370  004A                     Calculate_Time@temp2:	
  3371                           
  3372                           ; 4 bytes @ 0x2A
  3373  004A                     	ds	4
  3374  004E                     ??_Save_process:	
  3375  004E                     ??_tc_temperature_trans:	
  3376                           ; 1 bytes @ 0x2E
  3377                           
  3378                           
  3379                           ; 1 bytes @ 0x2E
  3380  004E                     	ds	2
  3381  0050                     Save_process@var_time:	
  3382                           
  3383                           ; 2 bytes @ 0x30
  3384  0050                     	ds	2
  3385  0052                     tc_temperature_trans@temperature_back:	
  3386                           
  3387                           ; 2 bytes @ 0x32
  3388  0052                     	ds	2
  3389  0054                     tc_temperature_trans@temperature_absolute:	
  3390                           
  3391                           ; 2 bytes @ 0x34
  3392  0054                     	ds	2
  3393  0056                     tc_temperature_trans@var_time:	
  3394                           
  3395                           ; 2 bytes @ 0x36
  3396  0056                     	ds	2
  3397  0058                     tc_temperature_trans@temperature_temp:	
  3398                           
  3399                           ; 2 bytes @ 0x38
  3400  0058                     	ds	2
  3401  005A                     ??_temperature_display:	
  3402                           
  3403                           ; 1 bytes @ 0x3A
  3404  005A                     	ds	1
  3405  005B                     ??_temperature_process:	
  3406  005B                     ??_Key_Process:	
  3407                           ; 1 bytes @ 0x3B
  3408                           
  3409                           
  3410                           ; 1 bytes @ 0x3B
  3411  005B                     	ds	1
  3412  005C                     Key_Process@data_temp:	
  3413                           
  3414                           ; 2 bytes @ 0x3C
  3415  005C                     	ds	2
  3416  005E                     Key_Process@gKeyValue:	
  3417                           
  3418                           ; 1 bytes @ 0x3E
  3419  005E                     	ds	1
  3420  005F                     Key_Process@i:	
  3421                           
  3422                           ; 2 bytes @ 0x3F
  3423  005F                     	ds	2
  3424  0061                     ??_main:	
  3425                           
  3426                           ; 1 bytes @ 0x41
  3427  0061                     	ds	3
  3428                           
  3429                           	psect	maintext
  3430  0414                     __pmaintext:	
  3431 ;;
  3432 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3433 ;;
  3434 ;; *************** function _main *****************
  3435 ;; Defined at:
  3436 ;;		line 67 in file "main.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  bat_data        2    3[BANK3 ] unsigned int 
  3441 ;;  data_temp       2    0[BANK3 ] unsigned int 
  3442 ;;  i               1    2[BANK3 ] unsigned char 
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  1    wreg      void 
  3445 ;; Registers used:
  3446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3447 ;; Tracked objects:
  3448 ;;		On entry : B1F/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3453 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  3454 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3455 ;;      Totals:         0       3       0       0       5       0       0       0       0       0       0       0       
      +0       0
  3456 ;;Total ram usage:        8 bytes
  3457 ;; Hardware stack levels required when called:   12
  3458 ;; This function calls:
  3459 ;;		_ADC_GetConversion
  3460 ;;		_Bq32k_Time_Init
  3461 ;;		_Com_Process
  3462 ;;		_Key_Process
  3463 ;;		_SYSTEM_Initialize
  3464 ;;		_Save_process
  3465 ;;		_SendCmd_1621
  3466 ;;		_Serach_Flash_Head
  3467 ;;		_Sleep_process
  3468 ;;		_WriteAll_1621
  3469 ;;		_temperature_process
  3470 ;; This function is called by:
  3471 ;;		Startup code after reset
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           
  3476                           ;psect for function _main
  3477  0414                     _main:	
  3478                           
  3479                           ;main.c: 69: unsigned char i=0;
  3480                           
  3481                           ;incstack = 0
  3482                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3483  0414  0023               	movlb	3	; select bank3
  3484  0415  01E0               	clrf	main@i^(0+384)
  3485                           
  3486                           ;main.c: 71: unsigned int bat_data = 0;
  3487  0416  01E1               	clrf	main@bat_data^(0+384)
  3488  0417  01E2               	clrf	(main@bat_data+1)^(0+384)
  3489                           
  3490                           ;main.c: 72: unsigned int data_temp = 0;
  3491  0418  01DE               	clrf	main@data_temp^(0+384)
  3492  0419  01DF               	clrf	(main@data_temp+1)^(0+384)
  3493                           
  3494                           ;main.c: 73: SWDTEN = 0;
  3495  041A  0021               	movlb	1	; select bank1
  3496  041B  1017               	bcf	23,0	;volatile
  3497                           
  3498                           ;main.c: 74: WDTPS0 = 1;
  3499  041C  1497               	bsf	23,1	;volatile
  3500                           
  3501                           ;main.c: 75: WDTPS1 = 0;
  3502  041D  1117               	bcf	23,2	;volatile
  3503                           
  3504                           ;main.c: 76: WDTPS2 = 0;
  3505  041E  1197               	bcf	23,3	;volatile
  3506                           
  3507                           ;main.c: 77: WDTPS3 = 1;
  3508  041F  1617               	bsf	23,4	;volatile
  3509                           
  3510                           ;main.c: 78: WDTPS4 = 0;
  3511  0420  1297               	bcf	23,5	;volatile
  3512  0421  0064               	clrwdt	;# 
  3513                           
  3514                           ;main.c: 81: SYSTEM_Initialize();
  3515  0422  3194  246F  3184   	fcall	_SYSTEM_Initialize
  3516                           
  3517                           ;main.c: 84: _delay((unsigned long)((3000)*(4000000/4000.0)));
  3518  0425  3010               	movlw	16
  3519  0426  0020               	movlb	0	; select bank0
  3520  0427  00E3               	movwf	??_main+2
  3521  0428  3039               	movlw	57
  3522  0429  00E2               	movwf	??_main+1
  3523  042A  301B               	movlw	27
  3524  042B  00E1               	movwf	??_main
  3525  042C                     u6187:	
  3526  042C  0BE1               	decfsz	??_main,f
  3527  042D  2C2C               	goto	u6187
  3528  042E  0BE2               	decfsz	??_main+1,f
  3529  042F  2C2C               	goto	u6187
  3530  0430  0BE3               	decfsz	??_main+2,f
  3531  0431  2C2C               	goto	u6187
  3532  0432  3200               	nop2
  3533                           
  3534                           ;main.c: 85: if(RB5 == 0 ) do { LATA2 = 1; } while(0);
  3535  0433  0020               	movlb	0	; select bank0
  3536  0434  1A8D               	btfsc	13,5	;volatile
  3537  0435  2C39               	goto	l465
  3538  0436  0022               	movlb	2	; select bank2
  3539  0437  150C               	bsf	12,2	;volatile
  3540  0438  2C3B               	goto	l467
  3541  0439                     l465:	
  3542                           ;main.c: 86: else do { LATA2 = 0; } while(0);
  3543                           
  3544  0439  0022               	movlb	2	; select bank2
  3545  043A  110C               	bcf	12,2	;volatile
  3546  043B                     l467:	
  3547                           ;main.c: 87: do { LATA3 = 0; } while(0);
  3548                           
  3549  043B  118C               	bcf	12,3	;volatile
  3550                           
  3551                           ;main.c: 90: bat_data = 0;
  3552  043C  0023               	movlb	3	; select bank3
  3553  043D  01E1               	clrf	main@bat_data^(0+384)
  3554  043E  01E2               	clrf	(main@bat_data+1)^(0+384)
  3555                           
  3556                           ;main.c: 91: for(i=0;i<16;i++)
  3557  043F  01E0               	clrf	main@i^(0+384)
  3558  0440  3010               	movlw	16
  3559  0441  0260               	subwf	main@i^(0+384),w
  3560  0442  1803               	btfsc	3,0
  3561  0443  2C5D               	goto	l6562
  3562  0444                     l6556:	
  3563                           
  3564                           ;main.c: 92: {
  3565                           ;main.c: 93: bat_data = bat_data + ADC_GetConversion(ADC);
  3566  0444  300B               	movlw	11
  3567  0445  3195  2595  3184   	fcall	_ADC_GetConversion
  3568  0448  0023               	movlb	3	; select bank3
  3569  0449  0861               	movf	main@bat_data^(0+384),w
  3570  044A  0020               	movlb	0	; select bank0
  3571  044B  0721               	addwf	?_ADC_GetConversion,w
  3572  044C  0023               	movlb	3	; select bank3
  3573  044D  00E1               	movwf	main@bat_data^(0+384)
  3574  044E  0862               	movf	(main@bat_data+1)^(0+384),w
  3575  044F  0020               	movlb	0	; select bank0
  3576  0450  3D22               	addwfc	?_ADC_GetConversion+1,w
  3577  0451  0023               	movlb	3	; select bank3
  3578  0452  00E2               	movwf	(main@bat_data+1)^(0+384)
  3579  0453  3001               	movlw	1
  3580  0454  0020               	movlb	0	; select bank0
  3581  0455  00E1               	movwf	??_main
  3582  0456  0861               	movf	??_main,w
  3583  0457  0023               	movlb	3	; select bank3
  3584  0458  07E0               	addwf	main@i^(0+384),f
  3585  0459  3010               	movlw	16
  3586  045A  0260               	subwf	main@i^(0+384),w
  3587  045B  1C03               	skipc
  3588  045C  2C44               	goto	l6556
  3589  045D                     l6562:	
  3590                           
  3591                           ;main.c: 94: }
  3592                           ;main.c: 95: bat_data = bat_data>>4;
  3593  045D  0E61               	swapf	main@bat_data^(0+384),w
  3594  045E  390F               	andlw	15
  3595  045F  00E1               	movwf	main@bat_data^(0+384)
  3596  0460  0E62               	swapf	(main@bat_data+1)^(0+384),w
  3597  0461  39F0               	andlw	240
  3598  0462  04E1               	iorwf	main@bat_data^(0+384),f
  3599  0463  0E62               	swapf	(main@bat_data+1)^(0+384),w
  3600  0464  390F               	andlw	15
  3601  0465  00E2               	movwf	(main@bat_data^(0+384)+1)
  3602                           
  3603                           ;main.c: 96: if( bat_data < 800)
  3604  0466  3003               	movlw	3
  3605  0467  0262               	subwf	(main@bat_data+1)^(0+384),w
  3606  0468  3020               	movlw	32
  3607  0469  1903               	skipnz
  3608  046A  0261               	subwf	main@bat_data^(0+384),w
  3609  046B  1803               	skipnc
  3610  046C  2C71               	goto	l6566
  3611                           
  3612                           ;main.c: 97: {
  3613                           ;main.c: 98: do { LATA2 = 0; } while(0);
  3614  046D  0022               	movlb	2	; select bank2
  3615  046E  110C               	bcf	12,2	;volatile
  3616  046F                     l474:	
  3617                           ;main.c: 99: while(1)asm("clrwdt");
  3618                           
  3619  046F  0064               	clrwdt	;# 
  3620  0470  2C6F               	goto	l474
  3621  0471                     l6566:	
  3622                           
  3623                           ;main.c: 100: }
  3624                           ;main.c: 101: i = 0 ;
  3625  0471  0023               	movlb	3	; select bank3
  3626  0472  01E0               	clrf	main@i^(0+384)
  3627                           
  3628                           ;main.c: 102: bat_data = 0 ;
  3629  0473  01E1               	clrf	main@bat_data^(0+384)
  3630  0474  01E2               	clrf	(main@bat_data+1)^(0+384)
  3631                           
  3632                           ;main.c: 106: do { TRISB3 = 1; } while(0);
  3633  0475  0021               	movlb	1	; select bank1
  3634  0476  158D               	bsf	13,3	;volatile
  3635                           
  3636                           ;main.c: 107: Bq32k_Time_Init();
  3637  0477  3188  2037  3184   	fcall	_Bq32k_Time_Init
  3638                           
  3639                           ;main.c: 108: SendCmd_1621(0x52);
  3640  047A  3052               	movlw	82
  3641  047B  3194  2484  3184   	fcall	_SendCmd_1621
  3642                           
  3643                           ;main.c: 109: SendCmd_1621(0X28);
  3644  047E  3028               	movlw	40
  3645  047F  3194  2484  3184   	fcall	_SendCmd_1621
  3646                           
  3647                           ;main.c: 110: SendCmd_1621(0x02);
  3648  0482  3002               	movlw	2
  3649  0483  3194  2484  3184   	fcall	_SendCmd_1621
  3650                           
  3651                           ;main.c: 111: SendCmd_1621(0x06);
  3652  0486  3006               	movlw	6
  3653  0487  3194  2484  3184   	fcall	_SendCmd_1621
  3654                           
  3655                           ;main.c: 113: WriteAll_1621(0,Dis_TAB+17,4);
  3656  048A  3011               	movlw	low ((_Dis_TAB| (0+32768)+17))
  3657  048B  0020               	movlb	0	; select bank0
  3658  048C  00A5               	movwf	WriteAll_1621@p
  3659  048D  3098               	movlw	high ((_Dis_TAB| (0+32768)+17))
  3660  048E  00A6               	movwf	WriteAll_1621@p+1
  3661  048F  3004               	movlw	4
  3662  0490  00E1               	movwf	??_main
  3663  0491  0861               	movf	??_main,w
  3664  0492  00A7               	movwf	WriteAll_1621@cnt
  3665  0493  3000               	movlw	0
  3666  0494  3188  206B  3184   	fcall	_WriteAll_1621
  3667                           
  3668                           ;main.c: 115: time_count = 0;
  3669  0497  0020               	movlb	0	; select bank0
  3670  0498  01E9               	clrf	_time_count
  3671                           
  3672                           ;main.c: 116: Record_flag = 0;
  3673  0499  01E6               	clrf	_Record_flag
  3674                           
  3675                           ;main.c: 117: Cur_temperature_time_ch1 = 0;
  3676  049A  0022               	movlb	2	; select bank2
  3677  049B  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  3678                           
  3679                           ;main.c: 118: Cur_temperature_time_ch2 = 0;
  3680  049C  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  3681                           
  3682                           ;main.c: 119: CH1_temperature = 0;
  3683  049D  0021               	movlb	1	; select bank1
  3684  049E  01EE               	clrf	_CH1_temperature^(0+128)
  3685  049F  01EF               	clrf	(_CH1_temperature+1)^(0+128)
  3686                           
  3687                           ;main.c: 120: CH2_temperature = 0;
  3688  04A0  0022               	movlb	2	; select bank2
  3689  04A1  01AE               	clrf	_CH2_temperature^(0+256)
  3690  04A2  01AF               	clrf	(_CH2_temperature+1)^(0+256)
  3691                           
  3692                           ;main.c: 121: CH1_state = 0;
  3693  04A3  01B4               	clrf	_CH1_state^(0+256)
  3694                           
  3695                           ;main.c: 122: CH2_state = 0;
  3696  04A4  01B5               	clrf	_CH2_state^(0+256)
  3697                           
  3698                           ;main.c: 123: Usart_Rx_Cnt = 0;
  3699  04A5  0020               	movlb	0	; select bank0
  3700  04A6  01E7               	clrf	_Usart_Rx_Cnt
  3701                           
  3702                           ;main.c: 124: Set_time_cmd_flag = 0;
  3703  04A7  0022               	movlb	2	; select bank2
  3704  04A8  01BB               	clrf	_Set_time_cmd_flag^(0+256)
  3705                           
  3706                           ;main.c: 125: Usart_Run_Flag = 0;
  3707  04A9  01BC               	clrf	_Usart_Run_Flag^(0+256)
  3708                           
  3709                           ;main.c: 126: Inf_cmd_flag = 0;
  3710  04AA  01B8               	clrf	_Inf_cmd_flag^(0+256)
  3711                           
  3712                           ;main.c: 127: bat_data = 0;
  3713  04AB  0023               	movlb	3	; select bank3
  3714  04AC  01E1               	clrf	main@bat_data^(0+384)
  3715  04AD  01E2               	clrf	(main@bat_data+1)^(0+384)
  3716                           
  3717                           ;main.c: 128: Cur_Save_Index = 0x2000;
  3718  04AE  3000               	movlw	0
  3719  04AF  0020               	movlb	0	; select bank0
  3720  04B0  00E4               	movwf	_Cur_Save_Index
  3721  04B1  3020               	movlw	32
  3722  04B2  00E5               	movwf	_Cur_Save_Index+1
  3723                           
  3724                           ;main.c: 129: Serach_Flash_Head();
  3725  04B3  318A  2251  3184   	fcall	_Serach_Flash_Head
  3726  04B6  0064               	clrwdt	;# 
  3727                           
  3728                           ;main.c: 132: SWDTEN = 1;
  3729  04B7  0021               	movlb	1	; select bank1
  3730  04B8  1417               	bsf	23,0	;volatile
  3731                           
  3732                           ;main.c: 158: (INTCONbits.GIE = 1);
  3733  04B9  178B               	bsf	11,7	;volatile
  3734                           
  3735                           ;main.c: 161: (INTCONbits.PEIE = 1);
  3736  04BA  170B               	bsf	11,6	;volatile
  3737  04BB                     l6618:	
  3738                           ;main.c: 169: while (1)
  3739                           
  3740                           
  3741                           ;main.c: 170: {
  3742                           ;main.c: 175: bat_data = bat_data + ADC_GetConversion(ADC);
  3743  04BB  300B               	movlw	11
  3744  04BC  3195  2595  3184   	fcall	_ADC_GetConversion
  3745  04BF  0023               	movlb	3	; select bank3
  3746  04C0  0861               	movf	main@bat_data^(0+384),w
  3747  04C1  0020               	movlb	0	; select bank0
  3748  04C2  0721               	addwf	?_ADC_GetConversion,w
  3749  04C3  0023               	movlb	3	; select bank3
  3750  04C4  00E1               	movwf	main@bat_data^(0+384)
  3751  04C5  0862               	movf	(main@bat_data+1)^(0+384),w
  3752  04C6  0020               	movlb	0	; select bank0
  3753  04C7  3D22               	addwfc	?_ADC_GetConversion+1,w
  3754  04C8  0023               	movlb	3	; select bank3
  3755  04C9  00E2               	movwf	(main@bat_data+1)^(0+384)
  3756                           
  3757                           ;main.c: 176: i++;
  3758  04CA  3001               	movlw	1
  3759  04CB  0020               	movlb	0	; select bank0
  3760  04CC  00E1               	movwf	??_main
  3761  04CD  0861               	movf	??_main,w
  3762  04CE  0023               	movlb	3	; select bank3
  3763  04CF  07E0               	addwf	main@i^(0+384),f
  3764                           
  3765                           ;main.c: 177: if(i == 16)
  3766  04D0  3010               	movlw	16
  3767  04D1  0660               	xorwf	main@i^(0+384),w
  3768  04D2  1D03               	btfss	3,2
  3769  04D3  2CEC               	goto	l6632
  3770                           
  3771                           ;main.c: 178: {
  3772                           ;main.c: 179: i = 0;
  3773  04D4  01E0               	clrf	main@i^(0+384)
  3774                           
  3775                           ;main.c: 180: bat_data = bat_data>>4;
  3776  04D5  0E61               	swapf	main@bat_data^(0+384),w
  3777  04D6  390F               	andlw	15
  3778  04D7  00E1               	movwf	main@bat_data^(0+384)
  3779  04D8  0E62               	swapf	(main@bat_data+1)^(0+384),w
  3780  04D9  39F0               	andlw	240
  3781  04DA  04E1               	iorwf	main@bat_data^(0+384),f
  3782  04DB  0E62               	swapf	(main@bat_data+1)^(0+384),w
  3783  04DC  390F               	andlw	15
  3784  04DD  00E2               	movwf	(main@bat_data^(0+384)+1)
  3785                           
  3786                           ;main.c: 181: if( bat_data < 800)
  3787  04DE  3003               	movlw	3
  3788  04DF  0262               	subwf	(main@bat_data+1)^(0+384),w
  3789  04E0  3020               	movlw	32
  3790  04E1  1903               	skipnz
  3791  04E2  0261               	subwf	main@bat_data^(0+384),w
  3792  04E3  1803               	skipnc
  3793  04E4  2CE9               	goto	l6630
  3794                           
  3795                           ;main.c: 182: {
  3796                           ;main.c: 183: do { LATA2 = 0; } while(0);
  3797  04E5  0022               	movlb	2	; select bank2
  3798  04E6  110C               	bcf	12,2	;volatile
  3799  04E7                     l484:	
  3800                           ;main.c: 184: while(1)asm("clrwdt");
  3801                           
  3802  04E7  0064               	clrwdt	;# 
  3803  04E8  2CE7               	goto	l484
  3804  04E9                     l6630:	
  3805                           
  3806                           ;main.c: 185: }
  3807                           ;main.c: 186: bat_data = 0;
  3808  04E9  0023               	movlb	3	; select bank3
  3809  04EA  01E1               	clrf	main@bat_data^(0+384)
  3810  04EB  01E2               	clrf	(main@bat_data+1)^(0+384)
  3811  04EC                     l6632:	
  3812                           
  3813                           ;main.c: 187: }
  3814                           ;main.c: 192: temperature_process();
  3815  04EC  3188  20D5  3184   	fcall	_temperature_process
  3816                           
  3817                           ;main.c: 193: Key_Process();
  3818  04EF  3186  26AA  3184   	fcall	_Key_Process
  3819                           
  3820                           ;main.c: 194: Save_process();
  3821  04F2  318C  24BA  3184   	fcall	_Save_process
  3822                           
  3823                           ;main.c: 195: Com_Process();
  3824  04F5  3194  2411  3184   	fcall	_Com_Process
  3825                           
  3826                           ;main.c: 197: if(Usart_Run_Flag == 0)
  3827  04F8  0022               	movlb	2	; select bank2
  3828  04F9  083C               	movf	_Usart_Run_Flag^(0+256),w
  3829  04FA  1D03               	btfss	3,2
  3830  04FB  2CBB               	goto	l6618
  3831                           
  3832                           ;main.c: 198: {
  3833                           ;main.c: 199: Sleep_process();
  3834  04FC  3195  25B3  3184   	fcall	_Sleep_process
  3835  04FF  2CBB               	goto	l6618
  3836  0500                     __end_of_main:	
  3837                           
  3838                           	psect	text1
  3839  15B3                     __ptext1:	
  3840 ;; *************** function _Sleep_process *****************
  3841 ;; Defined at:
  3842 ;;		line 17 in file "mcc_generated_files/power.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;		None
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;		None
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  1    wreg      void 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, status,0, pclath, cstack
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3860 ;;Total ram usage:        0 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    4
  3863 ;; This function calls:
  3864 ;;		_Step_control
  3865 ;; This function is called by:
  3866 ;;		_main
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           
  3871                           ;psect for function _Sleep_process
  3872  15B3                     _Sleep_process:	
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in _Sleep_process: [wreg+status,2+status,0+pclath+cstack]
  3876                           ;power.c: 19: do { LATA3 = 1; } while(0);
  3877  15B3  0022               	movlb	2	; select bank2
  3878  15B4  158C               	bsf	12,3	;volatile
  3879                           
  3880                           ;power.c: 20: do { LATA4 = 1; } while(0);
  3881  15B5  160C               	bsf	12,4	;volatile
  3882                           
  3883                           ;power.c: 21: do { LATA0 = 1; } while(0);
  3884  15B6  140C               	bsf	12,0	;volatile
  3885                           
  3886                           ;power.c: 22: do { LATA1 = 1; } while(0);
  3887  15B7  148C               	bsf	12,1	;volatile
  3888                           
  3889                           ;power.c: 26: do { LATC0 = 1; } while(0);
  3890  15B8  140E               	bsf	14,0	;volatile
  3891                           
  3892                           ;power.c: 27: do { LATC2 = 1; } while(0);
  3893  15B9  150E               	bsf	14,2	;volatile
  3894                           
  3895                           ;power.c: 28: do { LATA6 = 1; } while(0);
  3896  15BA  170C               	bsf	12,6	;volatile
  3897                           
  3898                           ;power.c: 29: do { LATC1 = 1; } while(0);
  3899  15BB  148E               	bsf	14,1	;volatile
  3900                           
  3901                           ;power.c: 30: do { LATB0 = 1; } while(0);
  3902  15BC  140D               	bsf	13,0	;volatile
  3903                           
  3904                           ;power.c: 31: do { LATB1 = 1; } while(0);
  3905  15BD  148D               	bsf	13,1	;volatile
  3906  15BE  0063               	sleep	;# 
  3907                           
  3908                           ;power.c: 33: if( time_count == 0 || time_count == 2 )
  3909  15BF  0020               	movlb	0	; select bank0
  3910  15C0  0869               	movf	_time_count,w
  3911  15C1  1903               	btfsc	3,2
  3912  15C2  2DC7               	goto	l1201
  3913  15C3  3002               	movlw	2
  3914  15C4  0669               	xorwf	_time_count,w
  3915  15C5  1D03               	btfss	3,2
  3916  15C6  2DCF               	goto	l6478
  3917  15C7                     l1201:	
  3918                           ;power.c: 34: {
  3919                           ;power.c: 35: do { LATA3 = 0; } while(0);
  3920                           
  3921  15C7  0022               	movlb	2	; select bank2
  3922  15C8  118C               	bcf	12,3	;volatile
  3923                           
  3924                           ;power.c: 36: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  3925  15C9  0020               	movlb	0	; select bank0
  3926  15CA  0366               	decf	_Record_flag,w
  3927  15CB  1D03               	btfss	3,2
  3928  15CC  2DCF               	goto	l6478
  3929  15CD  0022               	movlb	2	; select bank2
  3930  15CE  120C               	bcf	12,4	;volatile
  3931  15CF                     l6478:	
  3932                           
  3933                           ;power.c: 37: }
  3934                           ;power.c: 39: Step_control();
  3935  15CF  3196  26FB         	fcall	_Step_control
  3936  15D1  0008               	return
  3937  15D2                     __end_of_Sleep_process:	
  3938                           
  3939                           	psect	text2
  3940  16FB                     __ptext2:	
  3941 ;; *************** function _Step_control *****************
  3942 ;; Defined at:
  3943 ;;		line 48 in file "mcc_generated_files/power.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      void 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3961 ;;Total ram usage:        1 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    3
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_Sleep_process
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           
  3972                           ;psect for function _Step_control
  3973  16FB                     _Step_control:	
  3974                           
  3975                           ;power.c: 50: time_count++;
  3976                           
  3977                           ;incstack = 0
  3978                           ; Regs used in _Step_control: [wreg+status,2+status,0]
  3979  16FB  3001               	movlw	1
  3980  16FC  0020               	movlb	0	; select bank0
  3981  16FD  00A1               	movwf	??_Step_control
  3982  16FE  0821               	movf	??_Step_control,w
  3983  16FF  07E9               	addwf	_time_count,f
  3984                           
  3985                           ;power.c: 51: if(time_count == 4 || time_count > 12) time_count = 0;
  3986  1700  3004               	movlw	4
  3987  1701  0669               	xorwf	_time_count,w
  3988  1702  1903               	btfsc	3,2
  3989  1703  2F08               	goto	l6240
  3990  1704  300D               	movlw	13
  3991  1705  0269               	subwf	_time_count,w
  3992  1706  1C03               	skipc
  3993  1707  2F09               	goto	l6242
  3994  1708                     l6240:	
  3995  1708  01E9               	clrf	_time_count
  3996  1709                     l6242:	
  3997                           
  3998                           ;power.c: 53: Cur_temperature_time_ch1++;
  3999  1709  3001               	movlw	1
  4000  170A  00A1               	movwf	??_Step_control
  4001  170B  0821               	movf	??_Step_control,w
  4002  170C  0022               	movlb	2	; select bank2
  4003  170D  07B6               	addwf	_Cur_temperature_time_ch1^(0+256),f
  4004                           
  4005                           ;power.c: 54: if(Cur_temperature_time_ch1 > 130)
  4006  170E  3083               	movlw	131
  4007  170F  0236               	subwf	_Cur_temperature_time_ch1^(0+256),w
  4008  1710  1803               	btfsc	3,0
  4009                           
  4010                           ;power.c: 55: {
  4011                           ;power.c: 56: Cur_temperature_time_ch1 = 0;
  4012  1711  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  4013                           
  4014                           ;power.c: 57: }
  4015                           ;power.c: 59: Cur_temperature_time_ch2++;
  4016  1712  3001               	movlw	1
  4017  1713  0020               	movlb	0	; select bank0
  4018  1714  00A1               	movwf	??_Step_control
  4019  1715  0821               	movf	??_Step_control,w
  4020  1716  0022               	movlb	2	; select bank2
  4021  1717  07B7               	addwf	_Cur_temperature_time_ch2^(0+256),f
  4022                           
  4023                           ;power.c: 60: if(Cur_temperature_time_ch2 > 130)
  4024  1718  3083               	movlw	131
  4025  1719  0237               	subwf	_Cur_temperature_time_ch2^(0+256),w
  4026  171A  1C03               	skipc
  4027  171B  0008               	return
  4028                           
  4029                           ;power.c: 61: {
  4030                           ;power.c: 62: Cur_temperature_time_ch2= 0;
  4031  171C  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  4032  171D  0008               	return
  4033  171E                     __end_of_Step_control:	
  4034                           
  4035                           	psect	text3
  4036  0A51                     __ptext3:	
  4037 ;; *************** function _Serach_Flash_Head *****************
  4038 ;; Defined at:
  4039 ;;		line 42 in file "mcc_generated_files/save.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;		None
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  i               2   10[BANK0 ] unsigned int 
  4044 ;;  data            2    8[BANK0 ] unsigned int 
  4045 ;;  count           1    7[BANK0 ] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      void 
  4048 ;; Registers used:
  4049 ;;		wreg, status,2, status,0, pclath, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4056 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;Total ram usage:        6 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    5
  4062 ;; This function calls:
  4063 ;;		_FLASH_ReadWord
  4064 ;;		_Write_Flash_finish
  4065 ;; This function is called by:
  4066 ;;		_main
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _Serach_Flash_Head
  4072  0A51                     _Serach_Flash_Head:	
  4073                           
  4074                           ;save.c: 44: unsigned int i=0;
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _Serach_Flash_Head: [wreg+status,2+status,0+pclath+cstack]
  4078  0A51  0020               	movlb	0	; select bank0
  4079  0A52  01AA               	clrf	Serach_Flash_Head@i
  4080  0A53  01AB               	clrf	Serach_Flash_Head@i+1
  4081                           
  4082                           ;save.c: 45: unsigned int data=0;
  4083  0A54  01A8               	clrf	Serach_Flash_Head@data
  4084  0A55  01A9               	clrf	Serach_Flash_Head@data+1
  4085                           
  4086                           ;save.c: 46: unsigned char count =0;
  4087  0A56  01A7               	clrf	Serach_Flash_Head@count
  4088                           
  4089                           ;save.c: 47: for(i = 0x2000; i<16384;i++ )
  4090  0A57  3000               	movlw	0
  4091  0A58  00AA               	movwf	Serach_Flash_Head@i
  4092  0A59  3020               	movlw	32
  4093  0A5A  00AB               	movwf	Serach_Flash_Head@i+1
  4094  0A5B                     L1:	
  4095  0A5B  3040               	movlw	64
  4096  0A5C  022B               	subwf	Serach_Flash_Head@i+1,w
  4097  0A5D  3000               	movlw	0
  4098  0A5E  1903               	skipnz
  4099  0A5F  022A               	subwf	Serach_Flash_Head@i,w
  4100  0A60  1803               	btfsc	3,0
  4101  0A61  0008               	return
  4102                           
  4103                           ;save.c: 48: {
  4104                           ;save.c: 49: data = FLASH_ReadWord(i);
  4105  0A62  082B               	movf	Serach_Flash_Head@i+1,w
  4106  0A63  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  4107  0A64  082A               	movf	Serach_Flash_Head@i,w
  4108  0A65  00A1               	movwf	FLASH_ReadWord@flashAddr
  4109  0A66  3195  25D2  318A   	fcall	_FLASH_ReadWord
  4110  0A69  0020               	movlb	0	; select bank0
  4111  0A6A  0822               	movf	?_FLASH_ReadWord+1,w
  4112  0A6B  00A9               	movwf	Serach_Flash_Head@data+1
  4113  0A6C  0821               	movf	?_FLASH_ReadWord,w
  4114  0A6D  00A8               	movwf	Serach_Flash_Head@data
  4115                           
  4116                           ;save.c: 51: if( data == 0x1555 )
  4117  0A6E  3055               	movlw	85
  4118  0A6F  0628               	xorwf	Serach_Flash_Head@data,w
  4119  0A70  3015               	movlw	21
  4120  0A71  1903               	skipnz
  4121  0A72  0629               	xorwf	Serach_Flash_Head@data+1,w
  4122  0A73  1D03               	btfss	3,2
  4123  0A74  2A7A               	goto	l6338
  4124                           
  4125                           ;save.c: 52: {
  4126                           ;save.c: 53: count++;
  4127  0A75  3001               	movlw	1
  4128  0A76  00A6               	movwf	??_Serach_Flash_Head
  4129  0A77  0826               	movf	??_Serach_Flash_Head,w
  4130  0A78  07A7               	addwf	Serach_Flash_Head@count,f
  4131                           
  4132                           ;save.c: 54: }
  4133  0A79  2A98               	goto	l6356
  4134  0A7A                     l6338:	
  4135                           
  4136                           ;save.c: 55: else
  4137                           ;save.c: 56: {
  4138                           ;save.c: 57: if( data == 0x3fff && count >1 )
  4139  0A7A  0A28               	incf	Serach_Flash_Head@data,w
  4140  0A7B  303F               	movlw	63
  4141  0A7C  1903               	skipnz
  4142  0A7D  0629               	xorwf	Serach_Flash_Head@data+1,w
  4143  0A7E  1D03               	btfss	3,2
  4144  0A7F  2A89               	goto	l6346
  4145  0A80  3002               	movlw	2
  4146  0A81  0227               	subwf	Serach_Flash_Head@count,w
  4147  0A82  1C03               	skipc
  4148  0A83  2A89               	goto	l6346
  4149                           
  4150                           ;save.c: 58: {
  4151                           ;save.c: 59: Cur_Save_Index = i;
  4152  0A84  082B               	movf	Serach_Flash_Head@i+1,w
  4153  0A85  00E5               	movwf	_Cur_Save_Index+1
  4154  0A86  082A               	movf	Serach_Flash_Head@i,w
  4155  0A87  00E4               	movwf	_Cur_Save_Index
  4156                           
  4157                           ;save.c: 60: break;
  4158  0A88  0008               	return
  4159  0A89                     l6346:	
  4160                           ;save.c: 61: }
  4161                           
  4162                           
  4163                           ;save.c: 62: else if( data == 0x3fff )
  4164  0A89  0A28               	incf	Serach_Flash_Head@data,w
  4165  0A8A  303F               	movlw	63
  4166  0A8B  1903               	skipnz
  4167  0A8C  0629               	xorwf	Serach_Flash_Head@data+1,w
  4168  0A8D  1D03               	btfss	3,2
  4169  0A8E  2A96               	goto	l6354
  4170                           
  4171                           ;save.c: 63: {
  4172                           ;save.c: 64: Cur_Save_Index = i;
  4173  0A8F  082B               	movf	Serach_Flash_Head@i+1,w
  4174  0A90  00E5               	movwf	_Cur_Save_Index+1
  4175  0A91  082A               	movf	Serach_Flash_Head@i,w
  4176  0A92  00E4               	movwf	_Cur_Save_Index
  4177                           
  4178                           ;save.c: 65: Write_Flash_finish();
  4179  0A93  3196  2674         	fcall	_Write_Flash_finish
  4180                           
  4181                           ;save.c: 66: break;
  4182  0A95  0008               	return
  4183  0A96                     l6354:	
  4184                           ;save.c: 67: }
  4185                           
  4186                           
  4187                           ;save.c: 68: else
  4188                           ;save.c: 69: {
  4189                           ;save.c: 70: count = 0;
  4190  0A96  0020               	movlb	0	; select bank0
  4191  0A97  01A7               	clrf	Serach_Flash_Head@count
  4192  0A98                     l6356:	
  4193  0A98  3001               	movlw	1
  4194  0A99  0020               	movlb	0	; select bank0
  4195  0A9A  07AA               	addwf	Serach_Flash_Head@i,f
  4196  0A9B  3000               	movlw	0
  4197  0A9C  3DAB               	addwfc	Serach_Flash_Head@i+1,f
  4198  0A9D  2A5B               	goto	L1
  4199  0A9E                     __end_of_Serach_Flash_Head:	
  4200                           
  4201                           	psect	text4
  4202  0CBA                     __ptext4:	
  4203 ;; *************** function _Save_process *****************
  4204 ;; Defined at:
  4205 ;;		line 120 in file "mcc_generated_files/save.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  var_time        2   48[BANK0 ] unsigned int 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  1    wreg      void 
  4212 ;; Registers used:
  4213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4223 ;;Total ram usage:        4 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    8
  4226 ;; This function calls:
  4227 ;;		_Calculate_Time
  4228 ;;		_Save_Write_word
  4229 ;; This function is called by:
  4230 ;;		_main
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           
  4235                           ;psect for function _Save_process
  4236  0CBA                     _Save_process:	
  4237                           
  4238                           ;save.c: 122: unsigned int var_time=0;
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in _Save_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4242  0CBA  0020               	movlb	0	; select bank0
  4243  0CBB  01D0               	clrf	Save_process@var_time
  4244  0CBC  01D1               	clrf	Save_process@var_time+1
  4245                           
  4246                           ;save.c: 123: if( time_count == 1 && Record_flag == 1 )
  4247  0CBD  0369               	decf	_time_count,w
  4248  0CBE  1D03               	btfss	3,2
  4249  0CBF  2CEF               	goto	l6442
  4250  0CC0  0366               	decf	_Record_flag,w
  4251  0CC1  1D03               	btfss	3,2
  4252  0CC2  2CEF               	goto	l6442
  4253                           
  4254                           ;save.c: 124: {
  4255                           ;save.c: 125: if(Cur_temperature_time_ch1 > 120)
  4256  0CC3  3079               	movlw	121
  4257  0CC4  0022               	movlb	2	; select bank2
  4258  0CC5  0236               	subwf	_Cur_temperature_time_ch1^(0+256),w
  4259  0CC6  1C03               	skipc
  4260  0CC7  0008               	return
  4261                           
  4262                           ;save.c: 126: {
  4263                           ;save.c: 127: var_time = Calculate_Time();
  4264  0CC8  3182  2272  318C   	fcall	_Calculate_Time
  4265  0CCB  0020               	movlb	0	; select bank0
  4266  0CCC  00CE               	movwf	??_Save_process
  4267  0CCD  01CF               	clrf	??_Save_process+1
  4268  0CCE  084E               	movf	??_Save_process,w
  4269  0CCF  00D0               	movwf	Save_process@var_time
  4270  0CD0  084F               	movf	??_Save_process+1,w
  4271  0CD1  00D1               	movwf	Save_process@var_time+1
  4272                           
  4273                           ;save.c: 128: var_time |= 0x100;
  4274  0CD2  1451               	bsf	Save_process@var_time+1,0
  4275                           
  4276                           ;save.c: 129: if(CH1_state == 1) var_time |= 0x400;
  4277  0CD3  0022               	movlb	2	; select bank2
  4278  0CD4  0334               	decf	_CH1_state^(0+256),w
  4279  0CD5  1D03               	btfss	3,2
  4280  0CD6  2CD9               	goto	l1118
  4281  0CD7  0020               	movlb	0	; select bank0
  4282  0CD8  1551               	bsf	Save_process@var_time+1,2
  4283  0CD9                     l1118:	
  4284                           
  4285                           ;save.c: 131: var_time |= 0x1000;
  4286  0CD9  0020               	movlb	0	; select bank0
  4287  0CDA  1651               	bsf	Save_process@var_time+1,4
  4288                           
  4289                           ;save.c: 133: Save_Write_word(var_time);
  4290  0CDB  0851               	movf	Save_process@var_time+1,w
  4291  0CDC  00A7               	movwf	Save_Write_word@data+1
  4292  0CDD  0850               	movf	Save_process@var_time,w
  4293  0CDE  00A6               	movwf	Save_Write_word@data
  4294  0CDF  318A  229E  318C   	fcall	_Save_Write_word
  4295                           
  4296                           ;save.c: 134: Save_Write_word(CH1_temperature);
  4297  0CE2  0021               	movlb	1	; select bank1
  4298  0CE3  086F               	movf	(_CH1_temperature+1)^(0+128),w
  4299  0CE4  0020               	movlb	0	; select bank0
  4300  0CE5  00A7               	movwf	Save_Write_word@data+1
  4301  0CE6  0021               	movlb	1	; select bank1
  4302  0CE7  086E               	movf	_CH1_temperature^(0+128),w
  4303  0CE8  0020               	movlb	0	; select bank0
  4304  0CE9  00A6               	movwf	Save_Write_word@data
  4305  0CEA  318A  229E         	fcall	_Save_Write_word
  4306                           
  4307                           ;save.c: 136: Cur_temperature_time_ch1 = 0;
  4308  0CEC  0022               	movlb	2	; select bank2
  4309  0CED  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  4310                           
  4311                           ;save.c: 137: }
  4312                           ;save.c: 138: }
  4313  0CEE  0008               	return
  4314  0CEF                     l6442:	
  4315                           
  4316                           ;save.c: 139: else if(time_count == 3 && Record_flag == 1)
  4317  0CEF  3003               	movlw	3
  4318  0CF0  0020               	movlb	0	; select bank0
  4319  0CF1  0669               	xorwf	_time_count,w
  4320  0CF2  1D03               	btfss	3,2
  4321  0CF3  0008               	return
  4322  0CF4  0366               	decf	_Record_flag,w
  4323  0CF5  1D03               	btfss	3,2
  4324  0CF6  0008               	return
  4325                           
  4326                           ;save.c: 140: {
  4327                           ;save.c: 141: if(Cur_temperature_time_ch2 > 120)
  4328  0CF7  3079               	movlw	121
  4329  0CF8  0022               	movlb	2	; select bank2
  4330  0CF9  0237               	subwf	_Cur_temperature_time_ch2^(0+256),w
  4331  0CFA  1C03               	skipc
  4332  0CFB  0008               	return
  4333                           
  4334                           ;save.c: 142: {
  4335                           ;save.c: 143: var_time = Calculate_Time();
  4336  0CFC  3182  2272  318C   	fcall	_Calculate_Time
  4337  0CFF  0020               	movlb	0	; select bank0
  4338  0D00  00CE               	movwf	??_Save_process
  4339  0D01  01CF               	clrf	??_Save_process+1
  4340  0D02  084E               	movf	??_Save_process,w
  4341  0D03  00D0               	movwf	Save_process@var_time
  4342  0D04  084F               	movf	??_Save_process+1,w
  4343  0D05  00D1               	movwf	Save_process@var_time+1
  4344                           
  4345                           ;save.c: 144: var_time |= 0x200;
  4346  0D06  14D1               	bsf	Save_process@var_time+1,1
  4347                           
  4348                           ;save.c: 145: if(CH2_state == 1) var_time |= 0x800;
  4349  0D07  0022               	movlb	2	; select bank2
  4350  0D08  0335               	decf	_CH2_state^(0+256),w
  4351  0D09  1D03               	btfss	3,2
  4352  0D0A  2D0D               	goto	l1122
  4353  0D0B  0020               	movlb	0	; select bank0
  4354  0D0C  15D1               	bsf	Save_process@var_time+1,3
  4355  0D0D                     l1122:	
  4356                           
  4357                           ;save.c: 147: var_time |= 0x1000;
  4358  0D0D  0020               	movlb	0	; select bank0
  4359  0D0E  1651               	bsf	Save_process@var_time+1,4
  4360                           
  4361                           ;save.c: 149: Save_Write_word(var_time);
  4362  0D0F  0851               	movf	Save_process@var_time+1,w
  4363  0D10  00A7               	movwf	Save_Write_word@data+1
  4364  0D11  0850               	movf	Save_process@var_time,w
  4365  0D12  00A6               	movwf	Save_Write_word@data
  4366  0D13  318A  229E  318C   	fcall	_Save_Write_word
  4367                           
  4368                           ;save.c: 150: Save_Write_word(CH2_temperature);
  4369  0D16  0022               	movlb	2	; select bank2
  4370  0D17  082F               	movf	(_CH2_temperature+1)^(0+256),w
  4371  0D18  0020               	movlb	0	; select bank0
  4372  0D19  00A7               	movwf	Save_Write_word@data+1
  4373  0D1A  0022               	movlb	2	; select bank2
  4374  0D1B  082E               	movf	_CH2_temperature^(0+256),w
  4375  0D1C  0020               	movlb	0	; select bank0
  4376  0D1D  00A6               	movwf	Save_Write_word@data
  4377  0D1E  318A  229E         	fcall	_Save_Write_word
  4378                           
  4379                           ;save.c: 152: Cur_temperature_time_ch2 = 0;
  4380  0D20  0022               	movlb	2	; select bank2
  4381  0D21  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  4382  0D22  0008               	return
  4383  0D23                     __end_of_Save_process:	
  4384                           
  4385                           	psect	text5
  4386  146F                     __ptext5:	
  4387 ;; *************** function _SYSTEM_Initialize *****************
  4388 ;; Defined at:
  4389 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2, status,0, pclath, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;Total ram usage:        0 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    4
  4410 ;; This function calls:
  4411 ;;		_ADC_Initialize
  4412 ;;		_EUSART_Initialize
  4413 ;;		_FVR_Initialize
  4414 ;;		_OSCILLATOR_Initialize
  4415 ;;		_PIN_MANAGER_Initialize
  4416 ;;		_SPI_Initialize
  4417 ;;		_TMR0_Initialize
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _SYSTEM_Initialize
  4425  146F                     _SYSTEM_Initialize:	
  4426                           
  4427                           ;mcc.c: 71: OSCILLATOR_Initialize();
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4431  146F  3193  23A4  3194   	fcall	_OSCILLATOR_Initialize
  4432                           
  4433                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  4434  1472  3196  26B6  3194   	fcall	_PIN_MANAGER_Initialize
  4435                           
  4436                           ;mcc.c: 73: SPI_Initialize();
  4437  1475  3193  23AF  3194   	fcall	_SPI_Initialize
  4438                           
  4439                           ;mcc.c: 74: EUSART_Initialize();
  4440  1478  3195  2521  3194   	fcall	_EUSART_Initialize
  4441                           
  4442                           ;mcc.c: 75: ADC_Initialize();
  4443  147B  3187  27F7  3194   	fcall	_ADC_Initialize
  4444                           
  4445                           ;mcc.c: 76: FVR_Initialize();
  4446  147E  3193  239B  3194   	fcall	_FVR_Initialize
  4447                           
  4448                           ;mcc.c: 77: TMR0_Initialize();
  4449  1481  3194  2401         	fcall	_TMR0_Initialize
  4450  1483  0008               	return
  4451  1484                     __end_of_SYSTEM_Initialize:	
  4452                           
  4453                           	psect	text6
  4454  1401                     __ptext6:	
  4455 ;; *************** function _TMR0_Initialize *****************
  4456 ;; Defined at:
  4457 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;Total ram usage:        1 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    3
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_SYSTEM_Initialize
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _TMR0_Initialize
  4487  1401                     _TMR0_Initialize:	
  4488                           
  4489                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4493  1401  0021               	movlb	1	; select bank1
  4494  1402  0815               	movf	21,w	;volatile
  4495  1403  39C0               	andlw	192
  4496  1404  3817               	iorlw	23
  4497  1405  0095               	movwf	21	;volatile
  4498                           
  4499                           ;tmr0.c: 73: TMR0 = 0xD9;
  4500  1406  30D9               	movlw	217
  4501  1407  0020               	movlb	0	; select bank0
  4502  1408  0095               	movwf	21	;volatile
  4503                           
  4504                           ;tmr0.c: 76: timer0ReloadVal = 217;
  4505  1409  30D9               	movlw	217
  4506  140A  00A1               	movwf	??_TMR0_Initialize
  4507  140B  0821               	movf	??_TMR0_Initialize,w
  4508  140C  0022               	movlb	2	; select bank2
  4509  140D  00EE               	movwf	_timer0ReloadVal^(0+256)	;volatile
  4510                           
  4511                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  4512  140E  110B               	bcf	11,2	;volatile
  4513                           
  4514                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  4515  140F  168B               	bsf	11,5	;volatile
  4516  1410  0008               	return
  4517  1411                     __end_of_TMR0_Initialize:	
  4518                           
  4519                           	psect	text7
  4520  13AF                     __ptext7:	
  4521 ;; *************** function _SPI_Initialize *****************
  4522 ;; Defined at:
  4523 ;;		line 64 in file "mcc_generated_files/spi.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;		None
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;		None
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      void 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4541 ;;Total ram usage:        0 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    3
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_SYSTEM_Initialize
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           
  4552                           ;psect for function _SPI_Initialize
  4553  13AF                     _SPI_Initialize:	
  4554                           
  4555                           ;spi.c: 68: SSP1STAT = 0x00;
  4556                           
  4557                           ;incstack = 0
  4558                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4559  13AF  0024               	movlb	4	; select bank4
  4560  13B0  0194               	clrf	20	;volatile
  4561                           
  4562                           ;spi.c: 71: SSP1CON1 = 0x30;
  4563  13B1  3030               	movlw	48
  4564  13B2  0095               	movwf	21	;volatile
  4565                           
  4566                           ;spi.c: 74: SSP1ADD = 0x00;
  4567  13B3  0192               	clrf	18	;volatile
  4568  13B4  0008               	return
  4569  13B5                     __end_of_SPI_Initialize:	
  4570                           
  4571                           	psect	text8
  4572  16B6                     __ptext8:	
  4573 ;; *************** function _PIN_MANAGER_Initialize *****************
  4574 ;; Defined at:
  4575 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;Total ram usage:        0 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    3
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_SYSTEM_Initialize
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           
  4604                           ;psect for function _PIN_MANAGER_Initialize
  4605  16B6                     _PIN_MANAGER_Initialize:	
  4606                           
  4607                           ;pin_manager.c: 51: LATA = 0x7B;
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4611  16B6  307B               	movlw	123
  4612  16B7  0022               	movlb	2	; select bank2
  4613  16B8  008C               	movwf	12	;volatile
  4614                           
  4615                           ;pin_manager.c: 52: TRISA = 0x80;
  4616  16B9  3080               	movlw	128
  4617  16BA  0021               	movlb	1	; select bank1
  4618  16BB  008C               	movwf	12	;volatile
  4619                           
  4620                           ;pin_manager.c: 53: ANSELA = 0x00;
  4621  16BC  0023               	movlb	3	; select bank3
  4622  16BD  018C               	clrf	12	;volatile
  4623                           
  4624                           ;pin_manager.c: 55: LATB = 0x00;
  4625  16BE  0022               	movlb	2	; select bank2
  4626  16BF  018D               	clrf	13	;volatile
  4627                           
  4628                           ;pin_manager.c: 56: TRISB = 0xFC;
  4629  16C0  30FC               	movlw	252
  4630  16C1  0021               	movlb	1	; select bank1
  4631  16C2  008D               	movwf	13	;volatile
  4632                           
  4633                           ;pin_manager.c: 57: ANSELB = 0x10;
  4634  16C3  3010               	movlw	16
  4635  16C4  0023               	movlb	3	; select bank3
  4636  16C5  008D               	movwf	13	;volatile
  4637                           
  4638                           ;pin_manager.c: 58: WPUB = 0x2C;
  4639  16C6  302C               	movlw	44
  4640  16C7  0024               	movlb	4	; select bank4
  4641  16C8  008D               	movwf	13	;volatile
  4642                           
  4643                           ;pin_manager.c: 60: LATC = 0x07;
  4644  16C9  3007               	movlw	7
  4645  16CA  0022               	movlb	2	; select bank2
  4646  16CB  008E               	movwf	14	;volatile
  4647                           
  4648                           ;pin_manager.c: 61: TRISC = 0xD0;
  4649  16CC  30D0               	movlw	208
  4650  16CD  0021               	movlb	1	; select bank1
  4651  16CE  008E               	movwf	14	;volatile
  4652                           
  4653                           ;pin_manager.c: 62: ANSELC = 0x00;
  4654  16CF  0023               	movlb	3	; select bank3
  4655  16D0  018E               	clrf	14	;volatile
  4656                           
  4657                           ;pin_manager.c: 64: WPUE = 0x00;
  4658  16D1  0024               	movlb	4	; select bank4
  4659  16D2  0190               	clrf	16	;volatile
  4660                           
  4661                           ;pin_manager.c: 66: OPTION_REGbits.nWPUEN = 0x00;
  4662  16D3  0021               	movlb	1	; select bank1
  4663  16D4  1395               	bcf	21,7	;volatile
  4664                           
  4665                           ;pin_manager.c: 68: APFCON = 0x00;
  4666  16D5  0022               	movlb	2	; select bank2
  4667  16D6  019D               	clrf	29	;volatile
  4668  16D7  0008               	return
  4669  16D8                     __end_of_PIN_MANAGER_Initialize:	
  4670                           
  4671                           	psect	text9
  4672  13A4                     __ptext9:	
  4673 ;; *************** function _OSCILLATOR_Initialize *****************
  4674 ;; Defined at:
  4675 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;		None
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      void 
  4682 ;; Registers used:
  4683 ;;		wreg, status,2
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;Total ram usage:        0 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    3
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_SYSTEM_Initialize
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           
  4704                           ;psect for function _OSCILLATOR_Initialize
  4705  13A4                     _OSCILLATOR_Initialize:	
  4706                           
  4707                           ;mcc.c: 82: OSCCON = 0x68;
  4708                           
  4709                           ;incstack = 0
  4710                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4711  13A4  3068               	movlw	104
  4712  13A5  0021               	movlb	1	; select bank1
  4713  13A6  0099               	movwf	25	;volatile
  4714                           
  4715                           ;mcc.c: 84: OSCSTAT = 0x00;
  4716  13A7  019A               	clrf	26	;volatile
  4717  13A8  0008               	return
  4718  13A9                     __end_of_OSCILLATOR_Initialize:	
  4719                           
  4720                           	psect	text10
  4721  139B                     __ptext10:	
  4722 ;; *************** function _FVR_Initialize *****************
  4723 ;; Defined at:
  4724 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;		None
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;		None
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;Total ram usage:        0 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    3
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_SYSTEM_Initialize
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           
  4753                           ;psect for function _FVR_Initialize
  4754  139B                     _FVR_Initialize:	
  4755                           
  4756                           ;fvr.c: 60: FVRCON = 0x82;
  4757                           
  4758                           ;incstack = 0
  4759                           ; Regs used in _FVR_Initialize: [wreg]
  4760  139B  3082               	movlw	130
  4761  139C  0022               	movlb	2	; select bank2
  4762  139D  0097               	movwf	23	;volatile
  4763  139E  0008               	return
  4764  139F                     __end_of_FVR_Initialize:	
  4765                           
  4766                           	psect	text11
  4767  1521                     __ptext11:	
  4768 ;; *************** function _EUSART_Initialize *****************
  4769 ;; Defined at:
  4770 ;;		line 78 in file "mcc_generated_files/eusart.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4787 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4788 ;;Total ram usage:        1 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    3
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_SYSTEM_Initialize
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function _EUSART_Initialize
  4800  1521                     _EUSART_Initialize:	
  4801                           
  4802                           ;eusart.c: 80: PIE1bits.RCIE = 0;
  4803                           
  4804                           ;incstack = 0
  4805                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4806  1521  0021               	movlb	1	; select bank1
  4807  1522  1291               	bcf	17,5	;volatile
  4808                           
  4809                           ;eusart.c: 81: PIE1bits.TXIE = 0;
  4810  1523  1211               	bcf	17,4	;volatile
  4811                           
  4812                           ;eusart.c: 86: BAUDCON = 0x48;
  4813  1524  3048               	movlw	72
  4814  1525  0023               	movlb	3	; select bank3
  4815  1526  009F               	movwf	31	;volatile
  4816                           
  4817                           ;eusart.c: 89: RCSTA = 0x90;
  4818  1527  3090               	movlw	144
  4819  1528  009D               	movwf	29	;volatile
  4820                           
  4821                           ;eusart.c: 92: TXSTA = 0x26;
  4822  1529  3026               	movlw	38
  4823  152A  009E               	movwf	30	;volatile
  4824                           
  4825                           ;eusart.c: 95: SPBRGL = 0x33;
  4826  152B  3033               	movlw	51
  4827  152C  009B               	movwf	27	;volatile
  4828                           
  4829                           ;eusart.c: 98: SPBRGH = 0x00;
  4830  152D  019C               	clrf	28	;volatile
  4831                           
  4832                           ;eusart.c: 102: eusartTxHead = 0;
  4833  152E  0022               	movlb	2	; select bank2
  4834  152F  01C0               	clrf	_eusartTxHead^(0+256)
  4835                           
  4836                           ;eusart.c: 103: eusartTxTail = 0;
  4837  1530  01C1               	clrf	_eusartTxTail^(0+256)
  4838                           
  4839                           ;eusart.c: 104: eusartTxBufferRemaining = sizeof (eusartTxBuffer);
  4840  1531  3008               	movlw	8
  4841  1532  0020               	movlb	0	; select bank0
  4842  1533  00A1               	movwf	??_EUSART_Initialize
  4843  1534  0821               	movf	??_EUSART_Initialize,w
  4844  1535  0022               	movlb	2	; select bank2
  4845  1536  00ED               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  4846                           
  4847                           ;eusart.c: 106: eusartRxHead = 0;
  4848  1537  01BE               	clrf	_eusartRxHead^(0+256)
  4849                           
  4850                           ;eusart.c: 107: eusartRxTail = 0;
  4851  1538  01BF               	clrf	_eusartRxTail^(0+256)
  4852                           
  4853                           ;eusart.c: 108: eusartRxCount = 0;
  4854  1539  01BD               	clrf	_eusartRxCount^(0+256)	;volatile
  4855                           
  4856                           ;eusart.c: 111: PIE1bits.RCIE = 1;
  4857  153A  0021               	movlb	1	; select bank1
  4858  153B  1691               	bsf	17,5	;volatile
  4859  153C  0008               	return
  4860  153D                     __end_of_EUSART_Initialize:	
  4861                           
  4862                           	psect	text12
  4863  07F7                     __ptext12:	
  4864 ;; *************** function _ADC_Initialize *****************
  4865 ;; Defined at:
  4866 ;;		line 65 in file "mcc_generated_files/adc.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, status,2
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;Total ram usage:        0 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    3
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_SYSTEM_Initialize
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _ADC_Initialize
  4896  07F7                     _ADC_Initialize:	
  4897                           
  4898                           ;adc.c: 69: ADCON0 = 0x01;
  4899                           
  4900                           ;incstack = 0
  4901                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4902  07F7  3001               	movlw	1
  4903  07F8  0021               	movlb	1	; select bank1
  4904  07F9  009D               	movwf	29	;volatile
  4905                           
  4906                           ;adc.c: 72: ADCON1 = 0xC3;
  4907  07FA  30C3               	movlw	195
  4908  07FB  009E               	movwf	30	;volatile
  4909                           
  4910                           ;adc.c: 75: ADRESL = 0x00;
  4911  07FC  019B               	clrf	27	;volatile
  4912                           
  4913                           ;adc.c: 78: ADRESH = 0x00;
  4914  07FD  019C               	clrf	28	;volatile
  4915  07FE  0008               	return
  4916  07FF                     __end_of_ADC_Initialize:	
  4917                           
  4918                           	psect	text13
  4919  06AA                     __ptext13:	
  4920 ;; *************** function _Key_Process *****************
  4921 ;; Defined at:
  4922 ;;		line 42 in file "mcc_generated_files/key.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;		None
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;  i               2   63[BANK0 ] unsigned int 
  4927 ;;  data_temp       2   60[BANK0 ] unsigned int 
  4928 ;;  gKeyValue       1   62[BANK0 ] unsigned char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  1    wreg      void 
  4931 ;; Registers used:
  4932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;Total ram usage:        6 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:   11
  4945 ;; This function calls:
  4946 ;;		_EUSART_Write
  4947 ;;		_FLASH_ReadWord
  4948 ;;		_Key_Scan
  4949 ;;		_Save_Write_time
  4950 ;;		_SendCmd_1621
  4951 ;;		_Set_finish_flag
  4952 ;;		_Set_start_flag
  4953 ;;		_Write_Flash_finish
  4954 ;;		_Write_Flash_head
  4955 ;;		_temperature_process
  4956 ;; This function is called by:
  4957 ;;		_main
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           
  4962                           ;psect for function _Key_Process
  4963  06AA                     _Key_Process:	
  4964                           
  4965                           ;key.c: 44: unsigned char gKeyValue=0;
  4966                           
  4967                           ;incstack = 0
  4968                           ; Regs used in _Key_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4969  06AA  0020               	movlb	0	; select bank0
  4970  06AB  01DE               	clrf	Key_Process@gKeyValue
  4971                           
  4972                           ;key.c: 46: unsigned int i;
  4973                           ;key.c: 47: unsigned int data_temp;
  4974                           ;key.c: 49: LongPressSec = 0;
  4975  06AC  0022               	movlb	2	; select bank2
  4976  06AD  01B9               	clrf	_LongPressSec^(0+256)
  4977                           
  4978                           ;key.c: 50: gKeyValue=Key_Scan();
  4979  06AE  3196  26D8  3186   	fcall	_Key_Scan
  4980  06B1  0020               	movlb	0	; select bank0
  4981  06B2  00DB               	movwf	??_Key_Process
  4982  06B3  085B               	movf	??_Key_Process,w
  4983  06B4  00DE               	movwf	Key_Process@gKeyValue
  4984                           
  4985                           ;key.c: 51: if(gKeyValue)
  4986  06B5  085E               	movf	Key_Process@gKeyValue,w
  4987  06B6  1903               	btfsc	3,2
  4988  06B7  0008               	return
  4989                           
  4990                           ;key.c: 52: {
  4991                           ;key.c: 53: do { LATA3 = 0; } while(0);
  4992  06B8  0022               	movlb	2	; select bank2
  4993  06B9  118C               	bcf	12,3	;volatile
  4994                           
  4995                           ;key.c: 54: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  4996  06BA  0020               	movlb	0	; select bank0
  4997  06BB  0366               	decf	_Record_flag,w
  4998  06BC  1D03               	btfss	3,2
  4999  06BD  2F48               	goto	l6420
  5000  06BE  0022               	movlb	2	; select bank2
  5001  06BF  120C               	bcf	12,4	;volatile
  5002                           
  5003                           ;key.c: 55: switch(gKeyValue)
  5004  06C0  2F48               	goto	l6420
  5005  06C1                     l982:	
  5006                           ;key.c: 58: while( !(LongPressSec > 2 || RB5 == 1) ) asm("clrwdt");
  5007                           
  5008                           ;key.c: 56: {
  5009                           ;key.c: 57: case 0x01:
  5010                           
  5011  06C1  0064               	clrwdt	;# 
  5012  06C2                     l6368:	
  5013  06C2  3003               	movlw	3
  5014  06C3  0022               	movlb	2	; select bank2
  5015  06C4  0239               	subwf	_LongPressSec^(0+256),w
  5016  06C5  1803               	skipnc
  5017  06C6  2ECA               	goto	l6372
  5018  06C7  0020               	movlb	0	; select bank0
  5019  06C8  1E8D               	btfss	13,5	;volatile
  5020  06C9  2EC1               	goto	l982
  5021  06CA                     l6372:	
  5022                           
  5023                           ;key.c: 59: if(LongPressSec > 2)
  5024  06CA  3003               	movlw	3
  5025  06CB  0022               	movlb	2	; select bank2
  5026  06CC  0239               	subwf	_LongPressSec^(0+256),w
  5027  06CD  1C03               	skipc
  5028  06CE  2ED6               	goto	l986
  5029                           
  5030                           ;key.c: 60: {
  5031                           ;key.c: 61: do { LATA2 = 0; } while(0);
  5032  06CF  110C               	bcf	12,2	;volatile
  5033                           
  5034                           ;key.c: 62: do { LATA3 = 1; } while(0);
  5035  06D0  158C               	bsf	12,3	;volatile
  5036                           
  5037                           ;key.c: 63: SendCmd_1621(0x04);
  5038  06D1  3004               	movlw	4
  5039  06D2  3194  2484  3186   	fcall	_SendCmd_1621
  5040                           
  5041                           ;key.c: 64: }
  5042  06D5  2F08               	goto	l994
  5043  06D6                     l986:	
  5044                           
  5045                           ;key.c: 66: else
  5046                           ;key.c: 67: {
  5047                           ;key.c: 68: SWDTEN = 0;
  5048  06D6  0021               	movlb	1	; select bank1
  5049  06D7  1017               	bcf	23,0	;volatile
  5050                           
  5051                           ;key.c: 69: for(i=0x2000;i<0x2000+1000;i++)
  5052  06D8  3000               	movlw	0
  5053  06D9  0020               	movlb	0	; select bank0
  5054  06DA  00DF               	movwf	Key_Process@i
  5055  06DB  3020               	movlw	32
  5056  06DC  00E0               	movwf	Key_Process@i+1
  5057  06DD  3023               	movlw	35
  5058  06DE  0260               	subwf	Key_Process@i+1,w
  5059  06DF  30E8               	movlw	232
  5060  06E0  1903               	skipnz
  5061  06E1  025F               	subwf	Key_Process@i,w
  5062  06E2  1803               	btfsc	3,0
  5063  06E3  2F05               	goto	l993
  5064  06E4                     l6380:	
  5065                           
  5066                           ;key.c: 70: {
  5067                           ;key.c: 71: data_temp = FLASH_ReadWord(i);
  5068  06E4  0860               	movf	Key_Process@i+1,w
  5069  06E5  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  5070  06E6  085F               	movf	Key_Process@i,w
  5071  06E7  00A1               	movwf	FLASH_ReadWord@flashAddr
  5072  06E8  3195  25D2  3186   	fcall	_FLASH_ReadWord
  5073  06EB  0020               	movlb	0	; select bank0
  5074  06EC  0822               	movf	?_FLASH_ReadWord+1,w
  5075  06ED  00DD               	movwf	Key_Process@data_temp+1
  5076  06EE  0821               	movf	?_FLASH_ReadWord,w
  5077  06EF  00DC               	movwf	Key_Process@data_temp
  5078                           
  5079                           ;key.c: 72: EUSART_Write(data_temp>>8);
  5080  06F0  085D               	movf	Key_Process@data_temp+1,w
  5081  06F1  3193  23E1  3186   	fcall	_EUSART_Write
  5082                           
  5083                           ;key.c: 73: EUSART_Write(data_temp&0xff);
  5084  06F4  0020               	movlb	0	; select bank0
  5085  06F5  085C               	movf	Key_Process@data_temp,w
  5086  06F6  3193  23E1  3186   	fcall	_EUSART_Write
  5087  06F9  3001               	movlw	1
  5088  06FA  0020               	movlb	0	; select bank0
  5089  06FB  07DF               	addwf	Key_Process@i,f
  5090  06FC  3000               	movlw	0
  5091  06FD  3DE0               	addwfc	Key_Process@i+1,f
  5092  06FE  3023               	movlw	35
  5093  06FF  0260               	subwf	Key_Process@i+1,w
  5094  0700  30E8               	movlw	232
  5095  0701  1903               	skipnz
  5096  0702  025F               	subwf	Key_Process@i,w
  5097  0703  1C03               	skipc
  5098  0704  2EE4               	goto	l6380
  5099  0705                     l993:	
  5100                           
  5101                           ;key.c: 75: }
  5102                           ;key.c: 77: SWDTEN = 1;
  5103  0705  0021               	movlb	1	; select bank1
  5104  0706  1417               	bsf	23,0	;volatile
  5105  0707  0064               	clrwdt	;# 
  5106  0708                     l994:	
  5107                           ;key.c: 80: }
  5108                           ;key.c: 82: while(RB5 == 0) asm("clrwdt");
  5109                           
  5110  0708  0020               	movlb	0	; select bank0
  5111  0709  1A8D               	btfsc	13,5	;volatile
  5112  070A  0008               	return
  5113  070B  0064               	clrwdt	;# 
  5114  070C  2F08               	goto	l994
  5115  070D                     l1000:	
  5116                           ;key.c: 85: while( !(LongPressSec > 2 || RA7 == 1) )asm("clrwdt");
  5117                           
  5118                           ;key.c: 84: case 0x02:
  5119                           
  5120                           ;key.c: 83: break;
  5121                           
  5122  070D  0064               	clrwdt	;# 
  5123  070E                     l6386:	
  5124  070E  3003               	movlw	3
  5125  070F  0022               	movlb	2	; select bank2
  5126  0710  0239               	subwf	_LongPressSec^(0+256),w
  5127  0711  1803               	skipnc
  5128  0712  2F16               	goto	l6390
  5129  0713  0020               	movlb	0	; select bank0
  5130  0714  1F8C               	btfss	12,7	;volatile
  5131  0715  2F0D               	goto	l1000
  5132  0716                     l6390:	
  5133                           
  5134                           ;key.c: 86: if(LongPressSec > 2)
  5135  0716  3003               	movlw	3
  5136  0717  0022               	movlb	2	; select bank2
  5137  0718  0239               	subwf	_LongPressSec^(0+256),w
  5138  0719  1C03               	skipc
  5139  071A  2F3B               	goto	l6414
  5140                           
  5141                           ;key.c: 87: {
  5142                           ;key.c: 88: if(Record_flag == 0)
  5143  071B  0020               	movlb	0	; select bank0
  5144  071C  0866               	movf	_Record_flag,w
  5145  071D  1D03               	btfss	3,2
  5146  071E  2F34               	goto	l6410
  5147                           
  5148                           ;key.c: 89: {
  5149                           ;key.c: 90: Set_start_flag();
  5150  071F  3193  23A9  3186   	fcall	_Set_start_flag
  5151                           
  5152                           ;key.c: 91: Write_Flash_head();
  5153  0722  3196  2695  3186   	fcall	_Write_Flash_head
  5154                           
  5155                           ;key.c: 92: Save_Write_time();
  5156  0725  318E  2602  3186   	fcall	_Save_Write_time
  5157                           
  5158                           ;key.c: 93: Cur_temperature_time_ch1 = 0;
  5159  0728  0022               	movlb	2	; select bank2
  5160  0729  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  5161                           
  5162                           ;key.c: 94: Cur_temperature_time_ch2 = 0;
  5163  072A  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  5164                           
  5165                           ;key.c: 95: CH1_temperature = 0;
  5166  072B  0021               	movlb	1	; select bank1
  5167  072C  01EE               	clrf	_CH1_temperature^(0+128)
  5168  072D  01EF               	clrf	(_CH1_temperature+1)^(0+128)
  5169                           
  5170                           ;key.c: 96: CH2_temperature = 0;
  5171  072E  0022               	movlb	2	; select bank2
  5172  072F  01AE               	clrf	_CH2_temperature^(0+256)
  5173  0730  01AF               	clrf	(_CH2_temperature+1)^(0+256)
  5174                           
  5175                           ;key.c: 97: time_count = 0;
  5176  0731  0020               	movlb	0	; select bank0
  5177  0732  01E9               	clrf	_time_count
  5178                           
  5179                           ;key.c: 98: }
  5180  0733  2F43               	goto	l1008
  5181  0734                     l6410:	
  5182                           
  5183                           ;key.c: 99: else
  5184                           ;key.c: 100: {
  5185                           ;key.c: 101: Set_finish_flag();
  5186  0734  3193  239F  3186   	fcall	_Set_finish_flag
  5187                           
  5188                           ;key.c: 102: Write_Flash_finish();
  5189  0737  3196  2674  3186   	fcall	_Write_Flash_finish
  5190                           
  5191                           ;key.c: 103: }
  5192                           ;key.c: 104: }
  5193  073A  2F43               	goto	l1008
  5194  073B                     l6414:	
  5195                           
  5196                           ;key.c: 105: else
  5197                           ;key.c: 106: {
  5198                           ;key.c: 107: time_count = 5;
  5199  073B  3005               	movlw	5
  5200  073C  0020               	movlb	0	; select bank0
  5201  073D  00DB               	movwf	??_Key_Process
  5202  073E  085B               	movf	??_Key_Process,w
  5203  073F  00E9               	movwf	_time_count
  5204                           
  5205                           ;key.c: 108: temperature_process();
  5206  0740  3188  20D5  3186   	fcall	_temperature_process
  5207  0743                     l1008:	
  5208                           ;key.c: 109: }
  5209                           ;key.c: 110: while(RA7 == 0)asm("clrwdt");
  5210                           
  5211  0743  0020               	movlb	0	; select bank0
  5212  0744  1B8C               	btfsc	12,7	;volatile
  5213  0745  0008               	return
  5214  0746  0064               	clrwdt	;# 
  5215  0747  2F43               	goto	l1008
  5216  0748                     l6420:	
  5217                           ;key.c: 113: }
  5218                           
  5219                           ;key.c: 112: default:break;
  5220                           
  5221                           ;key.c: 111: break;
  5222                           
  5223  0748  0020               	movlb	0	; select bank0
  5224  0749  085E               	movf	Key_Process@gKeyValue,w
  5225                           
  5226                           ; Switch size 1, requested type "space"
  5227                           ; Number of cases is 2, Range of values is 1 to 2
  5228                           ; switch strategies available:
  5229                           ; Name         Instructions Cycles
  5230                           ; simple_byte            7     4 (average)
  5231                           ; direct_byte           13     9 (fixed)
  5232                           ; jumptable            263     9 (fixed)
  5233                           ;	Chosen strategy is simple_byte
  5234  074A  3A01               	xorlw	1	; case 1
  5235  074B  1903               	skipnz
  5236  074C  2EC2               	goto	l6368
  5237  074D  3A03               	xorlw	3	; case 2
  5238  074E  1903               	skipnz
  5239  074F  2F0E               	goto	l6386
  5240  0750  2F52               	goto	l1012
  5241  0751  0008               	return
  5242  0752                     l1012:	
  5243  0752  0008               	return
  5244  0753                     __end_of_Key_Process:	
  5245                           
  5246                           	psect	text14
  5247  08D5                     __ptext14:	
  5248 ;; *************** function _temperature_process *****************
  5249 ;; Defined at:
  5250 ;;		line 381 in file "mcc_generated_files/max31856.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      void 
  5257 ;; Registers used:
  5258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;Total ram usage:        0 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:   10
  5271 ;; This function calls:
  5272 ;;		_Two_Display
  5273 ;;		_one_temperature_trans
  5274 ;;		_temperature_display
  5275 ;;		_time_Display
  5276 ;; This function is called by:
  5277 ;;		_main
  5278 ;;		_Key_Process
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _temperature_process
  5284  08D5                     _temperature_process:	
  5285                           
  5286                           ;max31856.c: 383: switch(time_count)
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in _temperature_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5290  08D5  28F9               	goto	l6210
  5291  08D6                     l6178:	
  5292                           ;max31856.c: 384: {
  5293                           ;max31856.c: 385: case 0:
  5294                           
  5295                           
  5296                           ;max31856.c: 386: Two_Display(1);
  5297  08D6  3001               	movlw	1
  5298  08D7  3188  2006  3188   	fcall	_Two_Display
  5299                           
  5300                           ;max31856.c: 387: do { LATA1 = 1; } while(0);
  5301  08DA  0022               	movlb	2	; select bank2
  5302  08DB  148C               	bsf	12,1	;volatile
  5303                           
  5304                           ;max31856.c: 388: do { LATA0 = 1; } while(0);
  5305  08DC  140C               	bsf	12,0	;volatile
  5306                           
  5307                           ;max31856.c: 389: do { LATA0 = 0; } while(0);
  5308  08DD  100C               	bcf	12,0	;volatile
  5309                           
  5310                           ;max31856.c: 390: one_temperature_trans();
  5311  08DE  318A  2207         	fcall	_one_temperature_trans
  5312                           
  5313                           ;max31856.c: 391: do { LATA0 = 1; } while(0);
  5314  08E0  0022               	movlb	2	; select bank2
  5315  08E1  140C               	bsf	12,0	;volatile
  5316                           
  5317                           ;max31856.c: 392: break;
  5318  08E2  0008               	return
  5319  08E3                     l6190:	
  5320                           ;max31856.c: 393: case 1:
  5321                           
  5322                           
  5323                           ;max31856.c: 394: temperature_display();
  5324  08E3  3189  2183         	fcall	_temperature_display
  5325                           
  5326                           ;max31856.c: 395: break;
  5327  08E5  0008               	return
  5328  08E6                     l6192:	
  5329                           ;max31856.c: 396: case 2:
  5330                           
  5331                           
  5332                           ;max31856.c: 397: Two_Display(2);
  5333  08E6  3002               	movlw	2
  5334  08E7  3188  2006  3188   	fcall	_Two_Display
  5335                           
  5336                           ;max31856.c: 398: do { LATA0 = 1; } while(0);
  5337  08EA  0022               	movlb	2	; select bank2
  5338  08EB  140C               	bsf	12,0	;volatile
  5339                           
  5340                           ;max31856.c: 399: do { LATA1 = 1; } while(0);
  5341  08EC  148C               	bsf	12,1	;volatile
  5342                           
  5343                           ;max31856.c: 400: do { LATA1 = 0; } while(0);
  5344  08ED  108C               	bcf	12,1	;volatile
  5345                           
  5346                           ;max31856.c: 401: one_temperature_trans();
  5347  08EE  318A  2207         	fcall	_one_temperature_trans
  5348                           
  5349                           ;max31856.c: 402: do { LATA1 = 1; } while(0);
  5350  08F0  0022               	movlb	2	; select bank2
  5351  08F1  148C               	bsf	12,1	;volatile
  5352                           
  5353                           ;max31856.c: 403: break;
  5354  08F2  0008               	return
  5355  08F3                     l6204:	
  5356                           ;max31856.c: 404: case 3:
  5357                           
  5358                           
  5359                           ;max31856.c: 405: temperature_display();
  5360  08F3  3189  2183         	fcall	_temperature_display
  5361                           
  5362                           ;max31856.c: 406: break;
  5363  08F5  0008               	return
  5364  08F6                     l6206:	
  5365                           ;max31856.c: 407: case 5:
  5366                           
  5367                           
  5368                           ;max31856.c: 408: time_Display();
  5369  08F6  318F  276A         	fcall	_time_Display
  5370                           
  5371                           ;max31856.c: 411: }
  5372                           
  5373                           ;max31856.c: 410: default:break;
  5374                           
  5375                           ;max31856.c: 409: break;
  5376  08F8  0008               	return
  5377  08F9                     l6210:	
  5378  08F9  0020               	movlb	0	; select bank0
  5379  08FA  0869               	movf	_time_count,w
  5380                           
  5381                           ; Switch size 1, requested type "space"
  5382                           ; Number of cases is 5, Range of values is 0 to 5
  5383                           ; switch strategies available:
  5384                           ; Name         Instructions Cycles
  5385                           ; simple_byte           16     9 (average)
  5386                           ; direct_byte           18     6 (fixed)
  5387                           ; jumptable            260     6 (fixed)
  5388                           ;	Chosen strategy is simple_byte
  5389  08FB  3A00               	xorlw	0	; case 0
  5390  08FC  1903               	skipnz
  5391  08FD  28D6               	goto	l6178
  5392  08FE  3A01               	xorlw	1	; case 1
  5393  08FF  1903               	skipnz
  5394  0900  28E3               	goto	l6190
  5395  0901  3A03               	xorlw	3	; case 2
  5396  0902  1903               	skipnz
  5397  0903  28E6               	goto	l6192
  5398  0904  3A01               	xorlw	1	; case 3
  5399  0905  1903               	skipnz
  5400  0906  28F3               	goto	l6204
  5401  0907  3A06               	xorlw	6	; case 5
  5402  0908  1903               	skipnz
  5403  0909  28F6               	goto	l6206
  5404  090A  290B               	goto	l684
  5405  090B                     l684:	
  5406  090B  0008               	return
  5407  090C                     __end_of_temperature_process:	
  5408                           
  5409                           	psect	text15
  5410  0F6A                     __ptext15:	
  5411 ;; *************** function _time_Display *****************
  5412 ;; Defined at:
  5413 ;;		line 167 in file "mcc_generated_files/ht1621.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  num             4   25[BANK0 ] unsigned char [4]
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  1    wreg      void 
  5420 ;; Registers used:
  5421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;Total ram usage:        7 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    6
  5434 ;; This function calls:
  5435 ;;		_Bq32k_Rtc_Read_Time
  5436 ;;		_WriteAll_1621
  5437 ;;		___awdiv
  5438 ;;		___awmod
  5439 ;; This function is called by:
  5440 ;;		_temperature_process
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           
  5445                           ;psect for function _time_Display
  5446  0F6A                     _time_Display:	
  5447                           
  5448                           ;ht1621.c: 169: unsigned char num[4]={0};
  5449                           
  5450                           ;incstack = 0
  5451                           ; Regs used in _time_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5452  0F6A  0023               	movlb	3	; select bank3
  5453  0F6B  0833               	movf	(time_Display@F2143+3)^(0+384),w
  5454  0F6C  0020               	movlb	0	; select bank0
  5455  0F6D  00BC               	movwf	time_Display@num+3
  5456  0F6E  0023               	movlb	3	; select bank3
  5457  0F6F  0832               	movf	(time_Display@F2143+2)^(0+384),w
  5458  0F70  0020               	movlb	0	; select bank0
  5459  0F71  00BB               	movwf	time_Display@num+2
  5460  0F72  0023               	movlb	3	; select bank3
  5461  0F73  0831               	movf	(time_Display@F2143+1)^(0+384),w
  5462  0F74  0020               	movlb	0	; select bank0
  5463  0F75  00BA               	movwf	time_Display@num+1
  5464  0F76  0023               	movlb	3	; select bank3
  5465  0F77  0830               	movf	time_Display@F2143^(0+384),w
  5466  0F78  0020               	movlb	0	; select bank0
  5467  0F79  00B9               	movwf	time_Display@num
  5468                           
  5469                           ;ht1621.c: 170: Bq32k_Rtc_Read_Time(&rtc_tm);
  5470  0F7A  3062               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  5471  0F7B  318D  2523  318F   	fcall	_Bq32k_Rtc_Read_Time
  5472                           
  5473                           ;ht1621.c: 171: num[0] = Dis_TAB[rtc_tm.hours / 10];
  5474  0F7E  300A               	movlw	10
  5475  0F7F  0020               	movlb	0	; select bank0
  5476  0F80  00A1               	movwf	___awdiv@divisor
  5477  0F81  3000               	movlw	0
  5478  0F82  00A2               	movwf	___awdiv@divisor+1
  5479  0F83  0022               	movlb	2	; select bank2
  5480  0F84  0864               	movf	(_rtc_tm^(0+256)+2),w
  5481  0F85  0020               	movlb	0	; select bank0
  5482  0F86  00B6               	movwf	??_time_Display
  5483  0F87  01B7               	clrf	??_time_Display+1
  5484  0F88  0836               	movf	??_time_Display,w
  5485  0F89  00A3               	movwf	___awdiv@dividend
  5486  0F8A  0837               	movf	??_time_Display+1,w
  5487  0F8B  00A4               	movwf	___awdiv@dividend+1
  5488  0F8C  318A  22EF  318F   	fcall	___awdiv
  5489  0F8F  0020               	movlb	0	; select bank0
  5490  0F90  0822               	movf	?___awdiv+1,w
  5491  0F91  0085               	movwf	5
  5492  0F92  0821               	movf	?___awdiv,w
  5493  0F93  0084               	movwf	4
  5494  0F94  3000               	movlw	low (_Dis_TAB| (0+32768))
  5495  0F95  0784               	addwf	4,f
  5496  0F96  3098               	movlw	high (_Dis_TAB| (0+32768))
  5497  0F97  3D85               	addwfc	5,f
  5498  0F98  0800               	movf	0,w	;code access
  5499  0F99  00B8               	movwf	??_time_Display+2
  5500  0F9A  0838               	movf	??_time_Display+2,w
  5501  0F9B  00B9               	movwf	time_Display@num
  5502                           
  5503                           ;ht1621.c: 172: num[0] |= 0x08;
  5504  0F9C  15B9               	bsf	time_Display@num,3
  5505                           
  5506                           ;ht1621.c: 173: num[1] = Dis_TAB[rtc_tm.hours % 10];
  5507  0F9D  300A               	movlw	10
  5508  0F9E  00A1               	movwf	___awmod@divisor
  5509  0F9F  3000               	movlw	0
  5510  0FA0  00A2               	movwf	___awmod@divisor+1
  5511  0FA1  0022               	movlb	2	; select bank2
  5512  0FA2  0864               	movf	(_rtc_tm^(0+256)+2),w
  5513  0FA3  0020               	movlb	0	; select bank0
  5514  0FA4  00B6               	movwf	??_time_Display
  5515  0FA5  01B7               	clrf	??_time_Display+1
  5516  0FA6  0836               	movf	??_time_Display,w
  5517  0FA7  00A3               	movwf	___awmod@dividend
  5518  0FA8  0837               	movf	??_time_Display+1,w
  5519  0FA9  00A4               	movwf	___awmod@dividend+1
  5520  0FAA  3189  21C1  318F   	fcall	___awmod
  5521  0FAD  0020               	movlb	0	; select bank0
  5522  0FAE  0822               	movf	?___awmod+1,w
  5523  0FAF  0085               	movwf	5
  5524  0FB0  0821               	movf	?___awmod,w
  5525  0FB1  0084               	movwf	4
  5526  0FB2  3000               	movlw	low (_Dis_TAB| (0+32768))
  5527  0FB3  0784               	addwf	4,f
  5528  0FB4  3098               	movlw	high (_Dis_TAB| (0+32768))
  5529  0FB5  3D85               	addwfc	5,f
  5530  0FB6  0800               	movf	0,w	;code access
  5531  0FB7  00B8               	movwf	??_time_Display+2
  5532  0FB8  0838               	movf	??_time_Display+2,w
  5533  0FB9  00BA               	movwf	time_Display@num+1
  5534                           
  5535                           ;ht1621.c: 174: num[2] = Dis_TAB[rtc_tm.minutes / 10];
  5536  0FBA  300A               	movlw	10
  5537  0FBB  00A1               	movwf	___awdiv@divisor
  5538  0FBC  3000               	movlw	0
  5539  0FBD  00A2               	movwf	___awdiv@divisor+1
  5540  0FBE  0022               	movlb	2	; select bank2
  5541  0FBF  0863               	movf	(_rtc_tm^(0+256)+1),w
  5542  0FC0  0020               	movlb	0	; select bank0
  5543  0FC1  00B6               	movwf	??_time_Display
  5544  0FC2  01B7               	clrf	??_time_Display+1
  5545  0FC3  0836               	movf	??_time_Display,w
  5546  0FC4  00A3               	movwf	___awdiv@dividend
  5547  0FC5  0837               	movf	??_time_Display+1,w
  5548  0FC6  00A4               	movwf	___awdiv@dividend+1
  5549  0FC7  318A  22EF  318F   	fcall	___awdiv
  5550  0FCA  0020               	movlb	0	; select bank0
  5551  0FCB  0822               	movf	?___awdiv+1,w
  5552  0FCC  0085               	movwf	5
  5553  0FCD  0821               	movf	?___awdiv,w
  5554  0FCE  0084               	movwf	4
  5555  0FCF  3000               	movlw	low (_Dis_TAB| (0+32768))
  5556  0FD0  0784               	addwf	4,f
  5557  0FD1  3098               	movlw	high (_Dis_TAB| (0+32768))
  5558  0FD2  3D85               	addwfc	5,f
  5559  0FD3  0800               	movf	0,w	;code access
  5560  0FD4  00B8               	movwf	??_time_Display+2
  5561  0FD5  0838               	movf	??_time_Display+2,w
  5562  0FD6  00BB               	movwf	time_Display@num+2
  5563                           
  5564                           ;ht1621.c: 175: num[3] = Dis_TAB[rtc_tm.minutes % 10];
  5565  0FD7  300A               	movlw	10
  5566  0FD8  00A1               	movwf	___awmod@divisor
  5567  0FD9  3000               	movlw	0
  5568  0FDA  00A2               	movwf	___awmod@divisor+1
  5569  0FDB  0022               	movlb	2	; select bank2
  5570  0FDC  0863               	movf	(_rtc_tm^(0+256)+1),w
  5571  0FDD  0020               	movlb	0	; select bank0
  5572  0FDE  00B6               	movwf	??_time_Display
  5573  0FDF  01B7               	clrf	??_time_Display+1
  5574  0FE0  0836               	movf	??_time_Display,w
  5575  0FE1  00A3               	movwf	___awmod@dividend
  5576  0FE2  0837               	movf	??_time_Display+1,w
  5577  0FE3  00A4               	movwf	___awmod@dividend+1
  5578  0FE4  3189  21C1  318F   	fcall	___awmod
  5579  0FE7  0020               	movlb	0	; select bank0
  5580  0FE8  0822               	movf	?___awmod+1,w
  5581  0FE9  0085               	movwf	5
  5582  0FEA  0821               	movf	?___awmod,w
  5583  0FEB  0084               	movwf	4
  5584  0FEC  3000               	movlw	low (_Dis_TAB| (0+32768))
  5585  0FED  0784               	addwf	4,f
  5586  0FEE  3098               	movlw	high (_Dis_TAB| (0+32768))
  5587  0FEF  3D85               	addwfc	5,f
  5588  0FF0  0800               	movf	0,w	;code access
  5589  0FF1  00B8               	movwf	??_time_Display+2
  5590  0FF2  0838               	movf	??_time_Display+2,w
  5591  0FF3  00BC               	movwf	time_Display@num+3
  5592                           
  5593                           ;ht1621.c: 176: WriteAll_1621(0, num, 4);
  5594  0FF4  3039               	movlw	low time_Display@num
  5595  0FF5  00A5               	movwf	WriteAll_1621@p
  5596  0FF6  3000               	movlw	high time_Display@num
  5597  0FF7  00A6               	movwf	WriteAll_1621@p+1
  5598  0FF8  3004               	movlw	4
  5599  0FF9  00B6               	movwf	??_time_Display
  5600  0FFA  0836               	movf	??_time_Display,w
  5601  0FFB  00A7               	movwf	WriteAll_1621@cnt
  5602  0FFC  3000               	movlw	0
  5603  0FFD  3188  206B         	fcall	_WriteAll_1621
  5604  0FFF  0008               	return
  5605  1000                     __end_of_time_Display:	
  5606                           
  5607                           	psect	text16
  5608  0983                     __ptext16:	
  5609 ;; *************** function _temperature_display *****************
  5610 ;; Defined at:
  5611 ;;		line 343 in file "mcc_generated_files/max31856.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      void 
  5618 ;; Registers used:
  5619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5628 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;Total ram usage:        1 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    9
  5632 ;; This function calls:
  5633 ;;		_Tc_Display
  5634 ;;		_err_Display
  5635 ;;		_maxim_31856_write_register
  5636 ;;		_maxim_clear_fault_status
  5637 ;;		_tc_temperature_trans
  5638 ;; This function is called by:
  5639 ;;		_temperature_process
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function _temperature_display
  5645  0983                     _temperature_display:	
  5646                           
  5647                           ;max31856.c: 345: if(uch_sr==(uint8_t)0x00)
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _temperature_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5651  0983  0022               	movlb	2	; select bank2
  5652  0984  084B               	movf	_uch_sr^(0+256),w
  5653  0985  1D03               	btfss	3,2
  5654  0986  299C               	goto	l6030
  5655                           
  5656                           ;max31856.c: 346: {
  5657                           ;max31856.c: 347: tc_temperature_trans();
  5658  0987  3180  205B  3189   	fcall	_tc_temperature_trans
  5659                           
  5660                           ;max31856.c: 348: Tc_Display();
  5661  098A  3185  25D9  3189   	fcall	_Tc_Display
  5662                           
  5663                           ;max31856.c: 349: if(time_count == 1)
  5664  098D  0020               	movlb	0	; select bank0
  5665  098E  0369               	decf	_time_count,w
  5666  098F  1D03               	btfss	3,2
  5667  0990  2994               	goto	l6026
  5668                           
  5669                           ;max31856.c: 350: {
  5670                           ;max31856.c: 351: CH1_state = 0;
  5671  0991  0022               	movlb	2	; select bank2
  5672  0992  01B4               	clrf	_CH1_state^(0+256)
  5673                           
  5674                           ;max31856.c: 352: }
  5675  0993  0008               	return
  5676  0994                     l6026:	
  5677                           
  5678                           ;max31856.c: 353: else if(time_count == 3)
  5679  0994  3003               	movlw	3
  5680  0995  0020               	movlb	0	; select bank0
  5681  0996  0669               	xorwf	_time_count,w
  5682  0997  1D03               	btfss	3,2
  5683  0998  0008               	return
  5684                           
  5685                           ;max31856.c: 354: {
  5686                           ;max31856.c: 355: CH2_state = 0;
  5687  0999  0022               	movlb	2	; select bank2
  5688  099A  01B5               	clrf	_CH2_state^(0+256)
  5689                           
  5690                           ;max31856.c: 356: }
  5691                           ;max31856.c: 357: }
  5692  099B  0008               	return
  5693  099C                     l6030:	
  5694                           
  5695                           ;max31856.c: 358: else
  5696                           ;max31856.c: 359: {
  5697                           ;max31856.c: 360: if(time_count == 1)
  5698  099C  0020               	movlb	0	; select bank0
  5699  099D  0369               	decf	_time_count,w
  5700  099E  1D03               	btfss	3,2
  5701  099F  29A4               	goto	l6034
  5702                           
  5703                           ;max31856.c: 361: {
  5704                           ;max31856.c: 362: CH1_state = 1;
  5705  09A0  0022               	movlb	2	; select bank2
  5706  09A1  01B4               	clrf	_CH1_state^(0+256)
  5707  09A2  0AB4               	incf	_CH1_state^(0+256),f
  5708                           
  5709                           ;max31856.c: 363: }
  5710  09A3  29AC               	goto	l6038
  5711  09A4                     l6034:	
  5712                           
  5713                           ;max31856.c: 364: else if(time_count == 3)
  5714  09A4  3003               	movlw	3
  5715  09A5  0020               	movlb	0	; select bank0
  5716  09A6  0669               	xorwf	_time_count,w
  5717  09A7  1D03               	btfss	3,2
  5718  09A8  29AC               	goto	l6038
  5719                           
  5720                           ;max31856.c: 365: {
  5721                           ;max31856.c: 366: CH2_state = 1;
  5722  09A9  0022               	movlb	2	; select bank2
  5723  09AA  01B5               	clrf	_CH2_state^(0+256)
  5724  09AB  0AB5               	incf	_CH2_state^(0+256),f
  5725  09AC                     l6038:	
  5726                           
  5727                           ;max31856.c: 367: }
  5728                           ;max31856.c: 368: err_Display();
  5729  09AC  3197  2749  3189   	fcall	_err_Display
  5730                           
  5731                           ;max31856.c: 369: maxim_31856_write_register(0x82, 0xFF);
  5732  09AF  30FF               	movlw	255
  5733  09B0  0020               	movlb	0	; select bank0
  5734  09B1  00DA               	movwf	??_temperature_display
  5735  09B2  085A               	movf	??_temperature_display,w
  5736  09B3  00A2               	movwf	maxim_31856_write_register@uch_register_value
  5737  09B4  3082               	movlw	130
  5738  09B5  3193  23F1  3189   	fcall	_maxim_31856_write_register
  5739                           
  5740                           ;max31856.c: 370: maxim_clear_fault_status();
  5741  09B8  3194  2422  3189   	fcall	_maxim_clear_fault_status
  5742                           
  5743                           ;max31856.c: 371: maxim_31856_write_register(0x82, 0x00);
  5744  09BB  0020               	movlb	0	; select bank0
  5745  09BC  01A2               	clrf	maxim_31856_write_register@uch_register_value
  5746  09BD  3082               	movlw	130
  5747  09BE  3193  23F1         	fcall	_maxim_31856_write_register
  5748  09C0  0008               	return
  5749  09C1                     __end_of_temperature_display:	
  5750                           
  5751                           	psect	text17
  5752  005B                     __ptext17:	
  5753 ;; *************** function _tc_temperature_trans *****************
  5754 ;; Defined at:
  5755 ;;		line 168 in file "mcc_generated_files/max31856.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;		None
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  temperature_    2   56[BANK0 ] unsigned int 
  5760 ;;  var_time        2   54[BANK0 ] unsigned int 
  5761 ;;  temperature_    2   52[BANK0 ] unsigned int 
  5762 ;;  temperature_    2   50[BANK0 ] unsigned int 
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1    wreg      void 
  5765 ;; Registers used:
  5766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;Total ram usage:       12 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    8
  5779 ;; This function calls:
  5780 ;;		_Calculate_Time
  5781 ;;		_Save_Write_word
  5782 ;; This function is called by:
  5783 ;;		_temperature_display
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           
  5788                           ;psect for function _tc_temperature_trans
  5789  005B                     _tc_temperature_trans:	
  5790                           
  5791                           ;max31856.c: 170: unsigned int temperature_absolute = 0;
  5792                           
  5793                           ;incstack = 0
  5794                           ; Regs used in _tc_temperature_trans: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5795  005B  0020               	movlb	0	; select bank0
  5796  005C  01D4               	clrf	tc_temperature_trans@temperature_absolute
  5797  005D  01D5               	clrf	tc_temperature_trans@temperature_absolute+1
  5798                           
  5799                           ;max31856.c: 171: unsigned int temperature_temp = 0;
  5800  005E  01D8               	clrf	tc_temperature_trans@temperature_temp
  5801  005F  01D9               	clrf	tc_temperature_trans@temperature_temp+1
  5802                           
  5803                           ;max31856.c: 172: unsigned int temperature_back = 0;
  5804  0060  01D2               	clrf	tc_temperature_trans@temperature_back
  5805  0061  01D3               	clrf	tc_temperature_trans@temperature_back+1
  5806                           
  5807                           ;max31856.c: 173: unsigned int var_time=0;
  5808  0062  01D6               	clrf	tc_temperature_trans@var_time
  5809  0063  01D7               	clrf	tc_temperature_trans@var_time+1
  5810                           
  5811                           ;max31856.c: 174: temperature_value = 0;
  5812  0064  3000               	movlw	0
  5813  0065  0022               	movlb	2	; select bank2
  5814  0066  00A7               	movwf	(_temperature_value+3)^(0+256)
  5815  0067  3000               	movlw	0
  5816  0068  00A6               	movwf	(_temperature_value+2)^(0+256)
  5817  0069  3000               	movlw	0
  5818  006A  00A5               	movwf	(_temperature_value+1)^(0+256)
  5819  006B  3000               	movlw	0
  5820  006C  00A4               	movwf	_temperature_value^(0+256)
  5821                           
  5822                           ;max31856.c: 175: temperature_value = (((uch_ltcbh&0x3f)<<8) | (uch_ltcbm) )>>1;
  5823  006D  303F               	movlw	63
  5824  006E  0547               	andwf	_uch_ltcbh^(0+256),w
  5825  006F  0020               	movlb	0	; select bank0
  5826  0070  00CE               	movwf	??_tc_temperature_trans
  5827  0071  084E               	movf	??_tc_temperature_trans,w
  5828  0072  00D0               	movwf	??_tc_temperature_trans+2
  5829  0073  0022               	movlb	2	; select bank2
  5830  0074  0849               	movf	_uch_ltcbm^(0+256),w
  5831  0075  0020               	movlb	0	; select bank0
  5832  0076  00CF               	movwf	??_tc_temperature_trans+1
  5833  0077  0D50               	rlf	??_tc_temperature_trans+2,w
  5834  0078  0CD0               	rrf	??_tc_temperature_trans+2,f
  5835  0079  0CCF               	rrf	??_tc_temperature_trans+1,f
  5836  007A  084F               	movf	??_tc_temperature_trans+1,w
  5837  007B  0022               	movlb	2	; select bank2
  5838  007C  00A4               	movwf	_temperature_value^(0+256)
  5839  007D  0020               	movlb	0	; select bank0
  5840  007E  0850               	movf	??_tc_temperature_trans+2,w
  5841  007F  0022               	movlb	2	; select bank2
  5842  0080  00A5               	movwf	(_temperature_value+1)^(0+256)
  5843  0081  0D89               	rlf	9,f
  5844  0082  3B89               	subwfb	9,f
  5845  0083  0989               	comf	9,f
  5846  0084  00A6               	movwf	(_temperature_value+2)^(0+256)
  5847  0085  00A7               	movwf	(_temperature_value+3)^(0+256)
  5848                           
  5849                           ;max31856.c: 176: if(uch_ltcbh & 0x80) temperature_value |=0x2000;
  5850  0086  1BC7               	btfsc	_uch_ltcbh^(0+256),7
  5851  0087  16A5               	bsf	(_temperature_value^(0+256)+1),5
  5852                           
  5853                           ;max31856.c: 177: temperature_temp = temperature_value;
  5854  0088  0825               	movf	(_temperature_value+1)^(0+256),w
  5855  0089  0020               	movlb	0	; select bank0
  5856  008A  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  5857  008B  0022               	movlb	2	; select bank2
  5858  008C  0824               	movf	_temperature_value^(0+256),w
  5859  008D  0020               	movlb	0	; select bank0
  5860  008E  00D8               	movwf	tc_temperature_trans@temperature_temp
  5861                           
  5862                           ;max31856.c: 180: if(time_count == 1 && Record_flag == 1)
  5863  008F  0369               	decf	_time_count,w
  5864  0090  1D03               	btfss	3,2
  5865  0091  2942               	goto	l5808
  5866  0092  0366               	decf	_Record_flag,w
  5867  0093  1D03               	btfss	3,2
  5868  0094  2942               	goto	l5808
  5869                           
  5870                           ;max31856.c: 181: {
  5871                           ;max31856.c: 182: temperature_back = CH1_temperature;
  5872  0095  0021               	movlb	1	; select bank1
  5873  0096  086F               	movf	(_CH1_temperature+1)^(0+128),w
  5874  0097  0020               	movlb	0	; select bank0
  5875  0098  00D3               	movwf	tc_temperature_trans@temperature_back+1
  5876  0099  0021               	movlb	1	; select bank1
  5877  009A  086E               	movf	_CH1_temperature^(0+128),w
  5878  009B  0020               	movlb	0	; select bank0
  5879  009C  00D2               	movwf	tc_temperature_trans@temperature_back
  5880                           
  5881                           ;max31856.c: 183: if( CH1_temperature & 0x2000 != temperature_temp & 0x2000)
  5882  009D  3020               	movlw	32
  5883  009E  0659               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5884  009F  0458               	iorwf	tc_temperature_trans@temperature_temp,w
  5885  00A0  1903               	btfsc	3,2
  5886  00A1  28A4               	goto	u5100
  5887  00A2  3001               	movlw	1
  5888  00A3  28A5               	goto	u5110
  5889  00A4                     u5100:	
  5890  00A4  3000               	movlw	0
  5891  00A5                     u5110:	
  5892  00A5  00CE               	movwf	??_tc_temperature_trans
  5893  00A6  01CF               	clrf	??_tc_temperature_trans+1
  5894  00A7  0021               	movlb	1	; select bank1
  5895  00A8  086E               	movf	_CH1_temperature^(0+128),w
  5896  00A9  0020               	movlb	0	; select bank0
  5897  00AA  054E               	andwf	??_tc_temperature_trans,w
  5898  00AB  00D0               	movwf	??_tc_temperature_trans+2
  5899  00AC  0021               	movlb	1	; select bank1
  5900  00AD  086F               	movf	(_CH1_temperature+1)^(0+128),w
  5901  00AE  0020               	movlb	0	; select bank0
  5902  00AF  054F               	andwf	??_tc_temperature_trans+1,w
  5903  00B0  00D1               	movwf	??_tc_temperature_trans+3
  5904  00B1  1AD1               	btfsc	??_tc_temperature_trans+3,5
  5905  00B2  290C               	goto	L6
  5906                           
  5907                           ;max31856.c: 196: else
  5908                           ;max31856.c: 197: {
  5909                           ;max31856.c: 198: if(CH1_temperature & 0x2000) CH1_temperature=0x3FFF-CH1_temperature + 
      +                          1 ;
  5910                           
  5911                           ;max31856.c: 195: }
  5912                           
  5913                           ;max31856.c: 194: CH1_temperature = temperature_value;
  5914                           
  5915                           ;max31856.c: 193: Cur_temperature_time_ch1 = 0;
  5916                           
  5917                           ;max31856.c: 192: Save_Write_word(temperature_value);
  5918                           
  5919                           ;max31856.c: 191: Save_Write_word(var_time);
  5920                           
  5921                           ;max31856.c: 189: var_time |= 0x2000;
  5922                           
  5923                           ;max31856.c: 187: if(CH1_state == 1) var_time |= 0x400;
  5924                           
  5925                           ;max31856.c: 186: var_time |= 0x100;
  5926                           
  5927                           ;max31856.c: 184: {
  5928                           ;max31856.c: 185: var_time = Calculate_Time();
  5929  00B3  0021               	movlb	1	; select bank1
  5930  00B4  1EEF               	btfss	(_CH1_temperature+1)^(0+128),5
  5931  00B5  28C9               	goto	l5780
  5932  00B6  096E               	comf	_CH1_temperature^(0+128),w
  5933  00B7  0020               	movlb	0	; select bank0
  5934  00B8  00CE               	movwf	??_tc_temperature_trans
  5935  00B9  0021               	movlb	1	; select bank1
  5936  00BA  096F               	comf	(_CH1_temperature+1)^(0+128),w
  5937  00BB  0020               	movlb	0	; select bank0
  5938  00BC  00CF               	movwf	??_tc_temperature_trans+1
  5939  00BD  0ACE               	incf	??_tc_temperature_trans,f
  5940  00BE  1903               	skipnz
  5941  00BF  0ACF               	incf	??_tc_temperature_trans+1,f
  5942  00C0  084E               	movf	??_tc_temperature_trans,w
  5943  00C1  3E00               	addlw	0
  5944  00C2  0021               	movlb	1	; select bank1
  5945  00C3  00EE               	movwf	_CH1_temperature^(0+128)
  5946  00C4  3040               	movlw	64
  5947  00C5  0020               	movlb	0	; select bank0
  5948  00C6  3D4F               	addwfc	??_tc_temperature_trans+1,w
  5949  00C7  0021               	movlb	1	; select bank1
  5950  00C8  00EF               	movwf	(_CH1_temperature+1)^(0+128)
  5951  00C9                     l5780:	
  5952                           
  5953                           ;max31856.c: 199: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  5954  00C9  0020               	movlb	0	; select bank0
  5955  00CA  1ED9               	btfss	tc_temperature_trans@temperature_temp+1,5
  5956  00CB  28D9               	goto	l5784
  5957  00CC  0958               	comf	tc_temperature_trans@temperature_temp,w
  5958  00CD  00CE               	movwf	??_tc_temperature_trans
  5959  00CE  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  5960  00CF  00CF               	movwf	??_tc_temperature_trans+1
  5961  00D0  0ACE               	incf	??_tc_temperature_trans,f
  5962  00D1  1903               	skipnz
  5963  00D2  0ACF               	incf	??_tc_temperature_trans+1,f
  5964  00D3  084E               	movf	??_tc_temperature_trans,w
  5965  00D4  3E00               	addlw	0
  5966  00D5  00D8               	movwf	tc_temperature_trans@temperature_temp
  5967  00D6  3040               	movlw	64
  5968  00D7  3D4F               	addwfc	??_tc_temperature_trans+1,w
  5969  00D8  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  5970  00D9                     l5784:	
  5971                           
  5972                           ;max31856.c: 200: if( temperature_temp > CH1_temperature ) temperature_absolute = temper
      +                          ature_temp - CH1_temperature;
  5973  00D9  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  5974  00DA  0021               	movlb	1	; select bank1
  5975  00DB  026F               	subwf	(_CH1_temperature+1)^(0+128),w
  5976  00DC  1D03               	skipz
  5977  00DD  28E2               	goto	u5165
  5978  00DE  0020               	movlb	0	; select bank0
  5979  00DF  0858               	movf	tc_temperature_trans@temperature_temp,w
  5980  00E0  0021               	movlb	1	; select bank1
  5981  00E1  026E               	subwf	_CH1_temperature^(0+128),w
  5982  00E2                     u5165:	
  5983  00E2  1803               	skipnc
  5984  00E3  28F3               	goto	l5788
  5985  00E4  096E               	comf	_CH1_temperature^(0+128),w
  5986  00E5  0020               	movlb	0	; select bank0
  5987  00E6  00CE               	movwf	??_tc_temperature_trans
  5988  00E7  0021               	movlb	1	; select bank1
  5989  00E8  096F               	comf	(_CH1_temperature+1)^(0+128),w
  5990  00E9  0020               	movlb	0	; select bank0
  5991  00EA  00CF               	movwf	??_tc_temperature_trans+1
  5992  00EB  0ACE               	incf	??_tc_temperature_trans,f
  5993  00EC  1903               	skipnz
  5994  00ED  0ACF               	incf	??_tc_temperature_trans+1,f
  5995  00EE  0858               	movf	tc_temperature_trans@temperature_temp,w
  5996  00EF  074E               	addwf	??_tc_temperature_trans,w
  5997  00F0  00D4               	movwf	tc_temperature_trans@temperature_absolute
  5998  00F1  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  5999  00F2  2903               	goto	L2
  6000  00F3                     l5788:	
  6001                           
  6002                           ;max31856.c: 201: else temperature_absolute = CH1_temperature - temperature_temp;
  6003  00F3  0020               	movlb	0	; select bank0
  6004  00F4  0958               	comf	tc_temperature_trans@temperature_temp,w
  6005  00F5  00CE               	movwf	??_tc_temperature_trans
  6006  00F6  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6007  00F7  00CF               	movwf	??_tc_temperature_trans+1
  6008  00F8  0ACE               	incf	??_tc_temperature_trans,f
  6009  00F9  1903               	skipnz
  6010  00FA  0ACF               	incf	??_tc_temperature_trans+1,f
  6011  00FB  0021               	movlb	1	; select bank1
  6012  00FC  086E               	movf	_CH1_temperature^(0+128),w
  6013  00FD  0020               	movlb	0	; select bank0
  6014  00FE  074E               	addwf	??_tc_temperature_trans,w
  6015  00FF  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6016  0100  0021               	movlb	1	; select bank1
  6017  0101  086F               	movf	(_CH1_temperature+1)^(0+128),w
  6018  0102  0020               	movlb	0	; select bank0
  6019  0103                     L2:	
  6020  0103  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6021  0104  00D5               	movwf	tc_temperature_trans@temperature_absolute+1
  6022                           
  6023                           ;max31856.c: 202: if( temperature_absolute > 4)
  6024  0105  3000               	movlw	0
  6025  0106  0255               	subwf	tc_temperature_trans@temperature_absolute+1,w
  6026  0107  3005               	movlw	5
  6027  0108  1903               	skipnz
  6028  0109  0254               	subwf	tc_temperature_trans@temperature_absolute,w
  6029  010A  1C03               	skipc
  6030  010B  2939               	goto	l5806
  6031  010C                     L6:	
  6032                           
  6033                           ;max31856.c: 203: {
  6034                           ;max31856.c: 204: var_time = Calculate_Time();
  6035  010C  3182  2272  3180   	fcall	_Calculate_Time
  6036  010F  0020               	movlb	0	; select bank0
  6037  0110  00CE               	movwf	??_tc_temperature_trans
  6038  0111  01CF               	clrf	??_tc_temperature_trans+1
  6039  0112  084E               	movf	??_tc_temperature_trans,w
  6040  0113  00D6               	movwf	tc_temperature_trans@var_time
  6041  0114  084F               	movf	??_tc_temperature_trans+1,w
  6042  0115  00D7               	movwf	tc_temperature_trans@var_time+1
  6043                           
  6044                           ;max31856.c: 205: var_time |= 0x100;
  6045  0116  1457               	bsf	tc_temperature_trans@var_time+1,0
  6046                           
  6047                           ;max31856.c: 206: if(CH1_state == 1) var_time |= 0x400;
  6048  0117  0022               	movlb	2	; select bank2
  6049  0118  0334               	decf	_CH1_state^(0+256),w
  6050  0119  1D03               	btfss	3,2
  6051  011A  291D               	goto	l612
  6052  011B  0020               	movlb	0	; select bank0
  6053  011C  1557               	bsf	tc_temperature_trans@var_time+1,2
  6054  011D                     l612:	
  6055                           
  6056                           ;max31856.c: 208: var_time |= 0x2000;
  6057  011D  0020               	movlb	0	; select bank0
  6058  011E  16D7               	bsf	tc_temperature_trans@var_time+1,5
  6059                           
  6060                           ;max31856.c: 210: Save_Write_word(var_time);
  6061  011F  0857               	movf	tc_temperature_trans@var_time+1,w
  6062  0120  00A7               	movwf	Save_Write_word@data+1
  6063  0121  0856               	movf	tc_temperature_trans@var_time,w
  6064  0122  00A6               	movwf	Save_Write_word@data
  6065  0123  318A  229E  3180   	fcall	_Save_Write_word
  6066                           
  6067                           ;max31856.c: 211: Save_Write_word(temperature_value);
  6068  0126  0022               	movlb	2	; select bank2
  6069  0127  0825               	movf	(_temperature_value+1)^(0+256),w
  6070  0128  0020               	movlb	0	; select bank0
  6071  0129  00A7               	movwf	Save_Write_word@data+1
  6072  012A  0022               	movlb	2	; select bank2
  6073  012B  0824               	movf	_temperature_value^(0+256),w
  6074  012C  0020               	movlb	0	; select bank0
  6075  012D  00A6               	movwf	Save_Write_word@data
  6076  012E  318A  229E  3180   	fcall	_Save_Write_word
  6077                           
  6078                           ;max31856.c: 212: Cur_temperature_time_ch1 = 0;
  6079  0131  0022               	movlb	2	; select bank2
  6080  0132  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  6081                           
  6082                           ;max31856.c: 213: CH1_temperature = temperature_value;
  6083  0133  0825               	movf	(_temperature_value+1)^(0+256),w
  6084  0134  0021               	movlb	1	; select bank1
  6085  0135  00EF               	movwf	(_CH1_temperature+1)^(0+128)
  6086  0136  0022               	movlb	2	; select bank2
  6087  0137  0824               	movf	_temperature_value^(0+256),w
  6088  0138  293F               	goto	L3
  6089  0139                     l5806:	
  6090                           ;max31856.c: 214: }
  6091                           
  6092                           
  6093                           ;max31856.c: 215: else
  6094                           ;max31856.c: 216: {
  6095                           ;max31856.c: 217: CH1_temperature = temperature_back;
  6096  0139  0020               	movlb	0	; select bank0
  6097  013A  0853               	movf	tc_temperature_trans@temperature_back+1,w
  6098  013B  0021               	movlb	1	; select bank1
  6099  013C  00EF               	movwf	(_CH1_temperature+1)^(0+128)
  6100  013D  0020               	movlb	0	; select bank0
  6101  013E  0852               	movf	tc_temperature_trans@temperature_back,w
  6102  013F                     L3:	
  6103  013F  0021               	movlb	1	; select bank1
  6104  0140  00EE               	movwf	_CH1_temperature^(0+128)
  6105                           
  6106                           ;max31856.c: 218: }
  6107                           ;max31856.c: 219: }
  6108                           ;max31856.c: 221: }
  6109  0141  29F4               	goto	l614
  6110  0142                     l5808:	
  6111                           
  6112                           ;max31856.c: 222: else if( time_count == 3 && Record_flag == 1)
  6113  0142  3003               	movlw	3
  6114  0143  0020               	movlb	0	; select bank0
  6115  0144  0669               	xorwf	_time_count,w
  6116  0145  1D03               	btfss	3,2
  6117  0146  29F4               	goto	l614
  6118  0147  0366               	decf	_Record_flag,w
  6119  0148  1D03               	btfss	3,2
  6120  0149  29F4               	goto	l614
  6121                           
  6122                           ;max31856.c: 223: {
  6123                           ;max31856.c: 224: temperature_back = CH2_temperature;
  6124  014A  0022               	movlb	2	; select bank2
  6125  014B  082F               	movf	(_CH2_temperature+1)^(0+256),w
  6126  014C  0020               	movlb	0	; select bank0
  6127  014D  00D3               	movwf	tc_temperature_trans@temperature_back+1
  6128  014E  0022               	movlb	2	; select bank2
  6129  014F  082E               	movf	_CH2_temperature^(0+256),w
  6130  0150  0020               	movlb	0	; select bank0
  6131  0151  00D2               	movwf	tc_temperature_trans@temperature_back
  6132                           
  6133                           ;max31856.c: 225: if( CH2_temperature & 0x2000 != temperature_temp & 0x2000)
  6134  0152  3020               	movlw	32
  6135  0153  0659               	xorwf	tc_temperature_trans@temperature_temp+1,w
  6136  0154  0458               	iorwf	tc_temperature_trans@temperature_temp,w
  6137  0155  1903               	btfsc	3,2
  6138  0156  2959               	goto	u5210
  6139  0157  3001               	movlw	1
  6140  0158  295A               	goto	u5220
  6141  0159                     u5210:	
  6142  0159  3000               	movlw	0
  6143  015A                     u5220:	
  6144  015A  00CE               	movwf	??_tc_temperature_trans
  6145  015B  01CF               	clrf	??_tc_temperature_trans+1
  6146  015C  0022               	movlb	2	; select bank2
  6147  015D  082E               	movf	_CH2_temperature^(0+256),w
  6148  015E  0020               	movlb	0	; select bank0
  6149  015F  054E               	andwf	??_tc_temperature_trans,w
  6150  0160  00D0               	movwf	??_tc_temperature_trans+2
  6151  0161  0022               	movlb	2	; select bank2
  6152  0162  082F               	movf	(_CH2_temperature+1)^(0+256),w
  6153  0163  0020               	movlb	0	; select bank0
  6154  0164  054F               	andwf	??_tc_temperature_trans+1,w
  6155  0165  00D1               	movwf	??_tc_temperature_trans+3
  6156  0166  1AD1               	btfsc	??_tc_temperature_trans+3,5
  6157  0167  29C1               	goto	L7
  6158                           
  6159                           ;max31856.c: 238: else
  6160                           ;max31856.c: 239: {
  6161                           ;max31856.c: 240: if(CH2_temperature & 0x2000) CH2_temperature=0x3FFF-CH2_temperature + 
      +                          1 ;
  6162                           
  6163                           ;max31856.c: 237: }
  6164                           
  6165                           ;max31856.c: 236: CH2_temperature = temperature_value;
  6166                           
  6167                           ;max31856.c: 235: Cur_temperature_time_ch2 = 0;
  6168                           
  6169                           ;max31856.c: 234: Save_Write_word(temperature_value);
  6170                           
  6171                           ;max31856.c: 233: Save_Write_word(var_time);
  6172                           
  6173                           ;max31856.c: 231: var_time |= 0x2000;
  6174                           
  6175                           ;max31856.c: 229: if(CH2_state == 1) var_time |= 0x800;
  6176                           
  6177                           ;max31856.c: 228: var_time |= 0x200;
  6178                           
  6179                           ;max31856.c: 226: {
  6180                           ;max31856.c: 227: var_time = Calculate_Time();
  6181  0168  0022               	movlb	2	; select bank2
  6182  0169  1EAF               	btfss	(_CH2_temperature+1)^(0+256),5
  6183  016A  297E               	goto	l5832
  6184  016B  092E               	comf	_CH2_temperature^(0+256),w
  6185  016C  0020               	movlb	0	; select bank0
  6186  016D  00CE               	movwf	??_tc_temperature_trans
  6187  016E  0022               	movlb	2	; select bank2
  6188  016F  092F               	comf	(_CH2_temperature+1)^(0+256),w
  6189  0170  0020               	movlb	0	; select bank0
  6190  0171  00CF               	movwf	??_tc_temperature_trans+1
  6191  0172  0ACE               	incf	??_tc_temperature_trans,f
  6192  0173  1903               	skipnz
  6193  0174  0ACF               	incf	??_tc_temperature_trans+1,f
  6194  0175  084E               	movf	??_tc_temperature_trans,w
  6195  0176  3E00               	addlw	0
  6196  0177  0022               	movlb	2	; select bank2
  6197  0178  00AE               	movwf	_CH2_temperature^(0+256)
  6198  0179  3040               	movlw	64
  6199  017A  0020               	movlb	0	; select bank0
  6200  017B  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6201  017C  0022               	movlb	2	; select bank2
  6202  017D  00AF               	movwf	(_CH2_temperature+1)^(0+256)
  6203  017E                     l5832:	
  6204                           
  6205                           ;max31856.c: 241: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  6206  017E  0020               	movlb	0	; select bank0
  6207  017F  1ED9               	btfss	tc_temperature_trans@temperature_temp+1,5
  6208  0180  298E               	goto	l5836
  6209  0181  0958               	comf	tc_temperature_trans@temperature_temp,w
  6210  0182  00CE               	movwf	??_tc_temperature_trans
  6211  0183  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6212  0184  00CF               	movwf	??_tc_temperature_trans+1
  6213  0185  0ACE               	incf	??_tc_temperature_trans,f
  6214  0186  1903               	skipnz
  6215  0187  0ACF               	incf	??_tc_temperature_trans+1,f
  6216  0188  084E               	movf	??_tc_temperature_trans,w
  6217  0189  3E00               	addlw	0
  6218  018A  00D8               	movwf	tc_temperature_trans@temperature_temp
  6219  018B  3040               	movlw	64
  6220  018C  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6221  018D  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6222  018E                     l5836:	
  6223                           
  6224                           ;max31856.c: 242: if( temperature_temp > CH2_temperature ) temperature_absolute = temper
      +                          ature_temp - CH2_temperature;
  6225  018E  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6226  018F  0022               	movlb	2	; select bank2
  6227  0190  022F               	subwf	(_CH2_temperature+1)^(0+256),w
  6228  0191  1D03               	skipz
  6229  0192  2997               	goto	u5275
  6230  0193  0020               	movlb	0	; select bank0
  6231  0194  0858               	movf	tc_temperature_trans@temperature_temp,w
  6232  0195  0022               	movlb	2	; select bank2
  6233  0196  022E               	subwf	_CH2_temperature^(0+256),w
  6234  0197                     u5275:	
  6235  0197  1803               	skipnc
  6236  0198  29A8               	goto	l5840
  6237  0199  092E               	comf	_CH2_temperature^(0+256),w
  6238  019A  0020               	movlb	0	; select bank0
  6239  019B  00CE               	movwf	??_tc_temperature_trans
  6240  019C  0022               	movlb	2	; select bank2
  6241  019D  092F               	comf	(_CH2_temperature+1)^(0+256),w
  6242  019E  0020               	movlb	0	; select bank0
  6243  019F  00CF               	movwf	??_tc_temperature_trans+1
  6244  01A0  0ACE               	incf	??_tc_temperature_trans,f
  6245  01A1  1903               	skipnz
  6246  01A2  0ACF               	incf	??_tc_temperature_trans+1,f
  6247  01A3  0858               	movf	tc_temperature_trans@temperature_temp,w
  6248  01A4  074E               	addwf	??_tc_temperature_trans,w
  6249  01A5  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6250  01A6  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6251  01A7  29B8               	goto	L4
  6252  01A8                     l5840:	
  6253                           
  6254                           ;max31856.c: 243: else temperature_absolute = CH2_temperature - temperature_temp;
  6255  01A8  0020               	movlb	0	; select bank0
  6256  01A9  0958               	comf	tc_temperature_trans@temperature_temp,w
  6257  01AA  00CE               	movwf	??_tc_temperature_trans
  6258  01AB  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6259  01AC  00CF               	movwf	??_tc_temperature_trans+1
  6260  01AD  0ACE               	incf	??_tc_temperature_trans,f
  6261  01AE  1903               	skipnz
  6262  01AF  0ACF               	incf	??_tc_temperature_trans+1,f
  6263  01B0  0022               	movlb	2	; select bank2
  6264  01B1  082E               	movf	_CH2_temperature^(0+256),w
  6265  01B2  0020               	movlb	0	; select bank0
  6266  01B3  074E               	addwf	??_tc_temperature_trans,w
  6267  01B4  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6268  01B5  0022               	movlb	2	; select bank2
  6269  01B6  082F               	movf	(_CH2_temperature+1)^(0+256),w
  6270  01B7  0020               	movlb	0	; select bank0
  6271  01B8                     L4:	
  6272  01B8  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6273  01B9  00D5               	movwf	tc_temperature_trans@temperature_absolute+1
  6274                           
  6275                           ;max31856.c: 244: if( temperature_absolute > 4)
  6276  01BA  3000               	movlw	0
  6277  01BB  0255               	subwf	tc_temperature_trans@temperature_absolute+1,w
  6278  01BC  3005               	movlw	5
  6279  01BD  1903               	skipnz
  6280  01BE  0254               	subwf	tc_temperature_trans@temperature_absolute,w
  6281  01BF  1C03               	skipc
  6282  01C0  29EC               	goto	l5858
  6283  01C1                     L7:	
  6284                           
  6285                           ;max31856.c: 245: {
  6286                           ;max31856.c: 246: var_time = Calculate_Time();
  6287  01C1  3182  2272  3180   	fcall	_Calculate_Time
  6288  01C4  0020               	movlb	0	; select bank0
  6289  01C5  00CE               	movwf	??_tc_temperature_trans
  6290  01C6  01CF               	clrf	??_tc_temperature_trans+1
  6291  01C7  084E               	movf	??_tc_temperature_trans,w
  6292  01C8  00D6               	movwf	tc_temperature_trans@var_time
  6293  01C9  084F               	movf	??_tc_temperature_trans+1,w
  6294  01CA  00D7               	movwf	tc_temperature_trans@var_time+1
  6295                           
  6296                           ;max31856.c: 247: var_time |= 0x200;
  6297  01CB  14D7               	bsf	tc_temperature_trans@var_time+1,1
  6298                           
  6299                           ;max31856.c: 248: if(CH2_state == 1) var_time |= 0x800;
  6300  01CC  0022               	movlb	2	; select bank2
  6301  01CD  0335               	decf	_CH2_state^(0+256),w
  6302  01CE  1D03               	btfss	3,2
  6303  01CF  29D2               	goto	l624
  6304  01D0  0020               	movlb	0	; select bank0
  6305  01D1  15D7               	bsf	tc_temperature_trans@var_time+1,3
  6306  01D2                     l624:	
  6307                           
  6308                           ;max31856.c: 250: var_time |= 0x2000;
  6309  01D2  0020               	movlb	0	; select bank0
  6310  01D3  16D7               	bsf	tc_temperature_trans@var_time+1,5
  6311                           
  6312                           ;max31856.c: 252: Save_Write_word(var_time);
  6313  01D4  0857               	movf	tc_temperature_trans@var_time+1,w
  6314  01D5  00A7               	movwf	Save_Write_word@data+1
  6315  01D6  0856               	movf	tc_temperature_trans@var_time,w
  6316  01D7  00A6               	movwf	Save_Write_word@data
  6317  01D8  318A  229E  3180   	fcall	_Save_Write_word
  6318                           
  6319                           ;max31856.c: 253: Save_Write_word(temperature_value);
  6320  01DB  0022               	movlb	2	; select bank2
  6321  01DC  0825               	movf	(_temperature_value+1)^(0+256),w
  6322  01DD  0020               	movlb	0	; select bank0
  6323  01DE  00A7               	movwf	Save_Write_word@data+1
  6324  01DF  0022               	movlb	2	; select bank2
  6325  01E0  0824               	movf	_temperature_value^(0+256),w
  6326  01E1  0020               	movlb	0	; select bank0
  6327  01E2  00A6               	movwf	Save_Write_word@data
  6328  01E3  318A  229E  3180   	fcall	_Save_Write_word
  6329                           
  6330                           ;max31856.c: 254: Cur_temperature_time_ch2 = 0;
  6331  01E6  0022               	movlb	2	; select bank2
  6332  01E7  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  6333                           
  6334                           ;max31856.c: 255: CH2_temperature = temperature_value;
  6335  01E8  0825               	movf	(_temperature_value+1)^(0+256),w
  6336  01E9  00AF               	movwf	(_CH2_temperature+1)^(0+256)
  6337  01EA  0824               	movf	_temperature_value^(0+256),w
  6338  01EB  29F3               	goto	L5
  6339  01EC                     l5858:	
  6340                           ;max31856.c: 256: }
  6341                           
  6342                           
  6343                           ;max31856.c: 257: else
  6344                           ;max31856.c: 258: {
  6345                           ;max31856.c: 259: CH2_temperature = temperature_back;
  6346  01EC  0020               	movlb	0	; select bank0
  6347  01ED  0853               	movf	tc_temperature_trans@temperature_back+1,w
  6348  01EE  0022               	movlb	2	; select bank2
  6349  01EF  00AF               	movwf	(_CH2_temperature+1)^(0+256)
  6350  01F0  0020               	movlb	0	; select bank0
  6351  01F1  0852               	movf	tc_temperature_trans@temperature_back,w
  6352  01F2  0022               	movlb	2	; select bank2
  6353  01F3                     L5:	
  6354  01F3  00AE               	movwf	_CH2_temperature^(0+256)
  6355  01F4                     l614:	
  6356                           
  6357                           ;max31856.c: 260: }
  6358                           ;max31856.c: 261: }
  6359                           ;max31856.c: 263: }
  6360                           ;max31856.c: 265: temperature_temp = temperature_value;
  6361  01F4  0022               	movlb	2	; select bank2
  6362  01F5  0825               	movf	(_temperature_value+1)^(0+256),w
  6363  01F6  0020               	movlb	0	; select bank0
  6364  01F7  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6365  01F8  0022               	movlb	2	; select bank2
  6366  01F9  0824               	movf	_temperature_value^(0+256),w
  6367  01FA  0020               	movlb	0	; select bank0
  6368  01FB  00D8               	movwf	tc_temperature_trans@temperature_temp
  6369                           
  6370                           ;max31856.c: 266: if((uch_ltcbh&0x80)==0x80)
  6371  01FC  0022               	movlb	2	; select bank2
  6372  01FD  1FC7               	btfss	_uch_ltcbh^(0+256),7
  6373  01FE  2A3F               	goto	l5876
  6374                           
  6375                           ;max31856.c: 267: {
  6376                           ;max31856.c: 268: temperature_sign = 1;
  6377  01FF  01C2               	clrf	_temperature_sign^(0+256)
  6378  0200  0AC2               	incf	_temperature_sign^(0+256),f
  6379                           
  6380                           ;max31856.c: 269: temperature_temp=0x3FFF-temperature_temp + 1 ;
  6381  0201  0020               	movlb	0	; select bank0
  6382  0202  0958               	comf	tc_temperature_trans@temperature_temp,w
  6383  0203  00CE               	movwf	??_tc_temperature_trans
  6384  0204  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6385  0205  00CF               	movwf	??_tc_temperature_trans+1
  6386  0206  0ACE               	incf	??_tc_temperature_trans,f
  6387  0207  1903               	skipnz
  6388  0208  0ACF               	incf	??_tc_temperature_trans+1,f
  6389  0209  084E               	movf	??_tc_temperature_trans,w
  6390  020A  3E00               	addlw	0
  6391  020B  00D8               	movwf	tc_temperature_trans@temperature_temp
  6392  020C  3040               	movlw	64
  6393  020D  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6394  020E  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6395                           
  6396                           ;max31856.c: 271: temperature_int = temperature_temp>>3;
  6397  020F  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6398  0210  00CF               	movwf	??_tc_temperature_trans+1
  6399  0211  0858               	movf	tc_temperature_trans@temperature_temp,w
  6400  0212  00CE               	movwf	??_tc_temperature_trans
  6401  0213  36CF               	lsrf	??_tc_temperature_trans+1,f
  6402  0214  0CCE               	rrf	??_tc_temperature_trans,f
  6403  0215  36CF               	lsrf	??_tc_temperature_trans+1,f
  6404  0216  0CCE               	rrf	??_tc_temperature_trans,f
  6405  0217  36CF               	lsrf	??_tc_temperature_trans+1,f
  6406  0218  0CCE               	rrf	??_tc_temperature_trans,f
  6407  0219  084E               	movf	??_tc_temperature_trans,w
  6408  021A  0022               	movlb	2	; select bank2
  6409  021B  00B2               	movwf	_temperature_int^(0+256)
  6410  021C  0020               	movlb	0	; select bank0
  6411  021D  084F               	movf	??_tc_temperature_trans+1,w
  6412  021E  0022               	movlb	2	; select bank2
  6413  021F  00B3               	movwf	(_temperature_int+1)^(0+256)
  6414                           
  6415                           ;max31856.c: 272: temperature_decimal = temperature_temp & 0x07;
  6416  0220  0020               	movlb	0	; select bank0
  6417  0221  0858               	movf	tc_temperature_trans@temperature_temp,w
  6418  0222  3907               	andlw	7
  6419  0223  00CE               	movwf	??_tc_temperature_trans
  6420  0224  084E               	movf	??_tc_temperature_trans,w
  6421  0225  00E8               	movwf	_temperature_decimal
  6422                           
  6423                           ;max31856.c: 273: if(temperature_decimal > 3) temperature_decimal++;
  6424  0226  3004               	movlw	4
  6425  0227  0268               	subwf	_temperature_decimal,w
  6426  0228  1C03               	skipc
  6427  0229  2A2E               	goto	l627
  6428  022A  3001               	movlw	1
  6429  022B  00CE               	movwf	??_tc_temperature_trans
  6430  022C  084E               	movf	??_tc_temperature_trans,w
  6431  022D  07E8               	addwf	_temperature_decimal,f
  6432  022E                     l627:	
  6433                           
  6434                           ;max31856.c: 274: if(( temperature_decimal == 3 || temperature_decimal == 8 ) && (temper
      +                          ature_int & 0x01)) temperature_decimal++;
  6435  022E  3003               	movlw	3
  6436  022F  0668               	xorwf	_temperature_decimal,w
  6437  0230  1903               	btfsc	3,2
  6438  0231  2A36               	goto	l630
  6439  0232  3008               	movlw	8
  6440  0233  0668               	xorwf	_temperature_decimal,w
  6441  0234  1D03               	btfss	3,2
  6442  0235  0008               	return
  6443  0236                     l630:	
  6444  0236  0022               	movlb	2	; select bank2
  6445  0237  1C32               	btfss	_temperature_int^(0+256),0
  6446  0238  0008               	return
  6447  0239  3001               	movlw	1
  6448  023A  0020               	movlb	0	; select bank0
  6449  023B  00CE               	movwf	??_tc_temperature_trans
  6450  023C  084E               	movf	??_tc_temperature_trans,w
  6451  023D  07E8               	addwf	_temperature_decimal,f
  6452                           
  6453                           ;max31856.c: 275: }
  6454  023E  0008               	return
  6455  023F                     l5876:	
  6456                           
  6457                           ;max31856.c: 276: else
  6458                           ;max31856.c: 277: {
  6459                           ;max31856.c: 278: temperature_sign = 0;
  6460  023F  0022               	movlb	2	; select bank2
  6461  0240  01C2               	clrf	_temperature_sign^(0+256)
  6462                           
  6463                           ;max31856.c: 279: temperature_int = temperature_temp>>3;
  6464  0241  0020               	movlb	0	; select bank0
  6465  0242  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6466  0243  00CF               	movwf	??_tc_temperature_trans+1
  6467  0244  0858               	movf	tc_temperature_trans@temperature_temp,w
  6468  0245  00CE               	movwf	??_tc_temperature_trans
  6469  0246  36CF               	lsrf	??_tc_temperature_trans+1,f
  6470  0247  0CCE               	rrf	??_tc_temperature_trans,f
  6471  0248  36CF               	lsrf	??_tc_temperature_trans+1,f
  6472  0249  0CCE               	rrf	??_tc_temperature_trans,f
  6473  024A  36CF               	lsrf	??_tc_temperature_trans+1,f
  6474  024B  0CCE               	rrf	??_tc_temperature_trans,f
  6475  024C  084E               	movf	??_tc_temperature_trans,w
  6476  024D  0022               	movlb	2	; select bank2
  6477  024E  00B2               	movwf	_temperature_int^(0+256)
  6478  024F  0020               	movlb	0	; select bank0
  6479  0250  084F               	movf	??_tc_temperature_trans+1,w
  6480  0251  0022               	movlb	2	; select bank2
  6481  0252  00B3               	movwf	(_temperature_int+1)^(0+256)
  6482                           
  6483                           ;max31856.c: 280: temperature_decimal = temperature_temp & 0x07;
  6484  0253  0020               	movlb	0	; select bank0
  6485  0254  0858               	movf	tc_temperature_trans@temperature_temp,w
  6486  0255  3907               	andlw	7
  6487  0256  00CE               	movwf	??_tc_temperature_trans
  6488  0257  084E               	movf	??_tc_temperature_trans,w
  6489  0258  00E8               	movwf	_temperature_decimal
  6490                           
  6491                           ;max31856.c: 281: if(temperature_decimal > 3) temperature_decimal++;
  6492  0259  3004               	movlw	4
  6493  025A  0268               	subwf	_temperature_decimal,w
  6494  025B  1C03               	skipc
  6495  025C  2A61               	goto	l632
  6496  025D  3001               	movlw	1
  6497  025E  00CE               	movwf	??_tc_temperature_trans
  6498  025F  084E               	movf	??_tc_temperature_trans,w
  6499  0260  07E8               	addwf	_temperature_decimal,f
  6500  0261                     l632:	
  6501                           
  6502                           ;max31856.c: 282: if((temperature_decimal == 4 || temperature_decimal == 8) && (temperat
      +                          ure_int & 0x01)) temperature_decimal++;
  6503  0261  3004               	movlw	4
  6504  0262  0668               	xorwf	_temperature_decimal,w
  6505  0263  1903               	btfsc	3,2
  6506  0264  2A69               	goto	l635
  6507  0265  3008               	movlw	8
  6508  0266  0668               	xorwf	_temperature_decimal,w
  6509  0267  1D03               	btfss	3,2
  6510  0268  0008               	return
  6511  0269                     l635:	
  6512  0269  0022               	movlb	2	; select bank2
  6513  026A  1C32               	btfss	_temperature_int^(0+256),0
  6514  026B  0008               	return
  6515  026C  3001               	movlw	1
  6516  026D  0020               	movlb	0	; select bank0
  6517  026E  00CE               	movwf	??_tc_temperature_trans
  6518  026F  084E               	movf	??_tc_temperature_trans,w
  6519  0270  07E8               	addwf	_temperature_decimal,f
  6520  0271  0008               	return
  6521  0272                     __end_of_tc_temperature_trans:	
  6522                           
  6523                           	psect	text18
  6524  0272                     __ptext18:	
  6525 ;; *************** function _Calculate_Time *****************
  6526 ;; Defined at:
  6527 ;;		line 163 in file "mcc_generated_files/save.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;		None
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  temp2           4   42[BANK0 ] unsigned long 
  6532 ;;  temp1           4   38[BANK0 ] unsigned long 
  6533 ;;  temp            4   34[BANK0 ] unsigned long 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  1    wreg      unsigned char 
  6536 ;; Registers used:
  6537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6544 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;Total ram usage:       22 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    7
  6550 ;; This function calls:
  6551 ;;		_Bq32k_Rtc_Read_Time
  6552 ;;		_Save_Write_time
  6553 ;;		_Write_Flash_finish
  6554 ;;		_Write_Flash_head
  6555 ;;		___wmul
  6556 ;; This function is called by:
  6557 ;;		_tc_temperature_trans
  6558 ;;		_Save_process
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function _Calculate_Time
  6564  0272                     _Calculate_Time:	
  6565                           
  6566                           ;save.c: 165: unsigned long temp = 0 ;
  6567                           
  6568                           ;incstack = 0
  6569                           ; Regs used in _Calculate_Time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6570  0272  3000               	movlw	0
  6571  0273  0020               	movlb	0	; select bank0
  6572  0274  00C5               	movwf	Calculate_Time@temp+3
  6573  0275  3000               	movlw	0
  6574  0276  00C4               	movwf	Calculate_Time@temp+2
  6575  0277  3000               	movlw	0
  6576  0278  00C3               	movwf	Calculate_Time@temp+1
  6577  0279  3000               	movlw	0
  6578  027A  00C2               	movwf	Calculate_Time@temp
  6579                           
  6580                           ;save.c: 166: unsigned long temp1 = 0 ;
  6581  027B  3000               	movlw	0
  6582  027C  00C9               	movwf	Calculate_Time@temp1+3
  6583  027D  3000               	movlw	0
  6584  027E  00C8               	movwf	Calculate_Time@temp1+2
  6585  027F  3000               	movlw	0
  6586  0280  00C7               	movwf	Calculate_Time@temp1+1
  6587  0281  3000               	movlw	0
  6588  0282  00C6               	movwf	Calculate_Time@temp1
  6589                           
  6590                           ;save.c: 167: unsigned long temp2 = 0 ;
  6591  0283  3000               	movlw	0
  6592  0284  00CD               	movwf	Calculate_Time@temp2+3
  6593  0285  3000               	movlw	0
  6594  0286  00CC               	movwf	Calculate_Time@temp2+2
  6595  0287  3000               	movlw	0
  6596  0288  00CB               	movwf	Calculate_Time@temp2+1
  6597  0289  3000               	movlw	0
  6598  028A  00CA               	movwf	Calculate_Time@temp2
  6599                           
  6600                           ;save.c: 168: Bq32k_Rtc_Read_Time(&rtc_tm);
  6601  028B  3062               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  6602  028C  318D  2523  3182   	fcall	_Bq32k_Rtc_Read_Time
  6603                           
  6604                           ;save.c: 169: if( time_count == 1 )
  6605  028F  0020               	movlb	0	; select bank0
  6606  0290  0369               	decf	_time_count,w
  6607  0291  1D03               	btfss	3,2
  6608  0292  2B49               	goto	l5534
  6609                           
  6610                           ;save.c: 170: {
  6611                           ;save.c: 171: if(rtc_tm.date != rtc_save_ch1.date)
  6612  0293  0022               	movlb	2	; select bank2
  6613  0294  0866               	movf	(_rtc_tm^(0+256)+4),w
  6614  0295  0658               	xorwf	(_rtc_save_ch1^(0+256)+4),w
  6615  0296  1D03               	btfss	3,2
  6616  0297  2B52               	goto	l5538
  6617                           
  6618                           ;save.c: 183: else
  6619                           ;save.c: 184: {
  6620                           ;save.c: 185: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6621                           
  6622                           ;save.c: 182: }
  6623                           
  6624                           ;save.c: 181: time_count = 0;
  6625                           
  6626                           ;save.c: 178: Cur_temperature_time_ch2 = 0;
  6627                           
  6628                           ;save.c: 177: Cur_temperature_time_ch1 = 0;
  6629                           
  6630                           ;save.c: 176: Save_Write_time();
  6631                           
  6632                           ;save.c: 175: Write_Flash_head();
  6633                           
  6634                           ;save.c: 172: {
  6635                           ;save.c: 174: Write_Flash_finish();
  6636  0298  0022               	movlb	2	; select bank2
  6637  0299  0862               	movf	_rtc_tm^(0+256),w
  6638  029A  0020               	movlb	0	; select bank0
  6639  029B  00B8               	movwf	??_Calculate_Time
  6640  029C  01B9               	clrf	??_Calculate_Time+1
  6641  029D  0022               	movlb	2	; select bank2
  6642  029E  0864               	movf	(_rtc_tm^(0+256)+2),w
  6643  029F  0020               	movlb	0	; select bank0
  6644  02A0  00BA               	movwf	??_Calculate_Time+2
  6645  02A1  01BB               	clrf	??_Calculate_Time+3
  6646  02A2  083A               	movf	??_Calculate_Time+2,w
  6647  02A3  00A1               	movwf	___wmul@multiplier
  6648  02A4  083B               	movf	??_Calculate_Time+3,w
  6649  02A5  00A2               	movwf	___wmul@multiplier+1
  6650  02A6  3010               	movlw	16
  6651  02A7  00A3               	movwf	___wmul@multiplicand
  6652  02A8  300E               	movlw	14
  6653  02A9  00A4               	movwf	___wmul@multiplicand+1
  6654  02AA  3195  2505  3182   	fcall	___wmul
  6655  02AD  0020               	movlb	0	; select bank0
  6656  02AE  0821               	movf	?___wmul,w
  6657  02AF  00BC               	movwf	??_Calculate_Time+4
  6658  02B0  0822               	movf	?___wmul+1,w
  6659  02B1  00BD               	movwf	??_Calculate_Time+5
  6660  02B2  0022               	movlb	2	; select bank2
  6661  02B3  0863               	movf	(_rtc_tm^(0+256)+1),w
  6662  02B4  0020               	movlb	0	; select bank0
  6663  02B5  00BE               	movwf	??_Calculate_Time+6
  6664  02B6  01BF               	clrf	??_Calculate_Time+7
  6665  02B7  083E               	movf	??_Calculate_Time+6,w
  6666  02B8  00A1               	movwf	___wmul@multiplier
  6667  02B9  083F               	movf	??_Calculate_Time+7,w
  6668  02BA  00A2               	movwf	___wmul@multiplier+1
  6669  02BB  303C               	movlw	60
  6670  02BC  00A3               	movwf	___wmul@multiplicand
  6671  02BD  3000               	movlw	0
  6672  02BE  00A4               	movwf	___wmul@multiplicand+1
  6673  02BF  3195  2505  3182   	fcall	___wmul
  6674  02C2  0020               	movlb	0	; select bank0
  6675  02C3  0821               	movf	?___wmul,w
  6676  02C4  073C               	addwf	??_Calculate_Time+4,w
  6677  02C5  00C0               	movwf	??_Calculate_Time+8
  6678  02C6  0822               	movf	?___wmul+1,w
  6679  02C7  3D3D               	addwfc	??_Calculate_Time+5,w
  6680  02C8  00C1               	movwf	??_Calculate_Time+9
  6681  02C9  0838               	movf	??_Calculate_Time,w
  6682  02CA  0740               	addwf	??_Calculate_Time+8,w
  6683  02CB  00C6               	movwf	Calculate_Time@temp1
  6684  02CC  0839               	movf	??_Calculate_Time+1,w
  6685  02CD  3D41               	addwfc	??_Calculate_Time+9,w
  6686  02CE  00C7               	movwf	Calculate_Time@temp1+1
  6687  02CF  01C8               	clrf	Calculate_Time@temp1+2
  6688  02D0  1BC7               	btfsc	Calculate_Time@temp1+1,7
  6689  02D1  03C8               	decf	Calculate_Time@temp1+2,f
  6690  02D2  0848               	movf	Calculate_Time@temp1+2,w
  6691  02D3  00C9               	movwf	Calculate_Time@temp1+3
  6692                           
  6693                           ;save.c: 186: temp2 = rtc_save_ch1.hours*3600+rtc_save_ch1.minutes*60+rtc_save_ch1.secon
      +                          ds;
  6694  02D4  0022               	movlb	2	; select bank2
  6695  02D5  0854               	movf	_rtc_save_ch1^(0+256),w
  6696  02D6  0020               	movlb	0	; select bank0
  6697  02D7  00B8               	movwf	??_Calculate_Time
  6698  02D8  01B9               	clrf	??_Calculate_Time+1
  6699  02D9  0022               	movlb	2	; select bank2
  6700  02DA  0856               	movf	(_rtc_save_ch1^(0+256)+2),w
  6701  02DB  0020               	movlb	0	; select bank0
  6702  02DC  00BA               	movwf	??_Calculate_Time+2
  6703  02DD  01BB               	clrf	??_Calculate_Time+3
  6704  02DE  083A               	movf	??_Calculate_Time+2,w
  6705  02DF  00A1               	movwf	___wmul@multiplier
  6706  02E0  083B               	movf	??_Calculate_Time+3,w
  6707  02E1  00A2               	movwf	___wmul@multiplier+1
  6708  02E2  3010               	movlw	16
  6709  02E3  00A3               	movwf	___wmul@multiplicand
  6710  02E4  300E               	movlw	14
  6711  02E5  00A4               	movwf	___wmul@multiplicand+1
  6712  02E6  3195  2505  3182   	fcall	___wmul
  6713  02E9  0020               	movlb	0	; select bank0
  6714  02EA  0821               	movf	?___wmul,w
  6715  02EB  00BC               	movwf	??_Calculate_Time+4
  6716  02EC  0822               	movf	?___wmul+1,w
  6717  02ED  00BD               	movwf	??_Calculate_Time+5
  6718  02EE  0022               	movlb	2	; select bank2
  6719  02EF  0855               	movf	(_rtc_save_ch1^(0+256)+1),w
  6720  02F0  0020               	movlb	0	; select bank0
  6721  02F1  00BE               	movwf	??_Calculate_Time+6
  6722  02F2  01BF               	clrf	??_Calculate_Time+7
  6723  02F3  083E               	movf	??_Calculate_Time+6,w
  6724  02F4  00A1               	movwf	___wmul@multiplier
  6725  02F5  083F               	movf	??_Calculate_Time+7,w
  6726  02F6  00A2               	movwf	___wmul@multiplier+1
  6727  02F7  303C               	movlw	60
  6728  02F8  00A3               	movwf	___wmul@multiplicand
  6729  02F9  3000               	movlw	0
  6730  02FA  00A4               	movwf	___wmul@multiplicand+1
  6731  02FB  3195  2505  3182   	fcall	___wmul
  6732  02FE  0020               	movlb	0	; select bank0
  6733  02FF  0821               	movf	?___wmul,w
  6734  0300  073C               	addwf	??_Calculate_Time+4,w
  6735  0301  00C0               	movwf	??_Calculate_Time+8
  6736  0302  0822               	movf	?___wmul+1,w
  6737  0303  3D3D               	addwfc	??_Calculate_Time+5,w
  6738  0304  00C1               	movwf	??_Calculate_Time+9
  6739  0305  0838               	movf	??_Calculate_Time,w
  6740  0306  0740               	addwf	??_Calculate_Time+8,w
  6741  0307  00CA               	movwf	Calculate_Time@temp2
  6742  0308  0839               	movf	??_Calculate_Time+1,w
  6743  0309  3D41               	addwfc	??_Calculate_Time+9,w
  6744  030A  00CB               	movwf	Calculate_Time@temp2+1
  6745  030B  01CC               	clrf	Calculate_Time@temp2+2
  6746  030C  1BCB               	btfsc	Calculate_Time@temp2+1,7
  6747  030D  03CC               	decf	Calculate_Time@temp2+2,f
  6748  030E  084C               	movf	Calculate_Time@temp2+2,w
  6749  030F  00CD               	movwf	Calculate_Time@temp2+3
  6750                           
  6751                           ;save.c: 187: temp = temp1 - temp2;
  6752  0310  0846               	movf	Calculate_Time@temp1,w
  6753  0311  00B8               	movwf	??_Calculate_Time
  6754  0312  0847               	movf	Calculate_Time@temp1+1,w
  6755  0313  00B9               	movwf	??_Calculate_Time+1
  6756  0314  0848               	movf	Calculate_Time@temp1+2,w
  6757  0315  00BA               	movwf	??_Calculate_Time+2
  6758  0316  0849               	movf	Calculate_Time@temp1+3,w
  6759  0317  00BB               	movwf	??_Calculate_Time+3
  6760  0318  094A               	comf	Calculate_Time@temp2,w
  6761  0319  00BC               	movwf	??_Calculate_Time+4
  6762  031A  094B               	comf	Calculate_Time@temp2+1,w
  6763  031B  00BD               	movwf	??_Calculate_Time+5
  6764  031C  094C               	comf	Calculate_Time@temp2+2,w
  6765  031D  00BE               	movwf	??_Calculate_Time+6
  6766  031E  094D               	comf	Calculate_Time@temp2+3,w
  6767  031F  00BF               	movwf	??_Calculate_Time+7
  6768  0320  0ABC               	incf	??_Calculate_Time+4,f
  6769  0321  1903               	skipnz
  6770  0322  0ABD               	incf	??_Calculate_Time+5,f
  6771  0323  1903               	skipnz
  6772  0324  0ABE               	incf	??_Calculate_Time+6,f
  6773  0325  1903               	skipnz
  6774  0326  0ABF               	incf	??_Calculate_Time+7,f
  6775  0327  083C               	movf	??_Calculate_Time+4,w
  6776  0328  07B8               	addwf	??_Calculate_Time,f
  6777  0329  083D               	movf	??_Calculate_Time+5,w
  6778  032A  3DB9               	addwfc	??_Calculate_Time+1,f
  6779  032B  083E               	movf	??_Calculate_Time+6,w
  6780  032C  3DBA               	addwfc	??_Calculate_Time+2,f
  6781  032D  083F               	movf	??_Calculate_Time+7,w
  6782  032E  3DBB               	addwfc	??_Calculate_Time+3,f
  6783  032F  083B               	movf	??_Calculate_Time+3,w
  6784  0330  00C5               	movwf	Calculate_Time@temp+3
  6785  0331  083A               	movf	??_Calculate_Time+2,w
  6786  0332  00C4               	movwf	Calculate_Time@temp+2
  6787  0333  0839               	movf	??_Calculate_Time+1,w
  6788  0334  00C3               	movwf	Calculate_Time@temp+1
  6789  0335  0838               	movf	??_Calculate_Time,w
  6790  0336  00C2               	movwf	Calculate_Time@temp
  6791                           
  6792                           ;save.c: 188: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  6793  0337  3054               	movlw	low (_rtc_save_ch1| (0+256))
  6794  0338  0086               	movwf	6
  6795  0339  3001               	movlw	1	; select bank2/3
  6796  033A  0087               	movwf	7
  6797  033B  3062               	movlw	low (_rtc_tm| (0+256))
  6798  033C  0084               	movwf	4
  6799  033D  3001               	movlw	1	; select bank2/3
  6800  033E  0085               	movwf	5
  6801  033F  3007               	movlw	7
  6802  0340  0020               	movlb	0	; select bank0
  6803  0341  00B8               	movwf	??_Calculate_Time
  6804  0342                     u469m0:	
  6805  0342  0012               	moviw fsr0++
  6806  0343  001E               	movwi fsr1++
  6807  0344  0BB8               	decfsz	??_Calculate_Time,f
  6808  0345  2B42               	goto	u469m0
  6809                           
  6810                           ;save.c: 189: return temp;
  6811  0346  0020               	movlb	0	; select bank0
  6812  0347  0842               	movf	Calculate_Time@temp,w
  6813  0348  0008               	return
  6814  0349                     l5534:	
  6815                           ;save.c: 190: }
  6816                           ;save.c: 191: }
  6817                           
  6818                           
  6819                           ;save.c: 192: else if( time_count == 3 )
  6820  0349  3003               	movlw	3
  6821  034A  0669               	xorwf	_time_count,w
  6822  034B  1D03               	btfss	3,2
  6823  034C  2C12               	goto	l5558
  6824                           
  6825                           ;save.c: 193: {
  6826                           ;save.c: 194: if(rtc_tm.date != rtc_save_ch2.date)
  6827  034D  0022               	movlb	2	; select bank2
  6828  034E  0866               	movf	(_rtc_tm^(0+256)+4),w
  6829  034F  065F               	xorwf	(_rtc_save_ch2^(0+256)+4),w
  6830  0350  1903               	skipnz
  6831  0351  2B61               	goto	l5548
  6832  0352                     l5538:	
  6833                           
  6834                           ;save.c: 195: {
  6835                           ;save.c: 197: Write_Flash_finish();
  6836  0352  3196  2674  3182   	fcall	_Write_Flash_finish
  6837                           
  6838                           ;save.c: 198: Write_Flash_head();
  6839  0355  3196  2695  3182   	fcall	_Write_Flash_head
  6840                           
  6841                           ;save.c: 199: Save_Write_time();
  6842  0358  318E  2602  3182   	fcall	_Save_Write_time
  6843                           
  6844                           ;save.c: 200: Cur_temperature_time_ch1 = 0;
  6845  035B  0022               	movlb	2	; select bank2
  6846  035C  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  6847                           
  6848                           ;save.c: 201: Cur_temperature_time_ch2 = 0;
  6849  035D  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  6850                           
  6851                           ;save.c: 204: time_count = 0;
  6852  035E  0020               	movlb	0	; select bank0
  6853  035F  01E9               	clrf	_time_count
  6854                           
  6855                           ;save.c: 205: }
  6856  0360  2C12               	goto	l5558
  6857  0361                     l5548:	
  6858                           
  6859                           ;save.c: 206: else
  6860                           ;save.c: 207: {
  6861                           ;save.c: 208: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6862  0361  0022               	movlb	2	; select bank2
  6863  0362  0862               	movf	_rtc_tm^(0+256),w
  6864  0363  0020               	movlb	0	; select bank0
  6865  0364  00B8               	movwf	??_Calculate_Time
  6866  0365  01B9               	clrf	??_Calculate_Time+1
  6867  0366  0022               	movlb	2	; select bank2
  6868  0367  0864               	movf	(_rtc_tm^(0+256)+2),w
  6869  0368  0020               	movlb	0	; select bank0
  6870  0369  00BA               	movwf	??_Calculate_Time+2
  6871  036A  01BB               	clrf	??_Calculate_Time+3
  6872  036B  083A               	movf	??_Calculate_Time+2,w
  6873  036C  00A1               	movwf	___wmul@multiplier
  6874  036D  083B               	movf	??_Calculate_Time+3,w
  6875  036E  00A2               	movwf	___wmul@multiplier+1
  6876  036F  3010               	movlw	16
  6877  0370  00A3               	movwf	___wmul@multiplicand
  6878  0371  300E               	movlw	14
  6879  0372  00A4               	movwf	___wmul@multiplicand+1
  6880  0373  3195  2505  3182   	fcall	___wmul
  6881  0376  0020               	movlb	0	; select bank0
  6882  0377  0821               	movf	?___wmul,w
  6883  0378  00BC               	movwf	??_Calculate_Time+4
  6884  0379  0822               	movf	?___wmul+1,w
  6885  037A  00BD               	movwf	??_Calculate_Time+5
  6886  037B  0022               	movlb	2	; select bank2
  6887  037C  0863               	movf	(_rtc_tm^(0+256)+1),w
  6888  037D  0020               	movlb	0	; select bank0
  6889  037E  00BE               	movwf	??_Calculate_Time+6
  6890  037F  01BF               	clrf	??_Calculate_Time+7
  6891  0380  083E               	movf	??_Calculate_Time+6,w
  6892  0381  00A1               	movwf	___wmul@multiplier
  6893  0382  083F               	movf	??_Calculate_Time+7,w
  6894  0383  00A2               	movwf	___wmul@multiplier+1
  6895  0384  303C               	movlw	60
  6896  0385  00A3               	movwf	___wmul@multiplicand
  6897  0386  3000               	movlw	0
  6898  0387  00A4               	movwf	___wmul@multiplicand+1
  6899  0388  3195  2505  3182   	fcall	___wmul
  6900  038B  0020               	movlb	0	; select bank0
  6901  038C  0821               	movf	?___wmul,w
  6902  038D  073C               	addwf	??_Calculate_Time+4,w
  6903  038E  00C0               	movwf	??_Calculate_Time+8
  6904  038F  0822               	movf	?___wmul+1,w
  6905  0390  3D3D               	addwfc	??_Calculate_Time+5,w
  6906  0391  00C1               	movwf	??_Calculate_Time+9
  6907  0392  0838               	movf	??_Calculate_Time,w
  6908  0393  0740               	addwf	??_Calculate_Time+8,w
  6909  0394  00C6               	movwf	Calculate_Time@temp1
  6910  0395  0839               	movf	??_Calculate_Time+1,w
  6911  0396  3D41               	addwfc	??_Calculate_Time+9,w
  6912  0397  00C7               	movwf	Calculate_Time@temp1+1
  6913  0398  01C8               	clrf	Calculate_Time@temp1+2
  6914  0399  1BC7               	btfsc	Calculate_Time@temp1+1,7
  6915  039A  03C8               	decf	Calculate_Time@temp1+2,f
  6916  039B  0848               	movf	Calculate_Time@temp1+2,w
  6917  039C  00C9               	movwf	Calculate_Time@temp1+3
  6918                           
  6919                           ;save.c: 209: temp2 = rtc_save_ch2.hours*3600+rtc_save_ch2.minutes*60+rtc_save_ch2.secon
      +                          ds;
  6920  039D  0022               	movlb	2	; select bank2
  6921  039E  085B               	movf	_rtc_save_ch2^(0+256),w
  6922  039F  0020               	movlb	0	; select bank0
  6923  03A0  00B8               	movwf	??_Calculate_Time
  6924  03A1  01B9               	clrf	??_Calculate_Time+1
  6925  03A2  0022               	movlb	2	; select bank2
  6926  03A3  085D               	movf	(_rtc_save_ch2^(0+256)+2),w
  6927  03A4  0020               	movlb	0	; select bank0
  6928  03A5  00BA               	movwf	??_Calculate_Time+2
  6929  03A6  01BB               	clrf	??_Calculate_Time+3
  6930  03A7  083A               	movf	??_Calculate_Time+2,w
  6931  03A8  00A1               	movwf	___wmul@multiplier
  6932  03A9  083B               	movf	??_Calculate_Time+3,w
  6933  03AA  00A2               	movwf	___wmul@multiplier+1
  6934  03AB  3010               	movlw	16
  6935  03AC  00A3               	movwf	___wmul@multiplicand
  6936  03AD  300E               	movlw	14
  6937  03AE  00A4               	movwf	___wmul@multiplicand+1
  6938  03AF  3195  2505  3182   	fcall	___wmul
  6939  03B2  0020               	movlb	0	; select bank0
  6940  03B3  0821               	movf	?___wmul,w
  6941  03B4  00BC               	movwf	??_Calculate_Time+4
  6942  03B5  0822               	movf	?___wmul+1,w
  6943  03B6  00BD               	movwf	??_Calculate_Time+5
  6944  03B7  0022               	movlb	2	; select bank2
  6945  03B8  085C               	movf	(_rtc_save_ch2^(0+256)+1),w
  6946  03B9  0020               	movlb	0	; select bank0
  6947  03BA  00BE               	movwf	??_Calculate_Time+6
  6948  03BB  01BF               	clrf	??_Calculate_Time+7
  6949  03BC  083E               	movf	??_Calculate_Time+6,w
  6950  03BD  00A1               	movwf	___wmul@multiplier
  6951  03BE  083F               	movf	??_Calculate_Time+7,w
  6952  03BF  00A2               	movwf	___wmul@multiplier+1
  6953  03C0  303C               	movlw	60
  6954  03C1  00A3               	movwf	___wmul@multiplicand
  6955  03C2  3000               	movlw	0
  6956  03C3  00A4               	movwf	___wmul@multiplicand+1
  6957  03C4  3195  2505  3182   	fcall	___wmul
  6958  03C7  0020               	movlb	0	; select bank0
  6959  03C8  0821               	movf	?___wmul,w
  6960  03C9  073C               	addwf	??_Calculate_Time+4,w
  6961  03CA  00C0               	movwf	??_Calculate_Time+8
  6962  03CB  0822               	movf	?___wmul+1,w
  6963  03CC  3D3D               	addwfc	??_Calculate_Time+5,w
  6964  03CD  00C1               	movwf	??_Calculate_Time+9
  6965  03CE  0838               	movf	??_Calculate_Time,w
  6966  03CF  0740               	addwf	??_Calculate_Time+8,w
  6967  03D0  00CA               	movwf	Calculate_Time@temp2
  6968  03D1  0839               	movf	??_Calculate_Time+1,w
  6969  03D2  3D41               	addwfc	??_Calculate_Time+9,w
  6970  03D3  00CB               	movwf	Calculate_Time@temp2+1
  6971  03D4  01CC               	clrf	Calculate_Time@temp2+2
  6972  03D5  1BCB               	btfsc	Calculate_Time@temp2+1,7
  6973  03D6  03CC               	decf	Calculate_Time@temp2+2,f
  6974  03D7  084C               	movf	Calculate_Time@temp2+2,w
  6975  03D8  00CD               	movwf	Calculate_Time@temp2+3
  6976                           
  6977                           ;save.c: 210: temp = temp1 - temp2;
  6978  03D9  0846               	movf	Calculate_Time@temp1,w
  6979  03DA  00B8               	movwf	??_Calculate_Time
  6980  03DB  0847               	movf	Calculate_Time@temp1+1,w
  6981  03DC  00B9               	movwf	??_Calculate_Time+1
  6982  03DD  0848               	movf	Calculate_Time@temp1+2,w
  6983  03DE  00BA               	movwf	??_Calculate_Time+2
  6984  03DF  0849               	movf	Calculate_Time@temp1+3,w
  6985  03E0  00BB               	movwf	??_Calculate_Time+3
  6986  03E1  094A               	comf	Calculate_Time@temp2,w
  6987  03E2  00BC               	movwf	??_Calculate_Time+4
  6988  03E3  094B               	comf	Calculate_Time@temp2+1,w
  6989  03E4  00BD               	movwf	??_Calculate_Time+5
  6990  03E5  094C               	comf	Calculate_Time@temp2+2,w
  6991  03E6  00BE               	movwf	??_Calculate_Time+6
  6992  03E7  094D               	comf	Calculate_Time@temp2+3,w
  6993  03E8  00BF               	movwf	??_Calculate_Time+7
  6994  03E9  0ABC               	incf	??_Calculate_Time+4,f
  6995  03EA  1903               	skipnz
  6996  03EB  0ABD               	incf	??_Calculate_Time+5,f
  6997  03EC  1903               	skipnz
  6998  03ED  0ABE               	incf	??_Calculate_Time+6,f
  6999  03EE  1903               	skipnz
  7000  03EF  0ABF               	incf	??_Calculate_Time+7,f
  7001  03F0  083C               	movf	??_Calculate_Time+4,w
  7002  03F1  07B8               	addwf	??_Calculate_Time,f
  7003  03F2  083D               	movf	??_Calculate_Time+5,w
  7004  03F3  3DB9               	addwfc	??_Calculate_Time+1,f
  7005  03F4  083E               	movf	??_Calculate_Time+6,w
  7006  03F5  3DBA               	addwfc	??_Calculate_Time+2,f
  7007  03F6  083F               	movf	??_Calculate_Time+7,w
  7008  03F7  3DBB               	addwfc	??_Calculate_Time+3,f
  7009  03F8  083B               	movf	??_Calculate_Time+3,w
  7010  03F9  00C5               	movwf	Calculate_Time@temp+3
  7011  03FA  083A               	movf	??_Calculate_Time+2,w
  7012  03FB  00C4               	movwf	Calculate_Time@temp+2
  7013  03FC  0839               	movf	??_Calculate_Time+1,w
  7014  03FD  00C3               	movwf	Calculate_Time@temp+1
  7015  03FE  0838               	movf	??_Calculate_Time,w
  7016  03FF  00C2               	movwf	Calculate_Time@temp
  7017                           
  7018                           ;save.c: 211: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7019  0400  305B               	movlw	low (_rtc_save_ch2| (0+256))
  7020  0401  0086               	movwf	6
  7021  0402  3001               	movlw	1	; select bank2/3
  7022  0403  0087               	movwf	7
  7023  0404  3062               	movlw	low (_rtc_tm| (0+256))
  7024  0405  0084               	movwf	4
  7025  0406  3001               	movlw	1	; select bank2/3
  7026  0407  0085               	movwf	5
  7027  0408  3007               	movlw	7
  7028  0409  0020               	movlb	0	; select bank0
  7029  040A  00B8               	movwf	??_Calculate_Time
  7030  040B                     u472m0:	
  7031  040B  0012               	moviw fsr0++
  7032  040C  001E               	movwi fsr1++
  7033  040D  0BB8               	decfsz	??_Calculate_Time,f
  7034  040E  2C0B               	goto	u472m0
  7035                           
  7036                           ;save.c: 212: return temp;
  7037  040F  0020               	movlb	0	; select bank0
  7038  0410  0842               	movf	Calculate_Time@temp,w
  7039  0411  0008               	return
  7040  0412                     l5558:	
  7041                           
  7042                           ;save.c: 213: }
  7043                           ;save.c: 214: }
  7044                           ;save.c: 215: return 0;
  7045  0412  3000               	movlw	0
  7046  0413  0008               	return
  7047  0414                     __end_of_Calculate_Time:	
  7048                           
  7049                           	psect	text19
  7050  1505                     __ptext19:	
  7051 ;; *************** function ___wmul *****************
  7052 ;; Defined at:
  7053 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  multiplier      2    1[BANK0 ] unsigned int 
  7056 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;  product         2    5[BANK0 ] unsigned int 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  2    1[BANK0 ] unsigned int 
  7061 ;; Registers used:
  7062 ;;		wreg, status,2, status,0
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7068 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;Total ram usage:        6 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    3
  7075 ;; This function calls:
  7076 ;;		Nothing
  7077 ;; This function is called by:
  7078 ;;		_Calculate_Time
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           
  7083                           ;psect for function ___wmul
  7084  1505                     ___wmul:	
  7085                           
  7086                           ;incstack = 0
  7087                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7088  1505  0020               	movlb	0	; select bank0
  7089  1506  01A5               	clrf	___wmul@product
  7090  1507  01A6               	clrf	___wmul@product+1
  7091  1508                     l5440:	
  7092  1508  1C21               	btfss	___wmul@multiplier,0
  7093  1509  2D0E               	goto	l1280
  7094  150A  0823               	movf	___wmul@multiplicand,w
  7095  150B  07A5               	addwf	___wmul@product,f
  7096  150C  0824               	movf	___wmul@multiplicand+1,w
  7097  150D  3DA6               	addwfc	___wmul@product+1,f
  7098  150E                     l1280:	
  7099  150E  3001               	movlw	1
  7100  150F                     u4575:	
  7101  150F  35A3               	lslf	___wmul@multiplicand,f
  7102  1510  0DA4               	rlf	___wmul@multiplicand+1,f
  7103  1511  0B89               	decfsz	9,f
  7104  1512  2D0F               	goto	u4575
  7105  1513  3001               	movlw	1
  7106  1514                     u4585:	
  7107  1514  36A2               	lsrf	___wmul@multiplier+1,f
  7108  1515  0CA1               	rrf	___wmul@multiplier,f
  7109  1516  0B89               	decfsz	9,f
  7110  1517  2D14               	goto	u4585
  7111  1518  0821               	movf	___wmul@multiplier,w
  7112  1519  0422               	iorwf	___wmul@multiplier+1,w
  7113  151A  1D03               	btfss	3,2
  7114  151B  2D08               	goto	l5440
  7115  151C  0826               	movf	___wmul@product+1,w
  7116  151D  00A2               	movwf	?___wmul+1
  7117  151E  0825               	movf	___wmul@product,w
  7118  151F  00A1               	movwf	?___wmul
  7119  1520  0008               	return
  7120  1521                     __end_of___wmul:	
  7121                           
  7122                           	psect	text20
  7123  1695                     __ptext20:	
  7124 ;; *************** function _Write_Flash_head *****************
  7125 ;; Defined at:
  7126 ;;		line 92 in file "mcc_generated_files/save.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      void 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0, pclath, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;Total ram usage:        0 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    4
  7147 ;; This function calls:
  7148 ;;		_FLASH_WriteWord
  7149 ;; This function is called by:
  7150 ;;		_Key_Process
  7151 ;;		_Calculate_Time
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _Write_Flash_head
  7157  1695                     _Write_Flash_head:	
  7158                           
  7159                           ;save.c: 94: FLASH_WriteWord(Cur_Save_Index, 0xAAAA);
  7160                           
  7161                           ;incstack = 0
  7162                           ; Regs used in _Write_Flash_head: [wreg+status,2+status,0+pclath+cstack]
  7163  1695  0020               	movlb	0	; select bank0
  7164  1696  0865               	movf	_Cur_Save_Index+1,w
  7165  1697  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7166  1698  0864               	movf	_Cur_Save_Index,w
  7167  1699  00A1               	movwf	FLASH_WriteWord@flashAddr
  7168  169A  30AA               	movlw	170
  7169  169B  00A3               	movwf	FLASH_WriteWord@word
  7170  169C  30AA               	movlw	170
  7171  169D  00A4               	movwf	FLASH_WriteWord@word+1
  7172  169E  3197  271E  3196   	fcall	_FLASH_WriteWord
  7173                           
  7174                           ;save.c: 95: Cur_Save_Index++;
  7175  16A1  3001               	movlw	1
  7176  16A2  0020               	movlb	0	; select bank0
  7177  16A3  07E4               	addwf	_Cur_Save_Index,f
  7178  16A4  3000               	movlw	0
  7179  16A5  3DE5               	addwfc	_Cur_Save_Index+1,f
  7180                           
  7181                           ;save.c: 96: FLASH_WriteWord(Cur_Save_Index, 0xAAAA);
  7182  16A6  0865               	movf	_Cur_Save_Index+1,w
  7183  16A7  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7184  16A8  0864               	movf	_Cur_Save_Index,w
  7185  16A9  00A1               	movwf	FLASH_WriteWord@flashAddr
  7186  16AA  30AA               	movlw	170
  7187  16AB  00A3               	movwf	FLASH_WriteWord@word
  7188  16AC  30AA               	movlw	170
  7189  16AD  00A4               	movwf	FLASH_WriteWord@word+1
  7190  16AE  3197  271E         	fcall	_FLASH_WriteWord
  7191                           
  7192                           ;save.c: 97: Cur_Save_Index++;
  7193  16B0  3001               	movlw	1
  7194  16B1  0020               	movlb	0	; select bank0
  7195  16B2  07E4               	addwf	_Cur_Save_Index,f
  7196  16B3  3000               	movlw	0
  7197  16B4  3DE5               	addwfc	_Cur_Save_Index+1,f
  7198  16B5  0008               	return
  7199  16B6                     __end_of_Write_Flash_head:	
  7200                           
  7201                           	psect	text21
  7202  1674                     __ptext21:	
  7203 ;; *************** function _Write_Flash_finish *****************
  7204 ;; Defined at:
  7205 ;;		line 106 in file "mcc_generated_files/save.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;		None
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;		None
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      void 
  7212 ;; Registers used:
  7213 ;;		wreg, status,2, status,0, pclath, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;Total ram usage:        0 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    4
  7226 ;; This function calls:
  7227 ;;		_FLASH_WriteWord
  7228 ;; This function is called by:
  7229 ;;		_Key_Process
  7230 ;;		_Serach_Flash_Head
  7231 ;;		_Calculate_Time
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           
  7236                           ;psect for function _Write_Flash_finish
  7237  1674                     _Write_Flash_finish:	
  7238                           
  7239                           ;save.c: 108: FLASH_WriteWord(Cur_Save_Index, 0x5555);
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _Write_Flash_finish: [wreg+status,2+status,0+pclath+cstack]
  7243  1674  0020               	movlb	0	; select bank0
  7244  1675  0865               	movf	_Cur_Save_Index+1,w
  7245  1676  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7246  1677  0864               	movf	_Cur_Save_Index,w
  7247  1678  00A1               	movwf	FLASH_WriteWord@flashAddr
  7248  1679  3055               	movlw	85
  7249  167A  00A3               	movwf	FLASH_WriteWord@word
  7250  167B  3055               	movlw	85
  7251  167C  00A4               	movwf	FLASH_WriteWord@word+1
  7252  167D  3197  271E  3196   	fcall	_FLASH_WriteWord
  7253                           
  7254                           ;save.c: 109: Cur_Save_Index++;
  7255  1680  3001               	movlw	1
  7256  1681  0020               	movlb	0	; select bank0
  7257  1682  07E4               	addwf	_Cur_Save_Index,f
  7258  1683  3000               	movlw	0
  7259  1684  3DE5               	addwfc	_Cur_Save_Index+1,f
  7260                           
  7261                           ;save.c: 110: FLASH_WriteWord(Cur_Save_Index, 0x5555);
  7262  1685  0865               	movf	_Cur_Save_Index+1,w
  7263  1686  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7264  1687  0864               	movf	_Cur_Save_Index,w
  7265  1688  00A1               	movwf	FLASH_WriteWord@flashAddr
  7266  1689  3055               	movlw	85
  7267  168A  00A3               	movwf	FLASH_WriteWord@word
  7268  168B  3055               	movlw	85
  7269  168C  00A4               	movwf	FLASH_WriteWord@word+1
  7270  168D  3197  271E         	fcall	_FLASH_WriteWord
  7271                           
  7272                           ;save.c: 111: Cur_Save_Index++;
  7273  168F  3001               	movlw	1
  7274  1690  0020               	movlb	0	; select bank0
  7275  1691  07E4               	addwf	_Cur_Save_Index,f
  7276  1692  3000               	movlw	0
  7277  1693  3DE5               	addwfc	_Cur_Save_Index+1,f
  7278  1694  0008               	return
  7279  1695                     __end_of_Write_Flash_finish:	
  7280                           
  7281                           	psect	text22
  7282  0E02                     __ptext22:	
  7283 ;; *************** function _Save_Write_time *****************
  7284 ;; Defined at:
  7285 ;;		line 254 in file "mcc_generated_files/save.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;		None
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  i               1    0        unsigned char 
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;Total ram usage:        2 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    6
  7306 ;; This function calls:
  7307 ;;		_Bq32k_Rtc_Read_Time
  7308 ;;		_Save_Write_word
  7309 ;; This function is called by:
  7310 ;;		_Key_Process
  7311 ;;		_Calculate_Time
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           
  7316                           ;psect for function _Save_Write_time
  7317  0E02                     _Save_Write_time:	
  7318                           
  7319                           ;save.c: 256: unsigned char i;
  7320                           ;save.c: 257: Bq32k_Rtc_Read_Time(&rtc_tm);
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _Save_Write_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7324  0E02  3062               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  7325  0E03  318D  2523  318E   	fcall	_Bq32k_Rtc_Read_Time
  7326                           
  7327                           ;save.c: 258: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  7328  0E06  3054               	movlw	low (_rtc_save_ch1| (0+256))
  7329  0E07  0086               	movwf	6
  7330  0E08  3001               	movlw	1	; select bank2/3
  7331  0E09  0087               	movwf	7
  7332  0E0A  3062               	movlw	low (_rtc_tm| (0+256))
  7333  0E0B  0084               	movwf	4
  7334  0E0C  3001               	movlw	1	; select bank2/3
  7335  0E0D  0085               	movwf	5
  7336  0E0E  3007               	movlw	7
  7337  0E0F  0020               	movlb	0	; select bank0
  7338  0E10  00B6               	movwf	??_Save_Write_time
  7339  0E11                     u454m0:	
  7340  0E11  0012               	moviw fsr0++
  7341  0E12  001E               	movwi fsr1++
  7342  0E13  0BB6               	decfsz	??_Save_Write_time,f
  7343  0E14  2E11               	goto	u454m0
  7344                           
  7345                           ;save.c: 259: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7346  0E15  305B               	movlw	low (_rtc_save_ch2| (0+256))
  7347  0E16  0086               	movwf	6
  7348  0E17  3001               	movlw	1	; select bank2/3
  7349  0E18  0087               	movwf	7
  7350  0E19  3062               	movlw	low (_rtc_tm| (0+256))
  7351  0E1A  0084               	movwf	4
  7352  0E1B  3001               	movlw	1	; select bank2/3
  7353  0E1C  0085               	movwf	5
  7354  0E1D  3007               	movlw	7
  7355  0E1E  0020               	movlb	0	; select bank0
  7356  0E1F  00B6               	movwf	??_Save_Write_time
  7357  0E20                     u455m0:	
  7358  0E20  0012               	moviw fsr0++
  7359  0E21  001E               	movwi fsr1++
  7360  0E22  0BB6               	decfsz	??_Save_Write_time,f
  7361  0E23  2E20               	goto	u455m0
  7362                           
  7363                           ;save.c: 260: Save_Write_word( rtc_tm.years);
  7364  0E24  0022               	movlb	2	; select bank2
  7365  0E25  0868               	movf	(_rtc_tm^(0+256)+6),w
  7366  0E26  0020               	movlb	0	; select bank0
  7367  0E27  00B6               	movwf	??_Save_Write_time
  7368  0E28  01B7               	clrf	??_Save_Write_time+1
  7369  0E29  0836               	movf	??_Save_Write_time,w
  7370  0E2A  00A6               	movwf	Save_Write_word@data
  7371  0E2B  0837               	movf	??_Save_Write_time+1,w
  7372  0E2C  00A7               	movwf	Save_Write_word@data+1
  7373  0E2D  318A  229E  318E   	fcall	_Save_Write_word
  7374                           
  7375                           ;save.c: 261: Save_Write_word( rtc_tm.month);
  7376  0E30  0022               	movlb	2	; select bank2
  7377  0E31  0867               	movf	(_rtc_tm^(0+256)+5),w
  7378  0E32  0020               	movlb	0	; select bank0
  7379  0E33  00B6               	movwf	??_Save_Write_time
  7380  0E34  01B7               	clrf	??_Save_Write_time+1
  7381  0E35  0836               	movf	??_Save_Write_time,w
  7382  0E36  00A6               	movwf	Save_Write_word@data
  7383  0E37  0837               	movf	??_Save_Write_time+1,w
  7384  0E38  00A7               	movwf	Save_Write_word@data+1
  7385  0E39  318A  229E  318E   	fcall	_Save_Write_word
  7386                           
  7387                           ;save.c: 262: Save_Write_word( rtc_tm.date);
  7388  0E3C  0022               	movlb	2	; select bank2
  7389  0E3D  0866               	movf	(_rtc_tm^(0+256)+4),w
  7390  0E3E  0020               	movlb	0	; select bank0
  7391  0E3F  00B6               	movwf	??_Save_Write_time
  7392  0E40  01B7               	clrf	??_Save_Write_time+1
  7393  0E41  0836               	movf	??_Save_Write_time,w
  7394  0E42  00A6               	movwf	Save_Write_word@data
  7395  0E43  0837               	movf	??_Save_Write_time+1,w
  7396  0E44  00A7               	movwf	Save_Write_word@data+1
  7397  0E45  318A  229E  318E   	fcall	_Save_Write_word
  7398                           
  7399                           ;save.c: 263: Save_Write_word( rtc_tm.hours);
  7400  0E48  0022               	movlb	2	; select bank2
  7401  0E49  0864               	movf	(_rtc_tm^(0+256)+2),w
  7402  0E4A  0020               	movlb	0	; select bank0
  7403  0E4B  00B6               	movwf	??_Save_Write_time
  7404  0E4C  01B7               	clrf	??_Save_Write_time+1
  7405  0E4D  0836               	movf	??_Save_Write_time,w
  7406  0E4E  00A6               	movwf	Save_Write_word@data
  7407  0E4F  0837               	movf	??_Save_Write_time+1,w
  7408  0E50  00A7               	movwf	Save_Write_word@data+1
  7409  0E51  318A  229E  318E   	fcall	_Save_Write_word
  7410                           
  7411                           ;save.c: 264: Save_Write_word( rtc_tm.minutes);
  7412  0E54  0022               	movlb	2	; select bank2
  7413  0E55  0863               	movf	(_rtc_tm^(0+256)+1),w
  7414  0E56  0020               	movlb	0	; select bank0
  7415  0E57  00B6               	movwf	??_Save_Write_time
  7416  0E58  01B7               	clrf	??_Save_Write_time+1
  7417  0E59  0836               	movf	??_Save_Write_time,w
  7418  0E5A  00A6               	movwf	Save_Write_word@data
  7419  0E5B  0837               	movf	??_Save_Write_time+1,w
  7420  0E5C  00A7               	movwf	Save_Write_word@data+1
  7421  0E5D  318A  229E  318E   	fcall	_Save_Write_word
  7422                           
  7423                           ;save.c: 265: Save_Write_word( rtc_tm.seconds);
  7424  0E60  0022               	movlb	2	; select bank2
  7425  0E61  0862               	movf	_rtc_tm^(0+256),w
  7426  0E62  0020               	movlb	0	; select bank0
  7427  0E63  00B6               	movwf	??_Save_Write_time
  7428  0E64  01B7               	clrf	??_Save_Write_time+1
  7429  0E65  0836               	movf	??_Save_Write_time,w
  7430  0E66  00A6               	movwf	Save_Write_word@data
  7431  0E67  0837               	movf	??_Save_Write_time+1,w
  7432  0E68  00A7               	movwf	Save_Write_word@data+1
  7433  0E69  318A  229E  318E   	fcall	_Save_Write_word
  7434                           
  7435                           ;save.c: 266: Save_Write_word( rtc_tm.wday);
  7436  0E6C  0022               	movlb	2	; select bank2
  7437  0E6D  0865               	movf	(_rtc_tm^(0+256)+3),w
  7438  0E6E  0020               	movlb	0	; select bank0
  7439  0E6F  00B6               	movwf	??_Save_Write_time
  7440  0E70  01B7               	clrf	??_Save_Write_time+1
  7441  0E71  0836               	movf	??_Save_Write_time,w
  7442  0E72  00A6               	movwf	Save_Write_word@data
  7443  0E73  0837               	movf	??_Save_Write_time+1,w
  7444  0E74  00A7               	movwf	Save_Write_word@data+1
  7445  0E75  318A  229E         	fcall	_Save_Write_word
  7446  0E77  0008               	return
  7447  0E78                     __end_of_Save_Write_time:	
  7448                           
  7449                           	psect	text23
  7450  0A9E                     __ptext23:	
  7451 ;; *************** function _Save_Write_word *****************
  7452 ;; Defined at:
  7453 ;;		line 224 in file "mcc_generated_files/save.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  data            2    6[BANK0 ] unsigned int 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      void 
  7460 ;; Registers used:
  7461 ;;		wreg, status,2, status,0, pclath, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7467 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;Total ram usage:        4 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    4
  7474 ;; This function calls:
  7475 ;;		_FLASH_EraseBlock
  7476 ;;		_FLASH_WriteWord
  7477 ;; This function is called by:
  7478 ;;		_tc_temperature_trans
  7479 ;;		_Save_process
  7480 ;;		_Save_Write_time
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           
  7485                           ;psect for function _Save_Write_word
  7486  0A9E                     _Save_Write_word:	
  7487                           
  7488                           ;save.c: 226: if(Cur_Save_Index % 32 == 0)
  7489                           
  7490                           ;incstack = 0
  7491                           ; Regs used in _Save_Write_word: [wreg+status,2+status,0+pclath+cstack]
  7492  0A9E  301F               	movlw	31
  7493  0A9F  0020               	movlb	0	; select bank0
  7494  0AA0  0564               	andwf	_Cur_Save_Index,w
  7495  0AA1  00A8               	movwf	??_Save_Write_word
  7496  0AA2  3000               	movlw	0
  7497  0AA3  0565               	andwf	_Cur_Save_Index+1,w
  7498  0AA4  00A9               	movwf	??_Save_Write_word+1
  7499  0AA5  0828               	movf	??_Save_Write_word,w
  7500  0AA6  0429               	iorwf	??_Save_Write_word+1,w
  7501  0AA7  1D03               	btfss	3,2
  7502  0AA8  2ABE               	goto	l5360
  7503                           
  7504                           ;save.c: 227: {
  7505                           ;save.c: 228: if(Cur_Save_Index == 16384 - 32)
  7506  0AA9  30E0               	movlw	224
  7507  0AAA  0664               	xorwf	_Cur_Save_Index,w
  7508  0AAB  303F               	movlw	63
  7509  0AAC  1903               	skipnz
  7510  0AAD  0665               	xorwf	_Cur_Save_Index+1,w
  7511  0AAE  1D03               	btfss	3,2
  7512  0AAF  2AB4               	goto	l5358
  7513                           
  7514                           ;save.c: 229: {
  7515                           ;save.c: 230: FLASH_EraseBlock(0x2000);
  7516  0AB0  3000               	movlw	0
  7517  0AB1  00A1               	movwf	FLASH_EraseBlock@startAddr
  7518  0AB2  3020               	movlw	32
  7519  0AB3  2ABA               	goto	L8
  7520  0AB4                     l5358:	
  7521                           ;save.c: 231: }
  7522                           
  7523                           
  7524                           ;save.c: 232: else
  7525                           ;save.c: 233: {
  7526                           ;save.c: 234: FLASH_EraseBlock(Cur_Save_Index+32);
  7527  0AB4  0020               	movlb	0	; select bank0
  7528  0AB5  0864               	movf	_Cur_Save_Index,w
  7529  0AB6  3E20               	addlw	32
  7530  0AB7  00A1               	movwf	FLASH_EraseBlock@startAddr
  7531  0AB8  3000               	movlw	0
  7532  0AB9  3D65               	addwfc	_Cur_Save_Index+1,w
  7533  0ABA                     L8:	
  7534  0ABA  00A2               	movwf	FLASH_EraseBlock@startAddr+1
  7535  0ABB  3196  2612  318A   	fcall	_FLASH_EraseBlock
  7536  0ABE                     l5360:	
  7537                           
  7538                           ;save.c: 235: }
  7539                           ;save.c: 236: }
  7540                           ;save.c: 237: if( (data & 0x3fff) == 0x3fff)
  7541  0ABE  30FF               	movlw	255
  7542  0ABF  0020               	movlb	0	; select bank0
  7543  0AC0  0526               	andwf	Save_Write_word@data,w
  7544  0AC1  00A8               	movwf	??_Save_Write_word
  7545  0AC2  303F               	movlw	63
  7546  0AC3  0527               	andwf	Save_Write_word@data+1,w
  7547  0AC4  00A9               	movwf	??_Save_Write_word+1
  7548  0AC5  0A28               	incf	??_Save_Write_word,w
  7549  0AC6  303F               	movlw	63
  7550  0AC7  1903               	skipnz
  7551  0AC8  0629               	xorwf	??_Save_Write_word+1,w
  7552  0AC9  1D03               	btfss	3,2
  7553  0ACA  2AD4               	goto	l5364
  7554                           
  7555                           ;save.c: 238: FLASH_WriteWord(Cur_Save_Index, 0x3ffe);
  7556  0ACB  0865               	movf	_Cur_Save_Index+1,w
  7557  0ACC  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7558  0ACD  0864               	movf	_Cur_Save_Index,w
  7559  0ACE  00A1               	movwf	FLASH_WriteWord@flashAddr
  7560  0ACF  30FE               	movlw	254
  7561  0AD0  00A3               	movwf	FLASH_WriteWord@word
  7562  0AD1  303F               	movlw	63
  7563  0AD2  00A4               	movwf	FLASH_WriteWord@word+1
  7564  0AD3  2ADD               	goto	L9
  7565  0AD4                     l5364:	
  7566                           
  7567                           ;save.c: 239: else
  7568                           ;save.c: 240: FLASH_WriteWord(Cur_Save_Index, data);
  7569  0AD4  0020               	movlb	0	; select bank0
  7570  0AD5  0865               	movf	_Cur_Save_Index+1,w
  7571  0AD6  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7572  0AD7  0864               	movf	_Cur_Save_Index,w
  7573  0AD8  00A1               	movwf	FLASH_WriteWord@flashAddr
  7574  0AD9  0827               	movf	Save_Write_word@data+1,w
  7575  0ADA  00A4               	movwf	FLASH_WriteWord@word+1
  7576  0ADB  0826               	movf	Save_Write_word@data,w
  7577  0ADC  00A3               	movwf	FLASH_WriteWord@word
  7578  0ADD                     L9:	
  7579  0ADD  3197  271E  318A   	fcall	_FLASH_WriteWord
  7580                           
  7581                           ;save.c: 241: Cur_Save_Index++;
  7582  0AE0  3001               	movlw	1
  7583  0AE1  0020               	movlb	0	; select bank0
  7584  0AE2  07E4               	addwf	_Cur_Save_Index,f
  7585  0AE3  3000               	movlw	0
  7586  0AE4  3DE5               	addwfc	_Cur_Save_Index+1,f
  7587                           
  7588                           ;save.c: 242: if( Cur_Save_Index == 16384)
  7589  0AE5  3040               	movlw	64
  7590  0AE6  0665               	xorwf	_Cur_Save_Index+1,w
  7591  0AE7  0464               	iorwf	_Cur_Save_Index,w
  7592  0AE8  1D03               	btfss	3,2
  7593  0AE9  0008               	return
  7594                           
  7595                           ;save.c: 243: {
  7596                           ;save.c: 244: Cur_Save_Index = 0x2000;
  7597  0AEA  3000               	movlw	0
  7598  0AEB  00E4               	movwf	_Cur_Save_Index
  7599  0AEC  3020               	movlw	32
  7600  0AED  00E5               	movwf	_Cur_Save_Index+1
  7601  0AEE  0008               	return
  7602  0AEF                     __end_of_Save_Write_word:	
  7603                           
  7604                           	psect	text24
  7605  1612                     __ptext24:	
  7606 ;; *************** function _FLASH_EraseBlock *****************
  7607 ;; Defined at:
  7608 ;;		line 178 in file "mcc_generated_files/memory.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;  startAddr       2    1[BANK0 ] unsigned int 
  7611 ;; Auto vars:     Size  Location     Type
  7612 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  1    wreg      void 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7622 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;Total ram usage:        3 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; Hardware stack levels required when called:    3
  7629 ;; This function calls:
  7630 ;;		Nothing
  7631 ;; This function is called by:
  7632 ;;		_Save_Write_word
  7633 ;;		_FLASH_WriteBlock
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           
  7638                           ;psect for function _FLASH_EraseBlock
  7639  1612                     _FLASH_EraseBlock:	
  7640                           
  7641                           ;memory.c: 179: uint8_t GIEBitValue = INTCONbits.GIE;
  7642                           
  7643                           ;incstack = 0
  7644                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  7645  1612  3000               	movlw	0
  7646  1613  1B8B               	btfsc	11,7	;volatile
  7647  1614  3001               	movlw	1
  7648  1615  0020               	movlb	0	; select bank0
  7649  1616  00A3               	movwf	FLASH_EraseBlock@GIEBitValue
  7650                           
  7651                           ;memory.c: 182: INTCONbits.GIE = 0;
  7652  1617  138B               	bcf	11,7	;volatile
  7653                           
  7654                           ;memory.c: 184: PMADRL = (startAddr & 0xFF);
  7655  1618  0821               	movf	FLASH_EraseBlock@startAddr,w
  7656  1619  0023               	movlb	3	; select bank3
  7657  161A  0091               	movwf	17	;volatile
  7658                           
  7659                           ;memory.c: 186: PMADRH = ((startAddr & 0xFF00) >> 8);
  7660  161B  0020               	movlb	0	; select bank0
  7661  161C  0822               	movf	FLASH_EraseBlock@startAddr+1,w
  7662  161D  0023               	movlb	3	; select bank3
  7663  161E  0092               	movwf	18	;volatile
  7664                           
  7665                           ;memory.c: 189: PMCON1bits.CFGS = 0;
  7666  161F  1315               	bcf	21,6	;volatile
  7667                           
  7668                           ;memory.c: 190: PMCON1bits.FREE = 1;
  7669  1620  1615               	bsf	21,4	;volatile
  7670                           
  7671                           ;memory.c: 191: PMCON1bits.WREN = 1;
  7672  1621  1515               	bsf	21,2	;volatile
  7673                           
  7674                           ;memory.c: 194: PMCON2 = 0x55;
  7675  1622  3055               	movlw	85
  7676  1623  0096               	movwf	22	;volsfr
  7677                           
  7678                           ;memory.c: 195: PMCON2 = 0xAA;
  7679  1624  30AA               	movlw	170
  7680  1625  0096               	movwf	22	;volsfr
  7681                           
  7682                           ;memory.c: 196: PMCON1bits.WR = 1;
  7683  1626  1495               	bsf	21,1	;volatile
  7684                           
  7685                           ;memory.c: 197: __nop();
  7686  1627  0000               	nop
  7687                           
  7688                           ;memory.c: 198: __nop();
  7689  1628  0000               	nop
  7690                           
  7691                           ;memory.c: 200: PMCON1bits.WREN = 0;
  7692  1629  0023               	movlb	3	; select bank3
  7693  162A  1115               	bcf	21,2	;volatile
  7694                           
  7695                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  7696  162B  0020               	movlb	0	; select bank0
  7697  162C  0C23               	rrf	FLASH_EraseBlock@GIEBitValue,w
  7698  162D  1C03               	skipc
  7699  162E  138B               	bcf	11,7	;volatile
  7700  162F  1803               	skipnc
  7701  1630  178B               	bsf	11,7	;volatile
  7702  1631  0008               	return
  7703  1632                     __end_of_FLASH_EraseBlock:	
  7704                           
  7705                           	psect	text25
  7706  1422                     __ptext25:	
  7707 ;; *************** function _maxim_clear_fault_status *****************
  7708 ;; Defined at:
  7709 ;;		line 155 in file "mcc_generated_files/max31856.c"
  7710 ;; Parameters:    Size  Location     Type
  7711 ;;		None
  7712 ;; Auto vars:     Size  Location     Type
  7713 ;;		None
  7714 ;; Return value:  Size  Location     Type
  7715 ;;                  1    wreg      void 
  7716 ;; Registers used:
  7717 ;;		wreg, status,2, status,0, pclath, cstack
  7718 ;; Tracked objects:
  7719 ;;		On entry : 0/0
  7720 ;;		On exit  : 0/0
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7727 ;;Total ram usage:        1 bytes
  7728 ;; Hardware stack levels used:    1
  7729 ;; Hardware stack levels required when called:    5
  7730 ;; This function calls:
  7731 ;;		_maxim_31856_read_register
  7732 ;;		_maxim_31856_write_register
  7733 ;; This function is called by:
  7734 ;;		_temperature_display
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           
  7739                           ;psect for function _maxim_clear_fault_status
  7740  1422                     _maxim_clear_fault_status:	
  7741                           
  7742                           ;max31856.c: 157: uch_cr0= maxim_31856_read_register(0x00);
  7743                           
  7744                           ;incstack = 0
  7745                           ; Regs used in _maxim_clear_fault_status: [wreg+status,2+status,0+pclath+cstack]
  7746  1422  3000               	movlw	0
  7747  1423  3194  245A  3194   	fcall	_maxim_31856_read_register
  7748  1426  0020               	movlb	0	; select bank0
  7749  1427  00A5               	movwf	??_maxim_clear_fault_status
  7750  1428  0825               	movf	??_maxim_clear_fault_status,w
  7751  1429  00EA               	movwf	_uch_cr0
  7752                           
  7753                           ;max31856.c: 158: uch_cr0|= (uint8_t) 0x02 ;
  7754  142A  14EA               	bsf	_uch_cr0,1
  7755                           
  7756                           ;max31856.c: 159: maxim_31856_write_register(0x80, uch_cr0);
  7757  142B  086A               	movf	_uch_cr0,w
  7758  142C  00A5               	movwf	??_maxim_clear_fault_status
  7759  142D  0825               	movf	??_maxim_clear_fault_status,w
  7760  142E  00A2               	movwf	maxim_31856_write_register@uch_register_value
  7761  142F  3080               	movlw	128
  7762  1430  3193  23F1         	fcall	_maxim_31856_write_register
  7763  1432  0008               	return
  7764  1433                     __end_of_maxim_clear_fault_status:	
  7765                           
  7766                           	psect	text26
  7767  1749                     __ptext26:	
  7768 ;; *************** function _err_Display *****************
  7769 ;; Defined at:
  7770 ;;		line 153 in file "mcc_generated_files/ht1621.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;		None
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  num             4   12[BANK0 ] unsigned char [4]
  7775 ;; Return value:  Size  Location     Type
  7776 ;;                  1    wreg      void 
  7777 ;; Registers used:
  7778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7779 ;; Tracked objects:
  7780 ;;		On entry : 0/0
  7781 ;;		On exit  : 0/0
  7782 ;;		Unchanged: 0/0
  7783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;Total ram usage:        5 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    5
  7791 ;; This function calls:
  7792 ;;		_WriteAll_1621
  7793 ;; This function is called by:
  7794 ;;		_temperature_display
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           
  7799                           ;psect for function _err_Display
  7800  1749                     _err_Display:	
  7801                           
  7802                           ;ht1621.c: 155: unsigned char num[4]={0};
  7803                           
  7804                           ;incstack = 0
  7805                           ; Regs used in _err_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7806  1749  0022               	movlb	2	; select bank2
  7807  174A  082B               	movf	(err_Display@F2140+3)^(0+256),w
  7808  174B  0020               	movlb	0	; select bank0
  7809  174C  00AF               	movwf	err_Display@num+3
  7810  174D  0022               	movlb	2	; select bank2
  7811  174E  082A               	movf	(err_Display@F2140+2)^(0+256),w
  7812  174F  0020               	movlb	0	; select bank0
  7813  1750  00AE               	movwf	err_Display@num+2
  7814  1751  0022               	movlb	2	; select bank2
  7815  1752  0829               	movf	(err_Display@F2140+1)^(0+256),w
  7816  1753  0020               	movlb	0	; select bank0
  7817  1754  00AD               	movwf	err_Display@num+1
  7818  1755  0022               	movlb	2	; select bank2
  7819  1756  0828               	movf	err_Display@F2140^(0+256),w
  7820  1757  0020               	movlb	0	; select bank0
  7821  1758  00AC               	movwf	err_Display@num
  7822                           
  7823                           ;ht1621.c: 156: num[1] = Dis_TAB[0x10];
  7824  1759  3010               	movlw	low ((_Dis_TAB+16)| (0+32768))
  7825  175A  0084               	movwf	4
  7826  175B  3098               	movlw	high ((_Dis_TAB+16)| (0+32768))
  7827  175C  0085               	movwf	5
  7828  175D  0800               	movf	0,w	;code access
  7829  175E  00AB               	movwf	??_err_Display
  7830  175F  082B               	movf	??_err_Display,w
  7831  1760  00AD               	movwf	err_Display@num+1
  7832                           
  7833                           ;ht1621.c: 157: num[2] = Dis_TAB[0x0c];
  7834  1761  300C               	movlw	low ((_Dis_TAB+12)| (0+32768))
  7835  1762  0084               	movwf	4
  7836  1763  3098               	movlw	high ((_Dis_TAB+12)| (0+32768))
  7837  1764  0085               	movwf	5
  7838  1765  0800               	movf	0,w	;code access
  7839  1766  00AB               	movwf	??_err_Display
  7840  1767  082B               	movf	??_err_Display,w
  7841  1768  00AE               	movwf	err_Display@num+2
  7842                           
  7843                           ;ht1621.c: 158: WriteAll_1621(0, num, 4);
  7844  1769  302C               	movlw	low err_Display@num
  7845  176A  00A5               	movwf	WriteAll_1621@p
  7846  176B  3000               	movlw	high err_Display@num
  7847  176C  00A6               	movwf	WriteAll_1621@p+1
  7848  176D  3004               	movlw	4
  7849  176E  00AB               	movwf	??_err_Display
  7850  176F  082B               	movf	??_err_Display,w
  7851  1770  00A7               	movwf	WriteAll_1621@cnt
  7852  1771  3000               	movlw	0
  7853  1772  3188  206B         	fcall	_WriteAll_1621
  7854  1774  0008               	return
  7855  1775                     __end_of_err_Display:	
  7856                           
  7857                           	psect	text27
  7858  05D9                     __ptext27:	
  7859 ;; *************** function _Tc_Display *****************
  7860 ;; Defined at:
  7861 ;;		line 110 in file "mcc_generated_files/ht1621.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;		None
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  data            2   17[BANK0 ] unsigned int 
  7866 ;;  count           1   16[BANK0 ] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      void 
  7869 ;; Registers used:
  7870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;Total ram usage:        4 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    5
  7883 ;; This function calls:
  7884 ;;		_WriteAll_1621
  7885 ;;		___lwdiv
  7886 ;;		___lwmod
  7887 ;;		_memset
  7888 ;; This function is called by:
  7889 ;;		_temperature_display
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           
  7894                           ;psect for function _Tc_Display
  7895  05D9                     _Tc_Display:	
  7896                           
  7897                           ;ht1621.c: 112: unsigned char count = 0;
  7898                           
  7899                           ;incstack = 0
  7900                           ; Regs used in _Tc_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7901  05D9  0020               	movlb	0	; select bank0
  7902  05DA  01B0               	clrf	Tc_Display@count
  7903                           
  7904                           ;ht1621.c: 113: unsigned int data = temperature_int;
  7905  05DB  0022               	movlb	2	; select bank2
  7906  05DC  0833               	movf	(_temperature_int+1)^(0+256),w
  7907  05DD  0020               	movlb	0	; select bank0
  7908  05DE  00B2               	movwf	Tc_Display@data+1
  7909  05DF  0022               	movlb	2	; select bank2
  7910  05E0  0832               	movf	_temperature_int^(0+256),w
  7911  05E1  0020               	movlb	0	; select bank0
  7912  05E2  00B1               	movwf	Tc_Display@data
  7913                           
  7914                           ;ht1621.c: 114: memset(display_buff,0,4);
  7915  05E3  3000               	movlw	0
  7916  05E4  00A1               	movwf	memset@c
  7917  05E5  00A2               	movwf	memset@c+1
  7918  05E6  3004               	movlw	4
  7919  05E7  00A3               	movwf	memset@n
  7920  05E8  3000               	movlw	0
  7921  05E9  00A4               	movwf	memset@n+1
  7922  05EA  3069               	movlw	(low (_display_buff| (0+256)))& (0+255)
  7923  05EB  3194  24E9  3185   	fcall	_memset
  7924  05EE                     l5900:	
  7925                           ;ht1621.c: 115: while(data)
  7926                           
  7927  05EE  0020               	movlb	0	; select bank0
  7928  05EF  0831               	movf	Tc_Display@data,w
  7929  05F0  0432               	iorwf	Tc_Display@data+1,w
  7930  05F1  1903               	btfsc	3,2
  7931  05F2  2E76               	goto	l5908
  7932                           
  7933                           ;ht1621.c: 116: {
  7934                           ;ht1621.c: 117: count++;
  7935  05F3  3001               	movlw	1
  7936  05F4  0020               	movlb	0	; select bank0
  7937  05F5  00AF               	movwf	??_Tc_Display
  7938  05F6  082F               	movf	??_Tc_Display,w
  7939  05F7  07B0               	addwf	Tc_Display@count,f
  7940                           
  7941                           ;ht1621.c: 118: data /=10;
  7942  05F8  300A               	movlw	10
  7943  05F9  00A7               	movwf	___lwdiv@divisor
  7944  05FA  3000               	movlw	0
  7945  05FB  00A8               	movwf	___lwdiv@divisor+1
  7946  05FC  0832               	movf	Tc_Display@data+1,w
  7947  05FD  00AA               	movwf	___lwdiv@dividend+1
  7948  05FE  0831               	movf	Tc_Display@data,w
  7949  05FF  00A9               	movwf	___lwdiv@dividend
  7950  0600  3188  20A0  3185   	fcall	___lwdiv
  7951  0603  0020               	movlb	0	; select bank0
  7952  0604  0828               	movf	?___lwdiv+1,w
  7953  0605  00B2               	movwf	Tc_Display@data+1
  7954  0606  0827               	movf	?___lwdiv,w
  7955  0607  00B1               	movwf	Tc_Display@data
  7956  0608  2DEE               	goto	l5900
  7957  0609                     l5902:	
  7958                           ;ht1621.c: 121: {
  7959                           ;ht1621.c: 122: case 3:display_buff[0] = Dis_TAB[temperature_int/100];
  7960                           
  7961                           ;ht1621.c: 119: }
  7962                           ;ht1621.c: 120: switch(count)
  7963                           
  7964  0609  3064               	movlw	100
  7965  060A  00A7               	movwf	___lwdiv@divisor
  7966  060B  3000               	movlw	0
  7967  060C  00A8               	movwf	___lwdiv@divisor+1
  7968  060D  0022               	movlb	2	; select bank2
  7969  060E  0833               	movf	(_temperature_int+1)^(0+256),w
  7970  060F  0020               	movlb	0	; select bank0
  7971  0610  00AA               	movwf	___lwdiv@dividend+1
  7972  0611  0022               	movlb	2	; select bank2
  7973  0612  0832               	movf	_temperature_int^(0+256),w
  7974  0613  0020               	movlb	0	; select bank0
  7975  0614  00A9               	movwf	___lwdiv@dividend
  7976  0615  3188  20A0  3185   	fcall	___lwdiv
  7977  0618  0020               	movlb	0	; select bank0
  7978  0619  0828               	movf	?___lwdiv+1,w
  7979  061A  0085               	movwf	5
  7980  061B  0827               	movf	?___lwdiv,w
  7981  061C  0084               	movwf	4
  7982  061D  3000               	movlw	low (_Dis_TAB| (0+32768))
  7983  061E  0784               	addwf	4,f
  7984  061F  3098               	movlw	high (_Dis_TAB| (0+32768))
  7985  0620  3D85               	addwfc	5,f
  7986  0621  0800               	movf	0,w	;code access
  7987  0622  00AF               	movwf	??_Tc_Display
  7988  0623  082F               	movf	??_Tc_Display,w
  7989  0624  0022               	movlb	2	; select bank2
  7990  0625  00E9               	movwf	_display_buff^(0+256)
  7991  0626                     l782:	
  7992                           ;ht1621.c: 123: case 2:display_buff[1] = Dis_TAB[temperature_int%100/10];
  7993                           
  7994  0626  300A               	movlw	10
  7995  0627  0020               	movlb	0	; select bank0
  7996  0628  00A7               	movwf	___lwdiv@divisor
  7997  0629  3000               	movlw	0
  7998  062A  00A8               	movwf	___lwdiv@divisor+1
  7999  062B  0022               	movlb	2	; select bank2
  8000  062C  0833               	movf	(_temperature_int+1)^(0+256),w
  8001  062D  0020               	movlb	0	; select bank0
  8002  062E  00A4               	movwf	___lwmod@dividend+1
  8003  062F  0022               	movlb	2	; select bank2
  8004  0630  0832               	movf	_temperature_int^(0+256),w
  8005  0631  0020               	movlb	0	; select bank0
  8006  0632  00A3               	movwf	___lwmod@dividend
  8007  0633  3064               	movlw	100
  8008  0634  00A1               	movwf	___lwmod@divisor
  8009  0635  3000               	movlw	0
  8010  0636  00A2               	movwf	___lwmod@divisor+1
  8011  0637  3197  2775  3185   	fcall	___lwmod
  8012  063A  0020               	movlb	0	; select bank0
  8013  063B  0822               	movf	?___lwmod+1,w
  8014  063C  00AA               	movwf	___lwdiv@dividend+1
  8015  063D  0821               	movf	?___lwmod,w
  8016  063E  00A9               	movwf	___lwdiv@dividend
  8017  063F  3188  20A0  3185   	fcall	___lwdiv
  8018  0642  0020               	movlb	0	; select bank0
  8019  0643  0828               	movf	?___lwdiv+1,w
  8020  0644  0085               	movwf	5
  8021  0645  0827               	movf	?___lwdiv,w
  8022  0646  0084               	movwf	4
  8023  0647  3000               	movlw	low (_Dis_TAB| (0+32768))
  8024  0648  0784               	addwf	4,f
  8025  0649  3098               	movlw	high (_Dis_TAB| (0+32768))
  8026  064A  3D85               	addwfc	5,f
  8027  064B  0800               	movf	0,w	;code access
  8028  064C  00AF               	movwf	??_Tc_Display
  8029  064D  082F               	movf	??_Tc_Display,w
  8030  064E  0022               	movlb	2	; select bank2
  8031  064F  00EA               	movwf	(_display_buff^(0+256)+1)
  8032  0650                     l783:	
  8033                           ;ht1621.c: 124: case 1:display_buff[2] = Dis_TAB[temperature_int%10]; break;
  8034                           
  8035  0650  300A               	movlw	10
  8036  0651  0020               	movlb	0	; select bank0
  8037  0652  00A1               	movwf	___lwmod@divisor
  8038  0653  3000               	movlw	0
  8039  0654  00A2               	movwf	___lwmod@divisor+1
  8040  0655  0022               	movlb	2	; select bank2
  8041  0656  0833               	movf	(_temperature_int+1)^(0+256),w
  8042  0657  0020               	movlb	0	; select bank0
  8043  0658  00A4               	movwf	___lwmod@dividend+1
  8044  0659  0022               	movlb	2	; select bank2
  8045  065A  0832               	movf	_temperature_int^(0+256),w
  8046  065B  0020               	movlb	0	; select bank0
  8047  065C  00A3               	movwf	___lwmod@dividend
  8048  065D  3197  2775  3185   	fcall	___lwmod
  8049  0660  0020               	movlb	0	; select bank0
  8050  0661  0822               	movf	?___lwmod+1,w
  8051  0662  0085               	movwf	5
  8052  0663  0821               	movf	?___lwmod,w
  8053  0664  0084               	movwf	4
  8054  0665  3000               	movlw	low (_Dis_TAB| (0+32768))
  8055  0666  0784               	addwf	4,f
  8056  0667  3098               	movlw	high (_Dis_TAB| (0+32768))
  8057  0668  3D85               	addwfc	5,f
  8058  0669  0800               	movf	0,w	;code access
  8059  066A  2E71               	goto	L10
  8060  066B                     l5904:	
  8061                           ;ht1621.c: 125: case 0:display_buff[2] = Dis_TAB[0];
  8062                           
  8063  066B  3000               	movlw	low (_Dis_TAB| (0+32768))
  8064  066C  0084               	movwf	4
  8065  066D  3098               	movlw	high (_Dis_TAB| (0+32768))
  8066  066E  0085               	movwf	5
  8067  066F  0800               	movf	0,w	;code access
  8068  0670  0020               	movlb	0	; select bank0
  8069  0671                     L10:	
  8070  0671  00AF               	movwf	??_Tc_Display
  8071  0672  082F               	movf	??_Tc_Display,w
  8072  0673  0022               	movlb	2	; select bank2
  8073  0674  00EB               	movwf	(_display_buff^(0+256)+2)
  8074                           
  8075                           ;ht1621.c: 127: }
  8076                           
  8077                           ;ht1621.c: 126: default:break;
  8078  0675  2E85               	goto	l5910
  8079  0676                     l5908:	
  8080  0676  0020               	movlb	0	; select bank0
  8081  0677  0830               	movf	Tc_Display@count,w
  8082                           
  8083                           ; Switch size 1, requested type "space"
  8084                           ; Number of cases is 4, Range of values is 0 to 3
  8085                           ; switch strategies available:
  8086                           ; Name         Instructions Cycles
  8087                           ; simple_byte           13     7 (average)
  8088                           ; direct_byte           14     6 (fixed)
  8089                           ; jumptable            260     6 (fixed)
  8090                           ;	Chosen strategy is simple_byte
  8091  0678  3A00               	xorlw	0	; case 0
  8092  0679  1903               	skipnz
  8093  067A  2E6B               	goto	l5904
  8094  067B  3A01               	xorlw	1	; case 1
  8095  067C  1903               	skipnz
  8096  067D  2E50               	goto	l783
  8097  067E  3A03               	xorlw	3	; case 2
  8098  067F  1903               	skipnz
  8099  0680  2E26               	goto	l782
  8100  0681  3A01               	xorlw	1	; case 3
  8101  0682  1903               	skipnz
  8102  0683  2E09               	goto	l5902
  8103  0684  2E85               	goto	l5910
  8104  0685                     l5910:	
  8105                           
  8106                           ;ht1621.c: 128: if(temperature_sign == 1) display_buff[0]=0x20;
  8107  0685  0022               	movlb	2	; select bank2
  8108  0686  0342               	decf	_temperature_sign^(0+256),w
  8109  0687  1D03               	btfss	3,2
  8110  0688  2E8F               	goto	l5914
  8111  0689  3020               	movlw	32
  8112  068A  0020               	movlb	0	; select bank0
  8113  068B  00AF               	movwf	??_Tc_Display
  8114  068C  082F               	movf	??_Tc_Display,w
  8115  068D  0022               	movlb	2	; select bank2
  8116  068E  00E9               	movwf	_display_buff^(0+256)
  8117  068F                     l5914:	
  8118                           
  8119                           ;ht1621.c: 129: display_buff[3] = Dis_TAB[temperature_decimal] | 0x08;
  8120  068F  0020               	movlb	0	; select bank0
  8121  0690  0868               	movf	_temperature_decimal,w
  8122  0691  3E00               	addlw	low (_Dis_TAB| (0+32768))
  8123  0692  0084               	movwf	4
  8124  0693  3098               	movlw	high (_Dis_TAB| (0+32768))
  8125  0694  1803               	skipnc
  8126  0695  3E01               	addlw	1
  8127  0696  0085               	movwf	5
  8128  0697  0800               	movf	0,w	;code access
  8129  0698  3808               	iorlw	8
  8130  0699  00AF               	movwf	??_Tc_Display
  8131  069A  082F               	movf	??_Tc_Display,w
  8132  069B  0022               	movlb	2	; select bank2
  8133  069C  00EC               	movwf	(_display_buff^(0+256)+3)
  8134                           
  8135                           ;ht1621.c: 130: WriteAll_1621(0,display_buff,4);
  8136  069D  3069               	movlw	low _display_buff
  8137  069E  0020               	movlb	0	; select bank0
  8138  069F  00A5               	movwf	WriteAll_1621@p
  8139  06A0  3001               	movlw	high _display_buff
  8140  06A1  00A6               	movwf	WriteAll_1621@p+1
  8141  06A2  3004               	movlw	4
  8142  06A3  00AF               	movwf	??_Tc_Display
  8143  06A4  082F               	movf	??_Tc_Display,w
  8144  06A5  00A7               	movwf	WriteAll_1621@cnt
  8145  06A6  3000               	movlw	0
  8146  06A7  3188  206B         	fcall	_WriteAll_1621
  8147  06A9  0008               	return
  8148  06AA                     __end_of_Tc_Display:	
  8149                           
  8150                           	psect	text28
  8151  14E9                     __ptext28:	
  8152 ;; *************** function _memset *****************
  8153 ;; Defined at:
  8154 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8155 ;; Parameters:    Size  Location     Type
  8156 ;;  p1              1    wreg     PTR void 
  8157 ;;		 -> display_buff(4), 
  8158 ;;  c               2    1[BANK0 ] int 
  8159 ;;  n               2    3[BANK0 ] unsigned int 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;  p1              1    6[BANK0 ] PTR void 
  8162 ;;		 -> display_buff(4), 
  8163 ;;  p               1    7[BANK0 ] PTR unsigned char 
  8164 ;;		 -> display_buff(4), 
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      PTR void 
  8167 ;; Registers used:
  8168 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8174 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;Total ram usage:        7 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    3
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		_Tc_Display
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _memset
  8190  14E9                     _memset:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8194                           ;memset@p1 stored from wreg
  8195  14E9  0020               	movlb	0	; select bank0
  8196  14EA  00A6               	movwf	memset@p1
  8197  14EB  0826               	movf	memset@p1,w
  8198  14EC  00A5               	movwf	??_memset
  8199  14ED  0825               	movf	??_memset,w
  8200  14EE  00A7               	movwf	memset@p
  8201  14EF                     l5568:	
  8202  14EF  3001               	movlw	1
  8203  14F0  02A3               	subwf	memset@n,f
  8204  14F1  3000               	movlw	0
  8205  14F2  3BA4               	subwfb	memset@n+1,f
  8206  14F3  0A23               	incf	memset@n,w
  8207  14F4  1903               	btfsc	3,2
  8208  14F5  0A24               	incf	memset@n+1,w
  8209  14F6  1903               	btfsc	3,2
  8210  14F7  0008               	return
  8211  14F8  0821               	movf	memset@c,w
  8212  14F9  00A5               	movwf	??_memset
  8213  14FA  0827               	movf	memset@p,w
  8214  14FB  0086               	movwf	6
  8215  14FC  3001               	movlw	1	; select bank2/3
  8216  14FD  0087               	movwf	7
  8217  14FE  0825               	movf	??_memset,w
  8218  14FF  0081               	movwf	1
  8219  1500  3001               	movlw	1
  8220  1501  00A5               	movwf	??_memset
  8221  1502  0825               	movf	??_memset,w
  8222  1503  07A7               	addwf	memset@p,f
  8223  1504  2CEF               	goto	l5568
  8224  1505                     __end_of_memset:	
  8225                           ;	Return value of _memset is never used
  8226                           
  8227                           
  8228                           	psect	text29
  8229  1775                     __ptext29:	
  8230 ;; *************** function ___lwmod *****************
  8231 ;; Defined at:
  8232 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  8233 ;; Parameters:    Size  Location     Type
  8234 ;;  divisor         2    1[BANK0 ] unsigned int 
  8235 ;;  dividend        2    3[BANK0 ] unsigned int 
  8236 ;; Auto vars:     Size  Location     Type
  8237 ;;  counter         1    6[BANK0 ] unsigned char 
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  2    1[BANK0 ] unsigned int 
  8240 ;; Registers used:
  8241 ;;		wreg, status,2, status,0
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8247 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;Total ram usage:        6 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    3
  8254 ;; This function calls:
  8255 ;;		Nothing
  8256 ;; This function is called by:
  8257 ;;		_Tc_Display
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           
  8262                           ;psect for function ___lwmod
  8263  1775                     ___lwmod:	
  8264                           
  8265                           ;incstack = 0
  8266                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8267  1775  0020               	movlb	0	; select bank0
  8268  1776  0821               	movf	___lwmod@divisor,w
  8269  1777  0422               	iorwf	___lwmod@divisor+1,w
  8270  1778  1903               	btfsc	3,2
  8271  1779  2F9D               	goto	l5696
  8272  177A  01A6               	clrf	___lwmod@counter
  8273  177B  0AA6               	incf	___lwmod@counter,f
  8274  177C                     l5686:	
  8275  177C  1BA2               	btfsc	___lwmod@divisor+1,7
  8276  177D  2F88               	goto	l5688
  8277  177E  3001               	movlw	1
  8278  177F                     u5015:	
  8279  177F  35A1               	lslf	___lwmod@divisor,f
  8280  1780  0DA2               	rlf	___lwmod@divisor+1,f
  8281  1781  0B89               	decfsz	9,f
  8282  1782  2F7F               	goto	u5015
  8283  1783  3001               	movlw	1
  8284  1784  00A5               	movwf	??___lwmod
  8285  1785  0825               	movf	??___lwmod,w
  8286  1786  07A6               	addwf	___lwmod@counter,f
  8287  1787  2F7C               	goto	l5686
  8288  1788                     l5688:	
  8289  1788  0822               	movf	___lwmod@divisor+1,w
  8290  1789  0224               	subwf	___lwmod@dividend+1,w
  8291  178A  1D03               	skipz
  8292  178B  2F8E               	goto	u5035
  8293  178C  0821               	movf	___lwmod@divisor,w
  8294  178D  0223               	subwf	___lwmod@dividend,w
  8295  178E                     u5035:	
  8296  178E  1C03               	skipc
  8297  178F  2F94               	goto	l5692
  8298  1790  0821               	movf	___lwmod@divisor,w
  8299  1791  02A3               	subwf	___lwmod@dividend,f
  8300  1792  0822               	movf	___lwmod@divisor+1,w
  8301  1793  3BA4               	subwfb	___lwmod@dividend+1,f
  8302  1794                     l5692:	
  8303  1794  3001               	movlw	1
  8304  1795                     u5045:	
  8305  1795  36A2               	lsrf	___lwmod@divisor+1,f
  8306  1796  0CA1               	rrf	___lwmod@divisor,f
  8307  1797  0B89               	decfsz	9,f
  8308  1798  2F95               	goto	u5045
  8309  1799  3001               	movlw	1
  8310  179A  02A6               	subwf	___lwmod@counter,f
  8311  179B  1D03               	btfss	3,2
  8312  179C  2F88               	goto	l5688
  8313  179D                     l5696:	
  8314  179D  0824               	movf	___lwmod@dividend+1,w
  8315  179E  00A2               	movwf	?___lwmod+1
  8316  179F  0823               	movf	___lwmod@dividend,w
  8317  17A0  00A1               	movwf	?___lwmod
  8318  17A1  0008               	return
  8319  17A2                     __end_of___lwmod:	
  8320                           
  8321                           	psect	text30
  8322  08A0                     __ptext30:	
  8323 ;; *************** function ___lwdiv *****************
  8324 ;; Defined at:
  8325 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  divisor         2    7[BANK0 ] unsigned int 
  8328 ;;  dividend        2    9[BANK0 ] unsigned int 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;  quotient        2   13[BANK0 ] unsigned int 
  8331 ;;  counter         1   12[BANK0 ] unsigned char 
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  2    7[BANK0 ] unsigned int 
  8334 ;; Registers used:
  8335 ;;		wreg, status,2, status,0
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8341 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;Total ram usage:        8 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    3
  8348 ;; This function calls:
  8349 ;;		Nothing
  8350 ;; This function is called by:
  8351 ;;		_Tc_Display
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function ___lwdiv
  8357  08A0                     ___lwdiv:	
  8358                           
  8359                           ;incstack = 0
  8360                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8361  08A0  0020               	movlb	0	; select bank0
  8362  08A1  01AD               	clrf	___lwdiv@quotient
  8363  08A2  01AE               	clrf	___lwdiv@quotient+1
  8364  08A3  0827               	movf	___lwdiv@divisor,w
  8365  08A4  0428               	iorwf	___lwdiv@divisor+1,w
  8366  08A5  1903               	btfsc	3,2
  8367  08A6  28D0               	goto	l5674
  8368  08A7  01AC               	clrf	___lwdiv@counter
  8369  08A8  0AAC               	incf	___lwdiv@counter,f
  8370  08A9                     l5662:	
  8371  08A9  1BA8               	btfsc	___lwdiv@divisor+1,7
  8372  08AA  28B5               	goto	l5664
  8373  08AB  3001               	movlw	1
  8374  08AC                     u4945:	
  8375  08AC  35A7               	lslf	___lwdiv@divisor,f
  8376  08AD  0DA8               	rlf	___lwdiv@divisor+1,f
  8377  08AE  0B89               	decfsz	9,f
  8378  08AF  28AC               	goto	u4945
  8379  08B0  3001               	movlw	1
  8380  08B1  00AB               	movwf	??___lwdiv
  8381  08B2  082B               	movf	??___lwdiv,w
  8382  08B3  07AC               	addwf	___lwdiv@counter,f
  8383  08B4  28A9               	goto	l5662
  8384  08B5                     l5664:	
  8385  08B5  3001               	movlw	1
  8386  08B6                     u4965:	
  8387  08B6  35AD               	lslf	___lwdiv@quotient,f
  8388  08B7  0DAE               	rlf	___lwdiv@quotient+1,f
  8389  08B8  0B89               	decfsz	9,f
  8390  08B9  28B6               	goto	u4965
  8391  08BA  0828               	movf	___lwdiv@divisor+1,w
  8392  08BB  022A               	subwf	___lwdiv@dividend+1,w
  8393  08BC  1D03               	skipz
  8394  08BD  28C0               	goto	u4975
  8395  08BE  0827               	movf	___lwdiv@divisor,w
  8396  08BF  0229               	subwf	___lwdiv@dividend,w
  8397  08C0                     u4975:	
  8398  08C0  1C03               	skipc
  8399  08C1  28C7               	goto	l5670
  8400  08C2  0827               	movf	___lwdiv@divisor,w
  8401  08C3  02A9               	subwf	___lwdiv@dividend,f
  8402  08C4  0828               	movf	___lwdiv@divisor+1,w
  8403  08C5  3BAA               	subwfb	___lwdiv@dividend+1,f
  8404  08C6  142D               	bsf	___lwdiv@quotient,0
  8405  08C7                     l5670:	
  8406  08C7  3001               	movlw	1
  8407  08C8                     u4985:	
  8408  08C8  36A8               	lsrf	___lwdiv@divisor+1,f
  8409  08C9  0CA7               	rrf	___lwdiv@divisor,f
  8410  08CA  0B89               	decfsz	9,f
  8411  08CB  28C8               	goto	u4985
  8412  08CC  3001               	movlw	1
  8413  08CD  02AC               	subwf	___lwdiv@counter,f
  8414  08CE  1D03               	btfss	3,2
  8415  08CF  28B5               	goto	l5664
  8416  08D0                     l5674:	
  8417  08D0  082E               	movf	___lwdiv@quotient+1,w
  8418  08D1  00A8               	movwf	?___lwdiv+1
  8419  08D2  082D               	movf	___lwdiv@quotient,w
  8420  08D3  00A7               	movwf	?___lwdiv
  8421  08D4  0008               	return
  8422  08D5                     __end_of___lwdiv:	
  8423                           
  8424                           	psect	text31
  8425  0A07                     __ptext31:	
  8426 ;; *************** function _one_temperature_trans *****************
  8427 ;; Defined at:
  8428 ;;		line 292 in file "mcc_generated_files/max31856.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;		None
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      void 
  8435 ;; Registers used:
  8436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;Total ram usage:        2 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    6
  8449 ;; This function calls:
  8450 ;;		_maxim_31856_read_nregisters
  8451 ;;		_maxim_start_conversion
  8452 ;; This function is called by:
  8453 ;;		_temperature_process
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _one_temperature_trans
  8459  0A07                     _one_temperature_trans:	
  8460                           
  8461                           ;max31856.c: 294: maxim_start_conversion((uint8_t) 0x40);
  8462                           
  8463                           ;incstack = 0
  8464                           ; Regs used in _one_temperature_trans: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8465  0A07  3040               	movlw	64
  8466  0A08  3194  24B4  318A   	fcall	_maxim_start_conversion
  8467                           
  8468                           ;max31856.c: 296: MAX31856Sec = 0;
  8469  0A0B  0022               	movlb	2	; select bank2
  8470  0A0C  01BA               	clrf	_MAX31856Sec^(0+256)
  8471                           
  8472                           ;max31856.c: 297: while( !(RB3 == 0 || MAX31856Sec > 30) ) asm("clrwdt");
  8473  0A0D  2A0F               	goto	l639
  8474  0A0E                     l640:	
  8475  0A0E  0064               	clrwdt	;# 
  8476  0A0F                     l639:	
  8477  0A0F  0020               	movlb	0	; select bank0
  8478  0A10  1D8D               	btfss	13,3	;volatile
  8479  0A11  2A17               	goto	l6000
  8480  0A12  301F               	movlw	31
  8481  0A13  0022               	movlb	2	; select bank2
  8482  0A14  023A               	subwf	_MAX31856Sec^(0+256),w
  8483  0A15  1C03               	skipc
  8484  0A16  2A0E               	goto	l640
  8485  0A17                     l6000:	
  8486                           
  8487                           ;max31856.c: 298: if( MAX31856Sec > 30)
  8488  0A17  301F               	movlw	31
  8489  0A18  0022               	movlb	2	; select bank2
  8490  0A19  023A               	subwf	_MAX31856Sec^(0+256),w
  8491  0A1A  1C03               	skipc
  8492  0A1B  2A1F               	goto	l6004
  8493                           
  8494                           ;max31856.c: 299: {
  8495                           ;max31856.c: 300: uch_sr = 0x01;
  8496  0A1C  01CB               	clrf	_uch_sr^(0+256)
  8497  0A1D  0ACB               	incf	_uch_sr^(0+256),f
  8498                           
  8499                           ;max31856.c: 301: }
  8500  0A1E  0008               	return
  8501  0A1F                     l6004:	
  8502                           
  8503                           ;max31856.c: 328: else
  8504                           ;max31856.c: 329: {
  8505                           ;max31856.c: 330: maxim_31856_read_nregisters(0x0A, uch_reg,6);
  8506  0A1F  304C               	movlw	(low (_uch_reg| (0+256)))& (0+255)
  8507  0A20  0020               	movlb	0	; select bank0
  8508  0A21  00AE               	movwf	??_one_temperature_trans
  8509  0A22  082E               	movf	??_one_temperature_trans,w
  8510  0A23  00A9               	movwf	maxim_31856_read_nregisters@uch_buff
  8511  0A24  3006               	movlw	6
  8512  0A25  00AF               	movwf	??_one_temperature_trans+1
  8513  0A26  082F               	movf	??_one_temperature_trans+1,w
  8514  0A27  00AA               	movwf	maxim_31856_read_nregisters@uch_nBytes
  8515  0A28  300A               	movlw	10
  8516  0A29  3194  249C         	fcall	_maxim_31856_read_nregisters
  8517                           
  8518                           ;max31856.c: 331: uch_cjth=uch_reg[0];uch_cjtl=uch_reg[1];
  8519  0A2B  0022               	movlb	2	; select bank2
  8520  0A2C  084C               	movf	_uch_reg^(0+256),w
  8521  0A2D  0020               	movlb	0	; select bank0
  8522  0A2E  00AE               	movwf	??_one_temperature_trans
  8523  0A2F  082E               	movf	??_one_temperature_trans,w
  8524  0A30  0022               	movlb	2	; select bank2
  8525  0A31  00C4               	movwf	_uch_cjth^(0+256)
  8526  0A32  084D               	movf	(_uch_reg^(0+256)+1),w
  8527  0A33  0020               	movlb	0	; select bank0
  8528  0A34  00AE               	movwf	??_one_temperature_trans
  8529  0A35  082E               	movf	??_one_temperature_trans,w
  8530  0A36  0022               	movlb	2	; select bank2
  8531  0A37  00C5               	movwf	_uch_cjtl^(0+256)
  8532                           
  8533                           ;max31856.c: 332: uch_ltcbh=uch_reg[2];uch_ltcbm=uch_reg[3];uch_ltcbl=uch_reg[4];
  8534  0A38  084E               	movf	(_uch_reg^(0+256)+2),w
  8535  0A39  0020               	movlb	0	; select bank0
  8536  0A3A  00AE               	movwf	??_one_temperature_trans
  8537  0A3B  082E               	movf	??_one_temperature_trans,w
  8538  0A3C  0022               	movlb	2	; select bank2
  8539  0A3D  00C7               	movwf	_uch_ltcbh^(0+256)
  8540  0A3E  084F               	movf	(_uch_reg^(0+256)+3),w
  8541  0A3F  0020               	movlb	0	; select bank0
  8542  0A40  00AE               	movwf	??_one_temperature_trans
  8543  0A41  082E               	movf	??_one_temperature_trans,w
  8544  0A42  0022               	movlb	2	; select bank2
  8545  0A43  00C9               	movwf	_uch_ltcbm^(0+256)
  8546  0A44  0850               	movf	(_uch_reg^(0+256)+4),w
  8547  0A45  0020               	movlb	0	; select bank0
  8548  0A46  00AE               	movwf	??_one_temperature_trans
  8549  0A47  082E               	movf	??_one_temperature_trans,w
  8550  0A48  0022               	movlb	2	; select bank2
  8551  0A49  00C8               	movwf	_uch_ltcbl^(0+256)
  8552                           
  8553                           ;max31856.c: 333: uch_sr=uch_reg[5];
  8554  0A4A  0851               	movf	(_uch_reg^(0+256)+5),w
  8555  0A4B  0020               	movlb	0	; select bank0
  8556  0A4C  00AE               	movwf	??_one_temperature_trans
  8557  0A4D  082E               	movf	??_one_temperature_trans,w
  8558  0A4E  0022               	movlb	2	; select bank2
  8559  0A4F  00CB               	movwf	_uch_sr^(0+256)
  8560  0A50  0008               	return
  8561  0A51                     __end_of_one_temperature_trans:	
  8562                           
  8563                           	psect	text32
  8564  14B4                     __ptext32:	
  8565 ;; *************** function _maxim_start_conversion *****************
  8566 ;; Defined at:
  8567 ;;		line 114 in file "mcc_generated_files/max31856.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  uch_conversi    1    wreg     unsigned char 
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;  uch_conversi    1    6[BANK0 ] unsigned char 
  8572 ;; Return value:  Size  Location     Type
  8573 ;;                  1    wreg      void 
  8574 ;; Registers used:
  8575 ;;		wreg, status,2, status,0, pclath, cstack
  8576 ;; Tracked objects:
  8577 ;;		On entry : 0/0
  8578 ;;		On exit  : 0/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;Total ram usage:        2 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    5
  8588 ;; This function calls:
  8589 ;;		_maxim_31856_read_register
  8590 ;;		_maxim_31856_write_register
  8591 ;; This function is called by:
  8592 ;;		_one_temperature_trans
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           
  8597                           ;psect for function _maxim_start_conversion
  8598  14B4                     _maxim_start_conversion:	
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in _maxim_start_conversion: [wreg+status,2+status,0+pclath+cstack]
  8602                           ;maxim_start_conversion@uch_conversion_mode stored from wreg
  8603  14B4  0020               	movlb	0	; select bank0
  8604  14B5  00A6               	movwf	maxim_start_conversion@uch_conversion_mode
  8605                           
  8606                           ;max31856.c: 116: uch_cr0=maxim_31856_read_register(0x00);
  8607  14B6  3000               	movlw	0
  8608  14B7  3194  245A  3194   	fcall	_maxim_31856_read_register
  8609  14BA  0020               	movlb	0	; select bank0
  8610  14BB  00A5               	movwf	??_maxim_start_conversion
  8611  14BC  0825               	movf	??_maxim_start_conversion,w
  8612  14BD  00EA               	movwf	_uch_cr0
  8613                           
  8614                           ;max31856.c: 117: uch_cr0&=(uint8_t) 0x3F;
  8615  14BE  303F               	movlw	63
  8616  14BF  00A5               	movwf	??_maxim_start_conversion
  8617  14C0  0825               	movf	??_maxim_start_conversion,w
  8618  14C1  05EA               	andwf	_uch_cr0,f
  8619                           
  8620                           ;max31856.c: 118: uch_cr0|=uch_conversion_mode;
  8621  14C2  0826               	movf	maxim_start_conversion@uch_conversion_mode,w
  8622  14C3  00A5               	movwf	??_maxim_start_conversion
  8623  14C4  0825               	movf	??_maxim_start_conversion,w
  8624  14C5  04EA               	iorwf	_uch_cr0,f
  8625                           
  8626                           ;max31856.c: 119: maxim_31856_write_register(0x80, uch_cr0);
  8627  14C6  086A               	movf	_uch_cr0,w
  8628  14C7  00A5               	movwf	??_maxim_start_conversion
  8629  14C8  0825               	movf	??_maxim_start_conversion,w
  8630  14C9  00A2               	movwf	maxim_31856_write_register@uch_register_value
  8631  14CA  3080               	movlw	128
  8632  14CB  3193  23F1         	fcall	_maxim_31856_write_register
  8633  14CD  0008               	return
  8634  14CE                     __end_of_maxim_start_conversion:	
  8635                           
  8636                           	psect	text33
  8637  13F1                     __ptext33:	
  8638 ;; *************** function _maxim_31856_write_register *****************
  8639 ;; Defined at:
  8640 ;;		line 20 in file "mcc_generated_files/max31856.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;  uch_register    1    wreg     unsigned char 
  8643 ;;  uch_register    1    2[BANK0 ] unsigned char 
  8644 ;; Auto vars:     Size  Location     Type
  8645 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8646 ;; Return value:  Size  Location     Type
  8647 ;;                  1    wreg      void 
  8648 ;; Registers used:
  8649 ;;		wreg, status,2, status,0, pclath, cstack
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8655 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;Total ram usage:        2 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; Hardware stack levels required when called:    4
  8662 ;; This function calls:
  8663 ;;		_SPI_Exchange8bit
  8664 ;; This function is called by:
  8665 ;;		_maxim_start_conversion
  8666 ;;		_maxim_clear_fault_status
  8667 ;;		_temperature_display
  8668 ;;		_maxim_31856_init
  8669 ;;		_maxim_stop_conversion
  8670 ;;		_maxim_disable_oc_fault_detection
  8671 ;;		_maxim_set_oc_fault_detection
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           
  8676                           ;psect for function _maxim_31856_write_register
  8677  13F1                     _maxim_31856_write_register:	
  8678                           
  8679                           ;incstack = 0
  8680                           ; Regs used in _maxim_31856_write_register: [wreg+status,2+status,0+pclath+cstack]
  8681                           ;maxim_31856_write_register@uch_register_address stored from wreg
  8682  13F1  0020               	movlb	0	; select bank0
  8683  13F2  00A3               	movwf	maxim_31856_write_register@uch_register_address
  8684                           
  8685                           ;max31856.c: 22: do { LATA5 = 0; } while(0);
  8686  13F3  0022               	movlb	2	; select bank2
  8687  13F4  128C               	bcf	12,5	;volatile
  8688                           
  8689                           ;max31856.c: 23: SPI_Exchange8bit(uch_register_address);
  8690  13F5  0020               	movlb	0	; select bank0
  8691  13F6  0823               	movf	maxim_31856_write_register@uch_register_address,w
  8692  13F7  3193  23C5  3193   	fcall	_SPI_Exchange8bit
  8693                           
  8694                           ;max31856.c: 24: SPI_Exchange8bit(uch_register_value);
  8695  13FA  0020               	movlb	0	; select bank0
  8696  13FB  0822               	movf	maxim_31856_write_register@uch_register_value,w
  8697  13FC  3193  23C5         	fcall	_SPI_Exchange8bit
  8698                           
  8699                           ;max31856.c: 25: do { LATA5 = 1; } while(0);
  8700  13FE  0022               	movlb	2	; select bank2
  8701  13FF  168C               	bsf	12,5	;volatile
  8702  1400  0008               	return
  8703  1401                     __end_of_maxim_31856_write_register:	
  8704                           
  8705                           	psect	text34
  8706  145A                     __ptext34:	
  8707 ;; *************** function _maxim_31856_read_register *****************
  8708 ;; Defined at:
  8709 ;;		line 34 in file "mcc_generated_files/max31856.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;  uch_register    1    wreg     unsigned char 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8714 ;;  uch_register    1    4[BANK0 ] unsigned char 
  8715 ;; Return value:  Size  Location     Type
  8716 ;;                  1    wreg      unsigned char 
  8717 ;; Registers used:
  8718 ;;		wreg, status,2, status,0, pclath, cstack
  8719 ;; Tracked objects:
  8720 ;;		On entry : 0/0
  8721 ;;		On exit  : 0/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;Total ram usage:        3 bytes
  8729 ;; Hardware stack levels used:    1
  8730 ;; Hardware stack levels required when called:    4
  8731 ;; This function calls:
  8732 ;;		_SPI_Exchange8bit
  8733 ;; This function is called by:
  8734 ;;		_maxim_start_conversion
  8735 ;;		_maxim_clear_fault_status
  8736 ;;		_maxim_stop_conversion
  8737 ;;		_maxim_disable_oc_fault_detection
  8738 ;;		_maxim_set_oc_fault_detection
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           
  8743                           ;psect for function _maxim_31856_read_register
  8744  145A                     _maxim_31856_read_register:	
  8745                           
  8746                           ;incstack = 0
  8747                           ; Regs used in _maxim_31856_read_register: [wreg+status,2+status,0+pclath+cstack]
  8748                           ;maxim_31856_read_register@uch_register_address stored from wreg
  8749  145A  0020               	movlb	0	; select bank0
  8750  145B  00A3               	movwf	maxim_31856_read_register@uch_register_address
  8751                           
  8752                           ;max31856.c: 36: uint8_t uch_register_data;
  8753                           ;max31856.c: 37: do { LATA5 = 0; } while(0);
  8754  145C  0022               	movlb	2	; select bank2
  8755  145D  128C               	bcf	12,5	;volatile
  8756                           
  8757                           ;max31856.c: 38: SPI_Exchange8bit(uch_register_address);
  8758  145E  0020               	movlb	0	; select bank0
  8759  145F  0823               	movf	maxim_31856_read_register@uch_register_address,w
  8760  1460  3193  23C5  3194   	fcall	_SPI_Exchange8bit
  8761                           
  8762                           ;max31856.c: 39: uch_register_data=SPI_Exchange8bit(0xff);
  8763  1463  30FF               	movlw	255
  8764  1464  3193  23C5         	fcall	_SPI_Exchange8bit
  8765  1466  0020               	movlb	0	; select bank0
  8766  1467  00A2               	movwf	??_maxim_31856_read_register
  8767  1468  0822               	movf	??_maxim_31856_read_register,w
  8768  1469  00A4               	movwf	maxim_31856_read_register@uch_register_data
  8769                           
  8770                           ;max31856.c: 40: do { LATA5 = 1; } while(0);
  8771  146A  0022               	movlb	2	; select bank2
  8772  146B  168C               	bsf	12,5	;volatile
  8773                           
  8774                           ;max31856.c: 41: return (uch_register_data);
  8775  146C  0020               	movlb	0	; select bank0
  8776  146D  0824               	movf	maxim_31856_read_register@uch_register_data,w
  8777  146E  0008               	return
  8778  146F                     __end_of_maxim_31856_read_register:	
  8779                           
  8780                           	psect	text35
  8781  149C                     __ptext35:	
  8782 ;; *************** function _maxim_31856_read_nregisters *****************
  8783 ;; Defined at:
  8784 ;;		line 50 in file "mcc_generated_files/max31856.c"
  8785 ;; Parameters:    Size  Location     Type
  8786 ;;  uch_register    1    wreg     unsigned char 
  8787 ;;  uch_buff        1    9[BANK0 ] PTR unsigned char 
  8788 ;;		 -> uch_reg(8), 
  8789 ;;  uch_nBytes      1   10[BANK0 ] unsigned char 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;  uch_register    1   13[BANK0 ] unsigned char 
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  1    wreg      void 
  8794 ;; Registers used:
  8795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8801 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;Total ram usage:        5 bytes
  8806 ;; Hardware stack levels used:    1
  8807 ;; Hardware stack levels required when called:    5
  8808 ;; This function calls:
  8809 ;;		_SPI_Exchange8bit
  8810 ;;		_SPI_Exchange8bitBuffer
  8811 ;; This function is called by:
  8812 ;;		_one_temperature_trans
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           
  8817                           ;psect for function _maxim_31856_read_nregisters
  8818  149C                     _maxim_31856_read_nregisters:	
  8819                           
  8820                           ;incstack = 0
  8821                           ; Regs used in _maxim_31856_read_nregisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8822                           ;maxim_31856_read_nregisters@uch_register_address stored from wreg
  8823  149C  0020               	movlb	0	; select bank0
  8824  149D  00AD               	movwf	maxim_31856_read_nregisters@uch_register_address
  8825                           
  8826                           ;max31856.c: 52: do { LATA5 = 0; } while(0);
  8827  149E  0022               	movlb	2	; select bank2
  8828  149F  128C               	bcf	12,5	;volatile
  8829                           
  8830                           ;max31856.c: 53: SPI_Exchange8bit(uch_register_address);
  8831  14A0  0020               	movlb	0	; select bank0
  8832  14A1  082D               	movf	maxim_31856_read_nregisters@uch_register_address,w
  8833  14A2  3193  23C5  3194   	fcall	_SPI_Exchange8bit
  8834                           
  8835                           ;max31856.c: 54: SPI_Exchange8bitBuffer((0), uch_nBytes, uch_buff);
  8836  14A5  0020               	movlb	0	; select bank0
  8837  14A6  082A               	movf	maxim_31856_read_nregisters@uch_nBytes,w
  8838  14A7  00AB               	movwf	??_maxim_31856_read_nregisters
  8839  14A8  082B               	movf	??_maxim_31856_read_nregisters,w
  8840  14A9  00A2               	movwf	SPI_Exchange8bitBuffer@bufLen
  8841  14AA  0829               	movf	maxim_31856_read_nregisters@uch_buff,w
  8842  14AB  00AC               	movwf	??_maxim_31856_read_nregisters+1
  8843  14AC  082C               	movf	??_maxim_31856_read_nregisters+1,w
  8844  14AD  00A3               	movwf	SPI_Exchange8bitBuffer@dataOut
  8845  14AE  3000               	movlw	0
  8846  14AF  318B  2341         	fcall	_SPI_Exchange8bitBuffer
  8847                           
  8848                           ;max31856.c: 55: do { LATA5 = 1; } while(0);
  8849  14B1  0022               	movlb	2	; select bank2
  8850  14B2  168C               	bsf	12,5	;volatile
  8851  14B3  0008               	return
  8852  14B4                     __end_of_maxim_31856_read_nregisters:	
  8853                           
  8854                           	psect	text36
  8855  0B41                     __ptext36:	
  8856 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8857 ;; Defined at:
  8858 ;;		line 89 in file "mcc_generated_files/spi.c"
  8859 ;; Parameters:    Size  Location     Type
  8860 ;;  dataIn          1    wreg     PTR unsigned char 
  8861 ;;		 -> NULL(0), 
  8862 ;;  bufLen          1    2[BANK0 ] unsigned char 
  8863 ;;  dataOut         1    3[BANK0 ] PTR unsigned char 
  8864 ;;		 -> uch_reg(8), 
  8865 ;; Auto vars:     Size  Location     Type
  8866 ;;  dataIn          1    7[BANK0 ] PTR unsigned char 
  8867 ;;		 -> NULL(0), 
  8868 ;;  bytesWritten    1    8[BANK0 ] unsigned char 
  8869 ;; Return value:  Size  Location     Type
  8870 ;;                  1    wreg      unsigned char 
  8871 ;; Registers used:
  8872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 0/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8878 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;Total ram usage:        7 bytes
  8883 ;; Hardware stack levels used:    1
  8884 ;; Hardware stack levels required when called:    4
  8885 ;; This function calls:
  8886 ;;		_SPI_Exchange8bit
  8887 ;; This function is called by:
  8888 ;;		_maxim_31856_read_nregisters
  8889 ;; This function uses a non-reentrant model
  8890 ;;
  8891                           
  8892                           
  8893                           ;psect for function _SPI_Exchange8bitBuffer
  8894  0B41                     _SPI_Exchange8bitBuffer:	
  8895                           
  8896                           ;incstack = 0
  8897                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8898                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8899  0B41  0020               	movlb	0	; select bank0
  8900  0B42  00A7               	movwf	SPI_Exchange8bitBuffer@dataIn
  8901                           
  8902                           ;spi.c: 90: uint8_t bytesWritten = 0;
  8903  0B43  01A8               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8904                           
  8905                           ;spi.c: 92: if (bufLen != 0) {
  8906  0B44  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8907  0B45  1903               	btfsc	3,2
  8908  0B46  0008               	return
  8909                           
  8910                           ;spi.c: 93: if (dataIn != (0)) {
  8911  0B47  0827               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8912  0B48  1D03               	btfss	3,2
  8913  0B49  2B74               	goto	l5468
  8914  0B4A  2B79               	goto	l5470
  8915  0B4B                     l5460:	
  8916                           ;spi.c: 94: while (bytesWritten < bufLen) {
  8917                           
  8918                           
  8919                           ;spi.c: 95: if (dataOut == (0)) {
  8920  0B4B  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8921  0B4C  1D03               	btfss	3,2
  8922  0B4D  2B59               	goto	l5464
  8923                           
  8924                           ;spi.c: 96: SPI_Exchange8bit(dataIn[bytesWritten]);
  8925  0B4E  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8926  0B4F  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8927  0B50  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8928  0B51  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8929  0B52  0086               	movwf	6
  8930  0B53  0187               	clrf	7
  8931  0B54  0801               	movf	1,w
  8932  0B55  3193  23C5  318B   	fcall	_SPI_Exchange8bit
  8933                           
  8934                           ;spi.c: 97: } else {
  8935  0B58  2B6F               	goto	l5466
  8936  0B59                     l5464:	
  8937                           
  8938                           ;spi.c: 98: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  8939  0B59  0020               	movlb	0	; select bank0
  8940  0B5A  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8941  0B5B  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8942  0B5C  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8943  0B5D  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8944  0B5E  0086               	movwf	6
  8945  0B5F  0187               	clrf	7
  8946  0B60  0801               	movf	1,w
  8947  0B61  3193  23C5  318B   	fcall	_SPI_Exchange8bit
  8948  0B64  0020               	movlb	0	; select bank0
  8949  0B65  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  8950  0B66  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8951  0B67  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8952  0B68  00A6               	movwf	??_SPI_Exchange8bitBuffer+2
  8953  0B69  0826               	movf	??_SPI_Exchange8bitBuffer+2,w
  8954  0B6A  0086               	movwf	6
  8955  0B6B  3001               	movlw	1	; select bank2/3
  8956  0B6C  0087               	movwf	7
  8957  0B6D  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  8958  0B6E  0081               	movwf	1
  8959  0B6F                     l5466:	
  8960                           
  8961                           ;spi.c: 99: }
  8962                           ;spi.c: 101: bytesWritten++;
  8963  0B6F  3001               	movlw	1
  8964  0B70  0020               	movlb	0	; select bank0
  8965  0B71  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8966  0B72  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8967  0B73  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8968  0B74                     l5468:	
  8969  0B74  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8970  0B75  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8971  0B76  1803               	btfsc	3,0
  8972  0B77  0008               	return
  8973  0B78  2B4B               	goto	l5460
  8974  0B79                     l5470:	
  8975                           ;spi.c: 102: }
  8976                           ;spi.c: 103: } else {
  8977                           
  8978                           
  8979                           ;spi.c: 104: if (dataOut != (0)) {
  8980  0B79  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8981  0B7A  1903               	btfsc	3,2
  8982  0B7B  0008               	return
  8983  0B7C                     l5478:	
  8984  0B7C  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8985  0B7D  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8986  0B7E  1803               	btfsc	3,0
  8987  0B7F  0008               	return
  8988                           
  8989                           ;spi.c: 106: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  8990                           
  8991                           ;spi.c: 105: while (bytesWritten < bufLen) {
  8992  0B80  3000               	movlw	0
  8993  0B81  3193  23C5  318B   	fcall	_SPI_Exchange8bit
  8994  0B84  0020               	movlb	0	; select bank0
  8995  0B85  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8996  0B86  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8997  0B87  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8998  0B88  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  8999  0B89  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  9000  0B8A  0086               	movwf	6
  9001  0B8B  3001               	movlw	1	; select bank2/3
  9002  0B8C  0087               	movwf	7
  9003  0B8D  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9004  0B8E  0081               	movwf	1
  9005                           
  9006                           ;spi.c: 108: bytesWritten++;
  9007  0B8F  3001               	movlw	1
  9008  0B90  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9009  0B91  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9010  0B92  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9011  0B93  2B7C               	goto	l5478
  9012  0B94                     __end_of_SPI_Exchange8bitBuffer:	
  9013                           ;spi.c: 109: }
  9014                           ;spi.c: 110: }
  9015                           ;spi.c: 111: }
  9016                           ;spi.c: 112: }
  9017                           ;spi.c: 114: return bytesWritten;
  9018                           ;	Return value of _SPI_Exchange8bitBuffer is never used
  9019                           
  9020                           
  9021                           	psect	text37
  9022  13C5                     __ptext37:	
  9023 ;; *************** function _SPI_Exchange8bit *****************
  9024 ;; Defined at:
  9025 ;;		line 77 in file "mcc_generated_files/spi.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;  data            1    wreg     unsigned char 
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  data            1    1[BANK0 ] unsigned char 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      unsigned char 
  9032 ;; Registers used:
  9033 ;;		wreg
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;Total ram usage:        1 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    3
  9046 ;; This function calls:
  9047 ;;		Nothing
  9048 ;; This function is called by:
  9049 ;;		_SPI_Exchange8bitBuffer
  9050 ;;		_maxim_31856_write_register
  9051 ;;		_maxim_31856_read_register
  9052 ;;		_maxim_31856_read_nregisters
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           
  9057                           ;psect for function _SPI_Exchange8bit
  9058  13C5                     _SPI_Exchange8bit:	
  9059                           
  9060                           ;incstack = 0
  9061                           ; Regs used in _SPI_Exchange8bit: [wreg]
  9062                           ;SPI_Exchange8bit@data stored from wreg
  9063  13C5  0020               	movlb	0	; select bank0
  9064  13C6  00A1               	movwf	SPI_Exchange8bit@data
  9065                           
  9066                           ;spi.c: 79: SSP1CON1bits.WCOL = 0;
  9067  13C7  0024               	movlb	4	; select bank4
  9068  13C8  1395               	bcf	21,7	;volatile
  9069                           
  9070                           ;spi.c: 81: SSPBUF = data;
  9071  13C9  0020               	movlb	0	; select bank0
  9072  13CA  0821               	movf	SPI_Exchange8bit@data,w
  9073  13CB  0024               	movlb	4	; select bank4
  9074  13CC  0091               	movwf	17	;volatile
  9075  13CD                     l71:	
  9076                           ;spi.c: 83: while (SSP1STATbits.BF == 0x0) {
  9077                           
  9078  13CD  1C14               	btfss	20,0	;volatile
  9079  13CE  2BCD               	goto	l71
  9080                           
  9081                           ;spi.c: 84: }
  9082                           ;spi.c: 86: return (SSPBUF);
  9083  13CF  0811               	movf	17,w	;volatile
  9084  13D0  0008               	return
  9085  13D1                     __end_of_SPI_Exchange8bit:	
  9086                           
  9087                           	psect	text38
  9088  0806                     __ptext38:	
  9089 ;; *************** function _Two_Display *****************
  9090 ;; Defined at:
  9091 ;;		line 139 in file "mcc_generated_files/ht1621.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  number          1    wreg     unsigned char 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  number          1   16[BANK0 ] unsigned char 
  9096 ;;  num             4   12[BANK0 ] unsigned char [4]
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;Total ram usage:        6 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    5
  9113 ;; This function calls:
  9114 ;;		_WriteAll_1621
  9115 ;; This function is called by:
  9116 ;;		_temperature_process
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           
  9121                           ;psect for function _Two_Display
  9122  0806                     _Two_Display:	
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _Two_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9126                           ;Two_Display@number stored from wreg
  9127  0806  0020               	movlb	0	; select bank0
  9128  0807  00B0               	movwf	Two_Display@number
  9129                           
  9130                           ;ht1621.c: 141: unsigned char num[4]={0};
  9131  0808  0022               	movlb	2	; select bank2
  9132  0809  0823               	movf	(Two_Display@F2137+3)^(0+256),w
  9133  080A  0020               	movlb	0	; select bank0
  9134  080B  00AF               	movwf	Two_Display@num+3
  9135  080C  0022               	movlb	2	; select bank2
  9136  080D  0822               	movf	(Two_Display@F2137+2)^(0+256),w
  9137  080E  0020               	movlb	0	; select bank0
  9138  080F  00AE               	movwf	Two_Display@num+2
  9139  0810  0022               	movlb	2	; select bank2
  9140  0811  0821               	movf	(Two_Display@F2137+1)^(0+256),w
  9141  0812  0020               	movlb	0	; select bank0
  9142  0813  00AD               	movwf	Two_Display@num+1
  9143  0814  0022               	movlb	2	; select bank2
  9144  0815  0820               	movf	Two_Display@F2137^(0+256),w
  9145  0816  0020               	movlb	0	; select bank0
  9146  0817  00AC               	movwf	Two_Display@num
  9147                           
  9148                           ;ht1621.c: 142: num[1] = Dis_TAB[0];
  9149  0818  3000               	movlw	low (_Dis_TAB| (0+32768))
  9150  0819  0084               	movwf	4
  9151  081A  3098               	movlw	high (_Dis_TAB| (0+32768))
  9152  081B  0085               	movwf	5
  9153  081C  0800               	movf	0,w	;code access
  9154  081D  00AB               	movwf	??_Two_Display
  9155  081E  082B               	movf	??_Two_Display,w
  9156  081F  00AD               	movwf	Two_Display@num+1
  9157                           
  9158                           ;ht1621.c: 143: num[2] = Dis_TAB[number];
  9159  0820  0830               	movf	Two_Display@number,w
  9160  0821  3E00               	addlw	low (_Dis_TAB| (0+32768))
  9161  0822  0084               	movwf	4
  9162  0823  3098               	movlw	high (_Dis_TAB| (0+32768))
  9163  0824  1803               	skipnc
  9164  0825  3E01               	addlw	1
  9165  0826  0085               	movwf	5
  9166  0827  0800               	movf	0,w	;code access
  9167  0828  00AB               	movwf	??_Two_Display
  9168  0829  082B               	movf	??_Two_Display,w
  9169  082A  00AE               	movwf	Two_Display@num+2
  9170                           
  9171                           ;ht1621.c: 144: WriteAll_1621(0, num, 4);
  9172  082B  302C               	movlw	low Two_Display@num
  9173  082C  00A5               	movwf	WriteAll_1621@p
  9174  082D  3000               	movlw	high Two_Display@num
  9175  082E  00A6               	movwf	WriteAll_1621@p+1
  9176  082F  3004               	movlw	4
  9177  0830  00AB               	movwf	??_Two_Display
  9178  0831  082B               	movf	??_Two_Display,w
  9179  0832  00A7               	movwf	WriteAll_1621@cnt
  9180  0833  3000               	movlw	0
  9181  0834  3188  206B         	fcall	_WriteAll_1621
  9182  0836  0008               	return
  9183  0837                     __end_of_Two_Display:	
  9184                           
  9185                           	psect	text39
  9186  086B                     __ptext39:	
  9187 ;; *************** function _WriteAll_1621 *****************
  9188 ;; Defined at:
  9189 ;;		line 91 in file "mcc_generated_files/ht1621.c"
  9190 ;; Parameters:    Size  Location     Type
  9191 ;;  addr            1    wreg     unsigned char 
  9192 ;;  p               2    5[BANK0 ] PTR unsigned char 
  9193 ;;		 -> time_Display@num(4), err_Display@num(4), Two_Display@num(4), display_buff(4), 
  9194 ;;		 -> Dis_TAB(21), 
  9195 ;;  cnt             1    7[BANK0 ] unsigned char 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;  addr            1    9[BANK0 ] unsigned char 
  9198 ;;  i               1   10[BANK0 ] unsigned char 
  9199 ;; Return value:  Size  Location     Type
  9200 ;;                  1    wreg      void 
  9201 ;; Registers used:
  9202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9203 ;; Tracked objects:
  9204 ;;		On entry : 0/0
  9205 ;;		On exit  : 0/0
  9206 ;;		Unchanged: 0/0
  9207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9208 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9212 ;;Total ram usage:        6 bytes
  9213 ;; Hardware stack levels used:    1
  9214 ;; Hardware stack levels required when called:    4
  9215 ;; This function calls:
  9216 ;;		_SendBit_1621
  9217 ;;		_SendDataBit_1621
  9218 ;; This function is called by:
  9219 ;;		_main
  9220 ;;		_Tc_Display
  9221 ;;		_Two_Display
  9222 ;;		_err_Display
  9223 ;;		_time_Display
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function _WriteAll_1621
  9229  086B                     _WriteAll_1621:	
  9230                           
  9231                           ;incstack = 0
  9232                           ; Regs used in _WriteAll_1621: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9233                           ;WriteAll_1621@addr stored from wreg
  9234  086B  0020               	movlb	0	; select bank0
  9235  086C  00A9               	movwf	WriteAll_1621@addr
  9236                           
  9237                           ;ht1621.c: 93: unsigned char i;
  9238                           ;ht1621.c: 94: do { LATC0 = 0; } while(0);
  9239  086D  0022               	movlb	2	; select bank2
  9240  086E  100E               	bcf	14,0	;volatile
  9241                           
  9242                           ;ht1621.c: 95: SendBit_1621(0xa0,3);
  9243  086F  3003               	movlw	3
  9244  0870  0020               	movlb	0	; select bank0
  9245  0871  00A8               	movwf	??_WriteAll_1621
  9246  0872  0828               	movf	??_WriteAll_1621,w
  9247  0873  00A1               	movwf	SendBit_1621@cnt
  9248  0874  30A0               	movlw	160
  9249  0875  3196  2632  3188   	fcall	_SendBit_1621
  9250                           
  9251                           ;ht1621.c: 96: SendBit_1621(addr,6);
  9252  0878  3006               	movlw	6
  9253  0879  0020               	movlb	0	; select bank0
  9254  087A  00A8               	movwf	??_WriteAll_1621
  9255  087B  0828               	movf	??_WriteAll_1621,w
  9256  087C  00A1               	movwf	SendBit_1621@cnt
  9257  087D  0829               	movf	WriteAll_1621@addr,w
  9258  087E  3196  2632  3188   	fcall	_SendBit_1621
  9259                           
  9260                           ;ht1621.c: 97: for(i =0; i <cnt; i ++,p++)
  9261  0881  0020               	movlb	0	; select bank0
  9262  0882  01AA               	clrf	WriteAll_1621@i
  9263  0883                     l5490:	
  9264  0883  0827               	movf	WriteAll_1621@cnt,w
  9265  0884  022A               	subwf	WriteAll_1621@i,w
  9266  0885  1803               	btfsc	3,0
  9267  0886  289D               	goto	l772
  9268                           
  9269                           ;ht1621.c: 98: {
  9270                           ;ht1621.c: 99: SendDataBit_1621(*p,8);
  9271  0887  3008               	movlw	8
  9272  0888  00A8               	movwf	??_WriteAll_1621
  9273  0889  0828               	movf	??_WriteAll_1621,w
  9274  088A  00A1               	movwf	SendDataBit_1621@cnt
  9275  088B  0825               	movf	WriteAll_1621@p,w
  9276  088C  0084               	movwf	4
  9277  088D  0826               	movf	WriteAll_1621@p+1,w
  9278  088E  0085               	movwf	5
  9279  088F  0800               	movf	0,w	;code access
  9280  0890  3196  2653  3188   	fcall	_SendDataBit_1621
  9281  0893  3001               	movlw	1
  9282  0894  0020               	movlb	0	; select bank0
  9283  0895  00A8               	movwf	??_WriteAll_1621
  9284  0896  0828               	movf	??_WriteAll_1621,w
  9285  0897  07AA               	addwf	WriteAll_1621@i,f
  9286  0898  3001               	movlw	1
  9287  0899  07A5               	addwf	WriteAll_1621@p,f
  9288  089A  3000               	movlw	0
  9289  089B  3DA6               	addwfc	WriteAll_1621@p+1,f
  9290  089C  2883               	goto	l5490
  9291  089D                     l772:	
  9292                           ;ht1621.c: 100: }
  9293                           ;ht1621.c: 101: do { LATC0 = 1; } while(0);
  9294                           
  9295  089D  0022               	movlb	2	; select bank2
  9296  089E  140E               	bsf	14,0	;volatile
  9297  089F  0008               	return
  9298  08A0                     __end_of_WriteAll_1621:	
  9299                           
  9300                           	psect	text40
  9301  1653                     __ptext40:	
  9302 ;; *************** function _SendDataBit_1621 *****************
  9303 ;; Defined at:
  9304 ;;		line 42 in file "mcc_generated_files/ht1621.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;  data            1    wreg     unsigned char 
  9307 ;;  cnt             1    1[BANK0 ] unsigned char 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  data            1    3[BANK0 ] unsigned char 
  9310 ;;  i               1    4[BANK0 ] unsigned char 
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  1    wreg      void 
  9313 ;; Registers used:
  9314 ;;		wreg, status,2, status,0
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9320 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;Total ram usage:        4 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    3
  9327 ;; This function calls:
  9328 ;;		Nothing
  9329 ;; This function is called by:
  9330 ;;		_WriteAll_1621
  9331 ;;		_Write_1621
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           
  9336                           ;psect for function _SendDataBit_1621
  9337  1653                     _SendDataBit_1621:	
  9338                           
  9339                           ;incstack = 0
  9340                           ; Regs used in _SendDataBit_1621: [wreg+status,2+status,0]
  9341                           ;SendDataBit_1621@data stored from wreg
  9342  1653  0020               	movlb	0	; select bank0
  9343  1654  00A3               	movwf	SendDataBit_1621@data
  9344                           
  9345                           ;ht1621.c: 44: unsigned char i;
  9346                           ;ht1621.c: 45: for(i =0; i <cnt; i ++)
  9347  1655  01A4               	clrf	SendDataBit_1621@i
  9348  1656                     l5404:	
  9349  1656  0821               	movf	SendDataBit_1621@cnt,w
  9350  1657  0224               	subwf	SendDataBit_1621@i,w
  9351  1658  1803               	btfsc	3,0
  9352  1659  0008               	return
  9353                           
  9354                           ;ht1621.c: 46: {
  9355                           ;ht1621.c: 47: if((data&0x01)==0) do { LATC2 = 0; } while(0);
  9356  165A  1823               	btfsc	SendDataBit_1621@data,0
  9357  165B  2E5F               	goto	l743
  9358  165C  0022               	movlb	2	; select bank2
  9359  165D  110E               	bcf	14,2	;volatile
  9360  165E  2E61               	goto	l745
  9361  165F                     l743:	
  9362                           ;ht1621.c: 48: else do { LATC2 = 1; } while(0);
  9363                           
  9364  165F  0022               	movlb	2	; select bank2
  9365  1660  150E               	bsf	14,2	;volatile
  9366  1661                     l745:	
  9367                           ;ht1621.c: 49: do { LATC1 = 0; } while(0);
  9368                           
  9369  1661  108E               	bcf	14,1	;volatile
  9370                           
  9371                           ;ht1621.c: 50: _delay((unsigned long)((1)*(4000000/4000.0)));
  9372  1662  30F9               	movlw	249
  9373  1663  0020               	movlb	0	; select bank0
  9374  1664  00A2               	movwf	??_SendDataBit_1621
  9375  1665                     u6197:	
  9376  1665  0000               	nop
  9377  1666  0BA2               	decfsz	??_SendDataBit_1621,f
  9378  1667  2E65               	goto	u6197
  9379  1668  3200               	nop2	;nop
  9380  1669  0000               	nop
  9381                           
  9382                           ;ht1621.c: 51: do { LATC1 = 1; } while(0);
  9383  166A  0022               	movlb	2	; select bank2
  9384  166B  148E               	bsf	14,1	;volatile
  9385                           
  9386                           ;ht1621.c: 52: data>>=1;
  9387  166C  1003               	clrc
  9388  166D  0020               	movlb	0	; select bank0
  9389  166E  0CA3               	rrf	SendDataBit_1621@data,f
  9390  166F  3001               	movlw	1
  9391  1670  00A2               	movwf	??_SendDataBit_1621
  9392  1671  0822               	movf	??_SendDataBit_1621,w
  9393  1672  07A4               	addwf	SendDataBit_1621@i,f
  9394  1673  2E56               	goto	l5404
  9395  1674                     __end_of_SendDataBit_1621:	
  9396                           
  9397                           	psect	text41
  9398  13A9                     __ptext41:	
  9399 ;; *************** function _Set_start_flag *****************
  9400 ;; Defined at:
  9401 ;;		line 18 in file "mcc_generated_files/save.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;                  1    wreg      void 
  9408 ;; Registers used:
  9409 ;;		None
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        0 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    3
  9422 ;; This function calls:
  9423 ;;		Nothing
  9424 ;; This function is called by:
  9425 ;;		_Key_Process
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _Set_start_flag
  9431  13A9                     _Set_start_flag:	
  9432                           
  9433                           ;save.c: 20: Record_flag = 1;
  9434                           
  9435                           ;incstack = 0
  9436                           ; Regs used in _Set_start_flag: []
  9437  13A9  0020               	movlb	0	; select bank0
  9438  13AA  01E6               	clrf	_Record_flag
  9439  13AB  0AE6               	incf	_Record_flag,f
  9440                           
  9441                           ;save.c: 21: do { LATA4 = 0; } while(0);
  9442  13AC  0022               	movlb	2	; select bank2
  9443  13AD  120C               	bcf	12,4	;volatile
  9444  13AE  0008               	return
  9445  13AF                     __end_of_Set_start_flag:	
  9446                           
  9447                           	psect	text42
  9448  139F                     __ptext42:	
  9449 ;; *************** function _Set_finish_flag *****************
  9450 ;; Defined at:
  9451 ;;		line 30 in file "mcc_generated_files/save.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;		None
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;		None
  9456 ;; Return value:  Size  Location     Type
  9457 ;;                  1    wreg      void 
  9458 ;; Registers used:
  9459 ;;		status,2
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;Total ram usage:        0 bytes
  9470 ;; Hardware stack levels used:    1
  9471 ;; Hardware stack levels required when called:    3
  9472 ;; This function calls:
  9473 ;;		Nothing
  9474 ;; This function is called by:
  9475 ;;		_Key_Process
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function _Set_finish_flag
  9481  139F                     _Set_finish_flag:	
  9482                           
  9483                           ;save.c: 32: Record_flag = 0;
  9484                           
  9485                           ;incstack = 0
  9486                           ; Regs used in _Set_finish_flag: [status,2]
  9487  139F  0020               	movlb	0	; select bank0
  9488  13A0  01E6               	clrf	_Record_flag
  9489                           
  9490                           ;save.c: 33: do { LATA4 = 1; } while(0);
  9491  13A1  0022               	movlb	2	; select bank2
  9492  13A2  160C               	bsf	12,4	;volatile
  9493  13A3  0008               	return
  9494  13A4                     __end_of_Set_finish_flag:	
  9495                           
  9496                           	psect	text43
  9497  1484                     __ptext43:	
  9498 ;; *************** function _SendCmd_1621 *****************
  9499 ;; Defined at:
  9500 ;;		line 62 in file "mcc_generated_files/ht1621.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;  command         1    wreg     unsigned char 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  command         1    6[BANK0 ] unsigned char 
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      void 
  9507 ;; Registers used:
  9508 ;;		wreg, status,2, status,0, pclath, cstack
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;Total ram usage:        2 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    4
  9521 ;; This function calls:
  9522 ;;		_SendBit_1621
  9523 ;; This function is called by:
  9524 ;;		_main
  9525 ;;		_Key_Process
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           
  9530                           ;psect for function _SendCmd_1621
  9531  1484                     _SendCmd_1621:	
  9532                           
  9533                           ;incstack = 0
  9534                           ; Regs used in _SendCmd_1621: [wreg+status,2+status,0+pclath+cstack]
  9535                           ;SendCmd_1621@command stored from wreg
  9536  1484  0020               	movlb	0	; select bank0
  9537  1485  00A6               	movwf	SendCmd_1621@command
  9538                           
  9539                           ;ht1621.c: 64: do { LATC0 = 0; } while(0);
  9540  1486  0022               	movlb	2	; select bank2
  9541  1487  100E               	bcf	14,0	;volatile
  9542                           
  9543                           ;ht1621.c: 65: SendBit_1621(0x80,4);
  9544  1488  3004               	movlw	4
  9545  1489  0020               	movlb	0	; select bank0
  9546  148A  00A5               	movwf	??_SendCmd_1621
  9547  148B  0825               	movf	??_SendCmd_1621,w
  9548  148C  00A1               	movwf	SendBit_1621@cnt
  9549  148D  3080               	movlw	128
  9550  148E  3196  2632  3194   	fcall	_SendBit_1621
  9551                           
  9552                           ;ht1621.c: 66: SendBit_1621(command,8);
  9553  1491  3008               	movlw	8
  9554  1492  0020               	movlb	0	; select bank0
  9555  1493  00A5               	movwf	??_SendCmd_1621
  9556  1494  0825               	movf	??_SendCmd_1621,w
  9557  1495  00A1               	movwf	SendBit_1621@cnt
  9558  1496  0826               	movf	SendCmd_1621@command,w
  9559  1497  3196  2632         	fcall	_SendBit_1621
  9560                           
  9561                           ;ht1621.c: 67: do { LATC0 = 1; } while(0);
  9562  1499  0022               	movlb	2	; select bank2
  9563  149A  140E               	bsf	14,0	;volatile
  9564  149B  0008               	return
  9565  149C                     __end_of_SendCmd_1621:	
  9566                           
  9567                           	psect	text44
  9568  1632                     __ptext44:	
  9569 ;; *************** function _SendBit_1621 *****************
  9570 ;; Defined at:
  9571 ;;		line 22 in file "mcc_generated_files/ht1621.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  data            1    wreg     unsigned char 
  9574 ;;  cnt             1    1[BANK0 ] unsigned char 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  data            1    3[BANK0 ] unsigned char 
  9577 ;;  i               1    4[BANK0 ] unsigned char 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  1    wreg      void 
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9587 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;Total ram usage:        4 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    3
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		_SendCmd_1621
  9598 ;;		_WriteAll_1621
  9599 ;;		_Write_1621
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603                           
  9604                           ;psect for function _SendBit_1621
  9605  1632                     _SendBit_1621:	
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in _SendBit_1621: [wreg+status,2+status,0]
  9609                           ;SendBit_1621@data stored from wreg
  9610  1632  0020               	movlb	0	; select bank0
  9611  1633  00A3               	movwf	SendBit_1621@data
  9612                           
  9613                           ;ht1621.c: 24: unsigned char i;
  9614                           ;ht1621.c: 25: for(i =0; i <cnt; i ++)
  9615  1634  01A4               	clrf	SendBit_1621@i
  9616  1635                     l5392:	
  9617  1635  0821               	movf	SendBit_1621@cnt,w
  9618  1636  0224               	subwf	SendBit_1621@i,w
  9619  1637  1803               	btfsc	3,0
  9620  1638  0008               	return
  9621                           
  9622                           ;ht1621.c: 26: {
  9623                           ;ht1621.c: 27: if((data&0x80)==0) do { LATC2 = 0; } while(0);
  9624  1639  1BA3               	btfsc	SendBit_1621@data,7
  9625  163A  2E3E               	goto	l727
  9626  163B  0022               	movlb	2	; select bank2
  9627  163C  110E               	bcf	14,2	;volatile
  9628  163D  2E40               	goto	l729
  9629  163E                     l727:	
  9630                           ;ht1621.c: 28: else do { LATC2 = 1; } while(0);
  9631                           
  9632  163E  0022               	movlb	2	; select bank2
  9633  163F  150E               	bsf	14,2	;volatile
  9634  1640                     l729:	
  9635                           ;ht1621.c: 29: do { LATC1 = 0; } while(0);
  9636                           
  9637  1640  108E               	bcf	14,1	;volatile
  9638                           
  9639                           ;ht1621.c: 30: _delay((unsigned long)((1)*(4000000/4000.0)));
  9640  1641  30F9               	movlw	249
  9641  1642  0020               	movlb	0	; select bank0
  9642  1643  00A2               	movwf	??_SendBit_1621
  9643  1644                     u6207:	
  9644  1644  0000               	nop
  9645  1645  0BA2               	decfsz	??_SendBit_1621,f
  9646  1646  2E44               	goto	u6207
  9647  1647  3200               	nop2	;nop
  9648  1648  0000               	nop
  9649                           
  9650                           ;ht1621.c: 31: do { LATC1 = 1; } while(0);
  9651  1649  0022               	movlb	2	; select bank2
  9652  164A  148E               	bsf	14,1	;volatile
  9653                           
  9654                           ;ht1621.c: 32: data<<=1;
  9655  164B  1003               	clrc
  9656  164C  0020               	movlb	0	; select bank0
  9657  164D  0DA3               	rlf	SendBit_1621@data,f
  9658  164E  3001               	movlw	1
  9659  164F  00A2               	movwf	??_SendBit_1621
  9660  1650  0822               	movf	??_SendBit_1621,w
  9661  1651  07A4               	addwf	SendBit_1621@i,f
  9662  1652  2E35               	goto	l5392
  9663  1653                     __end_of_SendBit_1621:	
  9664                           
  9665                           	psect	text45
  9666  16D8                     __ptext45:	
  9667 ;; *************** function _Key_Scan *****************
  9668 ;; Defined at:
  9669 ;;		line 20 in file "mcc_generated_files/key.c"
  9670 ;; Parameters:    Size  Location     Type
  9671 ;;		None
  9672 ;; Auto vars:     Size  Location     Type
  9673 ;;  Key_val         1    3[BANK0 ] unsigned char 
  9674 ;; Return value:  Size  Location     Type
  9675 ;;                  1    wreg      unsigned char 
  9676 ;; Registers used:
  9677 ;;		wreg
  9678 ;; Tracked objects:
  9679 ;;		On entry : 0/0
  9680 ;;		On exit  : 0/0
  9681 ;;		Unchanged: 0/0
  9682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;Total ram usage:        3 bytes
  9688 ;; Hardware stack levels used:    1
  9689 ;; Hardware stack levels required when called:    3
  9690 ;; This function calls:
  9691 ;;		Nothing
  9692 ;; This function is called by:
  9693 ;;		_Key_Process
  9694 ;; This function uses a non-reentrant model
  9695 ;;
  9696                           
  9697                           
  9698                           ;psect for function _Key_Scan
  9699  16D8                     _Key_Scan:	
  9700                           
  9701                           ;key.c: 22: unsigned char Key_val=0xff;
  9702                           
  9703                           ;incstack = 0
  9704                           ; Regs used in _Key_Scan: [wreg]
  9705  16D8  30FF               	movlw	255
  9706  16D9  0020               	movlb	0	; select bank0
  9707  16DA  00A1               	movwf	??_Key_Scan
  9708  16DB  0821               	movf	??_Key_Scan,w
  9709  16DC  00A3               	movwf	Key_Scan@Key_val
  9710                           
  9711                           ;key.c: 23: if( RA7 == 0 || RB5 == 0 )
  9712  16DD  1F8C               	btfss	12,7	;volatile
  9713  16DE  2EE1               	goto	l6218
  9714  16DF  1A8D               	btfsc	13,5	;volatile
  9715  16E0  2EF9               	goto	l962
  9716  16E1                     l6218:	
  9717                           
  9718                           ;key.c: 24: {
  9719                           ;key.c: 25: _delay((unsigned long)((10)*(4000000/4000.0)));
  9720  16E1  300D               	movlw	13
  9721  16E2  00A2               	movwf	??_Key_Scan+1
  9722  16E3  30FB               	movlw	251
  9723  16E4  00A1               	movwf	??_Key_Scan
  9724  16E5                     u6217:	
  9725  16E5  0BA1               	decfsz	??_Key_Scan,f
  9726  16E6  2EE5               	goto	u6217
  9727  16E7  0BA2               	decfsz	??_Key_Scan+1,f
  9728  16E8  2EE5               	goto	u6217
  9729  16E9  3200               	nop2
  9730                           
  9731                           ;key.c: 26: if( RA7 == 0 || RB5 == 0)
  9732  16EA  0020               	movlb	0	; select bank0
  9733  16EB  1F8C               	btfss	12,7	;volatile
  9734  16EC  2EEF               	goto	l967
  9735  16ED  1A8D               	btfsc	13,5	;volatile
  9736  16EE  2EF9               	goto	l962
  9737  16EF                     l967:	
  9738                           
  9739                           ;key.c: 27: {
  9740                           ;key.c: 28: if(RB5 == 0 ) Key_val = 0x01;
  9741  16EF  1A8D               	btfsc	13,5	;volatile
  9742  16F0  2EF3               	goto	l968
  9743  16F1  01A3               	clrf	Key_Scan@Key_val
  9744  16F2  0AA3               	incf	Key_Scan@Key_val,f
  9745  16F3                     l968:	
  9746                           
  9747                           ;key.c: 29: if(RA7 == 0 ) Key_val = 0x02;
  9748  16F3  1B8C               	btfsc	12,7	;volatile
  9749  16F4  2EF9               	goto	l962
  9750  16F5  3002               	movlw	2
  9751  16F6  00A1               	movwf	??_Key_Scan
  9752  16F7  0821               	movf	??_Key_Scan,w
  9753  16F8  00A3               	movwf	Key_Scan@Key_val
  9754  16F9                     l962:	
  9755                           
  9756                           ;key.c: 30: }
  9757                           ;key.c: 31: }
  9758                           ;key.c: 32: return Key_val;
  9759  16F9  0823               	movf	Key_Scan@Key_val,w
  9760  16FA  0008               	return
  9761  16FB                     __end_of_Key_Scan:	
  9762                           
  9763                           	psect	text46
  9764  1411                     __ptext46:	
  9765 ;; *************** function _Com_Process *****************
  9766 ;; Defined at:
  9767 ;;		line 19 in file "mcc_generated_files/com.c"
  9768 ;; Parameters:    Size  Location     Type
  9769 ;;		None
  9770 ;; Auto vars:     Size  Location     Type
  9771 ;;		None
  9772 ;; Return value:  Size  Location     Type
  9773 ;;                  2  382[None  ] int 
  9774 ;; Registers used:
  9775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9776 ;; Tracked objects:
  9777 ;;		On entry : 0/0
  9778 ;;		On exit  : 0/0
  9779 ;;		Unchanged: 0/0
  9780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;Total ram usage:        0 bytes
  9786 ;; Hardware stack levels used:    1
  9787 ;; Hardware stack levels required when called:    7
  9788 ;; This function calls:
  9789 ;;		_Inf_to_Com
  9790 ;;		_Set_time_from_Com
  9791 ;; This function is called by:
  9792 ;;		_main
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           
  9797                           ;psect for function _Com_Process
  9798  1411                     _Com_Process:	
  9799                           
  9800                           ;com.c: 21: if(Set_time_cmd_flag == 1)
  9801                           
  9802                           ;incstack = 0
  9803                           ; Regs used in _Com_Process: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9804  1411  0022               	movlb	2	; select bank2
  9805  1412  033B               	decf	_Set_time_cmd_flag^(0+256),w
  9806  1413  1D03               	btfss	3,2
  9807  1414  2C1A               	goto	l6466
  9808                           
  9809                           ;com.c: 22: {
  9810                           ;com.c: 23: Set_time_from_Com();
  9811  1415  3189  2147  3194   	fcall	_Set_time_from_Com
  9812                           
  9813                           ;com.c: 24: Set_time_cmd_flag = 0;
  9814  1418  0022               	movlb	2	; select bank2
  9815  1419  01BB               	clrf	_Set_time_cmd_flag^(0+256)
  9816  141A                     l6466:	
  9817                           
  9818                           ;com.c: 25: }
  9819                           ;com.c: 26: if(Inf_cmd_flag == 1)
  9820  141A  0338               	decf	_Inf_cmd_flag^(0+256),w
  9821  141B  1D03               	btfss	3,2
  9822  141C  0008               	return
  9823                           
  9824                           ;com.c: 27: {
  9825                           ;com.c: 28: Inf_to_Com();
  9826  141D  3185  2500         	fcall	_Inf_to_Com
  9827                           
  9828                           ;com.c: 29: Inf_cmd_flag = 0;
  9829  141F  0022               	movlb	2	; select bank2
  9830  1420  01B8               	clrf	_Inf_cmd_flag^(0+256)
  9831  1421  0008               	return
  9832  1422                     __end_of_Com_Process:	
  9833                           
  9834                           	psect	text47
  9835  0947                     __ptext47:	
  9836 ;; *************** function _Set_time_from_Com *****************
  9837 ;; Defined at:
  9838 ;;		line 39 in file "mcc_generated_files/com.c"
  9839 ;; Parameters:    Size  Location     Type
  9840 ;;		None
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;		None
  9843 ;; Return value:  Size  Location     Type
  9844 ;;                  1    wreg      void 
  9845 ;; Registers used:
  9846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9847 ;; Tracked objects:
  9848 ;;		On entry : 0/0
  9849 ;;		On exit  : 0/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;Total ram usage:        1 bytes
  9857 ;; Hardware stack levels used:    1
  9858 ;; Hardware stack levels required when called:    6
  9859 ;; This function calls:
  9860 ;;		_Bq32k_Rtc_Read_Time
  9861 ;;		_Bq32k_Rtc_Write_Time
  9862 ;;		_Read_time_to_Com
  9863 ;; This function is called by:
  9864 ;;		_Com_Process
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           
  9869                           ;psect for function _Set_time_from_Com
  9870  0947                     _Set_time_from_Com:	
  9871                           
  9872                           ;com.c: 41: rtc_tm.years = Usart_Rx_Buff[4];
  9873                           
  9874                           ;incstack = 0
  9875                           ; Regs used in _Set_time_from_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9876  0947  0023               	movlb	3	; select bank3
  9877  0948  0838               	movf	(_Usart_Rx_Buff^(0+384)+4),w
  9878  0949  0020               	movlb	0	; select bank0
  9879  094A  00BF               	movwf	??_Set_time_from_Com
  9880  094B  083F               	movf	??_Set_time_from_Com,w
  9881  094C  0022               	movlb	2	; select bank2
  9882  094D  00E8               	movwf	(_rtc_tm^(0+256)+6)
  9883                           
  9884                           ;com.c: 42: rtc_tm.month= Usart_Rx_Buff[5];
  9885  094E  0023               	movlb	3	; select bank3
  9886  094F  0839               	movf	(_Usart_Rx_Buff^(0+384)+5),w
  9887  0950  0020               	movlb	0	; select bank0
  9888  0951  00BF               	movwf	??_Set_time_from_Com
  9889  0952  083F               	movf	??_Set_time_from_Com,w
  9890  0953  0022               	movlb	2	; select bank2
  9891  0954  00E7               	movwf	(_rtc_tm^(0+256)+5)
  9892                           
  9893                           ;com.c: 43: rtc_tm.date= Usart_Rx_Buff[6];
  9894  0955  0023               	movlb	3	; select bank3
  9895  0956  083A               	movf	(_Usart_Rx_Buff^(0+384)+6),w
  9896  0957  0020               	movlb	0	; select bank0
  9897  0958  00BF               	movwf	??_Set_time_from_Com
  9898  0959  083F               	movf	??_Set_time_from_Com,w
  9899  095A  0022               	movlb	2	; select bank2
  9900  095B  00E6               	movwf	(_rtc_tm^(0+256)+4)
  9901                           
  9902                           ;com.c: 44: rtc_tm.hours= Usart_Rx_Buff[7];
  9903  095C  0023               	movlb	3	; select bank3
  9904  095D  083B               	movf	(_Usart_Rx_Buff^(0+384)+7),w
  9905  095E  0020               	movlb	0	; select bank0
  9906  095F  00BF               	movwf	??_Set_time_from_Com
  9907  0960  083F               	movf	??_Set_time_from_Com,w
  9908  0961  0022               	movlb	2	; select bank2
  9909  0962  00E4               	movwf	(_rtc_tm^(0+256)+2)
  9910                           
  9911                           ;com.c: 45: rtc_tm.minutes= Usart_Rx_Buff[8];
  9912  0963  0023               	movlb	3	; select bank3
  9913  0964  083C               	movf	(_Usart_Rx_Buff^(0+384)+8),w
  9914  0965  0020               	movlb	0	; select bank0
  9915  0966  00BF               	movwf	??_Set_time_from_Com
  9916  0967  083F               	movf	??_Set_time_from_Com,w
  9917  0968  0022               	movlb	2	; select bank2
  9918  0969  00E3               	movwf	(_rtc_tm^(0+256)+1)
  9919                           
  9920                           ;com.c: 46: rtc_tm.seconds= Usart_Rx_Buff[9];
  9921  096A  0023               	movlb	3	; select bank3
  9922  096B  083D               	movf	(_Usart_Rx_Buff^(0+384)+9),w
  9923  096C  0020               	movlb	0	; select bank0
  9924  096D  00BF               	movwf	??_Set_time_from_Com
  9925  096E  083F               	movf	??_Set_time_from_Com,w
  9926  096F  0022               	movlb	2	; select bank2
  9927  0970  00E2               	movwf	_rtc_tm^(0+256)
  9928                           
  9929                           ;com.c: 47: rtc_tm.wday= Usart_Rx_Buff[10];
  9930  0971  0023               	movlb	3	; select bank3
  9931  0972  083E               	movf	(_Usart_Rx_Buff^(0+384)+10),w
  9932  0973  0020               	movlb	0	; select bank0
  9933  0974  00BF               	movwf	??_Set_time_from_Com
  9934  0975  083F               	movf	??_Set_time_from_Com,w
  9935  0976  0022               	movlb	2	; select bank2
  9936  0977  00E5               	movwf	(_rtc_tm^(0+256)+3)
  9937                           
  9938                           ;com.c: 48: Bq32k_Rtc_Write_Time(&rtc_tm);
  9939  0978  3062               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  9940  0979  318B  23EA  3189   	fcall	_Bq32k_Rtc_Write_Time
  9941                           
  9942                           ;com.c: 49: Bq32k_Rtc_Read_Time(&rtc_tm);
  9943  097C  3062               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  9944  097D  318D  2523  3189   	fcall	_Bq32k_Rtc_Read_Time
  9945                           
  9946                           ;com.c: 50: Read_time_to_Com();
  9947  0980  318C  2451         	fcall	_Read_time_to_Com
  9948  0982  0008               	return
  9949  0983                     __end_of_Set_time_from_Com:	
  9950                           
  9951                           	psect	text48
  9952  0C51                     __ptext48:	
  9953 ;; *************** function _Read_time_to_Com *****************
  9954 ;; Defined at:
  9955 ;;		line 59 in file "mcc_generated_files/com.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;		None
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  tmp_buf        16   12[BANK0 ] unsigned char [16]
  9960 ;;  crc_tmp         2   28[BANK0 ] unsigned int 
  9961 ;;  i               1   30[BANK0 ] unsigned char 
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  1    wreg      void 
  9964 ;; Registers used:
  9965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;Total ram usage:       20 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    4
  9978 ;; This function calls:
  9979 ;;		_CRC_cal
  9980 ;;		_EUSART_Write
  9981 ;; This function is called by:
  9982 ;;		_Set_time_from_Com
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           
  9987                           ;psect for function _Read_time_to_Com
  9988  0C51                     _Read_time_to_Com:	
  9989                           
  9990                           ;com.c: 61: unsigned int crc_tmp=0;
  9991                           
  9992                           ;incstack = 0
  9993                           ; Regs used in _Read_time_to_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9994  0C51  0020               	movlb	0	; select bank0
  9995  0C52  01BC               	clrf	Read_time_to_Com@crc_tmp
  9996  0C53  01BD               	clrf	Read_time_to_Com@crc_tmp+1
  9997                           
  9998                           ;com.c: 62: unsigned char tmp_buf[16];
  9999                           ;com.c: 63: unsigned char i;
 10000                           ;com.c: 64: tmp_buf[0] = 0xfe;
 10001  0C54  30FE               	movlw	254
 10002  0C55  00AB               	movwf	??_Read_time_to_Com
 10003  0C56  082B               	movf	??_Read_time_to_Com,w
 10004  0C57  00AC               	movwf	Read_time_to_Com@tmp_buf
 10005                           
 10006                           ;com.c: 65: tmp_buf[1] = 0xfe;
 10007  0C58  30FE               	movlw	254
 10008  0C59  00AB               	movwf	??_Read_time_to_Com
 10009  0C5A  082B               	movf	??_Read_time_to_Com,w
 10010  0C5B  00AD               	movwf	Read_time_to_Com@tmp_buf+1
 10011                           
 10012                           ;com.c: 66: tmp_buf[2] = 0X02;
 10013  0C5C  3002               	movlw	2
 10014  0C5D  00AB               	movwf	??_Read_time_to_Com
 10015  0C5E  082B               	movf	??_Read_time_to_Com,w
 10016  0C5F  00AE               	movwf	Read_time_to_Com@tmp_buf+2
 10017                           
 10018                           ;com.c: 67: tmp_buf[3] = 0x07;
 10019  0C60  3007               	movlw	7
 10020  0C61  00AB               	movwf	??_Read_time_to_Com
 10021  0C62  082B               	movf	??_Read_time_to_Com,w
 10022  0C63  00AF               	movwf	Read_time_to_Com@tmp_buf+3
 10023                           
 10024                           ;com.c: 68: tmp_buf[4] = rtc_tm.years;
 10025  0C64  0022               	movlb	2	; select bank2
 10026  0C65  0868               	movf	(_rtc_tm^(0+256)+6),w
 10027  0C66  0020               	movlb	0	; select bank0
 10028  0C67  00AB               	movwf	??_Read_time_to_Com
 10029  0C68  082B               	movf	??_Read_time_to_Com,w
 10030  0C69  00B0               	movwf	Read_time_to_Com@tmp_buf+4
 10031                           
 10032                           ;com.c: 69: tmp_buf[5] = rtc_tm.month;
 10033  0C6A  0022               	movlb	2	; select bank2
 10034  0C6B  0867               	movf	(_rtc_tm^(0+256)+5),w
 10035  0C6C  0020               	movlb	0	; select bank0
 10036  0C6D  00AB               	movwf	??_Read_time_to_Com
 10037  0C6E  082B               	movf	??_Read_time_to_Com,w
 10038  0C6F  00B1               	movwf	Read_time_to_Com@tmp_buf+5
 10039                           
 10040                           ;com.c: 70: tmp_buf[6] = rtc_tm.date;
 10041  0C70  0022               	movlb	2	; select bank2
 10042  0C71  0866               	movf	(_rtc_tm^(0+256)+4),w
 10043  0C72  0020               	movlb	0	; select bank0
 10044  0C73  00AB               	movwf	??_Read_time_to_Com
 10045  0C74  082B               	movf	??_Read_time_to_Com,w
 10046  0C75  00B2               	movwf	Read_time_to_Com@tmp_buf+6
 10047                           
 10048                           ;com.c: 71: tmp_buf[7] = rtc_tm.hours;
 10049  0C76  0022               	movlb	2	; select bank2
 10050  0C77  0864               	movf	(_rtc_tm^(0+256)+2),w
 10051  0C78  0020               	movlb	0	; select bank0
 10052  0C79  00AB               	movwf	??_Read_time_to_Com
 10053  0C7A  082B               	movf	??_Read_time_to_Com,w
 10054  0C7B  00B3               	movwf	Read_time_to_Com@tmp_buf+7
 10055                           
 10056                           ;com.c: 72: tmp_buf[8] = rtc_tm.minutes;
 10057  0C7C  0022               	movlb	2	; select bank2
 10058  0C7D  0863               	movf	(_rtc_tm^(0+256)+1),w
 10059  0C7E  0020               	movlb	0	; select bank0
 10060  0C7F  00AB               	movwf	??_Read_time_to_Com
 10061  0C80  082B               	movf	??_Read_time_to_Com,w
 10062  0C81  00B4               	movwf	Read_time_to_Com@tmp_buf+8
 10063                           
 10064                           ;com.c: 73: tmp_buf[9] = rtc_tm.seconds;
 10065  0C82  0022               	movlb	2	; select bank2
 10066  0C83  0862               	movf	_rtc_tm^(0+256),w
 10067  0C84  0020               	movlb	0	; select bank0
 10068  0C85  00AB               	movwf	??_Read_time_to_Com
 10069  0C86  082B               	movf	??_Read_time_to_Com,w
 10070  0C87  00B5               	movwf	Read_time_to_Com@tmp_buf+9
 10071                           
 10072                           ;com.c: 74: tmp_buf[10] = rtc_tm.wday;
 10073  0C88  0022               	movlb	2	; select bank2
 10074  0C89  0865               	movf	(_rtc_tm^(0+256)+3),w
 10075  0C8A  0020               	movlb	0	; select bank0
 10076  0C8B  00AB               	movwf	??_Read_time_to_Com
 10077  0C8C  082B               	movf	??_Read_time_to_Com,w
 10078  0C8D  00B6               	movwf	Read_time_to_Com@tmp_buf+10
 10079                           
 10080                           ;com.c: 75: crc_tmp = CRC_cal(tmp_buf,14);
 10081  0C8E  300E               	movlw	14
 10082  0C8F  00AB               	movwf	??_Read_time_to_Com
 10083  0C90  082B               	movf	??_Read_time_to_Com,w
 10084  0C91  00A1               	movwf	CRC_cal@frame_len
 10085  0C92  302C               	movlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
 10086  0C93  318E  26F0  318C   	fcall	_CRC_cal
 10087  0C96  0020               	movlb	0	; select bank0
 10088  0C97  0822               	movf	?_CRC_cal+1,w
 10089  0C98  00BD               	movwf	Read_time_to_Com@crc_tmp+1
 10090  0C99  0821               	movf	?_CRC_cal,w
 10091  0C9A  00BC               	movwf	Read_time_to_Com@crc_tmp
 10092                           
 10093                           ;com.c: 76: tmp_buf[11] = crc_tmp >>8;
 10094  0C9B  083D               	movf	Read_time_to_Com@crc_tmp+1,w
 10095  0C9C  00AB               	movwf	??_Read_time_to_Com
 10096  0C9D  082B               	movf	??_Read_time_to_Com,w
 10097  0C9E  00B7               	movwf	Read_time_to_Com@tmp_buf+11
 10098                           
 10099                           ;com.c: 77: tmp_buf[12] = crc_tmp & 0xff;
 10100  0C9F  083C               	movf	Read_time_to_Com@crc_tmp,w
 10101  0CA0  00AB               	movwf	??_Read_time_to_Com
 10102  0CA1  082B               	movf	??_Read_time_to_Com,w
 10103  0CA2  00B8               	movwf	Read_time_to_Com@tmp_buf+12
 10104                           
 10105                           ;com.c: 78: tmp_buf[13] = 0xbb;
 10106  0CA3  30BB               	movlw	187
 10107  0CA4  00AB               	movwf	??_Read_time_to_Com
 10108  0CA5  082B               	movf	??_Read_time_to_Com,w
 10109  0CA6  00B9               	movwf	Read_time_to_Com@tmp_buf+13
 10110                           
 10111                           ;com.c: 79: for(i=0;i<14;i++)
 10112  0CA7  01BE               	clrf	Read_time_to_Com@i
 10113  0CA8                     L11:	
 10114  0CA8  300E               	movlw	14
 10115  0CA9  023E               	subwf	Read_time_to_Com@i,w
 10116  0CAA  1803               	btfsc	3,0
 10117  0CAB  0008               	return
 10118                           
 10119                           ;com.c: 80: {
 10120                           ;com.c: 81: EUSART_Write(tmp_buf[i]);
 10121  0CAC  083E               	movf	Read_time_to_Com@i,w
 10122  0CAD  3E2C               	addlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
 10123  0CAE  0086               	movwf	6
 10124  0CAF  0187               	clrf	7
 10125  0CB0  0801               	movf	1,w
 10126  0CB1  3193  23E1  318C   	fcall	_EUSART_Write
 10127  0CB4  3001               	movlw	1
 10128  0CB5  0020               	movlb	0	; select bank0
 10129  0CB6  00AB               	movwf	??_Read_time_to_Com
 10130  0CB7  082B               	movf	??_Read_time_to_Com,w
 10131  0CB8  07BE               	addwf	Read_time_to_Com@i,f
 10132  0CB9  2CA8               	goto	L11
 10133  0CBA                     __end_of_Read_time_to_Com:	
 10134                           
 10135                           	psect	text49
 10136  0BEA                     __ptext49:	
 10137 ;; *************** function _Bq32k_Rtc_Write_Time *****************
 10138 ;; Defined at:
 10139 ;;		line 53 in file "mcc_generated_files/bq32k.c"
 10140 ;; Parameters:    Size  Location     Type
 10141 ;;  p               1    wreg     PTR struct bq32k_regs
 10142 ;;		 -> rtc_tm(7), 
 10143 ;; Auto vars:     Size  Location     Type
 10144 ;;  p               1   30[BANK0 ] PTR struct bq32k_regs
 10145 ;;		 -> rtc_tm(7), 
 10146 ;;  temp           10   20[BANK0 ] unsigned char [10]
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  1    wreg      void 
 10149 ;; Registers used:
 10150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;Total ram usage:       13 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    5
 10163 ;; This function calls:
 10164 ;;		_I2C_Send_Buffer
 10165 ;;		_bin2bcd
 10166 ;; This function is called by:
 10167 ;;		_Set_time_from_Com
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171                           
 10172                           ;psect for function _Bq32k_Rtc_Write_Time
 10173  0BEA                     _Bq32k_Rtc_Write_Time:	
 10174                           
 10175                           ;incstack = 0
 10176                           ; Regs used in _Bq32k_Rtc_Write_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10177                           ;Bq32k_Rtc_Write_Time@p stored from wreg
 10178  0BEA  0020               	movlb	0	; select bank0
 10179  0BEB  00BE               	movwf	Bq32k_Rtc_Write_Time@p
 10180                           
 10181                           ;bq32k.c: 55: unsigned char temp[10] ;
 10182                           ;bq32k.c: 56: temp[0] = bin2bcd(p->seconds);
 10183  0BEC  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10184  0BED  0086               	movwf	6
 10185  0BEE  3001               	movlw	1	; select bank2/3
 10186  0BEF  0087               	movwf	7
 10187  0BF0  0801               	movf	1,w
 10188  0BF1  3197  27A2  318B   	fcall	_bin2bcd
 10189  0BF4  0020               	movlb	0	; select bank0
 10190  0BF5  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10191  0BF6  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10192  0BF7  00B4               	movwf	Bq32k_Rtc_Write_Time@temp
 10193                           
 10194                           ;bq32k.c: 57: temp[1] = bin2bcd(p->minutes);
 10195  0BF8  0A3E               	incf	Bq32k_Rtc_Write_Time@p,w
 10196  0BF9  0086               	movwf	6
 10197  0BFA  3001               	movlw	1	; select bank2/3
 10198  0BFB  0087               	movwf	7
 10199  0BFC  0801               	movf	1,w
 10200  0BFD  3197  27A2  318B   	fcall	_bin2bcd
 10201  0C00  0020               	movlb	0	; select bank0
 10202  0C01  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10203  0C02  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10204  0C03  00B5               	movwf	Bq32k_Rtc_Write_Time@temp+1
 10205                           
 10206                           ;bq32k.c: 58: temp[2] = bin2bcd(p->hours);
 10207  0C04  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10208  0C05  3E02               	addlw	2
 10209  0C06  0086               	movwf	6
 10210  0C07  3001               	movlw	1	; select bank2/3
 10211  0C08  0087               	movwf	7
 10212  0C09  0801               	movf	1,w
 10213  0C0A  3197  27A2  318B   	fcall	_bin2bcd
 10214  0C0D  0020               	movlb	0	; select bank0
 10215  0C0E  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10216  0C0F  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10217  0C10  00B6               	movwf	Bq32k_Rtc_Write_Time@temp+2
 10218                           
 10219                           ;bq32k.c: 59: temp[3] = bin2bcd(p->wday);
 10220  0C11  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10221  0C12  3E03               	addlw	3
 10222  0C13  0086               	movwf	6
 10223  0C14  3001               	movlw	1	; select bank2/3
 10224  0C15  0087               	movwf	7
 10225  0C16  0801               	movf	1,w
 10226  0C17  3197  27A2  318B   	fcall	_bin2bcd
 10227  0C1A  0020               	movlb	0	; select bank0
 10228  0C1B  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10229  0C1C  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10230  0C1D  00B7               	movwf	Bq32k_Rtc_Write_Time@temp+3
 10231                           
 10232                           ;bq32k.c: 60: temp[4] = bin2bcd(p->date);
 10233  0C1E  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10234  0C1F  3E04               	addlw	4
 10235  0C20  0086               	movwf	6
 10236  0C21  3001               	movlw	1	; select bank2/3
 10237  0C22  0087               	movwf	7
 10238  0C23  0801               	movf	1,w
 10239  0C24  3197  27A2  318B   	fcall	_bin2bcd
 10240  0C27  0020               	movlb	0	; select bank0
 10241  0C28  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10242  0C29  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10243  0C2A  00B8               	movwf	Bq32k_Rtc_Write_Time@temp+4
 10244                           
 10245                           ;bq32k.c: 61: temp[5] = bin2bcd(p->month);
 10246  0C2B  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10247  0C2C  3E05               	addlw	5
 10248  0C2D  0086               	movwf	6
 10249  0C2E  3001               	movlw	1	; select bank2/3
 10250  0C2F  0087               	movwf	7
 10251  0C30  0801               	movf	1,w
 10252  0C31  3197  27A2  318B   	fcall	_bin2bcd
 10253  0C34  0020               	movlb	0	; select bank0
 10254  0C35  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10255  0C36  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10256  0C37  00B9               	movwf	Bq32k_Rtc_Write_Time@temp+5
 10257                           
 10258                           ;bq32k.c: 62: temp[6] = bin2bcd(p->years);
 10259  0C38  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10260  0C39  3E06               	addlw	6
 10261  0C3A  0086               	movwf	6
 10262  0C3B  3001               	movlw	1	; select bank2/3
 10263  0C3C  0087               	movwf	7
 10264  0C3D  0801               	movf	1,w
 10265  0C3E  3197  27A2  318B   	fcall	_bin2bcd
 10266  0C41  0020               	movlb	0	; select bank0
 10267  0C42  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10268  0C43  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10269  0C44  00BA               	movwf	Bq32k_Rtc_Write_Time@temp+6
 10270                           
 10271                           ;bq32k.c: 63: I2C_Send_Buffer( 0 , temp , 7);
 10272  0C45  3034               	movlw	(low (Bq32k_Rtc_Write_Time@temp| 0))& (0+255)
 10273  0C46  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10274  0C47  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10275  0C48  00A4               	movwf	I2C_Send_Buffer@buff
 10276  0C49  3007               	movlw	7
 10277  0C4A  00B3               	movwf	??_Bq32k_Rtc_Write_Time+1
 10278  0C4B  0833               	movf	??_Bq32k_Rtc_Write_Time+1,w
 10279  0C4C  00A5               	movwf	I2C_Send_Buffer@Length
 10280  0C4D  3000               	movlw	0
 10281  0C4E  3189  210C         	fcall	_I2C_Send_Buffer
 10282  0C50  0008               	return
 10283  0C51                     __end_of_Bq32k_Rtc_Write_Time:	
 10284                           
 10285                           	psect	text50
 10286  17A2                     __ptext50:	
 10287 ;; *************** function _bin2bcd *****************
 10288 ;; Defined at:
 10289 ;;		line 83 in file "mcc_generated_files/bq32k.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;  val             1    wreg     unsigned char 
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;  val             1   17[BANK0 ] unsigned char 
 10294 ;; Return value:  Size  Location     Type
 10295 ;;                  1    wreg      unsigned char 
 10296 ;; Registers used:
 10297 ;;		wreg, status,2, status,0, pclath, cstack
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;Total ram usage:        8 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    4
 10310 ;; This function calls:
 10311 ;;		___awdiv
 10312 ;;		___awmod
 10313 ;; This function is called by:
 10314 ;;		_Bq32k_Rtc_Write_Time
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           
 10319                           ;psect for function _bin2bcd
 10320  17A2                     _bin2bcd:	
 10321                           
 10322                           ;incstack = 0
 10323                           ; Regs used in _bin2bcd: [wreg+status,2+status,0+pclath+cstack]
 10324                           ;bin2bcd@val stored from wreg
 10325  17A2  0020               	movlb	0	; select bank0
 10326  17A3  00B1               	movwf	bin2bcd@val
 10327                           
 10328                           ;bq32k.c: 85: return ((val / 10) << 4) + val % 10;
 10329  17A4  300A               	movlw	10
 10330  17A5  00A1               	movwf	___awmod@divisor
 10331  17A6  3000               	movlw	0
 10332  17A7  00A2               	movwf	___awmod@divisor+1
 10333  17A8  0831               	movf	bin2bcd@val,w
 10334  17A9  00AA               	movwf	??_bin2bcd
 10335  17AA  01AB               	clrf	??_bin2bcd+1
 10336  17AB  082A               	movf	??_bin2bcd,w
 10337  17AC  00A3               	movwf	___awmod@dividend
 10338  17AD  082B               	movf	??_bin2bcd+1,w
 10339  17AE  00A4               	movwf	___awmod@dividend+1
 10340  17AF  3189  21C1  3197   	fcall	___awmod
 10341  17B2  0020               	movlb	0	; select bank0
 10342  17B3  0821               	movf	?___awmod,w
 10343  17B4  00AC               	movwf	??_bin2bcd+2
 10344  17B5  0822               	movf	?___awmod+1,w
 10345  17B6  00AD               	movwf	??_bin2bcd+3
 10346  17B7  300A               	movlw	10
 10347  17B8  00A1               	movwf	___awdiv@divisor
 10348  17B9  3000               	movlw	0
 10349  17BA  00A2               	movwf	___awdiv@divisor+1
 10350  17BB  0831               	movf	bin2bcd@val,w
 10351  17BC  00AE               	movwf	??_bin2bcd+4
 10352  17BD  01AF               	clrf	??_bin2bcd+5
 10353  17BE  082E               	movf	??_bin2bcd+4,w
 10354  17BF  00A3               	movwf	___awdiv@dividend
 10355  17C0  082F               	movf	??_bin2bcd+5,w
 10356  17C1  00A4               	movwf	___awdiv@dividend+1
 10357  17C2  318A  22EF  3197   	fcall	___awdiv
 10358  17C5  0020               	movlb	0	; select bank0
 10359  17C6  0821               	movf	?___awdiv,w
 10360  17C7  00B0               	movwf	??_bin2bcd+6
 10361  17C8  3003               	movlw	3
 10362  17C9                     u5455:	
 10363  17C9  35B0               	lslf	??_bin2bcd+6,f
 10364  17CA  3EFF               	addlw	-1
 10365  17CB  1D03               	skipz
 10366  17CC  2FC9               	goto	u5455
 10367  17CD  3530               	lslf	??_bin2bcd+6,w
 10368  17CE  072C               	addwf	??_bin2bcd+2,w
 10369  17CF  0008               	return
 10370  17D0                     __end_of_bin2bcd:	
 10371                           
 10372                           	psect	text51
 10373  09C1                     __ptext51:	
 10374 ;; *************** function ___awmod *****************
 10375 ;; Defined at:
 10376 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;  divisor         2    1[BANK0 ] int 
 10379 ;;  dividend        2    3[BANK0 ] int 
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;  sign            1    7[BANK0 ] unsigned char 
 10382 ;;  counter         1    6[BANK0 ] unsigned char 
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  2    1[BANK0 ] int 
 10385 ;; Registers used:
 10386 ;;		wreg, status,2, status,0
 10387 ;; Tracked objects:
 10388 ;;		On entry : 0/0
 10389 ;;		On exit  : 0/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10392 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;Total ram usage:        7 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; Hardware stack levels required when called:    3
 10399 ;; This function calls:
 10400 ;;		Nothing
 10401 ;; This function is called by:
 10402 ;;		_time_Display
 10403 ;;		_bin2bcd
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           
 10408                           ;psect for function ___awmod
 10409  09C1                     ___awmod:	
 10410                           
 10411                           ;incstack = 0
 10412                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10413  09C1  0020               	movlb	0	; select bank0
 10414  09C2  01A7               	clrf	___awmod@sign
 10415  09C3  1FA4               	btfss	___awmod@dividend+1,7
 10416  09C4  29CC               	goto	l5622
 10417  09C5  09A3               	comf	___awmod@dividend,f
 10418  09C6  09A4               	comf	___awmod@dividend+1,f
 10419  09C7  0AA3               	incf	___awmod@dividend,f
 10420  09C8  1903               	skipnz
 10421  09C9  0AA4               	incf	___awmod@dividend+1,f
 10422  09CA  01A7               	clrf	___awmod@sign
 10423  09CB  0AA7               	incf	___awmod@sign,f
 10424  09CC                     l5622:	
 10425  09CC  1FA2               	btfss	___awmod@divisor+1,7
 10426  09CD  29D3               	goto	l5626
 10427  09CE  09A1               	comf	___awmod@divisor,f
 10428  09CF  09A2               	comf	___awmod@divisor+1,f
 10429  09D0  0AA1               	incf	___awmod@divisor,f
 10430  09D1  1903               	skipnz
 10431  09D2  0AA2               	incf	___awmod@divisor+1,f
 10432  09D3                     l5626:	
 10433  09D3  0821               	movf	___awmod@divisor,w
 10434  09D4  0422               	iorwf	___awmod@divisor+1,w
 10435  09D5  1903               	btfsc	3,2
 10436  09D6  29FA               	goto	l5644
 10437  09D7  01A6               	clrf	___awmod@counter
 10438  09D8  0AA6               	incf	___awmod@counter,f
 10439  09D9                     l5634:	
 10440  09D9  1BA2               	btfsc	___awmod@divisor+1,7
 10441  09DA  29E5               	goto	l5636
 10442  09DB  3001               	movlw	1
 10443  09DC                     u4875:	
 10444  09DC  35A1               	lslf	___awmod@divisor,f
 10445  09DD  0DA2               	rlf	___awmod@divisor+1,f
 10446  09DE  0B89               	decfsz	9,f
 10447  09DF  29DC               	goto	u4875
 10448  09E0  3001               	movlw	1
 10449  09E1  00A5               	movwf	??___awmod
 10450  09E2  0825               	movf	??___awmod,w
 10451  09E3  07A6               	addwf	___awmod@counter,f
 10452  09E4  29D9               	goto	l5634
 10453  09E5                     l5636:	
 10454  09E5  0822               	movf	___awmod@divisor+1,w
 10455  09E6  0224               	subwf	___awmod@dividend+1,w
 10456  09E7  1D03               	skipz
 10457  09E8  29EB               	goto	u4895
 10458  09E9  0821               	movf	___awmod@divisor,w
 10459  09EA  0223               	subwf	___awmod@dividend,w
 10460  09EB                     u4895:	
 10461  09EB  1C03               	skipc
 10462  09EC  29F1               	goto	l5640
 10463  09ED  0821               	movf	___awmod@divisor,w
 10464  09EE  02A3               	subwf	___awmod@dividend,f
 10465  09EF  0822               	movf	___awmod@divisor+1,w
 10466  09F0  3BA4               	subwfb	___awmod@dividend+1,f
 10467  09F1                     l5640:	
 10468  09F1  3001               	movlw	1
 10469  09F2                     u4905:	
 10470  09F2  36A2               	lsrf	___awmod@divisor+1,f
 10471  09F3  0CA1               	rrf	___awmod@divisor,f
 10472  09F4  0B89               	decfsz	9,f
 10473  09F5  29F2               	goto	u4905
 10474  09F6  3001               	movlw	1
 10475  09F7  02A6               	subwf	___awmod@counter,f
 10476  09F8  1D03               	btfss	3,2
 10477  09F9  29E5               	goto	l5636
 10478  09FA                     l5644:	
 10479  09FA  0827               	movf	___awmod@sign,w
 10480  09FB  1903               	btfsc	3,2
 10481  09FC  2A02               	goto	l5648
 10482  09FD  09A3               	comf	___awmod@dividend,f
 10483  09FE  09A4               	comf	___awmod@dividend+1,f
 10484  09FF  0AA3               	incf	___awmod@dividend,f
 10485  0A00  1903               	skipnz
 10486  0A01  0AA4               	incf	___awmod@dividend+1,f
 10487  0A02                     l5648:	
 10488  0A02  0824               	movf	___awmod@dividend+1,w
 10489  0A03  00A2               	movwf	?___awmod+1
 10490  0A04  0823               	movf	___awmod@dividend,w
 10491  0A05  00A1               	movwf	?___awmod
 10492  0A06  0008               	return
 10493  0A07                     __end_of___awmod:	
 10494                           
 10495                           	psect	text52
 10496  0AEF                     __ptext52:	
 10497 ;; *************** function ___awdiv *****************
 10498 ;; Defined at:
 10499 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;  divisor         2    1[BANK0 ] int 
 10502 ;;  dividend        2    3[BANK0 ] int 
 10503 ;; Auto vars:     Size  Location     Type
 10504 ;;  quotient        2    8[BANK0 ] int 
 10505 ;;  sign            1    7[BANK0 ] unsigned char 
 10506 ;;  counter         1    6[BANK0 ] unsigned char 
 10507 ;; Return value:  Size  Location     Type
 10508 ;;                  2    1[BANK0 ] int 
 10509 ;; Registers used:
 10510 ;;		wreg, status,2, status,0
 10511 ;; Tracked objects:
 10512 ;;		On entry : 0/0
 10513 ;;		On exit  : 0/0
 10514 ;;		Unchanged: 0/0
 10515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10516 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;Total ram usage:        9 bytes
 10521 ;; Hardware stack levels used:    1
 10522 ;; Hardware stack levels required when called:    3
 10523 ;; This function calls:
 10524 ;;		Nothing
 10525 ;; This function is called by:
 10526 ;;		_time_Display
 10527 ;;		_bin2bcd
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           
 10532                           ;psect for function ___awdiv
 10533  0AEF                     ___awdiv:	
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10537  0AEF  0020               	movlb	0	; select bank0
 10538  0AF0  01A7               	clrf	___awdiv@sign
 10539  0AF1  1FA2               	btfss	___awdiv@divisor+1,7
 10540  0AF2  2AFA               	goto	l5578
 10541  0AF3  09A1               	comf	___awdiv@divisor,f
 10542  0AF4  09A2               	comf	___awdiv@divisor+1,f
 10543  0AF5  0AA1               	incf	___awdiv@divisor,f
 10544  0AF6  1903               	skipnz
 10545  0AF7  0AA2               	incf	___awdiv@divisor+1,f
 10546  0AF8  01A7               	clrf	___awdiv@sign
 10547  0AF9  0AA7               	incf	___awdiv@sign,f
 10548  0AFA                     l5578:	
 10549  0AFA  1FA4               	btfss	___awdiv@dividend+1,7
 10550  0AFB  2B05               	goto	l5584
 10551  0AFC  09A3               	comf	___awdiv@dividend,f
 10552  0AFD  09A4               	comf	___awdiv@dividend+1,f
 10553  0AFE  0AA3               	incf	___awdiv@dividend,f
 10554  0AFF  1903               	skipnz
 10555  0B00  0AA4               	incf	___awdiv@dividend+1,f
 10556  0B01  3001               	movlw	1
 10557  0B02  00A5               	movwf	??___awdiv
 10558  0B03  0825               	movf	??___awdiv,w
 10559  0B04  06A7               	xorwf	___awdiv@sign,f
 10560  0B05                     l5584:	
 10561  0B05  01A8               	clrf	___awdiv@quotient
 10562  0B06  01A9               	clrf	___awdiv@quotient+1
 10563  0B07  0821               	movf	___awdiv@divisor,w
 10564  0B08  0422               	iorwf	___awdiv@divisor+1,w
 10565  0B09  1903               	btfsc	3,2
 10566  0B0A  2B34               	goto	l5606
 10567  0B0B  01A6               	clrf	___awdiv@counter
 10568  0B0C  0AA6               	incf	___awdiv@counter,f
 10569  0B0D                     l5594:	
 10570  0B0D  1BA2               	btfsc	___awdiv@divisor+1,7
 10571  0B0E  2B19               	goto	l5596
 10572  0B0F  3001               	movlw	1
 10573  0B10                     u4775:	
 10574  0B10  35A1               	lslf	___awdiv@divisor,f
 10575  0B11  0DA2               	rlf	___awdiv@divisor+1,f
 10576  0B12  0B89               	decfsz	9,f
 10577  0B13  2B10               	goto	u4775
 10578  0B14  3001               	movlw	1
 10579  0B15  00A5               	movwf	??___awdiv
 10580  0B16  0825               	movf	??___awdiv,w
 10581  0B17  07A6               	addwf	___awdiv@counter,f
 10582  0B18  2B0D               	goto	l5594
 10583  0B19                     l5596:	
 10584  0B19  3001               	movlw	1
 10585  0B1A                     u4795:	
 10586  0B1A  35A8               	lslf	___awdiv@quotient,f
 10587  0B1B  0DA9               	rlf	___awdiv@quotient+1,f
 10588  0B1C  0B89               	decfsz	9,f
 10589  0B1D  2B1A               	goto	u4795
 10590  0B1E  0822               	movf	___awdiv@divisor+1,w
 10591  0B1F  0224               	subwf	___awdiv@dividend+1,w
 10592  0B20  1D03               	skipz
 10593  0B21  2B24               	goto	u4805
 10594  0B22  0821               	movf	___awdiv@divisor,w
 10595  0B23  0223               	subwf	___awdiv@dividend,w
 10596  0B24                     u4805:	
 10597  0B24  1C03               	skipc
 10598  0B25  2B2B               	goto	l5602
 10599  0B26  0821               	movf	___awdiv@divisor,w
 10600  0B27  02A3               	subwf	___awdiv@dividend,f
 10601  0B28  0822               	movf	___awdiv@divisor+1,w
 10602  0B29  3BA4               	subwfb	___awdiv@dividend+1,f
 10603  0B2A  1428               	bsf	___awdiv@quotient,0
 10604  0B2B                     l5602:	
 10605  0B2B  3001               	movlw	1
 10606  0B2C                     u4815:	
 10607  0B2C  36A2               	lsrf	___awdiv@divisor+1,f
 10608  0B2D  0CA1               	rrf	___awdiv@divisor,f
 10609  0B2E  0B89               	decfsz	9,f
 10610  0B2F  2B2C               	goto	u4815
 10611  0B30  3001               	movlw	1
 10612  0B31  02A6               	subwf	___awdiv@counter,f
 10613  0B32  1D03               	btfss	3,2
 10614  0B33  2B19               	goto	l5596
 10615  0B34                     l5606:	
 10616  0B34  0827               	movf	___awdiv@sign,w
 10617  0B35  1903               	btfsc	3,2
 10618  0B36  2B3C               	goto	l5610
 10619  0B37  09A8               	comf	___awdiv@quotient,f
 10620  0B38  09A9               	comf	___awdiv@quotient+1,f
 10621  0B39  0AA8               	incf	___awdiv@quotient,f
 10622  0B3A  1903               	skipnz
 10623  0B3B  0AA9               	incf	___awdiv@quotient+1,f
 10624  0B3C                     l5610:	
 10625  0B3C  0829               	movf	___awdiv@quotient+1,w
 10626  0B3D  00A2               	movwf	?___awdiv+1
 10627  0B3E  0828               	movf	___awdiv@quotient,w
 10628  0B3F  00A1               	movwf	?___awdiv
 10629  0B40  0008               	return
 10630  0B41                     __end_of___awdiv:	
 10631                           
 10632                           	psect	text53
 10633  0D23                     __ptext53:	
 10634 ;; *************** function _Bq32k_Rtc_Read_Time *****************
 10635 ;; Defined at:
 10636 ;;		line 34 in file "mcc_generated_files/bq32k.c"
 10637 ;; Parameters:    Size  Location     Type
 10638 ;;  p               1    wreg     PTR struct bq32k_regs
 10639 ;;		 -> rtc_tm(7), 
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;  p               1   21[BANK0 ] PTR struct bq32k_regs
 10642 ;;		 -> rtc_tm(7), 
 10643 ;;  temp           10   11[BANK0 ] unsigned char [10]
 10644 ;; Return value:  Size  Location     Type
 10645 ;;                  1    wreg      void 
 10646 ;; Registers used:
 10647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10648 ;; Tracked objects:
 10649 ;;		On entry : 0/0
 10650 ;;		On exit  : 0/0
 10651 ;;		Unchanged: 0/0
 10652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;Total ram usage:       13 bytes
 10658 ;; Hardware stack levels used:    1
 10659 ;; Hardware stack levels required when called:    5
 10660 ;; This function calls:
 10661 ;;		_I2C_Read_Buffer
 10662 ;;		_bcd2bin
 10663 ;; This function is called by:
 10664 ;;		_time_Display
 10665 ;;		_Calculate_Time
 10666 ;;		_Save_Write_time
 10667 ;;		_Set_time_from_Com
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           
 10672                           ;psect for function _Bq32k_Rtc_Read_Time
 10673  0D23                     _Bq32k_Rtc_Read_Time:	
 10674                           
 10675                           ;incstack = 0
 10676                           ; Regs used in _Bq32k_Rtc_Read_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10677                           ;Bq32k_Rtc_Read_Time@p stored from wreg
 10678  0D23  0020               	movlb	0	; select bank0
 10679  0D24  00B5               	movwf	Bq32k_Rtc_Read_Time@p
 10680                           
 10681                           ;bq32k.c: 36: unsigned char temp[10] ;
 10682                           ;bq32k.c: 37: I2C_Read_Buffer( 0 , temp , 7);
 10683  0D25  302B               	movlw	(low (Bq32k_Rtc_Read_Time@temp| 0))& (0+255)
 10684  0D26  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10685  0D27  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10686  0D28  00A4               	movwf	I2C_Read_Buffer@buff
 10687  0D29  3007               	movlw	7
 10688  0D2A  00AA               	movwf	??_Bq32k_Rtc_Read_Time+1
 10689  0D2B  082A               	movf	??_Bq32k_Rtc_Read_Time+1,w
 10690  0D2C  00A5               	movwf	I2C_Read_Buffer@Length
 10691  0D2D  3000               	movlw	0
 10692  0D2E  318E  2678  318D   	fcall	_I2C_Read_Buffer
 10693                           
 10694                           ;bq32k.c: 38: p->seconds = bcd2bin(temp[0] & 0x7F);
 10695  0D31  0020               	movlb	0	; select bank0
 10696  0D32  082B               	movf	Bq32k_Rtc_Read_Time@temp,w
 10697  0D33  397F               	andlw	127
 10698  0D34  3194  2445  318D   	fcall	_bcd2bin
 10699  0D37  0020               	movlb	0	; select bank0
 10700  0D38  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10701  0D39  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10702  0D3A  0086               	movwf	6
 10703  0D3B  3001               	movlw	1	; select bank2/3
 10704  0D3C  0087               	movwf	7
 10705  0D3D  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10706  0D3E  0081               	movwf	1
 10707                           
 10708                           ;bq32k.c: 39: p->minutes = bcd2bin(temp[1] & 0x7F);
 10709  0D3F  082C               	movf	Bq32k_Rtc_Read_Time@temp+1,w
 10710  0D40  397F               	andlw	127
 10711  0D41  3194  2445  318D   	fcall	_bcd2bin
 10712  0D44  0020               	movlb	0	; select bank0
 10713  0D45  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10714  0D46  0A35               	incf	Bq32k_Rtc_Read_Time@p,w
 10715  0D47  0086               	movwf	6
 10716  0D48  3001               	movlw	1	; select bank2/3
 10717  0D49  0087               	movwf	7
 10718  0D4A  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10719  0D4B  0081               	movwf	1
 10720                           
 10721                           ;bq32k.c: 40: p->hours = bcd2bin(temp[2] & 0x3F);
 10722  0D4C  082D               	movf	Bq32k_Rtc_Read_Time@temp+2,w
 10723  0D4D  393F               	andlw	63
 10724  0D4E  3194  2445  318D   	fcall	_bcd2bin
 10725  0D51  0020               	movlb	0	; select bank0
 10726  0D52  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10727  0D53  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10728  0D54  3E02               	addlw	2
 10729  0D55  0086               	movwf	6
 10730  0D56  3001               	movlw	1	; select bank2/3
 10731  0D57  0087               	movwf	7
 10732  0D58  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10733  0D59  0081               	movwf	1
 10734                           
 10735                           ;bq32k.c: 41: p->wday = bcd2bin(temp[3]);
 10736  0D5A  082E               	movf	Bq32k_Rtc_Read_Time@temp+3,w
 10737  0D5B  3194  2445  318D   	fcall	_bcd2bin
 10738  0D5E  0020               	movlb	0	; select bank0
 10739  0D5F  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10740  0D60  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10741  0D61  3E03               	addlw	3
 10742  0D62  0086               	movwf	6
 10743  0D63  3001               	movlw	1	; select bank2/3
 10744  0D64  0087               	movwf	7
 10745  0D65  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10746  0D66  0081               	movwf	1
 10747                           
 10748                           ;bq32k.c: 42: p->date = bcd2bin(temp[4]);
 10749  0D67  082F               	movf	Bq32k_Rtc_Read_Time@temp+4,w
 10750  0D68  3194  2445  318D   	fcall	_bcd2bin
 10751  0D6B  0020               	movlb	0	; select bank0
 10752  0D6C  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10753  0D6D  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10754  0D6E  3E04               	addlw	4
 10755  0D6F  0086               	movwf	6
 10756  0D70  3001               	movlw	1	; select bank2/3
 10757  0D71  0087               	movwf	7
 10758  0D72  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10759  0D73  0081               	movwf	1
 10760                           
 10761                           ;bq32k.c: 43: p->month = bcd2bin(temp[5]);
 10762  0D74  0830               	movf	Bq32k_Rtc_Read_Time@temp+5,w
 10763  0D75  3194  2445  318D   	fcall	_bcd2bin
 10764  0D78  0020               	movlb	0	; select bank0
 10765  0D79  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10766  0D7A  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10767  0D7B  3E05               	addlw	5
 10768  0D7C  0086               	movwf	6
 10769  0D7D  3001               	movlw	1	; select bank2/3
 10770  0D7E  0087               	movwf	7
 10771  0D7F  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10772  0D80  0081               	movwf	1
 10773                           
 10774                           ;bq32k.c: 44: p->years= bcd2bin(temp[6]);
 10775  0D81  0831               	movf	Bq32k_Rtc_Read_Time@temp+6,w
 10776  0D82  3194  2445         	fcall	_bcd2bin
 10777  0D84  0020               	movlb	0	; select bank0
 10778  0D85  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10779  0D86  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10780  0D87  3E06               	addlw	6
 10781  0D88  0086               	movwf	6
 10782  0D89  3001               	movlw	1	; select bank2/3
 10783  0D8A  0087               	movwf	7
 10784  0D8B  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10785  0D8C  0081               	movwf	1
 10786  0D8D  0008               	return
 10787  0D8E                     __end_of_Bq32k_Rtc_Read_Time:	
 10788                           
 10789                           	psect	text54
 10790  1445                     __ptext54:	
 10791 ;; *************** function _bcd2bin *****************
 10792 ;; Defined at:
 10793 ;;		line 72 in file "mcc_generated_files/bq32k.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;  val             1    wreg     unsigned char 
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;  val             1    8[BANK0 ] unsigned char 
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      unsigned char 
 10800 ;; Registers used:
 10801 ;;		wreg, status,2, status,0, pclath, cstack
 10802 ;; Tracked objects:
 10803 ;;		On entry : 0/0
 10804 ;;		On exit  : 0/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;Total ram usage:        4 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; Hardware stack levels required when called:    4
 10814 ;; This function calls:
 10815 ;;		___bmul
 10816 ;; This function is called by:
 10817 ;;		_Bq32k_Rtc_Read_Time
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           
 10822                           ;psect for function _bcd2bin
 10823  1445                     _bcd2bin:	
 10824                           
 10825                           ;incstack = 0
 10826                           ; Regs used in _bcd2bin: [wreg+status,2+status,0+pclath+cstack]
 10827                           ;bcd2bin@val stored from wreg
 10828  1445  0020               	movlb	0	; select bank0
 10829  1446  00A8               	movwf	bcd2bin@val
 10830                           
 10831                           ;bq32k.c: 74: return (val & 0x0f) + (val >> 4) * 10;
 10832  1447  300F               	movlw	15
 10833  1448  0528               	andwf	bcd2bin@val,w
 10834  1449  00A5               	movwf	??_bcd2bin
 10835  144A  300A               	movlw	10
 10836  144B  00A6               	movwf	??_bcd2bin+1
 10837  144C  0826               	movf	??_bcd2bin+1,w
 10838  144D  00A1               	movwf	___bmul@multiplicand
 10839  144E  0828               	movf	bcd2bin@val,w
 10840  144F  00A7               	movwf	??_bcd2bin+2
 10841  1450  3004               	movlw	4
 10842  1451                     u4445:	
 10843  1451  36A7               	lsrf	??_bcd2bin+2,f
 10844  1452  0B89               	decfsz	9,f
 10845  1453  2C51               	goto	u4445
 10846  1454  0827               	movf	??_bcd2bin+2,w
 10847  1455  3194  2433         	fcall	___bmul
 10848  1457  0020               	movlb	0	; select bank0
 10849  1458  0725               	addwf	??_bcd2bin,w
 10850  1459  0008               	return
 10851  145A                     __end_of_bcd2bin:	
 10852                           
 10853                           	psect	text55
 10854  1433                     __ptext55:	
 10855 ;; *************** function ___bmul *****************
 10856 ;; Defined at:
 10857 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;  multiplier      1    wreg     unsigned char 
 10860 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 10861 ;; Auto vars:     Size  Location     Type
 10862 ;;  multiplier      1    4[BANK0 ] unsigned char 
 10863 ;;  product         1    3[BANK0 ] unsigned char 
 10864 ;; Return value:  Size  Location     Type
 10865 ;;                  1    wreg      unsigned char 
 10866 ;; Registers used:
 10867 ;;		wreg, status,2, status,0
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10873 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;Total ram usage:        4 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    3
 10880 ;; This function calls:
 10881 ;;		Nothing
 10882 ;; This function is called by:
 10883 ;;		_bcd2bin
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           
 10888                           ;psect for function ___bmul
 10889  1433                     ___bmul:	
 10890                           
 10891                           ;incstack = 0
 10892                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10893                           ;___bmul@multiplier stored from wreg
 10894  1433  0020               	movlb	0	; select bank0
 10895  1434  00A4               	movwf	___bmul@multiplier
 10896  1435  01A3               	clrf	___bmul@product
 10897  1436                     l5222:	
 10898  1436  1C24               	btfss	___bmul@multiplier,0
 10899  1437  2C3C               	goto	l5226
 10900  1438  0821               	movf	___bmul@multiplicand,w
 10901  1439  00A2               	movwf	??___bmul
 10902  143A  0822               	movf	??___bmul,w
 10903  143B  07A3               	addwf	___bmul@product,f
 10904  143C                     l5226:	
 10905  143C  1003               	clrc
 10906  143D  0DA1               	rlf	___bmul@multiplicand,f
 10907  143E  1003               	clrc
 10908  143F  0CA4               	rrf	___bmul@multiplier,f
 10909  1440  0824               	movf	___bmul@multiplier,w
 10910  1441  1D03               	btfss	3,2
 10911  1442  2C36               	goto	l5222
 10912  1443  0823               	movf	___bmul@product,w
 10913  1444  0008               	return
 10914  1445                     __end_of___bmul:	
 10915                           
 10916                           	psect	text56
 10917  0E78                     __ptext56:	
 10918 ;; *************** function _I2C_Read_Buffer *****************
 10919 ;; Defined at:
 10920 ;;		line 120 in file "mcc_generated_files/i2c.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;  ADD             1    wreg     unsigned char 
 10923 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 10924 ;;		 -> Bq32k_Rtc_Read_Time@temp(10), 
 10925 ;;  Length          1    5[BANK0 ] unsigned char 
 10926 ;; Auto vars:     Size  Location     Type
 10927 ;;  ADD             1    7[BANK0 ] unsigned char 
 10928 ;;  Flag            1    8[BANK0 ] unsigned char 
 10929 ;; Return value:  Size  Location     Type
 10930 ;;                  1    wreg      unsigned char 
 10931 ;; Registers used:
 10932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10938 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;Total ram usage:        5 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    4
 10945 ;; This function calls:
 10946 ;;		_I2C_Receive_Byte
 10947 ;;		_I2C_Send_Byte
 10948 ;;		_I2C_Start
 10949 ;;		_I2C_Stop
 10950 ;; This function is called by:
 10951 ;;		_Bq32k_Rtc_Read_Time
 10952 ;; This function uses a non-reentrant model
 10953 ;;
 10954                           
 10955                           
 10956                           ;psect for function _I2C_Read_Buffer
 10957  0E78                     _I2C_Read_Buffer:	
 10958                           
 10959                           ;incstack = 0
 10960                           ; Regs used in _I2C_Read_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10961                           ;I2C_Read_Buffer@ADD stored from wreg
 10962  0E78  0020               	movlb	0	; select bank0
 10963  0E79  00A7               	movwf	I2C_Read_Buffer@ADD
 10964                           
 10965                           ;i2c.c: 122: unsigned char Flag=1;
 10966  0E7A  01A8               	clrf	I2C_Read_Buffer@Flag
 10967  0E7B  0AA8               	incf	I2C_Read_Buffer@Flag,f
 10968                           
 10969                           ;i2c.c: 124: I2C_Start();
 10970  0E7C  3195  253D  318E   	fcall	_I2C_Start
 10971                           
 10972                           ;i2c.c: 126: Flag=I2C_Send_Byte(0XD0);
 10973  0E7F  30D0               	movlw	208
 10974  0E80  318B  2394  318E   	fcall	_I2C_Send_Byte
 10975  0E83  0020               	movlb	0	; select bank0
 10976  0E84  00A6               	movwf	??_I2C_Read_Buffer
 10977  0E85  0826               	movf	??_I2C_Read_Buffer,w
 10978  0E86  00A8               	movwf	I2C_Read_Buffer@Flag
 10979                           
 10980                           ;i2c.c: 127: if(Flag)
 10981  0E87  0828               	movf	I2C_Read_Buffer@Flag,w
 10982  0E88  1D03               	btfss	3,2
 10983  0E89  0008               	return
 10984                           
 10985                           ;i2c.c: 130: Flag=I2C_Send_Byte(ADD);
 10986                           
 10987                           ;i2c.c: 128: return 0x01;
 10988                           ;	Return value of _I2C_Read_Buffer is never used
 10989  0E8A  0827               	movf	I2C_Read_Buffer@ADD,w
 10990  0E8B  318B  2394  318E   	fcall	_I2C_Send_Byte
 10991  0E8E  0020               	movlb	0	; select bank0
 10992  0E8F  00A6               	movwf	??_I2C_Read_Buffer
 10993  0E90  0826               	movf	??_I2C_Read_Buffer,w
 10994  0E91  00A8               	movwf	I2C_Read_Buffer@Flag
 10995                           
 10996                           ;i2c.c: 131: if(Flag)
 10997  0E92  0828               	movf	I2C_Read_Buffer@Flag,w
 10998  0E93  1D03               	btfss	3,2
 10999  0E94  0008               	return
 11000                           
 11001                           ;i2c.c: 134: I2C_Start();
 11002                           
 11003                           ;i2c.c: 132: return 0x01;
 11004                           ;	Return value of _I2C_Read_Buffer is never used
 11005  0E95  3195  253D  318E   	fcall	_I2C_Start
 11006                           
 11007                           ;i2c.c: 135: Flag=I2C_Send_Byte(0XD0+1);
 11008  0E98  30D1               	movlw	209
 11009  0E99  318B  2394  318E   	fcall	_I2C_Send_Byte
 11010  0E9C  0020               	movlb	0	; select bank0
 11011  0E9D  00A6               	movwf	??_I2C_Read_Buffer
 11012  0E9E  0826               	movf	??_I2C_Read_Buffer,w
 11013  0E9F  00A8               	movwf	I2C_Read_Buffer@Flag
 11014                           
 11015                           ;i2c.c: 136: if(Flag)
 11016  0EA0  0828               	movf	I2C_Read_Buffer@Flag,w
 11017  0EA1  1D03               	btfss	3,2
 11018  0EA2  0008               	return
 11019  0EA3                     l5328:	
 11020  0EA3  3002               	movlw	2
 11021  0EA4  0225               	subwf	I2C_Read_Buffer@Length,w
 11022  0EA5  1C03               	btfss	3,0
 11023  0EA6  2ECE               	goto	l5330
 11024                           
 11025                           ;i2c.c: 140: {
 11026                           ;i2c.c: 141: *buff = I2C_Receive_Byte();
 11027                           
 11028                           ;i2c.c: 139: while(Length>1)
 11029                           
 11030                           ;i2c.c: 137: return 0x01;
 11031                           ;	Return value of _I2C_Read_Buffer is never used
 11032  0EA7  3197  27D0  318E   	fcall	_I2C_Receive_Byte
 11033  0EAA  0020               	movlb	0	; select bank0
 11034  0EAB  00A6               	movwf	??_I2C_Read_Buffer
 11035  0EAC  0824               	movf	I2C_Read_Buffer@buff,w
 11036  0EAD  0086               	movwf	6
 11037  0EAE  0187               	clrf	7
 11038  0EAF  0826               	movf	??_I2C_Read_Buffer,w
 11039  0EB0  0081               	movwf	1
 11040                           
 11041                           ;i2c.c: 143: do { LATB1 = 0; } while(0);
 11042  0EB1  0022               	movlb	2	; select bank2
 11043  0EB2  108D               	bcf	13,1	;volatile
 11044                           
 11045                           ;i2c.c: 144: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11046  0EB3  3003               	movlw	3
 11047  0EB4  0020               	movlb	0	; select bank0
 11048  0EB5  00A6               	movwf	??_I2C_Read_Buffer
 11049  0EB6                     u6227:	
 11050  0EB6  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11051  0EB7  2EB6               	goto	u6227
 11052                           
 11053                           ;i2c.c: 145: do { LATB0 = 1; } while(0);
 11054  0EB8  0022               	movlb	2	; select bank2
 11055  0EB9  140D               	bsf	13,0	;volatile
 11056                           
 11057                           ;i2c.c: 146: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11058  0EBA  3003               	movlw	3
 11059  0EBB  0020               	movlb	0	; select bank0
 11060  0EBC  00A6               	movwf	??_I2C_Read_Buffer
 11061  0EBD                     u6237:	
 11062  0EBD  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11063  0EBE  2EBD               	goto	u6237
 11064                           
 11065                           ;i2c.c: 147: do { LATB0 = 0; } while(0);
 11066  0EBF  0022               	movlb	2	; select bank2
 11067  0EC0  100D               	bcf	13,0	;volatile
 11068                           
 11069                           ;i2c.c: 148: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11070  0EC1  3003               	movlw	3
 11071  0EC2  0020               	movlb	0	; select bank0
 11072  0EC3  00A6               	movwf	??_I2C_Read_Buffer
 11073  0EC4                     u6247:	
 11074  0EC4  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11075  0EC5  2EC4               	goto	u6247
 11076                           
 11077                           ;i2c.c: 150: buff++;
 11078  0EC6  3001               	movlw	1
 11079  0EC7  0020               	movlb	0	; select bank0
 11080  0EC8  00A6               	movwf	??_I2C_Read_Buffer
 11081  0EC9  0826               	movf	??_I2C_Read_Buffer,w
 11082  0ECA  07A4               	addwf	I2C_Read_Buffer@buff,f
 11083                           
 11084                           ;i2c.c: 151: Length--;
 11085  0ECB  3001               	movlw	1
 11086  0ECC  02A5               	subwf	I2C_Read_Buffer@Length,f
 11087  0ECD  2EA3               	goto	l5328
 11088  0ECE                     l5330:	
 11089                           
 11090                           ;i2c.c: 152: }
 11091                           ;i2c.c: 153: *buff = I2C_Receive_Byte();
 11092  0ECE  3197  27D0  318E   	fcall	_I2C_Receive_Byte
 11093  0ED1  0020               	movlb	0	; select bank0
 11094  0ED2  00A6               	movwf	??_I2C_Read_Buffer
 11095  0ED3  0824               	movf	I2C_Read_Buffer@buff,w
 11096  0ED4  0086               	movwf	6
 11097  0ED5  0187               	clrf	7
 11098  0ED6  0826               	movf	??_I2C_Read_Buffer,w
 11099  0ED7  0081               	movwf	1
 11100                           
 11101                           ;i2c.c: 155: do { LATB1 = 1; } while(0);
 11102  0ED8  0022               	movlb	2	; select bank2
 11103  0ED9  148D               	bsf	13,1	;volatile
 11104                           
 11105                           ;i2c.c: 156: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11106  0EDA  3003               	movlw	3
 11107  0EDB  0020               	movlb	0	; select bank0
 11108  0EDC  00A6               	movwf	??_I2C_Read_Buffer
 11109  0EDD                     u6257:	
 11110  0EDD  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11111  0EDE  2EDD               	goto	u6257
 11112                           
 11113                           ;i2c.c: 157: do { LATB0 = 1; } while(0);
 11114  0EDF  0022               	movlb	2	; select bank2
 11115  0EE0  140D               	bsf	13,0	;volatile
 11116                           
 11117                           ;i2c.c: 158: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11118  0EE1  3003               	movlw	3
 11119  0EE2  0020               	movlb	0	; select bank0
 11120  0EE3  00A6               	movwf	??_I2C_Read_Buffer
 11121  0EE4                     u6267:	
 11122  0EE4  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11123  0EE5  2EE4               	goto	u6267
 11124                           
 11125                           ;i2c.c: 159: do { LATB0 = 0; } while(0);
 11126  0EE6  0022               	movlb	2	; select bank2
 11127  0EE7  100D               	bcf	13,0	;volatile
 11128                           
 11129                           ;i2c.c: 160: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11130  0EE8  3003               	movlw	3
 11131  0EE9  0020               	movlb	0	; select bank0
 11132  0EEA  00A6               	movwf	??_I2C_Read_Buffer
 11133  0EEB                     u6277:	
 11134  0EEB  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11135  0EEC  2EEB               	goto	u6277
 11136                           
 11137                           ;i2c.c: 162: I2C_Stop();
 11138  0EED  3195  255A         	fcall	_I2C_Stop
 11139  0EEF  0008               	return
 11140  0EF0                     __end_of_I2C_Read_Buffer:	
 11141                           ;i2c.c: 164: return 0x00;
 11142                           ;	Return value of _I2C_Read_Buffer is never used
 11143                           
 11144                           
 11145                           	psect	text57
 11146  17D0                     __ptext57:	
 11147 ;; *************** function _I2C_Receive_Byte *****************
 11148 ;; Defined at:
 11149 ;;		line 74 in file "mcc_generated_files/i2c.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;		None
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;  i               1    3[BANK0 ] unsigned char 
 11154 ;;  Data            1    2[BANK0 ] unsigned char 
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      unsigned char 
 11157 ;; Registers used:
 11158 ;;		wreg, status,2, status,0
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;Total ram usage:        3 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    3
 11171 ;; This function calls:
 11172 ;;		Nothing
 11173 ;; This function is called by:
 11174 ;;		_I2C_Read_Buffer
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           
 11179                           ;psect for function _I2C_Receive_Byte
 11180  17D0                     _I2C_Receive_Byte:	
 11181                           
 11182                           ;i2c.c: 76: unsigned char i,Data=0;
 11183                           
 11184                           ;incstack = 0
 11185                           ; Regs used in _I2C_Receive_Byte: [wreg+status,2+status,0]
 11186  17D0  0020               	movlb	0	; select bank0
 11187  17D1  01A2               	clrf	I2C_Receive_Byte@Data
 11188                           
 11189                           ;i2c.c: 77: do { LATB1 = 1; } while(0);
 11190  17D2  0022               	movlb	2	; select bank2
 11191  17D3  148D               	bsf	13,1	;volatile
 11192                           
 11193                           ;i2c.c: 78: for(i=0;i<8;i++)
 11194  17D4  0020               	movlb	0	; select bank0
 11195  17D5  01A3               	clrf	I2C_Receive_Byte@i
 11196  17D6  3008               	movlw	8
 11197  17D7  0223               	subwf	I2C_Receive_Byte@i,w
 11198  17D8  1803               	btfsc	3,0
 11199  17D9  2FFE               	goto	l5208
 11200                           
 11201                           ;i2c.c: 79: {
 11202                           ;i2c.c: 80: Data <<= 1;
 11203  17DA  1003               	clrc
 11204  17DB                     L12:	
 11205  17DB  0DA2               	rlf	I2C_Receive_Byte@Data,f
 11206                           
 11207                           ;i2c.c: 81: do { LATB0 = 1; } while(0);
 11208  17DC  0022               	movlb	2	; select bank2
 11209  17DD  140D               	bsf	13,0	;volatile
 11210                           
 11211                           ;i2c.c: 82: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11212  17DE  3003               	movlw	3
 11213  17DF  0020               	movlb	0	; select bank0
 11214  17E0  00A1               	movwf	??_I2C_Receive_Byte
 11215  17E1                     u6287:	
 11216  17E1  0BA1               	decfsz	??_I2C_Receive_Byte,f
 11217  17E2  2FE1               	goto	u6287
 11218                           
 11219                           ;i2c.c: 83: do { TRISB1 = 1; } while(0);
 11220  17E3  0021               	movlb	1	; select bank1
 11221  17E4  148D               	bsf	13,1	;volatile
 11222                           
 11223                           ;i2c.c: 84: if(RB1)
 11224  17E5  0020               	movlb	0	; select bank0
 11225  17E6  1C8D               	btfss	13,1	;volatile
 11226  17E7  2FEC               	goto	l868
 11227                           
 11228                           ;i2c.c: 85: {
 11229                           ;i2c.c: 86: do { TRISB1 = 0; } while(0);
 11230  17E8  0021               	movlb	1	; select bank1
 11231  17E9  108D               	bcf	13,1	;volatile
 11232                           
 11233                           ;i2c.c: 87: Data |= 0x01;
 11234  17EA  0020               	movlb	0	; select bank0
 11235  17EB  1422               	bsf	I2C_Receive_Byte@Data,0
 11236  17EC                     l868:	
 11237                           ;i2c.c: 88: }
 11238                           ;i2c.c: 89: do { TRISB1 = 0; } while(0);
 11239                           
 11240  17EC  0021               	movlb	1	; select bank1
 11241  17ED  108D               	bcf	13,1	;volatile
 11242                           
 11243                           ;i2c.c: 90: do { LATB0 = 0; } while(0);
 11244  17EE  0022               	movlb	2	; select bank2
 11245  17EF  100D               	bcf	13,0	;volatile
 11246                           
 11247                           ;i2c.c: 91: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11248  17F0  3003               	movlw	3
 11249  17F1  0020               	movlb	0	; select bank0
 11250  17F2  00A1               	movwf	??_I2C_Receive_Byte
 11251  17F3                     u6297:	
 11252  17F3  0BA1               	decfsz	??_I2C_Receive_Byte,f
 11253  17F4  2FF3               	goto	u6297
 11254  17F5  3001               	movlw	1
 11255  17F6  0020               	movlb	0	; select bank0
 11256  17F7  00A1               	movwf	??_I2C_Receive_Byte
 11257  17F8  0821               	movf	??_I2C_Receive_Byte,w
 11258  17F9  07A3               	addwf	I2C_Receive_Byte@i,f
 11259  17FA  3008               	movlw	8
 11260  17FB  0223               	subwf	I2C_Receive_Byte@i,w
 11261  17FC  1C03               	skipc
 11262  17FD  2FDB               	goto	L12
 11263  17FE                     l5208:	
 11264                           
 11265                           ;i2c.c: 92: }
 11266                           ;i2c.c: 93: return Data;
 11267  17FE  0822               	movf	I2C_Receive_Byte@Data,w
 11268  17FF  0008               	return
 11269  1800                     __end_of_I2C_Receive_Byte:	
 11270                           
 11271                           	psect	text58
 11272  0500                     __ptext58:	
 11273 ;; *************** function _Inf_to_Com *****************
 11274 ;; Defined at:
 11275 ;;		line 91 in file "mcc_generated_files/com.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;		None
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  tmp_buf        72    0[BANK1 ] unsigned char [72]
 11280 ;;  crc_tmp         2   74[BANK1 ] unsigned int 
 11281 ;;  add_tmp         2   72[BANK1 ] unsigned int 
 11282 ;;  count_tmp       1   77[BANK1 ] unsigned char 
 11283 ;;  i               1   76[BANK1 ] unsigned char 
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      void 
 11286 ;; Registers used:
 11287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Locals:         0       0      78       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Totals:         0       5      78       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;Total ram usage:       83 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    5
 11300 ;; This function calls:
 11301 ;;		_CRC_cal
 11302 ;;		_EUSART_Write
 11303 ;;		_FLASH_readBlock
 11304 ;; This function is called by:
 11305 ;;		_Com_Process
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           
 11310                           ;psect for function _Inf_to_Com
 11311  0500                     _Inf_to_Com:	
 11312                           
 11313                           ;com.c: 93: unsigned int add_tmp=0;
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in _Inf_to_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11317  0500  0021               	movlb	1	; select bank1
 11318  0501  01E8               	clrf	Inf_to_Com@add_tmp^(0+128)
 11319  0502  01E9               	clrf	(Inf_to_Com@add_tmp+1)^(0+128)
 11320                           
 11321                           ;com.c: 94: unsigned char count_tmp = 0;
 11322  0503  01ED               	clrf	Inf_to_Com@count_tmp^(0+128)
 11323                           
 11324                           ;com.c: 95: unsigned int crc_tmp=0;
 11325  0504  01EA               	clrf	Inf_to_Com@crc_tmp^(0+128)
 11326  0505  01EB               	clrf	(Inf_to_Com@crc_tmp+1)^(0+128)
 11327                           
 11328                           ;com.c: 96: unsigned char tmp_buf[72];
 11329                           ;com.c: 97: unsigned char i=0;
 11330  0506  01EC               	clrf	Inf_to_Com@i^(0+128)
 11331                           
 11332                           ;com.c: 98: add_tmp = (Usart_Rx_Buff[4]<<8) | Usart_Rx_Buff[5];
 11333  0507  0023               	movlb	3	; select bank3
 11334  0508  0839               	movf	(_Usart_Rx_Buff^(0+384)+5),w
 11335  0509  0020               	movlb	0	; select bank0
 11336  050A  00AB               	movwf	??_Inf_to_Com
 11337  050B  01AC               	clrf	??_Inf_to_Com+1
 11338  050C  0023               	movlb	3	; select bank3
 11339  050D  0838               	movf	(_Usart_Rx_Buff^(0+384)+4),w
 11340  050E  0020               	movlb	0	; select bank0
 11341  050F  00AD               	movwf	??_Inf_to_Com+2
 11342  0510  01AE               	clrf	??_Inf_to_Com+3
 11343  0511  082D               	movf	??_Inf_to_Com+2,w
 11344  0512  00AE               	movwf	??_Inf_to_Com+3
 11345  0513  01AD               	clrf	??_Inf_to_Com+2
 11346  0514  082B               	movf	??_Inf_to_Com,w
 11347  0515  042D               	iorwf	??_Inf_to_Com+2,w
 11348  0516  0021               	movlb	1	; select bank1
 11349  0517  00E8               	movwf	Inf_to_Com@add_tmp^(0+128)
 11350  0518  0020               	movlb	0	; select bank0
 11351  0519  082C               	movf	??_Inf_to_Com+1,w
 11352  051A  042E               	iorwf	??_Inf_to_Com+3,w
 11353  051B  0021               	movlb	1	; select bank1
 11354  051C  00E9               	movwf	(Inf_to_Com@add_tmp+1)^(0+128)
 11355                           
 11356                           ;com.c: 99: count_tmp = Usart_Rx_Buff[6];
 11357  051D  0023               	movlb	3	; select bank3
 11358  051E  083A               	movf	(_Usart_Rx_Buff^(0+384)+6),w
 11359  051F  0020               	movlb	0	; select bank0
 11360  0520  00AB               	movwf	??_Inf_to_Com
 11361  0521  082B               	movf	??_Inf_to_Com,w
 11362  0522  0021               	movlb	1	; select bank1
 11363  0523  00ED               	movwf	Inf_to_Com@count_tmp^(0+128)
 11364                           
 11365                           ;com.c: 100: FLASH_readBlock(Flash_buff, add_tmp, count_tmp);
 11366  0524  0869               	movf	(Inf_to_Com@add_tmp+1)^(0+128),w
 11367  0525  0020               	movlb	0	; select bank0
 11368  0526  00A5               	movwf	FLASH_readBlock@address+1
 11369  0527  0021               	movlb	1	; select bank1
 11370  0528  0868               	movf	Inf_to_Com@add_tmp^(0+128),w
 11371  0529  0020               	movlb	0	; select bank0
 11372  052A  00A4               	movwf	FLASH_readBlock@address
 11373  052B  0021               	movlb	1	; select bank1
 11374  052C  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 11375  052D  0020               	movlb	0	; select bank0
 11376  052E  00AB               	movwf	??_Inf_to_Com
 11377  052F  082B               	movf	??_Inf_to_Com,w
 11378  0530  00A6               	movwf	FLASH_readBlock@count
 11379  0531  3020               	movlw	(low (_Flash_buff| (0+512)))& (0+255)
 11380  0532  3195  25F2  3185   	fcall	_FLASH_readBlock
 11381                           
 11382                           ;com.c: 101: tmp_buf[0] = 0xfe;
 11383  0535  30FE               	movlw	254
 11384  0536  0020               	movlb	0	; select bank0
 11385  0537  00AB               	movwf	??_Inf_to_Com
 11386  0538  082B               	movf	??_Inf_to_Com,w
 11387  0539  0021               	movlb	1	; select bank1
 11388  053A  00A0               	movwf	Inf_to_Com@tmp_buf^(0+128)
 11389                           
 11390                           ;com.c: 102: tmp_buf[1] = 0xfe;
 11391  053B  30FE               	movlw	254
 11392  053C  0020               	movlb	0	; select bank0
 11393  053D  00AB               	movwf	??_Inf_to_Com
 11394  053E  082B               	movf	??_Inf_to_Com,w
 11395  053F  0021               	movlb	1	; select bank1
 11396  0540  00A1               	movwf	(Inf_to_Com@tmp_buf^(0+128)+1)
 11397                           
 11398                           ;com.c: 103: tmp_buf[2] = 0x01;
 11399  0541  01A2               	clrf	(Inf_to_Com@tmp_buf^(0+128)+2)
 11400  0542  0AA2               	incf	(Inf_to_Com@tmp_buf^(0+128)+2),f
 11401                           
 11402                           ;com.c: 104: tmp_buf[3] = count_tmp;
 11403  0543  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 11404  0544  0020               	movlb	0	; select bank0
 11405  0545  00AB               	movwf	??_Inf_to_Com
 11406  0546  082B               	movf	??_Inf_to_Com,w
 11407  0547  0021               	movlb	1	; select bank1
 11408  0548  00A3               	movwf	(Inf_to_Com@tmp_buf^(0+128)+3)
 11409                           
 11410                           ;com.c: 105: for(i=0;i<count_tmp;i++)
 11411  0549  01EC               	clrf	Inf_to_Com@i^(0+128)
 11412  054A                     l6284:	
 11413  054A  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 11414  054B  026C               	subwf	Inf_to_Com@i^(0+128),w
 11415  054C  1803               	btfsc	3,0
 11416  054D  2D7B               	goto	l6286
 11417                           
 11418                           ;com.c: 106: {
 11419                           ;com.c: 107: tmp_buf[4+i*2] = Flash_buff[i] >> 8 ;
 11420  054E  356C               	lslf	Inf_to_Com@i^(0+128),w
 11421  054F  3E20               	addlw	(low (_Flash_buff| (0+512)))& (0+255)
 11422  0550  0086               	movwf	6
 11423  0551  3002               	movlw	2	; select bank4/5
 11424  0552  0087               	movwf	7
 11425  0553  3F40               	moviw [0]fsr1
 11426  0554  0020               	movlb	0	; select bank0
 11427  0555  00AB               	movwf	??_Inf_to_Com
 11428  0556  3F41               	moviw [1]fsr1
 11429  0557  00AC               	movwf	??_Inf_to_Com+1
 11430  0558  082C               	movf	??_Inf_to_Com+1,w
 11431  0559  00AD               	movwf	??_Inf_to_Com+2
 11432  055A  0021               	movlb	1	; select bank1
 11433  055B  356C               	lslf	Inf_to_Com@i^(0+128),w
 11434  055C  3E04               	addlw	4
 11435  055D  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 11436  055E  0086               	movwf	6
 11437  055F  0187               	clrf	7
 11438  0560  0020               	movlb	0	; select bank0
 11439  0561  082D               	movf	??_Inf_to_Com+2,w
 11440  0562  0081               	movwf	1
 11441                           
 11442                           ;com.c: 108: tmp_buf[5+i*2] = Flash_buff[i] & 0xff ;
 11443  0563  0021               	movlb	1	; select bank1
 11444  0564  356C               	lslf	Inf_to_Com@i^(0+128),w
 11445  0565  3E20               	addlw	(low (_Flash_buff| (0+512)))& (0+255)
 11446  0566  0086               	movwf	6
 11447  0567  3002               	movlw	2	; select bank4/5
 11448  0568  0087               	movwf	7
 11449  0569  0801               	movf	1,w
 11450  056A  0020               	movlb	0	; select bank0
 11451  056B  00AB               	movwf	??_Inf_to_Com
 11452  056C  0021               	movlb	1	; select bank1
 11453  056D  356C               	lslf	Inf_to_Com@i^(0+128),w
 11454  056E  3E05               	addlw	5
 11455  056F  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 11456  0570  0086               	movwf	6
 11457  0571  0187               	clrf	7
 11458  0572  0020               	movlb	0	; select bank0
 11459  0573  082B               	movf	??_Inf_to_Com,w
 11460  0574  0081               	movwf	1
 11461  0575  3001               	movlw	1
 11462  0576  00AB               	movwf	??_Inf_to_Com
 11463  0577  082B               	movf	??_Inf_to_Com,w
 11464  0578  0021               	movlb	1	; select bank1
 11465  0579  07EC               	addwf	Inf_to_Com@i^(0+128),f
 11466  057A  2D4A               	goto	l6284
 11467  057B                     l6286:	
 11468                           
 11469                           ;com.c: 109: }
 11470                           ;com.c: 110: crc_tmp = CRC_cal(tmp_buf,count_tmp+7);
 11471  057B  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 11472  057C  3E07               	addlw	7
 11473  057D  0020               	movlb	0	; select bank0
 11474  057E  00AB               	movwf	??_Inf_to_Com
 11475  057F  082B               	movf	??_Inf_to_Com,w
 11476  0580  00A1               	movwf	CRC_cal@frame_len
 11477  0581  30A0               	movlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 11478  0582  318E  26F0  3185   	fcall	_CRC_cal
 11479  0585  0020               	movlb	0	; select bank0
 11480  0586  0822               	movf	?_CRC_cal+1,w
 11481  0587  0021               	movlb	1	; select bank1
 11482  0588  00EB               	movwf	(Inf_to_Com@crc_tmp+1)^(0+128)
 11483  0589  0020               	movlb	0	; select bank0
 11484  058A  0821               	movf	?_CRC_cal,w
 11485  058B  0021               	movlb	1	; select bank1
 11486  058C  00EA               	movwf	Inf_to_Com@crc_tmp^(0+128)
 11487                           
 11488                           ;com.c: 111: tmp_buf[count_tmp*2 + 4] = crc_tmp >>8;
 11489  058D  086B               	movf	(Inf_to_Com@crc_tmp+1)^(0+128),w
 11490  058E  0020               	movlb	0	; select bank0
 11491  058F  00AB               	movwf	??_Inf_to_Com
 11492  0590  0021               	movlb	1	; select bank1
 11493  0591  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 11494  0592  3E04               	addlw	4
 11495  0593  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 11496  0594  0086               	movwf	6
 11497  0595  0187               	clrf	7
 11498  0596  0020               	movlb	0	; select bank0
 11499  0597  082B               	movf	??_Inf_to_Com,w
 11500  0598  0081               	movwf	1
 11501                           
 11502                           ;com.c: 112: tmp_buf[count_tmp*2 + 5] = crc_tmp & 0xff;
 11503  0599  0021               	movlb	1	; select bank1
 11504  059A  086A               	movf	Inf_to_Com@crc_tmp^(0+128),w
 11505  059B  0020               	movlb	0	; select bank0
 11506  059C  00AB               	movwf	??_Inf_to_Com
 11507  059D  0021               	movlb	1	; select bank1
 11508  059E  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 11509  059F  3E05               	addlw	5
 11510  05A0  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 11511  05A1  0086               	movwf	6
 11512  05A2  0187               	clrf	7
 11513  05A3  0020               	movlb	0	; select bank0
 11514  05A4  082B               	movf	??_Inf_to_Com,w
 11515  05A5  0081               	movwf	1
 11516                           
 11517                           ;com.c: 113: tmp_buf[count_tmp*2 + 6] = 0xbb;
 11518  05A6  30BB               	movlw	187
 11519  05A7  00AB               	movwf	??_Inf_to_Com
 11520  05A8  0021               	movlb	1	; select bank1
 11521  05A9  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 11522  05AA  3E06               	addlw	6
 11523  05AB  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 11524  05AC  0086               	movwf	6
 11525  05AD  0187               	clrf	7
 11526  05AE  0020               	movlb	0	; select bank0
 11527  05AF  082B               	movf	??_Inf_to_Com,w
 11528  05B0  0081               	movwf	1
 11529                           
 11530                           ;com.c: 114: for(i=0;i<(count_tmp*2+7);i++)
 11531  05B1  0021               	movlb	1	; select bank1
 11532  05B2  01EC               	clrf	Inf_to_Com@i^(0+128)
 11533  05B3                     l6300:	
 11534  05B3  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 11535  05B4  0020               	movlb	0	; select bank0
 11536  05B5  00AB               	movwf	??_Inf_to_Com
 11537  05B6  01AC               	clrf	??_Inf_to_Com+1
 11538  05B7  35AB               	lslf	??_Inf_to_Com,f
 11539  05B8  0DAC               	rlf	??_Inf_to_Com+1,f
 11540  05B9  082B               	movf	??_Inf_to_Com,w
 11541  05BA  3E07               	addlw	7
 11542  05BB  00AD               	movwf	??_Inf_to_Com+2
 11543  05BC  3000               	movlw	0
 11544  05BD  3D2C               	addwfc	??_Inf_to_Com+1,w
 11545  05BE  00AE               	movwf	??_Inf_to_Com+3
 11546  05BF  082E               	movf	??_Inf_to_Com+3,w
 11547  05C0  3A80               	xorlw	128
 11548  05C1  3C80               	sublw	128
 11549  05C2  1D03               	skipz
 11550  05C3  2DC7               	goto	u5705
 11551  05C4  082D               	movf	??_Inf_to_Com+2,w
 11552  05C5  0021               	movlb	1	; select bank1
 11553  05C6  026C               	subwf	Inf_to_Com@i^(0+128),w
 11554  05C7                     u5705:	
 11555  05C7  1803               	btfsc	3,0
 11556  05C8  0008               	return
 11557                           
 11558                           ;com.c: 115: {
 11559                           ;com.c: 116: EUSART_Write(tmp_buf[i]);
 11560  05C9  0021               	movlb	1	; select bank1
 11561  05CA  086C               	movf	Inf_to_Com@i^(0+128),w
 11562  05CB  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 11563  05CC  0086               	movwf	6
 11564  05CD  0187               	clrf	7
 11565  05CE  0801               	movf	1,w
 11566  05CF  3193  23E1  3185   	fcall	_EUSART_Write
 11567  05D2  3001               	movlw	1
 11568  05D3  0020               	movlb	0	; select bank0
 11569  05D4  00AB               	movwf	??_Inf_to_Com
 11570  05D5  082B               	movf	??_Inf_to_Com,w
 11571  05D6  0021               	movlb	1	; select bank1
 11572  05D7  07EC               	addwf	Inf_to_Com@i^(0+128),f
 11573  05D8  2DB3               	goto	l6300
 11574  05D9                     __end_of_Inf_to_Com:	
 11575                           
 11576                           	psect	text59
 11577  15F2                     __ptext59:	
 11578 ;; *************** function _FLASH_readBlock *****************
 11579 ;; Defined at:
 11580 ;;		line 204 in file "mcc_generated_files/memory.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;  buffer          1    wreg     PTR unsigned int 
 11583 ;;		 -> Flash_buff(64), 
 11584 ;;  address         2    4[BANK0 ] unsigned int 
 11585 ;;  count           1    6[BANK0 ] unsigned char 
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;  buffer          1    8[BANK0 ] PTR unsigned int 
 11588 ;;		 -> Flash_buff(64), 
 11589 ;; Return value:  Size  Location     Type
 11590 ;;                  1    wreg      void 
 11591 ;; Registers used:
 11592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11593 ;; Tracked objects:
 11594 ;;		On entry : 0/0
 11595 ;;		On exit  : 0/0
 11596 ;;		Unchanged: 0/0
 11597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11598 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;Total ram usage:        5 bytes
 11603 ;; Hardware stack levels used:    1
 11604 ;; Hardware stack levels required when called:    4
 11605 ;; This function calls:
 11606 ;;		_FLASH_ReadWord
 11607 ;; This function is called by:
 11608 ;;		_Inf_to_Com
 11609 ;; This function uses a non-reentrant model
 11610 ;;
 11611                           
 11612                           
 11613                           ;psect for function _FLASH_readBlock
 11614  15F2                     _FLASH_readBlock:	
 11615                           
 11616                           ;incstack = 0
 11617                           ; Regs used in _FLASH_readBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11618                           ;FLASH_readBlock@buffer stored from wreg
 11619  15F2  0020               	movlb	0	; select bank0
 11620  15F3  00A8               	movwf	FLASH_readBlock@buffer
 11621  15F4                     l5992:	
 11622                           ;memory.c: 206: while (count > 0)
 11623                           
 11624  15F4  0826               	movf	FLASH_readBlock@count,w
 11625  15F5  1903               	btfsc	3,2
 11626  15F6  0008               	return
 11627                           
 11628                           ;memory.c: 207: {
 11629                           ;memory.c: 208: *buffer++ = FLASH_ReadWord (address++);
 11630  15F7  0825               	movf	FLASH_readBlock@address+1,w
 11631  15F8  00A2               	movwf	FLASH_ReadWord@flashAddr+1
 11632  15F9  0824               	movf	FLASH_readBlock@address,w
 11633  15FA  00A1               	movwf	FLASH_ReadWord@flashAddr
 11634  15FB  3195  25D2  3195   	fcall	_FLASH_ReadWord
 11635  15FE  0020               	movlb	0	; select bank0
 11636  15FF  0828               	movf	FLASH_readBlock@buffer,w
 11637  1600  0086               	movwf	6
 11638  1601  3002               	movlw	2	; select bank4/5
 11639  1602  0087               	movwf	7
 11640  1603  0821               	movf	?_FLASH_ReadWord,w
 11641  1604  3FC0               	movwi [0]fsr1
 11642  1605  0822               	movf	?_FLASH_ReadWord+1,w
 11643  1606  3FC1               	movwi [1]fsr1
 11644  1607  3001               	movlw	1
 11645  1608  07A4               	addwf	FLASH_readBlock@address,f
 11646  1609  3000               	movlw	0
 11647  160A  3DA5               	addwfc	FLASH_readBlock@address+1,f
 11648  160B  3002               	movlw	2
 11649  160C  00A7               	movwf	??_FLASH_readBlock
 11650  160D  0827               	movf	??_FLASH_readBlock,w
 11651  160E  07A8               	addwf	FLASH_readBlock@buffer,f
 11652                           
 11653                           ;memory.c: 209: count--;
 11654  160F  3001               	movlw	1
 11655  1610  02A6               	subwf	FLASH_readBlock@count,f
 11656  1611  2DF4               	goto	l5992
 11657  1612                     __end_of_FLASH_readBlock:	
 11658                           
 11659                           	psect	text60
 11660  13E1                     __ptext60:	
 11661 ;; *************** function _EUSART_Write *****************
 11662 ;; Defined at:
 11663 ;;		line 132 in file "mcc_generated_files/eusart.c"
 11664 ;; Parameters:    Size  Location     Type
 11665 ;;  txData          1    wreg     unsigned char 
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;  txData          1    1[BANK0 ] unsigned char 
 11668 ;; Return value:  Size  Location     Type
 11669 ;;                  1    wreg      void 
 11670 ;; Registers used:
 11671 ;;		wreg
 11672 ;; Tracked objects:
 11673 ;;		On entry : 0/0
 11674 ;;		On exit  : 0/0
 11675 ;;		Unchanged: 0/0
 11676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;Total ram usage:        1 bytes
 11682 ;; Hardware stack levels used:    1
 11683 ;; Hardware stack levels required when called:    3
 11684 ;; This function calls:
 11685 ;;		Nothing
 11686 ;; This function is called by:
 11687 ;;		_Key_Process
 11688 ;;		_Read_time_to_Com
 11689 ;;		_Inf_to_Com
 11690 ;;		_EUSART_SendString
 11691 ;; This function uses a non-reentrant model
 11692 ;;
 11693                           
 11694                           
 11695                           ;psect for function _EUSART_Write
 11696  13E1                     _EUSART_Write:	
 11697                           
 11698                           ;incstack = 0
 11699                           ; Regs used in _EUSART_Write: [wreg]
 11700                           ;EUSART_Write@txData stored from wreg
 11701  13E1  0020               	movlb	0	; select bank0
 11702  13E2  00A1               	movwf	EUSART_Write@txData
 11703                           
 11704                           ;eusart.c: 135: TXREG = txData;
 11705  13E3  0821               	movf	EUSART_Write@txData,w
 11706  13E4  0023               	movlb	3	; select bank3
 11707  13E5  009A               	movwf	26	;volatile
 11708                           
 11709                           ;eusart.c: 136: PIR1bits.TXIF = 0;
 11710  13E6  0020               	movlb	0	; select bank0
 11711  13E7  1211               	bcf	17,4	;volatile
 11712                           
 11713                           ;eusart.c: 137: __nop();
 11714  13E8  0000               	nop
 11715  13E9                     l163:	
 11716                           ;eusart.c: 138: while(!PIR1bits.TXIF)
 11717                           
 11718  13E9  0020               	movlb	0	; select bank0
 11719  13EA  1A11               	btfsc	17,4	;volatile
 11720  13EB  0008               	return
 11721                           
 11722                           ;eusart.c: 139: {__nop();__nop();__nop();__nop();}
 11723  13EC  0000               	nop
 11724  13ED  0000               	nop
 11725  13EE  0000               	nop
 11726  13EF  0000               	nop
 11727  13F0  2BE9               	goto	l163
 11728  13F1                     __end_of_EUSART_Write:	
 11729                           
 11730                           	psect	text61
 11731  0EF0                     __ptext61:	
 11732 ;; *************** function _CRC_cal *****************
 11733 ;; Defined at:
 11734 ;;		line 165 in file "mcc_generated_files/com.c"
 11735 ;; Parameters:    Size  Location     Type
 11736 ;;  rx_arr          1    wreg     PTR unsigned char 
 11737 ;;		 -> Inf_to_Com@tmp_buf(72), Read_time_to_Com@tmp_buf(16), 
 11738 ;;  frame_len       1    1[BANK0 ] unsigned char 
 11739 ;; Auto vars:     Size  Location     Type
 11740 ;;  rx_arr          1    7[BANK0 ] PTR unsigned char 
 11741 ;;		 -> Inf_to_Com@tmp_buf(72), Read_time_to_Com@tmp_buf(16), 
 11742 ;;  remainder       2    9[BANK0 ] unsigned int 
 11743 ;;  i               1    8[BANK0 ] unsigned char 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  2    1[BANK0 ] unsigned int 
 11746 ;; Registers used:
 11747 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11753 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;Total ram usage:       10 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    3
 11760 ;; This function calls:
 11761 ;;		Nothing
 11762 ;; This function is called by:
 11763 ;;		_Read_time_to_Com
 11764 ;;		_Inf_to_Com
 11765 ;; This function uses a non-reentrant model
 11766 ;;
 11767                           
 11768                           
 11769                           ;psect for function _CRC_cal
 11770  0EF0                     _CRC_cal:	
 11771                           
 11772                           ;incstack = 0
 11773                           ; Regs used in _CRC_cal: [wreg+fsr1l+fsr1h+status,2+status,0]
 11774                           ;CRC_cal@rx_arr stored from wreg
 11775  0EF0  0020               	movlb	0	; select bank0
 11776  0EF1  00A7               	movwf	CRC_cal@rx_arr
 11777                           
 11778                           ;com.c: 167: unsigned char i = 0;
 11779  0EF2  01A8               	clrf	CRC_cal@i
 11780                           
 11781                           ;com.c: 168: unsigned int remainder = 0;
 11782  0EF3  01A9               	clrf	CRC_cal@remainder
 11783  0EF4  01AA               	clrf	CRC_cal@remainder+1
 11784                           
 11785                           ;com.c: 170: for(i = 2; i < frame_len - 3; i++)
 11786  0EF5  3002               	movlw	2
 11787  0EF6  00A3               	movwf	??_CRC_cal
 11788  0EF7  0823               	movf	??_CRC_cal,w
 11789  0EF8  00A8               	movwf	CRC_cal@i
 11790  0EF9                     l5976:	
 11791  0EF9  0821               	movf	CRC_cal@frame_len,w
 11792  0EFA  3EFD               	addlw	253
 11793  0EFB  00A3               	movwf	??_CRC_cal
 11794  0EFC  30FF               	movlw	255
 11795  0EFD  1803               	skipnc
 11796  0EFE  3000               	movlw	0
 11797  0EFF  00A4               	movwf	??_CRC_cal+1
 11798  0F00  0824               	movf	??_CRC_cal+1,w
 11799  0F01  3A80               	xorlw	128
 11800  0F02  3C80               	sublw	128
 11801  0F03  1D03               	skipz
 11802  0F04  2F07               	goto	u5475
 11803  0F05  0823               	movf	??_CRC_cal,w
 11804  0F06  0228               	subwf	CRC_cal@i,w
 11805  0F07                     u5475:	
 11806  0F07  1803               	btfsc	3,0
 11807  0F08  2F64               	goto	l5978
 11808                           
 11809                           ;com.c: 171: {
 11810                           ;com.c: 172: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 11811  0F09  0020               	movlb	0	; select bank0
 11812  0F0A  0829               	movf	CRC_cal@remainder,w
 11813  0F0B  00A4               	movwf	??_CRC_cal+1
 11814  0F0C  01A3               	clrf	??_CRC_cal
 11815  0F0D  082A               	movf	CRC_cal@remainder+1,w
 11816  0F0E  00A6               	movwf	??_CRC_cal+3
 11817  0F0F  0829               	movf	CRC_cal@remainder,w
 11818  0F10  00A5               	movwf	??_CRC_cal+2
 11819  0F11  0826               	movf	??_CRC_cal+3,w
 11820  0F12  00A5               	movwf	??_CRC_cal+2
 11821  0F13  01A6               	clrf	??_CRC_cal+3
 11822  0F14  0823               	movf	??_CRC_cal,w
 11823  0F15  0425               	iorwf	??_CRC_cal+2,w
 11824  0F16  00A9               	movwf	CRC_cal@remainder
 11825  0F17  0824               	movf	??_CRC_cal+1,w
 11826  0F18  0426               	iorwf	??_CRC_cal+3,w
 11827  0F19  00AA               	movwf	CRC_cal@remainder+1
 11828                           
 11829                           ;com.c: 173: remainder ^= rx_arr[i];
 11830  0F1A  0828               	movf	CRC_cal@i,w
 11831  0F1B  0727               	addwf	CRC_cal@rx_arr,w
 11832  0F1C  00A3               	movwf	??_CRC_cal
 11833  0F1D  0823               	movf	??_CRC_cal,w
 11834  0F1E  0086               	movwf	6
 11835  0F1F  0187               	clrf	7
 11836  0F20  0801               	movf	1,w
 11837  0F21  00A4               	movwf	??_CRC_cal+1
 11838  0F22  01A5               	clrf	??_CRC_cal+2
 11839  0F23  0824               	movf	??_CRC_cal+1,w
 11840  0F24  06A9               	xorwf	CRC_cal@remainder,f
 11841  0F25  0825               	movf	??_CRC_cal+2,w
 11842  0F26  06AA               	xorwf	CRC_cal@remainder+1,f
 11843                           
 11844                           ;com.c: 174: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 11845  0F27  082A               	movf	CRC_cal@remainder+1,w
 11846  0F28  00A4               	movwf	??_CRC_cal+1
 11847  0F29  0829               	movf	CRC_cal@remainder,w
 11848  0F2A  00A3               	movwf	??_CRC_cal
 11849  0F2B  3004               	movlw	4
 11850  0F2C                     u5465:	
 11851  0F2C  36A4               	lsrf	??_CRC_cal+1,f
 11852  0F2D  0CA3               	rrf	??_CRC_cal,f
 11853  0F2E  0B89               	decfsz	9,f
 11854  0F2F  2F2C               	goto	u5465
 11855  0F30  300F               	movlw	15
 11856  0F31  0523               	andwf	??_CRC_cal,w
 11857  0F32  00A5               	movwf	??_CRC_cal+2
 11858  0F33  3000               	movlw	0
 11859  0F34  0524               	andwf	??_CRC_cal+1,w
 11860  0F35  00A6               	movwf	??_CRC_cal+3
 11861  0F36  0825               	movf	??_CRC_cal+2,w
 11862  0F37  06A9               	xorwf	CRC_cal@remainder,f
 11863  0F38  0826               	movf	??_CRC_cal+3,w
 11864  0F39  06AA               	xorwf	CRC_cal@remainder+1,f
 11865                           
 11866                           ;com.c: 175: remainder ^= (unsigned int)((remainder << 8) << 4);
 11867  0F3A  0829               	movf	CRC_cal@remainder,w
 11868  0F3B  00A4               	movwf	??_CRC_cal+1
 11869  0F3C  01A3               	clrf	??_CRC_cal
 11870  0F3D  0EA3               	swapf	??_CRC_cal,f
 11871  0F3E  0EA4               	swapf	??_CRC_cal+1,f
 11872  0F3F  30F0               	movlw	240
 11873  0F40  05A4               	andwf	??_CRC_cal+1,f
 11874  0F41  0823               	movf	??_CRC_cal,w
 11875  0F42  390F               	andlw	15
 11876  0F43  04A4               	iorwf	??_CRC_cal+1,f
 11877  0F44  30F0               	movlw	240
 11878  0F45  05A3               	andwf	??_CRC_cal,f
 11879  0F46  0823               	movf	??_CRC_cal,w
 11880  0F47  06A9               	xorwf	CRC_cal@remainder,f
 11881  0F48  0824               	movf	??_CRC_cal+1,w
 11882  0F49  06AA               	xorwf	CRC_cal@remainder+1,f
 11883                           
 11884                           ;com.c: 176: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 11885  0F4A  30FF               	movlw	255
 11886  0F4B  0529               	andwf	CRC_cal@remainder,w
 11887  0F4C  00A3               	movwf	??_CRC_cal
 11888  0F4D  3000               	movlw	0
 11889  0F4E  052A               	andwf	CRC_cal@remainder+1,w
 11890  0F4F  00A4               	movwf	??_CRC_cal+1
 11891  0F50  0EA3               	swapf	??_CRC_cal,f
 11892  0F51  0EA4               	swapf	??_CRC_cal+1,f
 11893  0F52  30F0               	movlw	240
 11894  0F53  05A4               	andwf	??_CRC_cal+1,f
 11895  0F54  0823               	movf	??_CRC_cal,w
 11896  0F55  390F               	andlw	15
 11897  0F56  04A4               	iorwf	??_CRC_cal+1,f
 11898  0F57  30F0               	movlw	240
 11899  0F58  05A3               	andwf	??_CRC_cal,f
 11900  0F59  35A3               	lslf	??_CRC_cal,f
 11901  0F5A  0DA4               	rlf	??_CRC_cal+1,f
 11902  0F5B  0823               	movf	??_CRC_cal,w
 11903  0F5C  06A9               	xorwf	CRC_cal@remainder,f
 11904  0F5D  0824               	movf	??_CRC_cal+1,w
 11905  0F5E  06AA               	xorwf	CRC_cal@remainder+1,f
 11906  0F5F  3001               	movlw	1
 11907  0F60  00A3               	movwf	??_CRC_cal
 11908  0F61  0823               	movf	??_CRC_cal,w
 11909  0F62  07A8               	addwf	CRC_cal@i,f
 11910  0F63  2EF9               	goto	l5976
 11911  0F64                     l5978:	
 11912                           
 11913                           ;com.c: 177: }
 11914                           ;com.c: 178: return remainder;
 11915  0F64  0020               	movlb	0	; select bank0
 11916  0F65  082A               	movf	CRC_cal@remainder+1,w
 11917  0F66  00A2               	movwf	?_CRC_cal+1
 11918  0F67  0829               	movf	CRC_cal@remainder,w
 11919  0F68  00A1               	movwf	?_CRC_cal
 11920  0F69  0008               	return
 11921  0F6A                     __end_of_CRC_cal:	
 11922                           
 11923                           	psect	text62
 11924  0837                     __ptext62:	
 11925 ;; *************** function _Bq32k_Time_Init *****************
 11926 ;; Defined at:
 11927 ;;		line 17 in file "mcc_generated_files/bq32k.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;		None
 11930 ;; Auto vars:     Size  Location     Type
 11931 ;;  temp           10   13[BANK0 ] unsigned char [10]
 11932 ;;  time            7    0        struct bq32k_regs
 11933 ;; Return value:  Size  Location     Type
 11934 ;;                  1    wreg      void 
 11935 ;; Registers used:
 11936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11937 ;; Tracked objects:
 11938 ;;		On entry : 0/0
 11939 ;;		On exit  : 0/0
 11940 ;;		Unchanged: 0/0
 11941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11943 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;Total ram usage:       12 bytes
 11947 ;; Hardware stack levels used:    1
 11948 ;; Hardware stack levels required when called:    5
 11949 ;; This function calls:
 11950 ;;		_FLASH_ReadWord
 11951 ;;		_FLASH_WriteWord
 11952 ;;		_I2C_Send_Buffer
 11953 ;; This function is called by:
 11954 ;;		_main
 11955 ;; This function uses a non-reentrant model
 11956 ;;
 11957                           
 11958                           
 11959                           ;psect for function _Bq32k_Time_Init
 11960  0837                     _Bq32k_Time_Init:	
 11961                           
 11962                           ;bq32k.c: 19: bq32k_t time;
 11963                           ;bq32k.c: 20: unsigned char temp[10] = { 0x01,0x44,0x10,0x02,0x18,0x07,0x16 };
 11964                           
 11965                           ;incstack = 0
 11966                           ; Regs used in _Bq32k_Time_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11967  0837  30D4               	movlw	low Bq32k_Time_Init@F2032
 11968  0838  0086               	movwf	6
 11969  0839  3001               	movlw	high Bq32k_Time_Init@F2032
 11970  083A  0087               	movwf	7
 11971  083B  302D               	movlw	low Bq32k_Time_Init@temp
 11972  083C  0084               	movwf	4
 11973  083D  3000               	movlw	high Bq32k_Time_Init@temp
 11974  083E  0085               	movwf	5
 11975  083F  300A               	movlw	10
 11976  0840  0020               	movlb	0	; select bank0
 11977  0841  00AB               	movwf	??_Bq32k_Time_Init
 11978  0842                     u5720:	
 11979  0842  0016               	moviw fsr1++
 11980  0843  001A               	movwi fsr0++
 11981  0844  0BAB               	decfsz	??_Bq32k_Time_Init,f
 11982  0845  2842               	goto	u5720
 11983                           
 11984                           ;bq32k.c: 21: if( FLASH_ReadWord(0x1fff) == 0x3fff )
 11985  0846  30FF               	movlw	255
 11986  0847  00A1               	movwf	FLASH_ReadWord@flashAddr
 11987  0848  301F               	movlw	31
 11988  0849  00A2               	movwf	FLASH_ReadWord@flashAddr+1
 11989  084A  3195  25D2  3188   	fcall	_FLASH_ReadWord
 11990  084D  0020               	movlb	0	; select bank0
 11991  084E  0A21               	incf	?_FLASH_ReadWord,w
 11992  084F  303F               	movlw	63
 11993  0850  1903               	skipnz
 11994  0851  0622               	xorwf	?_FLASH_ReadWord+1,w
 11995  0852  1D03               	btfss	3,2
 11996  0853  0008               	return
 11997                           
 11998                           ;bq32k.c: 22: {
 11999                           ;bq32k.c: 23: I2C_Send_Buffer(0, temp, 7);
 12000  0854  302D               	movlw	(low (Bq32k_Time_Init@temp| 0))& (0+255)
 12001  0855  00AB               	movwf	??_Bq32k_Time_Init
 12002  0856  082B               	movf	??_Bq32k_Time_Init,w
 12003  0857  00A4               	movwf	I2C_Send_Buffer@buff
 12004  0858  3007               	movlw	7
 12005  0859  00AC               	movwf	??_Bq32k_Time_Init+1
 12006  085A  082C               	movf	??_Bq32k_Time_Init+1,w
 12007  085B  00A5               	movwf	I2C_Send_Buffer@Length
 12008  085C  3000               	movlw	0
 12009  085D  3189  210C  3188   	fcall	_I2C_Send_Buffer
 12010                           
 12011                           ;bq32k.c: 24: FLASH_WriteWord(0x1fff, 0x00);
 12012  0860  30FF               	movlw	255
 12013  0861  0020               	movlb	0	; select bank0
 12014  0862  00A1               	movwf	FLASH_WriteWord@flashAddr
 12015  0863  301F               	movlw	31
 12016  0864  00A2               	movwf	FLASH_WriteWord@flashAddr+1
 12017  0865  3000               	movlw	0
 12018  0866  00A3               	movwf	FLASH_WriteWord@word
 12019  0867  00A4               	movwf	FLASH_WriteWord@word+1
 12020  0868  3197  271E         	fcall	_FLASH_WriteWord
 12021  086A  0008               	return
 12022  086B                     __end_of_Bq32k_Time_Init:	
 12023                           
 12024                           	psect	text63
 12025  090C                     __ptext63:	
 12026 ;; *************** function _I2C_Send_Buffer *****************
 12027 ;; Defined at:
 12028 ;;		line 173 in file "mcc_generated_files/i2c.c"
 12029 ;; Parameters:    Size  Location     Type
 12030 ;;  ADD             1    wreg     unsigned char 
 12031 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 12032 ;;		 -> Bq32k_Rtc_Write_Time@temp(10), Bq32k_Time_Init@temp(10), 
 12033 ;;  Length          1    5[BANK0 ] unsigned char 
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;  ADD             1    8[BANK0 ] unsigned char 
 12036 ;;  Flag            1   10[BANK0 ] unsigned char 
 12037 ;;  i               1    9[BANK0 ] unsigned char 
 12038 ;; Return value:  Size  Location     Type
 12039 ;;                  1    wreg      unsigned char 
 12040 ;; Registers used:
 12041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12042 ;; Tracked objects:
 12043 ;;		On entry : 0/0
 12044 ;;		On exit  : 0/0
 12045 ;;		Unchanged: 0/0
 12046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;Total ram usage:        7 bytes
 12052 ;; Hardware stack levels used:    1
 12053 ;; Hardware stack levels required when called:    4
 12054 ;; This function calls:
 12055 ;;		_I2C_Send_Byte
 12056 ;;		_I2C_Start
 12057 ;;		_I2C_Stop
 12058 ;; This function is called by:
 12059 ;;		_Bq32k_Time_Init
 12060 ;;		_Bq32k_Rtc_Write_Time
 12061 ;; This function uses a non-reentrant model
 12062 ;;
 12063                           
 12064                           
 12065                           ;psect for function _I2C_Send_Buffer
 12066  090C                     _I2C_Send_Buffer:	
 12067                           
 12068                           ;incstack = 0
 12069                           ; Regs used in _I2C_Send_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12070                           ;I2C_Send_Buffer@ADD stored from wreg
 12071  090C  0020               	movlb	0	; select bank0
 12072  090D  00A8               	movwf	I2C_Send_Buffer@ADD
 12073                           
 12074                           ;i2c.c: 175: unsigned char Flag=1;
 12075  090E  01AA               	clrf	I2C_Send_Buffer@Flag
 12076  090F  0AAA               	incf	I2C_Send_Buffer@Flag,f
 12077                           
 12078                           ;i2c.c: 176: unsigned char i;
 12079                           ;i2c.c: 178: I2C_Start();
 12080  0910  3195  253D  3189   	fcall	_I2C_Start
 12081                           
 12082                           ;i2c.c: 180: Flag=I2C_Send_Byte(0XD0);
 12083  0913  30D0               	movlw	208
 12084  0914  318B  2394  3189   	fcall	_I2C_Send_Byte
 12085  0917  0020               	movlb	0	; select bank0
 12086  0918  00A6               	movwf	??_I2C_Send_Buffer
 12087  0919  0826               	movf	??_I2C_Send_Buffer,w
 12088  091A  00AA               	movwf	I2C_Send_Buffer@Flag
 12089                           
 12090                           ;i2c.c: 181: if(Flag)
 12091  091B  082A               	movf	I2C_Send_Buffer@Flag,w
 12092  091C  1D03               	btfss	3,2
 12093  091D  0008               	return
 12094                           
 12095                           ;i2c.c: 184: Flag=I2C_Send_Byte( ADD );
 12096                           
 12097                           ;i2c.c: 182: return 0x01;
 12098                           ;	Return value of _I2C_Send_Buffer is never used
 12099  091E  0828               	movf	I2C_Send_Buffer@ADD,w
 12100  091F  318B  2394  3189   	fcall	_I2C_Send_Byte
 12101  0922  0020               	movlb	0	; select bank0
 12102  0923  00A6               	movwf	??_I2C_Send_Buffer
 12103  0924  0826               	movf	??_I2C_Send_Buffer,w
 12104  0925  00AA               	movwf	I2C_Send_Buffer@Flag
 12105                           
 12106                           ;i2c.c: 185: if(Flag)
 12107  0926  082A               	movf	I2C_Send_Buffer@Flag,w
 12108  0927  1D03               	btfss	3,2
 12109  0928  0008               	return
 12110                           
 12111                           ;i2c.c: 188: for (i = 0; i<Length; i++)
 12112                           
 12113                           ;i2c.c: 186: return 0x01;
 12114                           ;	Return value of _I2C_Send_Buffer is never used
 12115  0929  01A9               	clrf	I2C_Send_Buffer@i
 12116  092A                     l5950:	
 12117  092A  0825               	movf	I2C_Send_Buffer@Length,w
 12118  092B  0229               	subwf	I2C_Send_Buffer@i,w
 12119  092C  1803               	btfsc	3,0
 12120  092D  2944               	goto	l5952
 12121                           
 12122                           ;i2c.c: 189: {
 12123                           ;i2c.c: 190: Flag=I2C_Send_Byte(*(buff+i));
 12124  092E  0829               	movf	I2C_Send_Buffer@i,w
 12125  092F  0724               	addwf	I2C_Send_Buffer@buff,w
 12126  0930  00A6               	movwf	??_I2C_Send_Buffer
 12127  0931  0826               	movf	??_I2C_Send_Buffer,w
 12128  0932  0086               	movwf	6
 12129  0933  0187               	clrf	7
 12130  0934  0801               	movf	1,w
 12131  0935  318B  2394  3189   	fcall	_I2C_Send_Byte
 12132  0938  0020               	movlb	0	; select bank0
 12133  0939  00A7               	movwf	??_I2C_Send_Buffer+1
 12134  093A  0827               	movf	??_I2C_Send_Buffer+1,w
 12135  093B  00AA               	movwf	I2C_Send_Buffer@Flag
 12136                           
 12137                           ;i2c.c: 191: if(Flag)
 12138  093C  082A               	movf	I2C_Send_Buffer@Flag,w
 12139  093D  1D03               	btfss	3,2
 12140  093E  0008               	return
 12141                           
 12142                           ;i2c.c: 192: return 0x01;
 12143                           ;	Return value of _I2C_Send_Buffer is never used
 12144  093F  3001               	movlw	1
 12145  0940  00A6               	movwf	??_I2C_Send_Buffer
 12146  0941  0826               	movf	??_I2C_Send_Buffer,w
 12147  0942  07A9               	addwf	I2C_Send_Buffer@i,f
 12148  0943  292A               	goto	l5950
 12149  0944                     l5952:	
 12150                           
 12151                           ;i2c.c: 193: }
 12152                           ;i2c.c: 194: I2C_Stop();
 12153  0944  3195  255A         	fcall	_I2C_Stop
 12154  0946  0008               	return
 12155  0947                     __end_of_I2C_Send_Buffer:	
 12156                           ;i2c.c: 195: return 0x00;
 12157                           ;	Return value of _I2C_Send_Buffer is never used
 12158                           
 12159                           
 12160                           	psect	text64
 12161  155A                     __ptext64:	
 12162 ;; *************** function _I2C_Stop *****************
 12163 ;; Defined at:
 12164 ;;		line 102 in file "mcc_generated_files/i2c.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;		None
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;		None
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  1    wreg      void 
 12171 ;; Registers used:
 12172 ;;		wreg
 12173 ;; Tracked objects:
 12174 ;;		On entry : 0/0
 12175 ;;		On exit  : 0/0
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12181 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;Total ram usage:        1 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; Hardware stack levels required when called:    3
 12185 ;; This function calls:
 12186 ;;		Nothing
 12187 ;; This function is called by:
 12188 ;;		_I2C_Read_Buffer
 12189 ;;		_I2C_Send_Buffer
 12190 ;; This function uses a non-reentrant model
 12191 ;;
 12192                           
 12193                           
 12194                           ;psect for function _I2C_Stop
 12195  155A                     _I2C_Stop:	
 12196                           
 12197                           ;incstack = 0
 12198                           ; Regs used in _I2C_Stop: [wreg]
 12199                           ;i2c.c: 104: do { LATB0 = 0; } while(0);
 12200  155A  0022               	movlb	2	; select bank2
 12201  155B  100D               	bcf	13,0	;volatile
 12202                           
 12203                           ;i2c.c: 105: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12204  155C  3003               	movlw	3
 12205  155D  0020               	movlb	0	; select bank0
 12206  155E  00A1               	movwf	??_I2C_Stop
 12207  155F                     u6307:	
 12208  155F  0BA1               	decfsz	??_I2C_Stop,f
 12209  1560  2D5F               	goto	u6307
 12210                           
 12211                           ;i2c.c: 106: do { LATB1 = 0; } while(0);
 12212  1561  0022               	movlb	2	; select bank2
 12213  1562  108D               	bcf	13,1	;volatile
 12214                           
 12215                           ;i2c.c: 107: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12216  1563  3003               	movlw	3
 12217  1564  0020               	movlb	0	; select bank0
 12218  1565  00A1               	movwf	??_I2C_Stop
 12219  1566                     u6317:	
 12220  1566  0BA1               	decfsz	??_I2C_Stop,f
 12221  1567  2D66               	goto	u6317
 12222                           
 12223                           ;i2c.c: 108: do { LATB0 = 1; } while(0);
 12224  1568  0022               	movlb	2	; select bank2
 12225  1569  140D               	bsf	13,0	;volatile
 12226                           
 12227                           ;i2c.c: 109: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12228  156A  3003               	movlw	3
 12229  156B  0020               	movlb	0	; select bank0
 12230  156C  00A1               	movwf	??_I2C_Stop
 12231  156D                     u6327:	
 12232  156D  0BA1               	decfsz	??_I2C_Stop,f
 12233  156E  2D6D               	goto	u6327
 12234                           
 12235                           ;i2c.c: 110: do { LATB1 = 1; } while(0);
 12236  156F  0022               	movlb	2	; select bank2
 12237  1570  148D               	bsf	13,1	;volatile
 12238                           
 12239                           ;i2c.c: 111: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12240  1571  3003               	movlw	3
 12241  1572  0020               	movlb	0	; select bank0
 12242  1573  00A1               	movwf	??_I2C_Stop
 12243  1574                     u6337:	
 12244  1574  0BA1               	decfsz	??_I2C_Stop,f
 12245  1575  2D74               	goto	u6337
 12246  1576  0008               	return
 12247  1577                     __end_of_I2C_Stop:	
 12248                           
 12249                           	psect	text65
 12250  153D                     __ptext65:	
 12251 ;; *************** function _I2C_Start *****************
 12252 ;; Defined at:
 12253 ;;		line 16 in file "mcc_generated_files/i2c.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;		None
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;		None
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  1    wreg      void 
 12260 ;; Registers used:
 12261 ;;		wreg
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;Total ram usage:        1 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    3
 12274 ;; This function calls:
 12275 ;;		Nothing
 12276 ;; This function is called by:
 12277 ;;		_I2C_Read_Buffer
 12278 ;;		_I2C_Send_Buffer
 12279 ;; This function uses a non-reentrant model
 12280 ;;
 12281                           
 12282                           
 12283                           ;psect for function _I2C_Start
 12284  153D                     _I2C_Start:	
 12285                           
 12286                           ;incstack = 0
 12287                           ; Regs used in _I2C_Start: [wreg]
 12288                           ;i2c.c: 18: do { LATB1 = 1; } while(0);
 12289  153D  0022               	movlb	2	; select bank2
 12290  153E  148D               	bsf	13,1	;volatile
 12291                           
 12292                           ;i2c.c: 19: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12293  153F  3003               	movlw	3
 12294  1540  0020               	movlb	0	; select bank0
 12295  1541  00A1               	movwf	??_I2C_Start
 12296  1542                     u6347:	
 12297  1542  0BA1               	decfsz	??_I2C_Start,f
 12298  1543  2D42               	goto	u6347
 12299                           
 12300                           ;i2c.c: 20: do { LATB0 = 1; } while(0);
 12301  1544  0022               	movlb	2	; select bank2
 12302  1545  140D               	bsf	13,0	;volatile
 12303                           
 12304                           ;i2c.c: 21: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12305  1546  3003               	movlw	3
 12306  1547  0020               	movlb	0	; select bank0
 12307  1548  00A1               	movwf	??_I2C_Start
 12308  1549                     u6357:	
 12309  1549  0BA1               	decfsz	??_I2C_Start,f
 12310  154A  2D49               	goto	u6357
 12311                           
 12312                           ;i2c.c: 22: do { LATB1 = 0; } while(0);
 12313  154B  0022               	movlb	2	; select bank2
 12314  154C  108D               	bcf	13,1	;volatile
 12315                           
 12316                           ;i2c.c: 23: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12317  154D  3003               	movlw	3
 12318  154E  0020               	movlb	0	; select bank0
 12319  154F  00A1               	movwf	??_I2C_Start
 12320  1550                     u6367:	
 12321  1550  0BA1               	decfsz	??_I2C_Start,f
 12322  1551  2D50               	goto	u6367
 12323                           
 12324                           ;i2c.c: 24: do { LATB0 = 0; } while(0);
 12325  1552  0022               	movlb	2	; select bank2
 12326  1553  100D               	bcf	13,0	;volatile
 12327                           
 12328                           ;i2c.c: 25: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12329  1554  3003               	movlw	3
 12330  1555  0020               	movlb	0	; select bank0
 12331  1556  00A1               	movwf	??_I2C_Start
 12332  1557                     u6377:	
 12333  1557  0BA1               	decfsz	??_I2C_Start,f
 12334  1558  2D57               	goto	u6377
 12335  1559  0008               	return
 12336  155A                     __end_of_I2C_Start:	
 12337                           
 12338                           	psect	text66
 12339  0B94                     __ptext66:	
 12340 ;; *************** function _I2C_Send_Byte *****************
 12341 ;; Defined at:
 12342 ;;		line 34 in file "mcc_generated_files/i2c.c"
 12343 ;; Parameters:    Size  Location     Type
 12344 ;;  Data            1    wreg     unsigned char 
 12345 ;; Auto vars:     Size  Location     Type
 12346 ;;  Data            1    2[BANK0 ] unsigned char 
 12347 ;;  i               1    3[BANK0 ] unsigned char 
 12348 ;; Return value:  Size  Location     Type
 12349 ;;                  1    wreg      unsigned char 
 12350 ;; Registers used:
 12351 ;;		wreg, status,2, status,0
 12352 ;; Tracked objects:
 12353 ;;		On entry : 0/0
 12354 ;;		On exit  : 0/0
 12355 ;;		Unchanged: 0/0
 12356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;Total ram usage:        3 bytes
 12362 ;; Hardware stack levels used:    1
 12363 ;; Hardware stack levels required when called:    3
 12364 ;; This function calls:
 12365 ;;		Nothing
 12366 ;; This function is called by:
 12367 ;;		_I2C_Read_Buffer
 12368 ;;		_I2C_Send_Buffer
 12369 ;; This function uses a non-reentrant model
 12370 ;;
 12371                           
 12372                           
 12373                           ;psect for function _I2C_Send_Byte
 12374  0B94                     _I2C_Send_Byte:	
 12375                           
 12376                           ;incstack = 0
 12377                           ; Regs used in _I2C_Send_Byte: [wreg+status,2+status,0]
 12378                           ;I2C_Send_Byte@Data stored from wreg
 12379  0B94  0020               	movlb	0	; select bank0
 12380  0B95  00A2               	movwf	I2C_Send_Byte@Data
 12381                           
 12382                           ;i2c.c: 36: unsigned char i;
 12383                           ;i2c.c: 37: for(i=0;i<8;i++)
 12384  0B96  01A3               	clrf	I2C_Send_Byte@i
 12385  0B97  3008               	movlw	8
 12386  0B98  0223               	subwf	I2C_Send_Byte@i,w
 12387  0B99  1803               	btfsc	3,0
 12388  0B9A  2BC1               	goto	l839
 12389  0B9B                     l827:	
 12390                           
 12391                           ;i2c.c: 38: {
 12392                           ;i2c.c: 39: if(Data&0x80)
 12393  0B9B  1FA2               	btfss	I2C_Send_Byte@Data,7
 12394  0B9C  2BA0               	goto	l833
 12395                           
 12396                           ;i2c.c: 40: do { LATB1 = 1; } while(0);
 12397  0B9D  0022               	movlb	2	; select bank2
 12398  0B9E  148D               	bsf	13,1	;volatile
 12399  0B9F  2BA2               	goto	l5158
 12400  0BA0                     l833:	
 12401                           ;i2c.c: 41: else
 12402                           ;i2c.c: 42: do { LATB1 = 0; } while(0);
 12403                           
 12404  0BA0  0022               	movlb	2	; select bank2
 12405  0BA1  108D               	bcf	13,1	;volatile
 12406  0BA2                     l5158:	
 12407                           
 12408                           ;i2c.c: 43: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12409  0BA2  3003               	movlw	3
 12410  0BA3  0020               	movlb	0	; select bank0
 12411  0BA4  00A1               	movwf	??_I2C_Send_Byte
 12412  0BA5                     u6387:	
 12413  0BA5  0BA1               	decfsz	??_I2C_Send_Byte,f
 12414  0BA6  2BA5               	goto	u6387
 12415                           
 12416                           ;i2c.c: 44: do { LATB0 = 1; } while(0);
 12417  0BA7  0022               	movlb	2	; select bank2
 12418  0BA8  140D               	bsf	13,0	;volatile
 12419                           
 12420                           ;i2c.c: 45: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12421  0BA9  3003               	movlw	3
 12422  0BAA  0020               	movlb	0	; select bank0
 12423  0BAB  00A1               	movwf	??_I2C_Send_Byte
 12424  0BAC                     u6397:	
 12425  0BAC  0BA1               	decfsz	??_I2C_Send_Byte,f
 12426  0BAD  2BAC               	goto	u6397
 12427                           
 12428                           ;i2c.c: 46: Data<<=1;
 12429  0BAE  1003               	clrc
 12430  0BAF  0020               	movlb	0	; select bank0
 12431  0BB0  0DA2               	rlf	I2C_Send_Byte@Data,f
 12432                           
 12433                           ;i2c.c: 47: do { LATB0 = 0; } while(0);
 12434  0BB1  0022               	movlb	2	; select bank2
 12435  0BB2  100D               	bcf	13,0	;volatile
 12436                           
 12437                           ;i2c.c: 48: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12438  0BB3  3003               	movlw	3
 12439  0BB4  0020               	movlb	0	; select bank0
 12440  0BB5  00A1               	movwf	??_I2C_Send_Byte
 12441  0BB6                     u6407:	
 12442  0BB6  0BA1               	decfsz	??_I2C_Send_Byte,f
 12443  0BB7  2BB6               	goto	u6407
 12444  0BB8  3001               	movlw	1
 12445  0BB9  0020               	movlb	0	; select bank0
 12446  0BBA  00A1               	movwf	??_I2C_Send_Byte
 12447  0BBB  0821               	movf	??_I2C_Send_Byte,w
 12448  0BBC  07A3               	addwf	I2C_Send_Byte@i,f
 12449  0BBD  3008               	movlw	8
 12450  0BBE  0223               	subwf	I2C_Send_Byte@i,w
 12451  0BBF  1C03               	skipc
 12452  0BC0  2B9B               	goto	l827
 12453  0BC1                     l839:	
 12454                           ;i2c.c: 49: }
 12455                           ;i2c.c: 50: do { LATB1 = 1; } while(0);
 12456                           
 12457  0BC1  0022               	movlb	2	; select bank2
 12458  0BC2  148D               	bsf	13,1	;volatile
 12459                           
 12460                           ;i2c.c: 51: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12461  0BC3  3003               	movlw	3
 12462  0BC4  0020               	movlb	0	; select bank0
 12463  0BC5  00A1               	movwf	??_I2C_Send_Byte
 12464  0BC6                     u6417:	
 12465  0BC6  0BA1               	decfsz	??_I2C_Send_Byte,f
 12466  0BC7  2BC6               	goto	u6417
 12467                           
 12468                           ;i2c.c: 52: do { LATB0 = 1; } while(0);
 12469  0BC8  0022               	movlb	2	; select bank2
 12470  0BC9  140D               	bsf	13,0	;volatile
 12471                           
 12472                           ;i2c.c: 53: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12473  0BCA  3003               	movlw	3
 12474  0BCB  0020               	movlb	0	; select bank0
 12475  0BCC  00A1               	movwf	??_I2C_Send_Byte
 12476  0BCD                     u6427:	
 12477  0BCD  0BA1               	decfsz	??_I2C_Send_Byte,f
 12478  0BCE  2BCD               	goto	u6427
 12479                           
 12480                           ;i2c.c: 54: do { TRISB1 = 1; } while(0);
 12481  0BCF  0021               	movlb	1	; select bank1
 12482  0BD0  148D               	bsf	13,1	;volatile
 12483                           
 12484                           ;i2c.c: 55: if(RB1)
 12485  0BD1  0020               	movlb	0	; select bank0
 12486  0BD2  1C8D               	btfss	13,1	;volatile
 12487  0BD3  2BD8               	goto	l849
 12488                           
 12489                           ;i2c.c: 56: {
 12490                           ;i2c.c: 57: do { TRISB1 = 0; } while(0);
 12491  0BD4  0021               	movlb	1	; select bank1
 12492  0BD5  108D               	bcf	13,1	;volatile
 12493                           
 12494                           ;i2c.c: 58: return 0x01;
 12495  0BD6  3001               	movlw	1
 12496  0BD7  0008               	return
 12497  0BD8                     l849:	
 12498                           ;i2c.c: 59: }
 12499                           ;i2c.c: 60: do { TRISB1 = 0; } while(0);
 12500                           
 12501  0BD8  0021               	movlb	1	; select bank1
 12502  0BD9  108D               	bcf	13,1	;volatile
 12503                           
 12504                           ;i2c.c: 61: do { LATB0 = 0; } while(0);
 12505  0BDA  0022               	movlb	2	; select bank2
 12506  0BDB  100D               	bcf	13,0	;volatile
 12507                           
 12508                           ;i2c.c: 62: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12509  0BDC  3003               	movlw	3
 12510  0BDD  0020               	movlb	0	; select bank0
 12511  0BDE  00A1               	movwf	??_I2C_Send_Byte
 12512  0BDF                     u6437:	
 12513  0BDF  0BA1               	decfsz	??_I2C_Send_Byte,f
 12514  0BE0  2BDF               	goto	u6437
 12515                           
 12516                           ;i2c.c: 63: do { LATB1 = 0; } while(0);
 12517  0BE1  0022               	movlb	2	; select bank2
 12518  0BE2  108D               	bcf	13,1	;volatile
 12519                           
 12520                           ;i2c.c: 64: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12521  0BE3  3003               	movlw	3
 12522  0BE4  0020               	movlb	0	; select bank0
 12523  0BE5  00A1               	movwf	??_I2C_Send_Byte
 12524  0BE6                     u6447:	
 12525  0BE6  0BA1               	decfsz	??_I2C_Send_Byte,f
 12526  0BE7  2BE6               	goto	u6447
 12527                           
 12528                           ;i2c.c: 65: return 0x00;
 12529  0BE8  3000               	movlw	0
 12530  0BE9  0008               	return
 12531  0BEA                     __end_of_I2C_Send_Byte:	
 12532                           
 12533                           	psect	text67
 12534  171E                     __ptext67:	
 12535 ;; *************** function _FLASH_WriteWord *****************
 12536 ;; Defined at:
 12537 ;;		line 93 in file "mcc_generated_files/memory.c"
 12538 ;; Parameters:    Size  Location     Type
 12539 ;;  flashAddr       2    1[BANK0 ] unsigned int 
 12540 ;;  word            2    3[BANK0 ] unsigned int 
 12541 ;; Auto vars:     Size  Location     Type
 12542 ;;  GIEBitValue     1    5[BANK0 ] unsigned char 
 12543 ;; Return value:  Size  Location     Type
 12544 ;;                  1    wreg      void 
 12545 ;; Registers used:
 12546 ;;		wreg, status,2, status,0
 12547 ;; Tracked objects:
 12548 ;;		On entry : 0/0
 12549 ;;		On exit  : 0/0
 12550 ;;		Unchanged: 0/0
 12551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;Total ram usage:        5 bytes
 12557 ;; Hardware stack levels used:    1
 12558 ;; Hardware stack levels required when called:    3
 12559 ;; This function calls:
 12560 ;;		Nothing
 12561 ;; This function is called by:
 12562 ;;		_Bq32k_Time_Init
 12563 ;;		_Write_Flash_head
 12564 ;;		_Write_Flash_finish
 12565 ;;		_Save_Write_word
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           
 12570                           ;psect for function _FLASH_WriteWord
 12571  171E                     _FLASH_WriteWord:	
 12572                           
 12573                           ;memory.c: 95: uint8_t GIEBitValue = INTCONbits.GIE;
 12574                           
 12575                           ;incstack = 0
 12576                           ; Regs used in _FLASH_WriteWord: [wreg+status,2+status,0]
 12577  171E  3000               	movlw	0
 12578  171F  1B8B               	btfsc	11,7	;volatile
 12579  1720  3001               	movlw	1
 12580  1721  0020               	movlb	0	; select bank0
 12581  1722  00A5               	movwf	FLASH_WriteWord@GIEBitValue
 12582                           
 12583                           ;memory.c: 98: INTCONbits.GIE = 0;
 12584  1723  138B               	bcf	11,7	;volatile
 12585                           
 12586                           ;memory.c: 102: PMCON1bits.CFGS = 0;
 12587  1724  0023               	movlb	3	; select bank3
 12588  1725  1315               	bcf	21,6	;volatile
 12589                           
 12590                           ;memory.c: 103: PMCON1bits.WREN = 1;
 12591  1726  1515               	bsf	21,2	;volatile
 12592                           
 12593                           ;memory.c: 104: PMCON1bits.LWLO = 1;
 12594  1727  1695               	bsf	21,5	;volatile
 12595                           
 12596                           ;memory.c: 107: PMADRL = (flashAddr & 0xFF);
 12597  1728  0020               	movlb	0	; select bank0
 12598  1729  0821               	movf	FLASH_WriteWord@flashAddr,w
 12599  172A  0023               	movlb	3	; select bank3
 12600  172B  0091               	movwf	17	;volatile
 12601                           
 12602                           ;memory.c: 109: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12603  172C  0020               	movlb	0	; select bank0
 12604  172D  0822               	movf	FLASH_WriteWord@flashAddr+1,w
 12605  172E  0023               	movlb	3	; select bank3
 12606  172F  0092               	movwf	18	;volatile
 12607                           
 12608                           ;memory.c: 112: PMDATL = word;
 12609  1730  0020               	movlb	0	; select bank0
 12610  1731  0823               	movf	FLASH_WriteWord@word,w
 12611  1732  0023               	movlb	3	; select bank3
 12612  1733  0093               	movwf	19	;volatile
 12613                           
 12614                           ;memory.c: 113: PMDATH = ((word & 0xFF00) >> 8);
 12615  1734  0020               	movlb	0	; select bank0
 12616  1735  0824               	movf	FLASH_WriteWord@word+1,w
 12617  1736  0023               	movlb	3	; select bank3
 12618  1737  0094               	movwf	20	;volatile
 12619                           
 12620                           ;memory.c: 116: PMCON1bits.LWLO = 0;
 12621  1738  1295               	bcf	21,5	;volatile
 12622                           
 12623                           ;memory.c: 118: PMCON2 = 0x55;
 12624  1739  3055               	movlw	85
 12625  173A  0096               	movwf	22	;volsfr
 12626                           
 12627                           ;memory.c: 119: PMCON2 = 0xAA;
 12628  173B  30AA               	movlw	170
 12629  173C  0096               	movwf	22	;volsfr
 12630                           
 12631                           ;memory.c: 120: PMCON1bits.WR = 1;
 12632  173D  1495               	bsf	21,1	;volatile
 12633                           
 12634                           ;memory.c: 121: __nop();
 12635  173E  0000               	nop
 12636                           
 12637                           ;memory.c: 122: __nop();
 12638  173F  0000               	nop
 12639                           
 12640                           ;memory.c: 124: PMCON1bits.WREN = 0;
 12641  1740  0023               	movlb	3	; select bank3
 12642  1741  1115               	bcf	21,2	;volatile
 12643                           
 12644                           ;memory.c: 125: INTCONbits.GIE = GIEBitValue;
 12645  1742  0020               	movlb	0	; select bank0
 12646  1743  0C25               	rrf	FLASH_WriteWord@GIEBitValue,w
 12647  1744  1C03               	skipc
 12648  1745  138B               	bcf	11,7	;volatile
 12649  1746  1803               	skipnc
 12650  1747  178B               	bsf	11,7	;volatile
 12651  1748  0008               	return
 12652  1749                     __end_of_FLASH_WriteWord:	
 12653                           
 12654                           	psect	text68
 12655  15D2                     __ptext68:	
 12656 ;; *************** function _FLASH_ReadWord *****************
 12657 ;; Defined at:
 12658 ;;		line 58 in file "mcc_generated_files/memory.c"
 12659 ;; Parameters:    Size  Location     Type
 12660 ;;  flashAddr       2    1[BANK0 ] unsigned int 
 12661 ;; Auto vars:     Size  Location     Type
 12662 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 12663 ;; Return value:  Size  Location     Type
 12664 ;;                  2    1[BANK0 ] unsigned int 
 12665 ;; Registers used:
 12666 ;;		wreg, status,2, status,0
 12667 ;; Tracked objects:
 12668 ;;		On entry : 0/0
 12669 ;;		On exit  : 0/0
 12670 ;;		Unchanged: 0/0
 12671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12675 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12676 ;;Total ram usage:        3 bytes
 12677 ;; Hardware stack levels used:    1
 12678 ;; Hardware stack levels required when called:    3
 12679 ;; This function calls:
 12680 ;;		Nothing
 12681 ;; This function is called by:
 12682 ;;		_FLASH_readBlock
 12683 ;;		_Key_Process
 12684 ;;		_Bq32k_Time_Init
 12685 ;;		_Serach_Flash_Head
 12686 ;; This function uses a non-reentrant model
 12687 ;;
 12688                           
 12689                           
 12690                           ;psect for function _FLASH_ReadWord
 12691  15D2                     _FLASH_ReadWord:	
 12692                           
 12693                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12694                           
 12695                           ;incstack = 0
 12696                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12697  15D2  3000               	movlw	0
 12698  15D3  1B8B               	btfsc	11,7	;volatile
 12699  15D4  3001               	movlw	1
 12700  15D5  0020               	movlb	0	; select bank0
 12701  15D6  00A3               	movwf	FLASH_ReadWord@GIEBitValue
 12702                           
 12703                           ;memory.c: 61: INTCONbits.GIE = 0;
 12704  15D7  138B               	bcf	11,7	;volatile
 12705                           
 12706                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12707  15D8  0821               	movf	FLASH_ReadWord@flashAddr,w
 12708  15D9  0023               	movlb	3	; select bank3
 12709  15DA  0091               	movwf	17	;volatile
 12710                           
 12711                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12712  15DB  0020               	movlb	0	; select bank0
 12713  15DC  0822               	movf	FLASH_ReadWord@flashAddr+1,w
 12714  15DD  0023               	movlb	3	; select bank3
 12715  15DE  0092               	movwf	18	;volatile
 12716                           
 12717                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12718  15DF  1315               	bcf	21,6	;volatile
 12719                           
 12720                           ;memory.c: 66: PMCON1bits.RD = 1;
 12721  15E0  1415               	bsf	21,0	;volatile
 12722                           
 12723                           ;memory.c: 67: __nop();
 12724  15E1  0000               	nop
 12725                           
 12726                           ;memory.c: 68: __nop();
 12727  15E2  0000               	nop
 12728                           
 12729                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12730  15E3  0020               	movlb	0	; select bank0
 12731  15E4  0C23               	rrf	FLASH_ReadWord@GIEBitValue,w
 12732  15E5  1C03               	skipc
 12733  15E6  138B               	bcf	11,7	;volatile
 12734  15E7  1803               	skipnc
 12735  15E8  178B               	bsf	11,7	;volatile
 12736                           
 12737                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12738  15E9  0023               	movlb	3	; select bank3
 12739  15EA  0814               	movf	20,w	;volatile
 12740  15EB  0020               	movlb	0	; select bank0
 12741  15EC  00A2               	movwf	?_FLASH_ReadWord+1
 12742  15ED  0023               	movlb	3	; select bank3
 12743  15EE  0813               	movf	19,w	;volatile
 12744  15EF  0020               	movlb	0	; select bank0
 12745  15F0  00A1               	movwf	?_FLASH_ReadWord
 12746  15F1  0008               	return
 12747  15F2                     __end_of_FLASH_ReadWord:	
 12748                           
 12749                           	psect	text69
 12750  1595                     __ptext69:	
 12751 ;; *************** function _ADC_GetConversion *****************
 12752 ;; Defined at:
 12753 ;;		line 106 in file "mcc_generated_files/adc.c"
 12754 ;; Parameters:    Size  Location     Type
 12755 ;;  channel         1    wreg     enum E1850
 12756 ;; Auto vars:     Size  Location     Type
 12757 ;;  channel         1    4[BANK0 ] enum E1850
 12758 ;; Return value:  Size  Location     Type
 12759 ;;                  2    1[BANK0 ] unsigned int 
 12760 ;; Registers used:
 12761 ;;		wreg, status,2, status,0
 12762 ;; Tracked objects:
 12763 ;;		On entry : 0/0
 12764 ;;		On exit  : 0/0
 12765 ;;		Unchanged: 0/0
 12766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12767 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;Total ram usage:        4 bytes
 12772 ;; Hardware stack levels used:    1
 12773 ;; Hardware stack levels required when called:    3
 12774 ;; This function calls:
 12775 ;;		Nothing
 12776 ;; This function is called by:
 12777 ;;		_main
 12778 ;; This function uses a non-reentrant model
 12779 ;;
 12780                           
 12781                           
 12782                           ;psect for function _ADC_GetConversion
 12783  1595                     _ADC_GetConversion:	
 12784                           
 12785                           ;incstack = 0
 12786                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 12787                           ;ADC_GetConversion@channel stored from wreg
 12788  1595  0020               	movlb	0	; select bank0
 12789  1596  00A4               	movwf	ADC_GetConversion@channel
 12790                           
 12791                           ;adc.c: 108: ADCON0bits.CHS = channel;
 12792  1597  0824               	movf	ADC_GetConversion@channel,w
 12793  1598  00A3               	movwf	??_ADC_GetConversion
 12794  1599  0DA3               	rlf	??_ADC_GetConversion,f
 12795  159A  0DA3               	rlf	??_ADC_GetConversion,f
 12796  159B  0021               	movlb	1	; select bank1
 12797  159C  081D               	movf	29,w	;volatile
 12798  159D  0020               	movlb	0	; select bank0
 12799  159E  0623               	xorwf	??_ADC_GetConversion,w
 12800  159F  3983               	andlw	-125
 12801  15A0  0623               	xorwf	??_ADC_GetConversion,w
 12802  15A1  0021               	movlb	1	; select bank1
 12803  15A2  009D               	movwf	29	;volatile
 12804                           
 12805                           ;adc.c: 111: ADCON0bits.ADON = 1;
 12806  15A3  141D               	bsf	29,0	;volatile
 12807                           
 12808                           ;adc.c: 114: _delay((unsigned long)((5)*(4000000/4000000.0)));
 12809  15A4  3200               	nop2	;2 cycle nop
 12810  15A5  3200               	nop2	;2 cycle nop
 12811  15A6  0000               	nop
 12812                           
 12813                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
 12814  15A7  0021               	movlb	1	; select bank1
 12815  15A8  149D               	bsf	29,1	;volatile
 12816  15A9                     l261:	
 12817                           ;adc.c: 120: while (ADCON0bits.GO_nDONE) {
 12818                           
 12819  15A9  189D               	btfsc	29,1	;volatile
 12820  15AA  2DA9               	goto	l261
 12821                           
 12822                           ;adc.c: 121: }
 12823                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
 12824  15AB  081C               	movf	28,w	;volatile
 12825  15AC  0020               	movlb	0	; select bank0
 12826  15AD  00A2               	movwf	?_ADC_GetConversion+1
 12827  15AE  0021               	movlb	1	; select bank1
 12828  15AF  081B               	movf	27,w	;volatile
 12829  15B0  0020               	movlb	0	; select bank0
 12830  15B1  00A1               	movwf	?_ADC_GetConversion
 12831  15B2  0008               	return
 12832  15B3                     __end_of_ADC_GetConversion:	
 12833                           
 12834                           	psect	intentry
 12835  0004                     __pintentry:	
 12836 ;; *************** function _INTERRUPT_InterruptManager *****************
 12837 ;; Defined at:
 12838 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12839 ;; Parameters:    Size  Location     Type
 12840 ;;		None
 12841 ;; Auto vars:     Size  Location     Type
 12842 ;;		None
 12843 ;; Return value:  Size  Location     Type
 12844 ;;                  1    wreg      void 
 12845 ;; Registers used:
 12846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12847 ;; Tracked objects:
 12848 ;;		On entry : 0/0
 12849 ;;		On exit  : 0/0
 12850 ;;		Unchanged: 0/0
 12851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12855 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;Total ram usage:        1 bytes
 12857 ;; Hardware stack levels used:    1
 12858 ;; Hardware stack levels required when called:    2
 12859 ;; This function calls:
 12860 ;;		_EUSART_Receive_ISR
 12861 ;;		_EUSART_Transmit_ISR
 12862 ;;		_TMR0_ISR
 12863 ;; This function is called by:
 12864 ;;		Interrupt level 1
 12865 ;; This function uses a non-reentrant model
 12866 ;;
 12867                           
 12868  0004                     _INTERRUPT_InterruptManager:	
 12869                           
 12870                           ;incstack = 0
 12871                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12872  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12873  0005  3180               	pagesel	$
 12874  0006  0020               	movlb	0	; select bank0
 12875  0007  087F               	movf	127,w
 12876  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 12877                           
 12878                           ;interrupt_manager.c: 54: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 12879  0009  1A8B               	btfsc	11,5	;volatile
 12880  000A  1D0B               	btfss	11,2	;volatile
 12881  000B  2810               	goto	i1l330
 12882                           
 12883                           ;interrupt_manager.c: 55: TMR0_ISR();
 12884  000C  3194  24CE  3180   	fcall	_TMR0_ISR
 12885                           
 12886                           ;interrupt_manager.c: 56: } else if (PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1) {
 12887  000F  2822               	goto	i1l336
 12888  0010                     i1l330:	
 12889  0010  0021               	movlb	1	; select bank1
 12890  0011  1E91               	btfss	17,5	;volatile
 12891  0012  281A               	goto	i1l332
 12892  0013  0020               	movlb	0	; select bank0
 12893  0014  1E91               	btfss	17,5	;volatile
 12894  0015  281A               	goto	i1l332
 12895                           
 12896                           ;interrupt_manager.c: 57: EUSART_Receive_ISR();
 12897  0016  318D  258E  3180   	fcall	_EUSART_Receive_ISR
 12898                           
 12899                           ;interrupt_manager.c: 58: } else if (PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1) {
 12900  0019  2822               	goto	i1l336
 12901  001A                     i1l332:	
 12902  001A  0021               	movlb	1	; select bank1
 12903  001B  1E11               	btfss	17,4	;volatile
 12904  001C  2822               	goto	i1l336
 12905  001D  0020               	movlb	0	; select bank0
 12906  001E  1E11               	btfss	17,4	;volatile
 12907  001F  2822               	goto	i1l336
 12908                           
 12909                           ;interrupt_manager.c: 59: EUSART_Transmit_ISR();
 12910  0020  3195  2577         	fcall	_EUSART_Transmit_ISR
 12911  0022                     i1l336:	
 12912                           ;interrupt_manager.c: 60: } else {
 12913                           
 12914  0022  0020               	movlb	0	; select bank0
 12915  0023  0820               	movf	??_INTERRUPT_InterruptManager,w
 12916  0024  00FF               	movwf	127
 12917  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12918  0026  0009               	retfie
 12919  0027                     __end_of_INTERRUPT_InterruptManager:	
 12920                           
 12921                           	psect	text71
 12922  14CE                     __ptext71:	
 12923 ;; *************** function _TMR0_ISR *****************
 12924 ;; Defined at:
 12925 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 12926 ;; Parameters:    Size  Location     Type
 12927 ;;		None
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;		None
 12930 ;; Return value:  Size  Location     Type
 12931 ;;                  1    wreg      void 
 12932 ;; Registers used:
 12933 ;;		wreg, status,2, status,0, pclath, cstack
 12934 ;; Tracked objects:
 12935 ;;		On entry : 0/0
 12936 ;;		On exit  : 0/0
 12937 ;;		Unchanged: 0/0
 12938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;Total ram usage:        1 bytes
 12944 ;; Hardware stack levels used:    1
 12945 ;; Hardware stack levels required when called:    1
 12946 ;; This function calls:
 12947 ;;		_TMR0_CallBack
 12948 ;; This function is called by:
 12949 ;;		_INTERRUPT_InterruptManager
 12950 ;; This function uses a non-reentrant model
 12951 ;;
 12952                           
 12953                           
 12954                           ;psect for function _TMR0_ISR
 12955  14CE                     _TMR0_ISR:	
 12956                           
 12957                           ;tmr0.c: 104: static volatile unsigned int CountCallBack = 0;
 12958                           ;tmr0.c: 107: INTCONbits.TMR0IF = 0;
 12959                           
 12960                           ;incstack = 0
 12961                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 12962  14CE  110B               	bcf	11,2	;volatile
 12963                           
 12964                           ;tmr0.c: 109: TMR0 = timer0ReloadVal;
 12965  14CF  0022               	movlb	2	; select bank2
 12966  14D0  086E               	movf	_timer0ReloadVal^(0+256),w	;volatile
 12967  14D1  0020               	movlb	0	; select bank0
 12968  14D2  0095               	movwf	21	;volatile
 12969                           
 12970                           ;tmr0.c: 111: MAX31856Sec++;
 12971  14D3  3001               	movlw	1
 12972  14D4  00F1               	movwf	??_TMR0_ISR
 12973  14D5  0871               	movf	??_TMR0_ISR,w
 12974  14D6  0022               	movlb	2	; select bank2
 12975  14D7  07BA               	addwf	_MAX31856Sec^(0+256),f
 12976                           
 12977                           ;tmr0.c: 114: if (++CountCallBack >= 100) {
 12978  14D8  3001               	movlw	1
 12979  14D9  07AC               	addwf	TMR0_ISR@CountCallBack^(0+256),f	;volatile
 12980  14DA  3000               	movlw	0
 12981  14DB  3DAD               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+256),f	;volatile
 12982  14DC  3000               	movlw	0
 12983  14DD  022D               	subwf	(TMR0_ISR@CountCallBack+1)^(0+256),w	;volatile
 12984  14DE  3064               	movlw	100
 12985  14DF  1903               	skipnz
 12986  14E0  022C               	subwf	TMR0_ISR@CountCallBack^(0+256),w	;volatile
 12987  14E1  1C03               	skipc
 12988  14E2  0008               	return
 12989                           
 12990                           ;tmr0.c: 116: TMR0_CallBack();
 12991  14E3  3193  23D1         	fcall	_TMR0_CallBack
 12992                           
 12993                           ;tmr0.c: 119: CountCallBack = 0;
 12994  14E5  0022               	movlb	2	; select bank2
 12995  14E6  01AC               	clrf	TMR0_ISR@CountCallBack^(0+256)	;volatile
 12996  14E7  01AD               	clrf	(TMR0_ISR@CountCallBack+1)^(0+256)	;volatile
 12997  14E8  0008               	return
 12998  14E9                     __end_of_TMR0_ISR:	
 12999                           
 13000                           	psect	text72
 13001  13D1                     __ptext72:	
 13002 ;; *************** function _TMR0_CallBack *****************
 13003 ;; Defined at:
 13004 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;		None
 13007 ;; Auto vars:     Size  Location     Type
 13008 ;;		None
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  1    wreg      void 
 13011 ;; Registers used:
 13012 ;;		wreg, status,2, status,0
 13013 ;; Tracked objects:
 13014 ;;		On entry : 0/0
 13015 ;;		On exit  : 0/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;Total ram usage:        1 bytes
 13023 ;; Hardware stack levels used:    1
 13024 ;; This function calls:
 13025 ;;		Nothing
 13026 ;; This function is called by:
 13027 ;;		_TMR0_ISR
 13028 ;; This function uses a non-reentrant model
 13029 ;;
 13030                           
 13031                           
 13032                           ;psect for function _TMR0_CallBack
 13033  13D1                     _TMR0_CallBack:	
 13034                           
 13035                           ;tmr0.c: 128: LongPressSec++;
 13036                           
 13037                           ;incstack = 0
 13038                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0]
 13039  13D1  3001               	movlw	1
 13040  13D2  00F0               	movwf	??_TMR0_CallBack
 13041  13D3  0870               	movf	??_TMR0_CallBack,w
 13042  13D4  0022               	movlb	2	; select bank2
 13043  13D5  07B9               	addwf	_LongPressSec^(0+256),f
 13044                           
 13045                           ;tmr0.c: 129: if(Usart_Run_Flag > 0)
 13046  13D6  083C               	movf	_Usart_Run_Flag^(0+256),w
 13047  13D7  1903               	btfsc	3,2
 13048  13D8  2BDB               	goto	i1l313
 13049                           
 13050                           ;tmr0.c: 130: {
 13051                           ;tmr0.c: 131: Usart_Run_Flag--;
 13052  13D9  3001               	movlw	1
 13053  13DA  02BC               	subwf	_Usart_Run_Flag^(0+256),f
 13054  13DB                     i1l313:	
 13055                           
 13056                           ;tmr0.c: 132: }
 13057                           ;tmr0.c: 134: if( Usart_Run_Flag == 0)
 13058  13DB  083C               	movf	_Usart_Run_Flag^(0+256),w
 13059  13DC  1D03               	btfss	3,2
 13060  13DD  0008               	return
 13061                           
 13062                           ;tmr0.c: 135: {
 13063                           ;tmr0.c: 136: SWDTEN = 1;
 13064  13DE  0021               	movlb	1	; select bank1
 13065  13DF  1417               	bsf	23,0	;volatile
 13066  13E0  0008               	return
 13067  13E1                     __end_of_TMR0_CallBack:	
 13068                           
 13069                           	psect	text73
 13070  1577                     __ptext73:	
 13071 ;; *************** function _EUSART_Transmit_ISR *****************
 13072 ;; Defined at:
 13073 ;;		line 155 in file "mcc_generated_files/eusart.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;		None
 13076 ;; Auto vars:     Size  Location     Type
 13077 ;;		None
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      void 
 13080 ;; Registers used:
 13081 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;Total ram usage:        1 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; This function calls:
 13094 ;;		Nothing
 13095 ;; This function is called by:
 13096 ;;		_INTERRUPT_InterruptManager
 13097 ;; This function uses a non-reentrant model
 13098 ;;
 13099                           
 13100                           
 13101                           ;psect for function _EUSART_Transmit_ISR
 13102  1577                     _EUSART_Transmit_ISR:	
 13103                           
 13104                           ;eusart.c: 158: if (sizeof (eusartTxBuffer) > eusartTxBufferRemaining) {
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13108  1577  3008               	movlw	8
 13109  1578  0022               	movlb	2	; select bank2
 13110  1579  026D               	subwf	_eusartTxBufferRemaining^(0+256),w	;volatile
 13111  157A  1803               	skipnc
 13112  157B  2D92               	goto	i1l169
 13113                           
 13114                           ;eusart.c: 159: TXREG = eusartTxBuffer[eusartTxTail++];
 13115  157C  0841               	movf	_eusartTxTail^(0+256),w
 13116  157D  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 13117  157E  0086               	movwf	6
 13118  157F  3001               	movlw	1	; select bank3/4
 13119  1580  0087               	movwf	7
 13120  1581  0801               	movf	1,w
 13121  1582  0023               	movlb	3	; select bank3
 13122  1583  009A               	movwf	26	;volatile
 13123  1584  3001               	movlw	1
 13124  1585  00F0               	movwf	??_EUSART_Transmit_ISR
 13125  1586  0870               	movf	??_EUSART_Transmit_ISR,w
 13126  1587  0022               	movlb	2	; select bank2
 13127  1588  07C1               	addwf	_eusartTxTail^(0+256),f
 13128                           
 13129                           ;eusart.c: 160: if (sizeof (eusartTxBuffer) <= eusartTxTail) {
 13130  1589  3008               	movlw	8
 13131  158A  0241               	subwf	_eusartTxTail^(0+256),w
 13132  158B  1803               	btfsc	3,0
 13133                           
 13134                           ;eusart.c: 161: eusartTxTail = 0;
 13135  158C  01C1               	clrf	_eusartTxTail^(0+256)
 13136                           
 13137                           ;eusart.c: 162: }
 13138                           ;eusart.c: 163: eusartTxBufferRemaining++;
 13139  158D  3001               	movlw	1
 13140  158E  00F0               	movwf	??_EUSART_Transmit_ISR
 13141  158F  0870               	movf	??_EUSART_Transmit_ISR,w
 13142  1590  07ED               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 13143                           
 13144                           ;eusart.c: 164: } else {
 13145  1591  0008               	return
 13146  1592                     i1l169:	
 13147                           
 13148                           ;eusart.c: 165: PIE1bits.TXIE = 0;
 13149  1592  0021               	movlb	1	; select bank1
 13150  1593  1211               	bcf	17,4	;volatile
 13151  1594  0008               	return
 13152  1595                     __end_of_EUSART_Transmit_ISR:	
 13153                           
 13154                           	psect	text74
 13155  0D8E                     __ptext74:	
 13156 ;; *************** function _EUSART_Receive_ISR *****************
 13157 ;; Defined at:
 13158 ;;		line 169 in file "mcc_generated_files/eusart.c"
 13159 ;; Parameters:    Size  Location     Type
 13160 ;;		None
 13161 ;; Auto vars:     Size  Location     Type
 13162 ;;  rx_tmp          1   13[COMMON] unsigned char 
 13163 ;; Return value:  Size  Location     Type
 13164 ;;                  1    wreg      void 
 13165 ;; Registers used:
 13166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13167 ;; Tracked objects:
 13168 ;;		On entry : 0/0
 13169 ;;		On exit  : 0/0
 13170 ;;		Unchanged: 0/0
 13171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;Total ram usage:        3 bytes
 13177 ;; Hardware stack levels used:    1
 13178 ;; Hardware stack levels required when called:    1
 13179 ;; This function calls:
 13180 ;;		_RxFrameCheck
 13181 ;; This function is called by:
 13182 ;;		_INTERRUPT_InterruptManager
 13183 ;; This function uses a non-reentrant model
 13184 ;;
 13185                           
 13186                           
 13187                           ;psect for function _EUSART_Receive_ISR
 13188  0D8E                     _EUSART_Receive_ISR:	
 13189                           
 13190                           ;eusart.c: 170: unsigned char rx_tmp;
 13191                           ;eusart.c: 171: if (1 == RCSTAbits.OERR) {
 13192                           
 13193                           ;incstack = 0
 13194                           ; Regs used in _EUSART_Receive_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13195  0D8E  0023               	movlb	3	; select bank3
 13196  0D8F  1C9D               	btfss	29,1	;volatile
 13197  0D90  2D93               	goto	i1l4642
 13198                           
 13199                           ;eusart.c: 174: RCSTAbits.CREN = 0;
 13200  0D91  121D               	bcf	29,4	;volatile
 13201                           
 13202                           ;eusart.c: 175: RCSTAbits.CREN = 1;
 13203  0D92  161D               	bsf	29,4	;volatile
 13204  0D93                     i1l4642:	
 13205                           
 13206                           ;eusart.c: 176: }
 13207                           ;eusart.c: 177: rx_tmp = RCREG;
 13208  0D93  0819               	movf	25,w	;volatile
 13209  0D94  00FB               	movwf	??_EUSART_Receive_ISR
 13210  0D95  087B               	movf	??_EUSART_Receive_ISR,w
 13211  0D96  00FD               	movwf	EUSART_Receive_ISR@rx_tmp
 13212                           
 13213                           ;eusart.c: 178: Usart_Rx_Buff[Usart_Rx_Cnt] = rx_tmp ;
 13214  0D97  087D               	movf	EUSART_Receive_ISR@rx_tmp,w
 13215  0D98  00FB               	movwf	??_EUSART_Receive_ISR
 13216  0D99  0020               	movlb	0	; select bank0
 13217  0D9A  0867               	movf	_Usart_Rx_Cnt,w
 13218  0D9B  3EB4               	addlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 13219  0D9C  0086               	movwf	6
 13220  0D9D  3001               	movlw	1	; select bank3/4
 13221  0D9E  0087               	movwf	7
 13222  0D9F  087B               	movf	??_EUSART_Receive_ISR,w
 13223  0DA0  0081               	movwf	1
 13224                           
 13225                           ;eusart.c: 179: Usart_Rx_Cnt++;
 13226  0DA1  3001               	movlw	1
 13227  0DA2  00FB               	movwf	??_EUSART_Receive_ISR
 13228  0DA3  087B               	movf	??_EUSART_Receive_ISR,w
 13229  0DA4  07E7               	addwf	_Usart_Rx_Cnt,f
 13230                           
 13231                           ;eusart.c: 180: Usart_Run_Flag = 10;
 13232  0DA5  300A               	movlw	10
 13233  0DA6  00FB               	movwf	??_EUSART_Receive_ISR
 13234  0DA7  087B               	movf	??_EUSART_Receive_ISR,w
 13235  0DA8  0022               	movlb	2	; select bank2
 13236  0DA9  00BC               	movwf	_Usart_Run_Flag^(0+256)
 13237                           
 13238                           ;eusart.c: 181: SWDTEN = 0;
 13239  0DAA  0021               	movlb	1	; select bank1
 13240  0DAB  1017               	bcf	23,0	;volatile
 13241                           
 13242                           ;eusart.c: 192: if( Usart_Rx_Cnt == 1)
 13243  0DAC  0020               	movlb	0	; select bank0
 13244  0DAD  0367               	decf	_Usart_Rx_Cnt,w
 13245  0DAE  1D03               	btfss	3,2
 13246  0DAF  2DB6               	goto	i1l4658
 13247                           
 13248                           ;eusart.c: 193: {
 13249                           ;eusart.c: 194: if( rx_tmp != 0xfe)
 13250  0DB0  30FE               	movlw	254
 13251  0DB1  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13252  0DB2  1903               	btfsc	3,2
 13253  0DB3  0008               	return
 13254                           
 13255                           ;eusart.c: 195: {
 13256                           ;eusart.c: 196: Usart_Rx_Cnt = 0;
 13257  0DB4  01E7               	clrf	_Usart_Rx_Cnt
 13258                           
 13259                           ;eusart.c: 197: }
 13260                           ;eusart.c: 198: }
 13261  0DB5  0008               	return
 13262  0DB6                     i1l4658:	
 13263                           
 13264                           ;eusart.c: 199: else if( Usart_Rx_Cnt == 2)
 13265  0DB6  3002               	movlw	2
 13266  0DB7  0667               	xorwf	_Usart_Rx_Cnt,w
 13267  0DB8  1D03               	btfss	3,2
 13268  0DB9  2DC0               	goto	i1l4664
 13269                           
 13270                           ;eusart.c: 200: {
 13271                           ;eusart.c: 201: if( rx_tmp != 0xfe)
 13272  0DBA  30FE               	movlw	254
 13273  0DBB  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13274  0DBC  1903               	btfsc	3,2
 13275  0DBD  0008               	return
 13276                           
 13277                           ;eusart.c: 202: {
 13278                           ;eusart.c: 203: Usart_Rx_Cnt = 0;
 13279  0DBE  01E7               	clrf	_Usart_Rx_Cnt
 13280                           
 13281                           ;eusart.c: 204: }
 13282                           ;eusart.c: 205: }
 13283  0DBF  0008               	return
 13284  0DC0                     i1l4664:	
 13285                           
 13286                           ;eusart.c: 206: else if( Usart_Rx_Cnt == 4)
 13287  0DC0  3004               	movlw	4
 13288  0DC1  0667               	xorwf	_Usart_Rx_Cnt,w
 13289  0DC2  1D03               	btfss	3,2
 13290  0DC3  2DCA               	goto	i1l4670
 13291                           
 13292                           ;eusart.c: 207: {
 13293                           ;eusart.c: 208: if( rx_tmp > 7)
 13294  0DC4  3008               	movlw	8
 13295  0DC5  027D               	subwf	EUSART_Receive_ISR@rx_tmp,w
 13296  0DC6  1C03               	skipc
 13297  0DC7  0008               	return
 13298                           
 13299                           ;eusart.c: 209: {
 13300                           ;eusart.c: 210: Usart_Rx_Cnt = 0;
 13301  0DC8  01E7               	clrf	_Usart_Rx_Cnt
 13302                           
 13303                           ;eusart.c: 211: }
 13304                           ;eusart.c: 212: }
 13305  0DC9  0008               	return
 13306  0DCA                     i1l4670:	
 13307                           
 13308                           ;eusart.c: 213: else if( Usart_Rx_Cnt > 14)
 13309  0DCA  300F               	movlw	15
 13310  0DCB  0267               	subwf	_Usart_Rx_Cnt,w
 13311  0DCC  1C03               	skipc
 13312  0DCD  2DD0               	goto	i1l4674
 13313                           
 13314                           ;eusart.c: 214: {
 13315                           ;eusart.c: 215: Usart_Rx_Cnt = 0;
 13316  0DCE  01E7               	clrf	_Usart_Rx_Cnt
 13317                           
 13318                           ;eusart.c: 216: }
 13319  0DCF  0008               	return
 13320  0DD0                     i1l4674:	
 13321                           
 13322                           ;eusart.c: 217: else if( (Usart_Rx_Cnt == (Usart_Rx_Buff[3]+7)) && ( rx_tmp == 0Xbb) )
 13323  0DD0  0023               	movlb	3	; select bank3
 13324  0DD1  0837               	movf	(_Usart_Rx_Buff^(0+384)+3),w
 13325  0DD2  3E07               	addlw	7
 13326  0DD3  00FB               	movwf	??_EUSART_Receive_ISR
 13327  0DD4  3000               	movlw	0
 13328  0DD5  1803               	skipnc
 13329  0DD6  3001               	movlw	1
 13330  0DD7  00FC               	movwf	??_EUSART_Receive_ISR+1
 13331  0DD8  0020               	movlb	0	; select bank0
 13332  0DD9  0867               	movf	_Usart_Rx_Cnt,w
 13333  0DDA  067B               	xorwf	??_EUSART_Receive_ISR,w
 13334  0DDB  047C               	iorwf	??_EUSART_Receive_ISR+1,w
 13335  0DDC  1D03               	skipz
 13336  0DDD  0008               	return
 13337  0DDE  30BB               	movlw	187
 13338  0DDF  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13339  0DE0  1D03               	btfss	3,2
 13340  0DE1  0008               	return
 13341                           
 13342                           ;eusart.c: 218: {
 13343                           ;eusart.c: 219: if(RxFrameCheck(Usart_Rx_Buff,Usart_Rx_Cnt))
 13344  0DE2  0867               	movf	_Usart_Rx_Cnt,w
 13345  0DE3  00FB               	movwf	??_EUSART_Receive_ISR
 13346  0DE4  087B               	movf	??_EUSART_Receive_ISR,w
 13347  0DE5  00F0               	movwf	RxFrameCheck@frame_len
 13348  0DE6  30B4               	movlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 13349  0DE7  3187  2753  318D   	fcall	_RxFrameCheck
 13350  0DEA  3A00               	xorlw	0
 13351  0DEB  1D03               	btfss	3,2
 13352  0DEC  2DF6               	goto	i1l4684
 13353  0DED  2DFF               	goto	i1l4686
 13354  0DEE                     i1l190:	
 13355                           ;eusart.c: 222: {
 13356                           ;eusart.c: 223: case 0x01: Inf_cmd_flag = 1;
 13357                           
 13358                           ;eusart.c: 220: {
 13359                           ;eusart.c: 221: switch( Usart_Rx_Buff[2] )
 13360                           
 13361  0DEE  0022               	movlb	2	; select bank2
 13362  0DEF  01B8               	clrf	_Inf_cmd_flag^(0+256)
 13363  0DF0  0AB8               	incf	_Inf_cmd_flag^(0+256),f
 13364                           
 13365                           ;eusart.c: 224: break;
 13366  0DF1  2DFF               	goto	i1l4686
 13367  0DF2                     i1l192:	
 13368                           ;eusart.c: 225: case 0X02: Set_time_cmd_flag = 1;
 13369                           
 13370  0DF2  0022               	movlb	2	; select bank2
 13371  0DF3  01BB               	clrf	_Set_time_cmd_flag^(0+256)
 13372  0DF4  0ABB               	incf	_Set_time_cmd_flag^(0+256),f
 13373                           
 13374                           ;eusart.c: 228: }
 13375                           
 13376                           ;eusart.c: 227: default:break;
 13377                           
 13378                           ;eusart.c: 226: break;
 13379  0DF5  2DFF               	goto	i1l4686
 13380  0DF6                     i1l4684:	
 13381  0DF6  0023               	movlb	3	; select bank3
 13382  0DF7  0836               	movf	(_Usart_Rx_Buff^(0+384)+2),w
 13383                           
 13384                           ; Switch size 1, requested type "space"
 13385                           ; Number of cases is 2, Range of values is 1 to 2
 13386                           ; switch strategies available:
 13387                           ; Name         Instructions Cycles
 13388                           ; simple_byte            7     4 (average)
 13389                           ; direct_byte           13     9 (fixed)
 13390                           ; jumptable            263     9 (fixed)
 13391                           ;	Chosen strategy is simple_byte
 13392  0DF8  3A01               	xorlw	1	; case 1
 13393  0DF9  1903               	skipnz
 13394  0DFA  2DEE               	goto	i1l190
 13395  0DFB  3A03               	xorlw	3	; case 2
 13396  0DFC  1903               	skipnz
 13397  0DFD  2DF2               	goto	i1l192
 13398  0DFE  2DFF               	goto	i1l4686
 13399  0DFF                     i1l4686:	
 13400                           
 13401                           ;eusart.c: 229: }
 13402                           ;eusart.c: 230: Usart_Rx_Cnt = 0;
 13403  0DFF  0020               	movlb	0	; select bank0
 13404  0E00  01E7               	clrf	_Usart_Rx_Cnt
 13405  0E01  0008               	return
 13406  0E02                     __end_of_EUSART_Receive_ISR:	
 13407                           
 13408                           	psect	text75
 13409  0753                     __ptext75:	
 13410 ;; *************** function _RxFrameCheck *****************
 13411 ;; Defined at:
 13412 ;;		line 126 in file "mcc_generated_files/com.c"
 13413 ;; Parameters:    Size  Location     Type
 13414 ;;  rx_arr          1    wreg     PTR unsigned char 
 13415 ;;		 -> Usart_Rx_Buff(32), 
 13416 ;;  frame_len       1    0[COMMON] unsigned char 
 13417 ;; Auto vars:     Size  Location     Type
 13418 ;;  rx_arr          1    8[COMMON] PTR unsigned char 
 13419 ;;		 -> Usart_Rx_Buff(32), 
 13420 ;;  remainder       2    9[COMMON] unsigned int 
 13421 ;;  tmp_crc         2    5[COMMON] unsigned int 
 13422 ;;  i               1    7[COMMON] unsigned char 
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  1    wreg      unsigned char 
 13425 ;; Registers used:
 13426 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13427 ;; Tracked objects:
 13428 ;;		On entry : 0/0
 13429 ;;		On exit  : 0/0
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13432 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;Total ram usage:       11 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; This function calls:
 13439 ;;		Nothing
 13440 ;; This function is called by:
 13441 ;;		_EUSART_Receive_ISR
 13442 ;; This function uses a non-reentrant model
 13443 ;;
 13444                           
 13445                           
 13446                           ;psect for function _RxFrameCheck
 13447  0753                     _RxFrameCheck:	
 13448                           
 13449                           ;incstack = 0
 13450                           ; Regs used in _RxFrameCheck: [wreg+fsr1l+fsr1h+status,2+status,0]
 13451                           ;RxFrameCheck@rx_arr stored from wreg
 13452  0753  00F8               	movwf	RxFrameCheck@rx_arr
 13453                           
 13454                           ;com.c: 128: unsigned char i = 0;
 13455  0754  01F7               	clrf	RxFrameCheck@i
 13456                           
 13457                           ;com.c: 129: unsigned int remainder = 0;
 13458  0755  01F9               	clrf	RxFrameCheck@remainder
 13459  0756  01FA               	clrf	RxFrameCheck@remainder+1
 13460                           
 13461                           ;com.c: 130: unsigned int tmp_crc = 0;
 13462  0757  01F5               	clrf	RxFrameCheck@tmp_crc
 13463  0758  01F6               	clrf	RxFrameCheck@tmp_crc+1
 13464                           
 13465                           ;com.c: 132: for(i = 2; i < frame_len - 3; i++)
 13466  0759  3002               	movlw	2
 13467  075A  00F1               	movwf	??_RxFrameCheck
 13468  075B  0871               	movf	??_RxFrameCheck,w
 13469  075C  00F7               	movwf	RxFrameCheck@i
 13470  075D                     i1l4470:	
 13471  075D  0870               	movf	RxFrameCheck@frame_len,w
 13472  075E  3EFD               	addlw	253
 13473  075F  00F1               	movwf	??_RxFrameCheck
 13474  0760  30FF               	movlw	255
 13475  0761  1803               	skipnc
 13476  0762  3000               	movlw	0
 13477  0763  00F2               	movwf	??_RxFrameCheck+1
 13478  0764  0872               	movf	??_RxFrameCheck+1,w
 13479  0765  3A80               	xorlw	128
 13480  0766  3C80               	sublw	128
 13481  0767  1D03               	skipz
 13482  0768  2F6B               	goto	u345_25
 13483  0769  0871               	movf	??_RxFrameCheck,w
 13484  076A  0277               	subwf	RxFrameCheck@i,w
 13485  076B                     u345_25:	
 13486  076B  1803               	btfsc	3,0
 13487  076C  2FC8               	goto	i1l4472
 13488                           
 13489                           ;com.c: 133: {
 13490                           ;com.c: 134: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 13491  076D  0879               	movf	RxFrameCheck@remainder,w
 13492  076E  00F2               	movwf	??_RxFrameCheck+1
 13493  076F  01F1               	clrf	??_RxFrameCheck
 13494  0770  087A               	movf	RxFrameCheck@remainder+1,w
 13495  0771  00F4               	movwf	??_RxFrameCheck+3
 13496  0772  0879               	movf	RxFrameCheck@remainder,w
 13497  0773  00F3               	movwf	??_RxFrameCheck+2
 13498  0774  0874               	movf	??_RxFrameCheck+3,w
 13499  0775  00F3               	movwf	??_RxFrameCheck+2
 13500  0776  01F4               	clrf	??_RxFrameCheck+3
 13501  0777  0871               	movf	??_RxFrameCheck,w
 13502  0778  0473               	iorwf	??_RxFrameCheck+2,w
 13503  0779  00F9               	movwf	RxFrameCheck@remainder
 13504  077A  0872               	movf	??_RxFrameCheck+1,w
 13505  077B  0474               	iorwf	??_RxFrameCheck+3,w
 13506  077C  00FA               	movwf	RxFrameCheck@remainder+1
 13507                           
 13508                           ;com.c: 135: remainder ^= rx_arr[i];
 13509  077D  0877               	movf	RxFrameCheck@i,w
 13510  077E  0778               	addwf	RxFrameCheck@rx_arr,w
 13511  077F  00F1               	movwf	??_RxFrameCheck
 13512  0780  0871               	movf	??_RxFrameCheck,w
 13513  0781  0086               	movwf	6
 13514  0782  3001               	movlw	1	; select bank2/3
 13515  0783  0087               	movwf	7
 13516  0784  0801               	movf	1,w
 13517  0785  00F2               	movwf	??_RxFrameCheck+1
 13518  0786  01F3               	clrf	??_RxFrameCheck+2
 13519  0787  0872               	movf	??_RxFrameCheck+1,w
 13520  0788  06F9               	xorwf	RxFrameCheck@remainder,f
 13521  0789  0873               	movf	??_RxFrameCheck+2,w
 13522  078A  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13523                           
 13524                           ;com.c: 136: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 13525  078B  087A               	movf	RxFrameCheck@remainder+1,w
 13526  078C  00F2               	movwf	??_RxFrameCheck+1
 13527  078D  0879               	movf	RxFrameCheck@remainder,w
 13528  078E  00F1               	movwf	??_RxFrameCheck
 13529  078F  3004               	movlw	4
 13530  0790                     u344_25:	
 13531  0790  36F2               	lsrf	??_RxFrameCheck+1,f
 13532  0791  0CF1               	rrf	??_RxFrameCheck,f
 13533  0792  0B89               	decfsz	9,f
 13534  0793  2F90               	goto	u344_25
 13535  0794  300F               	movlw	15
 13536  0795  0571               	andwf	??_RxFrameCheck,w
 13537  0796  00F3               	movwf	??_RxFrameCheck+2
 13538  0797  3000               	movlw	0
 13539  0798  0572               	andwf	??_RxFrameCheck+1,w
 13540  0799  00F4               	movwf	??_RxFrameCheck+3
 13541  079A  0873               	movf	??_RxFrameCheck+2,w
 13542  079B  06F9               	xorwf	RxFrameCheck@remainder,f
 13543  079C  0874               	movf	??_RxFrameCheck+3,w
 13544  079D  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13545                           
 13546                           ;com.c: 137: remainder ^= (unsigned int)((remainder << 8) << 4);
 13547  079E  0879               	movf	RxFrameCheck@remainder,w
 13548  079F  00F2               	movwf	??_RxFrameCheck+1
 13549  07A0  01F1               	clrf	??_RxFrameCheck
 13550  07A1  0EF1               	swapf	??_RxFrameCheck,f
 13551  07A2  0EF2               	swapf	??_RxFrameCheck+1,f
 13552  07A3  30F0               	movlw	240
 13553  07A4  05F2               	andwf	??_RxFrameCheck+1,f
 13554  07A5  0871               	movf	??_RxFrameCheck,w
 13555  07A6  390F               	andlw	15
 13556  07A7  04F2               	iorwf	??_RxFrameCheck+1,f
 13557  07A8  30F0               	movlw	240
 13558  07A9  05F1               	andwf	??_RxFrameCheck,f
 13559  07AA  0871               	movf	??_RxFrameCheck,w
 13560  07AB  06F9               	xorwf	RxFrameCheck@remainder,f
 13561  07AC  0872               	movf	??_RxFrameCheck+1,w
 13562  07AD  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13563                           
 13564                           ;com.c: 138: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 13565  07AE  30FF               	movlw	255
 13566  07AF  0579               	andwf	RxFrameCheck@remainder,w
 13567  07B0  00F1               	movwf	??_RxFrameCheck
 13568  07B1  3000               	movlw	0
 13569  07B2  057A               	andwf	RxFrameCheck@remainder+1,w
 13570  07B3  00F2               	movwf	??_RxFrameCheck+1
 13571  07B4  0EF1               	swapf	??_RxFrameCheck,f
 13572  07B5  0EF2               	swapf	??_RxFrameCheck+1,f
 13573  07B6  30F0               	movlw	240
 13574  07B7  05F2               	andwf	??_RxFrameCheck+1,f
 13575  07B8  0871               	movf	??_RxFrameCheck,w
 13576  07B9  390F               	andlw	15
 13577  07BA  04F2               	iorwf	??_RxFrameCheck+1,f
 13578  07BB  30F0               	movlw	240
 13579  07BC  05F1               	andwf	??_RxFrameCheck,f
 13580  07BD  35F1               	lslf	??_RxFrameCheck,f
 13581  07BE  0DF2               	rlf	??_RxFrameCheck+1,f
 13582  07BF  0871               	movf	??_RxFrameCheck,w
 13583  07C0  06F9               	xorwf	RxFrameCheck@remainder,f
 13584  07C1  0872               	movf	??_RxFrameCheck+1,w
 13585  07C2  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13586  07C3  3001               	movlw	1
 13587  07C4  00F1               	movwf	??_RxFrameCheck
 13588  07C5  0871               	movf	??_RxFrameCheck,w
 13589  07C6  07F7               	addwf	RxFrameCheck@i,f
 13590  07C7  2F5D               	goto	i1l4470
 13591  07C8                     i1l4472:	
 13592                           
 13593                           ;com.c: 139: }
 13594                           ;com.c: 141: tmp_crc = rx_arr[frame_len - 2];
 13595  07C8  0870               	movf	RxFrameCheck@frame_len,w
 13596  07C9  3EFE               	addlw	-2
 13597  07CA  0778               	addwf	RxFrameCheck@rx_arr,w
 13598  07CB  00F1               	movwf	??_RxFrameCheck
 13599  07CC  0871               	movf	??_RxFrameCheck,w
 13600  07CD  0086               	movwf	6
 13601  07CE  3001               	movlw	1	; select bank2/3
 13602  07CF  0087               	movwf	7
 13603  07D0  0801               	movf	1,w
 13604  07D1  00F2               	movwf	??_RxFrameCheck+1
 13605  07D2  01F3               	clrf	??_RxFrameCheck+2
 13606  07D3  0872               	movf	??_RxFrameCheck+1,w
 13607  07D4  00F5               	movwf	RxFrameCheck@tmp_crc
 13608  07D5  0873               	movf	??_RxFrameCheck+2,w
 13609  07D6  00F6               	movwf	RxFrameCheck@tmp_crc+1
 13610                           
 13611                           ;com.c: 142: tmp_crc<<=8;
 13612  07D7  3008               	movlw	8
 13613  07D8                     u346_25:	
 13614  07D8  35F5               	lslf	RxFrameCheck@tmp_crc,f
 13615  07D9  0DF6               	rlf	RxFrameCheck@tmp_crc+1,f
 13616  07DA  0B89               	decfsz	9,f
 13617  07DB  2FD8               	goto	u346_25
 13618                           
 13619                           ;com.c: 143: tmp_crc|=rx_arr[frame_len - 3];
 13620  07DC  0870               	movf	RxFrameCheck@frame_len,w
 13621  07DD  3EFD               	addlw	-3
 13622  07DE  0778               	addwf	RxFrameCheck@rx_arr,w
 13623  07DF  00F1               	movwf	??_RxFrameCheck
 13624  07E0  0871               	movf	??_RxFrameCheck,w
 13625  07E1  0086               	movwf	6
 13626  07E2  3001               	movlw	1	; select bank2/3
 13627  07E3  0087               	movwf	7
 13628  07E4  0801               	movf	1,w
 13629  07E5  00F2               	movwf	??_RxFrameCheck+1
 13630  07E6  01F3               	clrf	??_RxFrameCheck+2
 13631  07E7  0872               	movf	??_RxFrameCheck+1,w
 13632  07E8  04F5               	iorwf	RxFrameCheck@tmp_crc,f
 13633  07E9  0873               	movf	??_RxFrameCheck+2,w
 13634  07EA  04F6               	iorwf	RxFrameCheck@tmp_crc+1,f
 13635                           
 13636                           ;com.c: 149: if(remainder == tmp_crc)
 13637  07EB  0876               	movf	RxFrameCheck@tmp_crc+1,w
 13638  07EC  067A               	xorwf	RxFrameCheck@remainder+1,w
 13639  07ED  1D03               	skipz
 13640  07EE  2FF1               	goto	u347_25
 13641  07EF  0875               	movf	RxFrameCheck@tmp_crc,w
 13642  07F0  0679               	xorwf	RxFrameCheck@remainder,w
 13643  07F1                     u347_25:	
 13644  07F1  1D03               	skipz
 13645  07F2  2FF5               	goto	i1l4484
 13646                           
 13647                           ;com.c: 150: {
 13648                           ;com.c: 151: return 1;
 13649  07F3  3001               	movlw	1
 13650                           
 13651                           ;com.c: 152: }
 13652  07F4  0008               	return
 13653  07F5                     i1l4484:	
 13654                           
 13655                           ;com.c: 153: else
 13656                           ;com.c: 154: {
 13657                           ;com.c: 155: return 0;
 13658  07F5  3000               	movlw	0
 13659  07F6  0008               	return
 13660  07F7                     __end_of_RxFrameCheck:	
 13661  007E                     btemp	set	126	;btemp
 13662  007E                     int$flags	set	126
 13663  007E                     wtemp	set	126
 13664  007E                     wtemp0	set	126
 13665  0080                     wtemp1	set	128
 13666  0082                     wtemp2	set	130
 13667  0084                     wtemp3	set	132
 13668  0086                     wtemp4	set	134
 13669  0088                     wtemp5	set	136
 13670  007F                     wtemp6	set	127
 13671  007E                     ttemp	set	126
 13672  007E                     ttemp0	set	126
 13673  0081                     ttemp1	set	129
 13674  0084                     ttemp2	set	132
 13675  0087                     ttemp3	set	135
 13676  007F                     ttemp4	set	127
 13677  007E                     ltemp	set	126
 13678  007E                     ltemp0	set	126
 13679  0082                     ltemp1	set	130
 13680  0086                     ltemp2	set	134
 13681  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    21
    Data        10
    BSS         202
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     68      75
    BANK1            80     78      80
    BANK2            80      0      79
    BANK3            80      5      67
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 7
		 -> rtc_save_ch2(BANK2[7]), rtc_save_ch1(BANK2[7]), 

    memset@p1	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    memset@p	PTR unsigned char  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    CRC_cal@rx_arr	PTR unsigned char  size(1) Largest target is 72
		 -> Inf_to_Com@tmp_buf(BANK1[72]), Read_time_to_Com@tmp_buf(BANK0[16]), 

    RxFrameCheck@rx_arr	PTR unsigned char  size(1) Largest target is 32
		 -> Usart_Rx_Buff(BANK3[32]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    Bq32k_Rtc_Write_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    Bq32k_Rtc_Read_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    I2C_Send_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Write_Time@temp(BANK0[10]), Bq32k_Time_Init@temp(BANK0[10]), 

    I2C_Read_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Read_Time@temp(BANK0[10]), 

    sp__memset	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    WriteAll_1621@p	PTR unsigned char  size(2) Largest target is 21
		 -> time_Display@num(BANK0[4]), err_Display@num(BANK0[4]), Two_Display@num(BANK0[4]), display_buff(BANK2[4]), 
		 -> Dis_TAB(CODE[21]), 

    maxim_31856_read_nregisters@uch_buff	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK2[8]), 

    FLASH_readBlock@buffer	PTR unsigned int  size(1) Largest target is 64
		 -> Flash_buff(BANK4[64]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK2[8]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack
    _EUSART_Receive_ISR->_RxFrameCheck

Critical Paths under _main in BANK0

    _main->_Key_Process
    _Sleep_process->_Step_control
    _Save_process->_Calculate_Time
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize
    _temperature_process->_temperature_display
    _time_Display->_Bq32k_Rtc_Read_Time
    _temperature_display->_tc_temperature_trans
    _tc_temperature_trans->_Calculate_Time
    _Calculate_Time->_Save_Write_time
    _Write_Flash_head->_FLASH_WriteWord
    _Write_Flash_finish->_FLASH_WriteWord
    _Save_Write_time->_Bq32k_Rtc_Read_Time
    _Save_Write_word->_FLASH_WriteWord
    _maxim_clear_fault_status->_maxim_31856_read_register
    _err_Display->_WriteAll_1621
    _Tc_Display->___lwdiv
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_31856_read_nregisters
    _maxim_start_conversion->_maxim_31856_read_register
    _maxim_31856_write_register->_SPI_Exchange8bit
    _maxim_31856_read_register->_SPI_Exchange8bit
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _Two_Display->_WriteAll_1621
    _WriteAll_1621->_SendBit_1621
    _WriteAll_1621->_SendDataBit_1621
    _SendCmd_1621->_SendBit_1621
    _Com_Process->_Set_time_from_Com
    _Set_time_from_Com->_Bq32k_Rtc_Write_Time
    _Set_time_from_Com->_Read_time_to_Com
    _Read_time_to_Com->_CRC_cal
    _Bq32k_Rtc_Write_Time->_bin2bcd
    _bin2bcd->___awdiv
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _bcd2bin->___bmul
    _I2C_Read_Buffer->_I2C_Receive_Byte
    _I2C_Read_Buffer->_I2C_Send_Byte
    _Inf_to_Com->_CRC_cal
    _FLASH_readBlock->_FLASH_ReadWord
    _Bq32k_Time_Init->_I2C_Send_Buffer
    _I2C_Send_Buffer->_I2C_Send_Byte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _Com_Process->_Inf_to_Com

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  101313
                                             65 BANK0      3     3      0
                                              0 BANK3      5     5      0
                  _ADC_GetConversion
                    _Bq32k_Time_Init
                        _Com_Process
                        _Key_Process
                  _SYSTEM_Initialize
                       _Save_process
                       _SendCmd_1621
                  _Serach_Flash_Head
                      _Sleep_process
                      _WriteAll_1621
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _Sleep_process                                        0     0      0       0
                       _Step_control
 ---------------------------------------------------------------------------------
 (2) _Step_control                                         1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serach_Flash_Head                                    6     6      0    1943
                                              6 BANK0      6     6      0
                     _FLASH_ReadWord
                 _Write_Flash_finish
 ---------------------------------------------------------------------------------
 (1) _Save_process                                         4     4      0   13320
                                             46 BANK0      4     4      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Key_Process                                          6     6      0   40644
                                             59 BANK0      6     6      0
                       _EUSART_Write
                     _FLASH_ReadWord
                           _Key_Scan
                    _Save_Write_time
                       _SendCmd_1621
                    _Set_finish_flag
                     _Set_start_flag
                 _Write_Flash_finish
                   _Write_Flash_head
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _temperature_process                                  0     0      0   32281
                        _Two_Display
              _one_temperature_trans
                _temperature_display
                       _time_Display
 ---------------------------------------------------------------------------------
 (2) _time_Display                                         7     7      0    5180
                                             22 BANK0      7     7      0
                _Bq32k_Rtc_Read_Time
                      _WriteAll_1621
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _temperature_display                                  1     1      0   22536
                                             58 BANK0      1     1      0
                         _Tc_Display
                        _err_Display
         _maxim_31856_write_register
           _maxim_clear_fault_status
               _tc_temperature_trans
 ---------------------------------------------------------------------------------
 (3) _tc_temperature_trans                                12    12      0   14099
                                             46 BANK0     12    12      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Calculate_Time                                      22    22      0   10143
                                             24 BANK0     22    22      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_time
                 _Write_Flash_finish
                   _Write_Flash_head
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1368
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_head                                     0     0      0    1236
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_finish                                   0     0      0    1236
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Save_Write_time                                      3     3      0    4589
                                             22 BANK0      2     2      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Save_Write_word                                      4     2      2    3088
                                              6 BANK0      4     2      2
                   _FLASH_EraseBlock
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     327
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _maxim_clear_fault_status                             1     1      0    1652
                                              5 BANK0      1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (3) _err_Display                                          5     5      0    1834
                                             11 BANK0      5     5      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _Tc_Display                                           4     4      0    3395
                                             15 BANK0      4     4      0
                      _WriteAll_1621
                            ___lwdiv
                            ___lwmod
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     324
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     540
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     703
                                              7 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _one_temperature_trans                                2     2      0    2700
                                             14 BANK0      2     2      0
        _maxim_31856_read_nregisters
             _maxim_start_conversion
 ---------------------------------------------------------------------------------
 (3) _maxim_start_conversion                               2     2      0    1683
                                              5 BANK0      2     2      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_write_register                           2     1      1    1556
                                              2 BANK0      2     1      1
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_read_register                            3     3      0      96
                                              2 BANK0      3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _maxim_31856_read_nregisters                          5     3      2    1017
                                              9 BANK0      5     3      2
                   _SPI_Exchange8bit
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     739
                                              2 BANK0      7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Two_Display                                          6     6      0    1865
                                             11 BANK0      6     6      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _WriteAll_1621                                        6     3      3    1723
                                              5 BANK0      6     3      3
                       _SendBit_1621
                   _SendDataBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendDataBit_1621                                     4     3      1     256
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Set_start_flag                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_finish_flag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendCmd_1621                                         2     2      0     595
                                              5 BANK0      2     2      0
                       _SendBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendBit_1621                                         4     3      1     564
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Key_Scan                                             3     3      0      40
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Com_Process                                          0     0      0    8096
                         _Inf_to_Com
                  _Set_time_from_Com
 ---------------------------------------------------------------------------------
 (2) _Set_time_from_Com                                    1     1      0    5857
                                             31 BANK0      1     1      0
                _Bq32k_Rtc_Read_Time
               _Bq32k_Rtc_Write_Time
                   _Read_time_to_Com
 ---------------------------------------------------------------------------------
 (3) _Read_time_to_Com                                    20    20      0    1307
                                             11 BANK0     20    20      0
                            _CRC_cal
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Write_Time                                13    13      0    3049
                                             18 BANK0     13    13      0
                    _I2C_Send_Buffer
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (4) _bin2bcd                                              8     8      0    1864
                                             10 BANK0      8     8      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     895
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     907
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Read_Time                                 13    13      0    1501
                                              9 BANK0     13    13      0
                    _I2C_Read_Buffer
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (4) _bcd2bin                                              4     4      0     275
                                              5 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     213
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Buffer                                      5     3      2     599
                                              4 BANK0      5     3      2
                   _I2C_Receive_Byte
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Receive_Byte                                     3     3      0     108
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Inf_to_Com                                          83    83      0    2239
                                             11 BANK0      5     5      0
                                              0 BANK1     78    78      0
                            _CRC_cal
                       _EUSART_Write
                    _FLASH_readBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_readBlock                                      5     2      3     693
                                              4 BANK0      5     2      3
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _CRC_cal                                             10     8      2     557
                                              1 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _Bq32k_Time_Init                                     19    19      0    2353
                                             11 BANK0     12    12      0
                     _FLASH_ReadWord
                    _FLASH_WriteWord
                    _I2C_Send_Buffer
 ---------------------------------------------------------------------------------
 (4) _I2C_Send_Buffer                                      7     5      2     676
                                              4 BANK0      7     5      2
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_Byte                                        3     3      0     102
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteWord                                      5     1      4    1236
                                              1 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     404
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      31
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0     548
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            1     1      0       0
                                              1 COMMON     1     1      0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  3     3      0     548
                                             11 COMMON     3     3      0
                       _RxFrameCheck
 ---------------------------------------------------------------------------------
 (12) _RxFrameCheck                                       11    10      1     437
                                              0 COMMON    11    10      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _Bq32k_Time_Init
     _FLASH_ReadWord
     _FLASH_WriteWord
     _I2C_Send_Buffer
       _I2C_Send_Byte
       _I2C_Start
       _I2C_Stop
   _Com_Process
     _Inf_to_Com
       _CRC_cal
       _EUSART_Write
       _FLASH_readBlock
         _FLASH_ReadWord
     _Set_time_from_Com
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Bq32k_Rtc_Write_Time
         _I2C_Send_Buffer
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bin2bcd
           ___awdiv
           ___awmod
       _Read_time_to_Com
         _CRC_cal
         _EUSART_Write
   _Key_Process
     _EUSART_Write
     _FLASH_ReadWord
     _Key_Scan
     _Save_Write_time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_word
         _FLASH_EraseBlock
         _FLASH_WriteWord
     _SendCmd_1621
       _SendBit_1621
     _Set_finish_flag
     _Set_start_flag
     _Write_Flash_finish
       _FLASH_WriteWord
     _Write_Flash_head
       _FLASH_WriteWord
     _temperature_process
       _Two_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _one_temperature_trans
         _maxim_31856_read_nregisters
           _SPI_Exchange8bit
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
         _maxim_start_conversion
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
       _temperature_display
         _Tc_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
           _memset
         _err_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
         _maxim_31856_write_register
           _SPI_Exchange8bit
         _maxim_clear_fault_status
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
         _tc_temperature_trans
           _Calculate_Time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_time
               _Bq32k_Rtc_Read_Time
                 _I2C_Read_Buffer
                   _I2C_Receive_Byte
                   _I2C_Send_Byte
                   _I2C_Start
                   _I2C_Stop
                 _bcd2bin
                   ___bmul
               _Save_Write_word
                 _FLASH_EraseBlock
                 _FLASH_WriteWord
             _Write_Flash_finish
               _FLASH_WriteWord
             _Write_Flash_head
               _FLASH_WriteWord
             ___wmul
           _Save_Write_word
             _FLASH_EraseBlock
             _FLASH_WriteWord
       _time_Display
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___awdiv
         ___awmod
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR0_Initialize
   _Save_process
     _Calculate_Time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_time
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_WriteWord
       _Write_Flash_finish
         _FLASH_WriteWord
       _Write_Flash_head
         _FLASH_WriteWord
       ___wmul
     _Save_Write_word
       _FLASH_EraseBlock
       _FLASH_WriteWord
   _SendCmd_1621
     _SendBit_1621
   _Serach_Flash_Head
     _FLASH_ReadWord
     _Write_Flash_finish
       _FLASH_WriteWord
   _Sleep_process
     _Step_control
   _WriteAll_1621
     _SendBit_1621
     _SendDataBit_1621
   _temperature_process
     _Two_Display
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
     _one_temperature_trans
       _maxim_31856_read_nregisters
         _SPI_Exchange8bit
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _maxim_start_conversion
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
     _temperature_display
       _Tc_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         _memset
       _err_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _maxim_31856_write_register
         _SPI_Exchange8bit
       _maxim_clear_fault_status
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
       _tc_temperature_trans
         _Calculate_Time
           _Bq32k_Rtc_Read_Time
             _I2C_Read_Buffer
               _I2C_Receive_Byte
               _I2C_Send_Byte
               _I2C_Start
               _I2C_Stop
             _bcd2bin
               ___bmul
           _Save_Write_time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_word
               _FLASH_EraseBlock
               _FLASH_WriteWord
           _Write_Flash_finish
             _FLASH_WriteWord
           _Write_Flash_head
             _FLASH_WriteWord
           ___wmul
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_WriteWord
     _time_Display
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
       ___awdiv
       ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
     _RxFrameCheck
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4E      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      5      43      11       83.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Jul 21 11:01:19 2016

                        __end_of_I2C_Send_Buffer 0947                                   _SPI_Initialize 13AF  
                     ?_maxim_31856_read_register 0070                                     _Usart_Rx_Cnt 0067  
  maxim_31856_read_register@uch_register_address 0023                                   ___bmul@product 0023  
                             __size_of_I2C_Start 001D                       FLASH_WriteWord@GIEBitValue 0025  
                                    __CFG_CP$OFF 0000                                ?_Write_Flash_head 0070  
                                  _Usart_Rx_Buff 01B4                                               l71 13CD  
                                   ___awdiv@sign 0027                          ?_SPI_Exchange8bitBuffer 0022  
                         __end_of_FVR_Initialize 139F                              ___wmul@multiplicand 0023  
                               ?_Save_Write_time 0070                                 ?_Save_Write_word 0026  
                                _timer0ReloadVal 016E                               ??_Write_Flash_head 0026  
                           Bq32k_Rtc_Read_Time@p 0035                                              l163 13E9  
                                            l261 15A9                                              l612 011D  
                                            l630 0236                                              l614 01F4  
                                            l640 0A0E                                              l632 0261  
                                            l624 01D2                                              l465 0439  
                                            l474 046F                                              l635 0269  
                                            l627 022E                                              l467 043B  
                                            l484 04E7                                              l727 163E  
                                            l743 165F                                              l639 0A0F  
                                            l833 0BA0                                              l729 1640  
                                            l745 1661                                              l827 0B9B  
                                            l772 089D                                              l684 090B  
                                            l782 0626                                              l839 0BC1  
                                            l783 0650                                              l849 0BD8  
                                            l962 16F9                                              l868 17EC  
                                            l982 06C1                                              l967 16EF  
                                            l968 16F3                                              l993 0705  
                                            l994 0708                                              l986 06D6  
                                            _RB1 0069                                              _RB3 006B  
                                            _RB5 006D                                              _RA7 0067  
                                   ?_err_Display 0070                                     ___awmod@sign 0027  
                                 _Usart_Run_Flag 013C                               _Write_Flash_finish 1674  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000                                 ?_FLASH_WriteWord 0021  
                         _maxim_start_conversion 14B4                              __end_of_Com_Process 1422  
                                __end_of_CRC_cal 0F6A                                     __CFG_LVP$OFF 0000  
                                           l1000 070D                                             l1012 0752  
                                           l1008 0743                                             l1201 15C7  
                                           l1122 0D0D                                             l1118 0CD9  
                                           l1280 150E                                             l6000 0A17  
                                           l6004 0A1F                                             l5222 1436  
                                           l6030 099C                                             l5208 17FE  
                                           l5330 0ECE                                             l5226 143C  
                                           l6034 09A4                                             l6026 0994  
                                           l6210 08F9                                             l6300 05B3  
                                           l5404 1656                                             l6204 08F3  
                                           l5158 0BA2                                             l6038 09AC  
                                           l6206 08F6                                             l5328 0EA3  
                                           l5360 0ABE                                             l5440 1508  
                                           l6240 1708                                             l5610 0B3C  
                                           l5602 0B2B                                             l6218 16E1  
                                           l6410 0734                                             l6242 1709  
                                           l5460 0B4B                                             l5364 0AD4  
                                           l6420 0748                                             l5606 0B34  
                                           l5622 09CC                                             l5470 0B79  
                                           l5358 0AB4                                             l5534 0349  
                                           l6190 08E3                                             l6414 073B  
                                           l5640 09F1                                             l5392 1635  
                                           l5464 0B59                                             l6192 08E6  
                                           l5634 09D9                                             l5626 09D3  
                                           l5490 0883                                             l5466 0B6F  
                                           l5538 0352                                             l6178 08D6  
                                           l6442 0CEF                                             l6354 0A96  
                                           l6346 0A89                                             l6338 0A7A  
                                           l6284 054A                                             l5636 09E5  
                                           l5644 09FA                                             l5468 0B74  
                                           l5900 05EE                                             l5548 0361  
                                           l6380 06E4                                             l6372 06CA  
                                           l6356 0A98                                             l6286 057B  
                                           l5478 0B7C                                             l5670 08C7  
                                           l5662 08A9                                             l5910 0685  
                                           l5902 0609                                             l5558 0412  
                                           l5806 0139                                             l6390 0716  
                                           l6630 04E9                                             l5584 0B05  
                                           l5648 0A02                                             l5664 08B5  
                                           l5568 14EF                                             l5904 066B  
                                           l5840 01A8                                             l5832 017E  
                                           l5808 0142                                             l6368 06C2  
                                           l6632 04EC                                             l5594 0B0D  
                                           l5578 0AFA                                             l6466 141A  
                                           l5674 08D0                                             l5914 068F  
                                           l6386 070E                                             l6618 04BB  
                                           l6562 045D                                             l5596 0B19  
                                           l5692 1794                                             l5908 0676  
                                           l5836 018E                                             l5780 00C9  
                                           l6556 0444                                             l5950 092A  
                                           l5686 177C                                             l6478 15CF  
                                           l6566 0471                                             l5952 0944  
                                           l5688 1788                                             l5696 179D  
                                           l5784 00D9                                             l5858 01EC  
                                           l5876 023F                                             l5788 00F3  
                                           l5976 0EF9                                             l5992 15F4  
                                           l5978 0F64                              ?_Write_Flash_finish 0070  
                                           _LATA 010C                                             _LATB 010D  
                                           _LATC 010E                                             u5100 00A4  
                                           u5110 00A5                                             u5015 177F  
                                           u5210 0159                                             u5035 178E  
                                           u5220 015A                                             u5045 1795  
                                           u4445 1451                                             u5165 00E2  
                                           u6207 1644                                             u6217 16E5  
                                           u6307 155F                                             u6227 0EB6  
                                           u5275 0197                                             u6317 1566  
                                           u6237 0EBD                                             u4805 0B24  
                                           u6407 0BB6                                             u6327 156D  
                                           u6247 0EC4                                             u4815 0B2C  
                                           u5455 17C9                                             u4575 150F  
                                           u5720 0842                                             u6417 0BC6  
                                           u6337 1574                                             u5465 0F2C  
                                           u5705 05C7                                             u6257 0EDD  
                                           u4905 09F2                                             u4585 1514  
                                           u6427 0BCD                                             u6347 1542  
                                           u5475 0F07                                             u6267 0EE4  
                                           u6187 042C                                             u6437 0BDF  
                                           u6357 1549                                             u6277 0EEB  
                                           u6197 1665                                             u6447 0BE6  
                                           u6367 1550                                             u6287 17E1  
                                           u4775 0B10                                             u6377 1557  
                                           u6297 17F3                                             u4945 08AC  
                                           u6387 0BA5                                             u4795 0B1A  
                                           u4875 09DC                                             u6397 0BAC  
                                           u4965 08B6                                             u4895 09EB  
                                           u4975 08C0                                             u4985 08C8  
                                           _TMR0 0015                                             _WPUB 020D  
                                           _WPUE 0210                              RxFrameCheck@tmp_crc 0075  
                                   __CFG_WRT$OFF 0000                                    __CFG_FCMEN$ON 0000  
                        __size_of_Set_start_flag 0006                           __size_of_WriteAll_1621 0035  
                                  ??_Key_Process 005B                                             _main 0414  
                                           fsr0h 0005                                             fsr1h 0007  
                                           fsr0l 0004                                             indf0 0000  
                                           indf1 0001                                             fsr1l 0006  
                                           btemp 007E                                 __end_of_I2C_Stop 1577  
                                  __CFG_BOREN$ON 0000                                      Inf_to_Com@i 00EC  
                                           ltemp 007E                              SendCmd_1621@command 0026  
                                           start 0027                                             ttemp 007E  
                                           wtemp 007E                                  __end_of_Dis_TAB 1815  
                              ?_Read_time_to_Com 0070                           __end_of_SPI_Initialize 13B5  
                               ?_I2C_Read_Buffer 0024                                ___bmul@multiplier 0024  
                                  __CFG_MCLRE$ON 0000                                     main@bat_data 01E1  
                             ??_Read_time_to_Com 002B                   __end_of_SPI_Exchange8bitBuffer 0B94  
                                time_Display@num 0039                             ??_Write_Flash_finish 0026  
                        __end_of_TMR0_Initialize 1411                                  ?_FVR_Initialize 0070  
                                  ?_EUSART_Write 0070                   __size_of_OSCILLATOR_Initialize 0005  
                  __end_of_OSCILLATOR_Initialize 13A9                                  __end_of_bcd2bin 145A  
                                          ?_main 0070                                  __end_of___awdiv 0B41  
                                __end_of___awmod 0A07                                  ___awdiv@divisor 0021  
                                          _LATA0 0860                                            _LATA1 0861  
                                          _LATB0 0868                                            _LATA2 0862  
                                __end_of_bin2bcd 17D0                                            _LATB1 0869  
                                          _LATA3 0863                                            _LATC0 0870  
                                          _LATA4 0864                                            _LATC1 0871  
                                          _LATA5 0865                                            _LATC2 0872  
                                          _LATA6 0866                                  __end_of___lwdiv 08D5  
                                          i1l313 13DB                                            i1l330 0010  
                                          i1l332 001A                                            i1l190 0DEE  
                                          i1l192 0DF2                                            i1l336 0022  
                                          i1l169 1592                                  __end_of___lwmod 17A2  
                                ___awdiv@counter 0026                                            _RCREG 0199  
                                          _RCSTA 019D                                       _Flash_buff 0220  
                                          u454m0 0E11                                            u455m0 0E20  
                                          u472m0 040B                                            u469m0 0342  
                        ??_one_temperature_trans 002E                                ?_SendDataBit_1621 0021  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                 ?_FLASH_readBlock 0024  
                                          _TXREG 019A                                            _TXSTA 019E  
                               __end_of_TMR0_ISR 14E9                               ??_SendDataBit_1621 0022  
                   __end_of_tc_temperature_trans 0272                                            main@i 01E0  
                              __end_of_I2C_Start 155A                              _Bq32k_Rtc_Read_Time 0D23  
                                Tc_Display@count 0030                                WriteAll_1621@addr 0029  
                                          ltemp0 007E                                            ltemp1 0082  
                                          ltemp2 0086                                            ltemp3 0080  
                                          ttemp0 007E                                            ttemp1 0081  
                                          ttemp2 0084                                            ttemp3 0087  
                                          ttemp4 007F                                            status 0003  
                                          wtemp0 007E                                            wtemp1 0080  
                                          wtemp2 0082                                            wtemp3 0084  
                                          wtemp4 0086                                            wtemp5 0088  
                                          wtemp6 007F                                       _Inf_to_Com 0500  
                         __size_of_I2C_Send_Byte 0056                                  _Cur_temperature 0130  
                                     _Tc_Display 05D9                                  ?_SPI_Initialize 0070  
                    __end_of_temperature_display 09C1                                  __initialization 0029  
                            __end_of_Key_Process 0753                                 ?_I2C_Send_Buffer 0024  
                                   __end_of_main 0500                            RxFrameCheck@frame_len 0070  
                                 WriteAll_1621@i 002A                                   WriteAll_1621@p 0025  
                               __end_of_Key_Scan 16FB                                    main@data_temp 01DE  
                                 ??_EUSART_Write 0021                             ?_Bq32k_Rtc_Read_Time 0070  
                    __end_of_temperature_process 090C                            __end_of_Sleep_process 15D2  
                                 __CFG_LPBOR$OFF 0000     maxim_31856_write_register@uch_register_value 0022  
                    ?_INTERRUPT_InterruptManager 0070                                    _WriteAll_1621 086B  
                                         ??_main 0061                                      _Com_Process 1411  
                                   Key_Process@i 005F   maxim_31856_write_register@uch_register_address 0023  
                                      ??_CRC_cal 0023                          __size_of_FLASH_ReadWord 0020  
                        Bq32k_Rtc_Read_Time@temp 002B                                I2C_Receive_Byte@i 0023  
                                  CRC_cal@rx_arr 0027                         __end_of_SPI_Exchange8bit 13D1  
                          RxFrameCheck@remainder 0079                                           _ADCON0 009D  
                                         _ADCON1 009E                                           _ADRESH 009C  
                                         _ADRESL 009B                                 ___awdiv@dividend 0023  
                                         _APFCON 011D                                           _ANSELA 018C  
                                         _ANSELB 018D                                           _ANSELC 018E  
                                         i1l4470 075D                                           i1l4472 07C8  
                                         i1l4642 0D93                                           i1l4484 07F5  
                                         i1l4670 0DCA                                           i1l4664 0DC0  
                                         i1l4674 0DD0                                           i1l4658 0DB6  
                                         i1l4684 0DF6                                           i1l4686 0DFF  
                                         _FVRCON 0117                                           _PMADRH 0192  
                                         u344_25 0790                                           _PMADRL 0191  
                                         u345_25 076B                                           _PMDATH 0194  
                                         u346_25 07D8                                           _PMDATL 0193  
                                         u347_25 07F1                                _temperature_value 0124  
                                         _PMCON2 0196                        __size_of_FLASH_EraseBlock 0020  
                                         _OSCCON 0099                                           _SPBRGH 019C  
                                         _SPBRGL 019B                         _Cur_temperature_time_ch1 0136  
                       _Cur_temperature_time_ch2 0137                                           _WDTPS0 04B9  
                                         _WDTPS1 04BA                                           _WDTPS2 04BB  
                                         _WDTPS3 04BC                                           _WDTPS4 04BD  
                                         _TRISB1 0469                                           _TRISB3 046B  
                                         _SSPBUF 0211                                    ?_SendCmd_1621 0070  
                                         _SWDTEN 04B8                     __end_of_Bq32k_Rtc_Write_Time 0C51  
                                  ?_SendBit_1621 0021                                   __CFG_PWRTE$OFF 0000  
                                _Bq32k_Time_Init 0837                                 SendBit_1621@data 0023  
                                         ___bmul 1433                                        ??_bcd2bin 0025  
                                  RxFrameCheck@i 0077                                           ___wmul 1505  
                                      ??___awdiv 0025                                   __CFG_STVREN$ON 0000  
                                      ??___awmod 0025                            ??_Bq32k_Rtc_Read_Time 0029  
                                      ??_bin2bcd 002A                                        ??___lwdiv 002B  
                                      ??___lwmod 0025                              _EUSART_Transmit_ISR 1577  
                   ?_maxim_31856_read_nregisters 0029                              FLASH_WriteWord@word 0023  
                                 ?_WriteAll_1621 0025                                 ?_TMR0_Initialize 0070  
                                         _memset 14E9                                ?_I2C_Receive_Byte 0070  
                               ___awdiv@quotient 0028                                  ___awmod@divisor 0021  
                                         _uch_sr 014B                                  ___awmod@counter 0026  
                                         _rtc_tm 0162                                  _Set_finish_flag 139F  
                                  _I2C_Send_Byte 0B94                               ??_I2C_Receive_Byte 0021  
                        FLASH_ReadWord@flashAddr 0021                                        ?_I2C_Stop 0070  
                   ??_maxim_31856_write_register 0023                            I2C_Read_Buffer@Length 0025  
                       ADC_GetConversion@channel 0024                             __size_of_err_Display 002C  
                          __end_of_TMR0_CallBack 13E1                                       bcd2bin@val 0028  
                     ??_maxim_clear_fault_status 0025                             ?_EUSART_Transmit_ISR 0070  
                                 _Set_start_flag 13A9                                _SYSTEM_Initialize 146F  
                                 ??_SendCmd_1621 0025                          __end_of__initialization 0057  
                                 ??_SendBit_1621 0022                                      _Key_Process 06AA  
                                    ?_Inf_to_Com 0070                               ?_SYSTEM_Initialize 0070  
                               CRC_cal@frame_len 0021                                      ?_Tc_Display 0070  
                             Calculate_Time@temp 0042                              ___bmul@multiplicand 0021  
                                  ?_RxFrameCheck 0070                                time_Display@F2143 01B0  
           tc_temperature_trans@temperature_back 0052                                   __pcstackCOMMON 0070  
           tc_temperature_trans@temperature_temp 0058                                     __pidataBANK3 13BB  
                            ??_SYSTEM_Initialize 0022                             _tc_temperature_trans 005B  
                                      ?_TMR0_ISR 0070                      ??_maxim_31856_read_register 0022  
            __size_of_maxim_31856_write_register 0010                                    ?_Save_process 0070  
                                 ?_I2C_Send_Byte 0070                    ??_maxim_31856_read_nregisters 002B  
                               CRC_cal@remainder 0029                          ?_maxim_start_conversion 0070  
                                 _OPTION_REGbits 0095                            TMR0_ISR@CountCallBack 012C  
                                _temperature_int 0132                                       ??_I2C_Stop 0021  
                                  ??_Two_Display 002B                                 Two_Display@F2137 0120  
                           I2C_Receive_Byte@Data 0022                           __end_of_Set_start_flag 13AF  
                            I2C_Read_Buffer@Flag 0028                        __end_of_SYSTEM_Initialize 1484  
                      __size_of_Write_Flash_head 0021                            ??_EUSART_Transmit_ISR 0070  
                            I2C_Read_Buffer@buff 0024                          __end_of_Bq32k_Time_Init 086B  
                                     __pbssBANK0 0064                                       __pbssBANK1 00EE  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                                     __pbssBANK4 0220                                        ?_Key_Scan 0070  
                           __end_of_EUSART_Write 13F1                                  __CFG_VCAPEN$OFF 0000  
                    __size_of_EUSART_Receive_ISR 0074                                       bin2bcd@val 0031  
                                 ??_RxFrameCheck 0071                                 ??_FVR_Initialize 0021  
                                     __pmaintext 0414                                          ?___bmul 0021  
                        __end_of_Set_finish_flag 13A4                            ?_tc_temperature_trans 0070  
                                    _Record_flag 0066                                  ??_WriteAll_1621 0028  
                                        ?___wmul 0021                                       ??_TMR0_ISR 0071  
                                 ??_Save_process 004E                                       __pintentry 0004  
                                        _BAUDCON 019F                                          ?_memset 0021  
                 __end_of_maxim_start_conversion 14CE                          __size_of_ADC_Initialize 0008  
                                 _FLASH_ReadWord 15D2                                    _eusartRxCount 013D  
                                        _CRC_cal 0EF0                        __size_of_Read_time_to_Com 0069  
                           _Bq32k_Rtc_Write_Time 0BEA                              __size_of_Inf_to_Com 00D9  
                            __size_of_Tc_Display 00D1                   __size_of_one_temperature_trans 004A  
                  __end_of_one_temperature_trans 0A51                                          _OSCSTAT 009A  
                       __size_of_Save_Write_time 0076                                          _SSP1ADD 0212  
                       __size_of_Save_Write_word 0051                        _maxim_31856_read_register 145A  
                                ?_Set_start_flag 0070             __size_of_maxim_31856_read_nregisters 0018  
                                     ??_Key_Scan 0021                                          _Dis_TAB 1800  
                               _FLASH_EraseBlock 1612                                 ??_SPI_Initialize 0021  
                       __size_of_FLASH_WriteWord 002B                          __size_of_Calculate_Time 01A2  
                            __end_of_Two_Display 0837                        __size_of_SendDataBit_1621 0021  
                                      _I2C_Start 153D  maxim_31856_read_nregisters@uch_register_address 002D  
                                      _CH1_state 0134                                        _CH2_state 0135  
                                        _bcd2bin 1445                                  __size_of___bmul 0012  
                                  ?_time_Display 0070                                          ___awdiv 0AEF  
                                        ___awmod 09C1                                  __size_of___wmul 001C  
                                        _bin2bcd 17A2                                          ___lwdiv 08A0  
                                        ___lwmod 1775                                  ??_I2C_Send_Byte 0021  
                    __size_of_Write_Flash_finish 0021                                I2C_Send_Byte@Data 0022  
                         __end_of_FLASH_ReadWord 15F2                                  __size_of_memset 001C  
                       __size_of_I2C_Read_Buffer 0078                                          __ptext1 15B3  
                                        __ptext2 16FB                                          __ptext3 0A51  
                                        __ptext4 0CBA                                          __ptext5 146F  
                                        __ptext6 1401                                          __ptext7 13AF  
                                        __ptext8 16B6                                          __ptext9 13A4  
                                   ?_Com_Process 0070                             __end_of_SendCmd_1621 149C  
                        Read_time_to_Com@crc_tmp 003C                             SendDataBit_1621@data 0023  
                           __end_of_SendBit_1621 1653                            ?_Bq32k_Rtc_Write_Time 0070  
             __end_of_maxim_31856_write_register 1401                       _maxim_31856_write_register 13F1  
                          _OSCILLATOR_Initialize 13A4                                   I2C_Send_Byte@i 0023  
                               ___awmod@dividend 0023                                          _uch_cr0 006A  
                                        _uch_cr1 0146                         ??_PIN_MANAGER_Initialize 0021  
                                        _uch_reg 014C                 __end_of_maxim_clear_fault_status 1433  
                              ?_SPI_Exchange8bit 0070                          Read_time_to_Com@tmp_buf 002C  
                          I2C_Send_Buffer@Length 0025                       __size_of_SYSTEM_Initialize 0015  
                                        clrloop0 0801                             end_of_initialization 0057  
                             ??_SPI_Exchange8bit 0021                             SPI_Exchange8bit@data 0021  
                               ?_Bq32k_Time_Init 0070                         __size_of_FLASH_readBlock 0020  
                           FLASH_readBlock@count 0026                                          init_ram 13B5  
                                        memset@c 0021                                          memset@n 0023  
                                        memset@p 0027                                          initloop 13B6  
                                     ?_I2C_Start 0070                                _EUSART_Initialize 1521  
                                   _Inf_cmd_flag 0138                           ??_tc_temperature_trans 004E  
                             ?_EUSART_Initialize 0070                                   ??_time_Display 0036  
                                      _RCSTAbits 019D                                 ?_Set_finish_flag 0070  
                          Serach_Flash_Head@data 0028                                     __pstringtext 1800  
                      FLASH_ReadWord@GIEBitValue 0023                                       _time_count 0069  
                                ?_FLASH_ReadWord 0021                     __size_of_temperature_display 003E  
                            ??_EUSART_Initialize 0021                                    ?_Step_control 0070  
                                   _display_buff 0169                         __size_of_I2C_Send_Buffer 003B  
                               __CFG_FOSC$INTOSC 0000                     __size_of_temperature_process 0037  
                           __end_of_RxFrameCheck 07F7                            __size_of_EUSART_Write 0010  
                                    _Two_Display 0806                                __size_of_I2C_Stop 001D  
                               _Write_Flash_head 1695                              Bq32k_Time_Init@temp 002D  
                           __end_of_Save_process 0D23                        __size_of_I2C_Receive_Byte 0030  
                           Key_Process@gKeyValue 005E                           __size_of_Sleep_process 001F  
                      __end_of_EUSART_Initialize 153D                              Calculate_Time@temp1 0046  
                            Calculate_Time@temp2 004A                         EUSART_Receive_ISR@rx_tmp 007D  
                              ??_Save_Write_time 0036                                     ?_Key_Process 0070  
                              ??_Save_Write_word 0028                                     ??_Inf_to_Com 002B  
                       ??_SPI_Exchange8bitBuffer 0024                                     ??_Tc_Display 002F  
                             RxFrameCheck@rx_arr 0078                      __end_of_Bq32k_Rtc_Read_Time 0D8E  
                              ??_FLASH_WriteWord 0025                     tc_temperature_trans@var_time 0056  
      maxim_start_conversion@uch_conversion_mode 0026                                   __end_of___bmul 1445  
                                 __end_of___wmul 1521                                     _EUSART_Write 13E1  
                              __size_of_TMR0_ISR 001B                                   _ADC_Initialize 07F7  
                         ??_Bq32k_Rtc_Write_Time 0032                                   ??_Step_control 0021  
                           Key_Process@data_temp 005C                           ?_OSCILLATOR_Initialize 0070  
                              Read_time_to_Com@i 003E                                   __end_of_memset 1505  
                                 Tc_Display@data 0031                                 WriteAll_1621@cnt 0027  
                                  ??_err_Display 002B                                 _Read_time_to_Com 0C51  
                            start_initialization 0029                               __end_of_Inf_to_Com 05D9  
                       __size_of_TMR0_Initialize 0010                               __end_of_Tc_Display 06AA  
                __size_of_PIN_MANAGER_Initialize 0022                                ??_I2C_Read_Buffer 0026  
                          Bq32k_Rtc_Write_Time@p 003E                                   Two_Display@num 002C  
                                 _Calculate_Time 0272                                 _SendDataBit_1621 1653  
                                    ??_I2C_Start 0021                                __size_of_Key_Scan 0023  
                               _temperature_sign 0142               __size_of_maxim_31856_read_register 0015  
                              ??_FLASH_readBlock 0027                                  SendBit_1621@cnt 0021  
                                       ??___bmul 0022                __size_of_maxim_clear_fault_status 0011  
                      ?_maxim_clear_fault_status 0070                                         ??___wmul 0025  
                          __size_of_SendCmd_1621 0018                            __size_of_SendBit_1621 0021  
                            I2C_Send_Buffer@Flag 002A                           __size_of_TMR0_CallBack 0010  
                         __end_of_ADC_Initialize 07FF                                      __pdataBANK3 01D4  
                            I2C_Send_Buffer@buff 0024                                         ??_memset 0025  
                    FLASH_EraseBlock@GIEBitValue 0023                         __end_of_FLASH_EraseBlock 1632  
                                  _Sleep_process 15B3                                         ?_CRC_cal 0021  
                               ??_Set_start_flag 0021                      __end_of_EUSART_Transmit_ISR 1595  
                           __size_of_Com_Process 0011                                         CRC_cal@i 0028  
                                _CH1_temperature 00EE                              Inf_to_Com@count_tmp 00ED  
                                      ___latbits 0003                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00A0                                    __pcstackBANK3 01DE  
                       Bq32k_Rtc_Write_Time@temp 0034                             __end_of_time_Display 1000  
                  SPI_Exchange8bitBuffer@dataOut 0023                           __end_of_Calculate_Time 0414  
                              ??_I2C_Send_Buffer 0026                              __end_of_err_Display 1775  
                              Inf_to_Com@add_tmp 00E8                       __end_of_EUSART_Receive_ISR 0E02  
                     __size_of_EUSART_Initialize 001C                               I2C_Read_Buffer@ADD 0027  
                                   _LongPressSec 0139                                Inf_to_Com@crc_tmp 00EA  
                              Two_Display@number 0030                                     _SendCmd_1621 1484  
                                   _SendBit_1621 1632                                        __pnvBANK2 016D  
                __size_of_SPI_Exchange8bitBuffer 0053                                 ___lwdiv@dividend 0029  
                         _PIN_MANAGER_Initialize 16B6                                      _MAX31856Sec 013A  
              __end_of_maxim_31856_read_register 146F                                         ?_bcd2bin 0070  
                              Inf_to_Com@tmp_buf 00A0                                         ?___awdiv 0021  
                                       ?___awmod 0021              __end_of_maxim_31856_read_nregisters 14B4  
                    _maxim_31856_read_nregisters 149C                                         ?_bin2bcd 0070  
                                       ?___lwdiv 0027                                         ?___lwmod 0021  
                                ?_ADC_Initialize 0070                                SendDataBit_1621@i 0024  
                                   _eusartRxHead 013E                                     _eusartTxHead 0140  
                                 ?_Sleep_process 0070                            __end_of_WriteAll_1621 08A0  
                                   _eusartRxTail 013F                                     _eusartTxTail 0141  
                   ??_INTERRUPT_InterruptManager 0020                            __size_of_RxFrameCheck 00A4  
                        _eusartTxBufferRemaining 016D                                _Set_time_cmd_flag 013B  
                    ?_maxim_31856_write_register 0022                                         _I2C_Stop 155A  
                          __size_of_Save_process 0069                                  _CH2_temperature 012E  
                               I2C_Send_Buffer@i 0029                                 __CFG_WDTE$SWDTEN 0000  
                               ___lwdiv@quotient 002D                                    _TMR0_CallBack 13D1  
                                ?_Calculate_Time 0070                              _temperature_decimal 0068  
                          _one_temperature_trans 0A07                                _Set_time_from_Com 0947  
                               _I2C_Receive_Byte 17D0                              SendDataBit_1621@cnt 0021  
                       FLASH_WriteWord@flashAddr 0021                                   err_Display@num 002C  
                                 _eusartRxBuffer 01A0            maxim_31856_read_nregisters@uch_nBytes 002A  
                            _temperature_display 0983                                ??_TMR0_Initialize 0021  
                                 _eusartTxBuffer 01A8                               ?_Set_time_from_Com 0070  
                                 ___wmul@product 0025                             __end_of_Step_control 171E  
                                      clear_ram0 0800                                         _PIE1bits 0091  
                                      _uch_ltcbh 0147                                        _uch_ltcbl 0148  
                                      _uch_ltcbm 0149                             __size_of_Key_Process 00A9  
            __size_of_INTERRUPT_InterruptManager 0023                              _temperature_process 08D5  
                                       _PIR1bits 0011                        FLASH_EraseBlock@startAddr 0021  
                                   _RxFrameCheck 0753                              ??_Set_time_from_Com 003F  
                               ??_FLASH_ReadWord 0023                        __size_of_SPI_Exchange8bit 000C  
                     __end_of_Write_Flash_finish 1695                                         _SSP1CON1 0215  
                                       _TMR0_ISR 14CE                         __end_of_Write_Flash_head 16B6  
                                       _SSP1STAT 0214                                     _Save_process 0CBA  
                           ?_temperature_display 0070                            __end_of_I2C_Send_Byte 0BEA  
                                     _ADCON0bits 009D                                ___wmul@multiplier 0021  
                        __size_of_FVR_Initialize 0004                           _SPI_Exchange8bitBuffer 0B41  
                                 _Cur_Save_Index 0064                                      _err_Display 1749  
                            Save_Write_word@data 0026                             ?_temperature_process 0070  
                               __size_of_CRC_cal 007A                                  _Save_Write_time 0E02  
                                _Save_Write_word 0A9E                                     ?_Two_Display 0070  
                      __end_of_Set_time_from_Com 0983                                   ?_TMR0_CallBack 0070  
                                _FLASH_WriteWord 171E                                         _Key_Scan 16D8  
            maxim_31856_read_nregisters@uch_buff 0029                           FLASH_readBlock@address 0024  
                              _Serach_Flash_Head 0A51                         __end_of_Read_time_to_Com 0CBA  
                       __size_of_Bq32k_Time_Init 0034                               ?_Serach_Flash_Head 0070  
                              _ADC_GetConversion 1595                         ??_maxim_start_conversion 0025  
                             I2C_Send_Buffer@ADD 0028                                  ??_Sleep_process 0022  
                  __size_of_tc_temperature_trans 0217                          __size_of_SPI_Initialize 0006  
                               __size_of_bcd2bin 0015                          ??_OSCILLATOR_Initialize 0021  
                             Serach_Flash_Head@i 002A                               ?_ADC_GetConversion 0021  
                               __size_of___awdiv 0052                            ??_temperature_display 005A  
                               __size_of___awmod 0046                                  _I2C_Read_Buffer 0E78  
                               __size_of_bin2bcd 002E                                 __size_of___lwdiv 0035  
                               __size_of___lwmod 002D                              ??_Serach_Flash_Head 0026  
                   SPI_Exchange8bitBuffer@dataIn 0027                     SPI_Exchange8bitBuffer@bufLen 0022  
                               err_Display@F2140 0128                         __end_of_SendDataBit_1621 1674  
                       __size_of_Set_finish_flag 0005                            __size_of_time_Display 0096  
                            ??_ADC_GetConversion 0023                            ??_temperature_process 005B  
                                ___lwdiv@divisor 0027                                  ___lwdiv@counter 002C  
                                       __ptext10 139B                                         __ptext11 1521  
                                       __ptext20 1695                                         __ptext12 07F7  
                                       __ptext21 1674                                         __ptext13 06AA  
                                       __ptext30 08A0                                         __ptext22 0E02  
                                       __ptext14 08D5                                         __ptext31 0A07  
                                       __ptext23 0A9E                                         __ptext15 0F6A  
                                       __ptext40 1653                                         __ptext32 14B4  
                                       __ptext24 1612                                         __ptext16 0983  
                                       __ptext41 13A9                                         __ptext33 13F1  
                                       __ptext25 1422                                         __ptext17 005B  
                                       __ptext50 17A2                                         __ptext42 139F  
                                       __ptext34 145A                                         __ptext26 1749  
                                       __ptext18 0272                                         __ptext51 09C1  
                                       __ptext43 1484                                         __ptext35 149C  
                                       __ptext27 05D9                                         __ptext19 1505  
                                       __ptext60 13E1                                         __ptext52 0AEF  
                                       __ptext44 1632                                         __ptext36 0B41  
                                       __ptext28 14E9                                         __ptext61 0EF0  
                                       __ptext53 0D23                                         __ptext45 16D8  
                                       __ptext37 13C5                                         __ptext29 1775  
                                       __ptext62 0837                                         __ptext54 1445  
                                       __ptext46 1411                                         __ptext38 0806  
                                       __ptext71 14CE                                         __ptext63 090C  
                                       __ptext55 1433                                         __ptext47 0947  
                                       __ptext39 086B                                         __ptext72 13D1  
                                       __ptext64 155A                                         __ptext56 0E78  
                                       __ptext48 0C51                                         __ptext73 1577  
                                       __ptext65 153D                                         __ptext57 17D0  
                                       __ptext49 0BEA                                         __ptext74 0D8E  
                                       __ptext66 0B94                                         __ptext58 0500  
                                       __ptext75 0753                                         __ptext67 171E  
                                       __ptext59 15F2                                         __ptext68 15D2  
                                       __ptext69 1595                           ?_one_temperature_trans 0070  
                                   _SSP1CON1bits 0215                                  _FLASH_readBlock 15F2  
                      __end_of_Serach_Flash_Head 0A9E                                    __size_of_main 00EC  
     maxim_31856_read_register@uch_register_data 0024                        __end_of_ADC_GetConversion 15B3  
                                       _uch_cjth 0144                                         _uch_cjtl 0145  
                                       _uch_mask 014A                             Save_process@var_time 0050  
                                       int$flags 007E                                     _time_Display 0F6A  
                                       _tmr_flag 0143               __end_of_INTERRUPT_InterruptManager 0027  
                     _INTERRUPT_InterruptManager 0004                     __size_of_Bq32k_Rtc_Read_Time 006B  
                                   _SSP1STATbits 0214                          __end_of_Save_Write_time 0E78  
                        __end_of_Save_Write_word 0AEF                                  _I2C_Send_Buffer 090C  
                              ?_FLASH_EraseBlock 0021                    __size_of_Bq32k_Rtc_Write_Time 0067  
                             ??_FLASH_EraseBlock 0023                                       _INTCONbits 000B  
                        __end_of_FLASH_WriteWord 1749                                  ??_TMR0_CallBack 0070  
                                     _FVRCONbits 0117                                  Key_Scan@Key_val 0023  
                          FLASH_readBlock@buffer 0028                                    SendBit_1621@i 0024  
                     __size_of_Set_time_from_Com 003C                                         memset@p1 0026  
                          __size_of_Step_control 0023                                         intlevel1 0000  
                                     _PMCON1bits 0195                                 ___lwmod@dividend 0023  
                        ?_PIN_MANAGER_Initialize 0070                                __CFG_CLKOUTEN$OFF 0000  
             SPI_Exchange8bitBuffer@bytesWritten 0028                                 ??_ADC_Initialize 0021  
                        __end_of_I2C_Read_Buffer 0EF0                                 _SPI_Exchange8bit 13C5  
                __size_of_maxim_start_conversion 001A                               _EUSART_Receive_ISR 0D8E  
                       __end_of_I2C_Receive_Byte 1800                           Serach_Flash_Head@count 0027  
                              ??_Bq32k_Time_Init 002B                                    ??_Com_Process 0040  
                                 _FVR_Initialize 139B                                     _rtc_save_ch1 0154  
                                   _rtc_save_ch2 015B                                       _OPTION_REG 0095  
                            ?_EUSART_Receive_ISR 0070                                     _Step_control 16FB  
                        __end_of_FLASH_readBlock 1612                                 ??_Calculate_Time 0038  
                                ___lwmod@divisor 0021                                  _TMR0_Initialize 1401  
                                ___lwmod@counter 0026         tc_temperature_trans@temperature_absolute 0054  
                              ??_Set_finish_flag 0021                               EUSART_Write@txData 0021  
                           __size_of_Two_Display 0031                     __size_of_EUSART_Transmit_ISR 001E  
                 __end_of_PIN_MANAGER_Initialize 16D8                       __size_of_Serach_Flash_Head 004D  
                           ??_EUSART_Receive_ISR 007B                             Bq32k_Time_Init@F2032 01D4  
                     __size_of_ADC_GetConversion 001E                         _maxim_clear_fault_status 1422  
