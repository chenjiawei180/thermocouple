

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Jul 18 10:43:38 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000D                     	;# 
    99  000E                     	;# 
   100  0010                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0099                     	;# 
   122  009A                     	;# 
   123  009B                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  011D                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  018E                     	;# 
   137  0191                     	;# 
   138  0191                     	;# 
   139  0192                     	;# 
   140  0193                     	;# 
   141  0193                     	;# 
   142  0194                     	;# 
   143  0195                     	;# 
   144  0196                     	;# 
   145  0197                     	;# 
   146  0199                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019C                     	;# 
   153  019C                     	;# 
   154  019D                     	;# 
   155  019E                     	;# 
   156  019F                     	;# 
   157  020D                     	;# 
   158  0210                     	;# 
   159  0211                     	;# 
   160  0211                     	;# 
   161  0212                     	;# 
   162  0212                     	;# 
   163  0213                     	;# 
   164  0213                     	;# 
   165  0214                     	;# 
   166  0214                     	;# 
   167  0215                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0216                     	;# 
   171  0216                     	;# 
   172  0217                     	;# 
   173  0217                     	;# 
   174  0291                     	;# 
   175  0291                     	;# 
   176  0292                     	;# 
   177  0293                     	;# 
   178  0298                     	;# 
   179  0298                     	;# 
   180  0299                     	;# 
   181  029A                     	;# 
   182  0394                     	;# 
   183  0395                     	;# 
   184  0396                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196  0000                     	;# 
   197  0001                     	;# 
   198  0002                     	;# 
   199  0003                     	;# 
   200  0004                     	;# 
   201  0005                     	;# 
   202  0006                     	;# 
   203  0007                     	;# 
   204  0008                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000D                     	;# 
   210  000E                     	;# 
   211  0010                     	;# 
   212  0011                     	;# 
   213  0012                     	;# 
   214  0015                     	;# 
   215  0016                     	;# 
   216  0016                     	;# 
   217  0017                     	;# 
   218  0018                     	;# 
   219  0019                     	;# 
   220  001A                     	;# 
   221  001B                     	;# 
   222  001C                     	;# 
   223  008C                     	;# 
   224  008D                     	;# 
   225  008E                     	;# 
   226  0090                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0097                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  010C                     	;# 
   240  010D                     	;# 
   241  010E                     	;# 
   242  0116                     	;# 
   243  0117                     	;# 
   244  011D                     	;# 
   245  018C                     	;# 
   246  018D                     	;# 
   247  018E                     	;# 
   248  0191                     	;# 
   249  0191                     	;# 
   250  0192                     	;# 
   251  0193                     	;# 
   252  0193                     	;# 
   253  0194                     	;# 
   254  0195                     	;# 
   255  0196                     	;# 
   256  0197                     	;# 
   257  0199                     	;# 
   258  019A                     	;# 
   259  019B                     	;# 
   260  019B                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019C                     	;# 
   264  019C                     	;# 
   265  019D                     	;# 
   266  019E                     	;# 
   267  019F                     	;# 
   268  020D                     	;# 
   269  0210                     	;# 
   270  0211                     	;# 
   271  0211                     	;# 
   272  0212                     	;# 
   273  0212                     	;# 
   274  0213                     	;# 
   275  0213                     	;# 
   276  0214                     	;# 
   277  0214                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0216                     	;# 
   282  0216                     	;# 
   283  0217                     	;# 
   284  0217                     	;# 
   285  0291                     	;# 
   286  0291                     	;# 
   287  0292                     	;# 
   288  0293                     	;# 
   289  0298                     	;# 
   290  0298                     	;# 
   291  0299                     	;# 
   292  029A                     	;# 
   293  0394                     	;# 
   294  0395                     	;# 
   295  0396                     	;# 
   296  0FE4                     	;# 
   297  0FE5                     	;# 
   298  0FE6                     	;# 
   299  0FE7                     	;# 
   300  0FE8                     	;# 
   301  0FE9                     	;# 
   302  0FEA                     	;# 
   303  0FEB                     	;# 
   304  0FED                     	;# 
   305  0FEE                     	;# 
   306  0FEF                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0008                     	;# 
   316  0009                     	;# 
   317  000A                     	;# 
   318  000B                     	;# 
   319  000C                     	;# 
   320  000D                     	;# 
   321  000E                     	;# 
   322  0010                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  008C                     	;# 
   335  008D                     	;# 
   336  008E                     	;# 
   337  0090                     	;# 
   338  0091                     	;# 
   339  0092                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009B                     	;# 
   347  009C                     	;# 
   348  009D                     	;# 
   349  009E                     	;# 
   350  010C                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  0116                     	;# 
   354  0117                     	;# 
   355  011D                     	;# 
   356  018C                     	;# 
   357  018D                     	;# 
   358  018E                     	;# 
   359  0191                     	;# 
   360  0191                     	;# 
   361  0192                     	;# 
   362  0193                     	;# 
   363  0193                     	;# 
   364  0194                     	;# 
   365  0195                     	;# 
   366  0196                     	;# 
   367  0197                     	;# 
   368  0199                     	;# 
   369  019A                     	;# 
   370  019B                     	;# 
   371  019B                     	;# 
   372  019B                     	;# 
   373  019B                     	;# 
   374  019C                     	;# 
   375  019C                     	;# 
   376  019D                     	;# 
   377  019E                     	;# 
   378  019F                     	;# 
   379  020D                     	;# 
   380  0210                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0216                     	;# 
   393  0216                     	;# 
   394  0217                     	;# 
   395  0217                     	;# 
   396  0291                     	;# 
   397  0291                     	;# 
   398  0292                     	;# 
   399  0293                     	;# 
   400  0298                     	;# 
   401  0298                     	;# 
   402  0299                     	;# 
   403  029A                     	;# 
   404  0394                     	;# 
   405  0395                     	;# 
   406  0396                     	;# 
   407  0FE4                     	;# 
   408  0FE5                     	;# 
   409  0FE6                     	;# 
   410  0FE7                     	;# 
   411  0FE8                     	;# 
   412  0FE9                     	;# 
   413  0FEA                     	;# 
   414  0FEB                     	;# 
   415  0FED                     	;# 
   416  0FEE                     	;# 
   417  0FEF                     	;# 
   418  0000                     	;# 
   419  0001                     	;# 
   420  0002                     	;# 
   421  0003                     	;# 
   422  0004                     	;# 
   423  0005                     	;# 
   424  0006                     	;# 
   425  0007                     	;# 
   426  0008                     	;# 
   427  0009                     	;# 
   428  000A                     	;# 
   429  000B                     	;# 
   430  000C                     	;# 
   431  000D                     	;# 
   432  000E                     	;# 
   433  0010                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0015                     	;# 
   437  0016                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001C                     	;# 
   445  008C                     	;# 
   446  008D                     	;# 
   447  008E                     	;# 
   448  0090                     	;# 
   449  0091                     	;# 
   450  0092                     	;# 
   451  0095                     	;# 
   452  0096                     	;# 
   453  0097                     	;# 
   454  0099                     	;# 
   455  009A                     	;# 
   456  009B                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  010C                     	;# 
   462  010D                     	;# 
   463  010E                     	;# 
   464  0116                     	;# 
   465  0117                     	;# 
   466  011D                     	;# 
   467  018C                     	;# 
   468  018D                     	;# 
   469  018E                     	;# 
   470  0191                     	;# 
   471  0191                     	;# 
   472  0192                     	;# 
   473  0193                     	;# 
   474  0193                     	;# 
   475  0194                     	;# 
   476  0195                     	;# 
   477  0196                     	;# 
   478  0197                     	;# 
   479  0199                     	;# 
   480  019A                     	;# 
   481  019B                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019C                     	;# 
   486  019C                     	;# 
   487  019D                     	;# 
   488  019E                     	;# 
   489  019F                     	;# 
   490  020D                     	;# 
   491  0210                     	;# 
   492  0211                     	;# 
   493  0211                     	;# 
   494  0212                     	;# 
   495  0212                     	;# 
   496  0213                     	;# 
   497  0213                     	;# 
   498  0214                     	;# 
   499  0214                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0216                     	;# 
   504  0216                     	;# 
   505  0217                     	;# 
   506  0217                     	;# 
   507  0291                     	;# 
   508  0291                     	;# 
   509  0292                     	;# 
   510  0293                     	;# 
   511  0298                     	;# 
   512  0298                     	;# 
   513  0299                     	;# 
   514  029A                     	;# 
   515  0394                     	;# 
   516  0395                     	;# 
   517  0396                     	;# 
   518  0FE4                     	;# 
   519  0FE5                     	;# 
   520  0FE6                     	;# 
   521  0FE7                     	;# 
   522  0FE8                     	;# 
   523  0FE9                     	;# 
   524  0FEA                     	;# 
   525  0FEB                     	;# 
   526  0FED                     	;# 
   527  0FEE                     	;# 
   528  0FEF                     	;# 
   529  0000                     	;# 
   530  0001                     	;# 
   531  0002                     	;# 
   532  0003                     	;# 
   533  0004                     	;# 
   534  0005                     	;# 
   535  0006                     	;# 
   536  0007                     	;# 
   537  0008                     	;# 
   538  0009                     	;# 
   539  000A                     	;# 
   540  000B                     	;# 
   541  000C                     	;# 
   542  000D                     	;# 
   543  000E                     	;# 
   544  0010                     	;# 
   545  0011                     	;# 
   546  0012                     	;# 
   547  0015                     	;# 
   548  0016                     	;# 
   549  0016                     	;# 
   550  0017                     	;# 
   551  0018                     	;# 
   552  0019                     	;# 
   553  001A                     	;# 
   554  001B                     	;# 
   555  001C                     	;# 
   556  008C                     	;# 
   557  008D                     	;# 
   558  008E                     	;# 
   559  0090                     	;# 
   560  0091                     	;# 
   561  0092                     	;# 
   562  0095                     	;# 
   563  0096                     	;# 
   564  0097                     	;# 
   565  0099                     	;# 
   566  009A                     	;# 
   567  009B                     	;# 
   568  009B                     	;# 
   569  009C                     	;# 
   570  009D                     	;# 
   571  009E                     	;# 
   572  010C                     	;# 
   573  010D                     	;# 
   574  010E                     	;# 
   575  0116                     	;# 
   576  0117                     	;# 
   577  011D                     	;# 
   578  018C                     	;# 
   579  018D                     	;# 
   580  018E                     	;# 
   581  0191                     	;# 
   582  0191                     	;# 
   583  0192                     	;# 
   584  0193                     	;# 
   585  0193                     	;# 
   586  0194                     	;# 
   587  0195                     	;# 
   588  0196                     	;# 
   589  0197                     	;# 
   590  0199                     	;# 
   591  019A                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019C                     	;# 
   597  019C                     	;# 
   598  019D                     	;# 
   599  019E                     	;# 
   600  019F                     	;# 
   601  020D                     	;# 
   602  0210                     	;# 
   603  0211                     	;# 
   604  0211                     	;# 
   605  0212                     	;# 
   606  0212                     	;# 
   607  0213                     	;# 
   608  0213                     	;# 
   609  0214                     	;# 
   610  0214                     	;# 
   611  0215                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0216                     	;# 
   615  0216                     	;# 
   616  0217                     	;# 
   617  0217                     	;# 
   618  0291                     	;# 
   619  0291                     	;# 
   620  0292                     	;# 
   621  0293                     	;# 
   622  0298                     	;# 
   623  0298                     	;# 
   624  0299                     	;# 
   625  029A                     	;# 
   626  0394                     	;# 
   627  0395                     	;# 
   628  0396                     	;# 
   629  0FE4                     	;# 
   630  0FE5                     	;# 
   631  0FE6                     	;# 
   632  0FE7                     	;# 
   633  0FE8                     	;# 
   634  0FE9                     	;# 
   635  0FEA                     	;# 
   636  0FEB                     	;# 
   637  0FED                     	;# 
   638  0FEE                     	;# 
   639  0FEF                     	;# 
   640  0000                     	;# 
   641  0001                     	;# 
   642  0002                     	;# 
   643  0003                     	;# 
   644  0004                     	;# 
   645  0005                     	;# 
   646  0006                     	;# 
   647  0007                     	;# 
   648  0008                     	;# 
   649  0009                     	;# 
   650  000A                     	;# 
   651  000B                     	;# 
   652  000C                     	;# 
   653  000D                     	;# 
   654  000E                     	;# 
   655  0010                     	;# 
   656  0011                     	;# 
   657  0012                     	;# 
   658  0015                     	;# 
   659  0016                     	;# 
   660  0016                     	;# 
   661  0017                     	;# 
   662  0018                     	;# 
   663  0019                     	;# 
   664  001A                     	;# 
   665  001B                     	;# 
   666  001C                     	;# 
   667  008C                     	;# 
   668  008D                     	;# 
   669  008E                     	;# 
   670  0090                     	;# 
   671  0091                     	;# 
   672  0092                     	;# 
   673  0095                     	;# 
   674  0096                     	;# 
   675  0097                     	;# 
   676  0099                     	;# 
   677  009A                     	;# 
   678  009B                     	;# 
   679  009B                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  010C                     	;# 
   684  010D                     	;# 
   685  010E                     	;# 
   686  0116                     	;# 
   687  0117                     	;# 
   688  011D                     	;# 
   689  018C                     	;# 
   690  018D                     	;# 
   691  018E                     	;# 
   692  0191                     	;# 
   693  0191                     	;# 
   694  0192                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0197                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019B                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019C                     	;# 
   708  019C                     	;# 
   709  019D                     	;# 
   710  019E                     	;# 
   711  019F                     	;# 
   712  020D                     	;# 
   713  0210                     	;# 
   714  0211                     	;# 
   715  0211                     	;# 
   716  0212                     	;# 
   717  0212                     	;# 
   718  0213                     	;# 
   719  0213                     	;# 
   720  0214                     	;# 
   721  0214                     	;# 
   722  0215                     	;# 
   723  0215                     	;# 
   724  0215                     	;# 
   725  0216                     	;# 
   726  0216                     	;# 
   727  0217                     	;# 
   728  0217                     	;# 
   729  0291                     	;# 
   730  0291                     	;# 
   731  0292                     	;# 
   732  0293                     	;# 
   733  0298                     	;# 
   734  0298                     	;# 
   735  0299                     	;# 
   736  029A                     	;# 
   737  0394                     	;# 
   738  0395                     	;# 
   739  0396                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE9                     	;# 
   746  0FEA                     	;# 
   747  0FEB                     	;# 
   748  0FED                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000D                     	;# 
   765  000E                     	;# 
   766  0010                     	;# 
   767  0011                     	;# 
   768  0012                     	;# 
   769  0015                     	;# 
   770  0016                     	;# 
   771  0016                     	;# 
   772  0017                     	;# 
   773  0018                     	;# 
   774  0019                     	;# 
   775  001A                     	;# 
   776  001B                     	;# 
   777  001C                     	;# 
   778  008C                     	;# 
   779  008D                     	;# 
   780  008E                     	;# 
   781  0090                     	;# 
   782  0091                     	;# 
   783  0092                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  010C                     	;# 
   795  010D                     	;# 
   796  010E                     	;# 
   797  0116                     	;# 
   798  0117                     	;# 
   799  011D                     	;# 
   800  018C                     	;# 
   801  018D                     	;# 
   802  018E                     	;# 
   803  0191                     	;# 
   804  0191                     	;# 
   805  0192                     	;# 
   806  0193                     	;# 
   807  0193                     	;# 
   808  0194                     	;# 
   809  0195                     	;# 
   810  0196                     	;# 
   811  0197                     	;# 
   812  0199                     	;# 
   813  019A                     	;# 
   814  019B                     	;# 
   815  019B                     	;# 
   816  019B                     	;# 
   817  019B                     	;# 
   818  019C                     	;# 
   819  019C                     	;# 
   820  019D                     	;# 
   821  019E                     	;# 
   822  019F                     	;# 
   823  020D                     	;# 
   824  0210                     	;# 
   825  0211                     	;# 
   826  0211                     	;# 
   827  0212                     	;# 
   828  0212                     	;# 
   829  0213                     	;# 
   830  0213                     	;# 
   831  0214                     	;# 
   832  0214                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0216                     	;# 
   837  0216                     	;# 
   838  0217                     	;# 
   839  0217                     	;# 
   840  0291                     	;# 
   841  0291                     	;# 
   842  0292                     	;# 
   843  0293                     	;# 
   844  0298                     	;# 
   845  0298                     	;# 
   846  0299                     	;# 
   847  029A                     	;# 
   848  0394                     	;# 
   849  0395                     	;# 
   850  0396                     	;# 
   851  0FE4                     	;# 
   852  0FE5                     	;# 
   853  0FE6                     	;# 
   854  0FE7                     	;# 
   855  0FE8                     	;# 
   856  0FE9                     	;# 
   857  0FEA                     	;# 
   858  0FEB                     	;# 
   859  0FED                     	;# 
   860  0FEE                     	;# 
   861  0FEF                     	;# 
   862  0000                     	;# 
   863  0001                     	;# 
   864  0002                     	;# 
   865  0003                     	;# 
   866  0004                     	;# 
   867  0005                     	;# 
   868  0006                     	;# 
   869  0007                     	;# 
   870  0008                     	;# 
   871  0009                     	;# 
   872  000A                     	;# 
   873  000B                     	;# 
   874  000C                     	;# 
   875  000D                     	;# 
   876  000E                     	;# 
   877  0010                     	;# 
   878  0011                     	;# 
   879  0012                     	;# 
   880  0015                     	;# 
   881  0016                     	;# 
   882  0016                     	;# 
   883  0017                     	;# 
   884  0018                     	;# 
   885  0019                     	;# 
   886  001A                     	;# 
   887  001B                     	;# 
   888  001C                     	;# 
   889  008C                     	;# 
   890  008D                     	;# 
   891  008E                     	;# 
   892  0090                     	;# 
   893  0091                     	;# 
   894  0092                     	;# 
   895  0095                     	;# 
   896  0096                     	;# 
   897  0097                     	;# 
   898  0099                     	;# 
   899  009A                     	;# 
   900  009B                     	;# 
   901  009B                     	;# 
   902  009C                     	;# 
   903  009D                     	;# 
   904  009E                     	;# 
   905  010C                     	;# 
   906  010D                     	;# 
   907  010E                     	;# 
   908  0116                     	;# 
   909  0117                     	;# 
   910  011D                     	;# 
   911  018C                     	;# 
   912  018D                     	;# 
   913  018E                     	;# 
   914  0191                     	;# 
   915  0191                     	;# 
   916  0192                     	;# 
   917  0193                     	;# 
   918  0193                     	;# 
   919  0194                     	;# 
   920  0195                     	;# 
   921  0196                     	;# 
   922  0197                     	;# 
   923  0199                     	;# 
   924  019A                     	;# 
   925  019B                     	;# 
   926  019B                     	;# 
   927  019B                     	;# 
   928  019B                     	;# 
   929  019C                     	;# 
   930  019C                     	;# 
   931  019D                     	;# 
   932  019E                     	;# 
   933  019F                     	;# 
   934  020D                     	;# 
   935  0210                     	;# 
   936  0211                     	;# 
   937  0211                     	;# 
   938  0212                     	;# 
   939  0212                     	;# 
   940  0213                     	;# 
   941  0213                     	;# 
   942  0214                     	;# 
   943  0214                     	;# 
   944  0215                     	;# 
   945  0215                     	;# 
   946  0215                     	;# 
   947  0216                     	;# 
   948  0216                     	;# 
   949  0217                     	;# 
   950  0217                     	;# 
   951  0291                     	;# 
   952  0291                     	;# 
   953  0292                     	;# 
   954  0293                     	;# 
   955  0298                     	;# 
   956  0298                     	;# 
   957  0299                     	;# 
   958  029A                     	;# 
   959  0394                     	;# 
   960  0395                     	;# 
   961  0396                     	;# 
   962  0FE4                     	;# 
   963  0FE5                     	;# 
   964  0FE6                     	;# 
   965  0FE7                     	;# 
   966  0FE8                     	;# 
   967  0FE9                     	;# 
   968  0FEA                     	;# 
   969  0FEB                     	;# 
   970  0FED                     	;# 
   971  0FEE                     	;# 
   972  0FEF                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0008                     	;# 
   982  0009                     	;# 
   983  000A                     	;# 
   984  000B                     	;# 
   985  000C                     	;# 
   986  000D                     	;# 
   987  000E                     	;# 
   988  0010                     	;# 
   989  0011                     	;# 
   990  0012                     	;# 
   991  0015                     	;# 
   992  0016                     	;# 
   993  0016                     	;# 
   994  0017                     	;# 
   995  0018                     	;# 
   996  0019                     	;# 
   997  001A                     	;# 
   998  001B                     	;# 
   999  001C                     	;# 
  1000  008C                     	;# 
  1001  008D                     	;# 
  1002  008E                     	;# 
  1003  0090                     	;# 
  1004  0091                     	;# 
  1005  0092                     	;# 
  1006  0095                     	;# 
  1007  0096                     	;# 
  1008  0097                     	;# 
  1009  0099                     	;# 
  1010  009A                     	;# 
  1011  009B                     	;# 
  1012  009B                     	;# 
  1013  009C                     	;# 
  1014  009D                     	;# 
  1015  009E                     	;# 
  1016  010C                     	;# 
  1017  010D                     	;# 
  1018  010E                     	;# 
  1019  0116                     	;# 
  1020  0117                     	;# 
  1021  011D                     	;# 
  1022  018C                     	;# 
  1023  018D                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0194                     	;# 
  1031  0195                     	;# 
  1032  0196                     	;# 
  1033  0197                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020D                     	;# 
  1046  0210                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0298                     	;# 
  1067  0298                     	;# 
  1068  0299                     	;# 
  1069  029A                     	;# 
  1070  0394                     	;# 
  1071  0395                     	;# 
  1072  0396                     	;# 
  1073  0FE4                     	;# 
  1074  0FE5                     	;# 
  1075  0FE6                     	;# 
  1076  0FE7                     	;# 
  1077  0FE8                     	;# 
  1078  0FE9                     	;# 
  1079  0FEA                     	;# 
  1080  0FEB                     	;# 
  1081  0FED                     	;# 
  1082  0FEE                     	;# 
  1083  0FEF                     	;# 
  1084  0000                     	;# 
  1085  0001                     	;# 
  1086  0002                     	;# 
  1087  0003                     	;# 
  1088  0004                     	;# 
  1089  0005                     	;# 
  1090  0006                     	;# 
  1091  0007                     	;# 
  1092  0008                     	;# 
  1093  0009                     	;# 
  1094  000A                     	;# 
  1095  000B                     	;# 
  1096  000C                     	;# 
  1097  000D                     	;# 
  1098  000E                     	;# 
  1099  0010                     	;# 
  1100  0011                     	;# 
  1101  0012                     	;# 
  1102  0015                     	;# 
  1103  0016                     	;# 
  1104  0016                     	;# 
  1105  0017                     	;# 
  1106  0018                     	;# 
  1107  0019                     	;# 
  1108  001A                     	;# 
  1109  001B                     	;# 
  1110  001C                     	;# 
  1111  008C                     	;# 
  1112  008D                     	;# 
  1113  008E                     	;# 
  1114  0090                     	;# 
  1115  0091                     	;# 
  1116  0092                     	;# 
  1117  0095                     	;# 
  1118  0096                     	;# 
  1119  0097                     	;# 
  1120  0099                     	;# 
  1121  009A                     	;# 
  1122  009B                     	;# 
  1123  009B                     	;# 
  1124  009C                     	;# 
  1125  009D                     	;# 
  1126  009E                     	;# 
  1127  010C                     	;# 
  1128  010D                     	;# 
  1129  010E                     	;# 
  1130  0116                     	;# 
  1131  0117                     	;# 
  1132  011D                     	;# 
  1133  018C                     	;# 
  1134  018D                     	;# 
  1135  018E                     	;# 
  1136  0191                     	;# 
  1137  0191                     	;# 
  1138  0192                     	;# 
  1139  0193                     	;# 
  1140  0193                     	;# 
  1141  0194                     	;# 
  1142  0195                     	;# 
  1143  0196                     	;# 
  1144  0197                     	;# 
  1145  0199                     	;# 
  1146  019A                     	;# 
  1147  019B                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019C                     	;# 
  1152  019C                     	;# 
  1153  019D                     	;# 
  1154  019E                     	;# 
  1155  019F                     	;# 
  1156  020D                     	;# 
  1157  0210                     	;# 
  1158  0211                     	;# 
  1159  0211                     	;# 
  1160  0212                     	;# 
  1161  0212                     	;# 
  1162  0213                     	;# 
  1163  0213                     	;# 
  1164  0214                     	;# 
  1165  0214                     	;# 
  1166  0215                     	;# 
  1167  0215                     	;# 
  1168  0215                     	;# 
  1169  0216                     	;# 
  1170  0216                     	;# 
  1171  0217                     	;# 
  1172  0217                     	;# 
  1173  0291                     	;# 
  1174  0291                     	;# 
  1175  0292                     	;# 
  1176  0293                     	;# 
  1177  0298                     	;# 
  1178  0298                     	;# 
  1179  0299                     	;# 
  1180  029A                     	;# 
  1181  0394                     	;# 
  1182  0395                     	;# 
  1183  0396                     	;# 
  1184  0FE4                     	;# 
  1185  0FE5                     	;# 
  1186  0FE6                     	;# 
  1187  0FE7                     	;# 
  1188  0FE8                     	;# 
  1189  0FE9                     	;# 
  1190  0FEA                     	;# 
  1191  0FEB                     	;# 
  1192  0FED                     	;# 
  1193  0FEE                     	;# 
  1194  0FEF                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0008                     	;# 
  1204  0009                     	;# 
  1205  000A                     	;# 
  1206  000B                     	;# 
  1207  000C                     	;# 
  1208  000D                     	;# 
  1209  000E                     	;# 
  1210  0010                     	;# 
  1211  0011                     	;# 
  1212  0012                     	;# 
  1213  0015                     	;# 
  1214  0016                     	;# 
  1215  0016                     	;# 
  1216  0017                     	;# 
  1217  0018                     	;# 
  1218  0019                     	;# 
  1219  001A                     	;# 
  1220  001B                     	;# 
  1221  001C                     	;# 
  1222  008C                     	;# 
  1223  008D                     	;# 
  1224  008E                     	;# 
  1225  0090                     	;# 
  1226  0091                     	;# 
  1227  0092                     	;# 
  1228  0095                     	;# 
  1229  0096                     	;# 
  1230  0097                     	;# 
  1231  0099                     	;# 
  1232  009A                     	;# 
  1233  009B                     	;# 
  1234  009B                     	;# 
  1235  009C                     	;# 
  1236  009D                     	;# 
  1237  009E                     	;# 
  1238  010C                     	;# 
  1239  010D                     	;# 
  1240  010E                     	;# 
  1241  0116                     	;# 
  1242  0117                     	;# 
  1243  011D                     	;# 
  1244  018C                     	;# 
  1245  018D                     	;# 
  1246  018E                     	;# 
  1247  0191                     	;# 
  1248  0191                     	;# 
  1249  0192                     	;# 
  1250  0193                     	;# 
  1251  0193                     	;# 
  1252  0194                     	;# 
  1253  0195                     	;# 
  1254  0196                     	;# 
  1255  0197                     	;# 
  1256  0199                     	;# 
  1257  019A                     	;# 
  1258  019B                     	;# 
  1259  019B                     	;# 
  1260  019B                     	;# 
  1261  019B                     	;# 
  1262  019C                     	;# 
  1263  019C                     	;# 
  1264  019D                     	;# 
  1265  019E                     	;# 
  1266  019F                     	;# 
  1267  020D                     	;# 
  1268  0210                     	;# 
  1269  0211                     	;# 
  1270  0211                     	;# 
  1271  0212                     	;# 
  1272  0212                     	;# 
  1273  0213                     	;# 
  1274  0213                     	;# 
  1275  0214                     	;# 
  1276  0214                     	;# 
  1277  0215                     	;# 
  1278  0215                     	;# 
  1279  0215                     	;# 
  1280  0216                     	;# 
  1281  0216                     	;# 
  1282  0217                     	;# 
  1283  0217                     	;# 
  1284  0291                     	;# 
  1285  0291                     	;# 
  1286  0292                     	;# 
  1287  0293                     	;# 
  1288  0298                     	;# 
  1289  0298                     	;# 
  1290  0299                     	;# 
  1291  029A                     	;# 
  1292  0394                     	;# 
  1293  0395                     	;# 
  1294  0396                     	;# 
  1295  0FE4                     	;# 
  1296  0FE5                     	;# 
  1297  0FE6                     	;# 
  1298  0FE7                     	;# 
  1299  0FE8                     	;# 
  1300  0FE9                     	;# 
  1301  0FEA                     	;# 
  1302  0FEB                     	;# 
  1303  0FED                     	;# 
  1304  0FEE                     	;# 
  1305  0FEF                     	;# 
  1306  0000                     	;# 
  1307  0001                     	;# 
  1308  0002                     	;# 
  1309  0003                     	;# 
  1310  0004                     	;# 
  1311  0005                     	;# 
  1312  0006                     	;# 
  1313  0007                     	;# 
  1314  0008                     	;# 
  1315  0009                     	;# 
  1316  000A                     	;# 
  1317  000B                     	;# 
  1318  000C                     	;# 
  1319  000D                     	;# 
  1320  000E                     	;# 
  1321  0010                     	;# 
  1322  0011                     	;# 
  1323  0012                     	;# 
  1324  0015                     	;# 
  1325  0016                     	;# 
  1326  0016                     	;# 
  1327  0017                     	;# 
  1328  0018                     	;# 
  1329  0019                     	;# 
  1330  001A                     	;# 
  1331  001B                     	;# 
  1332  001C                     	;# 
  1333  008C                     	;# 
  1334  008D                     	;# 
  1335  008E                     	;# 
  1336  0090                     	;# 
  1337  0091                     	;# 
  1338  0092                     	;# 
  1339  0095                     	;# 
  1340  0096                     	;# 
  1341  0097                     	;# 
  1342  0099                     	;# 
  1343  009A                     	;# 
  1344  009B                     	;# 
  1345  009B                     	;# 
  1346  009C                     	;# 
  1347  009D                     	;# 
  1348  009E                     	;# 
  1349  010C                     	;# 
  1350  010D                     	;# 
  1351  010E                     	;# 
  1352  0116                     	;# 
  1353  0117                     	;# 
  1354  011D                     	;# 
  1355  018C                     	;# 
  1356  018D                     	;# 
  1357  018E                     	;# 
  1358  0191                     	;# 
  1359  0191                     	;# 
  1360  0192                     	;# 
  1361  0193                     	;# 
  1362  0193                     	;# 
  1363  0194                     	;# 
  1364  0195                     	;# 
  1365  0196                     	;# 
  1366  0197                     	;# 
  1367  0199                     	;# 
  1368  019A                     	;# 
  1369  019B                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019C                     	;# 
  1374  019C                     	;# 
  1375  019D                     	;# 
  1376  019E                     	;# 
  1377  019F                     	;# 
  1378  020D                     	;# 
  1379  0210                     	;# 
  1380  0211                     	;# 
  1381  0211                     	;# 
  1382  0212                     	;# 
  1383  0212                     	;# 
  1384  0213                     	;# 
  1385  0213                     	;# 
  1386  0214                     	;# 
  1387  0214                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0215                     	;# 
  1391  0216                     	;# 
  1392  0216                     	;# 
  1393  0217                     	;# 
  1394  0217                     	;# 
  1395  0291                     	;# 
  1396  0291                     	;# 
  1397  0292                     	;# 
  1398  0293                     	;# 
  1399  0298                     	;# 
  1400  0298                     	;# 
  1401  0299                     	;# 
  1402  029A                     	;# 
  1403  0394                     	;# 
  1404  0395                     	;# 
  1405  0396                     	;# 
  1406  0FE4                     	;# 
  1407  0FE5                     	;# 
  1408  0FE6                     	;# 
  1409  0FE7                     	;# 
  1410  0FE8                     	;# 
  1411  0FE9                     	;# 
  1412  0FEA                     	;# 
  1413  0FEB                     	;# 
  1414  0FED                     	;# 
  1415  0FEE                     	;# 
  1416  0FEF                     	;# 
  1417  0000                     	;# 
  1418  0001                     	;# 
  1419  0002                     	;# 
  1420  0003                     	;# 
  1421  0004                     	;# 
  1422  0005                     	;# 
  1423  0006                     	;# 
  1424  0007                     	;# 
  1425  0008                     	;# 
  1426  0009                     	;# 
  1427  000A                     	;# 
  1428  000B                     	;# 
  1429  000C                     	;# 
  1430  000D                     	;# 
  1431  000E                     	;# 
  1432  0010                     	;# 
  1433  0011                     	;# 
  1434  0012                     	;# 
  1435  0015                     	;# 
  1436  0016                     	;# 
  1437  0016                     	;# 
  1438  0017                     	;# 
  1439  0018                     	;# 
  1440  0019                     	;# 
  1441  001A                     	;# 
  1442  001B                     	;# 
  1443  001C                     	;# 
  1444  008C                     	;# 
  1445  008D                     	;# 
  1446  008E                     	;# 
  1447  0090                     	;# 
  1448  0091                     	;# 
  1449  0092                     	;# 
  1450  0095                     	;# 
  1451  0096                     	;# 
  1452  0097                     	;# 
  1453  0099                     	;# 
  1454  009A                     	;# 
  1455  009B                     	;# 
  1456  009B                     	;# 
  1457  009C                     	;# 
  1458  009D                     	;# 
  1459  009E                     	;# 
  1460  010C                     	;# 
  1461  010D                     	;# 
  1462  010E                     	;# 
  1463  0116                     	;# 
  1464  0117                     	;# 
  1465  011D                     	;# 
  1466  018C                     	;# 
  1467  018D                     	;# 
  1468  018E                     	;# 
  1469  0191                     	;# 
  1470  0191                     	;# 
  1471  0192                     	;# 
  1472  0193                     	;# 
  1473  0193                     	;# 
  1474  0194                     	;# 
  1475  0195                     	;# 
  1476  0196                     	;# 
  1477  0197                     	;# 
  1478  0199                     	;# 
  1479  019A                     	;# 
  1480  019B                     	;# 
  1481  019B                     	;# 
  1482  019B                     	;# 
  1483  019B                     	;# 
  1484  019C                     	;# 
  1485  019C                     	;# 
  1486  019D                     	;# 
  1487  019E                     	;# 
  1488  019F                     	;# 
  1489  020D                     	;# 
  1490  0210                     	;# 
  1491  0211                     	;# 
  1492  0211                     	;# 
  1493  0212                     	;# 
  1494  0212                     	;# 
  1495  0213                     	;# 
  1496  0213                     	;# 
  1497  0214                     	;# 
  1498  0214                     	;# 
  1499  0215                     	;# 
  1500  0215                     	;# 
  1501  0215                     	;# 
  1502  0216                     	;# 
  1503  0216                     	;# 
  1504  0217                     	;# 
  1505  0217                     	;# 
  1506  0291                     	;# 
  1507  0291                     	;# 
  1508  0292                     	;# 
  1509  0293                     	;# 
  1510  0298                     	;# 
  1511  0298                     	;# 
  1512  0299                     	;# 
  1513  029A                     	;# 
  1514  0394                     	;# 
  1515  0395                     	;# 
  1516  0396                     	;# 
  1517  0FE4                     	;# 
  1518  0FE5                     	;# 
  1519  0FE6                     	;# 
  1520  0FE7                     	;# 
  1521  0FE8                     	;# 
  1522  0FE9                     	;# 
  1523  0FEA                     	;# 
  1524  0FEB                     	;# 
  1525  0FED                     	;# 
  1526  0FEE                     	;# 
  1527  0FEF                     	;# 
  1528  0000                     	;# 
  1529  0001                     	;# 
  1530  0002                     	;# 
  1531  0003                     	;# 
  1532  0004                     	;# 
  1533  0005                     	;# 
  1534  0006                     	;# 
  1535  0007                     	;# 
  1536  0008                     	;# 
  1537  0009                     	;# 
  1538  000A                     	;# 
  1539  000B                     	;# 
  1540  000C                     	;# 
  1541  000D                     	;# 
  1542  000E                     	;# 
  1543  0010                     	;# 
  1544  0011                     	;# 
  1545  0012                     	;# 
  1546  0015                     	;# 
  1547  0016                     	;# 
  1548  0016                     	;# 
  1549  0017                     	;# 
  1550  0018                     	;# 
  1551  0019                     	;# 
  1552  001A                     	;# 
  1553  001B                     	;# 
  1554  001C                     	;# 
  1555  008C                     	;# 
  1556  008D                     	;# 
  1557  008E                     	;# 
  1558  0090                     	;# 
  1559  0091                     	;# 
  1560  0092                     	;# 
  1561  0095                     	;# 
  1562  0096                     	;# 
  1563  0097                     	;# 
  1564  0099                     	;# 
  1565  009A                     	;# 
  1566  009B                     	;# 
  1567  009B                     	;# 
  1568  009C                     	;# 
  1569  009D                     	;# 
  1570  009E                     	;# 
  1571  010C                     	;# 
  1572  010D                     	;# 
  1573  010E                     	;# 
  1574  0116                     	;# 
  1575  0117                     	;# 
  1576  011D                     	;# 
  1577  018C                     	;# 
  1578  018D                     	;# 
  1579  018E                     	;# 
  1580  0191                     	;# 
  1581  0191                     	;# 
  1582  0192                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0194                     	;# 
  1586  0195                     	;# 
  1587  0196                     	;# 
  1588  0197                     	;# 
  1589  0199                     	;# 
  1590  019A                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019C                     	;# 
  1596  019C                     	;# 
  1597  019D                     	;# 
  1598  019E                     	;# 
  1599  019F                     	;# 
  1600  020D                     	;# 
  1601  0210                     	;# 
  1602  0211                     	;# 
  1603  0211                     	;# 
  1604  0212                     	;# 
  1605  0212                     	;# 
  1606  0213                     	;# 
  1607  0213                     	;# 
  1608  0214                     	;# 
  1609  0214                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0215                     	;# 
  1613  0216                     	;# 
  1614  0216                     	;# 
  1615  0217                     	;# 
  1616  0217                     	;# 
  1617  0291                     	;# 
  1618  0291                     	;# 
  1619  0292                     	;# 
  1620  0293                     	;# 
  1621  0298                     	;# 
  1622  0298                     	;# 
  1623  0299                     	;# 
  1624  029A                     	;# 
  1625  0394                     	;# 
  1626  0395                     	;# 
  1627  0396                     	;# 
  1628  0FE4                     	;# 
  1629  0FE5                     	;# 
  1630  0FE6                     	;# 
  1631  0FE7                     	;# 
  1632  0FE8                     	;# 
  1633  0FE9                     	;# 
  1634  0FEA                     	;# 
  1635  0FEB                     	;# 
  1636  0FED                     	;# 
  1637  0FEE                     	;# 
  1638  0FEF                     	;# 
  1639  0000                     	;# 
  1640  0001                     	;# 
  1641  0002                     	;# 
  1642  0003                     	;# 
  1643  0004                     	;# 
  1644  0005                     	;# 
  1645  0006                     	;# 
  1646  0007                     	;# 
  1647  0008                     	;# 
  1648  0009                     	;# 
  1649  000A                     	;# 
  1650  000B                     	;# 
  1651  000C                     	;# 
  1652  000D                     	;# 
  1653  000E                     	;# 
  1654  0010                     	;# 
  1655  0011                     	;# 
  1656  0012                     	;# 
  1657  0015                     	;# 
  1658  0016                     	;# 
  1659  0016                     	;# 
  1660  0017                     	;# 
  1661  0018                     	;# 
  1662  0019                     	;# 
  1663  001A                     	;# 
  1664  001B                     	;# 
  1665  001C                     	;# 
  1666  008C                     	;# 
  1667  008D                     	;# 
  1668  008E                     	;# 
  1669  0090                     	;# 
  1670  0091                     	;# 
  1671  0092                     	;# 
  1672  0095                     	;# 
  1673  0096                     	;# 
  1674  0097                     	;# 
  1675  0099                     	;# 
  1676  009A                     	;# 
  1677  009B                     	;# 
  1678  009B                     	;# 
  1679  009C                     	;# 
  1680  009D                     	;# 
  1681  009E                     	;# 
  1682  010C                     	;# 
  1683  010D                     	;# 
  1684  010E                     	;# 
  1685  0116                     	;# 
  1686  0117                     	;# 
  1687  011D                     	;# 
  1688  018C                     	;# 
  1689  018D                     	;# 
  1690  018E                     	;# 
  1691  0191                     	;# 
  1692  0191                     	;# 
  1693  0192                     	;# 
  1694  0193                     	;# 
  1695  0193                     	;# 
  1696  0194                     	;# 
  1697  0195                     	;# 
  1698  0196                     	;# 
  1699  0197                     	;# 
  1700  0199                     	;# 
  1701  019A                     	;# 
  1702  019B                     	;# 
  1703  019B                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019C                     	;# 
  1708  019D                     	;# 
  1709  019E                     	;# 
  1710  019F                     	;# 
  1711  020D                     	;# 
  1712  0210                     	;# 
  1713  0211                     	;# 
  1714  0211                     	;# 
  1715  0212                     	;# 
  1716  0212                     	;# 
  1717  0213                     	;# 
  1718  0213                     	;# 
  1719  0214                     	;# 
  1720  0214                     	;# 
  1721  0215                     	;# 
  1722  0215                     	;# 
  1723  0215                     	;# 
  1724  0216                     	;# 
  1725  0216                     	;# 
  1726  0217                     	;# 
  1727  0217                     	;# 
  1728  0291                     	;# 
  1729  0291                     	;# 
  1730  0292                     	;# 
  1731  0293                     	;# 
  1732  0298                     	;# 
  1733  0298                     	;# 
  1734  0299                     	;# 
  1735  029A                     	;# 
  1736  0394                     	;# 
  1737  0395                     	;# 
  1738  0396                     	;# 
  1739  0FE4                     	;# 
  1740  0FE5                     	;# 
  1741  0FE6                     	;# 
  1742  0FE7                     	;# 
  1743  0FE8                     	;# 
  1744  0FE9                     	;# 
  1745  0FEA                     	;# 
  1746  0FEB                     	;# 
  1747  0FED                     	;# 
  1748  0FEE                     	;# 
  1749  0FEF                     	;# 
  1750  0000                     	;# 
  1751  0001                     	;# 
  1752  0002                     	;# 
  1753  0003                     	;# 
  1754  0004                     	;# 
  1755  0005                     	;# 
  1756  0006                     	;# 
  1757  0007                     	;# 
  1758  0008                     	;# 
  1759  0009                     	;# 
  1760  000A                     	;# 
  1761  000B                     	;# 
  1762  000C                     	;# 
  1763  000D                     	;# 
  1764  000E                     	;# 
  1765  0010                     	;# 
  1766  0011                     	;# 
  1767  0012                     	;# 
  1768  0015                     	;# 
  1769  0016                     	;# 
  1770  0016                     	;# 
  1771  0017                     	;# 
  1772  0018                     	;# 
  1773  0019                     	;# 
  1774  001A                     	;# 
  1775  001B                     	;# 
  1776  001C                     	;# 
  1777  008C                     	;# 
  1778  008D                     	;# 
  1779  008E                     	;# 
  1780  0090                     	;# 
  1781  0091                     	;# 
  1782  0092                     	;# 
  1783  0095                     	;# 
  1784  0096                     	;# 
  1785  0097                     	;# 
  1786  0099                     	;# 
  1787  009A                     	;# 
  1788  009B                     	;# 
  1789  009B                     	;# 
  1790  009C                     	;# 
  1791  009D                     	;# 
  1792  009E                     	;# 
  1793  010C                     	;# 
  1794  010D                     	;# 
  1795  010E                     	;# 
  1796  0116                     	;# 
  1797  0117                     	;# 
  1798  011D                     	;# 
  1799  018C                     	;# 
  1800  018D                     	;# 
  1801  018E                     	;# 
  1802  0191                     	;# 
  1803  0191                     	;# 
  1804  0192                     	;# 
  1805  0193                     	;# 
  1806  0193                     	;# 
  1807  0194                     	;# 
  1808  0195                     	;# 
  1809  0196                     	;# 
  1810  0197                     	;# 
  1811  0199                     	;# 
  1812  019A                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019B                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019D                     	;# 
  1820  019E                     	;# 
  1821  019F                     	;# 
  1822  020D                     	;# 
  1823  0210                     	;# 
  1824  0211                     	;# 
  1825  0211                     	;# 
  1826  0212                     	;# 
  1827  0212                     	;# 
  1828  0213                     	;# 
  1829  0213                     	;# 
  1830  0214                     	;# 
  1831  0214                     	;# 
  1832  0215                     	;# 
  1833  0215                     	;# 
  1834  0215                     	;# 
  1835  0216                     	;# 
  1836  0216                     	;# 
  1837  0217                     	;# 
  1838  0217                     	;# 
  1839  0291                     	;# 
  1840  0291                     	;# 
  1841  0292                     	;# 
  1842  0293                     	;# 
  1843  0298                     	;# 
  1844  0298                     	;# 
  1845  0299                     	;# 
  1846  029A                     	;# 
  1847  0394                     	;# 
  1848  0395                     	;# 
  1849  0396                     	;# 
  1850  0FE4                     	;# 
  1851  0FE5                     	;# 
  1852  0FE6                     	;# 
  1853  0FE7                     	;# 
  1854  0FE8                     	;# 
  1855  0FE9                     	;# 
  1856  0FEA                     	;# 
  1857  0FEB                     	;# 
  1858  0FED                     	;# 
  1859  0FEE                     	;# 
  1860  0FEF                     	;# 
  1861  0000                     	;# 
  1862  0001                     	;# 
  1863  0002                     	;# 
  1864  0003                     	;# 
  1865  0004                     	;# 
  1866  0005                     	;# 
  1867  0006                     	;# 
  1868  0007                     	;# 
  1869  0008                     	;# 
  1870  0009                     	;# 
  1871  000A                     	;# 
  1872  000B                     	;# 
  1873  000C                     	;# 
  1874  000D                     	;# 
  1875  000E                     	;# 
  1876  0010                     	;# 
  1877  0011                     	;# 
  1878  0012                     	;# 
  1879  0015                     	;# 
  1880  0016                     	;# 
  1881  0016                     	;# 
  1882  0017                     	;# 
  1883  0018                     	;# 
  1884  0019                     	;# 
  1885  001A                     	;# 
  1886  001B                     	;# 
  1887  001C                     	;# 
  1888  008C                     	;# 
  1889  008D                     	;# 
  1890  008E                     	;# 
  1891  0090                     	;# 
  1892  0091                     	;# 
  1893  0092                     	;# 
  1894  0095                     	;# 
  1895  0096                     	;# 
  1896  0097                     	;# 
  1897  0099                     	;# 
  1898  009A                     	;# 
  1899  009B                     	;# 
  1900  009B                     	;# 
  1901  009C                     	;# 
  1902  009D                     	;# 
  1903  009E                     	;# 
  1904  010C                     	;# 
  1905  010D                     	;# 
  1906  010E                     	;# 
  1907  0116                     	;# 
  1908  0117                     	;# 
  1909  011D                     	;# 
  1910  018C                     	;# 
  1911  018D                     	;# 
  1912  018E                     	;# 
  1913  0191                     	;# 
  1914  0191                     	;# 
  1915  0192                     	;# 
  1916  0193                     	;# 
  1917  0193                     	;# 
  1918  0194                     	;# 
  1919  0195                     	;# 
  1920  0196                     	;# 
  1921  0197                     	;# 
  1922  0199                     	;# 
  1923  019A                     	;# 
  1924  019B                     	;# 
  1925  019B                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019C                     	;# 
  1929  019C                     	;# 
  1930  019D                     	;# 
  1931  019E                     	;# 
  1932  019F                     	;# 
  1933  020D                     	;# 
  1934  0210                     	;# 
  1935  0211                     	;# 
  1936  0211                     	;# 
  1937  0212                     	;# 
  1938  0212                     	;# 
  1939  0213                     	;# 
  1940  0213                     	;# 
  1941  0214                     	;# 
  1942  0214                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0215                     	;# 
  1946  0216                     	;# 
  1947  0216                     	;# 
  1948  0217                     	;# 
  1949  0217                     	;# 
  1950  0291                     	;# 
  1951  0291                     	;# 
  1952  0292                     	;# 
  1953  0293                     	;# 
  1954  0298                     	;# 
  1955  0298                     	;# 
  1956  0299                     	;# 
  1957  029A                     	;# 
  1958  0394                     	;# 
  1959  0395                     	;# 
  1960  0396                     	;# 
  1961  0FE4                     	;# 
  1962  0FE5                     	;# 
  1963  0FE6                     	;# 
  1964  0FE7                     	;# 
  1965  0FE8                     	;# 
  1966  0FE9                     	;# 
  1967  0FEA                     	;# 
  1968  0FEB                     	;# 
  1969  0FED                     	;# 
  1970  0FEE                     	;# 
  1971  0FEF                     	;# 
  1972  0000                     	;# 
  1973  0001                     	;# 
  1974  0002                     	;# 
  1975  0003                     	;# 
  1976  0004                     	;# 
  1977  0005                     	;# 
  1978  0006                     	;# 
  1979  0007                     	;# 
  1980  0008                     	;# 
  1981  0009                     	;# 
  1982  000A                     	;# 
  1983  000B                     	;# 
  1984  000C                     	;# 
  1985  000D                     	;# 
  1986  000E                     	;# 
  1987  0010                     	;# 
  1988  0011                     	;# 
  1989  0012                     	;# 
  1990  0015                     	;# 
  1991  0016                     	;# 
  1992  0016                     	;# 
  1993  0017                     	;# 
  1994  0018                     	;# 
  1995  0019                     	;# 
  1996  001A                     	;# 
  1997  001B                     	;# 
  1998  001C                     	;# 
  1999  008C                     	;# 
  2000  008D                     	;# 
  2001  008E                     	;# 
  2002  0090                     	;# 
  2003  0091                     	;# 
  2004  0092                     	;# 
  2005  0095                     	;# 
  2006  0096                     	;# 
  2007  0097                     	;# 
  2008  0099                     	;# 
  2009  009A                     	;# 
  2010  009B                     	;# 
  2011  009B                     	;# 
  2012  009C                     	;# 
  2013  009D                     	;# 
  2014  009E                     	;# 
  2015  010C                     	;# 
  2016  010D                     	;# 
  2017  010E                     	;# 
  2018  0116                     	;# 
  2019  0117                     	;# 
  2020  011D                     	;# 
  2021  018C                     	;# 
  2022  018D                     	;# 
  2023  018E                     	;# 
  2024  0191                     	;# 
  2025  0191                     	;# 
  2026  0192                     	;# 
  2027  0193                     	;# 
  2028  0193                     	;# 
  2029  0194                     	;# 
  2030  0195                     	;# 
  2031  0196                     	;# 
  2032  0197                     	;# 
  2033  0199                     	;# 
  2034  019A                     	;# 
  2035  019B                     	;# 
  2036  019B                     	;# 
  2037  019B                     	;# 
  2038  019B                     	;# 
  2039  019C                     	;# 
  2040  019C                     	;# 
  2041  019D                     	;# 
  2042  019E                     	;# 
  2043  019F                     	;# 
  2044  020D                     	;# 
  2045  0210                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0216                     	;# 
  2058  0216                     	;# 
  2059  0217                     	;# 
  2060  0217                     	;# 
  2061  0291                     	;# 
  2062  0291                     	;# 
  2063  0292                     	;# 
  2064  0293                     	;# 
  2065  0298                     	;# 
  2066  0298                     	;# 
  2067  0299                     	;# 
  2068  029A                     	;# 
  2069  0394                     	;# 
  2070  0395                     	;# 
  2071  0396                     	;# 
  2072  0FE4                     	;# 
  2073  0FE5                     	;# 
  2074  0FE6                     	;# 
  2075  0FE7                     	;# 
  2076  0FE8                     	;# 
  2077  0FE9                     	;# 
  2078  0FEA                     	;# 
  2079  0FEB                     	;# 
  2080  0FED                     	;# 
  2081  0FEE                     	;# 
  2082  0FEF                     	;# 
  2083                           
  2084                           	psect	idataBANK1
  2085  0838                     __pidataBANK1:	
  2086                           
  2087                           ;initializer for Bq32k_Time_Init@F2018
  2088  0838  3401               	retlw	1
  2089  0839  3444               	retlw	68
  2090  083A  3410               	retlw	16
  2091  083B  3402               	retlw	2
  2092  083C  3418               	retlw	24
  2093  083D  3407               	retlw	7
  2094  083E  3416               	retlw	22
  2095  083F  3400               	retlw	0
  2096  0840  3400               	retlw	0
  2097  0841  3400               	retlw	0
  2098                           
  2099                           	psect	stringtext
  2100  1000                     __pstringtext:	
  2101  1000                     _Dis_TAB:	
  2102  1000  34D7               	retlw	215
  2103  1001  3450               	retlw	80
  2104  1002  34B5               	retlw	181
  2105  1003  34F1               	retlw	241
  2106  1004  3472               	retlw	114
  2107  1005  34E3               	retlw	227
  2108  1006  34E7               	retlw	231
  2109  1007  3451               	retlw	81
  2110  1008  34F7               	retlw	247
  2111  1009  34F3               	retlw	243
  2112  100A  3477               	retlw	119
  2113  100B  34E6               	retlw	230
  2114  100C  3487               	retlw	135
  2115  100D  34F4               	retlw	244
  2116  100E  34A7               	retlw	167
  2117  100F  3427               	retlw	39
  2118  1010  3457               	retlw	87
  2119  1011  3420               	retlw	32
  2120  1012  3420               	retlw	32
  2121  1013  3420               	retlw	32
  2122  1014  3420               	retlw	32
  2123  1015                     __end_of_Dis_TAB:	
  2124                           
  2125                           	psect	nvBANK1
  2126  00EF                     __pnvBANK1:	
  2127  00EF                     _timer0ReloadVal:	
  2128  00EF                     	ds	1
  2129  000B                     _INTCONbits	set	11
  2130  0011                     _PIR1bits	set	17
  2131  0015                     _TMR0	set	21
  2132  0067                     _RA7	set	103
  2133  0069                     _RB1	set	105
  2134  006B                     _RB3	set	107
  2135  006D                     _RB5	set	109
  2136  009D                     _ADCON0	set	157
  2137  009D                     _ADCON0bits	set	157
  2138  009E                     _ADCON1	set	158
  2139  009C                     _ADRESH	set	156
  2140  009B                     _ADRESL	set	155
  2141  0095                     _OPTION_REG	set	149
  2142  0095                     _OPTION_REGbits	set	149
  2143  0099                     _OSCCON	set	153
  2144  009A                     _OSCSTAT	set	154
  2145  008C                     _TRISA	set	140
  2146  008D                     _TRISB	set	141
  2147  008E                     _TRISC	set	142
  2148  04B8                     _SWDTEN	set	1208
  2149  0469                     _TRISB1	set	1129
  2150  046B                     _TRISB3	set	1131
  2151  04B9                     _WDTPS0	set	1209
  2152  04BA                     _WDTPS1	set	1210
  2153  04BB                     _WDTPS2	set	1211
  2154  04BC                     _WDTPS3	set	1212
  2155  04BD                     _WDTPS4	set	1213
  2156  011D                     _APFCON	set	285
  2157  0117                     _FVRCON	set	279
  2158  0117                     _FVRCONbits	set	279
  2159  010C                     _LATA	set	268
  2160  010D                     _LATB	set	269
  2161  010E                     _LATC	set	270
  2162  0860                     _LATA0	set	2144
  2163  0861                     _LATA1	set	2145
  2164  0862                     _LATA2	set	2146
  2165  0863                     _LATA3	set	2147
  2166  0864                     _LATA4	set	2148
  2167  0865                     _LATA5	set	2149
  2168  0866                     _LATA6	set	2150
  2169  0868                     _LATB0	set	2152
  2170  0869                     _LATB1	set	2153
  2171  0870                     _LATC0	set	2160
  2172  0871                     _LATC1	set	2161
  2173  0872                     _LATC2	set	2162
  2174  018C                     _ANSELA	set	396
  2175  018D                     _ANSELB	set	397
  2176  018E                     _ANSELC	set	398
  2177  019F                     _BAUDCON	set	415
  2178  0192                     _PMADRH	set	402
  2179  0191                     _PMADRL	set	401
  2180  0195                     _PMCON1bits	set	405
  2181  0196                     _PMCON2	set	406
  2182  0194                     _PMDATH	set	404
  2183  0193                     _PMDATL	set	403
  2184  0199                     _RCREG	set	409
  2185  019D                     _RCSTA	set	413
  2186  019D                     _RCSTAbits	set	413
  2187  019C                     _SPBRGH	set	412
  2188  019B                     _SPBRGL	set	411
  2189  019A                     _TXREG	set	410
  2190  019E                     _TXSTA	set	414
  2191  0212                     _SSP1ADD	set	530
  2192  0215                     _SSP1CON1	set	533
  2193  0215                     _SSP1CON1bits	set	533
  2194  0214                     _SSP1STAT	set	532
  2195  0214                     _SSP1STATbits	set	532
  2196  0211                     _SSPBUF	set	529
  2197  020D                     _WPUB	set	525
  2198  0210                     _WPUE	set	528
  2199                           
  2200                           ; #config settings
  2201  0000                     
  2202                           	psect	cinit
  2203  0015                     start_initialization:	
  2204  0015                     __initialization:	
  2205                           
  2206                           ; Clear objects allocated to COMMON
  2207  0015  01F8               	clrf	__pbssCOMMON& (0+127)
  2208  0016  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2209  0017  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2210                           
  2211                           ; Clear objects allocated to BANK0
  2212  0018  3065               	movlw	low __pbssBANK0
  2213  0019  0084               	movwf	4
  2214  001A  3000               	movlw	high __pbssBANK0
  2215  001B  0085               	movwf	5
  2216  001C  3009               	movlw	9
  2217  001D  3188  2019  3180   	fcall	clear_ram0
  2218                           
  2219                           ; Clear objects allocated to BANK1
  2220  0020  30A0               	movlw	low __pbssBANK1
  2221  0021  0084               	movwf	4
  2222  0022  3000               	movlw	high __pbssBANK1
  2223  0023  0085               	movwf	5
  2224  0024  3045               	movlw	69
  2225  0025  3188  2019  3180   	fcall	clear_ram0
  2226                           
  2227                           ; Clear objects allocated to BANK2
  2228  0028  3020               	movlw	low __pbssBANK2
  2229  0029  0084               	movwf	4
  2230  002A  3001               	movlw	high __pbssBANK2
  2231  002B  0085               	movwf	5
  2232  002C  3040               	movlw	64
  2233  002D  3188  2019  3180   	fcall	clear_ram0
  2234                           
  2235                           ; Initialize objects allocated to BANK1
  2236  0030  3038               	movlw	low __pidataBANK1
  2237  0031  0084               	movwf	4
  2238  0032  3088               	movlw	(high __pidataBANK1)| (0+128)
  2239  0033  0085               	movwf	5
  2240  0034  30E5               	movlw	low __pdataBANK1
  2241  0035  0086               	movwf	6
  2242  0036  3000               	movlw	high __pdataBANK1
  2243  0037  0087               	movwf	7
  2244  0038  300A               	movlw	10
  2245  0039  3188  2013         	fcall	init_ram
  2246  003B                     end_of_initialization:	
  2247                           ;End of C runtime variable initialization code
  2248                           
  2249  003B                     __end_of__initialization:	
  2250  003B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2251  003C  0020               	movlb	0
  2252  003D  3183  2BA9         	ljmp	_main	;jump to C main() function
  2253                           
  2254                           	psect	bssCOMMON
  2255  0078                     __pbssCOMMON:	
  2256  0078                     _CH2_temperature:	
  2257  0078                     	ds	2
  2258  007A                     _uch_cr0:	
  2259  007A                     	ds	1
  2260                           
  2261                           	psect	bssBANK0
  2262  0065                     __pbssBANK0:	
  2263  0065                     _temperature_value:	
  2264  0065                     	ds	4
  2265  0069                     _CH1_temperature:	
  2266  0069                     	ds	2
  2267  006B                     _Record_flag:	
  2268  006B                     	ds	1
  2269  006C                     _temperature_decimal:	
  2270  006C                     	ds	1
  2271  006D                     _time_count:	
  2272  006D                     	ds	1
  2273                           
  2274                           	psect	bssBANK1
  2275  00A0                     __pbssBANK1:	
  2276  00A0                     Two_Display@F2123:	
  2277  00A0                     	ds	4
  2278  00A4                     err_Display@F2126:	
  2279  00A4                     	ds	4
  2280  00A8                     time_Display@F2129:	
  2281  00A8                     	ds	4
  2282  00AC                     TMR0_ISR@CountCallBack:	
  2283  00AC                     	ds	2
  2284  00AE                     _Cur_Save_Index:	
  2285  00AE                     	ds	2
  2286  00B0                     _Cur_temperature:	
  2287  00B0                     	ds	2
  2288  00B2                     _temperature_int:	
  2289  00B2                     	ds	2
  2290  00B4                     _CH1_state:	
  2291  00B4                     	ds	1
  2292  00B5                     _CH2_state:	
  2293  00B5                     	ds	1
  2294  00B6                     _Cur_temperature_time_ch1:	
  2295  00B6                     	ds	1
  2296  00B7                     _Cur_temperature_time_ch2:	
  2297  00B7                     	ds	1
  2298  00B8                     _LongPressSec:	
  2299  00B8                     	ds	1
  2300  00B9                     _MAX31856Sec:	
  2301  00B9                     	ds	1
  2302  00BA                     _temperature_sign:	
  2303  00BA                     	ds	1
  2304  00BB                     _tmr_flag:	
  2305  00BB                     	ds	1
  2306  00BC                     _uch_cjth:	
  2307  00BC                     	ds	1
  2308  00BD                     _uch_cjtl:	
  2309  00BD                     	ds	1
  2310  00BE                     _uch_cr1:	
  2311  00BE                     	ds	1
  2312  00BF                     _uch_ltcbh:	
  2313  00BF                     	ds	1
  2314  00C0                     _uch_ltcbl:	
  2315  00C0                     	ds	1
  2316  00C1                     _uch_ltcbm:	
  2317  00C1                     	ds	1
  2318  00C2                     _uch_mask:	
  2319  00C2                     	ds	1
  2320  00C3                     _uch_sr:	
  2321  00C3                     	ds	1
  2322  00C4                     _uch_reg:	
  2323  00C4                     	ds	8
  2324  00CC                     _rtc_save_ch1:	
  2325  00CC                     	ds	7
  2326  00D3                     _rtc_save_ch2:	
  2327  00D3                     	ds	7
  2328  00DA                     _rtc_tm:	
  2329  00DA                     	ds	7
  2330  00E1                     _display_buff:	
  2331  00E1                     	ds	4
  2332                           
  2333                           	psect	dataBANK1
  2334  00E5                     __pdataBANK1:	
  2335  00E5                     Bq32k_Time_Init@F2018:	
  2336  00E5                     	ds	10
  2337                           
  2338                           	psect	bssBANK2
  2339  0120                     __pbssBANK2:	
  2340  0120                     _Flash_buff:	
  2341  0120                     	ds	64
  2342                           
  2343                           	psect	clrtext
  2344  0819                     clear_ram0:	
  2345                           ;	Called with FSR0 containing the base address, and
  2346                           ;	WREG with the size to clear
  2347                           
  2348  0819  0064               	clrwdt	;clear the watchdog before getting into this loop
  2349  081A                     clrloop0:	
  2350  081A  0180               	clrf	0	;clear RAM location pointed to by FSR
  2351  081B  3101               	addfsr 0,1
  2352  081C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2353  081D  281A               	goto	clrloop0	;have we reached the end yet?
  2354  081E  3400               	retlw	0	;all done for this memory range, return
  2355                           
  2356                           	psect	inittext
  2357  0813                     init_ram:	
  2358  0813  00FE               	movwf	126
  2359  0814                     initloop:	
  2360  0814  0012               	moviw fsr0++
  2361  0815  001E               	movwi fsr1++
  2362  0816  0BFE               	decfsz	126,f
  2363  0817  2814               	goto	initloop
  2364  0818  3400               	retlw	0
  2365                           
  2366                           	psect	cstackBANK2
  2367  0160                     __pcstackBANK2:	
  2368  0160                     ??_main:	
  2369                           
  2370                           ; 1 bytes @ 0x0
  2371  0160                     	ds	3
  2372  0163                     main@data_temp:	
  2373                           
  2374                           ; 2 bytes @ 0x3
  2375  0163                     	ds	2
  2376  0165                     main@i:	
  2377                           
  2378                           ; 1 bytes @ 0x5
  2379  0165                     	ds	1
  2380  0166                     main@bat_data:	
  2381                           
  2382                           ; 2 bytes @ 0x6
  2383  0166                     	ds	2
  2384                           
  2385                           	psect	cstackCOMMON
  2386  0070                     __pcstackCOMMON:	
  2387  0070                     ?_OSCILLATOR_Initialize:	
  2388  0070                     ?_SPI_Initialize:	
  2389                           ; 1 bytes @ 0x0
  2390                           
  2391  0070                     ?_EUSART_Initialize:	
  2392                           ; 1 bytes @ 0x0
  2393                           
  2394  0070                     ?_ADC_Initialize:	
  2395                           ; 1 bytes @ 0x0
  2396                           
  2397  0070                     ?_FVR_Initialize:	
  2398                           ; 1 bytes @ 0x0
  2399                           
  2400  0070                     ?_TMR0_Initialize:	
  2401                           ; 1 bytes @ 0x0
  2402                           
  2403  0070                     ?_TMR0_CallBack:	
  2404                           ; 1 bytes @ 0x0
  2405                           
  2406  0070                     ??_TMR0_CallBack:	
  2407                           ; 1 bytes @ 0x0
  2408                           
  2409  0070                     ?_Bq32k_Time_Init:	
  2410                           ; 1 bytes @ 0x0
  2411                           
  2412  0070                     ?_SendCmd_1621:	
  2413                           ; 1 bytes @ 0x0
  2414                           
  2415  0070                     ?_Serach_Flash_Head:	
  2416                           ; 1 bytes @ 0x0
  2417                           
  2418  0070                     ?_temperature_process:	
  2419                           ; 1 bytes @ 0x0
  2420                           
  2421  0070                     ?_Key_Process:	
  2422                           ; 1 bytes @ 0x0
  2423                           
  2424  0070                     ?_Save_process:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0070                     ?_Sleep_process:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0070                     ?_Calculate_Time:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0070                     ?_Tc_Display:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0070                     ?_err_Display:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0070                     ?_Two_Display:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0070                     ?_time_Display:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0070                     ?_Bq32k_Rtc_Read_Time:	
  2446                           ; 1 bytes @ 0x0
  2447                           
  2448  0070                     ?_Set_start_flag:	
  2449                           ; 1 bytes @ 0x0
  2450                           
  2451  0070                     ?_Write_Flash_head:	
  2452                           ; 1 bytes @ 0x0
  2453                           
  2454  0070                     ?_Save_Write_time:	
  2455                           ; 1 bytes @ 0x0
  2456                           
  2457  0070                     ?_Set_finish_flag:	
  2458                           ; 1 bytes @ 0x0
  2459                           
  2460  0070                     ?_Write_Flash_finish:	
  2461                           ; 1 bytes @ 0x0
  2462                           
  2463  0070                     ?_bcd2bin:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0070                     ?_Step_control:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0070                     ?_PIN_MANAGER_Initialize:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0070                     ?_SYSTEM_Initialize:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0070                     ?_SPI_Exchange8bit:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?_EUSART_Write:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ?_TMR0_ISR:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?_INTERRUPT_InterruptManager:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ?_main:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_maxim_31856_read_register:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ?_maxim_start_conversion:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_maxim_clear_fault_status:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ?_tc_temperature_trans:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?_one_temperature_trans:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ?_temperature_display:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?_I2C_Start:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ?_I2C_Send_Byte:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_I2C_Receive_Byte:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ?_I2C_Stop:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     ?_Key_Scan:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523                           
  2524                           ; 1 bytes @ 0x0
  2525  0070                     	ds	1
  2526  0071                     ??_TMR0_ISR:	
  2527                           
  2528                           ; 1 bytes @ 0x1
  2529  0071                     	ds	1
  2530  0072                     ??_INTERRUPT_InterruptManager:	
  2531                           
  2532                           ; 1 bytes @ 0x2
  2533  0072                     	ds	1
  2534  0073                     ??_OSCILLATOR_Initialize:	
  2535  0073                     ??_SPI_Initialize:	
  2536                           ; 1 bytes @ 0x3
  2537                           
  2538  0073                     ??_EUSART_Initialize:	
  2539                           ; 1 bytes @ 0x3
  2540                           
  2541  0073                     ??_ADC_Initialize:	
  2542                           ; 1 bytes @ 0x3
  2543                           
  2544  0073                     ??_FVR_Initialize:	
  2545                           ; 1 bytes @ 0x3
  2546                           
  2547  0073                     ??_TMR0_Initialize:	
  2548                           ; 1 bytes @ 0x3
  2549                           
  2550  0073                     ?_FLASH_EraseBlock:	
  2551                           ; 1 bytes @ 0x3
  2552                           
  2553  0073                     ?_memset:	
  2554                           ; 1 bytes @ 0x3
  2555                           
  2556  0073                     ??_Set_start_flag:	
  2557                           ; 1 bytes @ 0x3
  2558                           
  2559  0073                     ??_Set_finish_flag:	
  2560                           ; 1 bytes @ 0x3
  2561                           
  2562  0073                     ??_Step_control:	
  2563                           ; 1 bytes @ 0x3
  2564                           
  2565  0073                     ??_PIN_MANAGER_Initialize:	
  2566                           ; 1 bytes @ 0x3
  2567                           
  2568  0073                     ??_SPI_Exchange8bit:	
  2569                           ; 1 bytes @ 0x3
  2570                           
  2571  0073                     ??_EUSART_Write:	
  2572                           ; 1 bytes @ 0x3
  2573                           
  2574  0073                     ?_SendBit_1621:	
  2575                           ; 1 bytes @ 0x3
  2576                           
  2577  0073                     ?_SendDataBit_1621:	
  2578                           ; 1 bytes @ 0x3
  2579                           
  2580  0073                     ??_I2C_Start:	
  2581                           ; 1 bytes @ 0x3
  2582                           
  2583  0073                     ??_I2C_Send_Byte:	
  2584                           ; 1 bytes @ 0x3
  2585                           
  2586  0073                     ??_I2C_Receive_Byte:	
  2587                           ; 1 bytes @ 0x3
  2588                           
  2589  0073                     ??_I2C_Stop:	
  2590                           ; 1 bytes @ 0x3
  2591                           
  2592  0073                     ??_Key_Scan:	
  2593                           ; 1 bytes @ 0x3
  2594                           
  2595  0073                     ?___bmul:	
  2596                           ; 1 bytes @ 0x3
  2597                           
  2598  0073                     ?_FLASH_ReadWord:	
  2599                           ; 1 bytes @ 0x3
  2600                           
  2601  0073                     ?_ADC_GetConversion:	
  2602                           ; 2 bytes @ 0x3
  2603                           
  2604  0073                     ?___wmul:	
  2605                           ; 2 bytes @ 0x3
  2606                           
  2607  0073                     ?___awdiv:	
  2608                           ; 2 bytes @ 0x3
  2609                           
  2610  0073                     ?___awmod:	
  2611                           ; 2 bytes @ 0x3
  2612                           
  2613  0073                     ?___lwmod:	
  2614                           ; 2 bytes @ 0x3
  2615                           
  2616  0073                     SPI_Exchange8bit@data:	
  2617                           ; 2 bytes @ 0x3
  2618                           
  2619  0073                     EUSART_Write@txData:	
  2620                           ; 1 bytes @ 0x3
  2621                           
  2622  0073                     SendBit_1621@cnt:	
  2623                           ; 1 bytes @ 0x3
  2624                           
  2625  0073                     SendDataBit_1621@cnt:	
  2626                           ; 1 bytes @ 0x3
  2627                           
  2628  0073                     ___bmul@multiplicand:	
  2629                           ; 1 bytes @ 0x3
  2630                           
  2631  0073                     FLASH_ReadWord@flashAddr:	
  2632                           ; 1 bytes @ 0x3
  2633                           
  2634  0073                     FLASH_EraseBlock@startAddr:	
  2635                           ; 2 bytes @ 0x3
  2636                           
  2637  0073                     ___wmul@multiplier:	
  2638                           ; 2 bytes @ 0x3
  2639                           
  2640  0073                     ___awdiv@divisor:	
  2641                           ; 2 bytes @ 0x3
  2642                           
  2643  0073                     ___awmod@divisor:	
  2644                           ; 2 bytes @ 0x3
  2645                           
  2646  0073                     ___lwmod@divisor:	
  2647                           ; 2 bytes @ 0x3
  2648                           
  2649  0073                     memset@c:	
  2650                           ; 2 bytes @ 0x3
  2651                           
  2652                           
  2653                           ; 2 bytes @ 0x3
  2654  0073                     	ds	1
  2655  0074                     ??_Sleep_process:	
  2656  0074                     ??_SYSTEM_Initialize:	
  2657                           ; 1 bytes @ 0x4
  2658                           
  2659  0074                     ?_SPI_Exchange8bitBuffer:	
  2660                           ; 1 bytes @ 0x4
  2661                           
  2662  0074                     ?_maxim_31856_write_register:	
  2663                           ; 1 bytes @ 0x4
  2664                           
  2665  0074                     ??_maxim_31856_read_register:	
  2666                           ; 1 bytes @ 0x4
  2667                           
  2668  0074                     ??_SendBit_1621:	
  2669                           ; 1 bytes @ 0x4
  2670                           
  2671  0074                     ??_SendDataBit_1621:	
  2672                           ; 1 bytes @ 0x4
  2673                           
  2674  0074                     ??___bmul:	
  2675                           ; 1 bytes @ 0x4
  2676                           
  2677  0074                     SPI_Exchange8bitBuffer@bufLen:	
  2678                           ; 1 bytes @ 0x4
  2679                           
  2680  0074                     maxim_31856_write_register@uch_register_value:	
  2681                           ; 1 bytes @ 0x4
  2682                           
  2683  0074                     I2C_Send_Byte@Data:	
  2684                           ; 1 bytes @ 0x4
  2685                           
  2686  0074                     I2C_Receive_Byte@Data:	
  2687                           ; 1 bytes @ 0x4
  2688                           
  2689                           
  2690                           ; 1 bytes @ 0x4
  2691  0074                     	ds	1
  2692  0075                     ??_FLASH_EraseBlock:	
  2693  0075                     ??_FLASH_ReadWord:	
  2694                           ; 1 bytes @ 0x5
  2695                           
  2696  0075                     ??_ADC_GetConversion:	
  2697                           ; 1 bytes @ 0x5
  2698                           
  2699  0075                     ??_maxim_31856_write_register:	
  2700                           ; 1 bytes @ 0x5
  2701                           
  2702  0075                     SPI_Exchange8bitBuffer@dataOut:	
  2703                           ; 1 bytes @ 0x5
  2704                           
  2705  0075                     FLASH_ReadWord@GIEBitValue:	
  2706                           ; 1 bytes @ 0x5
  2707                           
  2708  0075                     FLASH_EraseBlock@GIEBitValue:	
  2709                           ; 1 bytes @ 0x5
  2710                           
  2711  0075                     maxim_31856_write_register@uch_register_address:	
  2712                           ; 1 bytes @ 0x5
  2713                           
  2714  0075                     maxim_31856_read_register@uch_register_address:	
  2715                           ; 1 bytes @ 0x5
  2716                           
  2717  0075                     SendBit_1621@data:	
  2718                           ; 1 bytes @ 0x5
  2719                           
  2720  0075                     SendDataBit_1621@data:	
  2721                           ; 1 bytes @ 0x5
  2722                           
  2723  0075                     I2C_Send_Byte@i:	
  2724                           ; 1 bytes @ 0x5
  2725                           
  2726  0075                     I2C_Receive_Byte@i:	
  2727                           ; 1 bytes @ 0x5
  2728                           
  2729  0075                     Key_Scan@Key_val:	
  2730                           ; 1 bytes @ 0x5
  2731                           
  2732  0075                     ___bmul@product:	
  2733                           ; 1 bytes @ 0x5
  2734                           
  2735  0075                     ___wmul@multiplicand:	
  2736                           ; 1 bytes @ 0x5
  2737                           
  2738  0075                     ___awdiv@dividend:	
  2739                           ; 2 bytes @ 0x5
  2740                           
  2741  0075                     ___awmod@dividend:	
  2742                           ; 2 bytes @ 0x5
  2743                           
  2744  0075                     ___lwmod@dividend:	
  2745                           ; 2 bytes @ 0x5
  2746                           
  2747  0075                     memset@n:	
  2748                           ; 2 bytes @ 0x5
  2749                           
  2750                           
  2751                           ; 2 bytes @ 0x5
  2752  0075                     	ds	1
  2753  0076                     ??_FLASH_WriteWord:	
  2754  0076                     ?_I2C_Read_Buffer:	
  2755                           ; 1 bytes @ 0x6
  2756                           
  2757  0076                     ?_I2C_Send_Buffer:	
  2758                           ; 1 bytes @ 0x6
  2759                           
  2760  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2761                           ; 1 bytes @ 0x6
  2762                           
  2763  0076                     ADC_GetConversion@channel:	
  2764                           ; 1 bytes @ 0x6
  2765                           
  2766  0076                     maxim_31856_read_register@uch_register_data:	
  2767                           ; 1 bytes @ 0x6
  2768                           
  2769  0076                     SendBit_1621@i:	
  2770                           ; 1 bytes @ 0x6
  2771                           
  2772  0076                     SendDataBit_1621@i:	
  2773                           ; 1 bytes @ 0x6
  2774                           
  2775  0076                     I2C_Read_Buffer@buff:	
  2776                           ; 1 bytes @ 0x6
  2777                           
  2778  0076                     I2C_Send_Buffer@buff:	
  2779                           ; 1 bytes @ 0x6
  2780                           
  2781  0076                     ___bmul@multiplier:	
  2782                           ; 1 bytes @ 0x6
  2783                           
  2784                           
  2785                           ; 1 bytes @ 0x6
  2786  0076                     	ds	1
  2787  0077                     ??_SendCmd_1621:	
  2788  0077                     ??_WriteAll_1621:	
  2789                           ; 1 bytes @ 0x7
  2790                           
  2791  0077                     ??_memset:	
  2792                           ; 1 bytes @ 0x7
  2793                           
  2794  0077                     ??_maxim_start_conversion:	
  2795                           ; 1 bytes @ 0x7
  2796                           
  2797  0077                     ??_maxim_clear_fault_status:	
  2798                           ; 1 bytes @ 0x7
  2799                           
  2800  0077                     ??___wmul:	
  2801                           ; 1 bytes @ 0x7
  2802                           
  2803  0077                     ??___awdiv:	
  2804                           ; 1 bytes @ 0x7
  2805                           
  2806  0077                     ??___awmod:	
  2807                           ; 1 bytes @ 0x7
  2808                           
  2809  0077                     ??___lwmod:	
  2810                           ; 1 bytes @ 0x7
  2811                           
  2812  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2813                           ; 1 bytes @ 0x7
  2814                           
  2815  0077                     I2C_Read_Buffer@Length:	
  2816                           ; 1 bytes @ 0x7
  2817                           
  2818  0077                     I2C_Send_Buffer@Length:	
  2819                           ; 1 bytes @ 0x7
  2820                           
  2821  0077                     bcd2bin@val:	
  2822                           ; 1 bytes @ 0x7
  2823                           
  2824                           
  2825                           ; 1 bytes @ 0x7
  2826  0077                     	ds	1
  2827  0078                     ??_temperature_process:	
  2828  0078                     ??_Write_Flash_head:	
  2829                           ; 1 bytes @ 0x8
  2830                           
  2831  0078                     ??_Write_Flash_finish:	
  2832                           ; 1 bytes @ 0x8
  2833                           
  2834                           
  2835                           	psect	cstackBANK0
  2836  0020                     __pcstackBANK0:	
  2837                           ; 1 bytes @ 0x8
  2838                           
  2839  0020                     ?_FLASH_WriteBlock:	
  2840  0020                     ?_WriteAll_1621:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0020                     ??_bcd2bin:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0020                     ??_SPI_Exchange8bitBuffer:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0020                     ??_I2C_Read_Buffer:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0020                     ??_I2C_Send_Buffer:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0020                     maxim_start_conversion@uch_conversion_mode:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0020                     SendCmd_1621@command:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0020                     ___awdiv@counter:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0020                     ___awmod@counter:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0020                     ___lwmod@counter:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0020                     memset@p1:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0020                     FLASH_WriteBlock@writeAddr:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0020                     WriteAll_1621@p:	
  2877                           ; 2 bytes @ 0x0
  2878                           
  2879  0020                     ___wmul@product:	
  2880                           ; 2 bytes @ 0x0
  2881                           
  2882                           
  2883                           ; 2 bytes @ 0x0
  2884  0020                     	ds	1
  2885  0021                     ?___lwdiv:	
  2886  0021                     I2C_Read_Buffer@ADD:	
  2887                           ; 2 bytes @ 0x1
  2888                           
  2889  0021                     ___awdiv@sign:	
  2890                           ; 1 bytes @ 0x1
  2891                           
  2892  0021                     ___awmod@sign:	
  2893                           ; 1 bytes @ 0x1
  2894                           
  2895  0021                     memset@p:	
  2896                           ; 1 bytes @ 0x1
  2897                           
  2898  0021                     ___lwdiv@divisor:	
  2899                           ; 1 bytes @ 0x1
  2900                           
  2901                           
  2902                           ; 2 bytes @ 0x1
  2903  0021                     	ds	1
  2904  0022                     WriteAll_1621@cnt:	
  2905  0022                     I2C_Read_Buffer@Flag:	
  2906                           ; 1 bytes @ 0x2
  2907                           
  2908  0022                     I2C_Send_Buffer@ADD:	
  2909                           ; 1 bytes @ 0x2
  2910                           
  2911  0022                     FLASH_WriteBlock@flashWordArray:	
  2912                           ; 1 bytes @ 0x2
  2913                           
  2914  0022                     ___awdiv@quotient:	
  2915                           ; 2 bytes @ 0x2
  2916                           
  2917                           
  2918                           ; 2 bytes @ 0x2
  2919  0022                     	ds	1
  2920  0023                     ??_Bq32k_Rtc_Read_Time:	
  2921  0023                     ?_maxim_31856_read_nregisters:	
  2922                           ; 1 bytes @ 0x3
  2923                           
  2924  0023                     maxim_31856_read_nregisters@uch_buff:	
  2925                           ; 1 bytes @ 0x3
  2926                           
  2927  0023                     WriteAll_1621@addr:	
  2928                           ; 1 bytes @ 0x3
  2929                           
  2930  0023                     I2C_Send_Buffer@i:	
  2931                           ; 1 bytes @ 0x3
  2932                           
  2933  0023                     ___lwdiv@dividend:	
  2934                           ; 1 bytes @ 0x3
  2935                           
  2936                           
  2937                           ; 2 bytes @ 0x3
  2938  0023                     	ds	1
  2939  0024                     ??_FLASH_WriteBlock:	
  2940  0024                     maxim_31856_read_nregisters@uch_nBytes:	
  2941                           ; 1 bytes @ 0x4
  2942                           
  2943  0024                     WriteAll_1621@i:	
  2944                           ; 1 bytes @ 0x4
  2945                           
  2946  0024                     I2C_Send_Buffer@Flag:	
  2947                           ; 1 bytes @ 0x4
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x4
  2951  0024                     	ds	1
  2952  0025                     ??_err_Display:	
  2953  0025                     ??_Two_Display:	
  2954                           ; 1 bytes @ 0x5
  2955                           
  2956  0025                     ??_maxim_31856_read_nregisters:	
  2957                           ; 1 bytes @ 0x5
  2958                           
  2959  0025                     ??___lwdiv:	
  2960                           ; 1 bytes @ 0x5
  2961                           
  2962  0025                     Bq32k_Rtc_Read_Time@temp:	
  2963                           ; 1 bytes @ 0x5
  2964                           
  2965                           
  2966                           ; 10 bytes @ 0x5
  2967  0025                     	ds	1
  2968  0026                     ___lwdiv@counter:	
  2969  0026                     Two_Display@num:	
  2970                           ; 1 bytes @ 0x6
  2971                           
  2972  0026                     err_Display@num:	
  2973                           ; 4 bytes @ 0x6
  2974                           
  2975                           
  2976                           ; 4 bytes @ 0x6
  2977  0026                     	ds	1
  2978  0027                     maxim_31856_read_nregisters@uch_register_address:	
  2979  0027                     ___lwdiv@quotient:	
  2980                           ; 1 bytes @ 0x7
  2981                           
  2982                           
  2983                           ; 2 bytes @ 0x7
  2984  0027                     	ds	1
  2985  0028                     ??_one_temperature_trans:	
  2986  0028                     FLASH_WriteBlock@blockStartAddr:	
  2987                           ; 1 bytes @ 0x8
  2988                           
  2989                           
  2990                           ; 2 bytes @ 0x8
  2991  0028                     	ds	1
  2992  0029                     ??_Tc_Display:	
  2993                           
  2994                           ; 1 bytes @ 0x9
  2995  0029                     	ds	1
  2996  002A                     FLASH_WriteBlock@GIEBitValue:	
  2997  002A                     Tc_Display@count:	
  2998                           ; 1 bytes @ 0xA
  2999                           
  3000  002A                     Two_Display@number:	
  3001                           ; 1 bytes @ 0xA
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0xA
  3005  002A                     	ds	1
  3006  002B                     FLASH_WriteBlock@i:	
  3007  002B                     Tc_Display@data:	
  3008                           ; 1 bytes @ 0xB
  3009                           
  3010                           
  3011                           ; 2 bytes @ 0xB
  3012  002B                     	ds	1
  3013  002C                     ?_FLASH_WriteWord:	
  3014  002C                     FLASH_WriteWord@flashAddr:	
  3015                           ; 1 bytes @ 0xC
  3016                           
  3017                           
  3018                           ; 2 bytes @ 0xC
  3019  002C                     	ds	2
  3020  002E                     FLASH_WriteWord@ramBuf:	
  3021                           
  3022                           ; 2 bytes @ 0xE
  3023  002E                     	ds	1
  3024  002F                     Bq32k_Rtc_Read_Time@p:	
  3025                           
  3026                           ; 1 bytes @ 0xF
  3027  002F                     	ds	1
  3028  0030                     ??_time_Display:	
  3029  0030                     FLASH_WriteWord@word:	
  3030                           ; 1 bytes @ 0x10
  3031                           
  3032                           
  3033                           ; 2 bytes @ 0x10
  3034  0030                     	ds	2
  3035  0032                     FLASH_WriteWord@offset:	
  3036                           
  3037                           ; 1 bytes @ 0x12
  3038  0032                     	ds	1
  3039  0033                     FLASH_WriteWord@blockStartAddr:	
  3040  0033                     time_Display@num:	
  3041                           ; 2 bytes @ 0x13
  3042                           
  3043                           
  3044                           ; 4 bytes @ 0x13
  3045  0033                     	ds	2
  3046  0035                     FLASH_WriteWord@i:	
  3047                           
  3048                           ; 1 bytes @ 0x15
  3049  0035                     	ds	1
  3050  0036                     ??_Bq32k_Time_Init:	
  3051  0036                     ??_Serach_Flash_Head:	
  3052                           ; 1 bytes @ 0x16
  3053                           
  3054  0036                     ?_Save_Write_word:	
  3055                           ; 1 bytes @ 0x16
  3056                           
  3057  0036                     Save_Write_word@data:	
  3058                           ; 1 bytes @ 0x16
  3059                           
  3060                           
  3061                           ; 2 bytes @ 0x16
  3062  0036                     	ds	1
  3063  0037                     Serach_Flash_Head@count:	
  3064                           
  3065                           ; 1 bytes @ 0x17
  3066  0037                     	ds	1
  3067  0038                     ??_Save_Write_word:	
  3068  0038                     Serach_Flash_Head@data:	
  3069                           ; 1 bytes @ 0x18
  3070                           
  3071  0038                     Bq32k_Time_Init@temp:	
  3072                           ; 2 bytes @ 0x18
  3073                           
  3074                           
  3075                           ; 10 bytes @ 0x18
  3076  0038                     	ds	2
  3077  003A                     ??_Save_Write_time:	
  3078  003A                     Serach_Flash_Head@i:	
  3079                           ; 1 bytes @ 0x1A
  3080                           
  3081                           
  3082                           ; 2 bytes @ 0x1A
  3083  003A                     	ds	2
  3084  003C                     ??_Calculate_Time:	
  3085                           
  3086                           ; 1 bytes @ 0x1C
  3087  003C                     	ds	10
  3088  0046                     Calculate_Time@temp:	
  3089                           
  3090                           ; 4 bytes @ 0x26
  3091  0046                     	ds	4
  3092  004A                     Calculate_Time@temp1:	
  3093                           
  3094                           ; 4 bytes @ 0x2A
  3095  004A                     	ds	4
  3096  004E                     Calculate_Time@temp2:	
  3097                           
  3098                           ; 4 bytes @ 0x2E
  3099  004E                     	ds	4
  3100  0052                     ??_Save_process:	
  3101  0052                     ??_tc_temperature_trans:	
  3102                           ; 1 bytes @ 0x32
  3103                           
  3104                           
  3105                           ; 1 bytes @ 0x32
  3106  0052                     	ds	2
  3107  0054                     Save_process@var_time:	
  3108                           
  3109                           ; 2 bytes @ 0x34
  3110  0054                     	ds	2
  3111  0056                     tc_temperature_trans@temperature_back:	
  3112                           
  3113                           ; 2 bytes @ 0x36
  3114  0056                     	ds	2
  3115  0058                     tc_temperature_trans@temperature_absolute:	
  3116                           
  3117                           ; 2 bytes @ 0x38
  3118  0058                     	ds	2
  3119  005A                     tc_temperature_trans@var_time:	
  3120                           
  3121                           ; 2 bytes @ 0x3A
  3122  005A                     	ds	2
  3123  005C                     tc_temperature_trans@temperature_temp:	
  3124                           
  3125                           ; 2 bytes @ 0x3C
  3126  005C                     	ds	2
  3127  005E                     ??_temperature_display:	
  3128                           
  3129                           ; 1 bytes @ 0x3E
  3130  005E                     	ds	1
  3131  005F                     ??_Key_Process:	
  3132                           
  3133                           ; 1 bytes @ 0x3F
  3134  005F                     	ds	1
  3135  0060                     Key_Process@data_temp:	
  3136                           
  3137                           ; 2 bytes @ 0x40
  3138  0060                     	ds	2
  3139  0062                     Key_Process@gKeyValue:	
  3140                           
  3141                           ; 1 bytes @ 0x42
  3142  0062                     	ds	1
  3143  0063                     Key_Process@i:	
  3144                           
  3145                           ; 2 bytes @ 0x43
  3146  0063                     	ds	2
  3147                           
  3148                           	psect	maintext
  3149  03A9                     __pmaintext:	
  3150 ;;
  3151 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3152 ;;
  3153 ;; *************** function _main *****************
  3154 ;; Defined at:
  3155 ;;		line 67 in file "main.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;		None
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  bat_data        2    6[BANK2 ] unsigned int 
  3160 ;;  data_temp       2    3[BANK2 ] unsigned int 
  3161 ;;  i               1    5[BANK2 ] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      void 
  3164 ;; Registers used:
  3165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : B1F/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3172 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  3173 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  3174 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0
  3175 ;;Total ram usage:        8 bytes
  3176 ;; Hardware stack levels required when called:   13
  3177 ;; This function calls:
  3178 ;;		_ADC_GetConversion
  3179 ;;		_Bq32k_Time_Init
  3180 ;;		_Key_Process
  3181 ;;		_SYSTEM_Initialize
  3182 ;;		_Save_process
  3183 ;;		_SendCmd_1621
  3184 ;;		_Serach_Flash_Head
  3185 ;;		_Sleep_process
  3186 ;;		_WriteAll_1621
  3187 ;;		_temperature_process
  3188 ;; This function is called by:
  3189 ;;		Startup code after reset
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           
  3194                           ;psect for function _main
  3195  03A9                     _main:	
  3196                           
  3197                           ;main.c: 69: unsigned char i=0;
  3198                           
  3199                           ;incstack = 0
  3200                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3201  03A9  0022               	movlb	2	; select bank2
  3202  03AA  01E5               	clrf	main@i^(0+256)
  3203                           
  3204                           ;main.c: 71: unsigned int bat_data = 0;
  3205  03AB  01E6               	clrf	main@bat_data^(0+256)
  3206  03AC  01E7               	clrf	(main@bat_data+1)^(0+256)
  3207                           
  3208                           ;main.c: 72: unsigned int data_temp = 0;
  3209  03AD  01E3               	clrf	main@data_temp^(0+256)
  3210  03AE  01E4               	clrf	(main@data_temp+1)^(0+256)
  3211                           
  3212                           ;main.c: 73: SWDTEN = 0;
  3213  03AF  0021               	movlb	1	; select bank1
  3214  03B0  1017               	bcf	23,0	;volatile
  3215                           
  3216                           ;main.c: 74: WDTPS0 = 1;
  3217  03B1  1497               	bsf	23,1	;volatile
  3218                           
  3219                           ;main.c: 75: WDTPS1 = 0;
  3220  03B2  1117               	bcf	23,2	;volatile
  3221                           
  3222                           ;main.c: 76: WDTPS2 = 0;
  3223  03B3  1197               	bcf	23,3	;volatile
  3224                           
  3225                           ;main.c: 77: WDTPS3 = 1;
  3226  03B4  1617               	bsf	23,4	;volatile
  3227                           
  3228                           ;main.c: 78: WDTPS4 = 0;
  3229  03B5  1297               	bcf	23,5	;volatile
  3230  03B6  0064               	clrwdt	;# 
  3231                           
  3232                           ;main.c: 81: SYSTEM_Initialize();
  3233  03B7  3188  20B1  3183   	fcall	_SYSTEM_Initialize
  3234                           
  3235                           ;main.c: 84: _delay((unsigned long)((3000)*(4000000/4000.0)));
  3236  03BA  3010               	movlw	16
  3237  03BB  0022               	movlb	2	; select bank2
  3238  03BC  00E2               	movwf	(??_main^(0+256)+2)
  3239  03BD  3039               	movlw	57
  3240  03BE  00E1               	movwf	(??_main^(0+256)+1)
  3241  03BF  301B               	movlw	27
  3242  03C0  00E0               	movwf	??_main^(0+256)
  3243  03C1                     u5377:	
  3244  03C1  0BE0               	decfsz	??_main^(0+256),f
  3245  03C2  2BC1               	goto	u5377
  3246  03C3  0BE1               	decfsz	(??_main^(0+256)+1),f
  3247  03C4  2BC1               	goto	u5377
  3248  03C5  0BE2               	decfsz	(??_main^(0+256)+2),f
  3249  03C6  2BC1               	goto	u5377
  3250  03C7  3200               	nop2
  3251                           
  3252                           ;main.c: 85: if(RB5 == 0 ) do { LATA2 = 1; } while(0);
  3253  03C8  0020               	movlb	0	; select bank0
  3254  03C9  1A8D               	btfsc	13,5	;volatile
  3255  03CA  2BCE               	goto	l371
  3256  03CB  0022               	movlb	2	; select bank2
  3257  03CC  150C               	bsf	12,2	;volatile
  3258  03CD  2BD0               	goto	l373
  3259  03CE                     l371:	
  3260                           ;main.c: 86: else do { LATA2 = 0; } while(0);
  3261                           
  3262  03CE  0022               	movlb	2	; select bank2
  3263  03CF  110C               	bcf	12,2	;volatile
  3264  03D0                     l373:	
  3265                           ;main.c: 87: do { LATA3 = 0; } while(0);
  3266                           
  3267  03D0  118C               	bcf	12,3	;volatile
  3268                           
  3269                           ;main.c: 90: bat_data = 0;
  3270  03D1  01E6               	clrf	main@bat_data^(0+256)
  3271  03D2  01E7               	clrf	(main@bat_data+1)^(0+256)
  3272                           
  3273                           ;main.c: 91: for(i=0;i<16;i++)
  3274  03D3  01E5               	clrf	main@i^(0+256)
  3275  03D4  3010               	movlw	16
  3276  03D5  0265               	subwf	main@i^(0+256),w
  3277  03D6  1803               	btfsc	3,0
  3278  03D7  2BEB               	goto	l5553
  3279  03D8                     l5547:	
  3280                           
  3281                           ;main.c: 92: {
  3282                           ;main.c: 93: bat_data = bat_data + ADC_GetConversion(ADC);
  3283  03D8  300B               	movlw	11
  3284  03D9  3188  20DD  3183   	fcall	_ADC_GetConversion
  3285  03DC  0022               	movlb	2	; select bank2
  3286  03DD  0866               	movf	main@bat_data^(0+256),w
  3287  03DE  0773               	addwf	?_ADC_GetConversion,w
  3288  03DF  00E6               	movwf	main@bat_data^(0+256)
  3289  03E0  0867               	movf	(main@bat_data+1)^(0+256),w
  3290  03E1  3D74               	addwfc	?_ADC_GetConversion+1,w
  3291  03E2  00E7               	movwf	(main@bat_data+1)^(0+256)
  3292  03E3  3001               	movlw	1
  3293  03E4  00E0               	movwf	??_main^(0+256)
  3294  03E5  0860               	movf	??_main^(0+256),w
  3295  03E6  07E5               	addwf	main@i^(0+256),f
  3296  03E7  3010               	movlw	16
  3297  03E8  0265               	subwf	main@i^(0+256),w
  3298  03E9  1C03               	skipc
  3299  03EA  2BD8               	goto	l5547
  3300  03EB                     l5553:	
  3301                           
  3302                           ;main.c: 94: }
  3303                           ;main.c: 95: bat_data = bat_data>>4;
  3304  03EB  0E66               	swapf	main@bat_data^(0+256),w
  3305  03EC  390F               	andlw	15
  3306  03ED  00E6               	movwf	main@bat_data^(0+256)
  3307  03EE  0E67               	swapf	(main@bat_data+1)^(0+256),w
  3308  03EF  39F0               	andlw	240
  3309  03F0  04E6               	iorwf	main@bat_data^(0+256),f
  3310  03F1  0E67               	swapf	(main@bat_data+1)^(0+256),w
  3311  03F2  390F               	andlw	15
  3312  03F3  00E7               	movwf	(main@bat_data^(0+256)+1)
  3313                           
  3314                           ;main.c: 96: if( bat_data < 800)
  3315  03F4  3003               	movlw	3
  3316  03F5  0267               	subwf	(main@bat_data+1)^(0+256),w
  3317  03F6  3020               	movlw	32
  3318  03F7  1903               	skipnz
  3319  03F8  0266               	subwf	main@bat_data^(0+256),w
  3320  03F9  1803               	skipnc
  3321  03FA  2BFE               	goto	l5557
  3322                           
  3323                           ;main.c: 97: {
  3324                           ;main.c: 98: do { LATA2 = 0; } while(0);
  3325  03FB  110C               	bcf	12,2	;volatile
  3326  03FC                     l380:	
  3327                           ;main.c: 99: while(1)asm("clrwdt");
  3328                           
  3329  03FC  0064               	clrwdt	;# 
  3330  03FD  2BFC               	goto	l380
  3331  03FE                     l5557:	
  3332                           
  3333                           ;main.c: 100: }
  3334                           ;main.c: 101: i = 0 ;
  3335  03FE  0022               	movlb	2	; select bank2
  3336  03FF  01E5               	clrf	main@i^(0+256)
  3337                           
  3338                           ;main.c: 102: bat_data = 0 ;
  3339  0400  01E6               	clrf	main@bat_data^(0+256)
  3340  0401  01E7               	clrf	(main@bat_data+1)^(0+256)
  3341                           
  3342                           ;main.c: 106: do { TRISB3 = 1; } while(0);
  3343  0402  0021               	movlb	1	; select bank1
  3344  0403  158D               	bsf	13,3	;volatile
  3345                           
  3346                           ;main.c: 107: Bq32k_Time_Init();
  3347  0404  318C  2468  3183   	fcall	_Bq32k_Time_Init
  3348                           
  3349                           ;main.c: 108: SendCmd_1621(0x52);
  3350  0407  3052               	movlw	82
  3351  0408  3188  20C6  3183   	fcall	_SendCmd_1621
  3352                           
  3353                           ;main.c: 109: SendCmd_1621(0X28);
  3354  040B  3028               	movlw	40
  3355  040C  3188  20C6  3183   	fcall	_SendCmd_1621
  3356                           
  3357                           ;main.c: 110: SendCmd_1621(0x02);
  3358  040F  3002               	movlw	2
  3359  0410  3188  20C6  3183   	fcall	_SendCmd_1621
  3360                           
  3361                           ;main.c: 111: SendCmd_1621(0x06);
  3362  0413  3006               	movlw	6
  3363  0414  3188  20C6  3183   	fcall	_SendCmd_1621
  3364                           
  3365                           ;main.c: 113: WriteAll_1621(0,Dis_TAB+17,4);
  3366  0417  3011               	movlw	low ((_Dis_TAB| (0+32768)+17))
  3367  0418  0020               	movlb	0	; select bank0
  3368  0419  00A0               	movwf	WriteAll_1621@p
  3369  041A  3090               	movlw	high ((_Dis_TAB| (0+32768)+17))
  3370  041B  00A1               	movwf	WriteAll_1621@p+1
  3371  041C  3004               	movlw	4
  3372  041D  0022               	movlb	2	; select bank2
  3373  041E  00E0               	movwf	??_main^(0+256)
  3374  041F  0860               	movf	??_main^(0+256),w
  3375  0420  0020               	movlb	0	; select bank0
  3376  0421  00A2               	movwf	WriteAll_1621@cnt
  3377  0422  3000               	movlw	0
  3378  0423  318B  2392  3183   	fcall	_WriteAll_1621
  3379                           
  3380                           ;main.c: 115: time_count = 0;
  3381  0426  0020               	movlb	0	; select bank0
  3382  0427  01ED               	clrf	_time_count
  3383                           
  3384                           ;main.c: 116: Record_flag = 0;
  3385  0428  01EB               	clrf	_Record_flag
  3386                           
  3387                           ;main.c: 117: Cur_temperature_time_ch1 = 0;
  3388  0429  0021               	movlb	1	; select bank1
  3389  042A  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  3390                           
  3391                           ;main.c: 118: Cur_temperature_time_ch2 = 0;
  3392  042B  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  3393                           
  3394                           ;main.c: 119: CH1_temperature = 0;
  3395  042C  0020               	movlb	0	; select bank0
  3396  042D  01E9               	clrf	_CH1_temperature
  3397  042E  01EA               	clrf	_CH1_temperature+1
  3398                           
  3399                           ;main.c: 120: CH2_temperature = 0;
  3400  042F  01F8               	clrf	_CH2_temperature
  3401  0430  01F9               	clrf	_CH2_temperature+1
  3402                           
  3403                           ;main.c: 121: CH1_state = 0;
  3404  0431  0021               	movlb	1	; select bank1
  3405  0432  01B4               	clrf	_CH1_state^(0+128)
  3406                           
  3407                           ;main.c: 122: CH2_state = 0;
  3408  0433  01B5               	clrf	_CH2_state^(0+128)
  3409                           
  3410                           ;main.c: 123: bat_data = 0;
  3411  0434  0022               	movlb	2	; select bank2
  3412  0435  01E6               	clrf	main@bat_data^(0+256)
  3413  0436  01E7               	clrf	(main@bat_data+1)^(0+256)
  3414                           
  3415                           ;main.c: 124: Cur_Save_Index = 0x2000;
  3416  0437  3000               	movlw	0
  3417  0438  0021               	movlb	1	; select bank1
  3418  0439  00AE               	movwf	_Cur_Save_Index^(0+128)
  3419  043A  3020               	movlw	32
  3420  043B  00AF               	movwf	(_Cur_Save_Index^(0+128)+1)
  3421                           
  3422                           ;main.c: 125: Serach_Flash_Head();
  3423  043C  318E  26E5  3183   	fcall	_Serach_Flash_Head
  3424  043F  0064               	clrwdt	;# 
  3425                           
  3426                           ;main.c: 127: SWDTEN = 1;
  3427  0440  0021               	movlb	1	; select bank1
  3428  0441  1417               	bsf	23,0	;volatile
  3429                           
  3430                           ;main.c: 152: (INTCONbits.GIE = 1);
  3431  0442  178B               	bsf	11,7	;volatile
  3432                           
  3433                           ;main.c: 155: (INTCONbits.PEIE = 1);
  3434  0443  170B               	bsf	11,6	;volatile
  3435  0444                     l5601:	
  3436                           ;main.c: 163: while (1)
  3437                           
  3438                           
  3439                           ;main.c: 164: {
  3440                           ;main.c: 169: bat_data = bat_data + ADC_GetConversion(ADC);
  3441  0444  300B               	movlw	11
  3442  0445  3188  20DD  3183   	fcall	_ADC_GetConversion
  3443  0448  0022               	movlb	2	; select bank2
  3444  0449  0866               	movf	main@bat_data^(0+256),w
  3445  044A  0773               	addwf	?_ADC_GetConversion,w
  3446  044B  00E6               	movwf	main@bat_data^(0+256)
  3447  044C  0867               	movf	(main@bat_data+1)^(0+256),w
  3448  044D  3D74               	addwfc	?_ADC_GetConversion+1,w
  3449  044E  00E7               	movwf	(main@bat_data+1)^(0+256)
  3450                           
  3451                           ;main.c: 170: i++;
  3452  044F  3001               	movlw	1
  3453  0450  00E0               	movwf	??_main^(0+256)
  3454  0451  0860               	movf	??_main^(0+256),w
  3455  0452  07E5               	addwf	main@i^(0+256),f
  3456                           
  3457                           ;main.c: 171: if(i == 16)
  3458  0453  3010               	movlw	16
  3459  0454  0665               	xorwf	main@i^(0+256),w
  3460  0455  1D03               	btfss	3,2
  3461  0456  2C6E               	goto	l5615
  3462                           
  3463                           ;main.c: 172: {
  3464                           ;main.c: 173: i = 0;
  3465  0457  01E5               	clrf	main@i^(0+256)
  3466                           
  3467                           ;main.c: 174: bat_data = bat_data>>4;
  3468  0458  0E66               	swapf	main@bat_data^(0+256),w
  3469  0459  390F               	andlw	15
  3470  045A  00E6               	movwf	main@bat_data^(0+256)
  3471  045B  0E67               	swapf	(main@bat_data+1)^(0+256),w
  3472  045C  39F0               	andlw	240
  3473  045D  04E6               	iorwf	main@bat_data^(0+256),f
  3474  045E  0E67               	swapf	(main@bat_data+1)^(0+256),w
  3475  045F  390F               	andlw	15
  3476  0460  00E7               	movwf	(main@bat_data^(0+256)+1)
  3477                           
  3478                           ;main.c: 175: if( bat_data < 800)
  3479  0461  3003               	movlw	3
  3480  0462  0267               	subwf	(main@bat_data+1)^(0+256),w
  3481  0463  3020               	movlw	32
  3482  0464  1903               	skipnz
  3483  0465  0266               	subwf	main@bat_data^(0+256),w
  3484  0466  1803               	skipnc
  3485  0467  2C6B               	goto	l5613
  3486                           
  3487                           ;main.c: 176: {
  3488                           ;main.c: 177: do { LATA2 = 0; } while(0);
  3489  0468  110C               	bcf	12,2	;volatile
  3490  0469                     l390:	
  3491                           ;main.c: 178: while(1)asm("clrwdt");
  3492                           
  3493  0469  0064               	clrwdt	;# 
  3494  046A  2C69               	goto	l390
  3495  046B                     l5613:	
  3496                           
  3497                           ;main.c: 179: }
  3498                           ;main.c: 180: bat_data = 0;
  3499  046B  0022               	movlb	2	; select bank2
  3500  046C  01E6               	clrf	main@bat_data^(0+256)
  3501  046D  01E7               	clrf	(main@bat_data+1)^(0+256)
  3502  046E                     l5615:	
  3503                           
  3504                           ;main.c: 181: }
  3505                           ;main.c: 186: temperature_process();
  3506  046E  318C  2431  3183   	fcall	_temperature_process
  3507                           
  3508                           ;main.c: 187: Key_Process();
  3509  0471  3185  2543  3183   	fcall	_Key_Process
  3510                           
  3511                           ;main.c: 188: Save_process();
  3512  0474  318F  2739  3183   	fcall	_Save_process
  3513                           
  3514                           ;main.c: 189: Sleep_process();
  3515  0477  318A  221E  3183   	fcall	_Sleep_process
  3516  047A  2C44               	goto	l5601
  3517  047B                     __end_of_main:	
  3518                           
  3519                           	psect	text1
  3520  0A1E                     __ptext1:	
  3521 ;; *************** function _Sleep_process *****************
  3522 ;; Defined at:
  3523 ;;		line 17 in file "mcc_generated_files/power.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0, pclath, cstack
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3541 ;;Total ram usage:        0 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    4
  3544 ;; This function calls:
  3545 ;;		_Step_control
  3546 ;; This function is called by:
  3547 ;;		_main
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           
  3552                           ;psect for function _Sleep_process
  3553  0A1E                     _Sleep_process:	
  3554                           
  3555                           ;incstack = 0
  3556                           ; Regs used in _Sleep_process: [wreg+status,2+status,0+pclath+cstack]
  3557                           ;power.c: 19: do { LATA3 = 1; } while(0);
  3558  0A1E  0022               	movlb	2	; select bank2
  3559  0A1F  158C               	bsf	12,3	;volatile
  3560                           
  3561                           ;power.c: 20: do { LATA4 = 1; } while(0);
  3562  0A20  160C               	bsf	12,4	;volatile
  3563                           
  3564                           ;power.c: 21: do { LATA0 = 1; } while(0);
  3565  0A21  140C               	bsf	12,0	;volatile
  3566                           
  3567                           ;power.c: 22: do { LATA1 = 1; } while(0);
  3568  0A22  148C               	bsf	12,1	;volatile
  3569                           
  3570                           ;power.c: 26: do { LATC0 = 1; } while(0);
  3571  0A23  140E               	bsf	14,0	;volatile
  3572                           
  3573                           ;power.c: 27: do { LATC2 = 1; } while(0);
  3574  0A24  150E               	bsf	14,2	;volatile
  3575                           
  3576                           ;power.c: 28: do { LATA6 = 1; } while(0);
  3577  0A25  170C               	bsf	12,6	;volatile
  3578                           
  3579                           ;power.c: 29: do { LATC1 = 1; } while(0);
  3580  0A26  148E               	bsf	14,1	;volatile
  3581                           
  3582                           ;power.c: 30: do { LATB0 = 1; } while(0);
  3583  0A27  140D               	bsf	13,0	;volatile
  3584                           
  3585                           ;power.c: 31: do { LATB1 = 1; } while(0);
  3586  0A28  148D               	bsf	13,1	;volatile
  3587  0A29  0063               	sleep	;# 
  3588                           
  3589                           ;power.c: 33: if( time_count == 0 || time_count == 2 )
  3590  0A2A  0020               	movlb	0	; select bank0
  3591  0A2B  086D               	movf	_time_count,w
  3592  0A2C  1903               	btfsc	3,2
  3593  0A2D  2A32               	goto	l1102
  3594  0A2E  3002               	movlw	2
  3595  0A2F  066D               	xorwf	_time_count,w
  3596  0A30  1D03               	btfss	3,2
  3597  0A31  2A3A               	goto	l5519
  3598  0A32                     l1102:	
  3599                           ;power.c: 34: {
  3600                           ;power.c: 35: do { LATA3 = 0; } while(0);
  3601                           
  3602  0A32  0022               	movlb	2	; select bank2
  3603  0A33  118C               	bcf	12,3	;volatile
  3604                           
  3605                           ;power.c: 36: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  3606  0A34  0020               	movlb	0	; select bank0
  3607  0A35  036B               	decf	_Record_flag,w
  3608  0A36  1D03               	btfss	3,2
  3609  0A37  2A3A               	goto	l5519
  3610  0A38  0022               	movlb	2	; select bank2
  3611  0A39  120C               	bcf	12,4	;volatile
  3612  0A3A                     l5519:	
  3613                           
  3614                           ;power.c: 37: }
  3615                           ;power.c: 39: Step_control();
  3616  0A3A  318A  223D         	fcall	_Step_control
  3617  0A3C  0008               	return
  3618  0A3D                     __end_of_Sleep_process:	
  3619                           
  3620                           	psect	text2
  3621  0A3D                     __ptext2:	
  3622 ;; *************** function _Step_control *****************
  3623 ;; Defined at:
  3624 ;;		line 48 in file "mcc_generated_files/power.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;		None
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;		None
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		wreg, status,2, status,0
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3640 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;Total ram usage:        1 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; Hardware stack levels required when called:    3
  3645 ;; This function calls:
  3646 ;;		Nothing
  3647 ;; This function is called by:
  3648 ;;		_Sleep_process
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           
  3653                           ;psect for function _Step_control
  3654  0A3D                     _Step_control:	
  3655                           
  3656                           ;power.c: 50: time_count++;
  3657                           
  3658                           ;incstack = 0
  3659                           ; Regs used in _Step_control: [wreg+status,2+status,0]
  3660  0A3D  3001               	movlw	1
  3661  0A3E  00F3               	movwf	??_Step_control
  3662  0A3F  0873               	movf	??_Step_control,w
  3663  0A40  0020               	movlb	0	; select bank0
  3664  0A41  07ED               	addwf	_time_count,f
  3665                           
  3666                           ;power.c: 51: if(time_count == 4 || time_count > 12) time_count = 0;
  3667  0A42  3004               	movlw	4
  3668  0A43  066D               	xorwf	_time_count,w
  3669  0A44  1903               	btfsc	3,2
  3670  0A45  2A4A               	goto	l5343
  3671  0A46  300D               	movlw	13
  3672  0A47  026D               	subwf	_time_count,w
  3673  0A48  1C03               	skipc
  3674  0A49  2A4B               	goto	l5345
  3675  0A4A                     l5343:	
  3676  0A4A  01ED               	clrf	_time_count
  3677  0A4B                     l5345:	
  3678                           
  3679                           ;power.c: 53: Cur_temperature_time_ch1++;
  3680  0A4B  3001               	movlw	1
  3681  0A4C  00F3               	movwf	??_Step_control
  3682  0A4D  0873               	movf	??_Step_control,w
  3683  0A4E  0021               	movlb	1	; select bank1
  3684  0A4F  07B6               	addwf	_Cur_temperature_time_ch1^(0+128),f
  3685                           
  3686                           ;power.c: 54: if(Cur_temperature_time_ch1 > 130)
  3687  0A50  3083               	movlw	131
  3688  0A51  0236               	subwf	_Cur_temperature_time_ch1^(0+128),w
  3689  0A52  1803               	btfsc	3,0
  3690                           
  3691                           ;power.c: 55: {
  3692                           ;power.c: 56: Cur_temperature_time_ch1 = 0;
  3693  0A53  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  3694                           
  3695                           ;power.c: 57: }
  3696                           ;power.c: 59: Cur_temperature_time_ch2++;
  3697  0A54  3001               	movlw	1
  3698  0A55  00F3               	movwf	??_Step_control
  3699  0A56  0873               	movf	??_Step_control,w
  3700  0A57  07B7               	addwf	_Cur_temperature_time_ch2^(0+128),f
  3701                           
  3702                           ;power.c: 60: if(Cur_temperature_time_ch2 > 130)
  3703  0A58  3083               	movlw	131
  3704  0A59  0237               	subwf	_Cur_temperature_time_ch2^(0+128),w
  3705  0A5A  1C03               	skipc
  3706  0A5B  0008               	return
  3707                           
  3708                           ;power.c: 61: {
  3709                           ;power.c: 62: Cur_temperature_time_ch2= 0;
  3710  0A5C  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  3711  0A5D  0008               	return
  3712  0A5E                     __end_of_Step_control:	
  3713                           
  3714                           	psect	text3
  3715  0EE5                     __ptext3:	
  3716 ;; *************** function _Serach_Flash_Head *****************
  3717 ;; Defined at:
  3718 ;;		line 42 in file "mcc_generated_files/save.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  i               2   26[BANK0 ] unsigned int 
  3723 ;;  data            2   24[BANK0 ] unsigned int 
  3724 ;;  count           1   23[BANK0 ] unsigned char 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;Total ram usage:        6 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    7
  3741 ;; This function calls:
  3742 ;;		_FLASH_ReadWord
  3743 ;;		_Write_Flash_finish
  3744 ;; This function is called by:
  3745 ;;		_main
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           
  3750                           ;psect for function _Serach_Flash_Head
  3751  0EE5                     _Serach_Flash_Head:	
  3752                           
  3753                           ;save.c: 44: unsigned int i=0;
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _Serach_Flash_Head: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3757  0EE5  0020               	movlb	0	; select bank0
  3758  0EE6  01BA               	clrf	Serach_Flash_Head@i
  3759  0EE7  01BB               	clrf	Serach_Flash_Head@i+1
  3760                           
  3761                           ;save.c: 45: unsigned int data=0;
  3762  0EE8  01B8               	clrf	Serach_Flash_Head@data
  3763  0EE9  01B9               	clrf	Serach_Flash_Head@data+1
  3764                           
  3765                           ;save.c: 46: unsigned char count =0;
  3766  0EEA  01B7               	clrf	Serach_Flash_Head@count
  3767                           
  3768                           ;save.c: 47: for(i = 0x2000; i<16384;i++ )
  3769  0EEB  3000               	movlw	0
  3770  0EEC  00BA               	movwf	Serach_Flash_Head@i
  3771  0EED  3020               	movlw	32
  3772  0EEE  00BB               	movwf	Serach_Flash_Head@i+1
  3773  0EEF                     L1:	
  3774  0EEF  3040               	movlw	64
  3775  0EF0  023B               	subwf	Serach_Flash_Head@i+1,w
  3776  0EF1  3000               	movlw	0
  3777  0EF2  1903               	skipnz
  3778  0EF3  023A               	subwf	Serach_Flash_Head@i,w
  3779  0EF4  1803               	btfsc	3,0
  3780  0EF5  0008               	return
  3781                           
  3782                           ;save.c: 48: {
  3783                           ;save.c: 49: data = FLASH_ReadWord(i);
  3784  0EF6  083B               	movf	Serach_Flash_Head@i+1,w
  3785  0EF7  00F4               	movwf	FLASH_ReadWord@flashAddr+1
  3786  0EF8  083A               	movf	Serach_Flash_Head@i,w
  3787  0EF9  00F3               	movwf	FLASH_ReadWord@flashAddr
  3788  0EFA  3189  210D  318E   	fcall	_FLASH_ReadWord
  3789  0EFD  0874               	movf	?_FLASH_ReadWord+1,w
  3790  0EFE  0020               	movlb	0	; select bank0
  3791  0EFF  00B9               	movwf	Serach_Flash_Head@data+1
  3792  0F00  0873               	movf	?_FLASH_ReadWord,w
  3793  0F01  00B8               	movwf	Serach_Flash_Head@data
  3794                           
  3795                           ;save.c: 51: if( data == 0x1555 )
  3796  0F02  3055               	movlw	85
  3797  0F03  0638               	xorwf	Serach_Flash_Head@data,w
  3798  0F04  3015               	movlw	21
  3799  0F05  1903               	skipnz
  3800  0F06  0639               	xorwf	Serach_Flash_Head@data+1,w
  3801  0F07  1D03               	btfss	3,2
  3802  0F08  2F0E               	goto	l5391
  3803                           
  3804                           ;save.c: 52: {
  3805                           ;save.c: 53: count++;
  3806  0F09  3001               	movlw	1
  3807  0F0A  00B6               	movwf	??_Serach_Flash_Head
  3808  0F0B  0836               	movf	??_Serach_Flash_Head,w
  3809  0F0C  07B7               	addwf	Serach_Flash_Head@count,f
  3810                           
  3811                           ;save.c: 54: }
  3812  0F0D  2F33               	goto	l5409
  3813  0F0E                     l5391:	
  3814                           
  3815                           ;save.c: 55: else
  3816                           ;save.c: 56: {
  3817                           ;save.c: 57: if( data == 0x3fff && count >1 )
  3818  0F0E  0A38               	incf	Serach_Flash_Head@data,w
  3819  0F0F  303F               	movlw	63
  3820  0F10  1903               	skipnz
  3821  0F11  0639               	xorwf	Serach_Flash_Head@data+1,w
  3822  0F12  1D03               	btfss	3,2
  3823  0F13  2F20               	goto	l5399
  3824  0F14  3002               	movlw	2
  3825  0F15  0237               	subwf	Serach_Flash_Head@count,w
  3826  0F16  1C03               	skipc
  3827  0F17  2F20               	goto	l5399
  3828                           
  3829                           ;save.c: 58: {
  3830                           ;save.c: 59: Cur_Save_Index = i;
  3831  0F18  083B               	movf	Serach_Flash_Head@i+1,w
  3832  0F19  0021               	movlb	1	; select bank1
  3833  0F1A  00AF               	movwf	(_Cur_Save_Index+1)^(0+128)
  3834  0F1B  0020               	movlb	0	; select bank0
  3835  0F1C  083A               	movf	Serach_Flash_Head@i,w
  3836  0F1D  0021               	movlb	1	; select bank1
  3837  0F1E  00AE               	movwf	_Cur_Save_Index^(0+128)
  3838                           
  3839                           ;save.c: 60: break;
  3840  0F1F  0008               	return
  3841  0F20                     l5399:	
  3842                           ;save.c: 61: }
  3843                           
  3844                           
  3845                           ;save.c: 62: else if( data == 0x3fff )
  3846  0F20  0020               	movlb	0	; select bank0
  3847  0F21  0A38               	incf	Serach_Flash_Head@data,w
  3848  0F22  303F               	movlw	63
  3849  0F23  1903               	skipnz
  3850  0F24  0639               	xorwf	Serach_Flash_Head@data+1,w
  3851  0F25  1D03               	btfss	3,2
  3852  0F26  2F31               	goto	l5407
  3853                           
  3854                           ;save.c: 63: {
  3855                           ;save.c: 64: Cur_Save_Index = i;
  3856  0F27  083B               	movf	Serach_Flash_Head@i+1,w
  3857  0F28  0021               	movlb	1	; select bank1
  3858  0F29  00AF               	movwf	(_Cur_Save_Index+1)^(0+128)
  3859  0F2A  0020               	movlb	0	; select bank0
  3860  0F2B  083A               	movf	Serach_Flash_Head@i,w
  3861  0F2C  0021               	movlb	1	; select bank1
  3862  0F2D  00AE               	movwf	_Cur_Save_Index^(0+128)
  3863                           
  3864                           ;save.c: 65: Write_Flash_finish();
  3865  0F2E  318B  2303         	fcall	_Write_Flash_finish
  3866                           
  3867                           ;save.c: 66: break;
  3868  0F30  0008               	return
  3869  0F31                     l5407:	
  3870                           ;save.c: 67: }
  3871                           
  3872                           
  3873                           ;save.c: 68: else
  3874                           ;save.c: 69: {
  3875                           ;save.c: 70: count = 0;
  3876  0F31  0020               	movlb	0	; select bank0
  3877  0F32  01B7               	clrf	Serach_Flash_Head@count
  3878  0F33                     l5409:	
  3879  0F33  3001               	movlw	1
  3880  0F34  0020               	movlb	0	; select bank0
  3881  0F35  07BA               	addwf	Serach_Flash_Head@i,f
  3882  0F36  3000               	movlw	0
  3883  0F37  3DBB               	addwfc	Serach_Flash_Head@i+1,f
  3884  0F38  2EEF               	goto	L1
  3885  0F39                     __end_of_Serach_Flash_Head:	
  3886                           
  3887                           	psect	text4
  3888  0F39                     __ptext4:	
  3889 ;; *************** function _Save_process *****************
  3890 ;; Defined at:
  3891 ;;		line 120 in file "mcc_generated_files/save.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  var_time        2   52[BANK0 ] unsigned int 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3909 ;;Total ram usage:        4 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    9
  3912 ;; This function calls:
  3913 ;;		_Calculate_Time
  3914 ;;		_Save_Write_word
  3915 ;; This function is called by:
  3916 ;;		_main
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _Save_process
  3922  0F39                     _Save_process:	
  3923                           
  3924                           ;save.c: 122: unsigned int var_time=0;
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _Save_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3928  0F39  0020               	movlb	0	; select bank0
  3929  0F3A  01D4               	clrf	Save_process@var_time
  3930  0F3B  01D5               	clrf	Save_process@var_time+1
  3931                           
  3932                           ;save.c: 123: if( time_count == 1 && Record_flag == 1 )
  3933  0F3C  036D               	decf	_time_count,w
  3934  0F3D  1D03               	btfss	3,2
  3935  0F3E  2F6B               	goto	l5495
  3936  0F3F  036B               	decf	_Record_flag,w
  3937  0F40  1D03               	btfss	3,2
  3938  0F41  2F6B               	goto	l5495
  3939                           
  3940                           ;save.c: 124: {
  3941                           ;save.c: 125: if(Cur_temperature_time_ch1 > 120)
  3942  0F42  3079               	movlw	121
  3943  0F43  0021               	movlb	1	; select bank1
  3944  0F44  0236               	subwf	_Cur_temperature_time_ch1^(0+128),w
  3945  0F45  1C03               	skipc
  3946  0F46  0008               	return
  3947                           
  3948                           ;save.c: 126: {
  3949                           ;save.c: 127: var_time = Calculate_Time();
  3950  0F47  3182  220B  318F   	fcall	_Calculate_Time
  3951  0F4A  0020               	movlb	0	; select bank0
  3952  0F4B  00D2               	movwf	??_Save_process
  3953  0F4C  01D3               	clrf	??_Save_process+1
  3954  0F4D  0852               	movf	??_Save_process,w
  3955  0F4E  00D4               	movwf	Save_process@var_time
  3956  0F4F  0853               	movf	??_Save_process+1,w
  3957  0F50  00D5               	movwf	Save_process@var_time+1
  3958                           
  3959                           ;save.c: 128: var_time |= 0x100;
  3960  0F51  1455               	bsf	Save_process@var_time+1,0
  3961                           
  3962                           ;save.c: 129: if(CH1_state == 1) var_time |= 0x400;
  3963  0F52  0021               	movlb	1	; select bank1
  3964  0F53  0334               	decf	_CH1_state^(0+128),w
  3965  0F54  1D03               	btfss	3,2
  3966  0F55  2F58               	goto	l1023
  3967  0F56  0020               	movlb	0	; select bank0
  3968  0F57  1555               	bsf	Save_process@var_time+1,2
  3969  0F58                     l1023:	
  3970                           
  3971                           ;save.c: 131: var_time |= 0x1000;
  3972  0F58  0020               	movlb	0	; select bank0
  3973  0F59  1655               	bsf	Save_process@var_time+1,4
  3974                           
  3975                           ;save.c: 133: Save_Write_word(var_time);
  3976  0F5A  0855               	movf	Save_process@var_time+1,w
  3977  0F5B  00B7               	movwf	Save_Write_word@data+1
  3978  0F5C  0854               	movf	Save_process@var_time,w
  3979  0F5D  00B6               	movwf	Save_Write_word@data
  3980  0F5E  318B  23FB  318F   	fcall	_Save_Write_word
  3981                           
  3982                           ;save.c: 134: Save_Write_word(CH1_temperature);
  3983  0F61  0020               	movlb	0	; select bank0
  3984  0F62  086A               	movf	_CH1_temperature+1,w
  3985  0F63  00B7               	movwf	Save_Write_word@data+1
  3986  0F64  0869               	movf	_CH1_temperature,w
  3987  0F65  00B6               	movwf	Save_Write_word@data
  3988  0F66  318B  23FB         	fcall	_Save_Write_word
  3989                           
  3990                           ;save.c: 136: Cur_temperature_time_ch1 = 0;
  3991  0F68  0021               	movlb	1	; select bank1
  3992  0F69  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  3993                           
  3994                           ;save.c: 137: }
  3995                           ;save.c: 138: }
  3996  0F6A  0008               	return
  3997  0F6B                     l5495:	
  3998                           
  3999                           ;save.c: 139: else if(time_count == 3 && Record_flag == 1)
  4000  0F6B  3003               	movlw	3
  4001  0F6C  0020               	movlb	0	; select bank0
  4002  0F6D  066D               	xorwf	_time_count,w
  4003  0F6E  1D03               	btfss	3,2
  4004  0F6F  0008               	return
  4005  0F70  036B               	decf	_Record_flag,w
  4006  0F71  1D03               	btfss	3,2
  4007  0F72  0008               	return
  4008                           
  4009                           ;save.c: 140: {
  4010                           ;save.c: 141: if(Cur_temperature_time_ch2 > 120)
  4011  0F73  3079               	movlw	121
  4012  0F74  0021               	movlb	1	; select bank1
  4013  0F75  0237               	subwf	_Cur_temperature_time_ch2^(0+128),w
  4014  0F76  1C03               	skipc
  4015  0F77  0008               	return
  4016                           
  4017                           ;save.c: 142: {
  4018                           ;save.c: 143: var_time = Calculate_Time();
  4019  0F78  3182  220B  318F   	fcall	_Calculate_Time
  4020  0F7B  0020               	movlb	0	; select bank0
  4021  0F7C  00D2               	movwf	??_Save_process
  4022  0F7D  01D3               	clrf	??_Save_process+1
  4023  0F7E  0852               	movf	??_Save_process,w
  4024  0F7F  00D4               	movwf	Save_process@var_time
  4025  0F80  0853               	movf	??_Save_process+1,w
  4026  0F81  00D5               	movwf	Save_process@var_time+1
  4027                           
  4028                           ;save.c: 144: var_time |= 0x200;
  4029  0F82  14D5               	bsf	Save_process@var_time+1,1
  4030                           
  4031                           ;save.c: 145: if(CH2_state == 1) var_time |= 0x800;
  4032  0F83  0021               	movlb	1	; select bank1
  4033  0F84  0335               	decf	_CH2_state^(0+128),w
  4034  0F85  1D03               	btfss	3,2
  4035  0F86  2F89               	goto	l1027
  4036  0F87  0020               	movlb	0	; select bank0
  4037  0F88  15D5               	bsf	Save_process@var_time+1,3
  4038  0F89                     l1027:	
  4039                           
  4040                           ;save.c: 147: var_time |= 0x1000;
  4041  0F89  0020               	movlb	0	; select bank0
  4042  0F8A  1655               	bsf	Save_process@var_time+1,4
  4043                           
  4044                           ;save.c: 149: Save_Write_word(var_time);
  4045  0F8B  0855               	movf	Save_process@var_time+1,w
  4046  0F8C  00B7               	movwf	Save_Write_word@data+1
  4047  0F8D  0854               	movf	Save_process@var_time,w
  4048  0F8E  00B6               	movwf	Save_Write_word@data
  4049  0F8F  318B  23FB  318F   	fcall	_Save_Write_word
  4050                           
  4051                           ;save.c: 150: Save_Write_word(CH2_temperature);
  4052  0F92  0879               	movf	_CH2_temperature+1,w
  4053  0F93  0020               	movlb	0	; select bank0
  4054  0F94  00B7               	movwf	Save_Write_word@data+1
  4055  0F95  0878               	movf	_CH2_temperature,w
  4056  0F96  00B6               	movwf	Save_Write_word@data
  4057  0F97  318B  23FB         	fcall	_Save_Write_word
  4058                           
  4059                           ;save.c: 152: Cur_temperature_time_ch2 = 0;
  4060  0F99  0021               	movlb	1	; select bank1
  4061  0F9A  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  4062  0F9B  0008               	return
  4063  0F9C                     __end_of_Save_process:	
  4064                           
  4065                           	psect	text5
  4066  08B1                     __ptext5:	
  4067 ;; *************** function _SYSTEM_Initialize *****************
  4068 ;; Defined at:
  4069 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    4
  4090 ;; This function calls:
  4091 ;;		_ADC_Initialize
  4092 ;;		_EUSART_Initialize
  4093 ;;		_FVR_Initialize
  4094 ;;		_OSCILLATOR_Initialize
  4095 ;;		_PIN_MANAGER_Initialize
  4096 ;;		_SPI_Initialize
  4097 ;;		_TMR0_Initialize
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _SYSTEM_Initialize
  4105  08B1                     _SYSTEM_Initialize:	
  4106                           
  4107                           ;mcc.c: 71: OSCILLATOR_Initialize();
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4111  08B1  3197  27FB  3188   	fcall	_OSCILLATOR_Initialize
  4112                           
  4113                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  4114  08B4  318A  225E  3188   	fcall	_PIN_MANAGER_Initialize
  4115                           
  4116                           ;mcc.c: 73: SPI_Initialize();
  4117  08B7  3188  200D  3188   	fcall	_SPI_Initialize
  4118                           
  4119                           ;mcc.c: 74: EUSART_Initialize();
  4120  08BA  3188  2042  3188   	fcall	_EUSART_Initialize
  4121                           
  4122                           ;mcc.c: 75: ADC_Initialize();
  4123  08BD  3188  2027  3188   	fcall	_ADC_Initialize
  4124                           
  4125                           ;mcc.c: 76: FVR_Initialize();
  4126  08C0  3197  27F2  3188   	fcall	_FVR_Initialize
  4127                           
  4128                           ;mcc.c: 77: TMR0_Initialize();
  4129  08C3  3188  206A         	fcall	_TMR0_Initialize
  4130  08C5  0008               	return
  4131  08C6                     __end_of_SYSTEM_Initialize:	
  4132                           
  4133                           	psect	text6
  4134  086A                     __ptext6:	
  4135 ;; *************** function _TMR0_Initialize *****************
  4136 ;; Defined at:
  4137 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg, status,2
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;Total ram usage:        1 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    3
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_SYSTEM_Initialize
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           
  4166                           ;psect for function _TMR0_Initialize
  4167  086A                     _TMR0_Initialize:	
  4168                           
  4169                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4170                           
  4171                           ;incstack = 0
  4172                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4173  086A  0021               	movlb	1	; select bank1
  4174  086B  0815               	movf	21,w	;volatile
  4175  086C  39C0               	andlw	192
  4176  086D  3817               	iorlw	23
  4177  086E  0095               	movwf	21	;volatile
  4178                           
  4179                           ;tmr0.c: 73: TMR0 = 0xD9;
  4180  086F  30D9               	movlw	217
  4181  0870  0020               	movlb	0	; select bank0
  4182  0871  0095               	movwf	21	;volatile
  4183                           
  4184                           ;tmr0.c: 76: timer0ReloadVal = 217;
  4185  0872  30D9               	movlw	217
  4186  0873  00F3               	movwf	??_TMR0_Initialize
  4187  0874  0873               	movf	??_TMR0_Initialize,w
  4188  0875  0021               	movlb	1	; select bank1
  4189  0876  00EF               	movwf	_timer0ReloadVal^(0+128)	;volatile
  4190                           
  4191                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  4192  0877  110B               	bcf	11,2	;volatile
  4193                           
  4194                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  4195  0878  168B               	bsf	11,5	;volatile
  4196  0879  0008               	return
  4197  087A                     __end_of_TMR0_Initialize:	
  4198                           
  4199                           	psect	text7
  4200  080D                     __ptext7:	
  4201 ;; *************** function _SPI_Initialize *****************
  4202 ;; Defined at:
  4203 ;;		line 64 in file "mcc_generated_files/spi.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    3
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_SYSTEM_Initialize
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _SPI_Initialize
  4233  080D                     _SPI_Initialize:	
  4234                           
  4235                           ;spi.c: 68: SSP1STAT = 0x00;
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4239  080D  0024               	movlb	4	; select bank4
  4240  080E  0194               	clrf	20	;volatile
  4241                           
  4242                           ;spi.c: 71: SSP1CON1 = 0x30;
  4243  080F  3030               	movlw	48
  4244  0810  0095               	movwf	21	;volatile
  4245                           
  4246                           ;spi.c: 74: SSP1ADD = 0x00;
  4247  0811  0192               	clrf	18	;volatile
  4248  0812  0008               	return
  4249  0813                     __end_of_SPI_Initialize:	
  4250                           
  4251                           	psect	text8
  4252  0A5E                     __ptext8:	
  4253 ;; *************** function _PIN_MANAGER_Initialize *****************
  4254 ;; Defined at:
  4255 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;Total ram usage:        0 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    3
  4276 ;; This function calls:
  4277 ;;		Nothing
  4278 ;; This function is called by:
  4279 ;;		_SYSTEM_Initialize
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           
  4284                           ;psect for function _PIN_MANAGER_Initialize
  4285  0A5E                     _PIN_MANAGER_Initialize:	
  4286                           
  4287                           ;pin_manager.c: 51: LATA = 0x7B;
  4288                           
  4289                           ;incstack = 0
  4290                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4291  0A5E  307B               	movlw	123
  4292  0A5F  0022               	movlb	2	; select bank2
  4293  0A60  008C               	movwf	12	;volatile
  4294                           
  4295                           ;pin_manager.c: 52: TRISA = 0x80;
  4296  0A61  3080               	movlw	128
  4297  0A62  0021               	movlb	1	; select bank1
  4298  0A63  008C               	movwf	12	;volatile
  4299                           
  4300                           ;pin_manager.c: 53: ANSELA = 0x00;
  4301  0A64  0023               	movlb	3	; select bank3
  4302  0A65  018C               	clrf	12	;volatile
  4303                           
  4304                           ;pin_manager.c: 55: LATB = 0x00;
  4305  0A66  0022               	movlb	2	; select bank2
  4306  0A67  018D               	clrf	13	;volatile
  4307                           
  4308                           ;pin_manager.c: 56: TRISB = 0xFC;
  4309  0A68  30FC               	movlw	252
  4310  0A69  0021               	movlb	1	; select bank1
  4311  0A6A  008D               	movwf	13	;volatile
  4312                           
  4313                           ;pin_manager.c: 57: ANSELB = 0x10;
  4314  0A6B  3010               	movlw	16
  4315  0A6C  0023               	movlb	3	; select bank3
  4316  0A6D  008D               	movwf	13	;volatile
  4317                           
  4318                           ;pin_manager.c: 58: WPUB = 0x2C;
  4319  0A6E  302C               	movlw	44
  4320  0A6F  0024               	movlb	4	; select bank4
  4321  0A70  008D               	movwf	13	;volatile
  4322                           
  4323                           ;pin_manager.c: 60: LATC = 0x07;
  4324  0A71  3007               	movlw	7
  4325  0A72  0022               	movlb	2	; select bank2
  4326  0A73  008E               	movwf	14	;volatile
  4327                           
  4328                           ;pin_manager.c: 61: TRISC = 0xD0;
  4329  0A74  30D0               	movlw	208
  4330  0A75  0021               	movlb	1	; select bank1
  4331  0A76  008E               	movwf	14	;volatile
  4332                           
  4333                           ;pin_manager.c: 62: ANSELC = 0x00;
  4334  0A77  0023               	movlb	3	; select bank3
  4335  0A78  018E               	clrf	14	;volatile
  4336                           
  4337                           ;pin_manager.c: 64: WPUE = 0x00;
  4338  0A79  0024               	movlb	4	; select bank4
  4339  0A7A  0190               	clrf	16	;volatile
  4340                           
  4341                           ;pin_manager.c: 66: OPTION_REGbits.nWPUEN = 0x00;
  4342  0A7B  0021               	movlb	1	; select bank1
  4343  0A7C  1395               	bcf	21,7	;volatile
  4344                           
  4345                           ;pin_manager.c: 68: APFCON = 0x00;
  4346  0A7D  0022               	movlb	2	; select bank2
  4347  0A7E  019D               	clrf	29	;volatile
  4348  0A7F  0008               	return
  4349  0A80                     __end_of_PIN_MANAGER_Initialize:	
  4350                           
  4351                           	psect	text9
  4352  17FB                     __ptext9:	
  4353 ;; *************** function _OSCILLATOR_Initialize *****************
  4354 ;; Defined at:
  4355 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      void 
  4362 ;; Registers used:
  4363 ;;		wreg, status,2
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        0 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    3
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_SYSTEM_Initialize
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _OSCILLATOR_Initialize
  4385  17FB                     _OSCILLATOR_Initialize:	
  4386                           
  4387                           ;mcc.c: 82: OSCCON = 0x68;
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4391  17FB  3068               	movlw	104
  4392  17FC  0021               	movlb	1	; select bank1
  4393  17FD  0099               	movwf	25	;volatile
  4394                           
  4395                           ;mcc.c: 84: OSCSTAT = 0x00;
  4396  17FE  019A               	clrf	26	;volatile
  4397  17FF  0008               	return
  4398  1800                     __end_of_OSCILLATOR_Initialize:	
  4399                           
  4400                           	psect	text10
  4401  17F2                     __ptext10:	
  4402 ;; *************** function _FVR_Initialize *****************
  4403 ;; Defined at:
  4404 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;		None
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      void 
  4411 ;; Registers used:
  4412 ;;		wreg
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;Total ram usage:        0 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    3
  4425 ;; This function calls:
  4426 ;;		Nothing
  4427 ;; This function is called by:
  4428 ;;		_SYSTEM_Initialize
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _FVR_Initialize
  4434  17F2                     _FVR_Initialize:	
  4435                           
  4436                           ;fvr.c: 60: FVRCON = 0x82;
  4437                           
  4438                           ;incstack = 0
  4439                           ; Regs used in _FVR_Initialize: [wreg]
  4440  17F2  3082               	movlw	130
  4441  17F3  0022               	movlb	2	; select bank2
  4442  17F4  0097               	movwf	23	;volatile
  4443  17F5  0008               	return
  4444  17F6                     __end_of_FVR_Initialize:	
  4445                           
  4446                           	psect	text11
  4447  0842                     __ptext11:	
  4448 ;; *************** function _EUSART_Initialize *****************
  4449 ;; Defined at:
  4450 ;;		line 56 in file "mcc_generated_files/eusart.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    3
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_SYSTEM_Initialize
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _EUSART_Initialize
  4480  0842                     _EUSART_Initialize:	
  4481                           
  4482                           ;eusart.c: 60: BAUDCON = 0x48;
  4483                           
  4484                           ;incstack = 0
  4485                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4486  0842  3048               	movlw	72
  4487  0843  0023               	movlb	3	; select bank3
  4488  0844  009F               	movwf	31	;volatile
  4489                           
  4490                           ;eusart.c: 63: RCSTA = 0x80;
  4491  0845  3080               	movlw	128
  4492  0846  009D               	movwf	29	;volatile
  4493                           
  4494                           ;eusart.c: 66: TXSTA = 0x26;
  4495  0847  3026               	movlw	38
  4496  0848  009E               	movwf	30	;volatile
  4497                           
  4498                           ;eusart.c: 69: SPBRGL = 0x67;
  4499  0849  3067               	movlw	103
  4500  084A  009B               	movwf	27	;volatile
  4501                           
  4502                           ;eusart.c: 72: SPBRGH = 0x00;
  4503  084B  019C               	clrf	28	;volatile
  4504  084C  0008               	return
  4505  084D                     __end_of_EUSART_Initialize:	
  4506                           
  4507                           	psect	text12
  4508  0827                     __ptext12:	
  4509 ;; *************** function _ADC_Initialize *****************
  4510 ;; Defined at:
  4511 ;;		line 65 in file "mcc_generated_files/adc.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, status,2
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    3
  4532 ;; This function calls:
  4533 ;;		Nothing
  4534 ;; This function is called by:
  4535 ;;		_SYSTEM_Initialize
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           
  4540                           ;psect for function _ADC_Initialize
  4541  0827                     _ADC_Initialize:	
  4542                           
  4543                           ;adc.c: 69: ADCON0 = 0x01;
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4547  0827  3001               	movlw	1
  4548  0828  0021               	movlb	1	; select bank1
  4549  0829  009D               	movwf	29	;volatile
  4550                           
  4551                           ;adc.c: 72: ADCON1 = 0xC3;
  4552  082A  30C3               	movlw	195
  4553  082B  009E               	movwf	30	;volatile
  4554                           
  4555                           ;adc.c: 75: ADRESL = 0x00;
  4556  082C  019B               	clrf	27	;volatile
  4557                           
  4558                           ;adc.c: 78: ADRESH = 0x00;
  4559  082D  019C               	clrf	28	;volatile
  4560  082E  0008               	return
  4561  082F                     __end_of_ADC_Initialize:	
  4562                           
  4563                           	psect	text13
  4564  0543                     __ptext13:	
  4565 ;; *************** function _Key_Process *****************
  4566 ;; Defined at:
  4567 ;;		line 42 in file "mcc_generated_files/key.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;		None
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  i               2   67[BANK0 ] unsigned int 
  4572 ;;  data_temp       2   64[BANK0 ] unsigned int 
  4573 ;;  gKeyValue       1   66[BANK0 ] unsigned char 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;Total ram usage:        6 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:   12
  4590 ;; This function calls:
  4591 ;;		_EUSART_Write
  4592 ;;		_FLASH_ReadWord
  4593 ;;		_Key_Scan
  4594 ;;		_Save_Write_time
  4595 ;;		_SendCmd_1621
  4596 ;;		_Set_finish_flag
  4597 ;;		_Set_start_flag
  4598 ;;		_Write_Flash_finish
  4599 ;;		_Write_Flash_head
  4600 ;;		_temperature_process
  4601 ;; This function is called by:
  4602 ;;		_main
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function _Key_Process
  4608  0543                     _Key_Process:	
  4609                           
  4610                           ;key.c: 44: unsigned char gKeyValue=0;
  4611                           
  4612                           ;incstack = 0
  4613                           ; Regs used in _Key_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4614  0543  0020               	movlb	0	; select bank0
  4615  0544  01E2               	clrf	Key_Process@gKeyValue
  4616                           
  4617                           ;key.c: 46: unsigned int i;
  4618                           ;key.c: 47: unsigned int data_temp;
  4619                           ;key.c: 49: LongPressSec = 0;
  4620  0545  0021               	movlb	1	; select bank1
  4621  0546  01B8               	clrf	_LongPressSec^(0+128)
  4622                           
  4623                           ;key.c: 50: gKeyValue=Key_Scan();
  4624  0547  3187  27DC  3185   	fcall	_Key_Scan
  4625  054A  0020               	movlb	0	; select bank0
  4626  054B  00DF               	movwf	??_Key_Process
  4627  054C  085F               	movf	??_Key_Process,w
  4628  054D  00E2               	movwf	Key_Process@gKeyValue
  4629                           
  4630                           ;key.c: 51: if(gKeyValue)
  4631  054E  0862               	movf	Key_Process@gKeyValue,w
  4632  054F  1903               	btfsc	3,2
  4633  0550  0008               	return
  4634                           
  4635                           ;key.c: 52: {
  4636                           ;key.c: 53: do { LATA3 = 0; } while(0);
  4637  0551  0022               	movlb	2	; select bank2
  4638  0552  118C               	bcf	12,3	;volatile
  4639                           
  4640                           ;key.c: 54: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  4641  0553  0020               	movlb	0	; select bank0
  4642  0554  036B               	decf	_Record_flag,w
  4643  0555  1D03               	btfss	3,2
  4644  0556  2DDF               	goto	l5473
  4645  0557  0022               	movlb	2	; select bank2
  4646  0558  120C               	bcf	12,4	;volatile
  4647                           
  4648                           ;key.c: 55: switch(gKeyValue)
  4649  0559  2DDF               	goto	l5473
  4650  055A                     l887:	
  4651                           ;key.c: 58: while( !(LongPressSec > 2 || RB5 == 1) ) asm("clrwdt");
  4652                           
  4653                           ;key.c: 56: {
  4654                           ;key.c: 57: case 0x01:
  4655                           
  4656  055A  0064               	clrwdt	;# 
  4657  055B                     l5421:	
  4658  055B  3003               	movlw	3
  4659  055C  0021               	movlb	1	; select bank1
  4660  055D  0238               	subwf	_LongPressSec^(0+128),w
  4661  055E  1803               	skipnc
  4662  055F  2D63               	goto	l5425
  4663  0560  0020               	movlb	0	; select bank0
  4664  0561  1E8D               	btfss	13,5	;volatile
  4665  0562  2D5A               	goto	l887
  4666  0563                     l5425:	
  4667                           
  4668                           ;key.c: 59: if(LongPressSec > 2)
  4669  0563  3003               	movlw	3
  4670  0564  0021               	movlb	1	; select bank1
  4671  0565  0238               	subwf	_LongPressSec^(0+128),w
  4672  0566  1C03               	skipc
  4673  0567  2D70               	goto	l891
  4674                           
  4675                           ;key.c: 60: {
  4676                           ;key.c: 61: do { LATA2 = 0; } while(0);
  4677  0568  0022               	movlb	2	; select bank2
  4678  0569  110C               	bcf	12,2	;volatile
  4679                           
  4680                           ;key.c: 62: do { LATA3 = 1; } while(0);
  4681  056A  158C               	bsf	12,3	;volatile
  4682                           
  4683                           ;key.c: 63: SendCmd_1621(0x04);
  4684  056B  3004               	movlw	4
  4685  056C  3188  20C6  3185   	fcall	_SendCmd_1621
  4686                           
  4687                           ;key.c: 64: }
  4688  056F  2DA1               	goto	l899
  4689  0570                     l891:	
  4690                           
  4691                           ;key.c: 66: else
  4692                           ;key.c: 67: {
  4693                           ;key.c: 68: SWDTEN = 0;
  4694  0570  1017               	bcf	23,0	;volatile
  4695                           
  4696                           ;key.c: 69: for(i=0x2000;i<0x2000+1000;i++)
  4697  0571  3000               	movlw	0
  4698  0572  0020               	movlb	0	; select bank0
  4699  0573  00E3               	movwf	Key_Process@i
  4700  0574  3020               	movlw	32
  4701  0575  00E4               	movwf	Key_Process@i+1
  4702  0576  3023               	movlw	35
  4703  0577  0264               	subwf	Key_Process@i+1,w
  4704  0578  30E8               	movlw	232
  4705  0579  1903               	skipnz
  4706  057A  0263               	subwf	Key_Process@i,w
  4707  057B  1803               	btfsc	3,0
  4708  057C  2D9E               	goto	l898
  4709  057D                     l5433:	
  4710                           
  4711                           ;key.c: 70: {
  4712                           ;key.c: 71: data_temp = FLASH_ReadWord(i);
  4713  057D  0864               	movf	Key_Process@i+1,w
  4714  057E  00F4               	movwf	FLASH_ReadWord@flashAddr+1
  4715  057F  0863               	movf	Key_Process@i,w
  4716  0580  00F3               	movwf	FLASH_ReadWord@flashAddr
  4717  0581  3189  210D  3185   	fcall	_FLASH_ReadWord
  4718  0584  0874               	movf	?_FLASH_ReadWord+1,w
  4719  0585  0020               	movlb	0	; select bank0
  4720  0586  00E1               	movwf	Key_Process@data_temp+1
  4721  0587  0873               	movf	?_FLASH_ReadWord,w
  4722  0588  00E0               	movwf	Key_Process@data_temp
  4723                           
  4724                           ;key.c: 72: EUSART_Write(data_temp>>8);
  4725  0589  0861               	movf	Key_Process@data_temp+1,w
  4726  058A  3188  201F  3185   	fcall	_EUSART_Write
  4727                           
  4728                           ;key.c: 73: EUSART_Write(data_temp&0xff);
  4729  058D  0020               	movlb	0	; select bank0
  4730  058E  0860               	movf	Key_Process@data_temp,w
  4731  058F  3188  201F  3185   	fcall	_EUSART_Write
  4732  0592  3001               	movlw	1
  4733  0593  0020               	movlb	0	; select bank0
  4734  0594  07E3               	addwf	Key_Process@i,f
  4735  0595  3000               	movlw	0
  4736  0596  3DE4               	addwfc	Key_Process@i+1,f
  4737  0597  3023               	movlw	35
  4738  0598  0264               	subwf	Key_Process@i+1,w
  4739  0599  30E8               	movlw	232
  4740  059A  1903               	skipnz
  4741  059B  0263               	subwf	Key_Process@i,w
  4742  059C  1C03               	skipc
  4743  059D  2D7D               	goto	l5433
  4744  059E                     l898:	
  4745                           
  4746                           ;key.c: 75: }
  4747                           ;key.c: 76: SWDTEN = 1;
  4748  059E  0021               	movlb	1	; select bank1
  4749  059F  1417               	bsf	23,0	;volatile
  4750  05A0  0064               	clrwdt	;# 
  4751  05A1                     l899:	
  4752                           ;key.c: 78: }
  4753                           ;key.c: 80: while(RB5 == 0) asm("clrwdt");
  4754                           
  4755  05A1  0020               	movlb	0	; select bank0
  4756  05A2  1A8D               	btfsc	13,5	;volatile
  4757  05A3  0008               	return
  4758  05A4  0064               	clrwdt	;# 
  4759  05A5  2DA1               	goto	l899
  4760  05A6                     l905:	
  4761                           ;key.c: 83: while( !(LongPressSec > 2 || RA7 == 1) )asm("clrwdt");
  4762                           
  4763                           ;key.c: 82: case 0x02:
  4764                           
  4765                           ;key.c: 81: break;
  4766                           
  4767  05A6  0064               	clrwdt	;# 
  4768  05A7                     l5439:	
  4769  05A7  3003               	movlw	3
  4770  05A8  0021               	movlb	1	; select bank1
  4771  05A9  0238               	subwf	_LongPressSec^(0+128),w
  4772  05AA  1803               	skipnc
  4773  05AB  2DAF               	goto	l5443
  4774  05AC  0020               	movlb	0	; select bank0
  4775  05AD  1F8C               	btfss	12,7	;volatile
  4776  05AE  2DA6               	goto	l905
  4777  05AF                     l5443:	
  4778                           
  4779                           ;key.c: 84: if(LongPressSec > 2)
  4780  05AF  3003               	movlw	3
  4781  05B0  0021               	movlb	1	; select bank1
  4782  05B1  0238               	subwf	_LongPressSec^(0+128),w
  4783  05B2  1C03               	skipc
  4784  05B3  2DD2               	goto	l5467
  4785                           
  4786                           ;key.c: 85: {
  4787                           ;key.c: 86: if(Record_flag == 0)
  4788  05B4  0020               	movlb	0	; select bank0
  4789  05B5  086B               	movf	_Record_flag,w
  4790  05B6  1D03               	btfss	3,2
  4791  05B7  2DCB               	goto	l5463
  4792                           
  4793                           ;key.c: 87: {
  4794                           ;key.c: 88: Set_start_flag();
  4795  05B8  3188  2007  3185   	fcall	_Set_start_flag
  4796                           
  4797                           ;key.c: 89: Write_Flash_head();
  4798  05BB  318B  2332  3185   	fcall	_Write_Flash_head
  4799                           
  4800                           ;key.c: 90: Save_Write_time();
  4801  05BE  3187  276A  3185   	fcall	_Save_Write_time
  4802                           
  4803                           ;key.c: 91: Cur_temperature_time_ch1 = 0;
  4804  05C1  0021               	movlb	1	; select bank1
  4805  05C2  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  4806                           
  4807                           ;key.c: 92: Cur_temperature_time_ch2 = 0;
  4808  05C3  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  4809                           
  4810                           ;key.c: 93: CH1_temperature = 0;
  4811  05C4  0020               	movlb	0	; select bank0
  4812  05C5  01E9               	clrf	_CH1_temperature
  4813  05C6  01EA               	clrf	_CH1_temperature+1
  4814                           
  4815                           ;key.c: 94: CH2_temperature = 0;
  4816  05C7  01F8               	clrf	_CH2_temperature
  4817  05C8  01F9               	clrf	_CH2_temperature+1
  4818                           
  4819                           ;key.c: 95: time_count = 0;
  4820  05C9  01ED               	clrf	_time_count
  4821                           
  4822                           ;key.c: 96: }
  4823  05CA  2DDA               	goto	l913
  4824  05CB                     l5463:	
  4825                           
  4826                           ;key.c: 97: else
  4827                           ;key.c: 98: {
  4828                           ;key.c: 99: Set_finish_flag();
  4829  05CB  3197  27F6  3185   	fcall	_Set_finish_flag
  4830                           
  4831                           ;key.c: 100: Write_Flash_finish();
  4832  05CE  318B  2303  3185   	fcall	_Write_Flash_finish
  4833                           
  4834                           ;key.c: 101: }
  4835                           ;key.c: 102: }
  4836  05D1  2DDA               	goto	l913
  4837  05D2                     l5467:	
  4838                           
  4839                           ;key.c: 103: else
  4840                           ;key.c: 104: {
  4841                           ;key.c: 105: time_count = 5;
  4842  05D2  3005               	movlw	5
  4843  05D3  0020               	movlb	0	; select bank0
  4844  05D4  00DF               	movwf	??_Key_Process
  4845  05D5  085F               	movf	??_Key_Process,w
  4846  05D6  00ED               	movwf	_time_count
  4847                           
  4848                           ;key.c: 106: temperature_process();
  4849  05D7  318C  2431  3185   	fcall	_temperature_process
  4850  05DA                     l913:	
  4851                           ;key.c: 107: }
  4852                           ;key.c: 108: while(RA7 == 0)asm("clrwdt");
  4853                           
  4854  05DA  0020               	movlb	0	; select bank0
  4855  05DB  1B8C               	btfsc	12,7	;volatile
  4856  05DC  0008               	return
  4857  05DD  0064               	clrwdt	;# 
  4858  05DE  2DDA               	goto	l913
  4859  05DF                     l5473:	
  4860                           ;key.c: 111: }
  4861                           
  4862                           ;key.c: 110: default:break;
  4863                           
  4864                           ;key.c: 109: break;
  4865                           
  4866  05DF  0020               	movlb	0	; select bank0
  4867  05E0  0862               	movf	Key_Process@gKeyValue,w
  4868                           
  4869                           ; Switch size 1, requested type "space"
  4870                           ; Number of cases is 2, Range of values is 1 to 2
  4871                           ; switch strategies available:
  4872                           ; Name         Instructions Cycles
  4873                           ; simple_byte            7     4 (average)
  4874                           ; direct_byte           13     9 (fixed)
  4875                           ; jumptable            263     9 (fixed)
  4876                           ;	Chosen strategy is simple_byte
  4877  05E1  3A01               	xorlw	1	; case 1
  4878  05E2  1903               	skipnz
  4879  05E3  2D5B               	goto	l5421
  4880  05E4  3A03               	xorlw	3	; case 2
  4881  05E5  1903               	skipnz
  4882  05E6  2DA7               	goto	l5439
  4883  05E7  2DE9               	goto	l917
  4884  05E8  0008               	return
  4885  05E9                     l917:	
  4886  05E9  0008               	return
  4887  05EA                     __end_of_Key_Process:	
  4888                           
  4889                           	psect	text14
  4890  0C31                     __ptext14:	
  4891 ;; *************** function _temperature_process *****************
  4892 ;; Defined at:
  4893 ;;		line 381 in file "mcc_generated_files/max31856.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:   11
  4914 ;; This function calls:
  4915 ;;		_Two_Display
  4916 ;;		_one_temperature_trans
  4917 ;;		_temperature_display
  4918 ;;		_time_Display
  4919 ;; This function is called by:
  4920 ;;		_main
  4921 ;;		_Key_Process
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           
  4926                           ;psect for function _temperature_process
  4927  0C31                     _temperature_process:	
  4928                           
  4929                           ;max31856.c: 383: switch(time_count)
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _temperature_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4933  0C31  2C55               	goto	l5283
  4934  0C32                     l5251:	
  4935                           ;max31856.c: 384: {
  4936                           ;max31856.c: 385: case 0:
  4937                           
  4938                           
  4939                           ;max31856.c: 386: Two_Display(1);
  4940  0C32  3001               	movlw	1
  4941  0C33  318B  2361  318C   	fcall	_Two_Display
  4942                           
  4943                           ;max31856.c: 387: do { LATA1 = 1; } while(0);
  4944  0C36  0022               	movlb	2	; select bank2
  4945  0C37  148C               	bsf	12,1	;volatile
  4946                           
  4947                           ;max31856.c: 388: do { LATA0 = 1; } while(0);
  4948  0C38  140C               	bsf	12,0	;volatile
  4949                           
  4950                           ;max31856.c: 389: do { LATA0 = 0; } while(0);
  4951  0C39  100C               	bcf	12,0	;volatile
  4952                           
  4953                           ;max31856.c: 390: one_temperature_trans();
  4954  0C3A  318D  255F         	fcall	_one_temperature_trans
  4955                           
  4956                           ;max31856.c: 391: do { LATA0 = 1; } while(0);
  4957  0C3C  0022               	movlb	2	; select bank2
  4958  0C3D  140C               	bsf	12,0	;volatile
  4959                           
  4960                           ;max31856.c: 392: break;
  4961  0C3E  0008               	return
  4962  0C3F                     l5263:	
  4963                           ;max31856.c: 393: case 1:
  4964                           
  4965                           
  4966                           ;max31856.c: 394: temperature_display();
  4967  0C3F  318C  24DC         	fcall	_temperature_display
  4968                           
  4969                           ;max31856.c: 395: break;
  4970  0C41  0008               	return
  4971  0C42                     l5265:	
  4972                           ;max31856.c: 396: case 2:
  4973                           
  4974                           
  4975                           ;max31856.c: 397: Two_Display(2);
  4976  0C42  3002               	movlw	2
  4977  0C43  318B  2361  318C   	fcall	_Two_Display
  4978                           
  4979                           ;max31856.c: 398: do { LATA0 = 1; } while(0);
  4980  0C46  0022               	movlb	2	; select bank2
  4981  0C47  140C               	bsf	12,0	;volatile
  4982                           
  4983                           ;max31856.c: 399: do { LATA1 = 1; } while(0);
  4984  0C48  148C               	bsf	12,1	;volatile
  4985                           
  4986                           ;max31856.c: 400: do { LATA1 = 0; } while(0);
  4987  0C49  108C               	bcf	12,1	;volatile
  4988                           
  4989                           ;max31856.c: 401: one_temperature_trans();
  4990  0C4A  318D  255F         	fcall	_one_temperature_trans
  4991                           
  4992                           ;max31856.c: 402: do { LATA1 = 1; } while(0);
  4993  0C4C  0022               	movlb	2	; select bank2
  4994  0C4D  148C               	bsf	12,1	;volatile
  4995                           
  4996                           ;max31856.c: 403: break;
  4997  0C4E  0008               	return
  4998  0C4F                     l5277:	
  4999                           ;max31856.c: 404: case 3:
  5000                           
  5001                           
  5002                           ;max31856.c: 405: temperature_display();
  5003  0C4F  318C  24DC         	fcall	_temperature_display
  5004                           
  5005                           ;max31856.c: 406: break;
  5006  0C51  0008               	return
  5007  0C52                     l5279:	
  5008                           ;max31856.c: 407: case 5:
  5009                           
  5010                           
  5011                           ;max31856.c: 408: time_Display();
  5012  0C52  3185  25EA         	fcall	_time_Display
  5013                           
  5014                           ;max31856.c: 411: }
  5015                           
  5016                           ;max31856.c: 410: default:break;
  5017                           
  5018                           ;max31856.c: 409: break;
  5019  0C54  0008               	return
  5020  0C55                     l5283:	
  5021  0C55  0020               	movlb	0	; select bank0
  5022  0C56  086D               	movf	_time_count,w
  5023                           
  5024                           ; Switch size 1, requested type "space"
  5025                           ; Number of cases is 5, Range of values is 0 to 5
  5026                           ; switch strategies available:
  5027                           ; Name         Instructions Cycles
  5028                           ; simple_byte           16     9 (average)
  5029                           ; direct_byte           18     6 (fixed)
  5030                           ; jumptable            260     6 (fixed)
  5031                           ;	Chosen strategy is simple_byte
  5032  0C57  3A00               	xorlw	0	; case 0
  5033  0C58  1903               	skipnz
  5034  0C59  2C32               	goto	l5251
  5035  0C5A  3A01               	xorlw	1	; case 1
  5036  0C5B  1903               	skipnz
  5037  0C5C  2C3F               	goto	l5263
  5038  0C5D  3A03               	xorlw	3	; case 2
  5039  0C5E  1903               	skipnz
  5040  0C5F  2C42               	goto	l5265
  5041  0C60  3A01               	xorlw	1	; case 3
  5042  0C61  1903               	skipnz
  5043  0C62  2C4F               	goto	l5277
  5044  0C63  3A06               	xorlw	6	; case 5
  5045  0C64  1903               	skipnz
  5046  0C65  2C52               	goto	l5279
  5047  0C66  2C67               	goto	l589
  5048  0C67                     l589:	
  5049  0C67  0008               	return
  5050  0C68                     __end_of_temperature_process:	
  5051                           
  5052                           	psect	text15
  5053  05EA                     __ptext15:	
  5054 ;; *************** function _time_Display *****************
  5055 ;; Defined at:
  5056 ;;		line 167 in file "mcc_generated_files/ht1621.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;		None
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  num             4   19[BANK0 ] unsigned char [4]
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;Total ram usage:        7 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    6
  5077 ;; This function calls:
  5078 ;;		_Bq32k_Rtc_Read_Time
  5079 ;;		_WriteAll_1621
  5080 ;;		___awdiv
  5081 ;;		___awmod
  5082 ;; This function is called by:
  5083 ;;		_temperature_process
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function _time_Display
  5089  05EA                     _time_Display:	
  5090                           
  5091                           ;ht1621.c: 169: unsigned char num[4]={0};
  5092                           
  5093                           ;incstack = 0
  5094                           ; Regs used in _time_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5095  05EA  0021               	movlb	1	; select bank1
  5096  05EB  082B               	movf	(time_Display@F2129+3)^(0+128),w
  5097  05EC  0020               	movlb	0	; select bank0
  5098  05ED  00B6               	movwf	time_Display@num+3
  5099  05EE  0021               	movlb	1	; select bank1
  5100  05EF  082A               	movf	(time_Display@F2129+2)^(0+128),w
  5101  05F0  0020               	movlb	0	; select bank0
  5102  05F1  00B5               	movwf	time_Display@num+2
  5103  05F2  0021               	movlb	1	; select bank1
  5104  05F3  0829               	movf	(time_Display@F2129+1)^(0+128),w
  5105  05F4  0020               	movlb	0	; select bank0
  5106  05F5  00B4               	movwf	time_Display@num+1
  5107  05F6  0021               	movlb	1	; select bank1
  5108  05F7  0828               	movf	time_Display@F2129^(0+128),w
  5109  05F8  0020               	movlb	0	; select bank0
  5110  05F9  00B3               	movwf	time_Display@num
  5111                           
  5112                           ;ht1621.c: 170: Bq32k_Rtc_Read_Time(&rtc_tm);
  5113  05FA  30DA               	movlw	(low (_rtc_tm| 0))& (0+255)
  5114  05FB  318F  279C  3185   	fcall	_Bq32k_Rtc_Read_Time
  5115                           
  5116                           ;ht1621.c: 171: num[0] = Dis_TAB[rtc_tm.hours / 10];
  5117  05FE  300A               	movlw	10
  5118  05FF  00F3               	movwf	___awdiv@divisor
  5119  0600  3000               	movlw	0
  5120  0601  00F4               	movwf	___awdiv@divisor+1
  5121  0602  0021               	movlb	1	; select bank1
  5122  0603  085C               	movf	(_rtc_tm^(0+128)+2),w
  5123  0604  0020               	movlb	0	; select bank0
  5124  0605  00B0               	movwf	??_time_Display
  5125  0606  01B1               	clrf	??_time_Display+1
  5126  0607  0830               	movf	??_time_Display,w
  5127  0608  00F5               	movwf	___awdiv@dividend
  5128  0609  0831               	movf	??_time_Display+1,w
  5129  060A  00F6               	movwf	___awdiv@dividend+1
  5130  060B  318E  2693  3185   	fcall	___awdiv
  5131  060E  0874               	movf	?___awdiv+1,w
  5132  060F  0085               	movwf	5
  5133  0610  0873               	movf	?___awdiv,w
  5134  0611  0084               	movwf	4
  5135  0612  3000               	movlw	low (_Dis_TAB| (0+32768))
  5136  0613  0784               	addwf	4,f
  5137  0614  3090               	movlw	high (_Dis_TAB| (0+32768))
  5138  0615  3D85               	addwfc	5,f
  5139  0616  0800               	movf	0,w	;code access
  5140  0617  0020               	movlb	0	; select bank0
  5141  0618  00B2               	movwf	??_time_Display+2
  5142  0619  0832               	movf	??_time_Display+2,w
  5143  061A  00B3               	movwf	time_Display@num
  5144                           
  5145                           ;ht1621.c: 172: num[0] |= 0x08;
  5146  061B  15B3               	bsf	time_Display@num,3
  5147                           
  5148                           ;ht1621.c: 173: num[1] = Dis_TAB[rtc_tm.hours % 10];
  5149  061C  300A               	movlw	10
  5150  061D  00F3               	movwf	___awmod@divisor
  5151  061E  3000               	movlw	0
  5152  061F  00F4               	movwf	___awmod@divisor+1
  5153  0620  0021               	movlb	1	; select bank1
  5154  0621  085C               	movf	(_rtc_tm^(0+128)+2),w
  5155  0622  0020               	movlb	0	; select bank0
  5156  0623  00B0               	movwf	??_time_Display
  5157  0624  01B1               	clrf	??_time_Display+1
  5158  0625  0830               	movf	??_time_Display,w
  5159  0626  00F5               	movwf	___awmod@dividend
  5160  0627  0831               	movf	??_time_Display+1,w
  5161  0628  00F6               	movwf	___awmod@dividend+1
  5162  0629  318D  2519  3185   	fcall	___awmod
  5163  062C  0874               	movf	?___awmod+1,w
  5164  062D  0085               	movwf	5
  5165  062E  0873               	movf	?___awmod,w
  5166  062F  0084               	movwf	4
  5167  0630  3000               	movlw	low (_Dis_TAB| (0+32768))
  5168  0631  0784               	addwf	4,f
  5169  0632  3090               	movlw	high (_Dis_TAB| (0+32768))
  5170  0633  3D85               	addwfc	5,f
  5171  0634  0800               	movf	0,w	;code access
  5172  0635  0020               	movlb	0	; select bank0
  5173  0636  00B2               	movwf	??_time_Display+2
  5174  0637  0832               	movf	??_time_Display+2,w
  5175  0638  00B4               	movwf	time_Display@num+1
  5176                           
  5177                           ;ht1621.c: 174: num[2] = Dis_TAB[rtc_tm.minutes / 10];
  5178  0639  300A               	movlw	10
  5179  063A  00F3               	movwf	___awdiv@divisor
  5180  063B  3000               	movlw	0
  5181  063C  00F4               	movwf	___awdiv@divisor+1
  5182  063D  0021               	movlb	1	; select bank1
  5183  063E  085B               	movf	(_rtc_tm^(0+128)+1),w
  5184  063F  0020               	movlb	0	; select bank0
  5185  0640  00B0               	movwf	??_time_Display
  5186  0641  01B1               	clrf	??_time_Display+1
  5187  0642  0830               	movf	??_time_Display,w
  5188  0643  00F5               	movwf	___awdiv@dividend
  5189  0644  0831               	movf	??_time_Display+1,w
  5190  0645  00F6               	movwf	___awdiv@dividend+1
  5191  0646  318E  2693  3185   	fcall	___awdiv
  5192  0649  0874               	movf	?___awdiv+1,w
  5193  064A  0085               	movwf	5
  5194  064B  0873               	movf	?___awdiv,w
  5195  064C  0084               	movwf	4
  5196  064D  3000               	movlw	low (_Dis_TAB| (0+32768))
  5197  064E  0784               	addwf	4,f
  5198  064F  3090               	movlw	high (_Dis_TAB| (0+32768))
  5199  0650  3D85               	addwfc	5,f
  5200  0651  0800               	movf	0,w	;code access
  5201  0652  0020               	movlb	0	; select bank0
  5202  0653  00B2               	movwf	??_time_Display+2
  5203  0654  0832               	movf	??_time_Display+2,w
  5204  0655  00B5               	movwf	time_Display@num+2
  5205                           
  5206                           ;ht1621.c: 175: num[3] = Dis_TAB[rtc_tm.minutes % 10];
  5207  0656  300A               	movlw	10
  5208  0657  00F3               	movwf	___awmod@divisor
  5209  0658  3000               	movlw	0
  5210  0659  00F4               	movwf	___awmod@divisor+1
  5211  065A  0021               	movlb	1	; select bank1
  5212  065B  085B               	movf	(_rtc_tm^(0+128)+1),w
  5213  065C  0020               	movlb	0	; select bank0
  5214  065D  00B0               	movwf	??_time_Display
  5215  065E  01B1               	clrf	??_time_Display+1
  5216  065F  0830               	movf	??_time_Display,w
  5217  0660  00F5               	movwf	___awmod@dividend
  5218  0661  0831               	movf	??_time_Display+1,w
  5219  0662  00F6               	movwf	___awmod@dividend+1
  5220  0663  318D  2519  3185   	fcall	___awmod
  5221  0666  0874               	movf	?___awmod+1,w
  5222  0667  0085               	movwf	5
  5223  0668  0873               	movf	?___awmod,w
  5224  0669  0084               	movwf	4
  5225  066A  3000               	movlw	low (_Dis_TAB| (0+32768))
  5226  066B  0784               	addwf	4,f
  5227  066C  3090               	movlw	high (_Dis_TAB| (0+32768))
  5228  066D  3D85               	addwfc	5,f
  5229  066E  0800               	movf	0,w	;code access
  5230  066F  0020               	movlb	0	; select bank0
  5231  0670  00B2               	movwf	??_time_Display+2
  5232  0671  0832               	movf	??_time_Display+2,w
  5233  0672  00B6               	movwf	time_Display@num+3
  5234                           
  5235                           ;ht1621.c: 176: WriteAll_1621(0, num, 4);
  5236  0673  3033               	movlw	low time_Display@num
  5237  0674  00A0               	movwf	WriteAll_1621@p
  5238  0675  3000               	movlw	high time_Display@num
  5239  0676  00A1               	movwf	WriteAll_1621@p+1
  5240  0677  3004               	movlw	4
  5241  0678  00B0               	movwf	??_time_Display
  5242  0679  0830               	movf	??_time_Display,w
  5243  067A  00A2               	movwf	WriteAll_1621@cnt
  5244  067B  3000               	movlw	0
  5245  067C  318B  2392         	fcall	_WriteAll_1621
  5246  067E  0008               	return
  5247  067F                     __end_of_time_Display:	
  5248                           
  5249                           	psect	text16
  5250  0D19                     __ptext16:	
  5251 ;; *************** function ___awmod *****************
  5252 ;; Defined at:
  5253 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;  divisor         2    3[COMMON] int 
  5256 ;;  dividend        2    5[COMMON] int 
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  sign            1    1[BANK0 ] unsigned char 
  5259 ;;  counter         1    0[BANK0 ] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  2    3[COMMON] int 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;Total ram usage:        7 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    3
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_time_Display
  5280 ;;		_bin2bcd
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           
  5285                           ;psect for function ___awmod
  5286  0D19                     ___awmod:	
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5290  0D19  0020               	movlb	0	; select bank0
  5291  0D1A  01A1               	clrf	___awmod@sign
  5292  0D1B  1FF6               	btfss	___awmod@dividend+1,7
  5293  0D1C  2D24               	goto	l5089
  5294  0D1D  09F5               	comf	___awmod@dividend,f
  5295  0D1E  09F6               	comf	___awmod@dividend+1,f
  5296  0D1F  0AF5               	incf	___awmod@dividend,f
  5297  0D20  1903               	skipnz
  5298  0D21  0AF6               	incf	___awmod@dividend+1,f
  5299  0D22  01A1               	clrf	___awmod@sign
  5300  0D23  0AA1               	incf	___awmod@sign,f
  5301  0D24                     l5089:	
  5302  0D24  1FF4               	btfss	___awmod@divisor+1,7
  5303  0D25  2D2B               	goto	l5093
  5304  0D26  09F3               	comf	___awmod@divisor,f
  5305  0D27  09F4               	comf	___awmod@divisor+1,f
  5306  0D28  0AF3               	incf	___awmod@divisor,f
  5307  0D29  1903               	skipnz
  5308  0D2A  0AF4               	incf	___awmod@divisor+1,f
  5309  0D2B                     l5093:	
  5310  0D2B  0873               	movf	___awmod@divisor,w
  5311  0D2C  0474               	iorwf	___awmod@divisor+1,w
  5312  0D2D  1903               	btfsc	3,2
  5313  0D2E  2D52               	goto	l5111
  5314  0D2F  01A0               	clrf	___awmod@counter
  5315  0D30  0AA0               	incf	___awmod@counter,f
  5316  0D31                     l5101:	
  5317  0D31  1BF4               	btfsc	___awmod@divisor+1,7
  5318  0D32  2D3D               	goto	l5103
  5319  0D33  3001               	movlw	1
  5320  0D34                     u4675:	
  5321  0D34  35F3               	lslf	___awmod@divisor,f
  5322  0D35  0DF4               	rlf	___awmod@divisor+1,f
  5323  0D36  0B89               	decfsz	9,f
  5324  0D37  2D34               	goto	u4675
  5325  0D38  3001               	movlw	1
  5326  0D39  00F7               	movwf	??___awmod
  5327  0D3A  0877               	movf	??___awmod,w
  5328  0D3B  07A0               	addwf	___awmod@counter,f
  5329  0D3C  2D31               	goto	l5101
  5330  0D3D                     l5103:	
  5331  0D3D  0874               	movf	___awmod@divisor+1,w
  5332  0D3E  0276               	subwf	___awmod@dividend+1,w
  5333  0D3F  1D03               	skipz
  5334  0D40  2D43               	goto	u4695
  5335  0D41  0873               	movf	___awmod@divisor,w
  5336  0D42  0275               	subwf	___awmod@dividend,w
  5337  0D43                     u4695:	
  5338  0D43  1C03               	skipc
  5339  0D44  2D49               	goto	l5107
  5340  0D45  0873               	movf	___awmod@divisor,w
  5341  0D46  02F5               	subwf	___awmod@dividend,f
  5342  0D47  0874               	movf	___awmod@divisor+1,w
  5343  0D48  3BF6               	subwfb	___awmod@dividend+1,f
  5344  0D49                     l5107:	
  5345  0D49  3001               	movlw	1
  5346  0D4A                     u4705:	
  5347  0D4A  36F4               	lsrf	___awmod@divisor+1,f
  5348  0D4B  0CF3               	rrf	___awmod@divisor,f
  5349  0D4C  0B89               	decfsz	9,f
  5350  0D4D  2D4A               	goto	u4705
  5351  0D4E  3001               	movlw	1
  5352  0D4F  02A0               	subwf	___awmod@counter,f
  5353  0D50  1D03               	btfss	3,2
  5354  0D51  2D3D               	goto	l5103
  5355  0D52                     l5111:	
  5356  0D52  0821               	movf	___awmod@sign,w
  5357  0D53  1903               	btfsc	3,2
  5358  0D54  2D5A               	goto	l5115
  5359  0D55  09F5               	comf	___awmod@dividend,f
  5360  0D56  09F6               	comf	___awmod@dividend+1,f
  5361  0D57  0AF5               	incf	___awmod@dividend,f
  5362  0D58  1903               	skipnz
  5363  0D59  0AF6               	incf	___awmod@dividend+1,f
  5364  0D5A                     l5115:	
  5365  0D5A  0876               	movf	___awmod@dividend+1,w
  5366  0D5B  00F4               	movwf	?___awmod+1
  5367  0D5C  0875               	movf	___awmod@dividend,w
  5368  0D5D  00F3               	movwf	?___awmod
  5369  0D5E  0008               	return
  5370  0D5F                     __end_of___awmod:	
  5371                           
  5372                           	psect	text17
  5373  0E93                     __ptext17:	
  5374 ;; *************** function ___awdiv *****************
  5375 ;; Defined at:
  5376 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  divisor         2    3[COMMON] int 
  5379 ;;  dividend        2    5[COMMON] int 
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;  quotient        2    2[BANK0 ] int 
  5382 ;;  sign            1    1[BANK0 ] unsigned char 
  5383 ;;  counter         1    0[BANK0 ] unsigned char 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  2    3[COMMON] int 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5393 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;Total ram usage:        9 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    3
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_time_Display
  5404 ;;		_bin2bcd
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function ___awdiv
  5410  0E93                     ___awdiv:	
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5414  0E93  0020               	movlb	0	; select bank0
  5415  0E94  01A1               	clrf	___awdiv@sign
  5416  0E95  1FF4               	btfss	___awdiv@divisor+1,7
  5417  0E96  2E9E               	goto	l5045
  5418  0E97  09F3               	comf	___awdiv@divisor,f
  5419  0E98  09F4               	comf	___awdiv@divisor+1,f
  5420  0E99  0AF3               	incf	___awdiv@divisor,f
  5421  0E9A  1903               	skipnz
  5422  0E9B  0AF4               	incf	___awdiv@divisor+1,f
  5423  0E9C  01A1               	clrf	___awdiv@sign
  5424  0E9D  0AA1               	incf	___awdiv@sign,f
  5425  0E9E                     l5045:	
  5426  0E9E  1FF6               	btfss	___awdiv@dividend+1,7
  5427  0E9F  2EA9               	goto	l5051
  5428  0EA0  09F5               	comf	___awdiv@dividend,f
  5429  0EA1  09F6               	comf	___awdiv@dividend+1,f
  5430  0EA2  0AF5               	incf	___awdiv@dividend,f
  5431  0EA3  1903               	skipnz
  5432  0EA4  0AF6               	incf	___awdiv@dividend+1,f
  5433  0EA5  3001               	movlw	1
  5434  0EA6  00F7               	movwf	??___awdiv
  5435  0EA7  0877               	movf	??___awdiv,w
  5436  0EA8  06A1               	xorwf	___awdiv@sign,f
  5437  0EA9                     l5051:	
  5438  0EA9  01A2               	clrf	___awdiv@quotient
  5439  0EAA  01A3               	clrf	___awdiv@quotient+1
  5440  0EAB  0873               	movf	___awdiv@divisor,w
  5441  0EAC  0474               	iorwf	___awdiv@divisor+1,w
  5442  0EAD  1903               	btfsc	3,2
  5443  0EAE  2ED8               	goto	l5073
  5444  0EAF  01A0               	clrf	___awdiv@counter
  5445  0EB0  0AA0               	incf	___awdiv@counter,f
  5446  0EB1                     l5061:	
  5447  0EB1  1BF4               	btfsc	___awdiv@divisor+1,7
  5448  0EB2  2EBD               	goto	l5063
  5449  0EB3  3001               	movlw	1
  5450  0EB4                     u4575:	
  5451  0EB4  35F3               	lslf	___awdiv@divisor,f
  5452  0EB5  0DF4               	rlf	___awdiv@divisor+1,f
  5453  0EB6  0B89               	decfsz	9,f
  5454  0EB7  2EB4               	goto	u4575
  5455  0EB8  3001               	movlw	1
  5456  0EB9  00F7               	movwf	??___awdiv
  5457  0EBA  0877               	movf	??___awdiv,w
  5458  0EBB  07A0               	addwf	___awdiv@counter,f
  5459  0EBC  2EB1               	goto	l5061
  5460  0EBD                     l5063:	
  5461  0EBD  3001               	movlw	1
  5462  0EBE                     u4595:	
  5463  0EBE  35A2               	lslf	___awdiv@quotient,f
  5464  0EBF  0DA3               	rlf	___awdiv@quotient+1,f
  5465  0EC0  0B89               	decfsz	9,f
  5466  0EC1  2EBE               	goto	u4595
  5467  0EC2  0874               	movf	___awdiv@divisor+1,w
  5468  0EC3  0276               	subwf	___awdiv@dividend+1,w
  5469  0EC4  1D03               	skipz
  5470  0EC5  2EC8               	goto	u4605
  5471  0EC6  0873               	movf	___awdiv@divisor,w
  5472  0EC7  0275               	subwf	___awdiv@dividend,w
  5473  0EC8                     u4605:	
  5474  0EC8  1C03               	skipc
  5475  0EC9  2ECF               	goto	l5069
  5476  0ECA  0873               	movf	___awdiv@divisor,w
  5477  0ECB  02F5               	subwf	___awdiv@dividend,f
  5478  0ECC  0874               	movf	___awdiv@divisor+1,w
  5479  0ECD  3BF6               	subwfb	___awdiv@dividend+1,f
  5480  0ECE  1422               	bsf	___awdiv@quotient,0
  5481  0ECF                     l5069:	
  5482  0ECF  3001               	movlw	1
  5483  0ED0                     u4615:	
  5484  0ED0  36F4               	lsrf	___awdiv@divisor+1,f
  5485  0ED1  0CF3               	rrf	___awdiv@divisor,f
  5486  0ED2  0B89               	decfsz	9,f
  5487  0ED3  2ED0               	goto	u4615
  5488  0ED4  3001               	movlw	1
  5489  0ED5  02A0               	subwf	___awdiv@counter,f
  5490  0ED6  1D03               	btfss	3,2
  5491  0ED7  2EBD               	goto	l5063
  5492  0ED8                     l5073:	
  5493  0ED8  0821               	movf	___awdiv@sign,w
  5494  0ED9  1903               	btfsc	3,2
  5495  0EDA  2EE0               	goto	l5077
  5496  0EDB  09A2               	comf	___awdiv@quotient,f
  5497  0EDC  09A3               	comf	___awdiv@quotient+1,f
  5498  0EDD  0AA2               	incf	___awdiv@quotient,f
  5499  0EDE  1903               	skipnz
  5500  0EDF  0AA3               	incf	___awdiv@quotient+1,f
  5501  0EE0                     l5077:	
  5502  0EE0  0823               	movf	___awdiv@quotient+1,w
  5503  0EE1  00F4               	movwf	?___awdiv+1
  5504  0EE2  0822               	movf	___awdiv@quotient,w
  5505  0EE3  00F3               	movwf	?___awdiv
  5506  0EE4  0008               	return
  5507  0EE5                     __end_of___awdiv:	
  5508                           
  5509                           	psect	text18
  5510  0CDC                     __ptext18:	
  5511 ;; *************** function _temperature_display *****************
  5512 ;; Defined at:
  5513 ;;		line 343 in file "mcc_generated_files/max31856.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;		None
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;		None
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5530 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;Total ram usage:        1 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:   10
  5534 ;; This function calls:
  5535 ;;		_Tc_Display
  5536 ;;		_err_Display
  5537 ;;		_maxim_31856_write_register
  5538 ;;		_maxim_clear_fault_status
  5539 ;;		_tc_temperature_trans
  5540 ;; This function is called by:
  5541 ;;		_temperature_process
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           
  5546                           ;psect for function _temperature_display
  5547  0CDC                     _temperature_display:	
  5548                           
  5549                           ;max31856.c: 345: if(uch_sr==(uint8_t)0x00)
  5550                           
  5551                           ;incstack = 0
  5552                           ; Regs used in _temperature_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5553  0CDC  0021               	movlb	1	; select bank1
  5554  0CDD  0843               	movf	_uch_sr^(0+128),w
  5555  0CDE  1D03               	btfss	3,2
  5556  0CDF  2CF5               	goto	l5155
  5557                           
  5558                           ;max31856.c: 346: {
  5559                           ;max31856.c: 347: tc_temperature_trans();
  5560  0CE0  3180  203F  318C   	fcall	_tc_temperature_trans
  5561                           
  5562                           ;max31856.c: 348: Tc_Display();
  5563  0CE3  3184  247B  318C   	fcall	_Tc_Display
  5564                           
  5565                           ;max31856.c: 349: if(time_count == 1)
  5566  0CE6  0020               	movlb	0	; select bank0
  5567  0CE7  036D               	decf	_time_count,w
  5568  0CE8  1D03               	btfss	3,2
  5569  0CE9  2CED               	goto	l5151
  5570                           
  5571                           ;max31856.c: 350: {
  5572                           ;max31856.c: 351: CH1_state = 0;
  5573  0CEA  0021               	movlb	1	; select bank1
  5574  0CEB  01B4               	clrf	_CH1_state^(0+128)
  5575                           
  5576                           ;max31856.c: 352: }
  5577  0CEC  0008               	return
  5578  0CED                     l5151:	
  5579                           
  5580                           ;max31856.c: 353: else if(time_count == 3)
  5581  0CED  3003               	movlw	3
  5582  0CEE  0020               	movlb	0	; select bank0
  5583  0CEF  066D               	xorwf	_time_count,w
  5584  0CF0  1D03               	btfss	3,2
  5585  0CF1  0008               	return
  5586                           
  5587                           ;max31856.c: 354: {
  5588                           ;max31856.c: 355: CH2_state = 0;
  5589  0CF2  0021               	movlb	1	; select bank1
  5590  0CF3  01B5               	clrf	_CH2_state^(0+128)
  5591                           
  5592                           ;max31856.c: 356: }
  5593                           ;max31856.c: 357: }
  5594  0CF4  0008               	return
  5595  0CF5                     l5155:	
  5596                           
  5597                           ;max31856.c: 358: else
  5598                           ;max31856.c: 359: {
  5599                           ;max31856.c: 360: if(time_count == 1)
  5600  0CF5  0020               	movlb	0	; select bank0
  5601  0CF6  036D               	decf	_time_count,w
  5602  0CF7  1D03               	btfss	3,2
  5603  0CF8  2CFD               	goto	l5159
  5604                           
  5605                           ;max31856.c: 361: {
  5606                           ;max31856.c: 362: CH1_state = 1;
  5607  0CF9  0021               	movlb	1	; select bank1
  5608  0CFA  01B4               	clrf	_CH1_state^(0+128)
  5609  0CFB  0AB4               	incf	_CH1_state^(0+128),f
  5610                           
  5611                           ;max31856.c: 363: }
  5612  0CFC  2D05               	goto	l5163
  5613  0CFD                     l5159:	
  5614                           
  5615                           ;max31856.c: 364: else if(time_count == 3)
  5616  0CFD  3003               	movlw	3
  5617  0CFE  0020               	movlb	0	; select bank0
  5618  0CFF  066D               	xorwf	_time_count,w
  5619  0D00  1D03               	btfss	3,2
  5620  0D01  2D05               	goto	l5163
  5621                           
  5622                           ;max31856.c: 365: {
  5623                           ;max31856.c: 366: CH2_state = 1;
  5624  0D02  0021               	movlb	1	; select bank1
  5625  0D03  01B5               	clrf	_CH2_state^(0+128)
  5626  0D04  0AB5               	incf	_CH2_state^(0+128),f
  5627  0D05                     l5163:	
  5628                           
  5629                           ;max31856.c: 367: }
  5630                           ;max31856.c: 368: err_Display();
  5631  0D05  318A  22AA  318C   	fcall	_err_Display
  5632                           
  5633                           ;max31856.c: 369: maxim_31856_write_register(0x82, 0xFF);
  5634  0D08  30FF               	movlw	255
  5635  0D09  0020               	movlb	0	; select bank0
  5636  0D0A  00DE               	movwf	??_temperature_display
  5637  0D0B  085E               	movf	??_temperature_display,w
  5638  0D0C  00F4               	movwf	maxim_31856_write_register@uch_register_value
  5639  0D0D  3082               	movlw	130
  5640  0D0E  3188  204D  318C   	fcall	_maxim_31856_write_register
  5641                           
  5642                           ;max31856.c: 370: maxim_clear_fault_status();
  5643  0D11  3188  205A  318C   	fcall	_maxim_clear_fault_status
  5644                           
  5645                           ;max31856.c: 371: maxim_31856_write_register(0x82, 0x00);
  5646  0D14  01F4               	clrf	maxim_31856_write_register@uch_register_value
  5647  0D15  3082               	movlw	130
  5648  0D16  3188  204D         	fcall	_maxim_31856_write_register
  5649  0D18  0008               	return
  5650  0D19                     __end_of_temperature_display:	
  5651                           
  5652                           	psect	text19
  5653  003F                     __ptext19:	
  5654 ;; *************** function _tc_temperature_trans *****************
  5655 ;; Defined at:
  5656 ;;		line 168 in file "mcc_generated_files/max31856.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;		None
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  temperature_    2   60[BANK0 ] unsigned int 
  5661 ;;  var_time        2   58[BANK0 ] unsigned int 
  5662 ;;  temperature_    2   56[BANK0 ] unsigned int 
  5663 ;;  temperature_    2   54[BANK0 ] unsigned int 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      void 
  5666 ;; Registers used:
  5667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;Total ram usage:       12 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:    9
  5680 ;; This function calls:
  5681 ;;		_Calculate_Time
  5682 ;;		_Save_Write_word
  5683 ;; This function is called by:
  5684 ;;		_temperature_display
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           
  5689                           ;psect for function _tc_temperature_trans
  5690  003F                     _tc_temperature_trans:	
  5691                           
  5692                           ;max31856.c: 170: unsigned int temperature_absolute = 0;
  5693                           
  5694                           ;incstack = 0
  5695                           ; Regs used in _tc_temperature_trans: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5696  003F  0020               	movlb	0	; select bank0
  5697  0040  01D8               	clrf	tc_temperature_trans@temperature_absolute
  5698  0041  01D9               	clrf	tc_temperature_trans@temperature_absolute+1
  5699                           
  5700                           ;max31856.c: 171: unsigned int temperature_temp = 0;
  5701  0042  01DC               	clrf	tc_temperature_trans@temperature_temp
  5702  0043  01DD               	clrf	tc_temperature_trans@temperature_temp+1
  5703                           
  5704                           ;max31856.c: 172: unsigned int temperature_back = 0;
  5705  0044  01D6               	clrf	tc_temperature_trans@temperature_back
  5706  0045  01D7               	clrf	tc_temperature_trans@temperature_back+1
  5707                           
  5708                           ;max31856.c: 173: unsigned int var_time=0;
  5709  0046  01DA               	clrf	tc_temperature_trans@var_time
  5710  0047  01DB               	clrf	tc_temperature_trans@var_time+1
  5711                           
  5712                           ;max31856.c: 174: temperature_value = 0;
  5713  0048  3000               	movlw	0
  5714  0049  00E8               	movwf	_temperature_value+3
  5715  004A  3000               	movlw	0
  5716  004B  00E7               	movwf	_temperature_value+2
  5717  004C  3000               	movlw	0
  5718  004D  00E6               	movwf	_temperature_value+1
  5719  004E  3000               	movlw	0
  5720  004F  00E5               	movwf	_temperature_value
  5721                           
  5722                           ;max31856.c: 175: temperature_value = (((uch_ltcbh&0x3f)<<8) | (uch_ltcbm) )>>1;
  5723  0050  303F               	movlw	63
  5724  0051  0021               	movlb	1	; select bank1
  5725  0052  053F               	andwf	_uch_ltcbh^(0+128),w
  5726  0053  0020               	movlb	0	; select bank0
  5727  0054  00D2               	movwf	??_tc_temperature_trans
  5728  0055  0852               	movf	??_tc_temperature_trans,w
  5729  0056  00D4               	movwf	??_tc_temperature_trans+2
  5730  0057  0021               	movlb	1	; select bank1
  5731  0058  0841               	movf	_uch_ltcbm^(0+128),w
  5732  0059  0020               	movlb	0	; select bank0
  5733  005A  00D3               	movwf	??_tc_temperature_trans+1
  5734  005B  0D54               	rlf	??_tc_temperature_trans+2,w
  5735  005C  0CD4               	rrf	??_tc_temperature_trans+2,f
  5736  005D  0CD3               	rrf	??_tc_temperature_trans+1,f
  5737  005E  0853               	movf	??_tc_temperature_trans+1,w
  5738  005F  00E5               	movwf	_temperature_value
  5739  0060  0854               	movf	??_tc_temperature_trans+2,w
  5740  0061  00E6               	movwf	_temperature_value+1
  5741  0062  0D89               	rlf	9,f
  5742  0063  3B89               	subwfb	9,f
  5743  0064  0989               	comf	9,f
  5744  0065  00E7               	movwf	_temperature_value+2
  5745  0066  00E8               	movwf	_temperature_value+3
  5746                           
  5747                           ;max31856.c: 176: if(uch_ltcbh & 0x80) temperature_value |=0x2000;
  5748  0067  0021               	movlb	1	; select bank1
  5749  0068  1FBF               	btfss	_uch_ltcbh^(0+128),7
  5750  0069  286C               	goto	l4865
  5751  006A  0020               	movlb	0	; select bank0
  5752  006B  16E6               	bsf	_temperature_value+1,5
  5753  006C                     l4865:	
  5754                           
  5755                           ;max31856.c: 177: temperature_temp = temperature_value;
  5756  006C  0020               	movlb	0	; select bank0
  5757  006D  0866               	movf	_temperature_value+1,w
  5758  006E  00DD               	movwf	tc_temperature_trans@temperature_temp+1
  5759  006F  0865               	movf	_temperature_value,w
  5760  0070  00DC               	movwf	tc_temperature_trans@temperature_temp
  5761                           
  5762                           ;max31856.c: 180: if(time_count == 1 && Record_flag == 1)
  5763  0071  036D               	decf	_time_count,w
  5764  0072  1D03               	btfss	3,2
  5765  0073  2901               	goto	l4919
  5766  0074  036B               	decf	_Record_flag,w
  5767  0075  1D03               	btfss	3,2
  5768  0076  2901               	goto	l4919
  5769                           
  5770                           ;max31856.c: 181: {
  5771                           ;max31856.c: 182: temperature_back = CH1_temperature;
  5772  0077  086A               	movf	_CH1_temperature+1,w
  5773  0078  00D7               	movwf	tc_temperature_trans@temperature_back+1
  5774  0079  0869               	movf	_CH1_temperature,w
  5775  007A  00D6               	movwf	tc_temperature_trans@temperature_back
  5776                           
  5777                           ;max31856.c: 183: if( CH1_temperature & 0x2000 != temperature_temp & 0x2000)
  5778  007B  3020               	movlw	32
  5779  007C  065D               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5780  007D  045C               	iorwf	tc_temperature_trans@temperature_temp,w
  5781  007E  1903               	btfsc	3,2
  5782  007F  2882               	goto	u4230
  5783  0080  3001               	movlw	1
  5784  0081  2883               	goto	u4240
  5785  0082                     u4230:	
  5786  0082  3000               	movlw	0
  5787  0083                     u4240:	
  5788  0083  00D2               	movwf	??_tc_temperature_trans
  5789  0084  01D3               	clrf	??_tc_temperature_trans+1
  5790  0085  0869               	movf	_CH1_temperature,w
  5791  0086  0552               	andwf	??_tc_temperature_trans,w
  5792  0087  00D4               	movwf	??_tc_temperature_trans+2
  5793  0088  086A               	movf	_CH1_temperature+1,w
  5794  0089  0553               	andwf	??_tc_temperature_trans+1,w
  5795  008A  00D5               	movwf	??_tc_temperature_trans+3
  5796  008B  1AD5               	btfsc	??_tc_temperature_trans+3,5
  5797  008C  28D3               	goto	L6
  5798                           
  5799                           ;max31856.c: 196: else
  5800                           ;max31856.c: 197: {
  5801                           ;max31856.c: 198: if(CH1_temperature & 0x2000) CH1_temperature=0x3FFF-CH1_temperature + 
      +                          1 ;
  5802                           
  5803                           ;max31856.c: 195: }
  5804                           
  5805                           ;max31856.c: 194: CH1_temperature = temperature_value;
  5806                           
  5807                           ;max31856.c: 193: Cur_temperature_time_ch1 = 0;
  5808                           
  5809                           ;max31856.c: 192: Save_Write_word(temperature_value);
  5810                           
  5811                           ;max31856.c: 191: Save_Write_word(var_time);
  5812                           
  5813                           ;max31856.c: 189: var_time |= 0x2000;
  5814                           
  5815                           ;max31856.c: 187: if(CH1_state == 1) var_time |= 0x400;
  5816                           
  5817                           ;max31856.c: 186: var_time |= 0x100;
  5818                           
  5819                           ;max31856.c: 184: {
  5820                           ;max31856.c: 185: var_time = Calculate_Time();
  5821  008D  1EEA               	btfss	_CH1_temperature+1,5
  5822  008E  289C               	goto	l4891
  5823  008F  0969               	comf	_CH1_temperature,w
  5824  0090  00D2               	movwf	??_tc_temperature_trans
  5825  0091  096A               	comf	_CH1_temperature+1,w
  5826  0092  00D3               	movwf	??_tc_temperature_trans+1
  5827  0093  0AD2               	incf	??_tc_temperature_trans,f
  5828  0094  1903               	skipnz
  5829  0095  0AD3               	incf	??_tc_temperature_trans+1,f
  5830  0096  0852               	movf	??_tc_temperature_trans,w
  5831  0097  3E00               	addlw	0
  5832  0098  00E9               	movwf	_CH1_temperature
  5833  0099  3040               	movlw	64
  5834  009A  3D53               	addwfc	??_tc_temperature_trans+1,w
  5835  009B  00EA               	movwf	_CH1_temperature+1
  5836  009C                     l4891:	
  5837                           
  5838                           ;max31856.c: 199: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  5839  009C  1EDD               	btfss	tc_temperature_trans@temperature_temp+1,5
  5840  009D  28AB               	goto	l4895
  5841  009E  095C               	comf	tc_temperature_trans@temperature_temp,w
  5842  009F  00D2               	movwf	??_tc_temperature_trans
  5843  00A0  095D               	comf	tc_temperature_trans@temperature_temp+1,w
  5844  00A1  00D3               	movwf	??_tc_temperature_trans+1
  5845  00A2  0AD2               	incf	??_tc_temperature_trans,f
  5846  00A3  1903               	skipnz
  5847  00A4  0AD3               	incf	??_tc_temperature_trans+1,f
  5848  00A5  0852               	movf	??_tc_temperature_trans,w
  5849  00A6  3E00               	addlw	0
  5850  00A7  00DC               	movwf	tc_temperature_trans@temperature_temp
  5851  00A8  3040               	movlw	64
  5852  00A9  3D53               	addwfc	??_tc_temperature_trans+1,w
  5853  00AA  00DD               	movwf	tc_temperature_trans@temperature_temp+1
  5854  00AB                     l4895:	
  5855                           
  5856                           ;max31856.c: 200: if( temperature_temp > CH1_temperature ) temperature_absolute = temper
      +                          ature_temp - CH1_temperature;
  5857  00AB  085D               	movf	tc_temperature_trans@temperature_temp+1,w
  5858  00AC  026A               	subwf	_CH1_temperature+1,w
  5859  00AD  1D03               	skipz
  5860  00AE  28B1               	goto	u4295
  5861  00AF  085C               	movf	tc_temperature_trans@temperature_temp,w
  5862  00B0  0269               	subwf	_CH1_temperature,w
  5863  00B1                     u4295:	
  5864  00B1  1803               	skipnc
  5865  00B2  28BF               	goto	l4899
  5866  00B3  0969               	comf	_CH1_temperature,w
  5867  00B4  00D2               	movwf	??_tc_temperature_trans
  5868  00B5  096A               	comf	_CH1_temperature+1,w
  5869  00B6  00D3               	movwf	??_tc_temperature_trans+1
  5870  00B7  0AD2               	incf	??_tc_temperature_trans,f
  5871  00B8  1903               	skipnz
  5872  00B9  0AD3               	incf	??_tc_temperature_trans+1,f
  5873  00BA  085C               	movf	tc_temperature_trans@temperature_temp,w
  5874  00BB  0752               	addwf	??_tc_temperature_trans,w
  5875  00BC  00D8               	movwf	tc_temperature_trans@temperature_absolute
  5876  00BD  085D               	movf	tc_temperature_trans@temperature_temp+1,w
  5877  00BE  28CA               	goto	L2
  5878  00BF                     l4899:	
  5879                           
  5880                           ;max31856.c: 201: else temperature_absolute = CH1_temperature - temperature_temp;
  5881  00BF  095C               	comf	tc_temperature_trans@temperature_temp,w
  5882  00C0  00D2               	movwf	??_tc_temperature_trans
  5883  00C1  095D               	comf	tc_temperature_trans@temperature_temp+1,w
  5884  00C2  00D3               	movwf	??_tc_temperature_trans+1
  5885  00C3  0AD2               	incf	??_tc_temperature_trans,f
  5886  00C4  1903               	skipnz
  5887  00C5  0AD3               	incf	??_tc_temperature_trans+1,f
  5888  00C6  0869               	movf	_CH1_temperature,w
  5889  00C7  0752               	addwf	??_tc_temperature_trans,w
  5890  00C8  00D8               	movwf	tc_temperature_trans@temperature_absolute
  5891  00C9  086A               	movf	_CH1_temperature+1,w
  5892  00CA                     L2:	
  5893  00CA  3D53               	addwfc	??_tc_temperature_trans+1,w
  5894  00CB  00D9               	movwf	tc_temperature_trans@temperature_absolute+1
  5895                           
  5896                           ;max31856.c: 202: if( temperature_absolute > 4)
  5897  00CC  3000               	movlw	0
  5898  00CD  0259               	subwf	tc_temperature_trans@temperature_absolute+1,w
  5899  00CE  3005               	movlw	5
  5900  00CF  1903               	skipnz
  5901  00D0  0258               	subwf	tc_temperature_trans@temperature_absolute,w
  5902  00D1  1C03               	skipc
  5903  00D2  28FC               	goto	l4917
  5904  00D3                     L6:	
  5905                           
  5906                           ;max31856.c: 203: {
  5907                           ;max31856.c: 204: var_time = Calculate_Time();
  5908  00D3  3182  220B  3180   	fcall	_Calculate_Time
  5909  00D6  0020               	movlb	0	; select bank0
  5910  00D7  00D2               	movwf	??_tc_temperature_trans
  5911  00D8  01D3               	clrf	??_tc_temperature_trans+1
  5912  00D9  0852               	movf	??_tc_temperature_trans,w
  5913  00DA  00DA               	movwf	tc_temperature_trans@var_time
  5914  00DB  0853               	movf	??_tc_temperature_trans+1,w
  5915  00DC  00DB               	movwf	tc_temperature_trans@var_time+1
  5916                           
  5917                           ;max31856.c: 205: var_time |= 0x100;
  5918  00DD  145B               	bsf	tc_temperature_trans@var_time+1,0
  5919                           
  5920                           ;max31856.c: 206: if(CH1_state == 1) var_time |= 0x400;
  5921  00DE  0021               	movlb	1	; select bank1
  5922  00DF  0334               	decf	_CH1_state^(0+128),w
  5923  00E0  1D03               	btfss	3,2
  5924  00E1  28E4               	goto	l517
  5925  00E2  0020               	movlb	0	; select bank0
  5926  00E3  155B               	bsf	tc_temperature_trans@var_time+1,2
  5927  00E4                     l517:	
  5928                           
  5929                           ;max31856.c: 208: var_time |= 0x2000;
  5930  00E4  0020               	movlb	0	; select bank0
  5931  00E5  16DB               	bsf	tc_temperature_trans@var_time+1,5
  5932                           
  5933                           ;max31856.c: 210: Save_Write_word(var_time);
  5934  00E6  085B               	movf	tc_temperature_trans@var_time+1,w
  5935  00E7  00B7               	movwf	Save_Write_word@data+1
  5936  00E8  085A               	movf	tc_temperature_trans@var_time,w
  5937  00E9  00B6               	movwf	Save_Write_word@data
  5938  00EA  318B  23FB  3180   	fcall	_Save_Write_word
  5939                           
  5940                           ;max31856.c: 211: Save_Write_word(temperature_value);
  5941  00ED  0020               	movlb	0	; select bank0
  5942  00EE  0866               	movf	_temperature_value+1,w
  5943  00EF  00B7               	movwf	Save_Write_word@data+1
  5944  00F0  0865               	movf	_temperature_value,w
  5945  00F1  00B6               	movwf	Save_Write_word@data
  5946  00F2  318B  23FB  3180   	fcall	_Save_Write_word
  5947                           
  5948                           ;max31856.c: 212: Cur_temperature_time_ch1 = 0;
  5949  00F5  0021               	movlb	1	; select bank1
  5950  00F6  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  5951                           
  5952                           ;max31856.c: 213: CH1_temperature = temperature_value;
  5953  00F7  0020               	movlb	0	; select bank0
  5954  00F8  0866               	movf	_temperature_value+1,w
  5955  00F9  00EA               	movwf	_CH1_temperature+1
  5956  00FA  0865               	movf	_temperature_value,w
  5957  00FB  28FF               	goto	L3
  5958  00FC                     l4917:	
  5959                           ;max31856.c: 214: }
  5960                           
  5961                           
  5962                           ;max31856.c: 215: else
  5963                           ;max31856.c: 216: {
  5964                           ;max31856.c: 217: CH1_temperature = temperature_back;
  5965  00FC  0857               	movf	tc_temperature_trans@temperature_back+1,w
  5966  00FD  00EA               	movwf	_CH1_temperature+1
  5967  00FE  0856               	movf	tc_temperature_trans@temperature_back,w
  5968  00FF                     L3:	
  5969  00FF  00E9               	movwf	_CH1_temperature
  5970                           
  5971                           ;max31856.c: 218: }
  5972                           ;max31856.c: 219: }
  5973                           ;max31856.c: 221: }
  5974  0100  2991               	goto	l519
  5975  0101                     l4919:	
  5976                           
  5977                           ;max31856.c: 222: else if( time_count == 3 && Record_flag == 1)
  5978  0101  3003               	movlw	3
  5979  0102  066D               	xorwf	_time_count,w
  5980  0103  1D03               	btfss	3,2
  5981  0104  2991               	goto	l519
  5982  0105  036B               	decf	_Record_flag,w
  5983  0106  1D03               	btfss	3,2
  5984  0107  2991               	goto	l519
  5985                           
  5986                           ;max31856.c: 223: {
  5987                           ;max31856.c: 224: temperature_back = CH2_temperature;
  5988  0108  0879               	movf	_CH2_temperature+1,w
  5989  0109  00D7               	movwf	tc_temperature_trans@temperature_back+1
  5990  010A  0878               	movf	_CH2_temperature,w
  5991  010B  00D6               	movwf	tc_temperature_trans@temperature_back
  5992                           
  5993                           ;max31856.c: 225: if( CH2_temperature & 0x2000 != temperature_temp & 0x2000)
  5994  010C  3020               	movlw	32
  5995  010D  065D               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5996  010E  045C               	iorwf	tc_temperature_trans@temperature_temp,w
  5997  010F  1903               	btfsc	3,2
  5998  0110  2913               	goto	u4340
  5999  0111  3001               	movlw	1
  6000  0112  2914               	goto	u4350
  6001  0113                     u4340:	
  6002  0113  3000               	movlw	0
  6003  0114                     u4350:	
  6004  0114  00D2               	movwf	??_tc_temperature_trans
  6005  0115  01D3               	clrf	??_tc_temperature_trans+1
  6006  0116  0878               	movf	_CH2_temperature,w
  6007  0117  0552               	andwf	??_tc_temperature_trans,w
  6008  0118  00D4               	movwf	??_tc_temperature_trans+2
  6009  0119  0879               	movf	_CH2_temperature+1,w
  6010  011A  0553               	andwf	??_tc_temperature_trans+1,w
  6011  011B  00D5               	movwf	??_tc_temperature_trans+3
  6012  011C  1AD5               	btfsc	??_tc_temperature_trans+3,5
  6013  011D  2964               	goto	L7
  6014                           
  6015                           ;max31856.c: 238: else
  6016                           ;max31856.c: 239: {
  6017                           ;max31856.c: 240: if(CH2_temperature & 0x2000) CH2_temperature=0x3FFF-CH2_temperature + 
      +                          1 ;
  6018                           
  6019                           ;max31856.c: 237: }
  6020                           
  6021                           ;max31856.c: 236: CH2_temperature = temperature_value;
  6022                           
  6023                           ;max31856.c: 235: Cur_temperature_time_ch2 = 0;
  6024                           
  6025                           ;max31856.c: 234: Save_Write_word(temperature_value);
  6026                           
  6027                           ;max31856.c: 233: Save_Write_word(var_time);
  6028                           
  6029                           ;max31856.c: 231: var_time |= 0x2000;
  6030                           
  6031                           ;max31856.c: 229: if(CH2_state == 1) var_time |= 0x800;
  6032                           
  6033                           ;max31856.c: 228: var_time |= 0x200;
  6034                           
  6035                           ;max31856.c: 226: {
  6036                           ;max31856.c: 227: var_time = Calculate_Time();
  6037  011E  1EF9               	btfss	_CH2_temperature+1,5
  6038  011F  292D               	goto	l4943
  6039  0120  0978               	comf	_CH2_temperature,w
  6040  0121  00D2               	movwf	??_tc_temperature_trans
  6041  0122  0979               	comf	_CH2_temperature+1,w
  6042  0123  00D3               	movwf	??_tc_temperature_trans+1
  6043  0124  0AD2               	incf	??_tc_temperature_trans,f
  6044  0125  1903               	skipnz
  6045  0126  0AD3               	incf	??_tc_temperature_trans+1,f
  6046  0127  0852               	movf	??_tc_temperature_trans,w
  6047  0128  3E00               	addlw	0
  6048  0129  00F8               	movwf	_CH2_temperature
  6049  012A  3040               	movlw	64
  6050  012B  3D53               	addwfc	??_tc_temperature_trans+1,w
  6051  012C  00F9               	movwf	_CH2_temperature+1
  6052  012D                     l4943:	
  6053                           
  6054                           ;max31856.c: 241: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  6055  012D  1EDD               	btfss	tc_temperature_trans@temperature_temp+1,5
  6056  012E  293C               	goto	l4947
  6057  012F  095C               	comf	tc_temperature_trans@temperature_temp,w
  6058  0130  00D2               	movwf	??_tc_temperature_trans
  6059  0131  095D               	comf	tc_temperature_trans@temperature_temp+1,w
  6060  0132  00D3               	movwf	??_tc_temperature_trans+1
  6061  0133  0AD2               	incf	??_tc_temperature_trans,f
  6062  0134  1903               	skipnz
  6063  0135  0AD3               	incf	??_tc_temperature_trans+1,f
  6064  0136  0852               	movf	??_tc_temperature_trans,w
  6065  0137  3E00               	addlw	0
  6066  0138  00DC               	movwf	tc_temperature_trans@temperature_temp
  6067  0139  3040               	movlw	64
  6068  013A  3D53               	addwfc	??_tc_temperature_trans+1,w
  6069  013B  00DD               	movwf	tc_temperature_trans@temperature_temp+1
  6070  013C                     l4947:	
  6071                           
  6072                           ;max31856.c: 242: if( temperature_temp > CH2_temperature ) temperature_absolute = temper
      +                          ature_temp - CH2_temperature;
  6073  013C  085D               	movf	tc_temperature_trans@temperature_temp+1,w
  6074  013D  0279               	subwf	_CH2_temperature+1,w
  6075  013E  1D03               	skipz
  6076  013F  2942               	goto	u4405
  6077  0140  085C               	movf	tc_temperature_trans@temperature_temp,w
  6078  0141  0278               	subwf	_CH2_temperature,w
  6079  0142                     u4405:	
  6080  0142  1803               	skipnc
  6081  0143  2950               	goto	l4951
  6082  0144  0978               	comf	_CH2_temperature,w
  6083  0145  00D2               	movwf	??_tc_temperature_trans
  6084  0146  0979               	comf	_CH2_temperature+1,w
  6085  0147  00D3               	movwf	??_tc_temperature_trans+1
  6086  0148  0AD2               	incf	??_tc_temperature_trans,f
  6087  0149  1903               	skipnz
  6088  014A  0AD3               	incf	??_tc_temperature_trans+1,f
  6089  014B  085C               	movf	tc_temperature_trans@temperature_temp,w
  6090  014C  0752               	addwf	??_tc_temperature_trans,w
  6091  014D  00D8               	movwf	tc_temperature_trans@temperature_absolute
  6092  014E  085D               	movf	tc_temperature_trans@temperature_temp+1,w
  6093  014F  295B               	goto	L4
  6094  0150                     l4951:	
  6095                           
  6096                           ;max31856.c: 243: else temperature_absolute = CH2_temperature - temperature_temp;
  6097  0150  095C               	comf	tc_temperature_trans@temperature_temp,w
  6098  0151  00D2               	movwf	??_tc_temperature_trans
  6099  0152  095D               	comf	tc_temperature_trans@temperature_temp+1,w
  6100  0153  00D3               	movwf	??_tc_temperature_trans+1
  6101  0154  0AD2               	incf	??_tc_temperature_trans,f
  6102  0155  1903               	skipnz
  6103  0156  0AD3               	incf	??_tc_temperature_trans+1,f
  6104  0157  0878               	movf	_CH2_temperature,w
  6105  0158  0752               	addwf	??_tc_temperature_trans,w
  6106  0159  00D8               	movwf	tc_temperature_trans@temperature_absolute
  6107  015A  0879               	movf	_CH2_temperature+1,w
  6108  015B                     L4:	
  6109  015B  3D53               	addwfc	??_tc_temperature_trans+1,w
  6110  015C  00D9               	movwf	tc_temperature_trans@temperature_absolute+1
  6111                           
  6112                           ;max31856.c: 244: if( temperature_absolute > 4)
  6113  015D  3000               	movlw	0
  6114  015E  0259               	subwf	tc_temperature_trans@temperature_absolute+1,w
  6115  015F  3005               	movlw	5
  6116  0160  1903               	skipnz
  6117  0161  0258               	subwf	tc_temperature_trans@temperature_absolute,w
  6118  0162  1C03               	skipc
  6119  0163  298D               	goto	l4969
  6120  0164                     L7:	
  6121                           
  6122                           ;max31856.c: 245: {
  6123                           ;max31856.c: 246: var_time = Calculate_Time();
  6124  0164  3182  220B  3180   	fcall	_Calculate_Time
  6125  0167  0020               	movlb	0	; select bank0
  6126  0168  00D2               	movwf	??_tc_temperature_trans
  6127  0169  01D3               	clrf	??_tc_temperature_trans+1
  6128  016A  0852               	movf	??_tc_temperature_trans,w
  6129  016B  00DA               	movwf	tc_temperature_trans@var_time
  6130  016C  0853               	movf	??_tc_temperature_trans+1,w
  6131  016D  00DB               	movwf	tc_temperature_trans@var_time+1
  6132                           
  6133                           ;max31856.c: 247: var_time |= 0x200;
  6134  016E  14DB               	bsf	tc_temperature_trans@var_time+1,1
  6135                           
  6136                           ;max31856.c: 248: if(CH2_state == 1) var_time |= 0x800;
  6137  016F  0021               	movlb	1	; select bank1
  6138  0170  0335               	decf	_CH2_state^(0+128),w
  6139  0171  1D03               	btfss	3,2
  6140  0172  2975               	goto	l529
  6141  0173  0020               	movlb	0	; select bank0
  6142  0174  15DB               	bsf	tc_temperature_trans@var_time+1,3
  6143  0175                     l529:	
  6144                           
  6145                           ;max31856.c: 250: var_time |= 0x2000;
  6146  0175  0020               	movlb	0	; select bank0
  6147  0176  16DB               	bsf	tc_temperature_trans@var_time+1,5
  6148                           
  6149                           ;max31856.c: 252: Save_Write_word(var_time);
  6150  0177  085B               	movf	tc_temperature_trans@var_time+1,w
  6151  0178  00B7               	movwf	Save_Write_word@data+1
  6152  0179  085A               	movf	tc_temperature_trans@var_time,w
  6153  017A  00B6               	movwf	Save_Write_word@data
  6154  017B  318B  23FB  3180   	fcall	_Save_Write_word
  6155                           
  6156                           ;max31856.c: 253: Save_Write_word(temperature_value);
  6157  017E  0020               	movlb	0	; select bank0
  6158  017F  0866               	movf	_temperature_value+1,w
  6159  0180  00B7               	movwf	Save_Write_word@data+1
  6160  0181  0865               	movf	_temperature_value,w
  6161  0182  00B6               	movwf	Save_Write_word@data
  6162  0183  318B  23FB  3180   	fcall	_Save_Write_word
  6163                           
  6164                           ;max31856.c: 254: Cur_temperature_time_ch2 = 0;
  6165  0186  0021               	movlb	1	; select bank1
  6166  0187  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  6167                           
  6168                           ;max31856.c: 255: CH2_temperature = temperature_value;
  6169  0188  0020               	movlb	0	; select bank0
  6170  0189  0866               	movf	_temperature_value+1,w
  6171  018A  00F9               	movwf	_CH2_temperature+1
  6172  018B  0865               	movf	_temperature_value,w
  6173  018C  2990               	goto	L5
  6174  018D                     l4969:	
  6175                           ;max31856.c: 256: }
  6176                           
  6177                           
  6178                           ;max31856.c: 257: else
  6179                           ;max31856.c: 258: {
  6180                           ;max31856.c: 259: CH2_temperature = temperature_back;
  6181  018D  0857               	movf	tc_temperature_trans@temperature_back+1,w
  6182  018E  00F9               	movwf	_CH2_temperature+1
  6183  018F  0856               	movf	tc_temperature_trans@temperature_back,w
  6184  0190                     L5:	
  6185  0190  00F8               	movwf	_CH2_temperature
  6186  0191                     l519:	
  6187                           
  6188                           ;max31856.c: 260: }
  6189                           ;max31856.c: 261: }
  6190                           ;max31856.c: 263: }
  6191                           ;max31856.c: 265: temperature_temp = temperature_value;
  6192  0191  0866               	movf	_temperature_value+1,w
  6193  0192  00DD               	movwf	tc_temperature_trans@temperature_temp+1
  6194  0193  0865               	movf	_temperature_value,w
  6195  0194  00DC               	movwf	tc_temperature_trans@temperature_temp
  6196                           
  6197                           ;max31856.c: 266: if((uch_ltcbh&0x80)==0x80)
  6198  0195  0021               	movlb	1	; select bank1
  6199  0196  1FBF               	btfss	_uch_ltcbh^(0+128),7
  6200  0197  29D8               	goto	l4987
  6201                           
  6202                           ;max31856.c: 267: {
  6203                           ;max31856.c: 268: temperature_sign = 1;
  6204  0198  01BA               	clrf	_temperature_sign^(0+128)
  6205  0199  0ABA               	incf	_temperature_sign^(0+128),f
  6206                           
  6207                           ;max31856.c: 269: temperature_temp=0x3FFF-temperature_temp + 1 ;
  6208  019A  0020               	movlb	0	; select bank0
  6209  019B  095C               	comf	tc_temperature_trans@temperature_temp,w
  6210  019C  00D2               	movwf	??_tc_temperature_trans
  6211  019D  095D               	comf	tc_temperature_trans@temperature_temp+1,w
  6212  019E  00D3               	movwf	??_tc_temperature_trans+1
  6213  019F  0AD2               	incf	??_tc_temperature_trans,f
  6214  01A0  1903               	skipnz
  6215  01A1  0AD3               	incf	??_tc_temperature_trans+1,f
  6216  01A2  0852               	movf	??_tc_temperature_trans,w
  6217  01A3  3E00               	addlw	0
  6218  01A4  00DC               	movwf	tc_temperature_trans@temperature_temp
  6219  01A5  3040               	movlw	64
  6220  01A6  3D53               	addwfc	??_tc_temperature_trans+1,w
  6221  01A7  00DD               	movwf	tc_temperature_trans@temperature_temp+1
  6222                           
  6223                           ;max31856.c: 271: temperature_int = temperature_temp>>3;
  6224  01A8  085D               	movf	tc_temperature_trans@temperature_temp+1,w
  6225  01A9  00D3               	movwf	??_tc_temperature_trans+1
  6226  01AA  085C               	movf	tc_temperature_trans@temperature_temp,w
  6227  01AB  00D2               	movwf	??_tc_temperature_trans
  6228  01AC  36D3               	lsrf	??_tc_temperature_trans+1,f
  6229  01AD  0CD2               	rrf	??_tc_temperature_trans,f
  6230  01AE  36D3               	lsrf	??_tc_temperature_trans+1,f
  6231  01AF  0CD2               	rrf	??_tc_temperature_trans,f
  6232  01B0  36D3               	lsrf	??_tc_temperature_trans+1,f
  6233  01B1  0CD2               	rrf	??_tc_temperature_trans,f
  6234  01B2  0852               	movf	??_tc_temperature_trans,w
  6235  01B3  0021               	movlb	1	; select bank1
  6236  01B4  00B2               	movwf	_temperature_int^(0+128)
  6237  01B5  0020               	movlb	0	; select bank0
  6238  01B6  0853               	movf	??_tc_temperature_trans+1,w
  6239  01B7  0021               	movlb	1	; select bank1
  6240  01B8  00B3               	movwf	(_temperature_int+1)^(0+128)
  6241                           
  6242                           ;max31856.c: 272: temperature_decimal = temperature_temp & 0x07;
  6243  01B9  0020               	movlb	0	; select bank0
  6244  01BA  085C               	movf	tc_temperature_trans@temperature_temp,w
  6245  01BB  3907               	andlw	7
  6246  01BC  00D2               	movwf	??_tc_temperature_trans
  6247  01BD  0852               	movf	??_tc_temperature_trans,w
  6248  01BE  00EC               	movwf	_temperature_decimal
  6249                           
  6250                           ;max31856.c: 273: if(temperature_decimal > 3) temperature_decimal++;
  6251  01BF  3004               	movlw	4
  6252  01C0  026C               	subwf	_temperature_decimal,w
  6253  01C1  1C03               	skipc
  6254  01C2  29C7               	goto	l532
  6255  01C3  3001               	movlw	1
  6256  01C4  00D2               	movwf	??_tc_temperature_trans
  6257  01C5  0852               	movf	??_tc_temperature_trans,w
  6258  01C6  07EC               	addwf	_temperature_decimal,f
  6259  01C7                     l532:	
  6260                           
  6261                           ;max31856.c: 274: if(( temperature_decimal == 3 || temperature_decimal == 8 ) && (temper
      +                          ature_int & 0x01)) temperature_decimal++;
  6262  01C7  3003               	movlw	3
  6263  01C8  066C               	xorwf	_temperature_decimal,w
  6264  01C9  1903               	btfsc	3,2
  6265  01CA  29CF               	goto	l535
  6266  01CB  3008               	movlw	8
  6267  01CC  066C               	xorwf	_temperature_decimal,w
  6268  01CD  1D03               	btfss	3,2
  6269  01CE  0008               	return
  6270  01CF                     l535:	
  6271  01CF  0021               	movlb	1	; select bank1
  6272  01D0  1C32               	btfss	_temperature_int^(0+128),0
  6273  01D1  0008               	return
  6274  01D2  3001               	movlw	1
  6275  01D3  0020               	movlb	0	; select bank0
  6276  01D4  00D2               	movwf	??_tc_temperature_trans
  6277  01D5  0852               	movf	??_tc_temperature_trans,w
  6278  01D6  07EC               	addwf	_temperature_decimal,f
  6279                           
  6280                           ;max31856.c: 275: }
  6281  01D7  0008               	return
  6282  01D8                     l4987:	
  6283                           
  6284                           ;max31856.c: 276: else
  6285                           ;max31856.c: 277: {
  6286                           ;max31856.c: 278: temperature_sign = 0;
  6287  01D8  0021               	movlb	1	; select bank1
  6288  01D9  01BA               	clrf	_temperature_sign^(0+128)
  6289                           
  6290                           ;max31856.c: 279: temperature_int = temperature_temp>>3;
  6291  01DA  0020               	movlb	0	; select bank0
  6292  01DB  085D               	movf	tc_temperature_trans@temperature_temp+1,w
  6293  01DC  00D3               	movwf	??_tc_temperature_trans+1
  6294  01DD  085C               	movf	tc_temperature_trans@temperature_temp,w
  6295  01DE  00D2               	movwf	??_tc_temperature_trans
  6296  01DF  36D3               	lsrf	??_tc_temperature_trans+1,f
  6297  01E0  0CD2               	rrf	??_tc_temperature_trans,f
  6298  01E1  36D3               	lsrf	??_tc_temperature_trans+1,f
  6299  01E2  0CD2               	rrf	??_tc_temperature_trans,f
  6300  01E3  36D3               	lsrf	??_tc_temperature_trans+1,f
  6301  01E4  0CD2               	rrf	??_tc_temperature_trans,f
  6302  01E5  0852               	movf	??_tc_temperature_trans,w
  6303  01E6  0021               	movlb	1	; select bank1
  6304  01E7  00B2               	movwf	_temperature_int^(0+128)
  6305  01E8  0020               	movlb	0	; select bank0
  6306  01E9  0853               	movf	??_tc_temperature_trans+1,w
  6307  01EA  0021               	movlb	1	; select bank1
  6308  01EB  00B3               	movwf	(_temperature_int+1)^(0+128)
  6309                           
  6310                           ;max31856.c: 280: temperature_decimal = temperature_temp & 0x07;
  6311  01EC  0020               	movlb	0	; select bank0
  6312  01ED  085C               	movf	tc_temperature_trans@temperature_temp,w
  6313  01EE  3907               	andlw	7
  6314  01EF  00D2               	movwf	??_tc_temperature_trans
  6315  01F0  0852               	movf	??_tc_temperature_trans,w
  6316  01F1  00EC               	movwf	_temperature_decimal
  6317                           
  6318                           ;max31856.c: 281: if(temperature_decimal > 3) temperature_decimal++;
  6319  01F2  3004               	movlw	4
  6320  01F3  026C               	subwf	_temperature_decimal,w
  6321  01F4  1C03               	skipc
  6322  01F5  29FA               	goto	l537
  6323  01F6  3001               	movlw	1
  6324  01F7  00D2               	movwf	??_tc_temperature_trans
  6325  01F8  0852               	movf	??_tc_temperature_trans,w
  6326  01F9  07EC               	addwf	_temperature_decimal,f
  6327  01FA                     l537:	
  6328                           
  6329                           ;max31856.c: 282: if((temperature_decimal == 4 || temperature_decimal == 8) && (temperat
      +                          ure_int & 0x01)) temperature_decimal++;
  6330  01FA  3004               	movlw	4
  6331  01FB  066C               	xorwf	_temperature_decimal,w
  6332  01FC  1903               	btfsc	3,2
  6333  01FD  2A02               	goto	l540
  6334  01FE  3008               	movlw	8
  6335  01FF  066C               	xorwf	_temperature_decimal,w
  6336  0200  1D03               	btfss	3,2
  6337  0201  0008               	return
  6338  0202                     l540:	
  6339  0202  0021               	movlb	1	; select bank1
  6340  0203  1C32               	btfss	_temperature_int^(0+128),0
  6341  0204  0008               	return
  6342  0205  3001               	movlw	1
  6343  0206  0020               	movlb	0	; select bank0
  6344  0207  00D2               	movwf	??_tc_temperature_trans
  6345  0208  0852               	movf	??_tc_temperature_trans,w
  6346  0209  07EC               	addwf	_temperature_decimal,f
  6347  020A  0008               	return
  6348  020B                     __end_of_tc_temperature_trans:	
  6349                           
  6350                           	psect	text20
  6351  020B                     __ptext20:	
  6352 ;; *************** function _Calculate_Time *****************
  6353 ;; Defined at:
  6354 ;;		line 163 in file "mcc_generated_files/save.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;		None
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;  temp2           4   46[BANK0 ] unsigned long 
  6359 ;;  temp1           4   42[BANK0 ] unsigned long 
  6360 ;;  temp            4   38[BANK0 ] unsigned long 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      unsigned char 
  6363 ;; Registers used:
  6364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;Total ram usage:       22 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    8
  6377 ;; This function calls:
  6378 ;;		_Bq32k_Rtc_Read_Time
  6379 ;;		_Save_Write_time
  6380 ;;		_Write_Flash_finish
  6381 ;;		_Write_Flash_head
  6382 ;;		___wmul
  6383 ;; This function is called by:
  6384 ;;		_tc_temperature_trans
  6385 ;;		_Save_process
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           
  6390                           ;psect for function _Calculate_Time
  6391  020B                     _Calculate_Time:	
  6392                           
  6393                           ;save.c: 165: unsigned long temp = 0 ;
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _Calculate_Time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6397  020B  3000               	movlw	0
  6398  020C  0020               	movlb	0	; select bank0
  6399  020D  00C9               	movwf	Calculate_Time@temp+3
  6400  020E  3000               	movlw	0
  6401  020F  00C8               	movwf	Calculate_Time@temp+2
  6402  0210  3000               	movlw	0
  6403  0211  00C7               	movwf	Calculate_Time@temp+1
  6404  0212  3000               	movlw	0
  6405  0213  00C6               	movwf	Calculate_Time@temp
  6406                           
  6407                           ;save.c: 166: unsigned long temp1 = 0 ;
  6408  0214  3000               	movlw	0
  6409  0215  00CD               	movwf	Calculate_Time@temp1+3
  6410  0216  3000               	movlw	0
  6411  0217  00CC               	movwf	Calculate_Time@temp1+2
  6412  0218  3000               	movlw	0
  6413  0219  00CB               	movwf	Calculate_Time@temp1+1
  6414  021A  3000               	movlw	0
  6415  021B  00CA               	movwf	Calculate_Time@temp1
  6416                           
  6417                           ;save.c: 167: unsigned long temp2 = 0 ;
  6418  021C  3000               	movlw	0
  6419  021D  00D1               	movwf	Calculate_Time@temp2+3
  6420  021E  3000               	movlw	0
  6421  021F  00D0               	movwf	Calculate_Time@temp2+2
  6422  0220  3000               	movlw	0
  6423  0221  00CF               	movwf	Calculate_Time@temp2+1
  6424  0222  3000               	movlw	0
  6425  0223  00CE               	movwf	Calculate_Time@temp2
  6426                           
  6427                           ;save.c: 168: Bq32k_Rtc_Read_Time(&rtc_tm);
  6428  0224  30DA               	movlw	(low (_rtc_tm| 0))& (0+255)
  6429  0225  318F  279C  3182   	fcall	_Bq32k_Rtc_Read_Time
  6430                           
  6431                           ;save.c: 169: if( time_count == 1 )
  6432  0228  0020               	movlb	0	; select bank0
  6433  0229  036D               	decf	_time_count,w
  6434  022A  1D03               	btfss	3,2
  6435  022B  2AE0               	goto	l4755
  6436                           
  6437                           ;save.c: 170: {
  6438                           ;save.c: 171: if(rtc_tm.date != rtc_save_ch1.date)
  6439  022C  0021               	movlb	1	; select bank1
  6440  022D  085E               	movf	(_rtc_tm^(0+128)+4),w
  6441  022E  0650               	xorwf	(_rtc_save_ch1^(0+128)+4),w
  6442  022F  1D03               	btfss	3,2
  6443  0230  2AE9               	goto	l4759
  6444                           
  6445                           ;save.c: 183: else
  6446                           ;save.c: 184: {
  6447                           ;save.c: 185: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6448                           
  6449                           ;save.c: 182: }
  6450                           
  6451                           ;save.c: 181: time_count = 0;
  6452                           
  6453                           ;save.c: 178: Cur_temperature_time_ch2 = 0;
  6454                           
  6455                           ;save.c: 177: Cur_temperature_time_ch1 = 0;
  6456                           
  6457                           ;save.c: 176: Save_Write_time();
  6458                           
  6459                           ;save.c: 175: Write_Flash_head();
  6460                           
  6461                           ;save.c: 172: {
  6462                           ;save.c: 174: Write_Flash_finish();
  6463  0231  0021               	movlb	1	; select bank1
  6464  0232  085A               	movf	_rtc_tm^(0+128),w
  6465  0233  0020               	movlb	0	; select bank0
  6466  0234  00BC               	movwf	??_Calculate_Time
  6467  0235  01BD               	clrf	??_Calculate_Time+1
  6468  0236  0021               	movlb	1	; select bank1
  6469  0237  085C               	movf	(_rtc_tm^(0+128)+2),w
  6470  0238  0020               	movlb	0	; select bank0
  6471  0239  00BE               	movwf	??_Calculate_Time+2
  6472  023A  01BF               	clrf	??_Calculate_Time+3
  6473  023B  083E               	movf	??_Calculate_Time+2,w
  6474  023C  00F3               	movwf	___wmul@multiplier
  6475  023D  083F               	movf	??_Calculate_Time+3,w
  6476  023E  00F4               	movwf	___wmul@multiplier+1
  6477  023F  3010               	movlw	16
  6478  0240  00F5               	movwf	___wmul@multiplicand
  6479  0241  300E               	movlw	14
  6480  0242  00F6               	movwf	___wmul@multiplicand+1
  6481  0243  318A  2200  3182   	fcall	___wmul
  6482  0246  0873               	movf	?___wmul,w
  6483  0247  0020               	movlb	0	; select bank0
  6484  0248  00C0               	movwf	??_Calculate_Time+4
  6485  0249  0874               	movf	?___wmul+1,w
  6486  024A  00C1               	movwf	??_Calculate_Time+5
  6487  024B  0021               	movlb	1	; select bank1
  6488  024C  085B               	movf	(_rtc_tm^(0+128)+1),w
  6489  024D  0020               	movlb	0	; select bank0
  6490  024E  00C2               	movwf	??_Calculate_Time+6
  6491  024F  01C3               	clrf	??_Calculate_Time+7
  6492  0250  0842               	movf	??_Calculate_Time+6,w
  6493  0251  00F3               	movwf	___wmul@multiplier
  6494  0252  0843               	movf	??_Calculate_Time+7,w
  6495  0253  00F4               	movwf	___wmul@multiplier+1
  6496  0254  303C               	movlw	60
  6497  0255  00F5               	movwf	___wmul@multiplicand
  6498  0256  3000               	movlw	0
  6499  0257  00F6               	movwf	___wmul@multiplicand+1
  6500  0258  318A  2200  3182   	fcall	___wmul
  6501  025B  0873               	movf	?___wmul,w
  6502  025C  0020               	movlb	0	; select bank0
  6503  025D  0740               	addwf	??_Calculate_Time+4,w
  6504  025E  00C4               	movwf	??_Calculate_Time+8
  6505  025F  0874               	movf	?___wmul+1,w
  6506  0260  3D41               	addwfc	??_Calculate_Time+5,w
  6507  0261  00C5               	movwf	??_Calculate_Time+9
  6508  0262  083C               	movf	??_Calculate_Time,w
  6509  0263  0744               	addwf	??_Calculate_Time+8,w
  6510  0264  00CA               	movwf	Calculate_Time@temp1
  6511  0265  083D               	movf	??_Calculate_Time+1,w
  6512  0266  3D45               	addwfc	??_Calculate_Time+9,w
  6513  0267  00CB               	movwf	Calculate_Time@temp1+1
  6514  0268  01CC               	clrf	Calculate_Time@temp1+2
  6515  0269  1BCB               	btfsc	Calculate_Time@temp1+1,7
  6516  026A  03CC               	decf	Calculate_Time@temp1+2,f
  6517  026B  084C               	movf	Calculate_Time@temp1+2,w
  6518  026C  00CD               	movwf	Calculate_Time@temp1+3
  6519                           
  6520                           ;save.c: 186: temp2 = rtc_save_ch1.hours*3600+rtc_save_ch1.minutes*60+rtc_save_ch1.secon
      +                          ds;
  6521  026D  0021               	movlb	1	; select bank1
  6522  026E  084C               	movf	_rtc_save_ch1^(0+128),w
  6523  026F  0020               	movlb	0	; select bank0
  6524  0270  00BC               	movwf	??_Calculate_Time
  6525  0271  01BD               	clrf	??_Calculate_Time+1
  6526  0272  0021               	movlb	1	; select bank1
  6527  0273  084E               	movf	(_rtc_save_ch1^(0+128)+2),w
  6528  0274  0020               	movlb	0	; select bank0
  6529  0275  00BE               	movwf	??_Calculate_Time+2
  6530  0276  01BF               	clrf	??_Calculate_Time+3
  6531  0277  083E               	movf	??_Calculate_Time+2,w
  6532  0278  00F3               	movwf	___wmul@multiplier
  6533  0279  083F               	movf	??_Calculate_Time+3,w
  6534  027A  00F4               	movwf	___wmul@multiplier+1
  6535  027B  3010               	movlw	16
  6536  027C  00F5               	movwf	___wmul@multiplicand
  6537  027D  300E               	movlw	14
  6538  027E  00F6               	movwf	___wmul@multiplicand+1
  6539  027F  318A  2200  3182   	fcall	___wmul
  6540  0282  0873               	movf	?___wmul,w
  6541  0283  0020               	movlb	0	; select bank0
  6542  0284  00C0               	movwf	??_Calculate_Time+4
  6543  0285  0874               	movf	?___wmul+1,w
  6544  0286  00C1               	movwf	??_Calculate_Time+5
  6545  0287  0021               	movlb	1	; select bank1
  6546  0288  084D               	movf	(_rtc_save_ch1^(0+128)+1),w
  6547  0289  0020               	movlb	0	; select bank0
  6548  028A  00C2               	movwf	??_Calculate_Time+6
  6549  028B  01C3               	clrf	??_Calculate_Time+7
  6550  028C  0842               	movf	??_Calculate_Time+6,w
  6551  028D  00F3               	movwf	___wmul@multiplier
  6552  028E  0843               	movf	??_Calculate_Time+7,w
  6553  028F  00F4               	movwf	___wmul@multiplier+1
  6554  0290  303C               	movlw	60
  6555  0291  00F5               	movwf	___wmul@multiplicand
  6556  0292  3000               	movlw	0
  6557  0293  00F6               	movwf	___wmul@multiplicand+1
  6558  0294  318A  2200  3182   	fcall	___wmul
  6559  0297  0873               	movf	?___wmul,w
  6560  0298  0020               	movlb	0	; select bank0
  6561  0299  0740               	addwf	??_Calculate_Time+4,w
  6562  029A  00C4               	movwf	??_Calculate_Time+8
  6563  029B  0874               	movf	?___wmul+1,w
  6564  029C  3D41               	addwfc	??_Calculate_Time+5,w
  6565  029D  00C5               	movwf	??_Calculate_Time+9
  6566  029E  083C               	movf	??_Calculate_Time,w
  6567  029F  0744               	addwf	??_Calculate_Time+8,w
  6568  02A0  00CE               	movwf	Calculate_Time@temp2
  6569  02A1  083D               	movf	??_Calculate_Time+1,w
  6570  02A2  3D45               	addwfc	??_Calculate_Time+9,w
  6571  02A3  00CF               	movwf	Calculate_Time@temp2+1
  6572  02A4  01D0               	clrf	Calculate_Time@temp2+2
  6573  02A5  1BCF               	btfsc	Calculate_Time@temp2+1,7
  6574  02A6  03D0               	decf	Calculate_Time@temp2+2,f
  6575  02A7  0850               	movf	Calculate_Time@temp2+2,w
  6576  02A8  00D1               	movwf	Calculate_Time@temp2+3
  6577                           
  6578                           ;save.c: 187: temp = temp1 - temp2;
  6579  02A9  084A               	movf	Calculate_Time@temp1,w
  6580  02AA  00BC               	movwf	??_Calculate_Time
  6581  02AB  084B               	movf	Calculate_Time@temp1+1,w
  6582  02AC  00BD               	movwf	??_Calculate_Time+1
  6583  02AD  084C               	movf	Calculate_Time@temp1+2,w
  6584  02AE  00BE               	movwf	??_Calculate_Time+2
  6585  02AF  084D               	movf	Calculate_Time@temp1+3,w
  6586  02B0  00BF               	movwf	??_Calculate_Time+3
  6587  02B1  094E               	comf	Calculate_Time@temp2,w
  6588  02B2  00C0               	movwf	??_Calculate_Time+4
  6589  02B3  094F               	comf	Calculate_Time@temp2+1,w
  6590  02B4  00C1               	movwf	??_Calculate_Time+5
  6591  02B5  0950               	comf	Calculate_Time@temp2+2,w
  6592  02B6  00C2               	movwf	??_Calculate_Time+6
  6593  02B7  0951               	comf	Calculate_Time@temp2+3,w
  6594  02B8  00C3               	movwf	??_Calculate_Time+7
  6595  02B9  0AC0               	incf	??_Calculate_Time+4,f
  6596  02BA  1903               	skipnz
  6597  02BB  0AC1               	incf	??_Calculate_Time+5,f
  6598  02BC  1903               	skipnz
  6599  02BD  0AC2               	incf	??_Calculate_Time+6,f
  6600  02BE  1903               	skipnz
  6601  02BF  0AC3               	incf	??_Calculate_Time+7,f
  6602  02C0  0840               	movf	??_Calculate_Time+4,w
  6603  02C1  07BC               	addwf	??_Calculate_Time,f
  6604  02C2  0841               	movf	??_Calculate_Time+5,w
  6605  02C3  3DBD               	addwfc	??_Calculate_Time+1,f
  6606  02C4  0842               	movf	??_Calculate_Time+6,w
  6607  02C5  3DBE               	addwfc	??_Calculate_Time+2,f
  6608  02C6  0843               	movf	??_Calculate_Time+7,w
  6609  02C7  3DBF               	addwfc	??_Calculate_Time+3,f
  6610  02C8  083F               	movf	??_Calculate_Time+3,w
  6611  02C9  00C9               	movwf	Calculate_Time@temp+3
  6612  02CA  083E               	movf	??_Calculate_Time+2,w
  6613  02CB  00C8               	movwf	Calculate_Time@temp+2
  6614  02CC  083D               	movf	??_Calculate_Time+1,w
  6615  02CD  00C7               	movwf	Calculate_Time@temp+1
  6616  02CE  083C               	movf	??_Calculate_Time,w
  6617  02CF  00C6               	movwf	Calculate_Time@temp
  6618                           
  6619                           ;save.c: 188: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  6620  02D0  30CC               	movlw	low (_rtc_save_ch1| 0)
  6621  02D1  0086               	movwf	6
  6622  02D2  0187               	clrf	7
  6623  02D3  30DA               	movlw	low (_rtc_tm| 0)
  6624  02D4  0084               	movwf	4
  6625  02D5  0185               	clrf	5
  6626  02D6  3007               	movlw	7
  6627  02D7  0020               	movlb	0	; select bank0
  6628  02D8  00BC               	movwf	??_Calculate_Time
  6629  02D9                     u402m0:	
  6630  02D9  0012               	moviw fsr0++
  6631  02DA  001E               	movwi fsr1++
  6632  02DB  0BBC               	decfsz	??_Calculate_Time,f
  6633  02DC  2AD9               	goto	u402m0
  6634                           
  6635                           ;save.c: 189: return temp;
  6636  02DD  0020               	movlb	0	; select bank0
  6637  02DE  0846               	movf	Calculate_Time@temp,w
  6638  02DF  0008               	return
  6639  02E0                     l4755:	
  6640                           ;save.c: 190: }
  6641                           ;save.c: 191: }
  6642                           
  6643                           
  6644                           ;save.c: 192: else if( time_count == 3 )
  6645  02E0  3003               	movlw	3
  6646  02E1  066D               	xorwf	_time_count,w
  6647  02E2  1D03               	btfss	3,2
  6648  02E3  2BA7               	goto	l4779
  6649                           
  6650                           ;save.c: 193: {
  6651                           ;save.c: 194: if(rtc_tm.date != rtc_save_ch2.date)
  6652  02E4  0021               	movlb	1	; select bank1
  6653  02E5  085E               	movf	(_rtc_tm^(0+128)+4),w
  6654  02E6  0657               	xorwf	(_rtc_save_ch2^(0+128)+4),w
  6655  02E7  1903               	skipnz
  6656  02E8  2AF8               	goto	l4769
  6657  02E9                     l4759:	
  6658                           
  6659                           ;save.c: 195: {
  6660                           ;save.c: 197: Write_Flash_finish();
  6661  02E9  318B  2303  3182   	fcall	_Write_Flash_finish
  6662                           
  6663                           ;save.c: 198: Write_Flash_head();
  6664  02EC  318B  2332  3182   	fcall	_Write_Flash_head
  6665                           
  6666                           ;save.c: 199: Save_Write_time();
  6667  02EF  3187  276A  3182   	fcall	_Save_Write_time
  6668                           
  6669                           ;save.c: 200: Cur_temperature_time_ch1 = 0;
  6670  02F2  0021               	movlb	1	; select bank1
  6671  02F3  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  6672                           
  6673                           ;save.c: 201: Cur_temperature_time_ch2 = 0;
  6674  02F4  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  6675                           
  6676                           ;save.c: 204: time_count = 0;
  6677  02F5  0020               	movlb	0	; select bank0
  6678  02F6  01ED               	clrf	_time_count
  6679                           
  6680                           ;save.c: 205: }
  6681  02F7  2BA7               	goto	l4779
  6682  02F8                     l4769:	
  6683                           
  6684                           ;save.c: 206: else
  6685                           ;save.c: 207: {
  6686                           ;save.c: 208: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6687  02F8  0021               	movlb	1	; select bank1
  6688  02F9  085A               	movf	_rtc_tm^(0+128),w
  6689  02FA  0020               	movlb	0	; select bank0
  6690  02FB  00BC               	movwf	??_Calculate_Time
  6691  02FC  01BD               	clrf	??_Calculate_Time+1
  6692  02FD  0021               	movlb	1	; select bank1
  6693  02FE  085C               	movf	(_rtc_tm^(0+128)+2),w
  6694  02FF  0020               	movlb	0	; select bank0
  6695  0300  00BE               	movwf	??_Calculate_Time+2
  6696  0301  01BF               	clrf	??_Calculate_Time+3
  6697  0302  083E               	movf	??_Calculate_Time+2,w
  6698  0303  00F3               	movwf	___wmul@multiplier
  6699  0304  083F               	movf	??_Calculate_Time+3,w
  6700  0305  00F4               	movwf	___wmul@multiplier+1
  6701  0306  3010               	movlw	16
  6702  0307  00F5               	movwf	___wmul@multiplicand
  6703  0308  300E               	movlw	14
  6704  0309  00F6               	movwf	___wmul@multiplicand+1
  6705  030A  318A  2200  3182   	fcall	___wmul
  6706  030D  0873               	movf	?___wmul,w
  6707  030E  0020               	movlb	0	; select bank0
  6708  030F  00C0               	movwf	??_Calculate_Time+4
  6709  0310  0874               	movf	?___wmul+1,w
  6710  0311  00C1               	movwf	??_Calculate_Time+5
  6711  0312  0021               	movlb	1	; select bank1
  6712  0313  085B               	movf	(_rtc_tm^(0+128)+1),w
  6713  0314  0020               	movlb	0	; select bank0
  6714  0315  00C2               	movwf	??_Calculate_Time+6
  6715  0316  01C3               	clrf	??_Calculate_Time+7
  6716  0317  0842               	movf	??_Calculate_Time+6,w
  6717  0318  00F3               	movwf	___wmul@multiplier
  6718  0319  0843               	movf	??_Calculate_Time+7,w
  6719  031A  00F4               	movwf	___wmul@multiplier+1
  6720  031B  303C               	movlw	60
  6721  031C  00F5               	movwf	___wmul@multiplicand
  6722  031D  3000               	movlw	0
  6723  031E  00F6               	movwf	___wmul@multiplicand+1
  6724  031F  318A  2200  3182   	fcall	___wmul
  6725  0322  0873               	movf	?___wmul,w
  6726  0323  0020               	movlb	0	; select bank0
  6727  0324  0740               	addwf	??_Calculate_Time+4,w
  6728  0325  00C4               	movwf	??_Calculate_Time+8
  6729  0326  0874               	movf	?___wmul+1,w
  6730  0327  3D41               	addwfc	??_Calculate_Time+5,w
  6731  0328  00C5               	movwf	??_Calculate_Time+9
  6732  0329  083C               	movf	??_Calculate_Time,w
  6733  032A  0744               	addwf	??_Calculate_Time+8,w
  6734  032B  00CA               	movwf	Calculate_Time@temp1
  6735  032C  083D               	movf	??_Calculate_Time+1,w
  6736  032D  3D45               	addwfc	??_Calculate_Time+9,w
  6737  032E  00CB               	movwf	Calculate_Time@temp1+1
  6738  032F  01CC               	clrf	Calculate_Time@temp1+2
  6739  0330  1BCB               	btfsc	Calculate_Time@temp1+1,7
  6740  0331  03CC               	decf	Calculate_Time@temp1+2,f
  6741  0332  084C               	movf	Calculate_Time@temp1+2,w
  6742  0333  00CD               	movwf	Calculate_Time@temp1+3
  6743                           
  6744                           ;save.c: 209: temp2 = rtc_save_ch2.hours*3600+rtc_save_ch2.minutes*60+rtc_save_ch2.secon
      +                          ds;
  6745  0334  0021               	movlb	1	; select bank1
  6746  0335  0853               	movf	_rtc_save_ch2^(0+128),w
  6747  0336  0020               	movlb	0	; select bank0
  6748  0337  00BC               	movwf	??_Calculate_Time
  6749  0338  01BD               	clrf	??_Calculate_Time+1
  6750  0339  0021               	movlb	1	; select bank1
  6751  033A  0855               	movf	(_rtc_save_ch2^(0+128)+2),w
  6752  033B  0020               	movlb	0	; select bank0
  6753  033C  00BE               	movwf	??_Calculate_Time+2
  6754  033D  01BF               	clrf	??_Calculate_Time+3
  6755  033E  083E               	movf	??_Calculate_Time+2,w
  6756  033F  00F3               	movwf	___wmul@multiplier
  6757  0340  083F               	movf	??_Calculate_Time+3,w
  6758  0341  00F4               	movwf	___wmul@multiplier+1
  6759  0342  3010               	movlw	16
  6760  0343  00F5               	movwf	___wmul@multiplicand
  6761  0344  300E               	movlw	14
  6762  0345  00F6               	movwf	___wmul@multiplicand+1
  6763  0346  318A  2200  3182   	fcall	___wmul
  6764  0349  0873               	movf	?___wmul,w
  6765  034A  0020               	movlb	0	; select bank0
  6766  034B  00C0               	movwf	??_Calculate_Time+4
  6767  034C  0874               	movf	?___wmul+1,w
  6768  034D  00C1               	movwf	??_Calculate_Time+5
  6769  034E  0021               	movlb	1	; select bank1
  6770  034F  0854               	movf	(_rtc_save_ch2^(0+128)+1),w
  6771  0350  0020               	movlb	0	; select bank0
  6772  0351  00C2               	movwf	??_Calculate_Time+6
  6773  0352  01C3               	clrf	??_Calculate_Time+7
  6774  0353  0842               	movf	??_Calculate_Time+6,w
  6775  0354  00F3               	movwf	___wmul@multiplier
  6776  0355  0843               	movf	??_Calculate_Time+7,w
  6777  0356  00F4               	movwf	___wmul@multiplier+1
  6778  0357  303C               	movlw	60
  6779  0358  00F5               	movwf	___wmul@multiplicand
  6780  0359  3000               	movlw	0
  6781  035A  00F6               	movwf	___wmul@multiplicand+1
  6782  035B  318A  2200  3182   	fcall	___wmul
  6783  035E  0873               	movf	?___wmul,w
  6784  035F  0020               	movlb	0	; select bank0
  6785  0360  0740               	addwf	??_Calculate_Time+4,w
  6786  0361  00C4               	movwf	??_Calculate_Time+8
  6787  0362  0874               	movf	?___wmul+1,w
  6788  0363  3D41               	addwfc	??_Calculate_Time+5,w
  6789  0364  00C5               	movwf	??_Calculate_Time+9
  6790  0365  083C               	movf	??_Calculate_Time,w
  6791  0366  0744               	addwf	??_Calculate_Time+8,w
  6792  0367  00CE               	movwf	Calculate_Time@temp2
  6793  0368  083D               	movf	??_Calculate_Time+1,w
  6794  0369  3D45               	addwfc	??_Calculate_Time+9,w
  6795  036A  00CF               	movwf	Calculate_Time@temp2+1
  6796  036B  01D0               	clrf	Calculate_Time@temp2+2
  6797  036C  1BCF               	btfsc	Calculate_Time@temp2+1,7
  6798  036D  03D0               	decf	Calculate_Time@temp2+2,f
  6799  036E  0850               	movf	Calculate_Time@temp2+2,w
  6800  036F  00D1               	movwf	Calculate_Time@temp2+3
  6801                           
  6802                           ;save.c: 210: temp = temp1 - temp2;
  6803  0370  084A               	movf	Calculate_Time@temp1,w
  6804  0371  00BC               	movwf	??_Calculate_Time
  6805  0372  084B               	movf	Calculate_Time@temp1+1,w
  6806  0373  00BD               	movwf	??_Calculate_Time+1
  6807  0374  084C               	movf	Calculate_Time@temp1+2,w
  6808  0375  00BE               	movwf	??_Calculate_Time+2
  6809  0376  084D               	movf	Calculate_Time@temp1+3,w
  6810  0377  00BF               	movwf	??_Calculate_Time+3
  6811  0378  094E               	comf	Calculate_Time@temp2,w
  6812  0379  00C0               	movwf	??_Calculate_Time+4
  6813  037A  094F               	comf	Calculate_Time@temp2+1,w
  6814  037B  00C1               	movwf	??_Calculate_Time+5
  6815  037C  0950               	comf	Calculate_Time@temp2+2,w
  6816  037D  00C2               	movwf	??_Calculate_Time+6
  6817  037E  0951               	comf	Calculate_Time@temp2+3,w
  6818  037F  00C3               	movwf	??_Calculate_Time+7
  6819  0380  0AC0               	incf	??_Calculate_Time+4,f
  6820  0381  1903               	skipnz
  6821  0382  0AC1               	incf	??_Calculate_Time+5,f
  6822  0383  1903               	skipnz
  6823  0384  0AC2               	incf	??_Calculate_Time+6,f
  6824  0385  1903               	skipnz
  6825  0386  0AC3               	incf	??_Calculate_Time+7,f
  6826  0387  0840               	movf	??_Calculate_Time+4,w
  6827  0388  07BC               	addwf	??_Calculate_Time,f
  6828  0389  0841               	movf	??_Calculate_Time+5,w
  6829  038A  3DBD               	addwfc	??_Calculate_Time+1,f
  6830  038B  0842               	movf	??_Calculate_Time+6,w
  6831  038C  3DBE               	addwfc	??_Calculate_Time+2,f
  6832  038D  0843               	movf	??_Calculate_Time+7,w
  6833  038E  3DBF               	addwfc	??_Calculate_Time+3,f
  6834  038F  083F               	movf	??_Calculate_Time+3,w
  6835  0390  00C9               	movwf	Calculate_Time@temp+3
  6836  0391  083E               	movf	??_Calculate_Time+2,w
  6837  0392  00C8               	movwf	Calculate_Time@temp+2
  6838  0393  083D               	movf	??_Calculate_Time+1,w
  6839  0394  00C7               	movwf	Calculate_Time@temp+1
  6840  0395  083C               	movf	??_Calculate_Time,w
  6841  0396  00C6               	movwf	Calculate_Time@temp
  6842                           
  6843                           ;save.c: 211: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  6844  0397  30D3               	movlw	low (_rtc_save_ch2| 0)
  6845  0398  0086               	movwf	6
  6846  0399  0187               	clrf	7
  6847  039A  30DA               	movlw	low (_rtc_tm| 0)
  6848  039B  0084               	movwf	4
  6849  039C  0185               	clrf	5
  6850  039D  3007               	movlw	7
  6851  039E  0020               	movlb	0	; select bank0
  6852  039F  00BC               	movwf	??_Calculate_Time
  6853  03A0                     u405m0:	
  6854  03A0  0012               	moviw fsr0++
  6855  03A1  001E               	movwi fsr1++
  6856  03A2  0BBC               	decfsz	??_Calculate_Time,f
  6857  03A3  2BA0               	goto	u405m0
  6858                           
  6859                           ;save.c: 212: return temp;
  6860  03A4  0020               	movlb	0	; select bank0
  6861  03A5  0846               	movf	Calculate_Time@temp,w
  6862  03A6  0008               	return
  6863  03A7                     l4779:	
  6864                           
  6865                           ;save.c: 213: }
  6866                           ;save.c: 214: }
  6867                           ;save.c: 215: return 0;
  6868  03A7  3000               	movlw	0
  6869  03A8  0008               	return
  6870  03A9                     __end_of_Calculate_Time:	
  6871                           
  6872                           	psect	text21
  6873  0A00                     __ptext21:	
  6874 ;; *************** function ___wmul *****************
  6875 ;; Defined at:
  6876 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;  multiplier      2    3[COMMON] unsigned int 
  6879 ;;  multiplicand    2    5[COMMON] unsigned int 
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;  product         2    0[BANK0 ] unsigned int 
  6882 ;; Return value:  Size  Location     Type
  6883 ;;                  2    3[COMMON] unsigned int 
  6884 ;; Registers used:
  6885 ;;		wreg, status,2, status,0
  6886 ;; Tracked objects:
  6887 ;;		On entry : 0/0
  6888 ;;		On exit  : 0/0
  6889 ;;		Unchanged: 0/0
  6890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;Total ram usage:        6 bytes
  6896 ;; Hardware stack levels used:    1
  6897 ;; Hardware stack levels required when called:    3
  6898 ;; This function calls:
  6899 ;;		Nothing
  6900 ;; This function is called by:
  6901 ;;		_Calculate_Time
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           
  6906                           ;psect for function ___wmul
  6907  0A00                     ___wmul:	
  6908                           
  6909                           ;incstack = 0
  6910                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6911  0A00  0020               	movlb	0	; select bank0
  6912  0A01  01A0               	clrf	___wmul@product
  6913  0A02  01A1               	clrf	___wmul@product+1
  6914  0A03                     l4661:	
  6915  0A03  1C73               	btfss	___wmul@multiplier,0
  6916  0A04  2A0A               	goto	l1119
  6917  0A05  0875               	movf	___wmul@multiplicand,w
  6918  0A06  0020               	movlb	0	; select bank0
  6919  0A07  07A0               	addwf	___wmul@product,f
  6920  0A08  0876               	movf	___wmul@multiplicand+1,w
  6921  0A09  3DA1               	addwfc	___wmul@product+1,f
  6922  0A0A                     l1119:	
  6923  0A0A  3001               	movlw	1
  6924  0A0B                     u3905:	
  6925  0A0B  35F5               	lslf	___wmul@multiplicand,f
  6926  0A0C  0DF6               	rlf	___wmul@multiplicand+1,f
  6927  0A0D  0B89               	decfsz	9,f
  6928  0A0E  2A0B               	goto	u3905
  6929  0A0F  3001               	movlw	1
  6930  0A10                     u3915:	
  6931  0A10  36F4               	lsrf	___wmul@multiplier+1,f
  6932  0A11  0CF3               	rrf	___wmul@multiplier,f
  6933  0A12  0B89               	decfsz	9,f
  6934  0A13  2A10               	goto	u3915
  6935  0A14  0873               	movf	___wmul@multiplier,w
  6936  0A15  0474               	iorwf	___wmul@multiplier+1,w
  6937  0A16  1D03               	btfss	3,2
  6938  0A17  2A03               	goto	l4661
  6939  0A18  0020               	movlb	0	; select bank0
  6940  0A19  0821               	movf	___wmul@product+1,w
  6941  0A1A  00F4               	movwf	?___wmul+1
  6942  0A1B  0820               	movf	___wmul@product,w
  6943  0A1C  00F3               	movwf	?___wmul
  6944  0A1D  0008               	return
  6945  0A1E                     __end_of___wmul:	
  6946                           
  6947                           	psect	text22
  6948  0B32                     __ptext22:	
  6949 ;; *************** function _Write_Flash_head *****************
  6950 ;; Defined at:
  6951 ;;		line 92 in file "mcc_generated_files/save.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      void 
  6958 ;; Registers used:
  6959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    6
  6972 ;; This function calls:
  6973 ;;		_FLASH_WriteWord
  6974 ;; This function is called by:
  6975 ;;		_Key_Process
  6976 ;;		_Calculate_Time
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _Write_Flash_head
  6982  0B32                     _Write_Flash_head:	
  6983                           
  6984                           ;save.c: 94: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0xAAAA);
  6985                           
  6986                           ;incstack = 0
  6987                           ; Regs used in _Write_Flash_head: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6988  0B32  0021               	movlb	1	; select bank1
  6989  0B33  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  6990  0B34  0020               	movlb	0	; select bank0
  6991  0B35  00AD               	movwf	FLASH_WriteWord@flashAddr+1
  6992  0B36  0021               	movlb	1	; select bank1
  6993  0B37  082E               	movf	_Cur_Save_Index^(0+128),w
  6994  0B38  0020               	movlb	0	; select bank0
  6995  0B39  00AC               	movwf	FLASH_WriteWord@flashAddr
  6996  0B3A  3020               	movlw	low _Flash_buff
  6997  0B3B  00AE               	movwf	FLASH_WriteWord@ramBuf
  6998  0B3C  3001               	movlw	high _Flash_buff
  6999  0B3D  00AF               	movwf	FLASH_WriteWord@ramBuf+1
  7000  0B3E  30AA               	movlw	170
  7001  0B3F  00B0               	movwf	FLASH_WriteWord@word
  7002  0B40  30AA               	movlw	170
  7003  0B41  00B1               	movwf	FLASH_WriteWord@word+1
  7004  0B42  318D  25F5  318B   	fcall	_FLASH_WriteWord
  7005                           
  7006                           ;save.c: 95: Cur_Save_Index++;
  7007  0B45  3001               	movlw	1
  7008  0B46  0021               	movlb	1	; select bank1
  7009  0B47  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7010  0B48  3000               	movlw	0
  7011  0B49  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7012                           
  7013                           ;save.c: 96: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0xAAAA);
  7014  0B4A  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7015  0B4B  0020               	movlb	0	; select bank0
  7016  0B4C  00AD               	movwf	FLASH_WriteWord@flashAddr+1
  7017  0B4D  0021               	movlb	1	; select bank1
  7018  0B4E  082E               	movf	_Cur_Save_Index^(0+128),w
  7019  0B4F  0020               	movlb	0	; select bank0
  7020  0B50  00AC               	movwf	FLASH_WriteWord@flashAddr
  7021  0B51  3020               	movlw	low _Flash_buff
  7022  0B52  00AE               	movwf	FLASH_WriteWord@ramBuf
  7023  0B53  3001               	movlw	high _Flash_buff
  7024  0B54  00AF               	movwf	FLASH_WriteWord@ramBuf+1
  7025  0B55  30AA               	movlw	170
  7026  0B56  00B0               	movwf	FLASH_WriteWord@word
  7027  0B57  30AA               	movlw	170
  7028  0B58  00B1               	movwf	FLASH_WriteWord@word+1
  7029  0B59  318D  25F5         	fcall	_FLASH_WriteWord
  7030                           
  7031                           ;save.c: 97: Cur_Save_Index++;
  7032  0B5B  3001               	movlw	1
  7033  0B5C  0021               	movlb	1	; select bank1
  7034  0B5D  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7035  0B5E  3000               	movlw	0
  7036  0B5F  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7037  0B60  0008               	return
  7038  0B61                     __end_of_Write_Flash_head:	
  7039                           
  7040                           	psect	text23
  7041  0B03                     __ptext23:	
  7042 ;; *************** function _Write_Flash_finish *****************
  7043 ;; Defined at:
  7044 ;;		line 106 in file "mcc_generated_files/save.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;		None
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;		None
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  1    wreg      void 
  7051 ;; Registers used:
  7052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;Total ram usage:        0 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    6
  7065 ;; This function calls:
  7066 ;;		_FLASH_WriteWord
  7067 ;; This function is called by:
  7068 ;;		_Key_Process
  7069 ;;		_Serach_Flash_Head
  7070 ;;		_Calculate_Time
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           
  7075                           ;psect for function _Write_Flash_finish
  7076  0B03                     _Write_Flash_finish:	
  7077                           
  7078                           ;save.c: 108: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x5555);
  7079                           
  7080                           ;incstack = 0
  7081                           ; Regs used in _Write_Flash_finish: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7082  0B03  0021               	movlb	1	; select bank1
  7083  0B04  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7084  0B05  0020               	movlb	0	; select bank0
  7085  0B06  00AD               	movwf	FLASH_WriteWord@flashAddr+1
  7086  0B07  0021               	movlb	1	; select bank1
  7087  0B08  082E               	movf	_Cur_Save_Index^(0+128),w
  7088  0B09  0020               	movlb	0	; select bank0
  7089  0B0A  00AC               	movwf	FLASH_WriteWord@flashAddr
  7090  0B0B  3020               	movlw	low _Flash_buff
  7091  0B0C  00AE               	movwf	FLASH_WriteWord@ramBuf
  7092  0B0D  3001               	movlw	high _Flash_buff
  7093  0B0E  00AF               	movwf	FLASH_WriteWord@ramBuf+1
  7094  0B0F  3055               	movlw	85
  7095  0B10  00B0               	movwf	FLASH_WriteWord@word
  7096  0B11  3055               	movlw	85
  7097  0B12  00B1               	movwf	FLASH_WriteWord@word+1
  7098  0B13  318D  25F5  318B   	fcall	_FLASH_WriteWord
  7099                           
  7100                           ;save.c: 109: Cur_Save_Index++;
  7101  0B16  3001               	movlw	1
  7102  0B17  0021               	movlb	1	; select bank1
  7103  0B18  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7104  0B19  3000               	movlw	0
  7105  0B1A  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7106                           
  7107                           ;save.c: 110: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x5555);
  7108  0B1B  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7109  0B1C  0020               	movlb	0	; select bank0
  7110  0B1D  00AD               	movwf	FLASH_WriteWord@flashAddr+1
  7111  0B1E  0021               	movlb	1	; select bank1
  7112  0B1F  082E               	movf	_Cur_Save_Index^(0+128),w
  7113  0B20  0020               	movlb	0	; select bank0
  7114  0B21  00AC               	movwf	FLASH_WriteWord@flashAddr
  7115  0B22  3020               	movlw	low _Flash_buff
  7116  0B23  00AE               	movwf	FLASH_WriteWord@ramBuf
  7117  0B24  3001               	movlw	high _Flash_buff
  7118  0B25  00AF               	movwf	FLASH_WriteWord@ramBuf+1
  7119  0B26  3055               	movlw	85
  7120  0B27  00B0               	movwf	FLASH_WriteWord@word
  7121  0B28  3055               	movlw	85
  7122  0B29  00B1               	movwf	FLASH_WriteWord@word+1
  7123  0B2A  318D  25F5         	fcall	_FLASH_WriteWord
  7124                           
  7125                           ;save.c: 111: Cur_Save_Index++;
  7126  0B2C  3001               	movlw	1
  7127  0B2D  0021               	movlb	1	; select bank1
  7128  0B2E  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7129  0B2F  3000               	movlw	0
  7130  0B30  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7131  0B31  0008               	return
  7132  0B32                     __end_of_Write_Flash_finish:	
  7133                           
  7134                           	psect	text24
  7135  076A                     __ptext24:	
  7136 ;; *************** function _Save_Write_time *****************
  7137 ;; Defined at:
  7138 ;;		line 239 in file "mcc_generated_files/save.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  i               1    0        unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      void 
  7145 ;; Registers used:
  7146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;Total ram usage:        2 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    7
  7159 ;; This function calls:
  7160 ;;		_Bq32k_Rtc_Read_Time
  7161 ;;		_Save_Write_word
  7162 ;; This function is called by:
  7163 ;;		_Key_Process
  7164 ;;		_Calculate_Time
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function _Save_Write_time
  7170  076A                     _Save_Write_time:	
  7171                           
  7172                           ;save.c: 241: unsigned char i;
  7173                           ;save.c: 242: Bq32k_Rtc_Read_Time(&rtc_tm);
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _Save_Write_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7177  076A  30DA               	movlw	(low (_rtc_tm| 0))& (0+255)
  7178  076B  318F  279C  3187   	fcall	_Bq32k_Rtc_Read_Time
  7179                           
  7180                           ;save.c: 243: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  7181  076E  30CC               	movlw	low (_rtc_save_ch1| 0)
  7182  076F  0086               	movwf	6
  7183  0770  0187               	clrf	7
  7184  0771  30DA               	movlw	low (_rtc_tm| 0)
  7185  0772  0084               	movwf	4
  7186  0773  0185               	clrf	5
  7187  0774  3007               	movlw	7
  7188  0775  0020               	movlb	0	; select bank0
  7189  0776  00BA               	movwf	??_Save_Write_time
  7190  0777                     u387m0:	
  7191  0777  0012               	moviw fsr0++
  7192  0778  001E               	movwi fsr1++
  7193  0779  0BBA               	decfsz	??_Save_Write_time,f
  7194  077A  2F77               	goto	u387m0
  7195                           
  7196                           ;save.c: 244: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7197  077B  30D3               	movlw	low (_rtc_save_ch2| 0)
  7198  077C  0086               	movwf	6
  7199  077D  0187               	clrf	7
  7200  077E  30DA               	movlw	low (_rtc_tm| 0)
  7201  077F  0084               	movwf	4
  7202  0780  0185               	clrf	5
  7203  0781  3007               	movlw	7
  7204  0782  0020               	movlb	0	; select bank0
  7205  0783  00BA               	movwf	??_Save_Write_time
  7206  0784                     u388m0:	
  7207  0784  0012               	moviw fsr0++
  7208  0785  001E               	movwi fsr1++
  7209  0786  0BBA               	decfsz	??_Save_Write_time,f
  7210  0787  2F84               	goto	u388m0
  7211                           
  7212                           ;save.c: 245: Save_Write_word( rtc_tm.years);
  7213  0788  0021               	movlb	1	; select bank1
  7214  0789  0860               	movf	(_rtc_tm^(0+128)+6),w
  7215  078A  0020               	movlb	0	; select bank0
  7216  078B  00BA               	movwf	??_Save_Write_time
  7217  078C  01BB               	clrf	??_Save_Write_time+1
  7218  078D  083A               	movf	??_Save_Write_time,w
  7219  078E  00B6               	movwf	Save_Write_word@data
  7220  078F  083B               	movf	??_Save_Write_time+1,w
  7221  0790  00B7               	movwf	Save_Write_word@data+1
  7222  0791  318B  23FB  3187   	fcall	_Save_Write_word
  7223                           
  7224                           ;save.c: 246: Save_Write_word( rtc_tm.month);
  7225  0794  0021               	movlb	1	; select bank1
  7226  0795  085F               	movf	(_rtc_tm^(0+128)+5),w
  7227  0796  0020               	movlb	0	; select bank0
  7228  0797  00BA               	movwf	??_Save_Write_time
  7229  0798  01BB               	clrf	??_Save_Write_time+1
  7230  0799  083A               	movf	??_Save_Write_time,w
  7231  079A  00B6               	movwf	Save_Write_word@data
  7232  079B  083B               	movf	??_Save_Write_time+1,w
  7233  079C  00B7               	movwf	Save_Write_word@data+1
  7234  079D  318B  23FB  3187   	fcall	_Save_Write_word
  7235                           
  7236                           ;save.c: 247: Save_Write_word( rtc_tm.date);
  7237  07A0  0021               	movlb	1	; select bank1
  7238  07A1  085E               	movf	(_rtc_tm^(0+128)+4),w
  7239  07A2  0020               	movlb	0	; select bank0
  7240  07A3  00BA               	movwf	??_Save_Write_time
  7241  07A4  01BB               	clrf	??_Save_Write_time+1
  7242  07A5  083A               	movf	??_Save_Write_time,w
  7243  07A6  00B6               	movwf	Save_Write_word@data
  7244  07A7  083B               	movf	??_Save_Write_time+1,w
  7245  07A8  00B7               	movwf	Save_Write_word@data+1
  7246  07A9  318B  23FB  3187   	fcall	_Save_Write_word
  7247                           
  7248                           ;save.c: 248: Save_Write_word( rtc_tm.hours);
  7249  07AC  0021               	movlb	1	; select bank1
  7250  07AD  085C               	movf	(_rtc_tm^(0+128)+2),w
  7251  07AE  0020               	movlb	0	; select bank0
  7252  07AF  00BA               	movwf	??_Save_Write_time
  7253  07B0  01BB               	clrf	??_Save_Write_time+1
  7254  07B1  083A               	movf	??_Save_Write_time,w
  7255  07B2  00B6               	movwf	Save_Write_word@data
  7256  07B3  083B               	movf	??_Save_Write_time+1,w
  7257  07B4  00B7               	movwf	Save_Write_word@data+1
  7258  07B5  318B  23FB  3187   	fcall	_Save_Write_word
  7259                           
  7260                           ;save.c: 249: Save_Write_word( rtc_tm.minutes);
  7261  07B8  0021               	movlb	1	; select bank1
  7262  07B9  085B               	movf	(_rtc_tm^(0+128)+1),w
  7263  07BA  0020               	movlb	0	; select bank0
  7264  07BB  00BA               	movwf	??_Save_Write_time
  7265  07BC  01BB               	clrf	??_Save_Write_time+1
  7266  07BD  083A               	movf	??_Save_Write_time,w
  7267  07BE  00B6               	movwf	Save_Write_word@data
  7268  07BF  083B               	movf	??_Save_Write_time+1,w
  7269  07C0  00B7               	movwf	Save_Write_word@data+1
  7270  07C1  318B  23FB  3187   	fcall	_Save_Write_word
  7271                           
  7272                           ;save.c: 250: Save_Write_word( rtc_tm.seconds);
  7273  07C4  0021               	movlb	1	; select bank1
  7274  07C5  085A               	movf	_rtc_tm^(0+128),w
  7275  07C6  0020               	movlb	0	; select bank0
  7276  07C7  00BA               	movwf	??_Save_Write_time
  7277  07C8  01BB               	clrf	??_Save_Write_time+1
  7278  07C9  083A               	movf	??_Save_Write_time,w
  7279  07CA  00B6               	movwf	Save_Write_word@data
  7280  07CB  083B               	movf	??_Save_Write_time+1,w
  7281  07CC  00B7               	movwf	Save_Write_word@data+1
  7282  07CD  318B  23FB  3187   	fcall	_Save_Write_word
  7283                           
  7284                           ;save.c: 251: Save_Write_word( rtc_tm.wday);
  7285  07D0  0021               	movlb	1	; select bank1
  7286  07D1  085D               	movf	(_rtc_tm^(0+128)+3),w
  7287  07D2  0020               	movlb	0	; select bank0
  7288  07D3  00BA               	movwf	??_Save_Write_time
  7289  07D4  01BB               	clrf	??_Save_Write_time+1
  7290  07D5  083A               	movf	??_Save_Write_time,w
  7291  07D6  00B6               	movwf	Save_Write_word@data
  7292  07D7  083B               	movf	??_Save_Write_time+1,w
  7293  07D8  00B7               	movwf	Save_Write_word@data+1
  7294  07D9  318B  23FB         	fcall	_Save_Write_word
  7295  07DB  0008               	return
  7296  07DC                     __end_of_Save_Write_time:	
  7297                           
  7298                           	psect	text25
  7299  0BFB                     __ptext25:	
  7300 ;; *************** function _Save_Write_word *****************
  7301 ;; Defined at:
  7302 ;;		line 224 in file "mcc_generated_files/save.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  data            2   22[BANK0 ] unsigned int 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;		None
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7316 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;Total ram usage:        4 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    6
  7323 ;; This function calls:
  7324 ;;		_FLASH_WriteWord
  7325 ;; This function is called by:
  7326 ;;		_tc_temperature_trans
  7327 ;;		_Save_process
  7328 ;;		_Save_Write_time
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           
  7333                           ;psect for function _Save_Write_word
  7334  0BFB                     _Save_Write_word:	
  7335                           
  7336                           ;save.c: 226: if( (data & 0x3fff) == 0x3fff)
  7337                           
  7338                           ;incstack = 0
  7339                           ; Regs used in _Save_Write_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7340  0BFB  30FF               	movlw	255
  7341  0BFC  0020               	movlb	0	; select bank0
  7342  0BFD  0536               	andwf	Save_Write_word@data,w
  7343  0BFE  00B8               	movwf	??_Save_Write_word
  7344  0BFF  303F               	movlw	63
  7345  0C00  0537               	andwf	Save_Write_word@data+1,w
  7346  0C01  00B9               	movwf	??_Save_Write_word+1
  7347  0C02  0A38               	incf	??_Save_Write_word,w
  7348  0C03  303F               	movlw	63
  7349  0C04  1903               	skipnz
  7350  0C05  0639               	xorwf	??_Save_Write_word+1,w
  7351  0C06  1D03               	btfss	3,2
  7352  0C07  2C19               	goto	l4603
  7353                           
  7354                           ;save.c: 227: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x3ffe);
  7355  0C08  0021               	movlb	1	; select bank1
  7356  0C09  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7357  0C0A  0020               	movlb	0	; select bank0
  7358  0C0B  00AD               	movwf	FLASH_WriteWord@flashAddr+1
  7359  0C0C  0021               	movlb	1	; select bank1
  7360  0C0D  082E               	movf	_Cur_Save_Index^(0+128),w
  7361  0C0E  0020               	movlb	0	; select bank0
  7362  0C0F  00AC               	movwf	FLASH_WriteWord@flashAddr
  7363  0C10  3020               	movlw	low _Flash_buff
  7364  0C11  00AE               	movwf	FLASH_WriteWord@ramBuf
  7365  0C12  3001               	movlw	high _Flash_buff
  7366  0C13  00AF               	movwf	FLASH_WriteWord@ramBuf+1
  7367  0C14  30FE               	movlw	254
  7368  0C15  00B0               	movwf	FLASH_WriteWord@word
  7369  0C16  303F               	movlw	63
  7370  0C17  00B1               	movwf	FLASH_WriteWord@word+1
  7371  0C18  2C29               	goto	L8
  7372  0C19                     l4603:	
  7373                           
  7374                           ;save.c: 228: else
  7375                           ;save.c: 229: FLASH_WriteWord(Cur_Save_Index, Flash_buff, data);
  7376  0C19  0021               	movlb	1	; select bank1
  7377  0C1A  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7378  0C1B  0020               	movlb	0	; select bank0
  7379  0C1C  00AD               	movwf	FLASH_WriteWord@flashAddr+1
  7380  0C1D  0021               	movlb	1	; select bank1
  7381  0C1E  082E               	movf	_Cur_Save_Index^(0+128),w
  7382  0C1F  0020               	movlb	0	; select bank0
  7383  0C20  00AC               	movwf	FLASH_WriteWord@flashAddr
  7384  0C21  3020               	movlw	low _Flash_buff
  7385  0C22  00AE               	movwf	FLASH_WriteWord@ramBuf
  7386  0C23  3001               	movlw	high _Flash_buff
  7387  0C24  00AF               	movwf	FLASH_WriteWord@ramBuf+1
  7388  0C25  0837               	movf	Save_Write_word@data+1,w
  7389  0C26  00B1               	movwf	FLASH_WriteWord@word+1
  7390  0C27  0836               	movf	Save_Write_word@data,w
  7391  0C28  00B0               	movwf	FLASH_WriteWord@word
  7392  0C29                     L8:	
  7393  0C29  318D  25F5         	fcall	_FLASH_WriteWord
  7394                           
  7395                           ;save.c: 230: Cur_Save_Index++;
  7396  0C2B  3001               	movlw	1
  7397  0C2C  0021               	movlb	1	; select bank1
  7398  0C2D  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7399  0C2E  3000               	movlw	0
  7400  0C2F  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7401  0C30  0008               	return
  7402  0C31                     __end_of_Save_Write_word:	
  7403                           
  7404                           	psect	text26
  7405  0F9C                     __ptext26:	
  7406 ;; *************** function _Bq32k_Rtc_Read_Time *****************
  7407 ;; Defined at:
  7408 ;;		line 34 in file "mcc_generated_files/bq32k.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  p               1    wreg     PTR struct bq32k_regs
  7411 ;;		 -> rtc_tm(7), 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;  p               1   15[BANK0 ] PTR struct bq32k_regs
  7414 ;;		 -> rtc_tm(7), 
  7415 ;;  temp           10    5[BANK0 ] unsigned char [10]
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      void 
  7418 ;; Registers used:
  7419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;Total ram usage:       13 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    5
  7432 ;; This function calls:
  7433 ;;		_I2C_Read_Buffer
  7434 ;;		_bcd2bin
  7435 ;; This function is called by:
  7436 ;;		_time_Display
  7437 ;;		_Calculate_Time
  7438 ;;		_Save_Write_time
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           
  7443                           ;psect for function _Bq32k_Rtc_Read_Time
  7444  0F9C                     _Bq32k_Rtc_Read_Time:	
  7445                           
  7446                           ;incstack = 0
  7447                           ; Regs used in _Bq32k_Rtc_Read_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7448                           ;Bq32k_Rtc_Read_Time@p stored from wreg
  7449  0F9C  0020               	movlb	0	; select bank0
  7450  0F9D  00AF               	movwf	Bq32k_Rtc_Read_Time@p
  7451                           
  7452                           ;bq32k.c: 36: unsigned char temp[10] ;
  7453                           ;bq32k.c: 37: I2C_Read_Buffer( 0 , temp , 7);
  7454  0F9E  3025               	movlw	(low (Bq32k_Rtc_Read_Time@temp| 0))& (0+255)
  7455  0F9F  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7456  0FA0  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7457  0FA1  00F6               	movwf	I2C_Read_Buffer@buff
  7458  0FA2  3007               	movlw	7
  7459  0FA3  00A4               	movwf	??_Bq32k_Rtc_Read_Time+1
  7460  0FA4  0824               	movf	??_Bq32k_Rtc_Read_Time+1,w
  7461  0FA5  00F7               	movwf	I2C_Read_Buffer@Length
  7462  0FA6  3000               	movlw	0
  7463  0FA7  3186  267F  318F   	fcall	_I2C_Read_Buffer
  7464                           
  7465                           ;bq32k.c: 38: p->seconds = bcd2bin(temp[0] & 0x7F);
  7466  0FAA  0020               	movlb	0	; select bank0
  7467  0FAB  0825               	movf	Bq32k_Rtc_Read_Time@temp,w
  7468  0FAC  397F               	andlw	127
  7469  0FAD  3188  209C  318F   	fcall	_bcd2bin
  7470  0FB0  0020               	movlb	0	; select bank0
  7471  0FB1  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7472  0FB2  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  7473  0FB3  0086               	movwf	6
  7474  0FB4  0187               	clrf	7
  7475  0FB5  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7476  0FB6  0081               	movwf	1
  7477                           
  7478                           ;bq32k.c: 39: p->minutes = bcd2bin(temp[1] & 0x7F);
  7479  0FB7  0826               	movf	Bq32k_Rtc_Read_Time@temp+1,w
  7480  0FB8  397F               	andlw	127
  7481  0FB9  3188  209C  318F   	fcall	_bcd2bin
  7482  0FBC  0020               	movlb	0	; select bank0
  7483  0FBD  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7484  0FBE  0A2F               	incf	Bq32k_Rtc_Read_Time@p,w
  7485  0FBF  0086               	movwf	6
  7486  0FC0  0187               	clrf	7
  7487  0FC1  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7488  0FC2  0081               	movwf	1
  7489                           
  7490                           ;bq32k.c: 40: p->hours = bcd2bin(temp[2] & 0x3F);
  7491  0FC3  0827               	movf	Bq32k_Rtc_Read_Time@temp+2,w
  7492  0FC4  393F               	andlw	63
  7493  0FC5  3188  209C  318F   	fcall	_bcd2bin
  7494  0FC8  0020               	movlb	0	; select bank0
  7495  0FC9  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7496  0FCA  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  7497  0FCB  3E02               	addlw	2
  7498  0FCC  0086               	movwf	6
  7499  0FCD  0187               	clrf	7
  7500  0FCE  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7501  0FCF  0081               	movwf	1
  7502                           
  7503                           ;bq32k.c: 41: p->wday = bcd2bin(temp[3]);
  7504  0FD0  0828               	movf	Bq32k_Rtc_Read_Time@temp+3,w
  7505  0FD1  3188  209C  318F   	fcall	_bcd2bin
  7506  0FD4  0020               	movlb	0	; select bank0
  7507  0FD5  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7508  0FD6  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  7509  0FD7  3E03               	addlw	3
  7510  0FD8  0086               	movwf	6
  7511  0FD9  0187               	clrf	7
  7512  0FDA  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7513  0FDB  0081               	movwf	1
  7514                           
  7515                           ;bq32k.c: 42: p->date = bcd2bin(temp[4]);
  7516  0FDC  0829               	movf	Bq32k_Rtc_Read_Time@temp+4,w
  7517  0FDD  3188  209C  318F   	fcall	_bcd2bin
  7518  0FE0  0020               	movlb	0	; select bank0
  7519  0FE1  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7520  0FE2  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  7521  0FE3  3E04               	addlw	4
  7522  0FE4  0086               	movwf	6
  7523  0FE5  0187               	clrf	7
  7524  0FE6  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7525  0FE7  0081               	movwf	1
  7526                           
  7527                           ;bq32k.c: 43: p->month = bcd2bin(temp[5]);
  7528  0FE8  082A               	movf	Bq32k_Rtc_Read_Time@temp+5,w
  7529  0FE9  3188  209C  318F   	fcall	_bcd2bin
  7530  0FEC  0020               	movlb	0	; select bank0
  7531  0FED  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7532  0FEE  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  7533  0FEF  3E05               	addlw	5
  7534  0FF0  0086               	movwf	6
  7535  0FF1  0187               	clrf	7
  7536  0FF2  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7537  0FF3  0081               	movwf	1
  7538                           
  7539                           ;bq32k.c: 44: p->years= bcd2bin(temp[6]);
  7540  0FF4  082B               	movf	Bq32k_Rtc_Read_Time@temp+6,w
  7541  0FF5  3188  209C         	fcall	_bcd2bin
  7542  0FF7  0020               	movlb	0	; select bank0
  7543  0FF8  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7544  0FF9  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  7545  0FFA  3E06               	addlw	6
  7546  0FFB  0086               	movwf	6
  7547  0FFC  0187               	clrf	7
  7548  0FFD  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7549  0FFE  0081               	movwf	1
  7550  0FFF  0008               	return
  7551  1000                     __end_of_Bq32k_Rtc_Read_Time:	
  7552                           
  7553                           	psect	text27
  7554  089C                     __ptext27:	
  7555 ;; *************** function _bcd2bin *****************
  7556 ;; Defined at:
  7557 ;;		line 72 in file "mcc_generated_files/bq32k.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  val             1    wreg     unsigned char 
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;  val             1    7[COMMON] unsigned char 
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      unsigned char 
  7564 ;; Registers used:
  7565 ;;		wreg, status,2, status,0, pclath, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7575 ;;Total ram usage:        4 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    4
  7578 ;; This function calls:
  7579 ;;		___bmul
  7580 ;; This function is called by:
  7581 ;;		_Bq32k_Rtc_Read_Time
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           
  7586                           ;psect for function _bcd2bin
  7587  089C                     _bcd2bin:	
  7588                           
  7589                           ;incstack = 0
  7590                           ; Regs used in _bcd2bin: [wreg+status,2+status,0+pclath+cstack]
  7591                           ;bcd2bin@val stored from wreg
  7592  089C  00F7               	movwf	bcd2bin@val
  7593                           
  7594                           ;bq32k.c: 74: return (val & 0x0f) + (val >> 4) * 10;
  7595  089D  300F               	movlw	15
  7596  089E  0577               	andwf	bcd2bin@val,w
  7597  089F  0020               	movlb	0	; select bank0
  7598  08A0  00A0               	movwf	??_bcd2bin
  7599  08A1  300A               	movlw	10
  7600  08A2  00A1               	movwf	??_bcd2bin+1
  7601  08A3  0821               	movf	??_bcd2bin+1,w
  7602  08A4  00F3               	movwf	___bmul@multiplicand
  7603  08A5  0877               	movf	bcd2bin@val,w
  7604  08A6  00A2               	movwf	??_bcd2bin+2
  7605  08A7  3004               	movlw	4
  7606  08A8                     u3805:	
  7607  08A8  36A2               	lsrf	??_bcd2bin+2,f
  7608  08A9  0B89               	decfsz	9,f
  7609  08AA  28A8               	goto	u3805
  7610  08AB  0822               	movf	??_bcd2bin+2,w
  7611  08AC  3188  208B         	fcall	___bmul
  7612  08AE  0020               	movlb	0	; select bank0
  7613  08AF  0720               	addwf	??_bcd2bin,w
  7614  08B0  0008               	return
  7615  08B1                     __end_of_bcd2bin:	
  7616                           
  7617                           	psect	text28
  7618  088B                     __ptext28:	
  7619 ;; *************** function ___bmul *****************
  7620 ;; Defined at:
  7621 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  multiplier      1    wreg     unsigned char 
  7624 ;;  multiplicand    1    3[COMMON] unsigned char 
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;  multiplier      1    6[COMMON] unsigned char 
  7627 ;;  product         1    5[COMMON] unsigned char 
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  1    wreg      unsigned char 
  7630 ;; Registers used:
  7631 ;;		wreg, status,2, status,0
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7637 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;Total ram usage:        4 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    3
  7644 ;; This function calls:
  7645 ;;		Nothing
  7646 ;; This function is called by:
  7647 ;;		_bcd2bin
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function ___bmul
  7653  088B                     ___bmul:	
  7654                           
  7655                           ;incstack = 0
  7656                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7657                           ;___bmul@multiplier stored from wreg
  7658  088B  00F6               	movwf	___bmul@multiplier
  7659  088C  01F5               	clrf	___bmul@product
  7660  088D                     l4507:	
  7661  088D  1C76               	btfss	___bmul@multiplier,0
  7662  088E  2893               	goto	l4511
  7663  088F  0873               	movf	___bmul@multiplicand,w
  7664  0890  00F4               	movwf	??___bmul
  7665  0891  0874               	movf	??___bmul,w
  7666  0892  07F5               	addwf	___bmul@product,f
  7667  0893                     l4511:	
  7668  0893  1003               	clrc
  7669  0894  0DF3               	rlf	___bmul@multiplicand,f
  7670  0895  1003               	clrc
  7671  0896  0CF6               	rrf	___bmul@multiplier,f
  7672  0897  0876               	movf	___bmul@multiplier,w
  7673  0898  1D03               	btfss	3,2
  7674  0899  288D               	goto	l4507
  7675  089A  0875               	movf	___bmul@product,w
  7676  089B  0008               	return
  7677  089C                     __end_of___bmul:	
  7678                           
  7679                           	psect	text29
  7680  067F                     __ptext29:	
  7681 ;; *************** function _I2C_Read_Buffer *****************
  7682 ;; Defined at:
  7683 ;;		line 120 in file "mcc_generated_files/i2c.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;  ADD             1    wreg     unsigned char 
  7686 ;;  buff            1    6[COMMON] PTR unsigned char 
  7687 ;;		 -> Bq32k_Rtc_Read_Time@temp(10), 
  7688 ;;  Length          1    7[COMMON] unsigned char 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  ADD             1    1[BANK0 ] unsigned char 
  7691 ;;  Flag            1    2[BANK0 ] unsigned char 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      unsigned char 
  7694 ;; Registers used:
  7695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;Total ram usage:        5 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    4
  7708 ;; This function calls:
  7709 ;;		_I2C_Receive_Byte
  7710 ;;		_I2C_Send_Byte
  7711 ;;		_I2C_Start
  7712 ;;		_I2C_Stop
  7713 ;; This function is called by:
  7714 ;;		_Bq32k_Rtc_Read_Time
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           
  7719                           ;psect for function _I2C_Read_Buffer
  7720  067F                     _I2C_Read_Buffer:	
  7721                           
  7722                           ;incstack = 0
  7723                           ; Regs used in _I2C_Read_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7724                           ;I2C_Read_Buffer@ADD stored from wreg
  7725  067F  0020               	movlb	0	; select bank0
  7726  0680  00A1               	movwf	I2C_Read_Buffer@ADD
  7727                           
  7728                           ;i2c.c: 122: unsigned char Flag=1;
  7729  0681  01A2               	clrf	I2C_Read_Buffer@Flag
  7730  0682  0AA2               	incf	I2C_Read_Buffer@Flag,f
  7731                           
  7732                           ;i2c.c: 124: I2C_Start();
  7733  0683  3189  2126  3186   	fcall	_I2C_Start
  7734                           
  7735                           ;i2c.c: 126: Flag=I2C_Send_Byte(0XD0);
  7736  0686  30D0               	movlw	208
  7737  0687  318D  25A9  3186   	fcall	_I2C_Send_Byte
  7738  068A  0020               	movlb	0	; select bank0
  7739  068B  00A0               	movwf	??_I2C_Read_Buffer
  7740  068C  0820               	movf	??_I2C_Read_Buffer,w
  7741  068D  00A2               	movwf	I2C_Read_Buffer@Flag
  7742                           
  7743                           ;i2c.c: 127: if(Flag)
  7744  068E  0822               	movf	I2C_Read_Buffer@Flag,w
  7745  068F  1D03               	btfss	3,2
  7746  0690  0008               	return
  7747                           
  7748                           ;i2c.c: 130: Flag=I2C_Send_Byte(ADD);
  7749                           
  7750                           ;i2c.c: 128: return 0x01;
  7751                           ;	Return value of _I2C_Read_Buffer is never used
  7752  0691  0821               	movf	I2C_Read_Buffer@ADD,w
  7753  0692  318D  25A9  3186   	fcall	_I2C_Send_Byte
  7754  0695  0020               	movlb	0	; select bank0
  7755  0696  00A0               	movwf	??_I2C_Read_Buffer
  7756  0697  0820               	movf	??_I2C_Read_Buffer,w
  7757  0698  00A2               	movwf	I2C_Read_Buffer@Flag
  7758                           
  7759                           ;i2c.c: 131: if(Flag)
  7760  0699  0822               	movf	I2C_Read_Buffer@Flag,w
  7761  069A  1D03               	btfss	3,2
  7762  069B  0008               	return
  7763                           
  7764                           ;i2c.c: 134: I2C_Start();
  7765                           
  7766                           ;i2c.c: 132: return 0x01;
  7767                           ;	Return value of _I2C_Read_Buffer is never used
  7768  069C  3189  2126  3186   	fcall	_I2C_Start
  7769                           
  7770                           ;i2c.c: 135: Flag=I2C_Send_Byte(0XD0+1);
  7771  069F  30D1               	movlw	209
  7772  06A0  318D  25A9  3186   	fcall	_I2C_Send_Byte
  7773  06A3  0020               	movlb	0	; select bank0
  7774  06A4  00A0               	movwf	??_I2C_Read_Buffer
  7775  06A5  0820               	movf	??_I2C_Read_Buffer,w
  7776  06A6  00A2               	movwf	I2C_Read_Buffer@Flag
  7777                           
  7778                           ;i2c.c: 136: if(Flag)
  7779  06A7  0822               	movf	I2C_Read_Buffer@Flag,w
  7780  06A8  1D03               	btfss	3,2
  7781  06A9  0008               	return
  7782  06AA                     l4575:	
  7783  06AA  3002               	movlw	2
  7784  06AB  0277               	subwf	I2C_Read_Buffer@Length,w
  7785  06AC  1C03               	btfss	3,0
  7786  06AD  2ED5               	goto	l4577
  7787                           
  7788                           ;i2c.c: 140: {
  7789                           ;i2c.c: 141: *buff = I2C_Receive_Byte();
  7790                           
  7791                           ;i2c.c: 139: while(Length>1)
  7792                           
  7793                           ;i2c.c: 137: return 0x01;
  7794                           ;	Return value of _I2C_Read_Buffer is never used
  7795  06AE  318A  2280  3186   	fcall	_I2C_Receive_Byte
  7796  06B1  0020               	movlb	0	; select bank0
  7797  06B2  00A0               	movwf	??_I2C_Read_Buffer
  7798  06B3  0876               	movf	I2C_Read_Buffer@buff,w
  7799  06B4  0086               	movwf	6
  7800  06B5  0187               	clrf	7
  7801  06B6  0820               	movf	??_I2C_Read_Buffer,w
  7802  06B7  0081               	movwf	1
  7803                           
  7804                           ;i2c.c: 143: do { LATB1 = 0; } while(0);
  7805  06B8  0022               	movlb	2	; select bank2
  7806  06B9  108D               	bcf	13,1	;volatile
  7807                           
  7808                           ;i2c.c: 144: _delay((unsigned long)((10)*(4000000/4000000.0)));
  7809  06BA  3003               	movlw	3
  7810  06BB  0020               	movlb	0	; select bank0
  7811  06BC  00A0               	movwf	??_I2C_Read_Buffer
  7812  06BD                     u5387:	
  7813  06BD  0BA0               	decfsz	??_I2C_Read_Buffer,f
  7814  06BE  2EBD               	goto	u5387
  7815                           
  7816                           ;i2c.c: 145: do { LATB0 = 1; } while(0);
  7817  06BF  0022               	movlb	2	; select bank2
  7818  06C0  140D               	bsf	13,0	;volatile
  7819                           
  7820                           ;i2c.c: 146: _delay((unsigned long)((10)*(4000000/4000000.0)));
  7821  06C1  3003               	movlw	3
  7822  06C2  0020               	movlb	0	; select bank0
  7823  06C3  00A0               	movwf	??_I2C_Read_Buffer
  7824  06C4                     u5397:	
  7825  06C4  0BA0               	decfsz	??_I2C_Read_Buffer,f
  7826  06C5  2EC4               	goto	u5397
  7827                           
  7828                           ;i2c.c: 147: do { LATB0 = 0; } while(0);
  7829  06C6  0022               	movlb	2	; select bank2
  7830  06C7  100D               	bcf	13,0	;volatile
  7831                           
  7832                           ;i2c.c: 148: _delay((unsigned long)((10)*(4000000/4000000.0)));
  7833  06C8  3003               	movlw	3
  7834  06C9  0020               	movlb	0	; select bank0
  7835  06CA  00A0               	movwf	??_I2C_Read_Buffer
  7836  06CB                     u5407:	
  7837  06CB  0BA0               	decfsz	??_I2C_Read_Buffer,f
  7838  06CC  2ECB               	goto	u5407
  7839                           
  7840                           ;i2c.c: 150: buff++;
  7841  06CD  3001               	movlw	1
  7842  06CE  0020               	movlb	0	; select bank0
  7843  06CF  00A0               	movwf	??_I2C_Read_Buffer
  7844  06D0  0820               	movf	??_I2C_Read_Buffer,w
  7845  06D1  07F6               	addwf	I2C_Read_Buffer@buff,f
  7846                           
  7847                           ;i2c.c: 151: Length--;
  7848  06D2  3001               	movlw	1
  7849  06D3  02F7               	subwf	I2C_Read_Buffer@Length,f
  7850  06D4  2EAA               	goto	l4575
  7851  06D5                     l4577:	
  7852                           
  7853                           ;i2c.c: 152: }
  7854                           ;i2c.c: 153: *buff = I2C_Receive_Byte();
  7855  06D5  318A  2280  3186   	fcall	_I2C_Receive_Byte
  7856  06D8  0020               	movlb	0	; select bank0
  7857  06D9  00A0               	movwf	??_I2C_Read_Buffer
  7858  06DA  0876               	movf	I2C_Read_Buffer@buff,w
  7859  06DB  0086               	movwf	6
  7860  06DC  0187               	clrf	7
  7861  06DD  0820               	movf	??_I2C_Read_Buffer,w
  7862  06DE  0081               	movwf	1
  7863                           
  7864                           ;i2c.c: 155: do { LATB1 = 1; } while(0);
  7865  06DF  0022               	movlb	2	; select bank2
  7866  06E0  148D               	bsf	13,1	;volatile
  7867                           
  7868                           ;i2c.c: 156: _delay((unsigned long)((10)*(4000000/4000000.0)));
  7869  06E1  3003               	movlw	3
  7870  06E2  0020               	movlb	0	; select bank0
  7871  06E3  00A0               	movwf	??_I2C_Read_Buffer
  7872  06E4                     u5417:	
  7873  06E4  0BA0               	decfsz	??_I2C_Read_Buffer,f
  7874  06E5  2EE4               	goto	u5417
  7875                           
  7876                           ;i2c.c: 157: do { LATB0 = 1; } while(0);
  7877  06E6  0022               	movlb	2	; select bank2
  7878  06E7  140D               	bsf	13,0	;volatile
  7879                           
  7880                           ;i2c.c: 158: _delay((unsigned long)((10)*(4000000/4000000.0)));
  7881  06E8  3003               	movlw	3
  7882  06E9  0020               	movlb	0	; select bank0
  7883  06EA  00A0               	movwf	??_I2C_Read_Buffer
  7884  06EB                     u5427:	
  7885  06EB  0BA0               	decfsz	??_I2C_Read_Buffer,f
  7886  06EC  2EEB               	goto	u5427
  7887                           
  7888                           ;i2c.c: 159: do { LATB0 = 0; } while(0);
  7889  06ED  0022               	movlb	2	; select bank2
  7890  06EE  100D               	bcf	13,0	;volatile
  7891                           
  7892                           ;i2c.c: 160: _delay((unsigned long)((10)*(4000000/4000000.0)));
  7893  06EF  3003               	movlw	3
  7894  06F0  0020               	movlb	0	; select bank0
  7895  06F1  00A0               	movwf	??_I2C_Read_Buffer
  7896  06F2                     u5437:	
  7897  06F2  0BA0               	decfsz	??_I2C_Read_Buffer,f
  7898  06F3  2EF2               	goto	u5437
  7899                           
  7900                           ;i2c.c: 162: I2C_Stop();
  7901  06F4  3189  213F         	fcall	_I2C_Stop
  7902  06F6  0008               	return
  7903  06F7                     __end_of_I2C_Read_Buffer:	
  7904                           ;i2c.c: 164: return 0x00;
  7905                           ;	Return value of _I2C_Read_Buffer is never used
  7906                           
  7907                           
  7908                           	psect	text30
  7909  0A80                     __ptext30:	
  7910 ;; *************** function _I2C_Receive_Byte *****************
  7911 ;; Defined at:
  7912 ;;		line 74 in file "mcc_generated_files/i2c.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;		None
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  i               1    5[COMMON] unsigned char 
  7917 ;;  Data            1    4[COMMON] unsigned char 
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      unsigned char 
  7920 ;; Registers used:
  7921 ;;		wreg, status,2, status,0
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;Total ram usage:        3 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    3
  7934 ;; This function calls:
  7935 ;;		Nothing
  7936 ;; This function is called by:
  7937 ;;		_I2C_Read_Buffer
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           
  7942                           ;psect for function _I2C_Receive_Byte
  7943  0A80                     _I2C_Receive_Byte:	
  7944                           
  7945                           ;i2c.c: 76: unsigned char i,Data=0;
  7946                           
  7947                           ;incstack = 0
  7948                           ; Regs used in _I2C_Receive_Byte: [wreg+status,2+status,0]
  7949  0A80  01F4               	clrf	I2C_Receive_Byte@Data
  7950                           
  7951                           ;i2c.c: 77: do { LATB1 = 1; } while(0);
  7952  0A81  0022               	movlb	2	; select bank2
  7953  0A82  148D               	bsf	13,1	;volatile
  7954                           
  7955                           ;i2c.c: 78: for(i=0;i<8;i++)
  7956  0A83  01F5               	clrf	I2C_Receive_Byte@i
  7957  0A84  3008               	movlw	8
  7958  0A85  0275               	subwf	I2C_Receive_Byte@i,w
  7959  0A86  1803               	btfsc	3,0
  7960  0A87  2AA8               	goto	l4493
  7961                           
  7962                           ;i2c.c: 79: {
  7963                           ;i2c.c: 80: Data <<= 1;
  7964  0A88  1003               	clrc
  7965  0A89                     L9:	
  7966  0A89  0DF4               	rlf	I2C_Receive_Byte@Data,f
  7967                           
  7968                           ;i2c.c: 81: do { LATB0 = 1; } while(0);
  7969  0A8A  0022               	movlb	2	; select bank2
  7970  0A8B  140D               	bsf	13,0	;volatile
  7971                           
  7972                           ;i2c.c: 82: _delay((unsigned long)((10)*(4000000/4000000.0)));
  7973  0A8C  3003               	movlw	3
  7974  0A8D  00F3               	movwf	??_I2C_Receive_Byte
  7975  0A8E                     u5447:	
  7976  0A8E  0BF3               	decfsz	??_I2C_Receive_Byte,f
  7977  0A8F  2A8E               	goto	u5447
  7978                           
  7979                           ;i2c.c: 83: do { TRISB1 = 1; } while(0);
  7980  0A90  0021               	movlb	1	; select bank1
  7981  0A91  148D               	bsf	13,1	;volatile
  7982                           
  7983                           ;i2c.c: 84: if(RB1)
  7984  0A92  0020               	movlb	0	; select bank0
  7985  0A93  1C8D               	btfss	13,1	;volatile
  7986  0A94  2A98               	goto	l773
  7987                           
  7988                           ;i2c.c: 85: {
  7989                           ;i2c.c: 86: do { TRISB1 = 0; } while(0);
  7990  0A95  0021               	movlb	1	; select bank1
  7991  0A96  108D               	bcf	13,1	;volatile
  7992                           
  7993                           ;i2c.c: 87: Data |= 0x01;
  7994  0A97  1474               	bsf	I2C_Receive_Byte@Data,0
  7995  0A98                     l773:	
  7996                           ;i2c.c: 88: }
  7997                           ;i2c.c: 89: do { TRISB1 = 0; } while(0);
  7998                           
  7999  0A98  0021               	movlb	1	; select bank1
  8000  0A99  108D               	bcf	13,1	;volatile
  8001                           
  8002                           ;i2c.c: 90: do { LATB0 = 0; } while(0);
  8003  0A9A  0022               	movlb	2	; select bank2
  8004  0A9B  100D               	bcf	13,0	;volatile
  8005                           
  8006                           ;i2c.c: 91: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8007  0A9C  3003               	movlw	3
  8008  0A9D  00F3               	movwf	??_I2C_Receive_Byte
  8009  0A9E                     u5457:	
  8010  0A9E  0BF3               	decfsz	??_I2C_Receive_Byte,f
  8011  0A9F  2A9E               	goto	u5457
  8012  0AA0  3001               	movlw	1
  8013  0AA1  00F3               	movwf	??_I2C_Receive_Byte
  8014  0AA2  0873               	movf	??_I2C_Receive_Byte,w
  8015  0AA3  07F5               	addwf	I2C_Receive_Byte@i,f
  8016  0AA4  3008               	movlw	8
  8017  0AA5  0275               	subwf	I2C_Receive_Byte@i,w
  8018  0AA6  1C03               	skipc
  8019  0AA7  2A89               	goto	L9
  8020  0AA8                     l4493:	
  8021                           
  8022                           ;i2c.c: 92: }
  8023                           ;i2c.c: 93: return Data;
  8024  0AA8  0874               	movf	I2C_Receive_Byte@Data,w
  8025  0AA9  0008               	return
  8026  0AAA                     __end_of_I2C_Receive_Byte:	
  8027                           
  8028                           	psect	text31
  8029  085A                     __ptext31:	
  8030 ;; *************** function _maxim_clear_fault_status *****************
  8031 ;; Defined at:
  8032 ;;		line 155 in file "mcc_generated_files/max31856.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;		None
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;		None
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      void 
  8039 ;; Registers used:
  8040 ;;		wreg, status,2, status,0, pclath, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;Total ram usage:        1 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    5
  8053 ;; This function calls:
  8054 ;;		_maxim_31856_read_register
  8055 ;;		_maxim_31856_write_register
  8056 ;; This function is called by:
  8057 ;;		_temperature_display
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           
  8062                           ;psect for function _maxim_clear_fault_status
  8063  085A                     _maxim_clear_fault_status:	
  8064                           
  8065                           ;max31856.c: 157: uch_cr0= maxim_31856_read_register(0x00);
  8066                           
  8067                           ;incstack = 0
  8068                           ; Regs used in _maxim_clear_fault_status: [wreg+status,2+status,0+pclath+cstack]
  8069  085A  3000               	movlw	0
  8070  085B  3188  207A  3188   	fcall	_maxim_31856_read_register
  8071  085E  00F7               	movwf	??_maxim_clear_fault_status
  8072  085F  0877               	movf	??_maxim_clear_fault_status,w
  8073  0860  00FA               	movwf	_uch_cr0
  8074                           
  8075                           ;max31856.c: 158: uch_cr0|= (uint8_t) 0x02 ;
  8076  0861  14FA               	bsf	_uch_cr0,1
  8077                           
  8078                           ;max31856.c: 159: maxim_31856_write_register(0x80, uch_cr0);
  8079  0862  087A               	movf	_uch_cr0,w
  8080  0863  00F7               	movwf	??_maxim_clear_fault_status
  8081  0864  0877               	movf	??_maxim_clear_fault_status,w
  8082  0865  00F4               	movwf	maxim_31856_write_register@uch_register_value
  8083  0866  3080               	movlw	128
  8084  0867  3188  204D         	fcall	_maxim_31856_write_register
  8085  0869  0008               	return
  8086  086A                     __end_of_maxim_clear_fault_status:	
  8087                           
  8088                           	psect	text32
  8089  0AAA                     __ptext32:	
  8090 ;; *************** function _err_Display *****************
  8091 ;; Defined at:
  8092 ;;		line 153 in file "mcc_generated_files/ht1621.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;  num             4    6[BANK0 ] unsigned char [4]
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;Total ram usage:        5 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    5
  8113 ;; This function calls:
  8114 ;;		_WriteAll_1621
  8115 ;; This function is called by:
  8116 ;;		_temperature_display
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _err_Display
  8122  0AAA                     _err_Display:	
  8123                           
  8124                           ;ht1621.c: 155: unsigned char num[4]={0};
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _err_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8128  0AAA  0021               	movlb	1	; select bank1
  8129  0AAB  0827               	movf	(err_Display@F2126+3)^(0+128),w
  8130  0AAC  0020               	movlb	0	; select bank0
  8131  0AAD  00A9               	movwf	err_Display@num+3
  8132  0AAE  0021               	movlb	1	; select bank1
  8133  0AAF  0826               	movf	(err_Display@F2126+2)^(0+128),w
  8134  0AB0  0020               	movlb	0	; select bank0
  8135  0AB1  00A8               	movwf	err_Display@num+2
  8136  0AB2  0021               	movlb	1	; select bank1
  8137  0AB3  0825               	movf	(err_Display@F2126+1)^(0+128),w
  8138  0AB4  0020               	movlb	0	; select bank0
  8139  0AB5  00A7               	movwf	err_Display@num+1
  8140  0AB6  0021               	movlb	1	; select bank1
  8141  0AB7  0824               	movf	err_Display@F2126^(0+128),w
  8142  0AB8  0020               	movlb	0	; select bank0
  8143  0AB9  00A6               	movwf	err_Display@num
  8144                           
  8145                           ;ht1621.c: 156: num[1] = Dis_TAB[0x10];
  8146  0ABA  3010               	movlw	low ((_Dis_TAB+16)| (0+32768))
  8147  0ABB  0084               	movwf	4
  8148  0ABC  3090               	movlw	high ((_Dis_TAB+16)| (0+32768))
  8149  0ABD  0085               	movwf	5
  8150  0ABE  0800               	movf	0,w	;code access
  8151  0ABF  00A5               	movwf	??_err_Display
  8152  0AC0  0825               	movf	??_err_Display,w
  8153  0AC1  00A7               	movwf	err_Display@num+1
  8154                           
  8155                           ;ht1621.c: 157: num[2] = Dis_TAB[0x0c];
  8156  0AC2  300C               	movlw	low ((_Dis_TAB+12)| (0+32768))
  8157  0AC3  0084               	movwf	4
  8158  0AC4  3090               	movlw	high ((_Dis_TAB+12)| (0+32768))
  8159  0AC5  0085               	movwf	5
  8160  0AC6  0800               	movf	0,w	;code access
  8161  0AC7  00A5               	movwf	??_err_Display
  8162  0AC8  0825               	movf	??_err_Display,w
  8163  0AC9  00A8               	movwf	err_Display@num+2
  8164                           
  8165                           ;ht1621.c: 158: WriteAll_1621(0, num, 4);
  8166  0ACA  3026               	movlw	low err_Display@num
  8167  0ACB  00A0               	movwf	WriteAll_1621@p
  8168  0ACC  3000               	movlw	high err_Display@num
  8169  0ACD  00A1               	movwf	WriteAll_1621@p+1
  8170  0ACE  3004               	movlw	4
  8171  0ACF  00A5               	movwf	??_err_Display
  8172  0AD0  0825               	movf	??_err_Display,w
  8173  0AD1  00A2               	movwf	WriteAll_1621@cnt
  8174  0AD2  3000               	movlw	0
  8175  0AD3  318B  2392         	fcall	_WriteAll_1621
  8176  0AD5  0008               	return
  8177  0AD6                     __end_of_err_Display:	
  8178                           
  8179                           	psect	text33
  8180  047B                     __ptext33:	
  8181 ;; *************** function _Tc_Display *****************
  8182 ;; Defined at:
  8183 ;;		line 110 in file "mcc_generated_files/ht1621.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;		None
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  data            2   11[BANK0 ] unsigned int 
  8188 ;;  count           1   10[BANK0 ] unsigned char 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      void 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;Total ram usage:        4 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    5
  8205 ;; This function calls:
  8206 ;;		_WriteAll_1621
  8207 ;;		___lwdiv
  8208 ;;		___lwmod
  8209 ;;		_memset
  8210 ;; This function is called by:
  8211 ;;		_temperature_display
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           
  8216                           ;psect for function _Tc_Display
  8217  047B                     _Tc_Display:	
  8218                           
  8219                           ;ht1621.c: 112: unsigned char count = 0;
  8220                           
  8221                           ;incstack = 0
  8222                           ; Regs used in _Tc_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8223  047B  0020               	movlb	0	; select bank0
  8224  047C  01AA               	clrf	Tc_Display@count
  8225                           
  8226                           ;ht1621.c: 113: unsigned int data = temperature_int;
  8227  047D  0021               	movlb	1	; select bank1
  8228  047E  0833               	movf	(_temperature_int+1)^(0+128),w
  8229  047F  0020               	movlb	0	; select bank0
  8230  0480  00AC               	movwf	Tc_Display@data+1
  8231  0481  0021               	movlb	1	; select bank1
  8232  0482  0832               	movf	_temperature_int^(0+128),w
  8233  0483  0020               	movlb	0	; select bank0
  8234  0484  00AB               	movwf	Tc_Display@data
  8235                           
  8236                           ;ht1621.c: 114: memset(display_buff,0,4);
  8237  0485  3000               	movlw	0
  8238  0486  00F3               	movwf	memset@c
  8239  0487  00F4               	movwf	memset@c+1
  8240  0488  3004               	movlw	4
  8241  0489  00F5               	movwf	memset@n
  8242  048A  3000               	movlw	0
  8243  048B  00F6               	movwf	memset@n+1
  8244  048C  30E1               	movlw	(low (_display_buff| 0))& (0+255)
  8245  048D  3189  218D  3184   	fcall	_memset
  8246  0490                     l5011:	
  8247                           ;ht1621.c: 115: while(data)
  8248                           
  8249  0490  0020               	movlb	0	; select bank0
  8250  0491  082B               	movf	Tc_Display@data,w
  8251  0492  042C               	iorwf	Tc_Display@data+1,w
  8252  0493  1903               	btfsc	3,2
  8253  0494  2D0F               	goto	l5019
  8254                           
  8255                           ;ht1621.c: 116: {
  8256                           ;ht1621.c: 117: count++;
  8257  0495  3001               	movlw	1
  8258  0496  0020               	movlb	0	; select bank0
  8259  0497  00A9               	movwf	??_Tc_Display
  8260  0498  0829               	movf	??_Tc_Display,w
  8261  0499  07AA               	addwf	Tc_Display@count,f
  8262                           
  8263                           ;ht1621.c: 118: data /=10;
  8264  049A  300A               	movlw	10
  8265  049B  00A1               	movwf	___lwdiv@divisor
  8266  049C  3000               	movlw	0
  8267  049D  00A2               	movwf	___lwdiv@divisor+1
  8268  049E  082C               	movf	Tc_Display@data+1,w
  8269  049F  00A4               	movwf	___lwdiv@dividend+1
  8270  04A0  082B               	movf	Tc_Display@data,w
  8271  04A1  00A3               	movwf	___lwdiv@dividend
  8272  04A2  318B  23C6  3184   	fcall	___lwdiv
  8273  04A5  0020               	movlb	0	; select bank0
  8274  04A6  0822               	movf	?___lwdiv+1,w
  8275  04A7  00AC               	movwf	Tc_Display@data+1
  8276  04A8  0821               	movf	?___lwdiv,w
  8277  04A9  00AB               	movwf	Tc_Display@data
  8278  04AA  2C90               	goto	l5011
  8279  04AB                     l5013:	
  8280                           ;ht1621.c: 121: {
  8281                           ;ht1621.c: 122: case 3:display_buff[0] = Dis_TAB[temperature_int/100];
  8282                           
  8283                           ;ht1621.c: 119: }
  8284                           ;ht1621.c: 120: switch(count)
  8285                           
  8286  04AB  3064               	movlw	100
  8287  04AC  00A1               	movwf	___lwdiv@divisor
  8288  04AD  3000               	movlw	0
  8289  04AE  00A2               	movwf	___lwdiv@divisor+1
  8290  04AF  0021               	movlb	1	; select bank1
  8291  04B0  0833               	movf	(_temperature_int+1)^(0+128),w
  8292  04B1  0020               	movlb	0	; select bank0
  8293  04B2  00A4               	movwf	___lwdiv@dividend+1
  8294  04B3  0021               	movlb	1	; select bank1
  8295  04B4  0832               	movf	_temperature_int^(0+128),w
  8296  04B5  0020               	movlb	0	; select bank0
  8297  04B6  00A3               	movwf	___lwdiv@dividend
  8298  04B7  318B  23C6  3184   	fcall	___lwdiv
  8299  04BA  0020               	movlb	0	; select bank0
  8300  04BB  0822               	movf	?___lwdiv+1,w
  8301  04BC  0085               	movwf	5
  8302  04BD  0821               	movf	?___lwdiv,w
  8303  04BE  0084               	movwf	4
  8304  04BF  3000               	movlw	low (_Dis_TAB| (0+32768))
  8305  04C0  0784               	addwf	4,f
  8306  04C1  3090               	movlw	high (_Dis_TAB| (0+32768))
  8307  04C2  3D85               	addwfc	5,f
  8308  04C3  0800               	movf	0,w	;code access
  8309  04C4  00A9               	movwf	??_Tc_Display
  8310  04C5  0829               	movf	??_Tc_Display,w
  8311  04C6  0021               	movlb	1	; select bank1
  8312  04C7  00E1               	movwf	_display_buff^(0+128)
  8313  04C8                     l687:	
  8314                           ;ht1621.c: 123: case 2:display_buff[1] = Dis_TAB[temperature_int%100/10];
  8315                           
  8316  04C8  300A               	movlw	10
  8317  04C9  0020               	movlb	0	; select bank0
  8318  04CA  00A1               	movwf	___lwdiv@divisor
  8319  04CB  3000               	movlw	0
  8320  04CC  00A2               	movwf	___lwdiv@divisor+1
  8321  04CD  0021               	movlb	1	; select bank1
  8322  04CE  0833               	movf	(_temperature_int+1)^(0+128),w
  8323  04CF  00F6               	movwf	___lwmod@dividend+1
  8324  04D0  0832               	movf	_temperature_int^(0+128),w
  8325  04D1  00F5               	movwf	___lwmod@dividend
  8326  04D2  3064               	movlw	100
  8327  04D3  00F3               	movwf	___lwmod@divisor
  8328  04D4  3000               	movlw	0
  8329  04D5  00F4               	movwf	___lwmod@divisor+1
  8330  04D6  318A  22D6  3184   	fcall	___lwmod
  8331  04D9  0874               	movf	?___lwmod+1,w
  8332  04DA  0020               	movlb	0	; select bank0
  8333  04DB  00A4               	movwf	___lwdiv@dividend+1
  8334  04DC  0873               	movf	?___lwmod,w
  8335  04DD  00A3               	movwf	___lwdiv@dividend
  8336  04DE  318B  23C6  3184   	fcall	___lwdiv
  8337  04E1  0020               	movlb	0	; select bank0
  8338  04E2  0822               	movf	?___lwdiv+1,w
  8339  04E3  0085               	movwf	5
  8340  04E4  0821               	movf	?___lwdiv,w
  8341  04E5  0084               	movwf	4
  8342  04E6  3000               	movlw	low (_Dis_TAB| (0+32768))
  8343  04E7  0784               	addwf	4,f
  8344  04E8  3090               	movlw	high (_Dis_TAB| (0+32768))
  8345  04E9  3D85               	addwfc	5,f
  8346  04EA  0800               	movf	0,w	;code access
  8347  04EB  00A9               	movwf	??_Tc_Display
  8348  04EC  0829               	movf	??_Tc_Display,w
  8349  04ED  0021               	movlb	1	; select bank1
  8350  04EE  00E2               	movwf	(_display_buff^(0+128)+1)
  8351  04EF                     l688:	
  8352                           ;ht1621.c: 124: case 1:display_buff[2] = Dis_TAB[temperature_int%10]; break;
  8353                           
  8354  04EF  300A               	movlw	10
  8355  04F0  00F3               	movwf	___lwmod@divisor
  8356  04F1  3000               	movlw	0
  8357  04F2  00F4               	movwf	___lwmod@divisor+1
  8358  04F3  0021               	movlb	1	; select bank1
  8359  04F4  0833               	movf	(_temperature_int+1)^(0+128),w
  8360  04F5  00F6               	movwf	___lwmod@dividend+1
  8361  04F6  0832               	movf	_temperature_int^(0+128),w
  8362  04F7  00F5               	movwf	___lwmod@dividend
  8363  04F8  318A  22D6  3184   	fcall	___lwmod
  8364  04FB  0874               	movf	?___lwmod+1,w
  8365  04FC  0085               	movwf	5
  8366  04FD  0873               	movf	?___lwmod,w
  8367  04FE  0084               	movwf	4
  8368  04FF  3000               	movlw	low (_Dis_TAB| (0+32768))
  8369  0500  0784               	addwf	4,f
  8370  0501  3090               	movlw	high (_Dis_TAB| (0+32768))
  8371  0502  3D85               	addwfc	5,f
  8372  0503  2D08               	goto	L10
  8373  0504                     l5015:	
  8374                           ;ht1621.c: 125: case 0:display_buff[2] = Dis_TAB[0];
  8375                           
  8376  0504  3000               	movlw	low (_Dis_TAB| (0+32768))
  8377  0505  0084               	movwf	4
  8378  0506  3090               	movlw	high (_Dis_TAB| (0+32768))
  8379  0507  0085               	movwf	5
  8380  0508                     L10:	
  8381  0508  0800               	movf	0,w	;code access
  8382  0509  0020               	movlb	0	; select bank0
  8383  050A  00A9               	movwf	??_Tc_Display
  8384  050B  0829               	movf	??_Tc_Display,w
  8385  050C  0021               	movlb	1	; select bank1
  8386  050D  00E3               	movwf	(_display_buff^(0+128)+2)
  8387                           
  8388                           ;ht1621.c: 127: }
  8389                           
  8390                           ;ht1621.c: 126: default:break;
  8391  050E  2D1E               	goto	l5021
  8392  050F                     l5019:	
  8393  050F  0020               	movlb	0	; select bank0
  8394  0510  082A               	movf	Tc_Display@count,w
  8395                           
  8396                           ; Switch size 1, requested type "space"
  8397                           ; Number of cases is 4, Range of values is 0 to 3
  8398                           ; switch strategies available:
  8399                           ; Name         Instructions Cycles
  8400                           ; simple_byte           13     7 (average)
  8401                           ; direct_byte           14     6 (fixed)
  8402                           ; jumptable            260     6 (fixed)
  8403                           ;	Chosen strategy is simple_byte
  8404  0511  3A00               	xorlw	0	; case 0
  8405  0512  1903               	skipnz
  8406  0513  2D04               	goto	l5015
  8407  0514  3A01               	xorlw	1	; case 1
  8408  0515  1903               	skipnz
  8409  0516  2CEF               	goto	l688
  8410  0517  3A03               	xorlw	3	; case 2
  8411  0518  1903               	skipnz
  8412  0519  2CC8               	goto	l687
  8413  051A  3A01               	xorlw	1	; case 3
  8414  051B  1903               	skipnz
  8415  051C  2CAB               	goto	l5013
  8416  051D  2D1E               	goto	l5021
  8417  051E                     l5021:	
  8418                           
  8419                           ;ht1621.c: 128: if(temperature_sign == 1) display_buff[0]=0x20;
  8420  051E  0021               	movlb	1	; select bank1
  8421  051F  033A               	decf	_temperature_sign^(0+128),w
  8422  0520  1D03               	btfss	3,2
  8423  0521  2D28               	goto	l5025
  8424  0522  3020               	movlw	32
  8425  0523  0020               	movlb	0	; select bank0
  8426  0524  00A9               	movwf	??_Tc_Display
  8427  0525  0829               	movf	??_Tc_Display,w
  8428  0526  0021               	movlb	1	; select bank1
  8429  0527  00E1               	movwf	_display_buff^(0+128)
  8430  0528                     l5025:	
  8431                           
  8432                           ;ht1621.c: 129: display_buff[3] = Dis_TAB[temperature_decimal] | 0x08;
  8433  0528  0020               	movlb	0	; select bank0
  8434  0529  086C               	movf	_temperature_decimal,w
  8435  052A  3E00               	addlw	low (_Dis_TAB| (0+32768))
  8436  052B  0084               	movwf	4
  8437  052C  3090               	movlw	high (_Dis_TAB| (0+32768))
  8438  052D  1803               	skipnc
  8439  052E  3E01               	addlw	1
  8440  052F  0085               	movwf	5
  8441  0530  0800               	movf	0,w	;code access
  8442  0531  3808               	iorlw	8
  8443  0532  00A9               	movwf	??_Tc_Display
  8444  0533  0829               	movf	??_Tc_Display,w
  8445  0534  0021               	movlb	1	; select bank1
  8446  0535  00E4               	movwf	(_display_buff^(0+128)+3)
  8447                           
  8448                           ;ht1621.c: 130: WriteAll_1621(0,display_buff,4);
  8449  0536  30E1               	movlw	low _display_buff
  8450  0537  0020               	movlb	0	; select bank0
  8451  0538  00A0               	movwf	WriteAll_1621@p
  8452  0539  3000               	movlw	high _display_buff
  8453  053A  00A1               	movwf	WriteAll_1621@p+1
  8454  053B  3004               	movlw	4
  8455  053C  00A9               	movwf	??_Tc_Display
  8456  053D  0829               	movf	??_Tc_Display,w
  8457  053E  00A2               	movwf	WriteAll_1621@cnt
  8458  053F  3000               	movlw	0
  8459  0540  318B  2392         	fcall	_WriteAll_1621
  8460  0542  0008               	return
  8461  0543                     __end_of_Tc_Display:	
  8462                           
  8463                           	psect	text34
  8464  098D                     __ptext34:	
  8465 ;; *************** function _memset *****************
  8466 ;; Defined at:
  8467 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;  p1              1    wreg     PTR void 
  8470 ;;		 -> display_buff(4), 
  8471 ;;  c               2    3[COMMON] int 
  8472 ;;  n               2    5[COMMON] unsigned int 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;  p1              1    0[BANK0 ] PTR void 
  8475 ;;		 -> display_buff(4), 
  8476 ;;  p               1    1[BANK0 ] PTR unsigned char 
  8477 ;;		 -> display_buff(4), 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  1    wreg      PTR void 
  8480 ;; Registers used:
  8481 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;Total ram usage:        7 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:    3
  8494 ;; This function calls:
  8495 ;;		Nothing
  8496 ;; This function is called by:
  8497 ;;		_Tc_Display
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           
  8502                           ;psect for function _memset
  8503  098D                     _memset:	
  8504                           
  8505                           ;incstack = 0
  8506                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8507                           ;memset@p1 stored from wreg
  8508  098D  0020               	movlb	0	; select bank0
  8509  098E  00A0               	movwf	memset@p1
  8510  098F  0820               	movf	memset@p1,w
  8511  0990  00F7               	movwf	??_memset
  8512  0991  0877               	movf	??_memset,w
  8513  0992  00A1               	movwf	memset@p
  8514  0993                     l4789:	
  8515  0993  3001               	movlw	1
  8516  0994  02F5               	subwf	memset@n,f
  8517  0995  3000               	movlw	0
  8518  0996  3BF6               	subwfb	memset@n+1,f
  8519  0997  0A75               	incf	memset@n,w
  8520  0998  1903               	btfsc	3,2
  8521  0999  0A76               	incf	memset@n+1,w
  8522  099A  1903               	btfsc	3,2
  8523  099B  0008               	return
  8524  099C  0873               	movf	memset@c,w
  8525  099D  00F7               	movwf	??_memset
  8526  099E  0821               	movf	memset@p,w
  8527  099F  0086               	movwf	6
  8528  09A0  0187               	clrf	7
  8529  09A1  0877               	movf	??_memset,w
  8530  09A2  0081               	movwf	1
  8531  09A3  3001               	movlw	1
  8532  09A4  00F7               	movwf	??_memset
  8533  09A5  0877               	movf	??_memset,w
  8534  09A6  07A1               	addwf	memset@p,f
  8535  09A7  2993               	goto	l4789
  8536  09A8                     __end_of_memset:	
  8537                           ;	Return value of _memset is never used
  8538                           
  8539                           
  8540                           	psect	text35
  8541  0AD6                     __ptext35:	
  8542 ;; *************** function ___lwmod *****************
  8543 ;; Defined at:
  8544 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;  divisor         2    3[COMMON] unsigned int 
  8547 ;;  dividend        2    5[COMMON] unsigned int 
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;  counter         1    0[BANK0 ] unsigned char 
  8550 ;; Return value:  Size  Location     Type
  8551 ;;                  2    3[COMMON] unsigned int 
  8552 ;; Registers used:
  8553 ;;		wreg, status,2, status,0
  8554 ;; Tracked objects:
  8555 ;;		On entry : 0/0
  8556 ;;		On exit  : 0/0
  8557 ;;		Unchanged: 0/0
  8558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8561 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8562 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;Total ram usage:        6 bytes
  8564 ;; Hardware stack levels used:    1
  8565 ;; Hardware stack levels required when called:    3
  8566 ;; This function calls:
  8567 ;;		Nothing
  8568 ;; This function is called by:
  8569 ;;		_Tc_Display
  8570 ;; This function uses a non-reentrant model
  8571 ;;
  8572                           
  8573                           
  8574                           ;psect for function ___lwmod
  8575  0AD6                     ___lwmod:	
  8576                           
  8577                           ;incstack = 0
  8578                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8579  0AD6  0873               	movf	___lwmod@divisor,w
  8580  0AD7  0474               	iorwf	___lwmod@divisor+1,w
  8581  0AD8  1903               	btfsc	3,2
  8582  0AD9  2AFE               	goto	l4835
  8583  0ADA  0020               	movlb	0	; select bank0
  8584  0ADB  01A0               	clrf	___lwmod@counter
  8585  0ADC  0AA0               	incf	___lwmod@counter,f
  8586  0ADD                     l4825:	
  8587  0ADD  1BF4               	btfsc	___lwmod@divisor+1,7
  8588  0ADE  2AE9               	goto	l4827
  8589  0ADF  3001               	movlw	1
  8590  0AE0                     u4155:	
  8591  0AE0  35F3               	lslf	___lwmod@divisor,f
  8592  0AE1  0DF4               	rlf	___lwmod@divisor+1,f
  8593  0AE2  0B89               	decfsz	9,f
  8594  0AE3  2AE0               	goto	u4155
  8595  0AE4  3001               	movlw	1
  8596  0AE5  00F7               	movwf	??___lwmod
  8597  0AE6  0877               	movf	??___lwmod,w
  8598  0AE7  07A0               	addwf	___lwmod@counter,f
  8599  0AE8  2ADD               	goto	l4825
  8600  0AE9                     l4827:	
  8601  0AE9  0874               	movf	___lwmod@divisor+1,w
  8602  0AEA  0276               	subwf	___lwmod@dividend+1,w
  8603  0AEB  1D03               	skipz
  8604  0AEC  2AEF               	goto	u4175
  8605  0AED  0873               	movf	___lwmod@divisor,w
  8606  0AEE  0275               	subwf	___lwmod@dividend,w
  8607  0AEF                     u4175:	
  8608  0AEF  1C03               	skipc
  8609  0AF0  2AF5               	goto	l4831
  8610  0AF1  0873               	movf	___lwmod@divisor,w
  8611  0AF2  02F5               	subwf	___lwmod@dividend,f
  8612  0AF3  0874               	movf	___lwmod@divisor+1,w
  8613  0AF4  3BF6               	subwfb	___lwmod@dividend+1,f
  8614  0AF5                     l4831:	
  8615  0AF5  3001               	movlw	1
  8616  0AF6                     u4185:	
  8617  0AF6  36F4               	lsrf	___lwmod@divisor+1,f
  8618  0AF7  0CF3               	rrf	___lwmod@divisor,f
  8619  0AF8  0B89               	decfsz	9,f
  8620  0AF9  2AF6               	goto	u4185
  8621  0AFA  3001               	movlw	1
  8622  0AFB  02A0               	subwf	___lwmod@counter,f
  8623  0AFC  1D03               	btfss	3,2
  8624  0AFD  2AE9               	goto	l4827
  8625  0AFE                     l4835:	
  8626  0AFE  0876               	movf	___lwmod@dividend+1,w
  8627  0AFF  00F4               	movwf	?___lwmod+1
  8628  0B00  0875               	movf	___lwmod@dividend,w
  8629  0B01  00F3               	movwf	?___lwmod
  8630  0B02  0008               	return
  8631  0B03                     __end_of___lwmod:	
  8632                           
  8633                           	psect	text36
  8634  0BC6                     __ptext36:	
  8635 ;; *************** function ___lwdiv *****************
  8636 ;; Defined at:
  8637 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  8638 ;; Parameters:    Size  Location     Type
  8639 ;;  divisor         2    1[BANK0 ] unsigned int 
  8640 ;;  dividend        2    3[BANK0 ] unsigned int 
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;  quotient        2    7[BANK0 ] unsigned int 
  8643 ;;  counter         1    6[BANK0 ] unsigned char 
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  2    1[BANK0 ] unsigned int 
  8646 ;; Registers used:
  8647 ;;		wreg, status,2, status,0
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;Total ram usage:        8 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    3
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_Tc_Display
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           
  8668                           ;psect for function ___lwdiv
  8669  0BC6                     ___lwdiv:	
  8670                           
  8671                           ;incstack = 0
  8672                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8673  0BC6  0020               	movlb	0	; select bank0
  8674  0BC7  01A7               	clrf	___lwdiv@quotient
  8675  0BC8  01A8               	clrf	___lwdiv@quotient+1
  8676  0BC9  0821               	movf	___lwdiv@divisor,w
  8677  0BCA  0422               	iorwf	___lwdiv@divisor+1,w
  8678  0BCB  1903               	btfsc	3,2
  8679  0BCC  2BF6               	goto	l4813
  8680  0BCD  01A6               	clrf	___lwdiv@counter
  8681  0BCE  0AA6               	incf	___lwdiv@counter,f
  8682  0BCF                     l4801:	
  8683  0BCF  1BA2               	btfsc	___lwdiv@divisor+1,7
  8684  0BD0  2BDB               	goto	l4803
  8685  0BD1  3001               	movlw	1
  8686  0BD2                     u4085:	
  8687  0BD2  35A1               	lslf	___lwdiv@divisor,f
  8688  0BD3  0DA2               	rlf	___lwdiv@divisor+1,f
  8689  0BD4  0B89               	decfsz	9,f
  8690  0BD5  2BD2               	goto	u4085
  8691  0BD6  3001               	movlw	1
  8692  0BD7  00A5               	movwf	??___lwdiv
  8693  0BD8  0825               	movf	??___lwdiv,w
  8694  0BD9  07A6               	addwf	___lwdiv@counter,f
  8695  0BDA  2BCF               	goto	l4801
  8696  0BDB                     l4803:	
  8697  0BDB  3001               	movlw	1
  8698  0BDC                     u4105:	
  8699  0BDC  35A7               	lslf	___lwdiv@quotient,f
  8700  0BDD  0DA8               	rlf	___lwdiv@quotient+1,f
  8701  0BDE  0B89               	decfsz	9,f
  8702  0BDF  2BDC               	goto	u4105
  8703  0BE0  0822               	movf	___lwdiv@divisor+1,w
  8704  0BE1  0224               	subwf	___lwdiv@dividend+1,w
  8705  0BE2  1D03               	skipz
  8706  0BE3  2BE6               	goto	u4115
  8707  0BE4  0821               	movf	___lwdiv@divisor,w
  8708  0BE5  0223               	subwf	___lwdiv@dividend,w
  8709  0BE6                     u4115:	
  8710  0BE6  1C03               	skipc
  8711  0BE7  2BED               	goto	l4809
  8712  0BE8  0821               	movf	___lwdiv@divisor,w
  8713  0BE9  02A3               	subwf	___lwdiv@dividend,f
  8714  0BEA  0822               	movf	___lwdiv@divisor+1,w
  8715  0BEB  3BA4               	subwfb	___lwdiv@dividend+1,f
  8716  0BEC  1427               	bsf	___lwdiv@quotient,0
  8717  0BED                     l4809:	
  8718  0BED  3001               	movlw	1
  8719  0BEE                     u4125:	
  8720  0BEE  36A2               	lsrf	___lwdiv@divisor+1,f
  8721  0BEF  0CA1               	rrf	___lwdiv@divisor,f
  8722  0BF0  0B89               	decfsz	9,f
  8723  0BF1  2BEE               	goto	u4125
  8724  0BF2  3001               	movlw	1
  8725  0BF3  02A6               	subwf	___lwdiv@counter,f
  8726  0BF4  1D03               	btfss	3,2
  8727  0BF5  2BDB               	goto	l4803
  8728  0BF6                     l4813:	
  8729  0BF6  0828               	movf	___lwdiv@quotient+1,w
  8730  0BF7  00A2               	movwf	?___lwdiv+1
  8731  0BF8  0827               	movf	___lwdiv@quotient,w
  8732  0BF9  00A1               	movwf	?___lwdiv
  8733  0BFA  0008               	return
  8734  0BFB                     __end_of___lwdiv:	
  8735                           
  8736                           	psect	text37
  8737  0D5F                     __ptext37:	
  8738 ;; *************** function _one_temperature_trans *****************
  8739 ;; Defined at:
  8740 ;;		line 292 in file "mcc_generated_files/max31856.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;		None
  8743 ;; Auto vars:     Size  Location     Type
  8744 ;;		None
  8745 ;; Return value:  Size  Location     Type
  8746 ;;                  1    wreg      void 
  8747 ;; Registers used:
  8748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8749 ;; Tracked objects:
  8750 ;;		On entry : 0/0
  8751 ;;		On exit  : 0/0
  8752 ;;		Unchanged: 0/0
  8753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;Total ram usage:        2 bytes
  8759 ;; Hardware stack levels used:    1
  8760 ;; Hardware stack levels required when called:    6
  8761 ;; This function calls:
  8762 ;;		_maxim_31856_read_nregisters
  8763 ;;		_maxim_start_conversion
  8764 ;; This function is called by:
  8765 ;;		_temperature_process
  8766 ;; This function uses a non-reentrant model
  8767 ;;
  8768                           
  8769                           
  8770                           ;psect for function _one_temperature_trans
  8771  0D5F                     _one_temperature_trans:	
  8772                           
  8773                           ;max31856.c: 294: maxim_start_conversion((uint8_t) 0x40);
  8774                           
  8775                           ;incstack = 0
  8776                           ; Regs used in _one_temperature_trans: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8777  0D5F  3040               	movlw	64
  8778  0D60  3189  2158  318D   	fcall	_maxim_start_conversion
  8779                           
  8780                           ;max31856.c: 296: MAX31856Sec = 0;
  8781  0D63  0021               	movlb	1	; select bank1
  8782  0D64  01B9               	clrf	_MAX31856Sec^(0+128)
  8783                           
  8784                           ;max31856.c: 297: while( !(RB3 == 0 || MAX31856Sec > 30) ) asm("clrwdt");
  8785  0D65  2D67               	goto	l544
  8786  0D66                     l545:	
  8787  0D66  0064               	clrwdt	;# 
  8788  0D67                     l544:	
  8789  0D67  0020               	movlb	0	; select bank0
  8790  0D68  1D8D               	btfss	13,3	;volatile
  8791  0D69  2D6F               	goto	l5125
  8792  0D6A  301F               	movlw	31
  8793  0D6B  0021               	movlb	1	; select bank1
  8794  0D6C  0239               	subwf	_MAX31856Sec^(0+128),w
  8795  0D6D  1C03               	skipc
  8796  0D6E  2D66               	goto	l545
  8797  0D6F                     l5125:	
  8798                           
  8799                           ;max31856.c: 298: if( MAX31856Sec > 30)
  8800  0D6F  301F               	movlw	31
  8801  0D70  0021               	movlb	1	; select bank1
  8802  0D71  0239               	subwf	_MAX31856Sec^(0+128),w
  8803  0D72  1C03               	skipc
  8804  0D73  2D77               	goto	l5129
  8805                           
  8806                           ;max31856.c: 299: {
  8807                           ;max31856.c: 300: uch_sr = 0x01;
  8808  0D74  01C3               	clrf	_uch_sr^(0+128)
  8809  0D75  0AC3               	incf	_uch_sr^(0+128),f
  8810                           
  8811                           ;max31856.c: 301: }
  8812  0D76  0008               	return
  8813  0D77                     l5129:	
  8814                           
  8815                           ;max31856.c: 328: else
  8816                           ;max31856.c: 329: {
  8817                           ;max31856.c: 330: maxim_31856_read_nregisters(0x0A, uch_reg,6);
  8818  0D77  30C4               	movlw	(low (_uch_reg| 0))& (0+255)
  8819  0D78  0020               	movlb	0	; select bank0
  8820  0D79  00A8               	movwf	??_one_temperature_trans
  8821  0D7A  0828               	movf	??_one_temperature_trans,w
  8822  0D7B  00A3               	movwf	maxim_31856_read_nregisters@uch_buff
  8823  0D7C  3006               	movlw	6
  8824  0D7D  00A9               	movwf	??_one_temperature_trans+1
  8825  0D7E  0829               	movf	??_one_temperature_trans+1,w
  8826  0D7F  00A4               	movwf	maxim_31856_read_nregisters@uch_nBytes
  8827  0D80  300A               	movlw	10
  8828  0D81  3188  20F5         	fcall	_maxim_31856_read_nregisters
  8829                           
  8830                           ;max31856.c: 331: uch_cjth=uch_reg[0];uch_cjtl=uch_reg[1];
  8831  0D83  0021               	movlb	1	; select bank1
  8832  0D84  0844               	movf	_uch_reg^(0+128),w
  8833  0D85  0020               	movlb	0	; select bank0
  8834  0D86  00A8               	movwf	??_one_temperature_trans
  8835  0D87  0828               	movf	??_one_temperature_trans,w
  8836  0D88  0021               	movlb	1	; select bank1
  8837  0D89  00BC               	movwf	_uch_cjth^(0+128)
  8838  0D8A  0845               	movf	(_uch_reg^(0+128)+1),w
  8839  0D8B  0020               	movlb	0	; select bank0
  8840  0D8C  00A8               	movwf	??_one_temperature_trans
  8841  0D8D  0828               	movf	??_one_temperature_trans,w
  8842  0D8E  0021               	movlb	1	; select bank1
  8843  0D8F  00BD               	movwf	_uch_cjtl^(0+128)
  8844                           
  8845                           ;max31856.c: 332: uch_ltcbh=uch_reg[2];uch_ltcbm=uch_reg[3];uch_ltcbl=uch_reg[4];
  8846  0D90  0846               	movf	(_uch_reg^(0+128)+2),w
  8847  0D91  0020               	movlb	0	; select bank0
  8848  0D92  00A8               	movwf	??_one_temperature_trans
  8849  0D93  0828               	movf	??_one_temperature_trans,w
  8850  0D94  0021               	movlb	1	; select bank1
  8851  0D95  00BF               	movwf	_uch_ltcbh^(0+128)
  8852  0D96  0847               	movf	(_uch_reg^(0+128)+3),w
  8853  0D97  0020               	movlb	0	; select bank0
  8854  0D98  00A8               	movwf	??_one_temperature_trans
  8855  0D99  0828               	movf	??_one_temperature_trans,w
  8856  0D9A  0021               	movlb	1	; select bank1
  8857  0D9B  00C1               	movwf	_uch_ltcbm^(0+128)
  8858  0D9C  0848               	movf	(_uch_reg^(0+128)+4),w
  8859  0D9D  0020               	movlb	0	; select bank0
  8860  0D9E  00A8               	movwf	??_one_temperature_trans
  8861  0D9F  0828               	movf	??_one_temperature_trans,w
  8862  0DA0  0021               	movlb	1	; select bank1
  8863  0DA1  00C0               	movwf	_uch_ltcbl^(0+128)
  8864                           
  8865                           ;max31856.c: 333: uch_sr=uch_reg[5];
  8866  0DA2  0849               	movf	(_uch_reg^(0+128)+5),w
  8867  0DA3  0020               	movlb	0	; select bank0
  8868  0DA4  00A8               	movwf	??_one_temperature_trans
  8869  0DA5  0828               	movf	??_one_temperature_trans,w
  8870  0DA6  0021               	movlb	1	; select bank1
  8871  0DA7  00C3               	movwf	_uch_sr^(0+128)
  8872  0DA8  0008               	return
  8873  0DA9                     __end_of_one_temperature_trans:	
  8874                           
  8875                           	psect	text38
  8876  0958                     __ptext38:	
  8877 ;; *************** function _maxim_start_conversion *****************
  8878 ;; Defined at:
  8879 ;;		line 114 in file "mcc_generated_files/max31856.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;  uch_conversi    1    wreg     unsigned char 
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;  uch_conversi    1    0[BANK0 ] unsigned char 
  8884 ;; Return value:  Size  Location     Type
  8885 ;;                  1    wreg      void 
  8886 ;; Registers used:
  8887 ;;		wreg, status,2, status,0, pclath, cstack
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;Total ram usage:        2 bytes
  8898 ;; Hardware stack levels used:    1
  8899 ;; Hardware stack levels required when called:    5
  8900 ;; This function calls:
  8901 ;;		_maxim_31856_read_register
  8902 ;;		_maxim_31856_write_register
  8903 ;; This function is called by:
  8904 ;;		_one_temperature_trans
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function _maxim_start_conversion
  8910  0958                     _maxim_start_conversion:	
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _maxim_start_conversion: [wreg+status,2+status,0+pclath+cstack]
  8914                           ;maxim_start_conversion@uch_conversion_mode stored from wreg
  8915  0958  0020               	movlb	0	; select bank0
  8916  0959  00A0               	movwf	maxim_start_conversion@uch_conversion_mode
  8917                           
  8918                           ;max31856.c: 116: uch_cr0=maxim_31856_read_register(0x00);
  8919  095A  3000               	movlw	0
  8920  095B  3188  207A  3189   	fcall	_maxim_31856_read_register
  8921  095E  00F7               	movwf	??_maxim_start_conversion
  8922  095F  0877               	movf	??_maxim_start_conversion,w
  8923  0960  00FA               	movwf	_uch_cr0
  8924                           
  8925                           ;max31856.c: 117: uch_cr0&=(uint8_t) 0x3F;
  8926  0961  303F               	movlw	63
  8927  0962  00F7               	movwf	??_maxim_start_conversion
  8928  0963  0877               	movf	??_maxim_start_conversion,w
  8929  0964  05FA               	andwf	_uch_cr0,f
  8930                           
  8931                           ;max31856.c: 118: uch_cr0|=uch_conversion_mode;
  8932  0965  0020               	movlb	0	; select bank0
  8933  0966  0820               	movf	maxim_start_conversion@uch_conversion_mode,w
  8934  0967  00F7               	movwf	??_maxim_start_conversion
  8935  0968  0877               	movf	??_maxim_start_conversion,w
  8936  0969  04FA               	iorwf	_uch_cr0,f
  8937                           
  8938                           ;max31856.c: 119: maxim_31856_write_register(0x80, uch_cr0);
  8939  096A  087A               	movf	_uch_cr0,w
  8940  096B  00F7               	movwf	??_maxim_start_conversion
  8941  096C  0877               	movf	??_maxim_start_conversion,w
  8942  096D  00F4               	movwf	maxim_31856_write_register@uch_register_value
  8943  096E  3080               	movlw	128
  8944  096F  3188  204D         	fcall	_maxim_31856_write_register
  8945  0971  0008               	return
  8946  0972                     __end_of_maxim_start_conversion:	
  8947                           
  8948                           	psect	text39
  8949  084D                     __ptext39:	
  8950 ;; *************** function _maxim_31856_write_register *****************
  8951 ;; Defined at:
  8952 ;;		line 20 in file "mcc_generated_files/max31856.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  uch_register    1    wreg     unsigned char 
  8955 ;;  uch_register    1    4[COMMON] unsigned char 
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  uch_register    1    5[COMMON] unsigned char 
  8958 ;; Return value:  Size  Location     Type
  8959 ;;                  1    wreg      void 
  8960 ;; Registers used:
  8961 ;;		wreg, status,2, status,0, pclath, cstack
  8962 ;; Tracked objects:
  8963 ;;		On entry : 0/0
  8964 ;;		On exit  : 0/0
  8965 ;;		Unchanged: 0/0
  8966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8967 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8970 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8971 ;;Total ram usage:        2 bytes
  8972 ;; Hardware stack levels used:    1
  8973 ;; Hardware stack levels required when called:    4
  8974 ;; This function calls:
  8975 ;;		_SPI_Exchange8bit
  8976 ;; This function is called by:
  8977 ;;		_maxim_start_conversion
  8978 ;;		_maxim_clear_fault_status
  8979 ;;		_temperature_display
  8980 ;;		_maxim_31856_init
  8981 ;;		_maxim_stop_conversion
  8982 ;;		_maxim_disable_oc_fault_detection
  8983 ;;		_maxim_set_oc_fault_detection
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _maxim_31856_write_register
  8989  084D                     _maxim_31856_write_register:	
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in _maxim_31856_write_register: [wreg+status,2+status,0+pclath+cstack]
  8993                           ;maxim_31856_write_register@uch_register_address stored from wreg
  8994  084D  00F5               	movwf	maxim_31856_write_register@uch_register_address
  8995                           
  8996                           ;max31856.c: 22: do { LATA5 = 0; } while(0);
  8997  084E  0022               	movlb	2	; select bank2
  8998  084F  128C               	bcf	12,5	;volatile
  8999                           
  9000                           ;max31856.c: 23: SPI_Exchange8bit(uch_register_address);
  9001  0850  0875               	movf	maxim_31856_write_register@uch_register_address,w
  9002  0851  3188  202F  3188   	fcall	_SPI_Exchange8bit
  9003                           
  9004                           ;max31856.c: 24: SPI_Exchange8bit(uch_register_value);
  9005  0854  0874               	movf	maxim_31856_write_register@uch_register_value,w
  9006  0855  3188  202F         	fcall	_SPI_Exchange8bit
  9007                           
  9008                           ;max31856.c: 25: do { LATA5 = 1; } while(0);
  9009  0857  0022               	movlb	2	; select bank2
  9010  0858  168C               	bsf	12,5	;volatile
  9011  0859  0008               	return
  9012  085A                     __end_of_maxim_31856_write_register:	
  9013                           
  9014                           	psect	text40
  9015  087A                     __ptext40:	
  9016 ;; *************** function _maxim_31856_read_register *****************
  9017 ;; Defined at:
  9018 ;;		line 34 in file "mcc_generated_files/max31856.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;  uch_register    1    wreg     unsigned char 
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;  uch_register    1    5[COMMON] unsigned char 
  9023 ;;  uch_register    1    6[COMMON] unsigned char 
  9024 ;; Return value:  Size  Location     Type
  9025 ;;                  1    wreg      unsigned char 
  9026 ;; Registers used:
  9027 ;;		wreg, status,2, status,0, pclath, cstack
  9028 ;; Tracked objects:
  9029 ;;		On entry : 0/0
  9030 ;;		On exit  : 0/0
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;Total ram usage:        3 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    4
  9040 ;; This function calls:
  9041 ;;		_SPI_Exchange8bit
  9042 ;; This function is called by:
  9043 ;;		_maxim_start_conversion
  9044 ;;		_maxim_clear_fault_status
  9045 ;;		_maxim_stop_conversion
  9046 ;;		_maxim_disable_oc_fault_detection
  9047 ;;		_maxim_set_oc_fault_detection
  9048 ;; This function uses a non-reentrant model
  9049 ;;
  9050                           
  9051                           
  9052                           ;psect for function _maxim_31856_read_register
  9053  087A                     _maxim_31856_read_register:	
  9054                           
  9055                           ;incstack = 0
  9056                           ; Regs used in _maxim_31856_read_register: [wreg+status,2+status,0+pclath+cstack]
  9057                           ;maxim_31856_read_register@uch_register_address stored from wreg
  9058  087A  00F5               	movwf	maxim_31856_read_register@uch_register_address
  9059                           
  9060                           ;max31856.c: 36: uint8_t uch_register_data;
  9061                           ;max31856.c: 37: do { LATA5 = 0; } while(0);
  9062  087B  0022               	movlb	2	; select bank2
  9063  087C  128C               	bcf	12,5	;volatile
  9064                           
  9065                           ;max31856.c: 38: SPI_Exchange8bit(uch_register_address);
  9066  087D  0875               	movf	maxim_31856_read_register@uch_register_address,w
  9067  087E  3188  202F  3188   	fcall	_SPI_Exchange8bit
  9068                           
  9069                           ;max31856.c: 39: uch_register_data=SPI_Exchange8bit(0xff);
  9070  0881  30FF               	movlw	255
  9071  0882  3188  202F         	fcall	_SPI_Exchange8bit
  9072  0884  00F4               	movwf	??_maxim_31856_read_register
  9073  0885  0874               	movf	??_maxim_31856_read_register,w
  9074  0886  00F6               	movwf	maxim_31856_read_register@uch_register_data
  9075                           
  9076                           ;max31856.c: 40: do { LATA5 = 1; } while(0);
  9077  0887  0022               	movlb	2	; select bank2
  9078  0888  168C               	bsf	12,5	;volatile
  9079                           
  9080                           ;max31856.c: 41: return (uch_register_data);
  9081  0889  0876               	movf	maxim_31856_read_register@uch_register_data,w
  9082  088A  0008               	return
  9083  088B                     __end_of_maxim_31856_read_register:	
  9084                           
  9085                           	psect	text41
  9086  08F5                     __ptext41:	
  9087 ;; *************** function _maxim_31856_read_nregisters *****************
  9088 ;; Defined at:
  9089 ;;		line 50 in file "mcc_generated_files/max31856.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;  uch_register    1    wreg     unsigned char 
  9092 ;;  uch_buff        1    3[BANK0 ] PTR unsigned char 
  9093 ;;		 -> uch_reg(8), 
  9094 ;;  uch_nBytes      1    4[BANK0 ] unsigned char 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;  uch_register    1    7[BANK0 ] unsigned char 
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;Total ram usage:        5 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    5
  9113 ;; This function calls:
  9114 ;;		_SPI_Exchange8bit
  9115 ;;		_SPI_Exchange8bitBuffer
  9116 ;; This function is called by:
  9117 ;;		_one_temperature_trans
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _maxim_31856_read_nregisters
  9123  08F5                     _maxim_31856_read_nregisters:	
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in _maxim_31856_read_nregisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9127                           ;maxim_31856_read_nregisters@uch_register_address stored from wreg
  9128  08F5  0020               	movlb	0	; select bank0
  9129  08F6  00A7               	movwf	maxim_31856_read_nregisters@uch_register_address
  9130                           
  9131                           ;max31856.c: 52: do { LATA5 = 0; } while(0);
  9132  08F7  0022               	movlb	2	; select bank2
  9133  08F8  128C               	bcf	12,5	;volatile
  9134                           
  9135                           ;max31856.c: 53: SPI_Exchange8bit(uch_register_address);
  9136  08F9  0020               	movlb	0	; select bank0
  9137  08FA  0827               	movf	maxim_31856_read_nregisters@uch_register_address,w
  9138  08FB  3188  202F  3188   	fcall	_SPI_Exchange8bit
  9139                           
  9140                           ;max31856.c: 54: SPI_Exchange8bitBuffer((0), uch_nBytes, uch_buff);
  9141  08FE  0020               	movlb	0	; select bank0
  9142  08FF  0824               	movf	maxim_31856_read_nregisters@uch_nBytes,w
  9143  0900  00A5               	movwf	??_maxim_31856_read_nregisters
  9144  0901  0825               	movf	??_maxim_31856_read_nregisters,w
  9145  0902  00F4               	movwf	SPI_Exchange8bitBuffer@bufLen
  9146  0903  0823               	movf	maxim_31856_read_nregisters@uch_buff,w
  9147  0904  00A6               	movwf	??_maxim_31856_read_nregisters+1
  9148  0905  0826               	movf	??_maxim_31856_read_nregisters+1,w
  9149  0906  00F5               	movwf	SPI_Exchange8bitBuffer@dataOut
  9150  0907  3000               	movlw	0
  9151  0908  318E  2642         	fcall	_SPI_Exchange8bitBuffer
  9152                           
  9153                           ;max31856.c: 55: do { LATA5 = 1; } while(0);
  9154  090A  0022               	movlb	2	; select bank2
  9155  090B  168C               	bsf	12,5	;volatile
  9156  090C  0008               	return
  9157  090D                     __end_of_maxim_31856_read_nregisters:	
  9158                           
  9159                           	psect	text42
  9160  0E42                     __ptext42:	
  9161 ;; *************** function _SPI_Exchange8bitBuffer *****************
  9162 ;; Defined at:
  9163 ;;		line 89 in file "mcc_generated_files/spi.c"
  9164 ;; Parameters:    Size  Location     Type
  9165 ;;  dataIn          1    wreg     PTR unsigned char 
  9166 ;;		 -> NULL(0), 
  9167 ;;  bufLen          1    4[COMMON] unsigned char 
  9168 ;;  dataOut         1    5[COMMON] PTR unsigned char 
  9169 ;;		 -> uch_reg(8), 
  9170 ;; Auto vars:     Size  Location     Type
  9171 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  9172 ;;		 -> NULL(0), 
  9173 ;;  bytesWritten    1    7[COMMON] unsigned char 
  9174 ;; Return value:  Size  Location     Type
  9175 ;;                  1    wreg      unsigned char 
  9176 ;; Registers used:
  9177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9178 ;; Tracked objects:
  9179 ;;		On entry : 0/0
  9180 ;;		On exit  : 0/0
  9181 ;;		Unchanged: 0/0
  9182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9183 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;Total ram usage:        7 bytes
  9188 ;; Hardware stack levels used:    1
  9189 ;; Hardware stack levels required when called:    4
  9190 ;; This function calls:
  9191 ;;		_SPI_Exchange8bit
  9192 ;; This function is called by:
  9193 ;;		_maxim_31856_read_nregisters
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           
  9198                           ;psect for function _SPI_Exchange8bitBuffer
  9199  0E42                     _SPI_Exchange8bitBuffer:	
  9200                           
  9201                           ;incstack = 0
  9202                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9203                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  9204  0E42  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  9205                           
  9206                           ;spi.c: 90: uint8_t bytesWritten = 0;
  9207  0E43  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  9208                           
  9209                           ;spi.c: 92: if (bufLen != 0) {
  9210  0E44  0874               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9211  0E45  1903               	btfsc	3,2
  9212  0E46  0008               	return
  9213                           
  9214                           ;spi.c: 93: if (dataIn != (0)) {
  9215  0E47  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  9216  0E48  1D03               	btfss	3,2
  9217  0E49  2E74               	goto	l4689
  9218  0E4A  2E79               	goto	l4691
  9219  0E4B                     l4681:	
  9220                           ;spi.c: 94: while (bytesWritten < bufLen) {
  9221                           
  9222                           
  9223                           ;spi.c: 95: if (dataOut == (0)) {
  9224  0E4B  0875               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9225  0E4C  1D03               	btfss	3,2
  9226  0E4D  2E5A               	goto	l4685
  9227                           
  9228                           ;spi.c: 96: SPI_Exchange8bit(dataIn[bytesWritten]);
  9229  0E4E  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9230  0E4F  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9231  0E50  0020               	movlb	0	; select bank0
  9232  0E51  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9233  0E52  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9234  0E53  0086               	movwf	6
  9235  0E54  0187               	clrf	7
  9236  0E55  0801               	movf	1,w
  9237  0E56  3188  202F  318E   	fcall	_SPI_Exchange8bit
  9238                           
  9239                           ;spi.c: 97: } else {
  9240  0E59  2E6F               	goto	l4687
  9241  0E5A                     l4685:	
  9242                           
  9243                           ;spi.c: 98: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  9244  0E5A  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9245  0E5B  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9246  0E5C  0020               	movlb	0	; select bank0
  9247  0E5D  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9248  0E5E  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9249  0E5F  0086               	movwf	6
  9250  0E60  0187               	clrf	7
  9251  0E61  0801               	movf	1,w
  9252  0E62  3188  202F  318E   	fcall	_SPI_Exchange8bit
  9253  0E65  0020               	movlb	0	; select bank0
  9254  0E66  00A1               	movwf	??_SPI_Exchange8bitBuffer+1
  9255  0E67  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9256  0E68  0775               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9257  0E69  00A2               	movwf	??_SPI_Exchange8bitBuffer+2
  9258  0E6A  0822               	movf	??_SPI_Exchange8bitBuffer+2,w
  9259  0E6B  0086               	movwf	6
  9260  0E6C  0187               	clrf	7
  9261  0E6D  0821               	movf	??_SPI_Exchange8bitBuffer+1,w
  9262  0E6E  0081               	movwf	1
  9263  0E6F                     l4687:	
  9264                           
  9265                           ;spi.c: 99: }
  9266                           ;spi.c: 101: bytesWritten++;
  9267  0E6F  3001               	movlw	1
  9268  0E70  0020               	movlb	0	; select bank0
  9269  0E71  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9270  0E72  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9271  0E73  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9272  0E74                     l4689:	
  9273  0E74  0874               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9274  0E75  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9275  0E76  1803               	btfsc	3,0
  9276  0E77  0008               	return
  9277  0E78  2E4B               	goto	l4681
  9278  0E79                     l4691:	
  9279                           ;spi.c: 102: }
  9280                           ;spi.c: 103: } else {
  9281                           
  9282                           
  9283                           ;spi.c: 104: if (dataOut != (0)) {
  9284  0E79  0875               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9285  0E7A  1903               	btfsc	3,2
  9286  0E7B  0008               	return
  9287  0E7C                     l4699:	
  9288  0E7C  0874               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9289  0E7D  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9290  0E7E  1803               	btfsc	3,0
  9291  0E7F  0008               	return
  9292                           
  9293                           ;spi.c: 106: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  9294                           
  9295                           ;spi.c: 105: while (bytesWritten < bufLen) {
  9296  0E80  3000               	movlw	0
  9297  0E81  3188  202F  318E   	fcall	_SPI_Exchange8bit
  9298  0E84  0020               	movlb	0	; select bank0
  9299  0E85  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9300  0E86  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9301  0E87  0775               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9302  0E88  00A1               	movwf	??_SPI_Exchange8bitBuffer+1
  9303  0E89  0821               	movf	??_SPI_Exchange8bitBuffer+1,w
  9304  0E8A  0086               	movwf	6
  9305  0E8B  0187               	clrf	7
  9306  0E8C  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9307  0E8D  0081               	movwf	1
  9308                           
  9309                           ;spi.c: 108: bytesWritten++;
  9310  0E8E  3001               	movlw	1
  9311  0E8F  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9312  0E90  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9313  0E91  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9314  0E92  2E7C               	goto	l4699
  9315  0E93                     __end_of_SPI_Exchange8bitBuffer:	
  9316                           ;spi.c: 109: }
  9317                           ;spi.c: 110: }
  9318                           ;spi.c: 111: }
  9319                           ;spi.c: 112: }
  9320                           ;spi.c: 114: return bytesWritten;
  9321                           ;	Return value of _SPI_Exchange8bitBuffer is never used
  9322                           
  9323                           
  9324                           	psect	text43
  9325  082F                     __ptext43:	
  9326 ;; *************** function _SPI_Exchange8bit *****************
  9327 ;; Defined at:
  9328 ;;		line 77 in file "mcc_generated_files/spi.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  data            1    wreg     unsigned char 
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;  data            1    3[COMMON] unsigned char 
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      unsigned char 
  9335 ;; Registers used:
  9336 ;;		wreg
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;Total ram usage:        1 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    3
  9349 ;; This function calls:
  9350 ;;		Nothing
  9351 ;; This function is called by:
  9352 ;;		_SPI_Exchange8bitBuffer
  9353 ;;		_maxim_31856_write_register
  9354 ;;		_maxim_31856_read_register
  9355 ;;		_maxim_31856_read_nregisters
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           
  9360                           ;psect for function _SPI_Exchange8bit
  9361  082F                     _SPI_Exchange8bit:	
  9362                           
  9363                           ;incstack = 0
  9364                           ; Regs used in _SPI_Exchange8bit: [wreg]
  9365                           ;SPI_Exchange8bit@data stored from wreg
  9366  082F  00F3               	movwf	SPI_Exchange8bit@data
  9367                           
  9368                           ;spi.c: 79: SSP1CON1bits.WCOL = 0;
  9369  0830  0024               	movlb	4	; select bank4
  9370  0831  1395               	bcf	21,7	;volatile
  9371                           
  9372                           ;spi.c: 81: SSPBUF = data;
  9373  0832  0873               	movf	SPI_Exchange8bit@data,w
  9374  0833  0091               	movwf	17	;volatile
  9375  0834                     l71:	
  9376                           ;spi.c: 83: while (SSP1STATbits.BF == 0x0) {
  9377                           
  9378  0834  1C14               	btfss	20,0	;volatile
  9379  0835  2834               	goto	l71
  9380                           
  9381                           ;spi.c: 84: }
  9382                           ;spi.c: 86: return (SSPBUF);
  9383  0836  0811               	movf	17,w	;volatile
  9384  0837  0008               	return
  9385  0838                     __end_of_SPI_Exchange8bit:	
  9386                           
  9387                           	psect	text44
  9388  0B61                     __ptext44:	
  9389 ;; *************** function _Two_Display *****************
  9390 ;; Defined at:
  9391 ;;		line 139 in file "mcc_generated_files/ht1621.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;  number          1    wreg     unsigned char 
  9394 ;; Auto vars:     Size  Location     Type
  9395 ;;  number          1   10[BANK0 ] unsigned char 
  9396 ;;  num             4    6[BANK0 ] unsigned char [4]
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  1    wreg      void 
  9399 ;; Registers used:
  9400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:        6 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    5
  9413 ;; This function calls:
  9414 ;;		_WriteAll_1621
  9415 ;; This function is called by:
  9416 ;;		_temperature_process
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function _Two_Display
  9422  0B61                     _Two_Display:	
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in _Two_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9426                           ;Two_Display@number stored from wreg
  9427  0B61  0020               	movlb	0	; select bank0
  9428  0B62  00AA               	movwf	Two_Display@number
  9429                           
  9430                           ;ht1621.c: 141: unsigned char num[4]={0};
  9431  0B63  0021               	movlb	1	; select bank1
  9432  0B64  0823               	movf	(Two_Display@F2123+3)^(0+128),w
  9433  0B65  0020               	movlb	0	; select bank0
  9434  0B66  00A9               	movwf	Two_Display@num+3
  9435  0B67  0021               	movlb	1	; select bank1
  9436  0B68  0822               	movf	(Two_Display@F2123+2)^(0+128),w
  9437  0B69  0020               	movlb	0	; select bank0
  9438  0B6A  00A8               	movwf	Two_Display@num+2
  9439  0B6B  0021               	movlb	1	; select bank1
  9440  0B6C  0821               	movf	(Two_Display@F2123+1)^(0+128),w
  9441  0B6D  0020               	movlb	0	; select bank0
  9442  0B6E  00A7               	movwf	Two_Display@num+1
  9443  0B6F  0021               	movlb	1	; select bank1
  9444  0B70  0820               	movf	Two_Display@F2123^(0+128),w
  9445  0B71  0020               	movlb	0	; select bank0
  9446  0B72  00A6               	movwf	Two_Display@num
  9447                           
  9448                           ;ht1621.c: 142: num[1] = Dis_TAB[0];
  9449  0B73  3000               	movlw	low (_Dis_TAB| (0+32768))
  9450  0B74  0084               	movwf	4
  9451  0B75  3090               	movlw	high (_Dis_TAB| (0+32768))
  9452  0B76  0085               	movwf	5
  9453  0B77  0800               	movf	0,w	;code access
  9454  0B78  00A5               	movwf	??_Two_Display
  9455  0B79  0825               	movf	??_Two_Display,w
  9456  0B7A  00A7               	movwf	Two_Display@num+1
  9457                           
  9458                           ;ht1621.c: 143: num[2] = Dis_TAB[number];
  9459  0B7B  082A               	movf	Two_Display@number,w
  9460  0B7C  3E00               	addlw	low (_Dis_TAB| (0+32768))
  9461  0B7D  0084               	movwf	4
  9462  0B7E  3090               	movlw	high (_Dis_TAB| (0+32768))
  9463  0B7F  1803               	skipnc
  9464  0B80  3E01               	addlw	1
  9465  0B81  0085               	movwf	5
  9466  0B82  0800               	movf	0,w	;code access
  9467  0B83  00A5               	movwf	??_Two_Display
  9468  0B84  0825               	movf	??_Two_Display,w
  9469  0B85  00A8               	movwf	Two_Display@num+2
  9470                           
  9471                           ;ht1621.c: 144: WriteAll_1621(0, num, 4);
  9472  0B86  3026               	movlw	low Two_Display@num
  9473  0B87  00A0               	movwf	WriteAll_1621@p
  9474  0B88  3000               	movlw	high Two_Display@num
  9475  0B89  00A1               	movwf	WriteAll_1621@p+1
  9476  0B8A  3004               	movlw	4
  9477  0B8B  00A5               	movwf	??_Two_Display
  9478  0B8C  0825               	movf	??_Two_Display,w
  9479  0B8D  00A2               	movwf	WriteAll_1621@cnt
  9480  0B8E  3000               	movlw	0
  9481  0B8F  318B  2392         	fcall	_WriteAll_1621
  9482  0B91  0008               	return
  9483  0B92                     __end_of_Two_Display:	
  9484                           
  9485                           	psect	text45
  9486  0B92                     __ptext45:	
  9487 ;; *************** function _WriteAll_1621 *****************
  9488 ;; Defined at:
  9489 ;;		line 91 in file "mcc_generated_files/ht1621.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  addr            1    wreg     unsigned char 
  9492 ;;  p               2    0[BANK0 ] PTR unsigned char 
  9493 ;;		 -> time_Display@num(4), err_Display@num(4), Two_Display@num(4), display_buff(4), 
  9494 ;;		 -> Dis_TAB(21), 
  9495 ;;  cnt             1    2[BANK0 ] unsigned char 
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;  addr            1    3[BANK0 ] unsigned char 
  9498 ;;  i               1    4[BANK0 ] unsigned char 
  9499 ;; Return value:  Size  Location     Type
  9500 ;;                  1    wreg      void 
  9501 ;; Registers used:
  9502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9508 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;Total ram usage:        6 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    4
  9515 ;; This function calls:
  9516 ;;		_SendBit_1621
  9517 ;;		_SendDataBit_1621
  9518 ;; This function is called by:
  9519 ;;		_main
  9520 ;;		_Tc_Display
  9521 ;;		_Two_Display
  9522 ;;		_err_Display
  9523 ;;		_time_Display
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           
  9528                           ;psect for function _WriteAll_1621
  9529  0B92                     _WriteAll_1621:	
  9530                           
  9531                           ;incstack = 0
  9532                           ; Regs used in _WriteAll_1621: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9533                           ;WriteAll_1621@addr stored from wreg
  9534  0B92  0020               	movlb	0	; select bank0
  9535  0B93  00A3               	movwf	WriteAll_1621@addr
  9536                           
  9537                           ;ht1621.c: 93: unsigned char i;
  9538                           ;ht1621.c: 94: do { LATC0 = 0; } while(0);
  9539  0B94  0022               	movlb	2	; select bank2
  9540  0B95  100E               	bcf	14,0	;volatile
  9541                           
  9542                           ;ht1621.c: 95: SendBit_1621(0xa0,3);
  9543  0B96  3003               	movlw	3
  9544  0B97  00F7               	movwf	??_WriteAll_1621
  9545  0B98  0877               	movf	??_WriteAll_1621,w
  9546  0B99  00F3               	movwf	SendBit_1621@cnt
  9547  0B9A  30A0               	movlw	160
  9548  0B9B  3189  21C4  318B   	fcall	_SendBit_1621
  9549                           
  9550                           ;ht1621.c: 96: SendBit_1621(addr,6);
  9551  0B9E  3006               	movlw	6
  9552  0B9F  00F7               	movwf	??_WriteAll_1621
  9553  0BA0  0877               	movf	??_WriteAll_1621,w
  9554  0BA1  00F3               	movwf	SendBit_1621@cnt
  9555  0BA2  0020               	movlb	0	; select bank0
  9556  0BA3  0823               	movf	WriteAll_1621@addr,w
  9557  0BA4  3189  21C4  318B   	fcall	_SendBit_1621
  9558                           
  9559                           ;ht1621.c: 97: for(i =0; i <cnt; i ++,p++)
  9560  0BA7  0020               	movlb	0	; select bank0
  9561  0BA8  01A4               	clrf	WriteAll_1621@i
  9562  0BA9                     l4711:	
  9563  0BA9  0822               	movf	WriteAll_1621@cnt,w
  9564  0BAA  0224               	subwf	WriteAll_1621@i,w
  9565  0BAB  1803               	btfsc	3,0
  9566  0BAC  2BC3               	goto	l677
  9567                           
  9568                           ;ht1621.c: 98: {
  9569                           ;ht1621.c: 99: SendDataBit_1621(*p,8);
  9570  0BAD  3008               	movlw	8
  9571  0BAE  00F7               	movwf	??_WriteAll_1621
  9572  0BAF  0877               	movf	??_WriteAll_1621,w
  9573  0BB0  00F3               	movwf	SendDataBit_1621@cnt
  9574  0BB1  0820               	movf	WriteAll_1621@p,w
  9575  0BB2  0084               	movwf	4
  9576  0BB3  0821               	movf	WriteAll_1621@p+1,w
  9577  0BB4  0085               	movwf	5
  9578  0BB5  0800               	movf	0,w	;code access
  9579  0BB6  3189  21E2  318B   	fcall	_SendDataBit_1621
  9580  0BB9  3001               	movlw	1
  9581  0BBA  00F7               	movwf	??_WriteAll_1621
  9582  0BBB  0877               	movf	??_WriteAll_1621,w
  9583  0BBC  0020               	movlb	0	; select bank0
  9584  0BBD  07A4               	addwf	WriteAll_1621@i,f
  9585  0BBE  3001               	movlw	1
  9586  0BBF  07A0               	addwf	WriteAll_1621@p,f
  9587  0BC0  3000               	movlw	0
  9588  0BC1  3DA1               	addwfc	WriteAll_1621@p+1,f
  9589  0BC2  2BA9               	goto	l4711
  9590  0BC3                     l677:	
  9591                           ;ht1621.c: 100: }
  9592                           ;ht1621.c: 101: do { LATC0 = 1; } while(0);
  9593                           
  9594  0BC3  0022               	movlb	2	; select bank2
  9595  0BC4  140E               	bsf	14,0	;volatile
  9596  0BC5  0008               	return
  9597  0BC6                     __end_of_WriteAll_1621:	
  9598                           
  9599                           	psect	text46
  9600  09E2                     __ptext46:	
  9601 ;; *************** function _SendDataBit_1621 *****************
  9602 ;; Defined at:
  9603 ;;		line 42 in file "mcc_generated_files/ht1621.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;  data            1    wreg     unsigned char 
  9606 ;;  cnt             1    3[COMMON] unsigned char 
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;  data            1    5[COMMON] unsigned char 
  9609 ;;  i               1    6[COMMON] unsigned char 
  9610 ;; Return value:  Size  Location     Type
  9611 ;;                  1    wreg      void 
  9612 ;; Registers used:
  9613 ;;		wreg, status,2, status,0
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9619 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;Total ram usage:        4 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; Hardware stack levels required when called:    3
  9626 ;; This function calls:
  9627 ;;		Nothing
  9628 ;; This function is called by:
  9629 ;;		_WriteAll_1621
  9630 ;;		_Write_1621
  9631 ;; This function uses a non-reentrant model
  9632 ;;
  9633                           
  9634                           
  9635                           ;psect for function _SendDataBit_1621
  9636  09E2                     _SendDataBit_1621:	
  9637                           
  9638                           ;incstack = 0
  9639                           ; Regs used in _SendDataBit_1621: [wreg+status,2+status,0]
  9640                           ;SendDataBit_1621@data stored from wreg
  9641  09E2  00F5               	movwf	SendDataBit_1621@data
  9642                           
  9643                           ;ht1621.c: 44: unsigned char i;
  9644                           ;ht1621.c: 45: for(i =0; i <cnt; i ++)
  9645  09E3  01F6               	clrf	SendDataBit_1621@i
  9646  09E4                     l4639:	
  9647  09E4  0873               	movf	SendDataBit_1621@cnt,w
  9648  09E5  0276               	subwf	SendDataBit_1621@i,w
  9649  09E6  1803               	btfsc	3,0
  9650  09E7  0008               	return
  9651                           
  9652                           ;ht1621.c: 46: {
  9653                           ;ht1621.c: 47: if((data&0x01)==0) do { LATC2 = 0; } while(0);
  9654  09E8  1875               	btfsc	SendDataBit_1621@data,0
  9655  09E9  29ED               	goto	l648
  9656  09EA  0022               	movlb	2	; select bank2
  9657  09EB  110E               	bcf	14,2	;volatile
  9658  09EC  29EF               	goto	l650
  9659  09ED                     l648:	
  9660                           ;ht1621.c: 48: else do { LATC2 = 1; } while(0);
  9661                           
  9662  09ED  0022               	movlb	2	; select bank2
  9663  09EE  150E               	bsf	14,2	;volatile
  9664  09EF                     l650:	
  9665                           ;ht1621.c: 49: do { LATC1 = 0; } while(0);
  9666                           
  9667  09EF  108E               	bcf	14,1	;volatile
  9668                           
  9669                           ;ht1621.c: 50: _delay((unsigned long)((1)*(4000000/4000.0)));
  9670  09F0  30F9               	movlw	249
  9671  09F1  00F4               	movwf	??_SendDataBit_1621
  9672  09F2                     u5467:	
  9673  09F2  0000               	nop
  9674  09F3  0BF4               	decfsz	??_SendDataBit_1621,f
  9675  09F4  29F2               	goto	u5467
  9676  09F5  3200               	nop2	;nop
  9677  09F6  0000               	nop
  9678                           
  9679                           ;ht1621.c: 51: do { LATC1 = 1; } while(0);
  9680  09F7  0022               	movlb	2	; select bank2
  9681  09F8  148E               	bsf	14,1	;volatile
  9682                           
  9683                           ;ht1621.c: 52: data>>=1;
  9684  09F9  1003               	clrc
  9685  09FA  0CF5               	rrf	SendDataBit_1621@data,f
  9686  09FB  3001               	movlw	1
  9687  09FC  00F4               	movwf	??_SendDataBit_1621
  9688  09FD  0874               	movf	??_SendDataBit_1621,w
  9689  09FE  07F6               	addwf	SendDataBit_1621@i,f
  9690  09FF  29E4               	goto	l4639
  9691  0A00                     __end_of_SendDataBit_1621:	
  9692                           
  9693                           	psect	text47
  9694  0807                     __ptext47:	
  9695 ;; *************** function _Set_start_flag *****************
  9696 ;; Defined at:
  9697 ;;		line 18 in file "mcc_generated_files/save.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;		None
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;		None
  9702 ;; Return value:  Size  Location     Type
  9703 ;;                  1    wreg      void 
  9704 ;; Registers used:
  9705 ;;		None
  9706 ;; Tracked objects:
  9707 ;;		On entry : 0/0
  9708 ;;		On exit  : 0/0
  9709 ;;		Unchanged: 0/0
  9710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;Total ram usage:        0 bytes
  9716 ;; Hardware stack levels used:    1
  9717 ;; Hardware stack levels required when called:    3
  9718 ;; This function calls:
  9719 ;;		Nothing
  9720 ;; This function is called by:
  9721 ;;		_Key_Process
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           
  9726                           ;psect for function _Set_start_flag
  9727  0807                     _Set_start_flag:	
  9728                           
  9729                           ;save.c: 20: Record_flag = 1;
  9730                           
  9731                           ;incstack = 0
  9732                           ; Regs used in _Set_start_flag: []
  9733  0807  0020               	movlb	0	; select bank0
  9734  0808  01EB               	clrf	_Record_flag
  9735  0809  0AEB               	incf	_Record_flag,f
  9736                           
  9737                           ;save.c: 21: do { LATA4 = 0; } while(0);
  9738  080A  0022               	movlb	2	; select bank2
  9739  080B  120C               	bcf	12,4	;volatile
  9740  080C  0008               	return
  9741  080D                     __end_of_Set_start_flag:	
  9742                           
  9743                           	psect	text48
  9744  17F6                     __ptext48:	
  9745 ;; *************** function _Set_finish_flag *****************
  9746 ;; Defined at:
  9747 ;;		line 30 in file "mcc_generated_files/save.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;		None
  9750 ;; Auto vars:     Size  Location     Type
  9751 ;;		None
  9752 ;; Return value:  Size  Location     Type
  9753 ;;                  1    wreg      void 
  9754 ;; Registers used:
  9755 ;;		status,2
  9756 ;; Tracked objects:
  9757 ;;		On entry : 0/0
  9758 ;;		On exit  : 0/0
  9759 ;;		Unchanged: 0/0
  9760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;Total ram usage:        0 bytes
  9766 ;; Hardware stack levels used:    1
  9767 ;; Hardware stack levels required when called:    3
  9768 ;; This function calls:
  9769 ;;		Nothing
  9770 ;; This function is called by:
  9771 ;;		_Key_Process
  9772 ;; This function uses a non-reentrant model
  9773 ;;
  9774                           
  9775                           
  9776                           ;psect for function _Set_finish_flag
  9777  17F6                     _Set_finish_flag:	
  9778                           
  9779                           ;save.c: 32: Record_flag = 0;
  9780                           
  9781                           ;incstack = 0
  9782                           ; Regs used in _Set_finish_flag: [status,2]
  9783  17F6  0020               	movlb	0	; select bank0
  9784  17F7  01EB               	clrf	_Record_flag
  9785                           
  9786                           ;save.c: 33: do { LATA4 = 1; } while(0);
  9787  17F8  0022               	movlb	2	; select bank2
  9788  17F9  160C               	bsf	12,4	;volatile
  9789  17FA  0008               	return
  9790  17FB                     __end_of_Set_finish_flag:	
  9791                           
  9792                           	psect	text49
  9793  08C6                     __ptext49:	
  9794 ;; *************** function _SendCmd_1621 *****************
  9795 ;; Defined at:
  9796 ;;		line 62 in file "mcc_generated_files/ht1621.c"
  9797 ;; Parameters:    Size  Location     Type
  9798 ;;  command         1    wreg     unsigned char 
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;  command         1    0[BANK0 ] unsigned char 
  9801 ;; Return value:  Size  Location     Type
  9802 ;;                  1    wreg      void 
  9803 ;; Registers used:
  9804 ;;		wreg, status,2, status,0, pclath, cstack
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;Total ram usage:        2 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; Hardware stack levels required when called:    4
  9817 ;; This function calls:
  9818 ;;		_SendBit_1621
  9819 ;; This function is called by:
  9820 ;;		_main
  9821 ;;		_Key_Process
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _SendCmd_1621
  9827  08C6                     _SendCmd_1621:	
  9828                           
  9829                           ;incstack = 0
  9830                           ; Regs used in _SendCmd_1621: [wreg+status,2+status,0+pclath+cstack]
  9831                           ;SendCmd_1621@command stored from wreg
  9832  08C6  0020               	movlb	0	; select bank0
  9833  08C7  00A0               	movwf	SendCmd_1621@command
  9834                           
  9835                           ;ht1621.c: 64: do { LATC0 = 0; } while(0);
  9836  08C8  0022               	movlb	2	; select bank2
  9837  08C9  100E               	bcf	14,0	;volatile
  9838                           
  9839                           ;ht1621.c: 65: SendBit_1621(0x80,4);
  9840  08CA  3004               	movlw	4
  9841  08CB  00F7               	movwf	??_SendCmd_1621
  9842  08CC  0877               	movf	??_SendCmd_1621,w
  9843  08CD  00F3               	movwf	SendBit_1621@cnt
  9844  08CE  3080               	movlw	128
  9845  08CF  3189  21C4  3188   	fcall	_SendBit_1621
  9846                           
  9847                           ;ht1621.c: 66: SendBit_1621(command,8);
  9848  08D2  3008               	movlw	8
  9849  08D3  00F7               	movwf	??_SendCmd_1621
  9850  08D4  0877               	movf	??_SendCmd_1621,w
  9851  08D5  00F3               	movwf	SendBit_1621@cnt
  9852  08D6  0020               	movlb	0	; select bank0
  9853  08D7  0820               	movf	SendCmd_1621@command,w
  9854  08D8  3189  21C4         	fcall	_SendBit_1621
  9855                           
  9856                           ;ht1621.c: 67: do { LATC0 = 1; } while(0);
  9857  08DA  0022               	movlb	2	; select bank2
  9858  08DB  140E               	bsf	14,0	;volatile
  9859  08DC  0008               	return
  9860  08DD                     __end_of_SendCmd_1621:	
  9861                           
  9862                           	psect	text50
  9863  09C4                     __ptext50:	
  9864 ;; *************** function _SendBit_1621 *****************
  9865 ;; Defined at:
  9866 ;;		line 22 in file "mcc_generated_files/ht1621.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;  data            1    wreg     unsigned char 
  9869 ;;  cnt             1    3[COMMON] unsigned char 
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  data            1    5[COMMON] unsigned char 
  9872 ;;  i               1    6[COMMON] unsigned char 
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  1    wreg      void 
  9875 ;; Registers used:
  9876 ;;		wreg, status,2, status,0
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9882 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;Total ram usage:        4 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    3
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_SendCmd_1621
  9893 ;;		_WriteAll_1621
  9894 ;;		_Write_1621
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           
  9899                           ;psect for function _SendBit_1621
  9900  09C4                     _SendBit_1621:	
  9901                           
  9902                           ;incstack = 0
  9903                           ; Regs used in _SendBit_1621: [wreg+status,2+status,0]
  9904                           ;SendBit_1621@data stored from wreg
  9905  09C4  00F5               	movwf	SendBit_1621@data
  9906                           
  9907                           ;ht1621.c: 24: unsigned char i;
  9908                           ;ht1621.c: 25: for(i =0; i <cnt; i ++)
  9909  09C5  01F6               	clrf	SendBit_1621@i
  9910  09C6                     l4627:	
  9911  09C6  0873               	movf	SendBit_1621@cnt,w
  9912  09C7  0276               	subwf	SendBit_1621@i,w
  9913  09C8  1803               	btfsc	3,0
  9914  09C9  0008               	return
  9915                           
  9916                           ;ht1621.c: 26: {
  9917                           ;ht1621.c: 27: if((data&0x80)==0) do { LATC2 = 0; } while(0);
  9918  09CA  1BF5               	btfsc	SendBit_1621@data,7
  9919  09CB  29CF               	goto	l632
  9920  09CC  0022               	movlb	2	; select bank2
  9921  09CD  110E               	bcf	14,2	;volatile
  9922  09CE  29D1               	goto	l634
  9923  09CF                     l632:	
  9924                           ;ht1621.c: 28: else do { LATC2 = 1; } while(0);
  9925                           
  9926  09CF  0022               	movlb	2	; select bank2
  9927  09D0  150E               	bsf	14,2	;volatile
  9928  09D1                     l634:	
  9929                           ;ht1621.c: 29: do { LATC1 = 0; } while(0);
  9930                           
  9931  09D1  108E               	bcf	14,1	;volatile
  9932                           
  9933                           ;ht1621.c: 30: _delay((unsigned long)((1)*(4000000/4000.0)));
  9934  09D2  30F9               	movlw	249
  9935  09D3  00F4               	movwf	??_SendBit_1621
  9936  09D4                     u5477:	
  9937  09D4  0000               	nop
  9938  09D5  0BF4               	decfsz	??_SendBit_1621,f
  9939  09D6  29D4               	goto	u5477
  9940  09D7  3200               	nop2	;nop
  9941  09D8  0000               	nop
  9942                           
  9943                           ;ht1621.c: 31: do { LATC1 = 1; } while(0);
  9944  09D9  0022               	movlb	2	; select bank2
  9945  09DA  148E               	bsf	14,1	;volatile
  9946                           
  9947                           ;ht1621.c: 32: data<<=1;
  9948  09DB  1003               	clrc
  9949  09DC  0DF5               	rlf	SendBit_1621@data,f
  9950  09DD  3001               	movlw	1
  9951  09DE  00F4               	movwf	??_SendBit_1621
  9952  09DF  0874               	movf	??_SendBit_1621,w
  9953  09E0  07F6               	addwf	SendBit_1621@i,f
  9954  09E1  29C6               	goto	l4627
  9955  09E2                     __end_of_SendBit_1621:	
  9956                           
  9957                           	psect	text51
  9958  07DC                     __ptext51:	
  9959 ;; *************** function _Key_Scan *****************
  9960 ;; Defined at:
  9961 ;;		line 20 in file "mcc_generated_files/key.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  Key_val         1    5[COMMON] unsigned char 
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  1    wreg      unsigned char 
  9968 ;; Registers used:
  9969 ;;		wreg
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;Total ram usage:        3 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    3
  9982 ;; This function calls:
  9983 ;;		Nothing
  9984 ;; This function is called by:
  9985 ;;		_Key_Process
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           
  9990                           ;psect for function _Key_Scan
  9991  07DC                     _Key_Scan:	
  9992                           
  9993                           ;key.c: 22: unsigned char Key_val=0xff;
  9994                           
  9995                           ;incstack = 0
  9996                           ; Regs used in _Key_Scan: [wreg]
  9997  07DC  30FF               	movlw	255
  9998  07DD  00F3               	movwf	??_Key_Scan
  9999  07DE  0873               	movf	??_Key_Scan,w
 10000  07DF  00F5               	movwf	Key_Scan@Key_val
 10001                           
 10002                           ;key.c: 23: if( RA7 == 0 || RB5 == 0 )
 10003  07E0  0020               	movlb	0	; select bank0
 10004  07E1  1F8C               	btfss	12,7	;volatile
 10005  07E2  2FE5               	goto	l5321
 10006  07E3  1A8D               	btfsc	13,5	;volatile
 10007  07E4  2FFD               	goto	l867
 10008  07E5                     l5321:	
 10009                           
 10010                           ;key.c: 24: {
 10011                           ;key.c: 25: _delay((unsigned long)((10)*(4000000/4000.0)));
 10012  07E5  300D               	movlw	13
 10013  07E6  00F4               	movwf	??_Key_Scan+1
 10014  07E7  30FB               	movlw	251
 10015  07E8  00F3               	movwf	??_Key_Scan
 10016  07E9                     u5487:	
 10017  07E9  0BF3               	decfsz	??_Key_Scan,f
 10018  07EA  2FE9               	goto	u5487
 10019  07EB  0BF4               	decfsz	??_Key_Scan+1,f
 10020  07EC  2FE9               	goto	u5487
 10021  07ED  3200               	nop2
 10022                           
 10023                           ;key.c: 26: if( RA7 == 0 || RB5 == 0)
 10024  07EE  0020               	movlb	0	; select bank0
 10025  07EF  1F8C               	btfss	12,7	;volatile
 10026  07F0  2FF3               	goto	l872
 10027  07F1  1A8D               	btfsc	13,5	;volatile
 10028  07F2  2FFD               	goto	l867
 10029  07F3                     l872:	
 10030                           
 10031                           ;key.c: 27: {
 10032                           ;key.c: 28: if(RB5 == 0 ) Key_val = 0x01;
 10033  07F3  1A8D               	btfsc	13,5	;volatile
 10034  07F4  2FF7               	goto	l873
 10035  07F5  01F5               	clrf	Key_Scan@Key_val
 10036  07F6  0AF5               	incf	Key_Scan@Key_val,f
 10037  07F7                     l873:	
 10038                           
 10039                           ;key.c: 29: if(RA7 == 0 ) Key_val = 0x02;
 10040  07F7  1B8C               	btfsc	12,7	;volatile
 10041  07F8  2FFD               	goto	l867
 10042  07F9  3002               	movlw	2
 10043  07FA  00F3               	movwf	??_Key_Scan
 10044  07FB  0873               	movf	??_Key_Scan,w
 10045  07FC  00F5               	movwf	Key_Scan@Key_val
 10046  07FD                     l867:	
 10047                           
 10048                           ;key.c: 30: }
 10049                           ;key.c: 31: }
 10050                           ;key.c: 32: return Key_val;
 10051  07FD  0875               	movf	Key_Scan@Key_val,w
 10052  07FE  0008               	return
 10053  07FF                     __end_of_Key_Scan:	
 10054                           
 10055                           	psect	text52
 10056  081F                     __ptext52:	
 10057 ;; *************** function _EUSART_Write *****************
 10058 ;; Defined at:
 10059 ;;		line 91 in file "mcc_generated_files/eusart.c"
 10060 ;; Parameters:    Size  Location     Type
 10061 ;;  txData          1    wreg     unsigned char 
 10062 ;; Auto vars:     Size  Location     Type
 10063 ;;  txData          1    3[COMMON] unsigned char 
 10064 ;; Return value:  Size  Location     Type
 10065 ;;                  1    wreg      void 
 10066 ;; Registers used:
 10067 ;;		wreg
 10068 ;; Tracked objects:
 10069 ;;		On entry : 0/0
 10070 ;;		On exit  : 0/0
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;Total ram usage:        1 bytes
 10078 ;; Hardware stack levels used:    1
 10079 ;; Hardware stack levels required when called:    3
 10080 ;; This function calls:
 10081 ;;		Nothing
 10082 ;; This function is called by:
 10083 ;;		_Key_Process
 10084 ;;		_EUSART_SendString
 10085 ;; This function uses a non-reentrant model
 10086 ;;
 10087                           
 10088                           
 10089                           ;psect for function _EUSART_Write
 10090  081F                     _EUSART_Write:	
 10091                           
 10092                           ;incstack = 0
 10093                           ; Regs used in _EUSART_Write: [wreg]
 10094                           ;EUSART_Write@txData stored from wreg
 10095  081F  00F3               	movwf	EUSART_Write@txData
 10096  0820                     l129:	
 10097                           ;eusart.c: 92: while (0 == PIR1bits.TXIF) {
 10098                           
 10099  0820  0020               	movlb	0	; select bank0
 10100  0821  1E11               	btfss	17,4	;volatile
 10101  0822  2820               	goto	l129
 10102                           
 10103                           ;eusart.c: 93: }
 10104                           ;eusart.c: 95: TXREG = txData;
 10105  0823  0873               	movf	EUSART_Write@txData,w
 10106  0824  0023               	movlb	3	; select bank3
 10107  0825  009A               	movwf	26	;volatile
 10108  0826  0008               	return
 10109  0827                     __end_of_EUSART_Write:	
 10110                           
 10111                           	psect	text53
 10112  0C68                     __ptext53:	
 10113 ;; *************** function _Bq32k_Time_Init *****************
 10114 ;; Defined at:
 10115 ;;		line 17 in file "mcc_generated_files/bq32k.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;		None
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;  temp           10   24[BANK0 ] unsigned char [10]
 10120 ;;  time            7    0        struct bq32k_regs
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  1    wreg      void 
 10123 ;; Registers used:
 10124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;Total ram usage:       12 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    6
 10137 ;; This function calls:
 10138 ;;		_FLASH_ReadWord
 10139 ;;		_FLASH_WriteWord
 10140 ;;		_I2C_Send_Buffer
 10141 ;; This function is called by:
 10142 ;;		_main
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           
 10147                           ;psect for function _Bq32k_Time_Init
 10148  0C68                     _Bq32k_Time_Init:	
 10149                           
 10150                           ;bq32k.c: 19: bq32k_t time;
 10151                           ;bq32k.c: 20: unsigned char temp[10] = { 0x01,0x44,0x10,0x02,0x18,0x07,0x16 };
 10152                           
 10153                           ;incstack = 0
 10154                           ; Regs used in _Bq32k_Time_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10155  0C68  30E5               	movlw	low Bq32k_Time_Init@F2018
 10156  0C69  0086               	movwf	6
 10157  0C6A  3000               	movlw	high Bq32k_Time_Init@F2018
 10158  0C6B  0087               	movwf	7
 10159  0C6C  3038               	movlw	low Bq32k_Time_Init@temp
 10160  0C6D  0084               	movwf	4
 10161  0C6E  3000               	movlw	high Bq32k_Time_Init@temp
 10162  0C6F  0085               	movwf	5
 10163  0C70  300A               	movlw	10
 10164  0C71  0020               	movlb	0	; select bank0
 10165  0C72  00B6               	movwf	??_Bq32k_Time_Init
 10166  0C73                     u4970:	
 10167  0C73  0016               	moviw fsr1++
 10168  0C74  001A               	movwi fsr0++
 10169  0C75  0BB6               	decfsz	??_Bq32k_Time_Init,f
 10170  0C76  2C73               	goto	u4970
 10171                           
 10172                           ;bq32k.c: 21: if( FLASH_ReadWord(0x1fff) == 0x3fff )
 10173  0C77  30FF               	movlw	255
 10174  0C78  00F3               	movwf	FLASH_ReadWord@flashAddr
 10175  0C79  301F               	movlw	31
 10176  0C7A  00F4               	movwf	FLASH_ReadWord@flashAddr+1
 10177  0C7B  3189  210D  318C   	fcall	_FLASH_ReadWord
 10178  0C7E  0A73               	incf	?_FLASH_ReadWord,w
 10179  0C7F  303F               	movlw	63
 10180  0C80  1903               	skipnz
 10181  0C81  0674               	xorwf	?_FLASH_ReadWord+1,w
 10182  0C82  1D03               	btfss	3,2
 10183  0C83  0008               	return
 10184                           
 10185                           ;bq32k.c: 22: {
 10186                           ;bq32k.c: 23: I2C_Send_Buffer(0, temp, 7);
 10187  0C84  3038               	movlw	(low (Bq32k_Time_Init@temp| 0))& (0+255)
 10188  0C85  0020               	movlb	0	; select bank0
 10189  0C86  00B6               	movwf	??_Bq32k_Time_Init
 10190  0C87  0836               	movf	??_Bq32k_Time_Init,w
 10191  0C88  00F6               	movwf	I2C_Send_Buffer@buff
 10192  0C89  3007               	movlw	7
 10193  0C8A  00B7               	movwf	??_Bq32k_Time_Init+1
 10194  0C8B  0837               	movf	??_Bq32k_Time_Init+1,w
 10195  0C8C  00F7               	movwf	I2C_Send_Buffer@Length
 10196  0C8D  3000               	movlw	0
 10197  0C8E  318C  24A1  318C   	fcall	_I2C_Send_Buffer
 10198                           
 10199                           ;bq32k.c: 24: FLASH_WriteWord(0x1fff, temp, 1);
 10200  0C91  30FF               	movlw	255
 10201  0C92  0020               	movlb	0	; select bank0
 10202  0C93  00AC               	movwf	FLASH_WriteWord@flashAddr
 10203  0C94  301F               	movlw	31
 10204  0C95  00AD               	movwf	FLASH_WriteWord@flashAddr+1
 10205  0C96  3038               	movlw	low Bq32k_Time_Init@temp
 10206  0C97  00AE               	movwf	FLASH_WriteWord@ramBuf
 10207  0C98  3000               	movlw	high Bq32k_Time_Init@temp
 10208  0C99  00AF               	movwf	FLASH_WriteWord@ramBuf+1
 10209  0C9A  3001               	movlw	1
 10210  0C9B  00B0               	movwf	FLASH_WriteWord@word
 10211  0C9C  3000               	movlw	0
 10212  0C9D  00B1               	movwf	FLASH_WriteWord@word+1
 10213  0C9E  318D  25F5         	fcall	_FLASH_WriteWord
 10214  0CA0  0008               	return
 10215  0CA1                     __end_of_Bq32k_Time_Init:	
 10216                           
 10217                           	psect	text54
 10218  0CA1                     __ptext54:	
 10219 ;; *************** function _I2C_Send_Buffer *****************
 10220 ;; Defined at:
 10221 ;;		line 173 in file "mcc_generated_files/i2c.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;  ADD             1    wreg     unsigned char 
 10224 ;;  buff            1    6[COMMON] PTR unsigned char 
 10225 ;;		 -> Bq32k_Rtc_Write_Time@temp(10), Bq32k_Time_Init@temp(10), 
 10226 ;;  Length          1    7[COMMON] unsigned char 
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;  ADD             1    2[BANK0 ] unsigned char 
 10229 ;;  Flag            1    4[BANK0 ] unsigned char 
 10230 ;;  i               1    3[BANK0 ] unsigned char 
 10231 ;; Return value:  Size  Location     Type
 10232 ;;                  1    wreg      unsigned char 
 10233 ;; Registers used:
 10234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;Total ram usage:        7 bytes
 10245 ;; Hardware stack levels used:    1
 10246 ;; Hardware stack levels required when called:    4
 10247 ;; This function calls:
 10248 ;;		_I2C_Send_Byte
 10249 ;;		_I2C_Start
 10250 ;;		_I2C_Stop
 10251 ;; This function is called by:
 10252 ;;		_Bq32k_Time_Init
 10253 ;;		_Bq32k_Rtc_Write_Time
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           
 10258                           ;psect for function _I2C_Send_Buffer
 10259  0CA1                     _I2C_Send_Buffer:	
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in _I2C_Send_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10263                           ;I2C_Send_Buffer@ADD stored from wreg
 10264  0CA1  0020               	movlb	0	; select bank0
 10265  0CA2  00A2               	movwf	I2C_Send_Buffer@ADD
 10266                           
 10267                           ;i2c.c: 175: unsigned char Flag=1;
 10268  0CA3  01A4               	clrf	I2C_Send_Buffer@Flag
 10269  0CA4  0AA4               	incf	I2C_Send_Buffer@Flag,f
 10270                           
 10271                           ;i2c.c: 176: unsigned char i;
 10272                           ;i2c.c: 178: I2C_Start();
 10273  0CA5  3189  2126  318C   	fcall	_I2C_Start
 10274                           
 10275                           ;i2c.c: 180: Flag=I2C_Send_Byte(0XD0);
 10276  0CA8  30D0               	movlw	208
 10277  0CA9  318D  25A9  318C   	fcall	_I2C_Send_Byte
 10278  0CAC  0020               	movlb	0	; select bank0
 10279  0CAD  00A0               	movwf	??_I2C_Send_Buffer
 10280  0CAE  0820               	movf	??_I2C_Send_Buffer,w
 10281  0CAF  00A4               	movwf	I2C_Send_Buffer@Flag
 10282                           
 10283                           ;i2c.c: 181: if(Flag)
 10284  0CB0  0824               	movf	I2C_Send_Buffer@Flag,w
 10285  0CB1  1D03               	btfss	3,2
 10286  0CB2  0008               	return
 10287                           
 10288                           ;i2c.c: 184: Flag=I2C_Send_Byte( ADD );
 10289                           
 10290                           ;i2c.c: 182: return 0x01;
 10291                           ;	Return value of _I2C_Send_Buffer is never used
 10292  0CB3  0822               	movf	I2C_Send_Buffer@ADD,w
 10293  0CB4  318D  25A9  318C   	fcall	_I2C_Send_Byte
 10294  0CB7  0020               	movlb	0	; select bank0
 10295  0CB8  00A0               	movwf	??_I2C_Send_Buffer
 10296  0CB9  0820               	movf	??_I2C_Send_Buffer,w
 10297  0CBA  00A4               	movwf	I2C_Send_Buffer@Flag
 10298                           
 10299                           ;i2c.c: 185: if(Flag)
 10300  0CBB  0824               	movf	I2C_Send_Buffer@Flag,w
 10301  0CBC  1D03               	btfss	3,2
 10302  0CBD  0008               	return
 10303                           
 10304                           ;i2c.c: 188: for (i = 0; i<Length; i++)
 10305                           
 10306                           ;i2c.c: 186: return 0x01;
 10307                           ;	Return value of _I2C_Send_Buffer is never used
 10308  0CBE  01A3               	clrf	I2C_Send_Buffer@i
 10309  0CBF                     l5309:	
 10310  0CBF  0877               	movf	I2C_Send_Buffer@Length,w
 10311  0CC0  0223               	subwf	I2C_Send_Buffer@i,w
 10312  0CC1  1803               	btfsc	3,0
 10313  0CC2  2CD9               	goto	l5311
 10314                           
 10315                           ;i2c.c: 189: {
 10316                           ;i2c.c: 190: Flag=I2C_Send_Byte(*(buff+i));
 10317  0CC3  0823               	movf	I2C_Send_Buffer@i,w
 10318  0CC4  0776               	addwf	I2C_Send_Buffer@buff,w
 10319  0CC5  00A0               	movwf	??_I2C_Send_Buffer
 10320  0CC6  0820               	movf	??_I2C_Send_Buffer,w
 10321  0CC7  0086               	movwf	6
 10322  0CC8  0187               	clrf	7
 10323  0CC9  0801               	movf	1,w
 10324  0CCA  318D  25A9  318C   	fcall	_I2C_Send_Byte
 10325  0CCD  0020               	movlb	0	; select bank0
 10326  0CCE  00A1               	movwf	??_I2C_Send_Buffer+1
 10327  0CCF  0821               	movf	??_I2C_Send_Buffer+1,w
 10328  0CD0  00A4               	movwf	I2C_Send_Buffer@Flag
 10329                           
 10330                           ;i2c.c: 191: if(Flag)
 10331  0CD1  0824               	movf	I2C_Send_Buffer@Flag,w
 10332  0CD2  1D03               	btfss	3,2
 10333  0CD3  0008               	return
 10334                           
 10335                           ;i2c.c: 192: return 0x01;
 10336                           ;	Return value of _I2C_Send_Buffer is never used
 10337  0CD4  3001               	movlw	1
 10338  0CD5  00A0               	movwf	??_I2C_Send_Buffer
 10339  0CD6  0820               	movf	??_I2C_Send_Buffer,w
 10340  0CD7  07A3               	addwf	I2C_Send_Buffer@i,f
 10341  0CD8  2CBF               	goto	l5309
 10342  0CD9                     l5311:	
 10343                           
 10344                           ;i2c.c: 193: }
 10345                           ;i2c.c: 194: I2C_Stop();
 10346  0CD9  3189  213F         	fcall	_I2C_Stop
 10347  0CDB  0008               	return
 10348  0CDC                     __end_of_I2C_Send_Buffer:	
 10349                           ;i2c.c: 195: return 0x00;
 10350                           ;	Return value of _I2C_Send_Buffer is never used
 10351                           
 10352                           
 10353                           	psect	text55
 10354  093F                     __ptext55:	
 10355 ;; *************** function _I2C_Stop *****************
 10356 ;; Defined at:
 10357 ;;		line 102 in file "mcc_generated_files/i2c.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;		None
 10360 ;; Auto vars:     Size  Location     Type
 10361 ;;		None
 10362 ;; Return value:  Size  Location     Type
 10363 ;;                  1    wreg      void 
 10364 ;; Registers used:
 10365 ;;		wreg
 10366 ;; Tracked objects:
 10367 ;;		On entry : 0/0
 10368 ;;		On exit  : 0/0
 10369 ;;		Unchanged: 0/0
 10370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;Total ram usage:        1 bytes
 10376 ;; Hardware stack levels used:    1
 10377 ;; Hardware stack levels required when called:    3
 10378 ;; This function calls:
 10379 ;;		Nothing
 10380 ;; This function is called by:
 10381 ;;		_I2C_Read_Buffer
 10382 ;;		_I2C_Send_Buffer
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           
 10387                           ;psect for function _I2C_Stop
 10388  093F                     _I2C_Stop:	
 10389                           
 10390                           ;incstack = 0
 10391                           ; Regs used in _I2C_Stop: [wreg]
 10392                           ;i2c.c: 104: do { LATB0 = 0; } while(0);
 10393  093F  0022               	movlb	2	; select bank2
 10394  0940  100D               	bcf	13,0	;volatile
 10395                           
 10396                           ;i2c.c: 105: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10397  0941  3003               	movlw	3
 10398  0942  00F3               	movwf	??_I2C_Stop
 10399  0943                     u5497:	
 10400  0943  0BF3               	decfsz	??_I2C_Stop,f
 10401  0944  2943               	goto	u5497
 10402                           
 10403                           ;i2c.c: 106: do { LATB1 = 0; } while(0);
 10404  0945  0022               	movlb	2	; select bank2
 10405  0946  108D               	bcf	13,1	;volatile
 10406                           
 10407                           ;i2c.c: 107: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10408  0947  3003               	movlw	3
 10409  0948  00F3               	movwf	??_I2C_Stop
 10410  0949                     u5507:	
 10411  0949  0BF3               	decfsz	??_I2C_Stop,f
 10412  094A  2949               	goto	u5507
 10413                           
 10414                           ;i2c.c: 108: do { LATB0 = 1; } while(0);
 10415  094B  0022               	movlb	2	; select bank2
 10416  094C  140D               	bsf	13,0	;volatile
 10417                           
 10418                           ;i2c.c: 109: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10419  094D  3003               	movlw	3
 10420  094E  00F3               	movwf	??_I2C_Stop
 10421  094F                     u5517:	
 10422  094F  0BF3               	decfsz	??_I2C_Stop,f
 10423  0950  294F               	goto	u5517
 10424                           
 10425                           ;i2c.c: 110: do { LATB1 = 1; } while(0);
 10426  0951  0022               	movlb	2	; select bank2
 10427  0952  148D               	bsf	13,1	;volatile
 10428                           
 10429                           ;i2c.c: 111: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10430  0953  3003               	movlw	3
 10431  0954  00F3               	movwf	??_I2C_Stop
 10432  0955                     u5527:	
 10433  0955  0BF3               	decfsz	??_I2C_Stop,f
 10434  0956  2955               	goto	u5527
 10435  0957  0008               	return
 10436  0958                     __end_of_I2C_Stop:	
 10437                           
 10438                           	psect	text56
 10439  0926                     __ptext56:	
 10440 ;; *************** function _I2C_Start *****************
 10441 ;; Defined at:
 10442 ;;		line 16 in file "mcc_generated_files/i2c.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;		None
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;                  1    wreg      void 
 10449 ;; Registers used:
 10450 ;;		wreg
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;Total ram usage:        1 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    3
 10463 ;; This function calls:
 10464 ;;		Nothing
 10465 ;; This function is called by:
 10466 ;;		_I2C_Read_Buffer
 10467 ;;		_I2C_Send_Buffer
 10468 ;; This function uses a non-reentrant model
 10469 ;;
 10470                           
 10471                           
 10472                           ;psect for function _I2C_Start
 10473  0926                     _I2C_Start:	
 10474                           
 10475                           ;incstack = 0
 10476                           ; Regs used in _I2C_Start: [wreg]
 10477                           ;i2c.c: 18: do { LATB1 = 1; } while(0);
 10478  0926  0022               	movlb	2	; select bank2
 10479  0927  148D               	bsf	13,1	;volatile
 10480                           
 10481                           ;i2c.c: 19: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10482  0928  3003               	movlw	3
 10483  0929  00F3               	movwf	??_I2C_Start
 10484  092A                     u5537:	
 10485  092A  0BF3               	decfsz	??_I2C_Start,f
 10486  092B  292A               	goto	u5537
 10487                           
 10488                           ;i2c.c: 20: do { LATB0 = 1; } while(0);
 10489  092C  0022               	movlb	2	; select bank2
 10490  092D  140D               	bsf	13,0	;volatile
 10491                           
 10492                           ;i2c.c: 21: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10493  092E  3003               	movlw	3
 10494  092F  00F3               	movwf	??_I2C_Start
 10495  0930                     u5547:	
 10496  0930  0BF3               	decfsz	??_I2C_Start,f
 10497  0931  2930               	goto	u5547
 10498                           
 10499                           ;i2c.c: 22: do { LATB1 = 0; } while(0);
 10500  0932  0022               	movlb	2	; select bank2
 10501  0933  108D               	bcf	13,1	;volatile
 10502                           
 10503                           ;i2c.c: 23: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10504  0934  3003               	movlw	3
 10505  0935  00F3               	movwf	??_I2C_Start
 10506  0936                     u5557:	
 10507  0936  0BF3               	decfsz	??_I2C_Start,f
 10508  0937  2936               	goto	u5557
 10509                           
 10510                           ;i2c.c: 24: do { LATB0 = 0; } while(0);
 10511  0938  0022               	movlb	2	; select bank2
 10512  0939  100D               	bcf	13,0	;volatile
 10513                           
 10514                           ;i2c.c: 25: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10515  093A  3003               	movlw	3
 10516  093B  00F3               	movwf	??_I2C_Start
 10517  093C                     u5567:	
 10518  093C  0BF3               	decfsz	??_I2C_Start,f
 10519  093D  293C               	goto	u5567
 10520  093E  0008               	return
 10521  093F                     __end_of_I2C_Start:	
 10522                           
 10523                           	psect	text57
 10524  0DA9                     __ptext57:	
 10525 ;; *************** function _I2C_Send_Byte *****************
 10526 ;; Defined at:
 10527 ;;		line 34 in file "mcc_generated_files/i2c.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  Data            1    wreg     unsigned char 
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  Data            1    4[COMMON] unsigned char 
 10532 ;;  i               1    5[COMMON] unsigned char 
 10533 ;; Return value:  Size  Location     Type
 10534 ;;                  1    wreg      unsigned char 
 10535 ;; Registers used:
 10536 ;;		wreg, status,2, status,0
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;Total ram usage:        3 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:    3
 10549 ;; This function calls:
 10550 ;;		Nothing
 10551 ;; This function is called by:
 10552 ;;		_I2C_Read_Buffer
 10553 ;;		_I2C_Send_Buffer
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function _I2C_Send_Byte
 10559  0DA9                     _I2C_Send_Byte:	
 10560                           
 10561                           ;incstack = 0
 10562                           ; Regs used in _I2C_Send_Byte: [wreg+status,2+status,0]
 10563                           ;I2C_Send_Byte@Data stored from wreg
 10564  0DA9  00F4               	movwf	I2C_Send_Byte@Data
 10565                           
 10566                           ;i2c.c: 36: unsigned char i;
 10567                           ;i2c.c: 37: for(i=0;i<8;i++)
 10568  0DAA  01F5               	clrf	I2C_Send_Byte@i
 10569  0DAB  3008               	movlw	8
 10570  0DAC  0275               	subwf	I2C_Send_Byte@i,w
 10571  0DAD  1803               	btfsc	3,0
 10572  0DAE  2DD0               	goto	l744
 10573  0DAF                     l732:	
 10574                           
 10575                           ;i2c.c: 38: {
 10576                           ;i2c.c: 39: if(Data&0x80)
 10577  0DAF  1FF4               	btfss	I2C_Send_Byte@Data,7
 10578  0DB0  2DB4               	goto	l738
 10579                           
 10580                           ;i2c.c: 40: do { LATB1 = 1; } while(0);
 10581  0DB1  0022               	movlb	2	; select bank2
 10582  0DB2  148D               	bsf	13,1	;volatile
 10583  0DB3  2DB6               	goto	l4443
 10584  0DB4                     l738:	
 10585                           ;i2c.c: 41: else
 10586                           ;i2c.c: 42: do { LATB1 = 0; } while(0);
 10587                           
 10588  0DB4  0022               	movlb	2	; select bank2
 10589  0DB5  108D               	bcf	13,1	;volatile
 10590  0DB6                     l4443:	
 10591                           
 10592                           ;i2c.c: 43: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10593  0DB6  3003               	movlw	3
 10594  0DB7  00F3               	movwf	??_I2C_Send_Byte
 10595  0DB8                     u5577:	
 10596  0DB8  0BF3               	decfsz	??_I2C_Send_Byte,f
 10597  0DB9  2DB8               	goto	u5577
 10598                           
 10599                           ;i2c.c: 44: do { LATB0 = 1; } while(0);
 10600  0DBA  0022               	movlb	2	; select bank2
 10601  0DBB  140D               	bsf	13,0	;volatile
 10602                           
 10603                           ;i2c.c: 45: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10604  0DBC  3003               	movlw	3
 10605  0DBD  00F3               	movwf	??_I2C_Send_Byte
 10606  0DBE                     u5587:	
 10607  0DBE  0BF3               	decfsz	??_I2C_Send_Byte,f
 10608  0DBF  2DBE               	goto	u5587
 10609                           
 10610                           ;i2c.c: 46: Data<<=1;
 10611  0DC0  1003               	clrc
 10612  0DC1  0DF4               	rlf	I2C_Send_Byte@Data,f
 10613                           
 10614                           ;i2c.c: 47: do { LATB0 = 0; } while(0);
 10615  0DC2  0022               	movlb	2	; select bank2
 10616  0DC3  100D               	bcf	13,0	;volatile
 10617                           
 10618                           ;i2c.c: 48: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10619  0DC4  3003               	movlw	3
 10620  0DC5  00F3               	movwf	??_I2C_Send_Byte
 10621  0DC6                     u5597:	
 10622  0DC6  0BF3               	decfsz	??_I2C_Send_Byte,f
 10623  0DC7  2DC6               	goto	u5597
 10624  0DC8  3001               	movlw	1
 10625  0DC9  00F3               	movwf	??_I2C_Send_Byte
 10626  0DCA  0873               	movf	??_I2C_Send_Byte,w
 10627  0DCB  07F5               	addwf	I2C_Send_Byte@i,f
 10628  0DCC  3008               	movlw	8
 10629  0DCD  0275               	subwf	I2C_Send_Byte@i,w
 10630  0DCE  1C03               	skipc
 10631  0DCF  2DAF               	goto	l732
 10632  0DD0                     l744:	
 10633                           ;i2c.c: 49: }
 10634                           ;i2c.c: 50: do { LATB1 = 1; } while(0);
 10635                           
 10636  0DD0  0022               	movlb	2	; select bank2
 10637  0DD1  148D               	bsf	13,1	;volatile
 10638                           
 10639                           ;i2c.c: 51: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10640  0DD2  3003               	movlw	3
 10641  0DD3  00F3               	movwf	??_I2C_Send_Byte
 10642  0DD4                     u5607:	
 10643  0DD4  0BF3               	decfsz	??_I2C_Send_Byte,f
 10644  0DD5  2DD4               	goto	u5607
 10645                           
 10646                           ;i2c.c: 52: do { LATB0 = 1; } while(0);
 10647  0DD6  0022               	movlb	2	; select bank2
 10648  0DD7  140D               	bsf	13,0	;volatile
 10649                           
 10650                           ;i2c.c: 53: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10651  0DD8  3003               	movlw	3
 10652  0DD9  00F3               	movwf	??_I2C_Send_Byte
 10653  0DDA                     u5617:	
 10654  0DDA  0BF3               	decfsz	??_I2C_Send_Byte,f
 10655  0DDB  2DDA               	goto	u5617
 10656                           
 10657                           ;i2c.c: 54: do { TRISB1 = 1; } while(0);
 10658  0DDC  0021               	movlb	1	; select bank1
 10659  0DDD  148D               	bsf	13,1	;volatile
 10660                           
 10661                           ;i2c.c: 55: if(RB1)
 10662  0DDE  0020               	movlb	0	; select bank0
 10663  0DDF  1C8D               	btfss	13,1	;volatile
 10664  0DE0  2DE5               	goto	l754
 10665                           
 10666                           ;i2c.c: 56: {
 10667                           ;i2c.c: 57: do { TRISB1 = 0; } while(0);
 10668  0DE1  0021               	movlb	1	; select bank1
 10669  0DE2  108D               	bcf	13,1	;volatile
 10670                           
 10671                           ;i2c.c: 58: return 0x01;
 10672  0DE3  3001               	movlw	1
 10673  0DE4  0008               	return
 10674  0DE5                     l754:	
 10675                           ;i2c.c: 59: }
 10676                           ;i2c.c: 60: do { TRISB1 = 0; } while(0);
 10677                           
 10678  0DE5  0021               	movlb	1	; select bank1
 10679  0DE6  108D               	bcf	13,1	;volatile
 10680                           
 10681                           ;i2c.c: 61: do { LATB0 = 0; } while(0);
 10682  0DE7  0022               	movlb	2	; select bank2
 10683  0DE8  100D               	bcf	13,0	;volatile
 10684                           
 10685                           ;i2c.c: 62: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10686  0DE9  3003               	movlw	3
 10687  0DEA  00F3               	movwf	??_I2C_Send_Byte
 10688  0DEB                     u5627:	
 10689  0DEB  0BF3               	decfsz	??_I2C_Send_Byte,f
 10690  0DEC  2DEB               	goto	u5627
 10691                           
 10692                           ;i2c.c: 63: do { LATB1 = 0; } while(0);
 10693  0DED  0022               	movlb	2	; select bank2
 10694  0DEE  108D               	bcf	13,1	;volatile
 10695                           
 10696                           ;i2c.c: 64: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10697  0DEF  3003               	movlw	3
 10698  0DF0  00F3               	movwf	??_I2C_Send_Byte
 10699  0DF1                     u5637:	
 10700  0DF1  0BF3               	decfsz	??_I2C_Send_Byte,f
 10701  0DF2  2DF1               	goto	u5637
 10702                           
 10703                           ;i2c.c: 65: return 0x00;
 10704  0DF3  3000               	movlw	0
 10705  0DF4  0008               	return
 10706  0DF5                     __end_of_I2C_Send_Byte:	
 10707                           
 10708                           	psect	text58
 10709  0DF5                     __ptext58:	
 10710 ;; *************** function _FLASH_WriteWord *****************
 10711 ;; Defined at:
 10712 ;;		line 74 in file "mcc_generated_files/memory.c"
 10713 ;; Parameters:    Size  Location     Type
 10714 ;;  flashAddr       2   12[BANK0 ] unsigned int 
 10715 ;;  ramBuf          2   14[BANK0 ] PTR unsigned int 
 10716 ;;		 -> Flash_buff(64), Bq32k_Time_Init@temp(10), 
 10717 ;;  word            2   16[BANK0 ] unsigned int 
 10718 ;; Auto vars:     Size  Location     Type
 10719 ;;  blockStartAd    2   19[BANK0 ] unsigned int 
 10720 ;;  i               1   21[BANK0 ] unsigned char 
 10721 ;;  offset          1   18[BANK0 ] unsigned char 
 10722 ;; Return value:  Size  Location     Type
 10723 ;;                  1    wreg      void 
 10724 ;; Registers used:
 10725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10726 ;; Tracked objects:
 10727 ;;		On entry : 0/0
 10728 ;;		On exit  : 0/0
 10729 ;;		Unchanged: 0/0
 10730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10731 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;Total ram usage:       12 bytes
 10736 ;; Hardware stack levels used:    1
 10737 ;; Hardware stack levels required when called:    5
 10738 ;; This function calls:
 10739 ;;		_FLASH_ReadWord
 10740 ;;		_FLASH_WriteBlock
 10741 ;; This function is called by:
 10742 ;;		_Bq32k_Time_Init
 10743 ;;		_Write_Flash_head
 10744 ;;		_Write_Flash_finish
 10745 ;;		_Save_Write_word
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           
 10750                           ;psect for function _FLASH_WriteWord
 10751  0DF5                     _FLASH_WriteWord:	
 10752                           
 10753                           ;memory.c: 75: uint16_t blockStartAddr = (uint16_t) (flashAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
 10754                           
 10755                           ;incstack = 0
 10756                           ; Regs used in _FLASH_WriteWord: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10757  0DF5  30E0               	movlw	224
 10758  0DF6  0020               	movlb	0	; select bank0
 10759  0DF7  052C               	andwf	FLASH_WriteWord@flashAddr,w
 10760  0DF8  00B3               	movwf	FLASH_WriteWord@blockStartAddr
 10761  0DF9  303F               	movlw	63
 10762  0DFA  052D               	andwf	FLASH_WriteWord@flashAddr+1,w
 10763  0DFB  00B4               	movwf	FLASH_WriteWord@blockStartAddr+1
 10764                           
 10765                           ;memory.c: 76: uint8_t offset = (uint8_t) (flashAddr & (32 - 1));
 10766  0DFC  082C               	movf	FLASH_WriteWord@flashAddr,w
 10767  0DFD  391F               	andlw	31
 10768  0DFE  00F6               	movwf	??_FLASH_WriteWord
 10769  0DFF  0876               	movf	??_FLASH_WriteWord,w
 10770  0E00  00B2               	movwf	FLASH_WriteWord@offset
 10771                           
 10772                           ;memory.c: 77: uint8_t i;
 10773                           ;memory.c: 80: for (i = 0; i < 32; i++) {
 10774  0E01  01B5               	clrf	FLASH_WriteWord@i
 10775  0E02  3020               	movlw	32
 10776  0E03  0235               	subwf	FLASH_WriteWord@i,w
 10777  0E04  1803               	btfsc	3,0
 10778  0E05  2E28               	goto	l4533
 10779  0E06                     l4527:	
 10780                           
 10781                           ;memory.c: 81: ramBuf[i] = FLASH_ReadWord((blockStartAddr + i));
 10782  0E06  0835               	movf	FLASH_WriteWord@i,w
 10783  0E07  0733               	addwf	FLASH_WriteWord@blockStartAddr,w
 10784  0E08  00F3               	movwf	FLASH_ReadWord@flashAddr
 10785  0E09  0834               	movf	FLASH_WriteWord@blockStartAddr+1,w
 10786  0E0A  1803               	skipnc
 10787  0E0B  0A34               	incf	FLASH_WriteWord@blockStartAddr+1,w
 10788  0E0C  00F4               	movwf	FLASH_ReadWord@flashAddr+1
 10789  0E0D  3189  210D  318D   	fcall	_FLASH_ReadWord
 10790  0E10  0020               	movlb	0	; select bank0
 10791  0E11  0835               	movf	FLASH_WriteWord@i,w
 10792  0E12  00F6               	movwf	??_FLASH_WriteWord
 10793  0E13  01F7               	clrf	??_FLASH_WriteWord+1
 10794  0E14  35F6               	lslf	??_FLASH_WriteWord,f
 10795  0E15  0DF7               	rlf	??_FLASH_WriteWord+1,f
 10796  0E16  0876               	movf	??_FLASH_WriteWord,w
 10797  0E17  072E               	addwf	FLASH_WriteWord@ramBuf,w
 10798  0E18  0086               	movwf	6
 10799  0E19  0877               	movf	??_FLASH_WriteWord+1,w
 10800  0E1A  3D2F               	addwfc	FLASH_WriteWord@ramBuf+1,w
 10801  0E1B  0087               	movwf	7
 10802  0E1C  0873               	movf	?_FLASH_ReadWord,w
 10803  0E1D  3FC0               	movwi [0]fsr1
 10804  0E1E  0874               	movf	?_FLASH_ReadWord+1,w
 10805  0E1F  3FC1               	movwi [1]fsr1
 10806  0E20  3001               	movlw	1
 10807  0E21  00F6               	movwf	??_FLASH_WriteWord
 10808  0E22  0876               	movf	??_FLASH_WriteWord,w
 10809  0E23  07B5               	addwf	FLASH_WriteWord@i,f
 10810  0E24  3020               	movlw	32
 10811  0E25  0235               	subwf	FLASH_WriteWord@i,w
 10812  0E26  1C03               	skipc
 10813  0E27  2E06               	goto	l4527
 10814  0E28                     l4533:	
 10815                           
 10816                           ;memory.c: 82: }
 10817                           ;memory.c: 85: ramBuf[offset] = word;
 10818  0E28  0832               	movf	FLASH_WriteWord@offset,w
 10819  0E29  00F6               	movwf	??_FLASH_WriteWord
 10820  0E2A  01F7               	clrf	??_FLASH_WriteWord+1
 10821  0E2B  35F6               	lslf	??_FLASH_WriteWord,f
 10822  0E2C  0DF7               	rlf	??_FLASH_WriteWord+1,f
 10823  0E2D  0876               	movf	??_FLASH_WriteWord,w
 10824  0E2E  072E               	addwf	FLASH_WriteWord@ramBuf,w
 10825  0E2F  0086               	movwf	6
 10826  0E30  0877               	movf	??_FLASH_WriteWord+1,w
 10827  0E31  3D2F               	addwfc	FLASH_WriteWord@ramBuf+1,w
 10828  0E32  0087               	movwf	7
 10829  0E33  0830               	movf	FLASH_WriteWord@word,w
 10830  0E34  3FC0               	movwi [0]fsr1
 10831  0E35  0831               	movf	FLASH_WriteWord@word+1,w
 10832  0E36  3FC1               	movwi [1]fsr1
 10833                           
 10834                           ;memory.c: 88: FLASH_WriteBlock(blockStartAddr, ramBuf);
 10835  0E37  0834               	movf	FLASH_WriteWord@blockStartAddr+1,w
 10836  0E38  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
 10837  0E39  0833               	movf	FLASH_WriteWord@blockStartAddr,w
 10838  0E3A  00A0               	movwf	FLASH_WriteBlock@writeAddr
 10839  0E3B  082F               	movf	FLASH_WriteWord@ramBuf+1,w
 10840  0E3C  00A3               	movwf	FLASH_WriteBlock@flashWordArray+1
 10841  0E3D  082E               	movf	FLASH_WriteWord@ramBuf,w
 10842  0E3E  00A2               	movwf	FLASH_WriteBlock@flashWordArray
 10843  0E3F  3186  26F7         	fcall	_FLASH_WriteBlock
 10844  0E41  0008               	return
 10845  0E42                     __end_of_FLASH_WriteWord:	
 10846                           
 10847                           	psect	text59
 10848  06F7                     __ptext59:	
 10849 ;; *************** function _FLASH_WriteBlock *****************
 10850 ;; Defined at:
 10851 ;;		line 91 in file "mcc_generated_files/memory.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;  writeAddr       2    0[BANK0 ] unsigned int 
 10854 ;;  flashWordArr    2    2[BANK0 ] PTR unsigned int 
 10855 ;;		 -> Flash_buff(64), Bq32k_Time_Init@temp(10), 
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;  blockStartAd    2    8[BANK0 ] unsigned int 
 10858 ;;  i               1   11[BANK0 ] unsigned char 
 10859 ;;  GIEBitValue     1   10[BANK0 ] unsigned char 
 10860 ;; Return value:  Size  Location     Type
 10861 ;;                  1    wreg      char 
 10862 ;; Registers used:
 10863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10869 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;Total ram usage:       12 bytes
 10874 ;; Hardware stack levels used:    1
 10875 ;; Hardware stack levels required when called:    4
 10876 ;; This function calls:
 10877 ;;		_FLASH_EraseBlock
 10878 ;; This function is called by:
 10879 ;;		_FLASH_WriteWord
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           
 10884                           ;psect for function _FLASH_WriteBlock
 10885  06F7                     _FLASH_WriteBlock:	
 10886                           
 10887                           ;memory.c: 92: uint16_t blockStartAddr = (uint16_t) (writeAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
 10888                           
 10889                           ;incstack = 0
 10890                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10891  06F7  30E0               	movlw	224
 10892  06F8  0020               	movlb	0	; select bank0
 10893  06F9  0520               	andwf	FLASH_WriteBlock@writeAddr,w
 10894  06FA  00A8               	movwf	FLASH_WriteBlock@blockStartAddr
 10895  06FB  303F               	movlw	63
 10896  06FC  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
 10897  06FD  00A9               	movwf	FLASH_WriteBlock@blockStartAddr+1
 10898                           
 10899                           ;memory.c: 93: uint8_t GIEBitValue = INTCONbits.GIE;
 10900  06FE  3000               	movlw	0
 10901  06FF  1B8B               	btfsc	11,7	;volatile
 10902  0700  3001               	movlw	1
 10903  0701  00AA               	movwf	FLASH_WriteBlock@GIEBitValue
 10904                           
 10905                           ;memory.c: 94: uint8_t i;
 10906                           ;memory.c: 97: if (writeAddr != blockStartAddr) {
 10907  0702  0829               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 10908  0703  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 10909  0704  1D03               	skipz
 10910  0705  2F08               	goto	u3615
 10911  0706  0828               	movf	FLASH_WriteBlock@blockStartAddr,w
 10912  0707  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
 10913  0708                     u3615:	
 10914  0708  1D03               	btfss	3,2
 10915  0709  0008               	return
 10916                           
 10917                           ;memory.c: 99: }
 10918                           ;memory.c: 101: INTCONbits.GIE = 0;
 10919                           
 10920                           ;memory.c: 98: return -1;
 10921                           ;	Return value of _FLASH_WriteBlock is never used
 10922  070A  138B               	bcf	11,7	;volatile
 10923                           
 10924                           ;memory.c: 104: FLASH_EraseBlock(writeAddr);
 10925  070B  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
 10926  070C  00F4               	movwf	FLASH_EraseBlock@startAddr+1
 10927  070D  0820               	movf	FLASH_WriteBlock@writeAddr,w
 10928  070E  00F3               	movwf	FLASH_EraseBlock@startAddr
 10929  070F  3189  21A8  3186   	fcall	_FLASH_EraseBlock
 10930                           
 10931                           ;memory.c: 107: PMCON1bits.CFGS = 0;
 10932  0712  0023               	movlb	3	; select bank3
 10933  0713  1315               	bcf	21,6	;volatile
 10934                           
 10935                           ;memory.c: 108: PMCON1bits.WREN = 1;
 10936  0714  1515               	bsf	21,2	;volatile
 10937                           
 10938                           ;memory.c: 109: PMCON1bits.LWLO = 1;
 10939  0715  1695               	bsf	21,5	;volatile
 10940                           
 10941                           ;memory.c: 111: for (i = 0; i < 32; i++) {
 10942  0716  0020               	movlb	0	; select bank0
 10943  0717  01AB               	clrf	FLASH_WriteBlock@i
 10944  0718  3020               	movlw	32
 10945  0719  022B               	subwf	FLASH_WriteBlock@i,w
 10946  071A  1803               	btfsc	3,0
 10947  071B  2F61               	goto	l166
 10948  071C                     l4401:	
 10949                           
 10950                           ;memory.c: 113: PMADRL = (writeAddr & 0xFF);
 10951  071C  0820               	movf	FLASH_WriteBlock@writeAddr,w
 10952  071D  0023               	movlb	3	; select bank3
 10953  071E  0091               	movwf	17	;volatile
 10954                           
 10955                           ;memory.c: 115: PMADRH = ((writeAddr & 0xFF00) >> 8);
 10956  071F  0020               	movlb	0	; select bank0
 10957  0720  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
 10958  0721  0023               	movlb	3	; select bank3
 10959  0722  0092               	movwf	18	;volatile
 10960                           
 10961                           ;memory.c: 118: PMDATL = flashWordArray[i];
 10962  0723  0020               	movlb	0	; select bank0
 10963  0724  082B               	movf	FLASH_WriteBlock@i,w
 10964  0725  00A4               	movwf	??_FLASH_WriteBlock
 10965  0726  01A5               	clrf	??_FLASH_WriteBlock+1
 10966  0727  35A4               	lslf	??_FLASH_WriteBlock,f
 10967  0728  0DA5               	rlf	??_FLASH_WriteBlock+1,f
 10968  0729  0824               	movf	??_FLASH_WriteBlock,w
 10969  072A  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
 10970  072B  0086               	movwf	6
 10971  072C  0825               	movf	??_FLASH_WriteBlock+1,w
 10972  072D  3D23               	addwfc	FLASH_WriteBlock@flashWordArray+1,w
 10973  072E  0087               	movwf	7
 10974  072F  0801               	movf	1,w
 10975  0730  0023               	movlb	3	; select bank3
 10976  0731  0093               	movwf	19	;volatile
 10977                           
 10978                           ;memory.c: 119: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 10979  0732  0020               	movlb	0	; select bank0
 10980  0733  082B               	movf	FLASH_WriteBlock@i,w
 10981  0734  00A4               	movwf	??_FLASH_WriteBlock
 10982  0735  01A5               	clrf	??_FLASH_WriteBlock+1
 10983  0736  35A4               	lslf	??_FLASH_WriteBlock,f
 10984  0737  0DA5               	rlf	??_FLASH_WriteBlock+1,f
 10985  0738  0824               	movf	??_FLASH_WriteBlock,w
 10986  0739  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
 10987  073A  0086               	movwf	6
 10988  073B  0825               	movf	??_FLASH_WriteBlock+1,w
 10989  073C  3D23               	addwfc	FLASH_WriteBlock@flashWordArray+1,w
 10990  073D  0087               	movwf	7
 10991  073E  3F40               	moviw [0]fsr1
 10992  073F  00A6               	movwf	??_FLASH_WriteBlock+2
 10993  0740  3F41               	moviw [1]fsr1
 10994  0741  00A7               	movwf	??_FLASH_WriteBlock+3
 10995  0742  0827               	movf	??_FLASH_WriteBlock+3,w
 10996  0743  0023               	movlb	3	; select bank3
 10997  0744  0094               	movwf	20	;volatile
 10998                           
 10999                           ;memory.c: 121: if (i == (32 - 1)) {
 11000  0745  301F               	movlw	31
 11001  0746  0020               	movlb	0	; select bank0
 11002  0747  062B               	xorwf	FLASH_WriteBlock@i,w
 11003  0748  1D03               	btfss	3,2
 11004  0749  2F4C               	goto	l4413
 11005                           
 11006                           ;memory.c: 123: PMCON1bits.LWLO = 0;
 11007  074A  0023               	movlb	3	; select bank3
 11008  074B  1295               	bcf	21,5	;volatile
 11009  074C                     l4413:	
 11010                           
 11011                           ;memory.c: 124: }
 11012                           ;memory.c: 126: PMCON2 = 0x55;
 11013  074C  3055               	movlw	85
 11014  074D  0023               	movlb	3	; select bank3
 11015  074E  0096               	movwf	22	;volsfr
 11016                           
 11017                           ;memory.c: 127: PMCON2 = 0xAA;
 11018  074F  30AA               	movlw	170
 11019  0750  0096               	movwf	22	;volsfr
 11020                           
 11021                           ;memory.c: 128: PMCON1bits.WR = 1;
 11022  0751  1495               	bsf	21,1	;volatile
 11023                           
 11024                           ;memory.c: 129: __nop();
 11025  0752  0000               	nop
 11026                           
 11027                           ;memory.c: 130: __nop();
 11028  0753  0000               	nop
 11029                           
 11030                           ;memory.c: 132: writeAddr++;
 11031  0754  3001               	movlw	1
 11032  0755  0020               	movlb	0	; select bank0
 11033  0756  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
 11034  0757  3000               	movlw	0
 11035  0758  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 11036  0759  3001               	movlw	1
 11037  075A  00A4               	movwf	??_FLASH_WriteBlock
 11038  075B  0824               	movf	??_FLASH_WriteBlock,w
 11039  075C  07AB               	addwf	FLASH_WriteBlock@i,f
 11040  075D  3020               	movlw	32
 11041  075E  022B               	subwf	FLASH_WriteBlock@i,w
 11042  075F  1C03               	skipc
 11043  0760  2F1C               	goto	l4401
 11044  0761                     l166:	
 11045                           
 11046                           ;memory.c: 133: }
 11047                           ;memory.c: 135: PMCON1bits.WREN = 0;
 11048  0761  0023               	movlb	3	; select bank3
 11049  0762  1115               	bcf	21,2	;volatile
 11050                           
 11051                           ;memory.c: 136: INTCONbits.GIE = GIEBitValue;
 11052  0763  0020               	movlb	0	; select bank0
 11053  0764  0C2A               	rrf	FLASH_WriteBlock@GIEBitValue,w
 11054  0765  1C03               	skipc
 11055  0766  138B               	bcf	11,7	;volatile
 11056  0767  1803               	skipnc
 11057  0768  178B               	bsf	11,7	;volatile
 11058  0769  0008               	return
 11059  076A                     __end_of_FLASH_WriteBlock:	
 11060                           ;memory.c: 138: return 0;
 11061                           ;	Return value of _FLASH_WriteBlock is never used
 11062                           
 11063                           
 11064                           	psect	text60
 11065  09A8                     __ptext60:	
 11066 ;; *************** function _FLASH_EraseBlock *****************
 11067 ;; Defined at:
 11068 ;;		line 141 in file "mcc_generated_files/memory.c"
 11069 ;; Parameters:    Size  Location     Type
 11070 ;;  startAddr       2    3[COMMON] unsigned int 
 11071 ;; Auto vars:     Size  Location     Type
 11072 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;                  1    wreg      void 
 11075 ;; Registers used:
 11076 ;;		wreg, status,2, status,0
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11082 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11085 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;Total ram usage:        3 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    3
 11089 ;; This function calls:
 11090 ;;		Nothing
 11091 ;; This function is called by:
 11092 ;;		_FLASH_WriteBlock
 11093 ;; This function uses a non-reentrant model
 11094 ;;
 11095                           
 11096                           
 11097                           ;psect for function _FLASH_EraseBlock
 11098  09A8                     _FLASH_EraseBlock:	
 11099                           
 11100                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
 11101                           
 11102                           ;incstack = 0
 11103                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 11104  09A8  3000               	movlw	0
 11105  09A9  1B8B               	btfsc	11,7	;volatile
 11106  09AA  3001               	movlw	1
 11107  09AB  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
 11108                           
 11109                           ;memory.c: 145: INTCONbits.GIE = 0;
 11110  09AC  138B               	bcf	11,7	;volatile
 11111                           
 11112                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
 11113  09AD  0873               	movf	FLASH_EraseBlock@startAddr,w
 11114  09AE  0023               	movlb	3	; select bank3
 11115  09AF  0091               	movwf	17	;volatile
 11116                           
 11117                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
 11118  09B0  0874               	movf	FLASH_EraseBlock@startAddr+1,w
 11119  09B1  0092               	movwf	18	;volatile
 11120                           
 11121                           ;memory.c: 152: PMCON1bits.CFGS = 0;
 11122  09B2  1315               	bcf	21,6	;volatile
 11123                           
 11124                           ;memory.c: 153: PMCON1bits.FREE = 1;
 11125  09B3  1615               	bsf	21,4	;volatile
 11126                           
 11127                           ;memory.c: 154: PMCON1bits.WREN = 1;
 11128  09B4  1515               	bsf	21,2	;volatile
 11129                           
 11130                           ;memory.c: 157: PMCON2 = 0x55;
 11131  09B5  3055               	movlw	85
 11132  09B6  0096               	movwf	22	;volsfr
 11133                           
 11134                           ;memory.c: 158: PMCON2 = 0xAA;
 11135  09B7  30AA               	movlw	170
 11136  09B8  0096               	movwf	22	;volsfr
 11137                           
 11138                           ;memory.c: 159: PMCON1bits.WR = 1;
 11139  09B9  1495               	bsf	21,1	;volatile
 11140                           
 11141                           ;memory.c: 160: __nop();
 11142  09BA  0000               	nop
 11143                           
 11144                           ;memory.c: 161: __nop();
 11145  09BB  0000               	nop
 11146                           
 11147                           ;memory.c: 163: PMCON1bits.WREN = 0;
 11148  09BC  0023               	movlb	3	; select bank3
 11149  09BD  1115               	bcf	21,2	;volatile
 11150                           
 11151                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
 11152  09BE  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
 11153  09BF  1C03               	skipc
 11154  09C0  138B               	bcf	11,7	;volatile
 11155  09C1  1803               	skipnc
 11156  09C2  178B               	bsf	11,7	;volatile
 11157  09C3  0008               	return
 11158  09C4                     __end_of_FLASH_EraseBlock:	
 11159                           
 11160                           	psect	text61
 11161  090D                     __ptext61:	
 11162 ;; *************** function _FLASH_ReadWord *****************
 11163 ;; Defined at:
 11164 ;;		line 58 in file "mcc_generated_files/memory.c"
 11165 ;; Parameters:    Size  Location     Type
 11166 ;;  flashAddr       2    3[COMMON] unsigned int 
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  2    3[COMMON] unsigned int 
 11171 ;; Registers used:
 11172 ;;		wreg, status,2, status,0
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;Total ram usage:        3 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; Hardware stack levels required when called:    3
 11185 ;; This function calls:
 11186 ;;		Nothing
 11187 ;; This function is called by:
 11188 ;;		_FLASH_WriteWord
 11189 ;;		_Key_Process
 11190 ;;		_Bq32k_Time_Init
 11191 ;;		_Serach_Flash_Head
 11192 ;; This function uses a non-reentrant model
 11193 ;;
 11194                           
 11195                           
 11196                           ;psect for function _FLASH_ReadWord
 11197  090D                     _FLASH_ReadWord:	
 11198                           
 11199                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 11200                           
 11201                           ;incstack = 0
 11202                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 11203  090D  3000               	movlw	0
 11204  090E  1B8B               	btfsc	11,7	;volatile
 11205  090F  3001               	movlw	1
 11206  0910  00F5               	movwf	FLASH_ReadWord@GIEBitValue
 11207                           
 11208                           ;memory.c: 61: INTCONbits.GIE = 0;
 11209  0911  138B               	bcf	11,7	;volatile
 11210                           
 11211                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 11212  0912  0873               	movf	FLASH_ReadWord@flashAddr,w
 11213  0913  0023               	movlb	3	; select bank3
 11214  0914  0091               	movwf	17	;volatile
 11215                           
 11216                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 11217  0915  0874               	movf	FLASH_ReadWord@flashAddr+1,w
 11218  0916  0092               	movwf	18	;volatile
 11219                           
 11220                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 11221  0917  1315               	bcf	21,6	;volatile
 11222                           
 11223                           ;memory.c: 66: PMCON1bits.RD = 1;
 11224  0918  1415               	bsf	21,0	;volatile
 11225                           
 11226                           ;memory.c: 67: __nop();
 11227  0919  0000               	nop
 11228                           
 11229                           ;memory.c: 68: __nop();
 11230  091A  0000               	nop
 11231                           
 11232                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 11233  091B  0C75               	rrf	FLASH_ReadWord@GIEBitValue,w
 11234  091C  1C03               	skipc
 11235  091D  138B               	bcf	11,7	;volatile
 11236  091E  1803               	skipnc
 11237  091F  178B               	bsf	11,7	;volatile
 11238                           
 11239                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 11240  0920  0023               	movlb	3	; select bank3
 11241  0921  0814               	movf	20,w	;volatile
 11242  0922  00F4               	movwf	?_FLASH_ReadWord+1
 11243  0923  0813               	movf	19,w	;volatile
 11244  0924  00F3               	movwf	?_FLASH_ReadWord
 11245  0925  0008               	return
 11246  0926                     __end_of_FLASH_ReadWord:	
 11247                           
 11248                           	psect	text62
 11249  08DD                     __ptext62:	
 11250 ;; *************** function _ADC_GetConversion *****************
 11251 ;; Defined at:
 11252 ;;		line 106 in file "mcc_generated_files/adc.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;  channel         1    wreg     enum E1850
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;  channel         1    6[COMMON] enum E1850
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  2    3[COMMON] unsigned int 
 11259 ;; Registers used:
 11260 ;;		wreg, status,2, status,0
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;Total ram usage:        4 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; Hardware stack levels required when called:    3
 11273 ;; This function calls:
 11274 ;;		Nothing
 11275 ;; This function is called by:
 11276 ;;		_main
 11277 ;; This function uses a non-reentrant model
 11278 ;;
 11279                           
 11280                           
 11281                           ;psect for function _ADC_GetConversion
 11282  08DD                     _ADC_GetConversion:	
 11283                           
 11284                           ;incstack = 0
 11285                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 11286                           ;ADC_GetConversion@channel stored from wreg
 11287  08DD  00F6               	movwf	ADC_GetConversion@channel
 11288                           
 11289                           ;adc.c: 108: ADCON0bits.CHS = channel;
 11290  08DE  0876               	movf	ADC_GetConversion@channel,w
 11291  08DF  00F5               	movwf	??_ADC_GetConversion
 11292  08E0  0DF5               	rlf	??_ADC_GetConversion,f
 11293  08E1  0DF5               	rlf	??_ADC_GetConversion,f
 11294  08E2  0021               	movlb	1	; select bank1
 11295  08E3  081D               	movf	29,w	;volatile
 11296  08E4  0675               	xorwf	??_ADC_GetConversion,w
 11297  08E5  3983               	andlw	-125
 11298  08E6  0675               	xorwf	??_ADC_GetConversion,w
 11299  08E7  009D               	movwf	29	;volatile
 11300                           
 11301                           ;adc.c: 111: ADCON0bits.ADON = 1;
 11302  08E8  141D               	bsf	29,0	;volatile
 11303                           
 11304                           ;adc.c: 114: _delay((unsigned long)((5)*(4000000/4000000.0)));
 11305  08E9  3200               	nop2	;2 cycle nop
 11306  08EA  3200               	nop2	;2 cycle nop
 11307  08EB  0000               	nop
 11308                           
 11309                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
 11310  08EC  0021               	movlb	1	; select bank1
 11311  08ED  149D               	bsf	29,1	;volatile
 11312  08EE                     l197:	
 11313                           ;adc.c: 120: while (ADCON0bits.GO_nDONE) {
 11314                           
 11315  08EE  189D               	btfsc	29,1	;volatile
 11316  08EF  28EE               	goto	l197
 11317                           
 11318                           ;adc.c: 121: }
 11319                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
 11320  08F0  081C               	movf	28,w	;volatile
 11321  08F1  00F4               	movwf	?_ADC_GetConversion+1
 11322  08F2  081B               	movf	27,w	;volatile
 11323  08F3  00F3               	movwf	?_ADC_GetConversion
 11324  08F4  0008               	return
 11325  08F5                     __end_of_ADC_GetConversion:	
 11326                           
 11327                           	psect	intentry
 11328  0004                     __pintentry:	
 11329 ;; *************** function _INTERRUPT_InterruptManager *****************
 11330 ;; Defined at:
 11331 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11332 ;; Parameters:    Size  Location     Type
 11333 ;;		None
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;		None
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  1    wreg      void 
 11338 ;; Registers used:
 11339 ;;		wreg, status,2, status,0, pclath, cstack
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11347 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;Total ram usage:        1 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; Hardware stack levels required when called:    2
 11352 ;; This function calls:
 11353 ;;		_TMR0_ISR
 11354 ;; This function is called by:
 11355 ;;		Interrupt level 1
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359  0004                     _INTERRUPT_InterruptManager:	
 11360                           
 11361                           ;incstack = 0
 11362                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 11363  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11364  0005  3180               	pagesel	$
 11365  0006  0020               	movlb	0	; select bank0
 11366  0007  087F               	movf	127,w
 11367  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
 11368                           
 11369                           ;interrupt_manager.c: 54: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 11370  0009  1A8B               	btfsc	11,5	;volatile
 11371  000A  1D0B               	btfss	11,2	;volatile
 11372  000B  280E               	goto	i1l254
 11373                           
 11374                           ;interrupt_manager.c: 55: TMR0_ISR();
 11375  000C  3189  2172         	fcall	_TMR0_ISR
 11376  000E                     i1l254:	
 11377                           ;interrupt_manager.c: 56: } else {
 11378                           
 11379  000E  0872               	movf	??_INTERRUPT_InterruptManager,w
 11380  000F  0020               	movlb	0	; select bank0
 11381  0010  00FF               	movwf	127
 11382  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11383  0012  0009               	retfie
 11384  0013                     __end_of_INTERRUPT_InterruptManager:	
 11385                           
 11386                           	psect	text64
 11387  0972                     __ptext64:	
 11388 ;; *************** function _TMR0_ISR *****************
 11389 ;; Defined at:
 11390 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 11391 ;; Parameters:    Size  Location     Type
 11392 ;;		None
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;		None
 11395 ;; Return value:  Size  Location     Type
 11396 ;;                  1    wreg      void 
 11397 ;; Registers used:
 11398 ;;		wreg, status,2, status,0, pclath, cstack
 11399 ;; Tracked objects:
 11400 ;;		On entry : 0/0
 11401 ;;		On exit  : 0/0
 11402 ;;		Unchanged: 0/0
 11403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;Total ram usage:        1 bytes
 11409 ;; Hardware stack levels used:    1
 11410 ;; Hardware stack levels required when called:    1
 11411 ;; This function calls:
 11412 ;;		_TMR0_CallBack
 11413 ;; This function is called by:
 11414 ;;		_INTERRUPT_InterruptManager
 11415 ;; This function uses a non-reentrant model
 11416 ;;
 11417                           
 11418                           
 11419                           ;psect for function _TMR0_ISR
 11420  0972                     _TMR0_ISR:	
 11421                           
 11422                           ;tmr0.c: 104: static volatile unsigned int CountCallBack = 0;
 11423                           ;tmr0.c: 107: INTCONbits.TMR0IF = 0;
 11424                           
 11425                           ;incstack = 0
 11426                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11427  0972  110B               	bcf	11,2	;volatile
 11428                           
 11429                           ;tmr0.c: 109: TMR0 = timer0ReloadVal;
 11430  0973  0021               	movlb	1	; select bank1
 11431  0974  086F               	movf	_timer0ReloadVal^(0+128),w	;volatile
 11432  0975  0020               	movlb	0	; select bank0
 11433  0976  0095               	movwf	21	;volatile
 11434                           
 11435                           ;tmr0.c: 111: MAX31856Sec++;
 11436  0977  3001               	movlw	1
 11437  0978  00F1               	movwf	??_TMR0_ISR
 11438  0979  0871               	movf	??_TMR0_ISR,w
 11439  097A  0021               	movlb	1	; select bank1
 11440  097B  07B9               	addwf	_MAX31856Sec^(0+128),f
 11441                           
 11442                           ;tmr0.c: 114: if (++CountCallBack >= 100) {
 11443  097C  3001               	movlw	1
 11444  097D  07AC               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
 11445  097E  3000               	movlw	0
 11446  097F  3DAD               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
 11447  0980  3000               	movlw	0
 11448  0981  022D               	subwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
 11449  0982  3064               	movlw	100
 11450  0983  1903               	skipnz
 11451  0984  022C               	subwf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
 11452  0985  1C03               	skipc
 11453  0986  0008               	return
 11454                           
 11455                           ;tmr0.c: 116: TMR0_CallBack();
 11456  0987  3188  2001         	fcall	_TMR0_CallBack
 11457                           
 11458                           ;tmr0.c: 119: CountCallBack = 0;
 11459  0989  0021               	movlb	1	; select bank1
 11460  098A  01AC               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
 11461  098B  01AD               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
 11462  098C  0008               	return
 11463  098D                     __end_of_TMR0_ISR:	
 11464                           
 11465                           	psect	text65
 11466  0801                     __ptext65:	
 11467 ;; *************** function _TMR0_CallBack *****************
 11468 ;; Defined at:
 11469 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;		None
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;		None
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  1    wreg      void 
 11476 ;; Registers used:
 11477 ;;		wreg, status,2, status,0
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;Total ram usage:        1 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; This function calls:
 11490 ;;		Nothing
 11491 ;; This function is called by:
 11492 ;;		_TMR0_ISR
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           
 11497                           ;psect for function _TMR0_CallBack
 11498  0801                     _TMR0_CallBack:	
 11499                           
 11500                           ;tmr0.c: 128: LongPressSec++;
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0]
 11504  0801  3001               	movlw	1
 11505  0802  00F0               	movwf	??_TMR0_CallBack
 11506  0803  0870               	movf	??_TMR0_CallBack,w
 11507  0804  0021               	movlb	1	; select bank1
 11508  0805  07B8               	addwf	_LongPressSec^(0+128),f
 11509  0806  0008               	return
 11510  0807                     __end_of_TMR0_CallBack:	
 11511  007E                     btemp	set	126	;btemp
 11512  007E                     int$flags	set	126
 11513  007E                     wtemp	set	126
 11514  007E                     wtemp0	set	126
 11515  0080                     wtemp1	set	128
 11516  0082                     wtemp2	set	130
 11517  0084                     wtemp3	set	132
 11518  0086                     wtemp4	set	134
 11519  0088                     wtemp5	set	136
 11520  007F                     wtemp6	set	127
 11521  007E                     ttemp	set	126
 11522  007E                     ttemp0	set	126
 11523  0081                     ttemp1	set	129
 11524  0084                     ttemp2	set	132
 11525  0087                     ttemp3	set	135
 11526  007F                     ttemp4	set	127
 11527  007E                     ltemp	set	126
 11528  007E                     ltemp0	set	126
 11529  0082                     ltemp1	set	130
 11530  0086                     ltemp2	set	134
 11531  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    21
    Data        10
    BSS         145
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     69      78
    BANK1            80      0      80
    BANK2            80      8      72
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 7
		 -> rtc_save_ch2(BANK1[7]), rtc_save_ch1(BANK1[7]), 

    memset@p1	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    memset@p	PTR unsigned char  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    Bq32k_Rtc_Read_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    I2C_Send_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Write_Time@temp(COMMON[10]), Bq32k_Time_Init@temp(BANK0[10]), 

    I2C_Read_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Read_Time@temp(BANK0[10]), 

    sp__memset	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    WriteAll_1621@p	PTR unsigned char  size(2) Largest target is 21
		 -> time_Display@num(BANK0[4]), err_Display@num(BANK0[4]), Two_Display@num(BANK0[4]), display_buff(BANK1[4]), 
		 -> Dis_TAB(CODE[21]), 

    maxim_31856_read_nregisters@uch_buff	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(2) Largest target is 64
		 -> Flash_buff(BANK2[64]), Bq32k_Time_Init@temp(BANK0[10]), 

    FLASH_WriteWord@ramBuf	PTR unsigned int  size(2) Largest target is 64
		 -> Flash_buff(BANK2[64]), Bq32k_Time_Init@temp(BANK0[10]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _main->_SendCmd_1621
    _main->_WriteAll_1621
    _Sleep_process->_Step_control
    _SYSTEM_Initialize->_TMR0_Initialize
    _Key_Process->_SendCmd_1621
    _time_Display->_WriteAll_1621
    _time_Display->___awdiv
    _time_Display->___awmod
    _temperature_display->_maxim_clear_fault_status
    _Write_Flash_head->_FLASH_WriteWord
    _Write_Flash_finish->_FLASH_WriteWord
    _Save_Write_word->_FLASH_WriteWord
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _bcd2bin->___bmul
    _I2C_Read_Buffer->_I2C_Receive_Byte
    _I2C_Read_Buffer->_I2C_Send_Byte
    _maxim_clear_fault_status->_maxim_31856_read_register
    _err_Display->_WriteAll_1621
    _Tc_Display->_WriteAll_1621
    _Tc_Display->___lwmod
    _Tc_Display->_memset
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_start_conversion
    _maxim_start_conversion->_maxim_31856_read_register
    _maxim_31856_write_register->_SPI_Exchange8bit
    _maxim_31856_read_register->_SPI_Exchange8bit
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _Two_Display->_WriteAll_1621
    _WriteAll_1621->_SendBit_1621
    _WriteAll_1621->_SendDataBit_1621
    _SendCmd_1621->_SendBit_1621
    _Bq32k_Time_Init->_FLASH_WriteWord
    _Bq32k_Time_Init->_I2C_Send_Buffer
    _I2C_Send_Buffer->_I2C_Send_Byte
    _FLASH_WriteWord->_FLASH_ReadWord
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_TMR0_ISR
    _TMR0_ISR->_TMR0_CallBack

Critical Paths under _main in BANK0

    _main->_Key_Process
    _Save_process->_Calculate_Time
    _temperature_process->_temperature_display
    _time_Display->_Bq32k_Rtc_Read_Time
    _temperature_display->_tc_temperature_trans
    _tc_temperature_trans->_Calculate_Time
    _Calculate_Time->_Save_Write_time
    _Write_Flash_head->_FLASH_WriteWord
    _Write_Flash_finish->_FLASH_WriteWord
    _Save_Write_time->_Save_Write_word
    _Save_Write_word->_FLASH_WriteWord
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _err_Display->_WriteAll_1621
    _Tc_Display->___lwdiv
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_31856_read_nregisters
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _Two_Display->_WriteAll_1621
    _Bq32k_Time_Init->_FLASH_WriteWord
    _FLASH_WriteWord->_FLASH_WriteBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  124272
                                              0 BANK2      8     8      0
                  _ADC_GetConversion
                    _Bq32k_Time_Init
                        _Key_Process
                  _SYSTEM_Initialize
                       _Save_process
                       _SendCmd_1621
                  _Serach_Flash_Head
                      _Sleep_process
                      _WriteAll_1621
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _Sleep_process                                        0     0      0       0
                       _Step_control
 ---------------------------------------------------------------------------------
 (2) _Step_control                                         1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serach_Flash_Head                                    6     6      0    3919
                                             22 BANK0      6     6      0
                     _FLASH_ReadWord
                 _Write_Flash_finish
 ---------------------------------------------------------------------------------
 (1) _Save_process                                         4     4      0   20504
                                             50 BANK0      4     4      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Key_Process                                          6     6      0   53363
                                             63 BANK0      6     6      0
                       _EUSART_Write
                     _FLASH_ReadWord
                           _Key_Scan
                    _Save_Write_time
                       _SendCmd_1621
                    _Set_finish_flag
                     _Set_start_flag
                 _Write_Flash_finish
                   _Write_Flash_head
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _temperature_process                                  0     0      0   39432
                        _Two_Display
              _one_temperature_trans
                _temperature_display
                       _time_Display
 ---------------------------------------------------------------------------------
 (2) _time_Display                                         7     7      0    5147
                                             16 BANK0      7     7      0
                _Bq32k_Rtc_Read_Time
                      _WriteAll_1621
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     895
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     907
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _temperature_display                                  1     1      0   29720
                                             62 BANK0      1     1      0
                         _Tc_Display
                        _err_Display
         _maxim_31856_write_register
           _maxim_clear_fault_status
               _tc_temperature_trans
 ---------------------------------------------------------------------------------
 (3) _tc_temperature_trans                                12    12      0   21283
                                             50 BANK0     12    12      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Calculate_Time                                      22    22      0   15678
                                             28 BANK0     22    22      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_time
                 _Write_Flash_finish
                   _Write_Flash_head
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1368
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_head                                     0     0      0    3212
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_finish                                   0     0      0    3212
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Save_Write_time                                      3     3      0    6205
                                             26 BANK0      2     2      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Save_Write_word                                      4     2      2    4737
                                             22 BANK0      4     2      2
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Read_Time                                 13    13      0    1468
                                              3 BANK0     13    13      0
                    _I2C_Read_Buffer
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (4) _bcd2bin                                              4     4      0     275
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     213
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Buffer                                      5     3      2     599
                                              6 COMMON     2     0      2
                                              0 BANK0      3     3      0
                   _I2C_Receive_Byte
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Receive_Byte                                     3     3      0     108
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _maxim_clear_fault_status                             1     1      0    1652
                                              7 COMMON     1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (3) _err_Display                                          5     5      0    1834
                                              5 BANK0      5     5      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _Tc_Display                                           4     4      0    3395
                                              9 BANK0      4     4      0
                      _WriteAll_1621
                            ___lwdiv
                            ___lwmod
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     324
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     540
                                              3 COMMON     5     1      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     703
                                              1 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _one_temperature_trans                                2     2      0    2700
                                              8 BANK0      2     2      0
        _maxim_31856_read_nregisters
             _maxim_start_conversion
 ---------------------------------------------------------------------------------
 (3) _maxim_start_conversion                               2     2      0    1683
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_write_register                           2     1      1    1556
                                              4 COMMON     2     1      1
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_read_register                            3     3      0      96
                                              4 COMMON     3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _maxim_31856_read_nregisters                          5     3      2    1017
                                              3 BANK0      5     3      2
                   _SPI_Exchange8bit
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     739
                                              4 COMMON     4     2      2
                                              0 BANK0      3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Two_Display                                          6     6      0    1865
                                              5 BANK0      6     6      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _WriteAll_1621                                        6     3      3    1723
                                              7 COMMON     1     1      0
                                              0 BANK0      5     2      3
                       _SendBit_1621
                   _SendDataBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendDataBit_1621                                     4     3      1     256
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _Set_start_flag                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_finish_flag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendCmd_1621                                         2     2      0     595
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
                       _SendBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendBit_1621                                         4     3      1     564
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _Key_Scan                                             3     3      0      40
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Bq32k_Time_Init                                     19    19      0    4378
                                             22 BANK0     12    12      0
                     _FLASH_ReadWord
                    _FLASH_WriteWord
                    _I2C_Send_Buffer
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_Buffer                                      7     5      2     676
                                              6 COMMON     2     0      2
                                              0 BANK0      5     5      0
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_Byte                                        3     3      0     102
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteWord                                     12     6      6    3212
                                              6 COMMON     2     2      0
                                             12 BANK0     10     4      6
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_WriteBlock                                    12     8      4     776
                                              0 BANK0     12     8      4
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (7) _FLASH_EraseBlock                                     3     1      2     173
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (6) _FLASH_ReadWord                                       3     1      2     404
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      31
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0       0
                                              2 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            1     1      0       0
                                              1 COMMON     1     1      0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _Bq32k_Time_Init
     _FLASH_ReadWord
     _FLASH_WriteWord
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _I2C_Send_Buffer
       _I2C_Send_Byte
       _I2C_Start
       _I2C_Stop
   _Key_Process
     _EUSART_Write
     _FLASH_ReadWord
     _Key_Scan
     _Save_Write_time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_word
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
     _SendCmd_1621
       _SendBit_1621
     _Set_finish_flag
     _Set_start_flag
     _Write_Flash_finish
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _Write_Flash_head
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _temperature_process
       _Two_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _one_temperature_trans
         _maxim_31856_read_nregisters
           _SPI_Exchange8bit
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
         _maxim_start_conversion
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
       _temperature_display
         _Tc_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
           _memset
         _err_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
         _maxim_31856_write_register
           _SPI_Exchange8bit
         _maxim_clear_fault_status
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
         _tc_temperature_trans
           _Calculate_Time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_time
               _Bq32k_Rtc_Read_Time
                 _I2C_Read_Buffer
                   _I2C_Receive_Byte
                   _I2C_Send_Byte
                   _I2C_Start
                   _I2C_Stop
                 _bcd2bin
                   ___bmul
               _Save_Write_word
                 _FLASH_WriteWord
                   _FLASH_ReadWord
                   _FLASH_WriteBlock
                     _FLASH_EraseBlock
             _Write_Flash_finish
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
             _Write_Flash_head
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
             ___wmul
           _Save_Write_word
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
       _time_Display
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___awdiv
         ___awmod
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR0_Initialize
   _Save_process
     _Calculate_Time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_time
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _Save_Write_word
           _FLASH_WriteWord
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
       _Write_Flash_finish
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
       _Write_Flash_head
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
       ___wmul
     _Save_Write_word
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
   _SendCmd_1621
     _SendBit_1621
   _Serach_Flash_Head
     _FLASH_ReadWord
     _Write_Flash_finish
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
   _Sleep_process
     _Step_control
   _WriteAll_1621
     _SendBit_1621
     _SendDataBit_1621
   _temperature_process
     _Two_Display
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
     _one_temperature_trans
       _maxim_31856_read_nregisters
         _SPI_Exchange8bit
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _maxim_start_conversion
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
     _temperature_display
       _Tc_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         _memset
       _err_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _maxim_31856_write_register
         _SPI_Exchange8bit
       _maxim_clear_fault_status
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
       _tc_temperature_trans
         _Calculate_Time
           _Bq32k_Rtc_Read_Time
             _I2C_Read_Buffer
               _I2C_Receive_Byte
               _I2C_Send_Byte
               _I2C_Start
               _I2C_Stop
             _bcd2bin
               ___bmul
           _Save_Write_time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_word
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
           _Write_Flash_finish
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
           _Write_Flash_head
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
           ___wmul
         _Save_Write_word
           _FLASH_WriteWord
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
     _time_Display
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
       ___awdiv
       ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     45      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      8      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Jul 18 10:43:38 2016

                        __end_of_I2C_Send_Buffer 0CDC                                   _SPI_Initialize 080D  
                     ?_maxim_31856_read_register 0070    maxim_31856_read_register@uch_register_address 0075  
                                 ___bmul@product 0075                               __size_of_I2C_Start 0019  
                                    __CFG_CP$OFF 0000                                ?_Write_Flash_head 0070  
                                             l71 0834                                     ___awdiv@sign 0021  
                        ?_SPI_Exchange8bitBuffer 0074                           __end_of_FVR_Initialize 17F6  
                            ___wmul@multiplicand 0075                                 ?_Save_Write_time 0070  
                               ?_Save_Write_word 0036                                  _timer0ReloadVal 00EF  
                             ??_Write_Flash_head 0078                             Bq32k_Rtc_Read_Time@p 002F  
                                            l129 0820                                              l166 0761  
                                            l371 03CE                                              l540 0202  
                                            l532 01C7                                              l380 03FC  
                                            l197 08EE                                              l517 00E4  
                                            l373 03D0                                              l390 0469  
                                            l535 01CF                                              l519 0191  
                                            l632 09CF                                              l544 0D67  
                                            l545 0D66                                              l537 01FA  
                                            l529 0175                                              l634 09D1  
                                            l650 09EF                                              l732 0DAF  
                                            l744 0DD0                                              l648 09ED  
                                            l913 05DA                                              l905 05A6  
                                            l754 0DE5                                              l738 0DB4  
                                            l677 0BC3                                              l773 0A98  
                                            l589 0C67                                              l917 05E9  
                                            l687 04C8                                              l872 07F3  
                                            l688 04EF                                              l873 07F7  
                                            l867 07FD                                              l891 0570  
                                            l887 055A                                              l898 059E  
                                            l899 05A1                                              _RB1 0069  
                                            _RB3 006B                                              _RB5 006D  
                                            _RA7 0067                                     ?_err_Display 0070  
                                   ___awmod@sign 0021                               _Write_Flash_finish 0B03  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000                                 ?_FLASH_WriteWord 002C  
                         _maxim_start_conversion 0958                   FLASH_WriteBlock@flashWordArray 0022  
                                   __CFG_LVP$OFF 0000                                             l1102 0A32  
                                           l1023 0F58                                             l1027 0F89  
                                           l1119 0A0A                                             l5011 0490  
                                           l5021 051E                                             l5013 04AB  
                                           l5101 0D31                                             l5015 0504  
                                           l5103 0D3D                                             l5111 0D52  
                                           l4401 071C                                             l5025 0528  
                                           l5019 050F                                             l5051 0EA9  
                                           l5115 0D5A                                             l5107 0D49  
                                           l4413 074C                                             l5125 0D6F  
                                           l5061 0EB1                                             l5045 0E9E  
                                           l5311 0CD9                                             l4511 0893  
                                           l5151 0CED                                             l5063 0EBD  
                                           l5321 07E5                                             l5129 0D77  
                                           l5073 0ED8                                             l4443 0DB6  
                                           l4507 088D                                             l4603 0C19  
                                           l5163 0D05                                             l5155 0CF5  
                                           l5251 0C32                                             l4533 0E28  
                                           l5309 0CBF                                             l5077 0EE0  
                                           l5069 0ECF                                             l5093 0D2B  
                                           l5421 055B                                             l4527 0E06  
                                           l4711 0BA9                                             l5159 0CFD  
                                           l5263 0C3F                                             l5407 0F31  
                                           l5343 0A4A                                             l4801 0BCF  
                                           l5089 0D24                                             l5265 0C42  
                                           l5433 057D                                             l5425 0563  
                                           l5409 0F33                                             l5345 0A4B  
                                           l5601 0444                                             l4627 09C6  
                                           l4803 0BDB                                             l5283 0C55  
                                           l5443 05AF                                             l4813 0BF6  
                                           l4493 0AA8                                             l4661 0A03  
                                           l5277 0C4F                                             l5613 046B  
                                           l4639 09E4                                             l4831 0AF5  
                                           l4575 06AA                                             l5279 0C52  
                                           l5463 05CB                                             l5439 05A7  
                                           l5391 0F0E                                             l5519 0A3A  
                                           l5615 046E                                             l4681 0E4B  
                                           l4809 0BED                                             l4825 0ADD  
                                           l4577 06D5                                             l5473 05DF  
                                           l5553 03EB                                             l4691 0E79  
                                           l4827 0AE9                                             l4835 0AFE  
                                           l4755 02E0                                             l5467 05D2  
                                           l5547 03D8                                             l4685 0E5A  
                                           l4917 00FC                                             l5557 03FE  
                                           l4687 0E6F                                             l4759 02E9  
                                           l4951 0150                                             l4943 012D  
                                           l4919 0101                                             l5495 0F6B  
                                           l5399 0F20                                             l4689 0E74  
                                           l4769 02F8                                             l4865 006C  
                                           l4699 0E7C                                             l4779 03A7  
                                           l4947 013C                                             l4891 009C  
                                           l4789 0993                                             l4895 00AB  
                                           l4969 018D                                             l4987 01D8  
                                           l4899 00BF                              ?_Write_Flash_finish 0070  
                                           _LATA 010C                                             _LATB 010D  
                                           _LATC 010E                                             u4105 0BDC  
                                           u4115 0BE6                                             u4125 0BEE  
                                           u4230 0082                                             u4240 0083  
                                           u4155 0AE0                                             u4340 0113  
                                           u4085 0BD2                                             u4405 0142  
                                           u4350 0114                                             u3615 0708  
                                           u4175 0AEF                                             u4185 0AF6  
                                           u3805 08A8                                             u4605 0EC8  
                                           u5407 06CB                                             u4295 00B1  
                                           u4615 0ED0                                             u5417 06E4  
                                           u3905 0A0B                                             u4705 0D4A  
                                           u5507 0949                                             u5427 06EB  
                                           u3915 0A10                                             u5517 094F  
                                           u5437 06F2                                             u5607 0DD4  
                                           u5527 0955                                             u5447 0A8E  
                                           u4575 0EB4                                             u5617 0DDA  
                                           u5537 092A                                             u5457 0A9E  
                                           u5377 03C1                                             u5627 0DEB  
                                           u5547 0930                                             u5467 09F2  
                                           u5387 06BD                                             u4595 0EBE  
                                           u4675 0D34                                             u5637 0DF1  
                                           u5557 0936                                             u5477 09D4  
                                           u5397 06C4                                             u5567 093C  
                                           u5487 07E9                                             u4695 0D43  
                                           u5577 0DB8                                             u5497 0943  
                                           u4970 0C73                                             u5587 0DBE  
                                           u5597 0DC6                                             _TMR0 0015  
                                           _WPUB 020D                                             _WPUE 0210  
                                   __CFG_WRT$OFF 0000                                    __CFG_FCMEN$ON 0000  
                        __size_of_Set_start_flag 0006                           __size_of_WriteAll_1621 0034  
                                  ??_Key_Process 005F                                             _main 03A9  
                                           fsr0h 0005                                             fsr1h 0007  
                                           fsr0l 0004                                             indf0 0000  
                                           indf1 0001                                             fsr1l 0006  
                                           btemp 007E                                 __end_of_I2C_Stop 0958  
                              ?_FLASH_WriteBlock 0020                                    __CFG_BOREN$ON 0000  
                                           ltemp 007E                              SendCmd_1621@command 0020  
                                           start 0013                                             ttemp 007E  
                                           wtemp 007E                                  __end_of_Dis_TAB 1015  
                         __end_of_SPI_Initialize 0813                               ??_FLASH_WriteBlock 0024  
                               ?_I2C_Read_Buffer 0076                                ___bmul@multiplier 0076  
                                  __CFG_MCLRE$ON 0000                                     main@bat_data 0166  
                 __end_of_SPI_Exchange8bitBuffer 0E93                                  time_Display@num 0033  
                           ??_Write_Flash_finish 0078                          __end_of_TMR0_Initialize 087A  
                                ?_FVR_Initialize 0070                                    ?_EUSART_Write 0070  
                 __size_of_OSCILLATOR_Initialize 0005                    __end_of_OSCILLATOR_Initialize 1800  
                                __end_of_bcd2bin 08B1                                            ?_main 0070  
                                __end_of___awdiv 0EE5                                  __end_of___awmod 0D5F  
                                ___awdiv@divisor 0073                                            _LATA0 0860  
                                          _LATA1 0861                                            _LATB0 0868  
                                          _LATA2 0862                                            _LATB1 0869  
                                          _LATA3 0863                                            _LATC0 0870  
                                          _LATA4 0864                                            _LATC1 0871  
                                          _LATA5 0865                                            _LATC2 0872  
                                          _LATA6 0866                                  __end_of___lwdiv 0BFB  
                                          i1l254 000E                                  __end_of___lwmod 0B03  
                                ___awdiv@counter 0020                                            _RCREG 0199  
                                          u402m0 02D9                                            u405m0 03A0  
                                          _RCSTA 019D                                       _Flash_buff 0120  
                                          u387m0 0777                                            u388m0 0784  
                        ??_one_temperature_trans 0028                                ?_SendDataBit_1621 0073  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                          _TXSTA 019E                                 __end_of_TMR0_ISR 098D  
                             ??_SendDataBit_1621 0074                     __end_of_tc_temperature_trans 020B  
                                          main@i 0165                                __end_of_I2C_Start 093F  
                            _Bq32k_Rtc_Read_Time 0F9C                                  Tc_Display@count 002A  
                              WriteAll_1621@addr 0023                                            ltemp0 007E  
                                          ltemp1 0082                                            ltemp2 0086  
                                          ltemp3 0080                                            ttemp0 007E  
                                          ttemp1 0081                                            ttemp2 0084  
                                          ttemp3 0087                                            ttemp4 007F  
                                          status 0003                                            wtemp0 007E  
                                          wtemp1 0080                                            wtemp2 0082  
                                          wtemp3 0084                                            wtemp4 0086  
                                          wtemp5 0088                                            wtemp6 007F  
                         __size_of_I2C_Send_Byte 004C                                  _Cur_temperature 00B0  
                                     _Tc_Display 047B                                  ?_SPI_Initialize 0070  
                    __end_of_temperature_display 0D19                                  __initialization 0015  
                            __end_of_Key_Process 05EA                                 ?_I2C_Send_Buffer 0076  
                                   __end_of_main 047B                                   WriteAll_1621@i 0024  
                                 WriteAll_1621@p 0020                                 __end_of_Key_Scan 07FF  
                                  main@data_temp 0163                                   ??_EUSART_Write 0073  
                           ?_Bq32k_Rtc_Read_Time 0070                      __end_of_temperature_process 0C68  
                          __end_of_Sleep_process 0A3D                                   __CFG_LPBOR$OFF 0000  
   maxim_31856_write_register@uch_register_value 0074                      ?_INTERRUPT_InterruptManager 0070  
                                  _WriteAll_1621 0B92                                           ??_main 0160  
                                   Key_Process@i 0063   maxim_31856_write_register@uch_register_address 0075  
                        __size_of_FLASH_ReadWord 0019                          Bq32k_Rtc_Read_Time@temp 0025  
                              I2C_Receive_Byte@i 0075                         __end_of_SPI_Exchange8bit 0838  
                                         _ADCON0 009D                                           _ADCON1 009E  
                      FLASH_WriteBlock@writeAddr 0020                                           _ADRESH 009C  
                                         _ADRESL 009B                                 ___awdiv@dividend 0075  
                                         _APFCON 011D                                           _ANSELA 018C  
                                         _ANSELB 018D                                           _ANSELC 018E  
                                         _FVRCON 0117                                           _PMADRH 0192  
                                         _PMADRL 0191                                           _PMDATH 0194  
                                         _PMDATL 0193                                _temperature_value 0065  
                                         _PMCON2 0196                        __size_of_FLASH_EraseBlock 001C  
                                         _OSCCON 0099                                           _SPBRGH 019C  
                                         _SPBRGL 019B                         _Cur_temperature_time_ch1 00B6  
                       _Cur_temperature_time_ch2 00B7                                           _WDTPS0 04B9  
                                         _WDTPS1 04BA                                           _WDTPS2 04BB  
                                         _WDTPS3 04BC                                           _WDTPS4 04BD  
                                         _TRISB1 0469                                           _TRISB3 046B  
                                         _SSPBUF 0211                                    ?_SendCmd_1621 0070  
                                         _SWDTEN 04B8                                    ?_SendBit_1621 0073  
                                 __CFG_PWRTE$OFF 0000                                  _Bq32k_Time_Init 0C68  
                               SendBit_1621@data 0075                                           ___bmul 088B  
                                      ??_bcd2bin 0020                                           ___wmul 0A00  
                  FLASH_WriteWord@blockStartAddr 0033                                        ??___awdiv 0077  
                                 __CFG_STVREN$ON 0000                                        ??___awmod 0077  
                          ??_Bq32k_Rtc_Read_Time 0023                                        ??___lwdiv 0025  
                                      ??___lwmod 0077                     ?_maxim_31856_read_nregisters 0023  
                            FLASH_WriteWord@word 0030                                   ?_WriteAll_1621 0020  
                               ?_TMR0_Initialize 0070                                           _memset 098D  
                              ?_I2C_Receive_Byte 0070                                 ___awdiv@quotient 0022  
                                ___awmod@divisor 0073                                           _uch_sr 00C3  
                                ___awmod@counter 0020                                           _rtc_tm 00DA  
                                _Set_finish_flag 17F6                                    _I2C_Send_Byte 0DA9  
                             ??_I2C_Receive_Byte 0073                          FLASH_ReadWord@flashAddr 0073  
                                      ?_I2C_Stop 0070                     ??_maxim_31856_write_register 0075  
                          I2C_Read_Buffer@Length 0077                         ADC_GetConversion@channel 0076  
                           __size_of_err_Display 002C                            __end_of_TMR0_CallBack 0807  
                                     bcd2bin@val 0077                       ??_maxim_clear_fault_status 0077  
                                 _Set_start_flag 0807                                _SYSTEM_Initialize 08B1  
                                 ??_SendCmd_1621 0077                          __end_of__initialization 003B  
                                 ??_SendBit_1621 0074                                      _Key_Process 0543  
                             ?_SYSTEM_Initialize 0070                                      ?_Tc_Display 0070  
                             Calculate_Time@temp 0046                              ___bmul@multiplicand 0073  
                              time_Display@F2129 00A8             tc_temperature_trans@temperature_back 0056  
                                 __pcstackCOMMON 0070             tc_temperature_trans@temperature_temp 005C  
                                   __pidataBANK1 0838                              ??_SYSTEM_Initialize 0074  
                           _tc_temperature_trans 003F                                        ?_TMR0_ISR 0070  
                    ??_maxim_31856_read_register 0074                                 FLASH_WriteWord@i 0035  
            __size_of_maxim_31856_write_register 000D                                    ?_Save_process 0070  
                                 ?_I2C_Send_Byte 0070                    ??_maxim_31856_read_nregisters 0025  
                        ?_maxim_start_conversion 0070                                   _OPTION_REGbits 0095  
                          TMR0_ISR@CountCallBack 00AC                                  _temperature_int 00B2  
                                     ??_I2C_Stop 0073                                    ??_Two_Display 0025  
                    FLASH_WriteBlock@GIEBitValue 002A                                 Two_Display@F2123 00A0  
                           I2C_Receive_Byte@Data 0074                           __end_of_Set_start_flag 080D  
                            I2C_Read_Buffer@Flag 0022                        __end_of_SYSTEM_Initialize 08C6  
                      __size_of_Write_Flash_head 002F                              I2C_Read_Buffer@buff 0076  
                        __end_of_Bq32k_Time_Init 0CA1                                       __pbssBANK0 0065  
                                     __pbssBANK1 00A0                                       __pbssBANK2 0120  
                                      ?_Key_Scan 0070                             __end_of_EUSART_Write 0827  
                                __CFG_VCAPEN$OFF 0000                                 ??_FVR_Initialize 0073  
                                     __pmaintext 03A9                                          ?___bmul 0073  
                        __end_of_Set_finish_flag 17FB                            ?_tc_temperature_trans 0070  
                                    _Record_flag 006B                                  ??_WriteAll_1621 0077  
                                        ?___wmul 0073                                       ??_TMR0_ISR 0071  
                                 ??_Save_process 0052                                       __pintentry 0004  
                                        _BAUDCON 019F                                          ?_memset 0073  
                 __end_of_maxim_start_conversion 0972                        __size_of_FLASH_WriteBlock 0073  
                        __size_of_ADC_Initialize 0008                                   _FLASH_ReadWord 090D  
                            __size_of_Tc_Display 00C8                   __size_of_one_temperature_trans 004A  
                  __end_of_one_temperature_trans 0DA9                                          _OSCSTAT 009A  
                       __size_of_Save_Write_time 0072                                          _SSP1ADD 0212  
                       __size_of_Save_Write_word 0036                        _maxim_31856_read_register 087A  
                                ?_Set_start_flag 0070             __size_of_maxim_31856_read_nregisters 0018  
                                     ??_Key_Scan 0073                                          _Dis_TAB 1000  
                               _FLASH_EraseBlock 09A8                                 ??_SPI_Initialize 0073  
                       __size_of_FLASH_WriteWord 004D                          __size_of_Calculate_Time 019E  
                            __end_of_Two_Display 0B92                        __size_of_SendDataBit_1621 001E  
                                      _I2C_Start 0926  maxim_31856_read_nregisters@uch_register_address 0027  
                                      _CH1_state 00B4                                        _CH2_state 00B5  
                                        _bcd2bin 089C                                  __size_of___bmul 0011  
                                  ?_time_Display 0070                                          ___awdiv 0E93  
                                        ___awmod 0D19                                  __size_of___wmul 001E  
                                        ___lwdiv 0BC6                                          ___lwmod 0AD6  
                                ??_I2C_Send_Byte 0073                      __size_of_Write_Flash_finish 002F  
                              I2C_Send_Byte@Data 0074                           __end_of_FLASH_ReadWord 0926  
                                __size_of_memset 001B                         __size_of_I2C_Read_Buffer 0078  
                                        __ptext1 0A1E                                          __ptext2 0A3D  
                                        __ptext3 0EE5                                          __ptext4 0F39  
                                        __ptext5 08B1                                          __ptext6 086A  
                                        __ptext7 080D                                          __ptext8 0A5E  
                                        __ptext9 17FB                             __end_of_SendCmd_1621 08DD  
                           SendDataBit_1621@data 0075                             __end_of_SendBit_1621 09E2  
             __end_of_maxim_31856_write_register 085A                       _maxim_31856_write_register 084D  
                          _OSCILLATOR_Initialize 17FB                                   I2C_Send_Byte@i 0075  
                               ___awmod@dividend 0075                                          _uch_cr0 007A  
                                        _uch_cr1 00BE                         ??_PIN_MANAGER_Initialize 0073  
                                        _uch_reg 00C4                 __end_of_maxim_clear_fault_status 086A  
                              ?_SPI_Exchange8bit 0070                            I2C_Send_Buffer@Length 0077  
                     __size_of_SYSTEM_Initialize 0015                                          clrloop0 081A  
                           end_of_initialization 003B                               ??_SPI_Exchange8bit 0073  
                           SPI_Exchange8bit@data 0073                                 ?_Bq32k_Time_Init 0070  
                                        init_ram 0813                                          memset@c 0073  
                                        memset@n 0075                                          memset@p 0021  
                                        initloop 0814                                       ?_I2C_Start 0070  
                              _EUSART_Initialize 0842                           ??_tc_temperature_trans 0052  
                             ?_EUSART_Initialize 0070                                   ??_time_Display 0030  
                                      _RCSTAbits 019D                                 ?_Set_finish_flag 0070  
                          Serach_Flash_Head@data 0038                                     __pstringtext 1000  
                      FLASH_ReadWord@GIEBitValue 0075                                       _time_count 006D  
                                ?_FLASH_ReadWord 0073                     __size_of_temperature_display 003D  
                            ??_EUSART_Initialize 0073                                    ?_Step_control 0070  
                                   _display_buff 00E1                         __size_of_I2C_Send_Buffer 003B  
                               __CFG_FOSC$INTOSC 0000                     __size_of_temperature_process 0037  
                          __size_of_EUSART_Write 0008                                      _Two_Display 0B61  
                              __size_of_I2C_Stop 0019                                 _Write_Flash_head 0B32  
                            Bq32k_Time_Init@temp 0038                             __end_of_Save_process 0F9C  
                      __size_of_I2C_Receive_Byte 002A                             Key_Process@gKeyValue 0062  
                         __size_of_Sleep_process 001F                        __end_of_EUSART_Initialize 084D  
                            Calculate_Time@temp1 004A                              Calculate_Time@temp2 004E  
                              ??_Save_Write_time 003A                                     ?_Key_Process 0070  
                              ??_Save_Write_word 0038                         ??_SPI_Exchange8bitBuffer 0020  
                                   ??_Tc_Display 0029                      __end_of_Bq32k_Rtc_Read_Time 1000  
                              FLASH_WriteBlock@i 002B                                ??_FLASH_WriteWord 0076  
                   tc_temperature_trans@var_time 005A        maxim_start_conversion@uch_conversion_mode 0020  
                                 __end_of___bmul 089C                                   __end_of___wmul 0A1E  
                                   _EUSART_Write 081F                                __size_of_TMR0_ISR 001B  
                                 _ADC_Initialize 0827                                 _FLASH_WriteBlock 06F7  
                                 ??_Step_control 0073                             Key_Process@data_temp 0060  
                         ?_OSCILLATOR_Initialize 0070                                   __end_of_memset 09A8  
                                 Tc_Display@data 002B                                 WriteAll_1621@cnt 0022  
                                  ??_err_Display 0025                              start_initialization 0015  
                       __size_of_TMR0_Initialize 0010                               __end_of_Tc_Display 0543  
                __size_of_PIN_MANAGER_Initialize 0022                                ??_I2C_Read_Buffer 0020  
                                 Two_Display@num 0026                                   _Calculate_Time 020B  
                               _SendDataBit_1621 09E2                                      ??_I2C_Start 0073  
                              __size_of_Key_Scan 0023                                 _temperature_sign 00BA  
             __size_of_maxim_31856_read_register 0011                                  SendBit_1621@cnt 0073  
                                       ??___bmul 0074                __size_of_maxim_clear_fault_status 0010  
                      ?_maxim_clear_fault_status 0070                                         ??___wmul 0077  
                          __size_of_SendCmd_1621 0017                            __size_of_SendBit_1621 001E  
                            I2C_Send_Buffer@Flag 0024                           __size_of_TMR0_CallBack 0006  
                         __end_of_ADC_Initialize 082F                                      __pdataBANK1 00E5  
                            I2C_Send_Buffer@buff 0076                                         ??_memset 0077  
                    FLASH_EraseBlock@GIEBitValue 0075                         __end_of_FLASH_EraseBlock 09C4  
                                  _Sleep_process 0A1E                                 ??_Set_start_flag 0073  
                                    __pbssCOMMON 0078                                  _CH1_temperature 0069  
                                      ___latbits 0003                                    __pcstackBANK0 0020  
                                  __pcstackBANK2 0160                             __end_of_time_Display 067F  
                  SPI_Exchange8bitBuffer@dataOut 0075                           __end_of_Calculate_Time 03A9  
                              ??_I2C_Send_Buffer 0020                              __end_of_err_Display 0AD6  
                     __size_of_EUSART_Initialize 000B                               I2C_Read_Buffer@ADD 0021  
                                   _LongPressSec 00B8                                Two_Display@number 002A  
                                   _SendCmd_1621 08C6                                     _SendBit_1621 09C4  
                                      __pnvBANK1 00EF                  __size_of_SPI_Exchange8bitBuffer 0051  
                               ___lwdiv@dividend 0023                           _PIN_MANAGER_Initialize 0A5E  
                                    _MAX31856Sec 00B9                __end_of_maxim_31856_read_register 088B  
                                       ?_bcd2bin 0070                                         ?___awdiv 0073  
                                       ?___awmod 0073              __end_of_maxim_31856_read_nregisters 090D  
                    _maxim_31856_read_nregisters 08F5                                         ?___lwdiv 0021  
                                       ?___lwmod 0073                                  ?_ADC_Initialize 0070  
                              SendDataBit_1621@i 0076                                   ?_Sleep_process 0070  
                          __end_of_WriteAll_1621 0BC6                     ??_INTERRUPT_InterruptManager 0072  
                    ?_maxim_31856_write_register 0074                                         _I2C_Stop 093F  
                          __size_of_Save_process 0063                                  _CH2_temperature 0078  
                               I2C_Send_Buffer@i 0023                                 __CFG_WDTE$SWDTEN 0000  
                               ___lwdiv@quotient 0027                                    _TMR0_CallBack 0801  
                                ?_Calculate_Time 0070                              _temperature_decimal 006C  
                          _one_temperature_trans 0D5F                                 _I2C_Receive_Byte 0A80  
                            SendDataBit_1621@cnt 0073                         FLASH_WriteWord@flashAddr 002C  
                                 err_Display@num 0026                   FLASH_WriteBlock@blockStartAddr 0028  
          maxim_31856_read_nregisters@uch_nBytes 0024                              _temperature_display 0CDC  
                              ??_TMR0_Initialize 0073                                   ___wmul@product 0020  
                           __end_of_Step_control 0A5E                                        clear_ram0 0819  
                                      _uch_ltcbh 00BF                                        _uch_ltcbl 00C0  
                                      _uch_ltcbm 00C1                             __size_of_Key_Process 00A7  
            __size_of_INTERRUPT_InterruptManager 000F                              _temperature_process 0C31  
                                       _PIR1bits 0011                        FLASH_EraseBlock@startAddr 0073  
                               ??_FLASH_ReadWord 0075                        __size_of_SPI_Exchange8bit 0009  
                     __end_of_Write_Flash_finish 0B32                                         _SSP1CON1 0215  
                                       _TMR0_ISR 0972                         __end_of_Write_Flash_head 0B61  
                                       _SSP1STAT 0214                                     _Save_process 0F39  
                           ?_temperature_display 0070                            __end_of_I2C_Send_Byte 0DF5  
                                     _ADCON0bits 009D                                ___wmul@multiplier 0073  
                        __size_of_FVR_Initialize 0004                           _SPI_Exchange8bitBuffer 0E42  
                                 _Cur_Save_Index 00AE                                      _err_Display 0AAA  
                            Save_Write_word@data 0036                             ?_temperature_process 0070  
                                _Save_Write_time 076A                                  _Save_Write_word 0BFB  
                                   ?_Two_Display 0070                                   ?_TMR0_CallBack 0070  
                                _FLASH_WriteWord 0DF5                                         _Key_Scan 07DC  
            maxim_31856_read_nregisters@uch_buff 0023                         __end_of_FLASH_WriteBlock 076A  
                              _Serach_Flash_Head 0EE5                         __size_of_Bq32k_Time_Init 0039  
                             ?_Serach_Flash_Head 0070                                _ADC_GetConversion 08DD  
                       ??_maxim_start_conversion 0077                               I2C_Send_Buffer@ADD 0022  
                                ??_Sleep_process 0074                    __size_of_tc_temperature_trans 01CC  
                        __size_of_SPI_Initialize 0006                                 __size_of_bcd2bin 0015  
                        ??_OSCILLATOR_Initialize 0073                               Serach_Flash_Head@i 003A  
                             ?_ADC_GetConversion 0073                                 __size_of___awdiv 0052  
                          ??_temperature_display 005E                                 __size_of___awmod 0046  
                                _I2C_Read_Buffer 067F                                 __size_of___lwdiv 0035  
                               __size_of___lwmod 002D                              ??_Serach_Flash_Head 0036  
                   SPI_Exchange8bitBuffer@dataIn 0076                     SPI_Exchange8bitBuffer@bufLen 0074  
                               err_Display@F2126 00A4                         __end_of_SendDataBit_1621 0A00  
                       __size_of_Set_finish_flag 0005                            __size_of_time_Display 0095  
                            ??_ADC_GetConversion 0075                            ??_temperature_process 0078  
                                ___lwdiv@divisor 0021                                  ___lwdiv@counter 0026  
                                       __ptext10 17F2                                         __ptext11 0842  
                                       __ptext20 020B                                         __ptext12 0827  
                                       __ptext21 0A00                                         __ptext13 0543  
                                       __ptext30 0A80                                         __ptext22 0B32  
                                       __ptext14 0C31                                         __ptext31 085A  
                                       __ptext23 0B03                                         __ptext15 05EA  
                                       __ptext40 087A                                         __ptext32 0AAA  
                                       __ptext24 076A                                         __ptext16 0D19  
                                       __ptext41 08F5                                         __ptext33 047B  
                                       __ptext25 0BFB                                         __ptext17 0E93  
                                       __ptext50 09C4                                         __ptext42 0E42  
                                       __ptext34 098D                                         __ptext26 0F9C  
                                       __ptext18 0CDC                                         __ptext51 07DC  
                                       __ptext43 082F                                         __ptext35 0AD6  
                                       __ptext27 089C                                         __ptext19 003F  
                                       __ptext60 09A8                                         __ptext52 081F  
                                       __ptext44 0B61                                         __ptext36 0BC6  
                                       __ptext28 088B                                         __ptext61 090D  
                                       __ptext53 0C68                                         __ptext45 0B92  
                                       __ptext37 0D5F                                         __ptext29 067F  
                                       __ptext62 08DD                                         __ptext54 0CA1  
                                       __ptext46 09E2                                         __ptext38 0958  
                                       __ptext55 093F                                         __ptext47 0807  
                                       __ptext39 084D                                         __ptext64 0972  
                                       __ptext56 0926                                         __ptext48 17F6  
                                       __ptext65 0801                                         __ptext57 0DA9  
                                       __ptext49 08C6                                         __ptext58 0DF5  
                                       __ptext59 06F7                           ?_one_temperature_trans 0070  
                                   _SSP1CON1bits 0215                            FLASH_WriteWord@ramBuf 002E  
                          FLASH_WriteWord@offset 0032                        __end_of_Serach_Flash_Head 0F39  
                                  __size_of_main 00D2       maxim_31856_read_register@uch_register_data 0076  
                      __end_of_ADC_GetConversion 08F5                                         _uch_cjth 00BC  
                                       _uch_cjtl 00BD                                         _uch_mask 00C2  
                           Save_process@var_time 0054                                         int$flags 007E  
                                   _time_Display 05EA                                         _tmr_flag 00BB  
             __end_of_INTERRUPT_InterruptManager 0013                       _INTERRUPT_InterruptManager 0004  
                   __size_of_Bq32k_Rtc_Read_Time 0064                                     _SSP1STATbits 0214  
                        __end_of_Save_Write_time 07DC                          __end_of_Save_Write_word 0C31  
                                _I2C_Send_Buffer 0CA1                                ?_FLASH_EraseBlock 0073  
                             ??_FLASH_EraseBlock 0075                                       _INTCONbits 000B  
                        __end_of_FLASH_WriteWord 0E42                                  ??_TMR0_CallBack 0070  
                                     _FVRCONbits 0117                                  Key_Scan@Key_val 0075  
                                  SendBit_1621@i 0076                                         memset@p1 0020  
                          __size_of_Step_control 0021                                         intlevel1 0000  
                                     _PMCON1bits 0195                                 ___lwmod@dividend 0075  
                        ?_PIN_MANAGER_Initialize 0070                                __CFG_CLKOUTEN$OFF 0000  
             SPI_Exchange8bitBuffer@bytesWritten 0077                                 ??_ADC_Initialize 0073  
                        __end_of_I2C_Read_Buffer 06F7                                 _SPI_Exchange8bit 082F  
                __size_of_maxim_start_conversion 001A                         __end_of_I2C_Receive_Byte 0AAA  
                         Serach_Flash_Head@count 0037                                ??_Bq32k_Time_Init 0036  
                                 _FVR_Initialize 17F2                                     _rtc_save_ch1 00CC  
                                   _rtc_save_ch2 00D3                                       _OPTION_REG 0095  
                                   _Step_control 0A3D                                 ??_Calculate_Time 003C  
                                ___lwmod@divisor 0073                                  _TMR0_Initialize 086A  
                                ___lwmod@counter 0020         tc_temperature_trans@temperature_absolute 0058  
                              ??_Set_finish_flag 0073                               EUSART_Write@txData 0073  
                           __size_of_Two_Display 0031                   __end_of_PIN_MANAGER_Initialize 0A80  
                     __size_of_Serach_Flash_Head 0054                             Bq32k_Time_Init@F2018 00E5  
                     __size_of_ADC_GetConversion 0018                         _maxim_clear_fault_status 085A  
