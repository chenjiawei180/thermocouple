

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Jul 20 11:43:38 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	psect	intentry,global,class=CODE,delta=2
    86                           	psect	text68,local,class=CODE,merge=1,delta=2
    87                           	psect	text69,local,class=CODE,merge=1,delta=2
    88                           	psect	text70,local,class=CODE,merge=1,delta=2
    89                           	psect	text71,local,class=CODE,merge=1,delta=2
    90                           	psect	text72,local,class=CODE,merge=1,delta=2
    91                           	dabs	1,0x7E,2
    92  0000                     	;# 
    93  0001                     	;# 
    94  0002                     	;# 
    95  0003                     	;# 
    96  0004                     	;# 
    97  0005                     	;# 
    98  0006                     	;# 
    99  0007                     	;# 
   100  0008                     	;# 
   101  0009                     	;# 
   102  000A                     	;# 
   103  000B                     	;# 
   104  000C                     	;# 
   105  000D                     	;# 
   106  000E                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0095                     	;# 
   126  0096                     	;# 
   127  0097                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  0116                     	;# 
   139  0117                     	;# 
   140  011D                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143  018E                     	;# 
   144  0191                     	;# 
   145  0191                     	;# 
   146  0192                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0194                     	;# 
   150  0195                     	;# 
   151  0196                     	;# 
   152  0197                     	;# 
   153  0199                     	;# 
   154  019A                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019C                     	;# 
   160  019C                     	;# 
   161  019D                     	;# 
   162  019E                     	;# 
   163  019F                     	;# 
   164  020D                     	;# 
   165  0210                     	;# 
   166  0211                     	;# 
   167  0211                     	;# 
   168  0212                     	;# 
   169  0212                     	;# 
   170  0213                     	;# 
   171  0213                     	;# 
   172  0214                     	;# 
   173  0214                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0215                     	;# 
   177  0216                     	;# 
   178  0216                     	;# 
   179  0217                     	;# 
   180  0217                     	;# 
   181  0291                     	;# 
   182  0291                     	;# 
   183  0292                     	;# 
   184  0293                     	;# 
   185  0298                     	;# 
   186  0298                     	;# 
   187  0299                     	;# 
   188  029A                     	;# 
   189  0394                     	;# 
   190  0395                     	;# 
   191  0396                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE9                     	;# 
   198  0FEA                     	;# 
   199  0FEB                     	;# 
   200  0FED                     	;# 
   201  0FEE                     	;# 
   202  0FEF                     	;# 
   203  0000                     	;# 
   204  0001                     	;# 
   205  0002                     	;# 
   206  0003                     	;# 
   207  0004                     	;# 
   208  0005                     	;# 
   209  0006                     	;# 
   210  0007                     	;# 
   211  0008                     	;# 
   212  0009                     	;# 
   213  000A                     	;# 
   214  000B                     	;# 
   215  000C                     	;# 
   216  000D                     	;# 
   217  000E                     	;# 
   218  0010                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0016                     	;# 
   224  0017                     	;# 
   225  0018                     	;# 
   226  0019                     	;# 
   227  001A                     	;# 
   228  001B                     	;# 
   229  001C                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  0090                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  0116                     	;# 
   250  0117                     	;# 
   251  011D                     	;# 
   252  018C                     	;# 
   253  018D                     	;# 
   254  018E                     	;# 
   255  0191                     	;# 
   256  0191                     	;# 
   257  0192                     	;# 
   258  0193                     	;# 
   259  0193                     	;# 
   260  0194                     	;# 
   261  0195                     	;# 
   262  0196                     	;# 
   263  0197                     	;# 
   264  0199                     	;# 
   265  019A                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019C                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020D                     	;# 
   276  0210                     	;# 
   277  0211                     	;# 
   278  0211                     	;# 
   279  0212                     	;# 
   280  0212                     	;# 
   281  0213                     	;# 
   282  0213                     	;# 
   283  0214                     	;# 
   284  0214                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0216                     	;# 
   289  0216                     	;# 
   290  0217                     	;# 
   291  0217                     	;# 
   292  0291                     	;# 
   293  0291                     	;# 
   294  0292                     	;# 
   295  0293                     	;# 
   296  0298                     	;# 
   297  0298                     	;# 
   298  0299                     	;# 
   299  029A                     	;# 
   300  0394                     	;# 
   301  0395                     	;# 
   302  0396                     	;# 
   303  0FE4                     	;# 
   304  0FE5                     	;# 
   305  0FE6                     	;# 
   306  0FE7                     	;# 
   307  0FE8                     	;# 
   308  0FE9                     	;# 
   309  0FEA                     	;# 
   310  0FEB                     	;# 
   311  0FED                     	;# 
   312  0FEE                     	;# 
   313  0FEF                     	;# 
   314  0000                     	;# 
   315  0001                     	;# 
   316  0002                     	;# 
   317  0003                     	;# 
   318  0004                     	;# 
   319  0005                     	;# 
   320  0006                     	;# 
   321  0007                     	;# 
   322  0008                     	;# 
   323  0009                     	;# 
   324  000A                     	;# 
   325  000B                     	;# 
   326  000C                     	;# 
   327  000D                     	;# 
   328  000E                     	;# 
   329  0010                     	;# 
   330  0011                     	;# 
   331  0012                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  008C                     	;# 
   342  008D                     	;# 
   343  008E                     	;# 
   344  0090                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0095                     	;# 
   348  0096                     	;# 
   349  0097                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  010C                     	;# 
   358  010D                     	;# 
   359  010E                     	;# 
   360  0116                     	;# 
   361  0117                     	;# 
   362  011D                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  018E                     	;# 
   366  0191                     	;# 
   367  0191                     	;# 
   368  0192                     	;# 
   369  0193                     	;# 
   370  0193                     	;# 
   371  0194                     	;# 
   372  0195                     	;# 
   373  0196                     	;# 
   374  0197                     	;# 
   375  0199                     	;# 
   376  019A                     	;# 
   377  019B                     	;# 
   378  019B                     	;# 
   379  019B                     	;# 
   380  019B                     	;# 
   381  019C                     	;# 
   382  019C                     	;# 
   383  019D                     	;# 
   384  019E                     	;# 
   385  019F                     	;# 
   386  020D                     	;# 
   387  0210                     	;# 
   388  0211                     	;# 
   389  0211                     	;# 
   390  0212                     	;# 
   391  0212                     	;# 
   392  0213                     	;# 
   393  0213                     	;# 
   394  0214                     	;# 
   395  0214                     	;# 
   396  0215                     	;# 
   397  0215                     	;# 
   398  0215                     	;# 
   399  0216                     	;# 
   400  0216                     	;# 
   401  0217                     	;# 
   402  0217                     	;# 
   403  0291                     	;# 
   404  0291                     	;# 
   405  0292                     	;# 
   406  0293                     	;# 
   407  0298                     	;# 
   408  0298                     	;# 
   409  0299                     	;# 
   410  029A                     	;# 
   411  0394                     	;# 
   412  0395                     	;# 
   413  0396                     	;# 
   414  0FE4                     	;# 
   415  0FE5                     	;# 
   416  0FE6                     	;# 
   417  0FE7                     	;# 
   418  0FE8                     	;# 
   419  0FE9                     	;# 
   420  0FEA                     	;# 
   421  0FEB                     	;# 
   422  0FED                     	;# 
   423  0FEE                     	;# 
   424  0FEF                     	;# 
   425  0000                     	;# 
   426  0001                     	;# 
   427  0002                     	;# 
   428  0003                     	;# 
   429  0004                     	;# 
   430  0005                     	;# 
   431  0006                     	;# 
   432  0007                     	;# 
   433  0008                     	;# 
   434  0009                     	;# 
   435  000A                     	;# 
   436  000B                     	;# 
   437  000C                     	;# 
   438  000D                     	;# 
   439  000E                     	;# 
   440  0010                     	;# 
   441  0011                     	;# 
   442  0012                     	;# 
   443  0015                     	;# 
   444  0016                     	;# 
   445  0016                     	;# 
   446  0017                     	;# 
   447  0018                     	;# 
   448  0019                     	;# 
   449  001A                     	;# 
   450  001B                     	;# 
   451  001C                     	;# 
   452  008C                     	;# 
   453  008D                     	;# 
   454  008E                     	;# 
   455  0090                     	;# 
   456  0091                     	;# 
   457  0092                     	;# 
   458  0095                     	;# 
   459  0096                     	;# 
   460  0097                     	;# 
   461  0099                     	;# 
   462  009A                     	;# 
   463  009B                     	;# 
   464  009B                     	;# 
   465  009C                     	;# 
   466  009D                     	;# 
   467  009E                     	;# 
   468  010C                     	;# 
   469  010D                     	;# 
   470  010E                     	;# 
   471  0116                     	;# 
   472  0117                     	;# 
   473  011D                     	;# 
   474  018C                     	;# 
   475  018D                     	;# 
   476  018E                     	;# 
   477  0191                     	;# 
   478  0191                     	;# 
   479  0192                     	;# 
   480  0193                     	;# 
   481  0193                     	;# 
   482  0194                     	;# 
   483  0195                     	;# 
   484  0196                     	;# 
   485  0197                     	;# 
   486  0199                     	;# 
   487  019A                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019C                     	;# 
   493  019C                     	;# 
   494  019D                     	;# 
   495  019E                     	;# 
   496  019F                     	;# 
   497  020D                     	;# 
   498  0210                     	;# 
   499  0211                     	;# 
   500  0211                     	;# 
   501  0212                     	;# 
   502  0212                     	;# 
   503  0213                     	;# 
   504  0213                     	;# 
   505  0214                     	;# 
   506  0214                     	;# 
   507  0215                     	;# 
   508  0215                     	;# 
   509  0215                     	;# 
   510  0216                     	;# 
   511  0216                     	;# 
   512  0217                     	;# 
   513  0217                     	;# 
   514  0291                     	;# 
   515  0291                     	;# 
   516  0292                     	;# 
   517  0293                     	;# 
   518  0298                     	;# 
   519  0298                     	;# 
   520  0299                     	;# 
   521  029A                     	;# 
   522  0394                     	;# 
   523  0395                     	;# 
   524  0396                     	;# 
   525  0FE4                     	;# 
   526  0FE5                     	;# 
   527  0FE6                     	;# 
   528  0FE7                     	;# 
   529  0FE8                     	;# 
   530  0FE9                     	;# 
   531  0FEA                     	;# 
   532  0FEB                     	;# 
   533  0FED                     	;# 
   534  0FEE                     	;# 
   535  0FEF                     	;# 
   536  0000                     	;# 
   537  0001                     	;# 
   538  0002                     	;# 
   539  0003                     	;# 
   540  0004                     	;# 
   541  0005                     	;# 
   542  0006                     	;# 
   543  0007                     	;# 
   544  0008                     	;# 
   545  0009                     	;# 
   546  000A                     	;# 
   547  000B                     	;# 
   548  000C                     	;# 
   549  000D                     	;# 
   550  000E                     	;# 
   551  0010                     	;# 
   552  0011                     	;# 
   553  0012                     	;# 
   554  0015                     	;# 
   555  0016                     	;# 
   556  0016                     	;# 
   557  0017                     	;# 
   558  0018                     	;# 
   559  0019                     	;# 
   560  001A                     	;# 
   561  001B                     	;# 
   562  001C                     	;# 
   563  008C                     	;# 
   564  008D                     	;# 
   565  008E                     	;# 
   566  0090                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0095                     	;# 
   570  0096                     	;# 
   571  0097                     	;# 
   572  0099                     	;# 
   573  009A                     	;# 
   574  009B                     	;# 
   575  009B                     	;# 
   576  009C                     	;# 
   577  009D                     	;# 
   578  009E                     	;# 
   579  010C                     	;# 
   580  010D                     	;# 
   581  010E                     	;# 
   582  0116                     	;# 
   583  0117                     	;# 
   584  011D                     	;# 
   585  018C                     	;# 
   586  018D                     	;# 
   587  018E                     	;# 
   588  0191                     	;# 
   589  0191                     	;# 
   590  0192                     	;# 
   591  0193                     	;# 
   592  0193                     	;# 
   593  0194                     	;# 
   594  0195                     	;# 
   595  0196                     	;# 
   596  0197                     	;# 
   597  0199                     	;# 
   598  019A                     	;# 
   599  019B                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019C                     	;# 
   604  019C                     	;# 
   605  019D                     	;# 
   606  019E                     	;# 
   607  019F                     	;# 
   608  020D                     	;# 
   609  0210                     	;# 
   610  0211                     	;# 
   611  0211                     	;# 
   612  0212                     	;# 
   613  0212                     	;# 
   614  0213                     	;# 
   615  0213                     	;# 
   616  0214                     	;# 
   617  0214                     	;# 
   618  0215                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0216                     	;# 
   622  0216                     	;# 
   623  0217                     	;# 
   624  0217                     	;# 
   625  0291                     	;# 
   626  0291                     	;# 
   627  0292                     	;# 
   628  0293                     	;# 
   629  0298                     	;# 
   630  0298                     	;# 
   631  0299                     	;# 
   632  029A                     	;# 
   633  0394                     	;# 
   634  0395                     	;# 
   635  0396                     	;# 
   636  0FE4                     	;# 
   637  0FE5                     	;# 
   638  0FE6                     	;# 
   639  0FE7                     	;# 
   640  0FE8                     	;# 
   641  0FE9                     	;# 
   642  0FEA                     	;# 
   643  0FEB                     	;# 
   644  0FED                     	;# 
   645  0FEE                     	;# 
   646  0FEF                     	;# 
   647  0000                     	;# 
   648  0001                     	;# 
   649  0002                     	;# 
   650  0003                     	;# 
   651  0004                     	;# 
   652  0005                     	;# 
   653  0006                     	;# 
   654  0007                     	;# 
   655  0008                     	;# 
   656  0009                     	;# 
   657  000A                     	;# 
   658  000B                     	;# 
   659  000C                     	;# 
   660  000D                     	;# 
   661  000E                     	;# 
   662  0010                     	;# 
   663  0011                     	;# 
   664  0012                     	;# 
   665  0015                     	;# 
   666  0016                     	;# 
   667  0016                     	;# 
   668  0017                     	;# 
   669  0018                     	;# 
   670  0019                     	;# 
   671  001A                     	;# 
   672  001B                     	;# 
   673  001C                     	;# 
   674  008C                     	;# 
   675  008D                     	;# 
   676  008E                     	;# 
   677  0090                     	;# 
   678  0091                     	;# 
   679  0092                     	;# 
   680  0095                     	;# 
   681  0096                     	;# 
   682  0097                     	;# 
   683  0099                     	;# 
   684  009A                     	;# 
   685  009B                     	;# 
   686  009B                     	;# 
   687  009C                     	;# 
   688  009D                     	;# 
   689  009E                     	;# 
   690  010C                     	;# 
   691  010D                     	;# 
   692  010E                     	;# 
   693  0116                     	;# 
   694  0117                     	;# 
   695  011D                     	;# 
   696  018C                     	;# 
   697  018D                     	;# 
   698  018E                     	;# 
   699  0191                     	;# 
   700  0191                     	;# 
   701  0192                     	;# 
   702  0193                     	;# 
   703  0193                     	;# 
   704  0194                     	;# 
   705  0195                     	;# 
   706  0196                     	;# 
   707  0197                     	;# 
   708  0199                     	;# 
   709  019A                     	;# 
   710  019B                     	;# 
   711  019B                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019C                     	;# 
   715  019C                     	;# 
   716  019D                     	;# 
   717  019E                     	;# 
   718  019F                     	;# 
   719  020D                     	;# 
   720  0210                     	;# 
   721  0211                     	;# 
   722  0211                     	;# 
   723  0212                     	;# 
   724  0212                     	;# 
   725  0213                     	;# 
   726  0213                     	;# 
   727  0214                     	;# 
   728  0214                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0216                     	;# 
   733  0216                     	;# 
   734  0217                     	;# 
   735  0217                     	;# 
   736  0291                     	;# 
   737  0291                     	;# 
   738  0292                     	;# 
   739  0293                     	;# 
   740  0298                     	;# 
   741  0298                     	;# 
   742  0299                     	;# 
   743  029A                     	;# 
   744  0394                     	;# 
   745  0395                     	;# 
   746  0396                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000D                     	;# 
   772  000E                     	;# 
   773  0010                     	;# 
   774  0011                     	;# 
   775  0012                     	;# 
   776  0015                     	;# 
   777  0016                     	;# 
   778  0016                     	;# 
   779  0017                     	;# 
   780  0018                     	;# 
   781  0019                     	;# 
   782  001A                     	;# 
   783  001B                     	;# 
   784  001C                     	;# 
   785  008C                     	;# 
   786  008D                     	;# 
   787  008E                     	;# 
   788  0090                     	;# 
   789  0091                     	;# 
   790  0092                     	;# 
   791  0095                     	;# 
   792  0096                     	;# 
   793  0097                     	;# 
   794  0099                     	;# 
   795  009A                     	;# 
   796  009B                     	;# 
   797  009B                     	;# 
   798  009C                     	;# 
   799  009D                     	;# 
   800  009E                     	;# 
   801  010C                     	;# 
   802  010D                     	;# 
   803  010E                     	;# 
   804  0116                     	;# 
   805  0117                     	;# 
   806  011D                     	;# 
   807  018C                     	;# 
   808  018D                     	;# 
   809  018E                     	;# 
   810  0191                     	;# 
   811  0191                     	;# 
   812  0192                     	;# 
   813  0193                     	;# 
   814  0193                     	;# 
   815  0194                     	;# 
   816  0195                     	;# 
   817  0196                     	;# 
   818  0197                     	;# 
   819  0199                     	;# 
   820  019A                     	;# 
   821  019B                     	;# 
   822  019B                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019C                     	;# 
   826  019C                     	;# 
   827  019D                     	;# 
   828  019E                     	;# 
   829  019F                     	;# 
   830  020D                     	;# 
   831  0210                     	;# 
   832  0211                     	;# 
   833  0211                     	;# 
   834  0212                     	;# 
   835  0212                     	;# 
   836  0213                     	;# 
   837  0213                     	;# 
   838  0214                     	;# 
   839  0214                     	;# 
   840  0215                     	;# 
   841  0215                     	;# 
   842  0215                     	;# 
   843  0216                     	;# 
   844  0216                     	;# 
   845  0217                     	;# 
   846  0217                     	;# 
   847  0291                     	;# 
   848  0291                     	;# 
   849  0292                     	;# 
   850  0293                     	;# 
   851  0298                     	;# 
   852  0298                     	;# 
   853  0299                     	;# 
   854  029A                     	;# 
   855  0394                     	;# 
   856  0395                     	;# 
   857  0396                     	;# 
   858  0FE4                     	;# 
   859  0FE5                     	;# 
   860  0FE6                     	;# 
   861  0FE7                     	;# 
   862  0FE8                     	;# 
   863  0FE9                     	;# 
   864  0FEA                     	;# 
   865  0FEB                     	;# 
   866  0FED                     	;# 
   867  0FEE                     	;# 
   868  0FEF                     	;# 
   869  0000                     	;# 
   870  0001                     	;# 
   871  0002                     	;# 
   872  0003                     	;# 
   873  0004                     	;# 
   874  0005                     	;# 
   875  0006                     	;# 
   876  0007                     	;# 
   877  0008                     	;# 
   878  0009                     	;# 
   879  000A                     	;# 
   880  000B                     	;# 
   881  000C                     	;# 
   882  000D                     	;# 
   883  000E                     	;# 
   884  0010                     	;# 
   885  0011                     	;# 
   886  0012                     	;# 
   887  0015                     	;# 
   888  0016                     	;# 
   889  0016                     	;# 
   890  0017                     	;# 
   891  0018                     	;# 
   892  0019                     	;# 
   893  001A                     	;# 
   894  001B                     	;# 
   895  001C                     	;# 
   896  008C                     	;# 
   897  008D                     	;# 
   898  008E                     	;# 
   899  0090                     	;# 
   900  0091                     	;# 
   901  0092                     	;# 
   902  0095                     	;# 
   903  0096                     	;# 
   904  0097                     	;# 
   905  0099                     	;# 
   906  009A                     	;# 
   907  009B                     	;# 
   908  009B                     	;# 
   909  009C                     	;# 
   910  009D                     	;# 
   911  009E                     	;# 
   912  010C                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  0116                     	;# 
   916  0117                     	;# 
   917  011D                     	;# 
   918  018C                     	;# 
   919  018D                     	;# 
   920  018E                     	;# 
   921  0191                     	;# 
   922  0191                     	;# 
   923  0192                     	;# 
   924  0193                     	;# 
   925  0193                     	;# 
   926  0194                     	;# 
   927  0195                     	;# 
   928  0196                     	;# 
   929  0197                     	;# 
   930  0199                     	;# 
   931  019A                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019C                     	;# 
   937  019C                     	;# 
   938  019D                     	;# 
   939  019E                     	;# 
   940  019F                     	;# 
   941  020D                     	;# 
   942  0210                     	;# 
   943  0211                     	;# 
   944  0211                     	;# 
   945  0212                     	;# 
   946  0212                     	;# 
   947  0213                     	;# 
   948  0213                     	;# 
   949  0214                     	;# 
   950  0214                     	;# 
   951  0215                     	;# 
   952  0215                     	;# 
   953  0215                     	;# 
   954  0216                     	;# 
   955  0216                     	;# 
   956  0217                     	;# 
   957  0217                     	;# 
   958  0291                     	;# 
   959  0291                     	;# 
   960  0292                     	;# 
   961  0293                     	;# 
   962  0298                     	;# 
   963  0298                     	;# 
   964  0299                     	;# 
   965  029A                     	;# 
   966  0394                     	;# 
   967  0395                     	;# 
   968  0396                     	;# 
   969  0FE4                     	;# 
   970  0FE5                     	;# 
   971  0FE6                     	;# 
   972  0FE7                     	;# 
   973  0FE8                     	;# 
   974  0FE9                     	;# 
   975  0FEA                     	;# 
   976  0FEB                     	;# 
   977  0FED                     	;# 
   978  0FEE                     	;# 
   979  0FEF                     	;# 
   980  0000                     	;# 
   981  0001                     	;# 
   982  0002                     	;# 
   983  0003                     	;# 
   984  0004                     	;# 
   985  0005                     	;# 
   986  0006                     	;# 
   987  0007                     	;# 
   988  0008                     	;# 
   989  0009                     	;# 
   990  000A                     	;# 
   991  000B                     	;# 
   992  000C                     	;# 
   993  000D                     	;# 
   994  000E                     	;# 
   995  0010                     	;# 
   996  0011                     	;# 
   997  0012                     	;# 
   998  0015                     	;# 
   999  0016                     	;# 
  1000  0016                     	;# 
  1001  0017                     	;# 
  1002  0018                     	;# 
  1003  0019                     	;# 
  1004  001A                     	;# 
  1005  001B                     	;# 
  1006  001C                     	;# 
  1007  008C                     	;# 
  1008  008D                     	;# 
  1009  008E                     	;# 
  1010  0090                     	;# 
  1011  0091                     	;# 
  1012  0092                     	;# 
  1013  0095                     	;# 
  1014  0096                     	;# 
  1015  0097                     	;# 
  1016  0099                     	;# 
  1017  009A                     	;# 
  1018  009B                     	;# 
  1019  009B                     	;# 
  1020  009C                     	;# 
  1021  009D                     	;# 
  1022  009E                     	;# 
  1023  010C                     	;# 
  1024  010D                     	;# 
  1025  010E                     	;# 
  1026  0116                     	;# 
  1027  0117                     	;# 
  1028  011D                     	;# 
  1029  018C                     	;# 
  1030  018D                     	;# 
  1031  018E                     	;# 
  1032  0191                     	;# 
  1033  0191                     	;# 
  1034  0192                     	;# 
  1035  0193                     	;# 
  1036  0193                     	;# 
  1037  0194                     	;# 
  1038  0195                     	;# 
  1039  0196                     	;# 
  1040  0197                     	;# 
  1041  0199                     	;# 
  1042  019A                     	;# 
  1043  019B                     	;# 
  1044  019B                     	;# 
  1045  019B                     	;# 
  1046  019B                     	;# 
  1047  019C                     	;# 
  1048  019C                     	;# 
  1049  019D                     	;# 
  1050  019E                     	;# 
  1051  019F                     	;# 
  1052  020D                     	;# 
  1053  0210                     	;# 
  1054  0211                     	;# 
  1055  0211                     	;# 
  1056  0212                     	;# 
  1057  0212                     	;# 
  1058  0213                     	;# 
  1059  0213                     	;# 
  1060  0214                     	;# 
  1061  0214                     	;# 
  1062  0215                     	;# 
  1063  0215                     	;# 
  1064  0215                     	;# 
  1065  0216                     	;# 
  1066  0216                     	;# 
  1067  0217                     	;# 
  1068  0217                     	;# 
  1069  0291                     	;# 
  1070  0291                     	;# 
  1071  0292                     	;# 
  1072  0293                     	;# 
  1073  0298                     	;# 
  1074  0298                     	;# 
  1075  0299                     	;# 
  1076  029A                     	;# 
  1077  0394                     	;# 
  1078  0395                     	;# 
  1079  0396                     	;# 
  1080  0FE4                     	;# 
  1081  0FE5                     	;# 
  1082  0FE6                     	;# 
  1083  0FE7                     	;# 
  1084  0FE8                     	;# 
  1085  0FE9                     	;# 
  1086  0FEA                     	;# 
  1087  0FEB                     	;# 
  1088  0FED                     	;# 
  1089  0FEE                     	;# 
  1090  0FEF                     	;# 
  1091  0000                     	;# 
  1092  0001                     	;# 
  1093  0002                     	;# 
  1094  0003                     	;# 
  1095  0004                     	;# 
  1096  0005                     	;# 
  1097  0006                     	;# 
  1098  0007                     	;# 
  1099  0008                     	;# 
  1100  0009                     	;# 
  1101  000A                     	;# 
  1102  000B                     	;# 
  1103  000C                     	;# 
  1104  000D                     	;# 
  1105  000E                     	;# 
  1106  0010                     	;# 
  1107  0011                     	;# 
  1108  0012                     	;# 
  1109  0015                     	;# 
  1110  0016                     	;# 
  1111  0016                     	;# 
  1112  0017                     	;# 
  1113  0018                     	;# 
  1114  0019                     	;# 
  1115  001A                     	;# 
  1116  001B                     	;# 
  1117  001C                     	;# 
  1118  008C                     	;# 
  1119  008D                     	;# 
  1120  008E                     	;# 
  1121  0090                     	;# 
  1122  0091                     	;# 
  1123  0092                     	;# 
  1124  0095                     	;# 
  1125  0096                     	;# 
  1126  0097                     	;# 
  1127  0099                     	;# 
  1128  009A                     	;# 
  1129  009B                     	;# 
  1130  009B                     	;# 
  1131  009C                     	;# 
  1132  009D                     	;# 
  1133  009E                     	;# 
  1134  010C                     	;# 
  1135  010D                     	;# 
  1136  010E                     	;# 
  1137  0116                     	;# 
  1138  0117                     	;# 
  1139  011D                     	;# 
  1140  018C                     	;# 
  1141  018D                     	;# 
  1142  018E                     	;# 
  1143  0191                     	;# 
  1144  0191                     	;# 
  1145  0192                     	;# 
  1146  0193                     	;# 
  1147  0193                     	;# 
  1148  0194                     	;# 
  1149  0195                     	;# 
  1150  0196                     	;# 
  1151  0197                     	;# 
  1152  0199                     	;# 
  1153  019A                     	;# 
  1154  019B                     	;# 
  1155  019B                     	;# 
  1156  019B                     	;# 
  1157  019B                     	;# 
  1158  019C                     	;# 
  1159  019C                     	;# 
  1160  019D                     	;# 
  1161  019E                     	;# 
  1162  019F                     	;# 
  1163  020D                     	;# 
  1164  0210                     	;# 
  1165  0211                     	;# 
  1166  0211                     	;# 
  1167  0212                     	;# 
  1168  0212                     	;# 
  1169  0213                     	;# 
  1170  0213                     	;# 
  1171  0214                     	;# 
  1172  0214                     	;# 
  1173  0215                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0216                     	;# 
  1177  0216                     	;# 
  1178  0217                     	;# 
  1179  0217                     	;# 
  1180  0291                     	;# 
  1181  0291                     	;# 
  1182  0292                     	;# 
  1183  0293                     	;# 
  1184  0298                     	;# 
  1185  0298                     	;# 
  1186  0299                     	;# 
  1187  029A                     	;# 
  1188  0394                     	;# 
  1189  0395                     	;# 
  1190  0396                     	;# 
  1191  0FE4                     	;# 
  1192  0FE5                     	;# 
  1193  0FE6                     	;# 
  1194  0FE7                     	;# 
  1195  0FE8                     	;# 
  1196  0FE9                     	;# 
  1197  0FEA                     	;# 
  1198  0FEB                     	;# 
  1199  0FED                     	;# 
  1200  0FEE                     	;# 
  1201  0FEF                     	;# 
  1202  0000                     	;# 
  1203  0001                     	;# 
  1204  0002                     	;# 
  1205  0003                     	;# 
  1206  0004                     	;# 
  1207  0005                     	;# 
  1208  0006                     	;# 
  1209  0007                     	;# 
  1210  0008                     	;# 
  1211  0009                     	;# 
  1212  000A                     	;# 
  1213  000B                     	;# 
  1214  000C                     	;# 
  1215  000D                     	;# 
  1216  000E                     	;# 
  1217  0010                     	;# 
  1218  0011                     	;# 
  1219  0012                     	;# 
  1220  0015                     	;# 
  1221  0016                     	;# 
  1222  0016                     	;# 
  1223  0017                     	;# 
  1224  0018                     	;# 
  1225  0019                     	;# 
  1226  001A                     	;# 
  1227  001B                     	;# 
  1228  001C                     	;# 
  1229  008C                     	;# 
  1230  008D                     	;# 
  1231  008E                     	;# 
  1232  0090                     	;# 
  1233  0091                     	;# 
  1234  0092                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0097                     	;# 
  1238  0099                     	;# 
  1239  009A                     	;# 
  1240  009B                     	;# 
  1241  009B                     	;# 
  1242  009C                     	;# 
  1243  009D                     	;# 
  1244  009E                     	;# 
  1245  010C                     	;# 
  1246  010D                     	;# 
  1247  010E                     	;# 
  1248  0116                     	;# 
  1249  0117                     	;# 
  1250  011D                     	;# 
  1251  018C                     	;# 
  1252  018D                     	;# 
  1253  018E                     	;# 
  1254  0191                     	;# 
  1255  0191                     	;# 
  1256  0192                     	;# 
  1257  0193                     	;# 
  1258  0193                     	;# 
  1259  0194                     	;# 
  1260  0195                     	;# 
  1261  0196                     	;# 
  1262  0197                     	;# 
  1263  0199                     	;# 
  1264  019A                     	;# 
  1265  019B                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019B                     	;# 
  1269  019C                     	;# 
  1270  019C                     	;# 
  1271  019D                     	;# 
  1272  019E                     	;# 
  1273  019F                     	;# 
  1274  020D                     	;# 
  1275  0210                     	;# 
  1276  0211                     	;# 
  1277  0211                     	;# 
  1278  0212                     	;# 
  1279  0212                     	;# 
  1280  0213                     	;# 
  1281  0213                     	;# 
  1282  0214                     	;# 
  1283  0214                     	;# 
  1284  0215                     	;# 
  1285  0215                     	;# 
  1286  0215                     	;# 
  1287  0216                     	;# 
  1288  0216                     	;# 
  1289  0217                     	;# 
  1290  0217                     	;# 
  1291  0291                     	;# 
  1292  0291                     	;# 
  1293  0292                     	;# 
  1294  0293                     	;# 
  1295  0298                     	;# 
  1296  0298                     	;# 
  1297  0299                     	;# 
  1298  029A                     	;# 
  1299  0394                     	;# 
  1300  0395                     	;# 
  1301  0396                     	;# 
  1302  0FE4                     	;# 
  1303  0FE5                     	;# 
  1304  0FE6                     	;# 
  1305  0FE7                     	;# 
  1306  0FE8                     	;# 
  1307  0FE9                     	;# 
  1308  0FEA                     	;# 
  1309  0FEB                     	;# 
  1310  0FED                     	;# 
  1311  0FEE                     	;# 
  1312  0FEF                     	;# 
  1313  0000                     	;# 
  1314  0001                     	;# 
  1315  0002                     	;# 
  1316  0003                     	;# 
  1317  0004                     	;# 
  1318  0005                     	;# 
  1319  0006                     	;# 
  1320  0007                     	;# 
  1321  0008                     	;# 
  1322  0009                     	;# 
  1323  000A                     	;# 
  1324  000B                     	;# 
  1325  000C                     	;# 
  1326  000D                     	;# 
  1327  000E                     	;# 
  1328  0010                     	;# 
  1329  0011                     	;# 
  1330  0012                     	;# 
  1331  0015                     	;# 
  1332  0016                     	;# 
  1333  0016                     	;# 
  1334  0017                     	;# 
  1335  0018                     	;# 
  1336  0019                     	;# 
  1337  001A                     	;# 
  1338  001B                     	;# 
  1339  001C                     	;# 
  1340  008C                     	;# 
  1341  008D                     	;# 
  1342  008E                     	;# 
  1343  0090                     	;# 
  1344  0091                     	;# 
  1345  0092                     	;# 
  1346  0095                     	;# 
  1347  0096                     	;# 
  1348  0097                     	;# 
  1349  0099                     	;# 
  1350  009A                     	;# 
  1351  009B                     	;# 
  1352  009B                     	;# 
  1353  009C                     	;# 
  1354  009D                     	;# 
  1355  009E                     	;# 
  1356  010C                     	;# 
  1357  010D                     	;# 
  1358  010E                     	;# 
  1359  0116                     	;# 
  1360  0117                     	;# 
  1361  011D                     	;# 
  1362  018C                     	;# 
  1363  018D                     	;# 
  1364  018E                     	;# 
  1365  0191                     	;# 
  1366  0191                     	;# 
  1367  0192                     	;# 
  1368  0193                     	;# 
  1369  0193                     	;# 
  1370  0194                     	;# 
  1371  0195                     	;# 
  1372  0196                     	;# 
  1373  0197                     	;# 
  1374  0199                     	;# 
  1375  019A                     	;# 
  1376  019B                     	;# 
  1377  019B                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019C                     	;# 
  1381  019C                     	;# 
  1382  019D                     	;# 
  1383  019E                     	;# 
  1384  019F                     	;# 
  1385  020D                     	;# 
  1386  0210                     	;# 
  1387  0211                     	;# 
  1388  0211                     	;# 
  1389  0212                     	;# 
  1390  0212                     	;# 
  1391  0213                     	;# 
  1392  0213                     	;# 
  1393  0214                     	;# 
  1394  0214                     	;# 
  1395  0215                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0216                     	;# 
  1399  0216                     	;# 
  1400  0217                     	;# 
  1401  0217                     	;# 
  1402  0291                     	;# 
  1403  0291                     	;# 
  1404  0292                     	;# 
  1405  0293                     	;# 
  1406  0298                     	;# 
  1407  0298                     	;# 
  1408  0299                     	;# 
  1409  029A                     	;# 
  1410  0394                     	;# 
  1411  0395                     	;# 
  1412  0396                     	;# 
  1413  0FE4                     	;# 
  1414  0FE5                     	;# 
  1415  0FE6                     	;# 
  1416  0FE7                     	;# 
  1417  0FE8                     	;# 
  1418  0FE9                     	;# 
  1419  0FEA                     	;# 
  1420  0FEB                     	;# 
  1421  0FED                     	;# 
  1422  0FEE                     	;# 
  1423  0FEF                     	;# 
  1424  0000                     	;# 
  1425  0001                     	;# 
  1426  0002                     	;# 
  1427  0003                     	;# 
  1428  0004                     	;# 
  1429  0005                     	;# 
  1430  0006                     	;# 
  1431  0007                     	;# 
  1432  0008                     	;# 
  1433  0009                     	;# 
  1434  000A                     	;# 
  1435  000B                     	;# 
  1436  000C                     	;# 
  1437  000D                     	;# 
  1438  000E                     	;# 
  1439  0010                     	;# 
  1440  0011                     	;# 
  1441  0012                     	;# 
  1442  0015                     	;# 
  1443  0016                     	;# 
  1444  0016                     	;# 
  1445  0017                     	;# 
  1446  0018                     	;# 
  1447  0019                     	;# 
  1448  001A                     	;# 
  1449  001B                     	;# 
  1450  001C                     	;# 
  1451  008C                     	;# 
  1452  008D                     	;# 
  1453  008E                     	;# 
  1454  0090                     	;# 
  1455  0091                     	;# 
  1456  0092                     	;# 
  1457  0095                     	;# 
  1458  0096                     	;# 
  1459  0097                     	;# 
  1460  0099                     	;# 
  1461  009A                     	;# 
  1462  009B                     	;# 
  1463  009B                     	;# 
  1464  009C                     	;# 
  1465  009D                     	;# 
  1466  009E                     	;# 
  1467  010C                     	;# 
  1468  010D                     	;# 
  1469  010E                     	;# 
  1470  0116                     	;# 
  1471  0117                     	;# 
  1472  011D                     	;# 
  1473  018C                     	;# 
  1474  018D                     	;# 
  1475  018E                     	;# 
  1476  0191                     	;# 
  1477  0191                     	;# 
  1478  0192                     	;# 
  1479  0193                     	;# 
  1480  0193                     	;# 
  1481  0194                     	;# 
  1482  0195                     	;# 
  1483  0196                     	;# 
  1484  0197                     	;# 
  1485  0199                     	;# 
  1486  019A                     	;# 
  1487  019B                     	;# 
  1488  019B                     	;# 
  1489  019B                     	;# 
  1490  019B                     	;# 
  1491  019C                     	;# 
  1492  019C                     	;# 
  1493  019D                     	;# 
  1494  019E                     	;# 
  1495  019F                     	;# 
  1496  020D                     	;# 
  1497  0210                     	;# 
  1498  0211                     	;# 
  1499  0211                     	;# 
  1500  0212                     	;# 
  1501  0212                     	;# 
  1502  0213                     	;# 
  1503  0213                     	;# 
  1504  0214                     	;# 
  1505  0214                     	;# 
  1506  0215                     	;# 
  1507  0215                     	;# 
  1508  0215                     	;# 
  1509  0216                     	;# 
  1510  0216                     	;# 
  1511  0217                     	;# 
  1512  0217                     	;# 
  1513  0291                     	;# 
  1514  0291                     	;# 
  1515  0292                     	;# 
  1516  0293                     	;# 
  1517  0298                     	;# 
  1518  0298                     	;# 
  1519  0299                     	;# 
  1520  029A                     	;# 
  1521  0394                     	;# 
  1522  0395                     	;# 
  1523  0396                     	;# 
  1524  0FE4                     	;# 
  1525  0FE5                     	;# 
  1526  0FE6                     	;# 
  1527  0FE7                     	;# 
  1528  0FE8                     	;# 
  1529  0FE9                     	;# 
  1530  0FEA                     	;# 
  1531  0FEB                     	;# 
  1532  0FED                     	;# 
  1533  0FEE                     	;# 
  1534  0FEF                     	;# 
  1535  0000                     	;# 
  1536  0001                     	;# 
  1537  0002                     	;# 
  1538  0003                     	;# 
  1539  0004                     	;# 
  1540  0005                     	;# 
  1541  0006                     	;# 
  1542  0007                     	;# 
  1543  0008                     	;# 
  1544  0009                     	;# 
  1545  000A                     	;# 
  1546  000B                     	;# 
  1547  000C                     	;# 
  1548  000D                     	;# 
  1549  000E                     	;# 
  1550  0010                     	;# 
  1551  0011                     	;# 
  1552  0012                     	;# 
  1553  0015                     	;# 
  1554  0016                     	;# 
  1555  0016                     	;# 
  1556  0017                     	;# 
  1557  0018                     	;# 
  1558  0019                     	;# 
  1559  001A                     	;# 
  1560  001B                     	;# 
  1561  001C                     	;# 
  1562  008C                     	;# 
  1563  008D                     	;# 
  1564  008E                     	;# 
  1565  0090                     	;# 
  1566  0091                     	;# 
  1567  0092                     	;# 
  1568  0095                     	;# 
  1569  0096                     	;# 
  1570  0097                     	;# 
  1571  0099                     	;# 
  1572  009A                     	;# 
  1573  009B                     	;# 
  1574  009B                     	;# 
  1575  009C                     	;# 
  1576  009D                     	;# 
  1577  009E                     	;# 
  1578  010C                     	;# 
  1579  010D                     	;# 
  1580  010E                     	;# 
  1581  0116                     	;# 
  1582  0117                     	;# 
  1583  011D                     	;# 
  1584  018C                     	;# 
  1585  018D                     	;# 
  1586  018E                     	;# 
  1587  0191                     	;# 
  1588  0191                     	;# 
  1589  0192                     	;# 
  1590  0193                     	;# 
  1591  0193                     	;# 
  1592  0194                     	;# 
  1593  0195                     	;# 
  1594  0196                     	;# 
  1595  0197                     	;# 
  1596  0199                     	;# 
  1597  019A                     	;# 
  1598  019B                     	;# 
  1599  019B                     	;# 
  1600  019B                     	;# 
  1601  019B                     	;# 
  1602  019C                     	;# 
  1603  019C                     	;# 
  1604  019D                     	;# 
  1605  019E                     	;# 
  1606  019F                     	;# 
  1607  020D                     	;# 
  1608  0210                     	;# 
  1609  0211                     	;# 
  1610  0211                     	;# 
  1611  0212                     	;# 
  1612  0212                     	;# 
  1613  0213                     	;# 
  1614  0213                     	;# 
  1615  0214                     	;# 
  1616  0214                     	;# 
  1617  0215                     	;# 
  1618  0215                     	;# 
  1619  0215                     	;# 
  1620  0216                     	;# 
  1621  0216                     	;# 
  1622  0217                     	;# 
  1623  0217                     	;# 
  1624  0291                     	;# 
  1625  0291                     	;# 
  1626  0292                     	;# 
  1627  0293                     	;# 
  1628  0298                     	;# 
  1629  0298                     	;# 
  1630  0299                     	;# 
  1631  029A                     	;# 
  1632  0394                     	;# 
  1633  0395                     	;# 
  1634  0396                     	;# 
  1635  0FE4                     	;# 
  1636  0FE5                     	;# 
  1637  0FE6                     	;# 
  1638  0FE7                     	;# 
  1639  0FE8                     	;# 
  1640  0FE9                     	;# 
  1641  0FEA                     	;# 
  1642  0FEB                     	;# 
  1643  0FED                     	;# 
  1644  0FEE                     	;# 
  1645  0FEF                     	;# 
  1646  0000                     	;# 
  1647  0001                     	;# 
  1648  0002                     	;# 
  1649  0003                     	;# 
  1650  0004                     	;# 
  1651  0005                     	;# 
  1652  0006                     	;# 
  1653  0007                     	;# 
  1654  0008                     	;# 
  1655  0009                     	;# 
  1656  000A                     	;# 
  1657  000B                     	;# 
  1658  000C                     	;# 
  1659  000D                     	;# 
  1660  000E                     	;# 
  1661  0010                     	;# 
  1662  0011                     	;# 
  1663  0012                     	;# 
  1664  0015                     	;# 
  1665  0016                     	;# 
  1666  0016                     	;# 
  1667  0017                     	;# 
  1668  0018                     	;# 
  1669  0019                     	;# 
  1670  001A                     	;# 
  1671  001B                     	;# 
  1672  001C                     	;# 
  1673  008C                     	;# 
  1674  008D                     	;# 
  1675  008E                     	;# 
  1676  0090                     	;# 
  1677  0091                     	;# 
  1678  0092                     	;# 
  1679  0095                     	;# 
  1680  0096                     	;# 
  1681  0097                     	;# 
  1682  0099                     	;# 
  1683  009A                     	;# 
  1684  009B                     	;# 
  1685  009B                     	;# 
  1686  009C                     	;# 
  1687  009D                     	;# 
  1688  009E                     	;# 
  1689  010C                     	;# 
  1690  010D                     	;# 
  1691  010E                     	;# 
  1692  0116                     	;# 
  1693  0117                     	;# 
  1694  011D                     	;# 
  1695  018C                     	;# 
  1696  018D                     	;# 
  1697  018E                     	;# 
  1698  0191                     	;# 
  1699  0191                     	;# 
  1700  0192                     	;# 
  1701  0193                     	;# 
  1702  0193                     	;# 
  1703  0194                     	;# 
  1704  0195                     	;# 
  1705  0196                     	;# 
  1706  0197                     	;# 
  1707  0199                     	;# 
  1708  019A                     	;# 
  1709  019B                     	;# 
  1710  019B                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019C                     	;# 
  1714  019C                     	;# 
  1715  019D                     	;# 
  1716  019E                     	;# 
  1717  019F                     	;# 
  1718  020D                     	;# 
  1719  0210                     	;# 
  1720  0211                     	;# 
  1721  0211                     	;# 
  1722  0212                     	;# 
  1723  0212                     	;# 
  1724  0213                     	;# 
  1725  0213                     	;# 
  1726  0214                     	;# 
  1727  0214                     	;# 
  1728  0215                     	;# 
  1729  0215                     	;# 
  1730  0215                     	;# 
  1731  0216                     	;# 
  1732  0216                     	;# 
  1733  0217                     	;# 
  1734  0217                     	;# 
  1735  0291                     	;# 
  1736  0291                     	;# 
  1737  0292                     	;# 
  1738  0293                     	;# 
  1739  0298                     	;# 
  1740  0298                     	;# 
  1741  0299                     	;# 
  1742  029A                     	;# 
  1743  0394                     	;# 
  1744  0395                     	;# 
  1745  0396                     	;# 
  1746  0FE4                     	;# 
  1747  0FE5                     	;# 
  1748  0FE6                     	;# 
  1749  0FE7                     	;# 
  1750  0FE8                     	;# 
  1751  0FE9                     	;# 
  1752  0FEA                     	;# 
  1753  0FEB                     	;# 
  1754  0FED                     	;# 
  1755  0FEE                     	;# 
  1756  0FEF                     	;# 
  1757  0000                     	;# 
  1758  0001                     	;# 
  1759  0002                     	;# 
  1760  0003                     	;# 
  1761  0004                     	;# 
  1762  0005                     	;# 
  1763  0006                     	;# 
  1764  0007                     	;# 
  1765  0008                     	;# 
  1766  0009                     	;# 
  1767  000A                     	;# 
  1768  000B                     	;# 
  1769  000C                     	;# 
  1770  000D                     	;# 
  1771  000E                     	;# 
  1772  0010                     	;# 
  1773  0011                     	;# 
  1774  0012                     	;# 
  1775  0015                     	;# 
  1776  0016                     	;# 
  1777  0016                     	;# 
  1778  0017                     	;# 
  1779  0018                     	;# 
  1780  0019                     	;# 
  1781  001A                     	;# 
  1782  001B                     	;# 
  1783  001C                     	;# 
  1784  008C                     	;# 
  1785  008D                     	;# 
  1786  008E                     	;# 
  1787  0090                     	;# 
  1788  0091                     	;# 
  1789  0092                     	;# 
  1790  0095                     	;# 
  1791  0096                     	;# 
  1792  0097                     	;# 
  1793  0099                     	;# 
  1794  009A                     	;# 
  1795  009B                     	;# 
  1796  009B                     	;# 
  1797  009C                     	;# 
  1798  009D                     	;# 
  1799  009E                     	;# 
  1800  010C                     	;# 
  1801  010D                     	;# 
  1802  010E                     	;# 
  1803  0116                     	;# 
  1804  0117                     	;# 
  1805  011D                     	;# 
  1806  018C                     	;# 
  1807  018D                     	;# 
  1808  018E                     	;# 
  1809  0191                     	;# 
  1810  0191                     	;# 
  1811  0192                     	;# 
  1812  0193                     	;# 
  1813  0193                     	;# 
  1814  0194                     	;# 
  1815  0195                     	;# 
  1816  0196                     	;# 
  1817  0197                     	;# 
  1818  0199                     	;# 
  1819  019A                     	;# 
  1820  019B                     	;# 
  1821  019B                     	;# 
  1822  019B                     	;# 
  1823  019B                     	;# 
  1824  019C                     	;# 
  1825  019C                     	;# 
  1826  019D                     	;# 
  1827  019E                     	;# 
  1828  019F                     	;# 
  1829  020D                     	;# 
  1830  0210                     	;# 
  1831  0211                     	;# 
  1832  0211                     	;# 
  1833  0212                     	;# 
  1834  0212                     	;# 
  1835  0213                     	;# 
  1836  0213                     	;# 
  1837  0214                     	;# 
  1838  0214                     	;# 
  1839  0215                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0216                     	;# 
  1843  0216                     	;# 
  1844  0217                     	;# 
  1845  0217                     	;# 
  1846  0291                     	;# 
  1847  0291                     	;# 
  1848  0292                     	;# 
  1849  0293                     	;# 
  1850  0298                     	;# 
  1851  0298                     	;# 
  1852  0299                     	;# 
  1853  029A                     	;# 
  1854  0394                     	;# 
  1855  0395                     	;# 
  1856  0396                     	;# 
  1857  0FE4                     	;# 
  1858  0FE5                     	;# 
  1859  0FE6                     	;# 
  1860  0FE7                     	;# 
  1861  0FE8                     	;# 
  1862  0FE9                     	;# 
  1863  0FEA                     	;# 
  1864  0FEB                     	;# 
  1865  0FED                     	;# 
  1866  0FEE                     	;# 
  1867  0FEF                     	;# 
  1868  0000                     	;# 
  1869  0001                     	;# 
  1870  0002                     	;# 
  1871  0003                     	;# 
  1872  0004                     	;# 
  1873  0005                     	;# 
  1874  0006                     	;# 
  1875  0007                     	;# 
  1876  0008                     	;# 
  1877  0009                     	;# 
  1878  000A                     	;# 
  1879  000B                     	;# 
  1880  000C                     	;# 
  1881  000D                     	;# 
  1882  000E                     	;# 
  1883  0010                     	;# 
  1884  0011                     	;# 
  1885  0012                     	;# 
  1886  0015                     	;# 
  1887  0016                     	;# 
  1888  0016                     	;# 
  1889  0017                     	;# 
  1890  0018                     	;# 
  1891  0019                     	;# 
  1892  001A                     	;# 
  1893  001B                     	;# 
  1894  001C                     	;# 
  1895  008C                     	;# 
  1896  008D                     	;# 
  1897  008E                     	;# 
  1898  0090                     	;# 
  1899  0091                     	;# 
  1900  0092                     	;# 
  1901  0095                     	;# 
  1902  0096                     	;# 
  1903  0097                     	;# 
  1904  0099                     	;# 
  1905  009A                     	;# 
  1906  009B                     	;# 
  1907  009B                     	;# 
  1908  009C                     	;# 
  1909  009D                     	;# 
  1910  009E                     	;# 
  1911  010C                     	;# 
  1912  010D                     	;# 
  1913  010E                     	;# 
  1914  0116                     	;# 
  1915  0117                     	;# 
  1916  011D                     	;# 
  1917  018C                     	;# 
  1918  018D                     	;# 
  1919  018E                     	;# 
  1920  0191                     	;# 
  1921  0191                     	;# 
  1922  0192                     	;# 
  1923  0193                     	;# 
  1924  0193                     	;# 
  1925  0194                     	;# 
  1926  0195                     	;# 
  1927  0196                     	;# 
  1928  0197                     	;# 
  1929  0199                     	;# 
  1930  019A                     	;# 
  1931  019B                     	;# 
  1932  019B                     	;# 
  1933  019B                     	;# 
  1934  019B                     	;# 
  1935  019C                     	;# 
  1936  019C                     	;# 
  1937  019D                     	;# 
  1938  019E                     	;# 
  1939  019F                     	;# 
  1940  020D                     	;# 
  1941  0210                     	;# 
  1942  0211                     	;# 
  1943  0211                     	;# 
  1944  0212                     	;# 
  1945  0212                     	;# 
  1946  0213                     	;# 
  1947  0213                     	;# 
  1948  0214                     	;# 
  1949  0214                     	;# 
  1950  0215                     	;# 
  1951  0215                     	;# 
  1952  0215                     	;# 
  1953  0216                     	;# 
  1954  0216                     	;# 
  1955  0217                     	;# 
  1956  0217                     	;# 
  1957  0291                     	;# 
  1958  0291                     	;# 
  1959  0292                     	;# 
  1960  0293                     	;# 
  1961  0298                     	;# 
  1962  0298                     	;# 
  1963  0299                     	;# 
  1964  029A                     	;# 
  1965  0394                     	;# 
  1966  0395                     	;# 
  1967  0396                     	;# 
  1968  0FE4                     	;# 
  1969  0FE5                     	;# 
  1970  0FE6                     	;# 
  1971  0FE7                     	;# 
  1972  0FE8                     	;# 
  1973  0FE9                     	;# 
  1974  0FEA                     	;# 
  1975  0FEB                     	;# 
  1976  0FED                     	;# 
  1977  0FEE                     	;# 
  1978  0FEF                     	;# 
  1979  0000                     	;# 
  1980  0001                     	;# 
  1981  0002                     	;# 
  1982  0003                     	;# 
  1983  0004                     	;# 
  1984  0005                     	;# 
  1985  0006                     	;# 
  1986  0007                     	;# 
  1987  0008                     	;# 
  1988  0009                     	;# 
  1989  000A                     	;# 
  1990  000B                     	;# 
  1991  000C                     	;# 
  1992  000D                     	;# 
  1993  000E                     	;# 
  1994  0010                     	;# 
  1995  0011                     	;# 
  1996  0012                     	;# 
  1997  0015                     	;# 
  1998  0016                     	;# 
  1999  0016                     	;# 
  2000  0017                     	;# 
  2001  0018                     	;# 
  2002  0019                     	;# 
  2003  001A                     	;# 
  2004  001B                     	;# 
  2005  001C                     	;# 
  2006  008C                     	;# 
  2007  008D                     	;# 
  2008  008E                     	;# 
  2009  0090                     	;# 
  2010  0091                     	;# 
  2011  0092                     	;# 
  2012  0095                     	;# 
  2013  0096                     	;# 
  2014  0097                     	;# 
  2015  0099                     	;# 
  2016  009A                     	;# 
  2017  009B                     	;# 
  2018  009B                     	;# 
  2019  009C                     	;# 
  2020  009D                     	;# 
  2021  009E                     	;# 
  2022  010C                     	;# 
  2023  010D                     	;# 
  2024  010E                     	;# 
  2025  0116                     	;# 
  2026  0117                     	;# 
  2027  011D                     	;# 
  2028  018C                     	;# 
  2029  018D                     	;# 
  2030  018E                     	;# 
  2031  0191                     	;# 
  2032  0191                     	;# 
  2033  0192                     	;# 
  2034  0193                     	;# 
  2035  0193                     	;# 
  2036  0194                     	;# 
  2037  0195                     	;# 
  2038  0196                     	;# 
  2039  0197                     	;# 
  2040  0199                     	;# 
  2041  019A                     	;# 
  2042  019B                     	;# 
  2043  019B                     	;# 
  2044  019B                     	;# 
  2045  019B                     	;# 
  2046  019C                     	;# 
  2047  019C                     	;# 
  2048  019D                     	;# 
  2049  019E                     	;# 
  2050  019F                     	;# 
  2051  020D                     	;# 
  2052  0210                     	;# 
  2053  0211                     	;# 
  2054  0211                     	;# 
  2055  0212                     	;# 
  2056  0212                     	;# 
  2057  0213                     	;# 
  2058  0213                     	;# 
  2059  0214                     	;# 
  2060  0214                     	;# 
  2061  0215                     	;# 
  2062  0215                     	;# 
  2063  0215                     	;# 
  2064  0216                     	;# 
  2065  0216                     	;# 
  2066  0217                     	;# 
  2067  0217                     	;# 
  2068  0291                     	;# 
  2069  0291                     	;# 
  2070  0292                     	;# 
  2071  0293                     	;# 
  2072  0298                     	;# 
  2073  0298                     	;# 
  2074  0299                     	;# 
  2075  029A                     	;# 
  2076  0394                     	;# 
  2077  0395                     	;# 
  2078  0396                     	;# 
  2079  0FE4                     	;# 
  2080  0FE5                     	;# 
  2081  0FE6                     	;# 
  2082  0FE7                     	;# 
  2083  0FE8                     	;# 
  2084  0FE9                     	;# 
  2085  0FEA                     	;# 
  2086  0FEB                     	;# 
  2087  0FED                     	;# 
  2088  0FEE                     	;# 
  2089  0FEF                     	;# 
  2090  0000                     	;# 
  2091  0001                     	;# 
  2092  0002                     	;# 
  2093  0003                     	;# 
  2094  0004                     	;# 
  2095  0005                     	;# 
  2096  0006                     	;# 
  2097  0007                     	;# 
  2098  0008                     	;# 
  2099  0009                     	;# 
  2100  000A                     	;# 
  2101  000B                     	;# 
  2102  000C                     	;# 
  2103  000D                     	;# 
  2104  000E                     	;# 
  2105  0010                     	;# 
  2106  0011                     	;# 
  2107  0012                     	;# 
  2108  0015                     	;# 
  2109  0016                     	;# 
  2110  0016                     	;# 
  2111  0017                     	;# 
  2112  0018                     	;# 
  2113  0019                     	;# 
  2114  001A                     	;# 
  2115  001B                     	;# 
  2116  001C                     	;# 
  2117  008C                     	;# 
  2118  008D                     	;# 
  2119  008E                     	;# 
  2120  0090                     	;# 
  2121  0091                     	;# 
  2122  0092                     	;# 
  2123  0095                     	;# 
  2124  0096                     	;# 
  2125  0097                     	;# 
  2126  0099                     	;# 
  2127  009A                     	;# 
  2128  009B                     	;# 
  2129  009B                     	;# 
  2130  009C                     	;# 
  2131  009D                     	;# 
  2132  009E                     	;# 
  2133  010C                     	;# 
  2134  010D                     	;# 
  2135  010E                     	;# 
  2136  0116                     	;# 
  2137  0117                     	;# 
  2138  011D                     	;# 
  2139  018C                     	;# 
  2140  018D                     	;# 
  2141  018E                     	;# 
  2142  0191                     	;# 
  2143  0191                     	;# 
  2144  0192                     	;# 
  2145  0193                     	;# 
  2146  0193                     	;# 
  2147  0194                     	;# 
  2148  0195                     	;# 
  2149  0196                     	;# 
  2150  0197                     	;# 
  2151  0199                     	;# 
  2152  019A                     	;# 
  2153  019B                     	;# 
  2154  019B                     	;# 
  2155  019B                     	;# 
  2156  019B                     	;# 
  2157  019C                     	;# 
  2158  019C                     	;# 
  2159  019D                     	;# 
  2160  019E                     	;# 
  2161  019F                     	;# 
  2162  020D                     	;# 
  2163  0210                     	;# 
  2164  0211                     	;# 
  2165  0211                     	;# 
  2166  0212                     	;# 
  2167  0212                     	;# 
  2168  0213                     	;# 
  2169  0213                     	;# 
  2170  0214                     	;# 
  2171  0214                     	;# 
  2172  0215                     	;# 
  2173  0215                     	;# 
  2174  0215                     	;# 
  2175  0216                     	;# 
  2176  0216                     	;# 
  2177  0217                     	;# 
  2178  0217                     	;# 
  2179  0291                     	;# 
  2180  0291                     	;# 
  2181  0292                     	;# 
  2182  0293                     	;# 
  2183  0298                     	;# 
  2184  0298                     	;# 
  2185  0299                     	;# 
  2186  029A                     	;# 
  2187  0394                     	;# 
  2188  0395                     	;# 
  2189  0396                     	;# 
  2190  0FE4                     	;# 
  2191  0FE5                     	;# 
  2192  0FE6                     	;# 
  2193  0FE7                     	;# 
  2194  0FE8                     	;# 
  2195  0FE9                     	;# 
  2196  0FEA                     	;# 
  2197  0FEB                     	;# 
  2198  0FED                     	;# 
  2199  0FEE                     	;# 
  2200  0FEF                     	;# 
  2201                           
  2202                           	psect	idataBANK2
  2203  14BC                     __pidataBANK2:	
  2204                           
  2205                           ;initializer for Bq32k_Time_Init@F2027
  2206  14BC  3401               	retlw	1
  2207  14BD  3444               	retlw	68
  2208  14BE  3410               	retlw	16
  2209  14BF  3402               	retlw	2
  2210  14C0  3418               	retlw	24
  2211  14C1  3407               	retlw	7
  2212  14C2  3416               	retlw	22
  2213  14C3  3400               	retlw	0
  2214  14C4  3400               	retlw	0
  2215  14C5  3400               	retlw	0
  2216                           
  2217                           	psect	stringtext
  2218  1800                     __pstringtext:	
  2219  1800                     _Dis_TAB:	
  2220  1800  34D7               	retlw	215
  2221  1801  3450               	retlw	80
  2222  1802  34B5               	retlw	181
  2223  1803  34F1               	retlw	241
  2224  1804  3472               	retlw	114
  2225  1805  34E3               	retlw	227
  2226  1806  34E7               	retlw	231
  2227  1807  3451               	retlw	81
  2228  1808  34F7               	retlw	247
  2229  1809  34F3               	retlw	243
  2230  180A  3477               	retlw	119
  2231  180B  34E6               	retlw	230
  2232  180C  3487               	retlw	135
  2233  180D  34F4               	retlw	244
  2234  180E  34A7               	retlw	167
  2235  180F  3427               	retlw	39
  2236  1810  3457               	retlw	87
  2237  1811  3420               	retlw	32
  2238  1812  3420               	retlw	32
  2239  1813  3420               	retlw	32
  2240  1814  3420               	retlw	32
  2241  1815                     __end_of_Dis_TAB:	
  2242                           
  2243                           	psect	nvBANK1
  2244  00EB                     __pnvBANK1:	
  2245  00EB                     _eusartTxBufferRemaining:	
  2246  00EB                     	ds	1
  2247  00EC                     _timer0ReloadVal:	
  2248  00EC                     	ds	1
  2249  000B                     _INTCONbits	set	11
  2250  0011                     _PIR1bits	set	17
  2251  0015                     _TMR0	set	21
  2252  0067                     _RA7	set	103
  2253  0069                     _RB1	set	105
  2254  006B                     _RB3	set	107
  2255  006D                     _RB5	set	109
  2256  009D                     _ADCON0	set	157
  2257  009D                     _ADCON0bits	set	157
  2258  009E                     _ADCON1	set	158
  2259  009C                     _ADRESH	set	156
  2260  009B                     _ADRESL	set	155
  2261  0095                     _OPTION_REG	set	149
  2262  0095                     _OPTION_REGbits	set	149
  2263  0099                     _OSCCON	set	153
  2264  009A                     _OSCSTAT	set	154
  2265  0091                     _PIE1bits	set	145
  2266  008C                     _TRISA	set	140
  2267  008D                     _TRISB	set	141
  2268  008E                     _TRISC	set	142
  2269  04B8                     _SWDTEN	set	1208
  2270  0469                     _TRISB1	set	1129
  2271  046B                     _TRISB3	set	1131
  2272  04B9                     _WDTPS0	set	1209
  2273  04BA                     _WDTPS1	set	1210
  2274  04BB                     _WDTPS2	set	1211
  2275  04BC                     _WDTPS3	set	1212
  2276  04BD                     _WDTPS4	set	1213
  2277  011D                     _APFCON	set	285
  2278  0117                     _FVRCON	set	279
  2279  0117                     _FVRCONbits	set	279
  2280  010C                     _LATA	set	268
  2281  010D                     _LATB	set	269
  2282  010E                     _LATC	set	270
  2283  0860                     _LATA0	set	2144
  2284  0861                     _LATA1	set	2145
  2285  0862                     _LATA2	set	2146
  2286  0863                     _LATA3	set	2147
  2287  0864                     _LATA4	set	2148
  2288  0865                     _LATA5	set	2149
  2289  0866                     _LATA6	set	2150
  2290  0868                     _LATB0	set	2152
  2291  0869                     _LATB1	set	2153
  2292  0870                     _LATC0	set	2160
  2293  0871                     _LATC1	set	2161
  2294  0872                     _LATC2	set	2162
  2295  018C                     _ANSELA	set	396
  2296  018D                     _ANSELB	set	397
  2297  018E                     _ANSELC	set	398
  2298  019F                     _BAUDCON	set	415
  2299  0192                     _PMADRH	set	402
  2300  0191                     _PMADRL	set	401
  2301  0195                     _PMCON1bits	set	405
  2302  0196                     _PMCON2	set	406
  2303  0194                     _PMDATH	set	404
  2304  0193                     _PMDATL	set	403
  2305  0199                     _RCREG	set	409
  2306  019D                     _RCSTA	set	413
  2307  019D                     _RCSTAbits	set	413
  2308  019C                     _SPBRGH	set	412
  2309  019B                     _SPBRGL	set	411
  2310  019A                     _TXREG	set	410
  2311  019E                     _TXSTA	set	414
  2312  0212                     _SSP1ADD	set	530
  2313  0215                     _SSP1CON1	set	533
  2314  0215                     _SSP1CON1bits	set	533
  2315  0214                     _SSP1STAT	set	532
  2316  0214                     _SSP1STATbits	set	532
  2317  0211                     _SSPBUF	set	529
  2318  020D                     _WPUB	set	525
  2319  0210                     _WPUE	set	528
  2320                           
  2321                           ; #config settings
  2322  0000                     
  2323                           	psect	cinit
  2324  0029                     start_initialization:	
  2325  0029                     __initialization:	
  2326                           
  2327                           ; Clear objects allocated to BANK0
  2328  0029  01EE               	clrf	__pbssBANK0& (0+127)
  2329                           
  2330                           ; Clear objects allocated to BANK1
  2331  002A  30A0               	movlw	low __pbssBANK1
  2332  002B  0084               	movwf	4
  2333  002C  3000               	movlw	high __pbssBANK1
  2334  002D  0085               	movwf	5
  2335  002E  304B               	movlw	75
  2336  002F  3194  24A5  3180   	fcall	clear_ram0
  2337                           
  2338                           ; Clear objects allocated to BANK2
  2339  0032  3020               	movlw	low __pbssBANK2
  2340  0033  0084               	movwf	4
  2341  0034  3001               	movlw	high __pbssBANK2
  2342  0035  0085               	movwf	5
  2343  0036  303C               	movlw	60
  2344  0037  3194  24A5  3180   	fcall	clear_ram0
  2345                           
  2346                           ; Clear objects allocated to BANK3
  2347  003A  30A0               	movlw	low __pbssBANK3
  2348  003B  0084               	movwf	4
  2349  003C  3001               	movlw	high __pbssBANK3
  2350  003D  0085               	movwf	5
  2351  003E  3040               	movlw	64
  2352  003F  3194  24A5  3180   	fcall	clear_ram0
  2353                           
  2354                           ; Initialize objects allocated to BANK2
  2355  0042  30BC               	movlw	low __pidataBANK2
  2356  0043  0084               	movwf	4
  2357  0044  3094               	movlw	(high __pidataBANK2)| (0+128)
  2358  0045  0085               	movwf	5
  2359  0046  305C               	movlw	low __pdataBANK2
  2360  0047  0086               	movwf	6
  2361  0048  3001               	movlw	high __pdataBANK2
  2362  0049  0087               	movwf	7
  2363  004A  300A               	movlw	10
  2364  004B  3194  249F         	fcall	init_ram
  2365  004D                     end_of_initialization:	
  2366                           ;End of C runtime variable initialization code
  2367                           
  2368  004D                     __end_of__initialization:	
  2369  004D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2370  004E  0020               	movlb	0
  2371  004F  3184  2C09         	ljmp	_main	;jump to C main() function
  2372                           
  2373                           	psect	bssBANK0
  2374  006E                     __pbssBANK0:	
  2375  006E                     _time_count:	
  2376  006E                     	ds	1
  2377                           
  2378                           	psect	bssBANK1
  2379  00A0                     __pbssBANK1:	
  2380  00A0                     _temperature_value:	
  2381  00A0                     	ds	4
  2382  00A4                     TMR0_ISR@CountCallBack:	
  2383  00A4                     	ds	2
  2384  00A6                     _CH1_temperature:	
  2385  00A6                     	ds	2
  2386  00A8                     _CH2_temperature:	
  2387  00A8                     	ds	2
  2388  00AA                     _Cur_Save_Index:	
  2389  00AA                     	ds	2
  2390  00AC                     _Cur_temperature:	
  2391  00AC                     	ds	2
  2392  00AE                     _temperature_int:	
  2393  00AE                     	ds	2
  2394  00B0                     _CH1_state:	
  2395  00B0                     	ds	1
  2396  00B1                     _CH2_state:	
  2397  00B1                     	ds	1
  2398  00B2                     _Cur_temperature_time_ch1:	
  2399  00B2                     	ds	1
  2400  00B3                     _Cur_temperature_time_ch2:	
  2401  00B3                     	ds	1
  2402  00B4                     _LongPressSec:	
  2403  00B4                     	ds	1
  2404  00B5                     _MAX31856Sec:	
  2405  00B5                     	ds	1
  2406  00B6                     _Record_flag:	
  2407  00B6                     	ds	1
  2408  00B7                     _Set_time_cmd_flag:	
  2409  00B7                     	ds	1
  2410  00B8                     _Usart_Rx_Cnt:	
  2411  00B8                     	ds	1
  2412  00B9                     _eusartRxCount:	
  2413  00B9                     	ds	1
  2414  00BA                     _eusartRxHead:	
  2415  00BA                     	ds	1
  2416  00BB                     _eusartRxTail:	
  2417  00BB                     	ds	1
  2418  00BC                     _eusartTxHead:	
  2419  00BC                     	ds	1
  2420  00BD                     _eusartTxTail:	
  2421  00BD                     	ds	1
  2422  00BE                     _temperature_decimal:	
  2423  00BE                     	ds	1
  2424  00BF                     _temperature_sign:	
  2425  00BF                     	ds	1
  2426  00C0                     _tmr_flag:	
  2427  00C0                     	ds	1
  2428  00C1                     _uch_cjth:	
  2429  00C1                     	ds	1
  2430  00C2                     _uch_cjtl:	
  2431  00C2                     	ds	1
  2432  00C3                     _uch_cr0:	
  2433  00C3                     	ds	1
  2434  00C4                     _uch_cr1:	
  2435  00C4                     	ds	1
  2436  00C5                     _uch_ltcbh:	
  2437  00C5                     	ds	1
  2438  00C6                     _uch_ltcbl:	
  2439  00C6                     	ds	1
  2440  00C7                     _uch_ltcbm:	
  2441  00C7                     	ds	1
  2442  00C8                     _uch_mask:	
  2443  00C8                     	ds	1
  2444  00C9                     _uch_sr:	
  2445  00C9                     	ds	1
  2446  00CA                     _uch_reg:	
  2447  00CA                     	ds	8
  2448  00D2                     _rtc_save_ch1:	
  2449  00D2                     	ds	7
  2450  00D9                     _rtc_save_ch2:	
  2451  00D9                     	ds	7
  2452  00E0                     _rtc_tm:	
  2453  00E0                     	ds	7
  2454  00E7                     _display_buff:	
  2455  00E7                     	ds	4
  2456                           
  2457                           	psect	bssBANK2
  2458  0120                     __pbssBANK2:	
  2459  0120                     _eusartRxBuffer:	
  2460  0120                     	ds	8
  2461  0128                     _eusartTxBuffer:	
  2462  0128                     	ds	8
  2463  0130                     Two_Display@F2132:	
  2464  0130                     	ds	4
  2465  0134                     err_Display@F2135:	
  2466  0134                     	ds	4
  2467  0138                     time_Display@F2138:	
  2468  0138                     	ds	4
  2469  013C                     _Usart_Rx_Buff:	
  2470  013C                     	ds	32
  2471                           
  2472                           	psect	dataBANK2
  2473  015C                     __pdataBANK2:	
  2474  015C                     Bq32k_Time_Init@F2027:	
  2475  015C                     	ds	10
  2476                           
  2477                           	psect	bssBANK3
  2478  01A0                     __pbssBANK3:	
  2479  01A0                     _Flash_buff:	
  2480  01A0                     	ds	64
  2481                           
  2482                           	psect	clrtext
  2483  14A5                     clear_ram0:	
  2484                           ;	Called with FSR0 containing the base address, and
  2485                           ;	WREG with the size to clear
  2486                           
  2487  14A5  0064               	clrwdt	;clear the watchdog before getting into this loop
  2488  14A6                     clrloop0:	
  2489  14A6  0180               	clrf	0	;clear RAM location pointed to by FSR
  2490  14A7  3101               	addfsr 0,1
  2491  14A8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2492  14A9  2CA6               	goto	clrloop0	;have we reached the end yet?
  2493  14AA  3400               	retlw	0	;all done for this memory range, return
  2494                           
  2495                           	psect	inittext
  2496  149F                     init_ram:	
  2497  149F  00FE               	movwf	126
  2498  14A0                     initloop:	
  2499  14A0  0012               	moviw fsr0++
  2500  14A1  001E               	movwi fsr1++
  2501  14A2  0BFE               	decfsz	126,f
  2502  14A3  2CA0               	goto	initloop
  2503  14A4  3400               	retlw	0
  2504                           
  2505                           	psect	cstackBANK2
  2506  0166                     __pcstackBANK2:	
  2507  0166                     main@data_temp:	
  2508                           
  2509                           ; 2 bytes @ 0x0
  2510  0166                     	ds	2
  2511  0168                     main@i:	
  2512                           
  2513                           ; 1 bytes @ 0x2
  2514  0168                     	ds	1
  2515  0169                     main@bat_data:	
  2516                           
  2517                           ; 2 bytes @ 0x3
  2518  0169                     	ds	2
  2519                           
  2520                           	psect	cstackCOMMON
  2521  0070                     __pcstackCOMMON:	
  2522  0070                     ?_OSCILLATOR_Initialize:	
  2523  0070                     ?_SPI_Initialize:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     ?_EUSART_Initialize:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ?_ADC_Initialize:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     ?_FVR_Initialize:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0070                     ?_TMR0_Initialize:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     ?_RxFrameCheck:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0070                     ?_TMR0_CallBack:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ??_TMR0_CallBack:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0070                     ?_Bq32k_Time_Init:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0070                     ?_SendCmd_1621:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     ?_Serach_Flash_Head:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ?_temperature_process:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ?_Key_Process:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ?_Save_process:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ?_Calculate_Time:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ?_Tc_Display:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ?_err_Display:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_Two_Display:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_time_Display:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_Bq32k_Rtc_Read_Time:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_Set_start_flag:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_Write_Flash_head:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ?_Save_Write_time:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_Set_finish_flag:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_Write_Flash_finish:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_bcd2bin:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_bin2bcd:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_Set_time_from_Com:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ?_Read_time_to_Com:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_PIN_MANAGER_Initialize:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?_SYSTEM_Initialize:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_SPI_Exchange8bit:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?_EUSART_Write:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_EUSART_Transmit_ISR:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ??_EUSART_Transmit_ISR:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?_EUSART_Receive_ISR:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_TMR0_ISR:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ?_INTERRUPT_InterruptManager:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_main:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ?_maxim_31856_read_register:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_maxim_start_conversion:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ?_maxim_clear_fault_status:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_tc_temperature_trans:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ?_one_temperature_trans:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ?_temperature_display:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ?_I2C_Start:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_I2C_Send_Byte:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ?_I2C_Receive_Byte:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_I2C_Stop:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ?_Key_Scan:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_Bq32k_Rtc_Write_Time:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_Com_Process:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     RxFrameCheck@frame_len:	
  2680                           ; 2 bytes @ 0x0
  2681                           
  2682                           
  2683                           ; 1 bytes @ 0x0
  2684  0070                     	ds	1
  2685  0071                     ??_RxFrameCheck:	
  2686  0071                     ??_TMR0_ISR:	
  2687                           ; 1 bytes @ 0x1
  2688                           
  2689                           
  2690                           ; 1 bytes @ 0x1
  2691  0071                     	ds	4
  2692  0075                     RxFrameCheck@tmp_crc:	
  2693                           
  2694                           ; 2 bytes @ 0x5
  2695  0075                     	ds	2
  2696  0077                     RxFrameCheck@i:	
  2697                           
  2698                           ; 1 bytes @ 0x7
  2699  0077                     	ds	1
  2700  0078                     RxFrameCheck@rx_arr:	
  2701                           
  2702                           ; 1 bytes @ 0x8
  2703  0078                     	ds	1
  2704  0079                     RxFrameCheck@remainder:	
  2705                           
  2706                           ; 2 bytes @ 0x9
  2707  0079                     	ds	2
  2708  007B                     ??_EUSART_Receive_ISR:	
  2709                           
  2710                           ; 1 bytes @ 0xB
  2711  007B                     	ds	2
  2712  007D                     EUSART_Receive_ISR@rx_tmp:	
  2713                           
  2714                           ; 1 bytes @ 0xD
  2715  007D                     	ds	1
  2716                           
  2717                           	psect	cstackBANK0
  2718  0020                     __pcstackBANK0:	
  2719  0020                     ??_INTERRUPT_InterruptManager:	
  2720                           
  2721                           ; 1 bytes @ 0x0
  2722  0020                     	ds	1
  2723  0021                     ??_OSCILLATOR_Initialize:	
  2724  0021                     ??_SPI_Initialize:	
  2725                           ; 1 bytes @ 0x1
  2726                           
  2727  0021                     ??_EUSART_Initialize:	
  2728                           ; 1 bytes @ 0x1
  2729                           
  2730  0021                     ??_ADC_Initialize:	
  2731                           ; 1 bytes @ 0x1
  2732                           
  2733  0021                     ??_FVR_Initialize:	
  2734                           ; 1 bytes @ 0x1
  2735                           
  2736  0021                     ??_TMR0_Initialize:	
  2737                           ; 1 bytes @ 0x1
  2738                           
  2739  0021                     ?_FLASH_EraseBlock:	
  2740                           ; 1 bytes @ 0x1
  2741                           
  2742  0021                     ?_memset:	
  2743                           ; 1 bytes @ 0x1
  2744                           
  2745  0021                     ??_Set_start_flag:	
  2746                           ; 1 bytes @ 0x1
  2747                           
  2748  0021                     ??_Set_finish_flag:	
  2749                           ; 1 bytes @ 0x1
  2750                           
  2751  0021                     ??_PIN_MANAGER_Initialize:	
  2752                           ; 1 bytes @ 0x1
  2753                           
  2754  0021                     ??_SPI_Exchange8bit:	
  2755                           ; 1 bytes @ 0x1
  2756                           
  2757  0021                     ??_EUSART_Write:	
  2758                           ; 1 bytes @ 0x1
  2759                           
  2760  0021                     ?_SendBit_1621:	
  2761                           ; 1 bytes @ 0x1
  2762                           
  2763  0021                     ?_SendDataBit_1621:	
  2764                           ; 1 bytes @ 0x1
  2765                           
  2766  0021                     ??_I2C_Start:	
  2767                           ; 1 bytes @ 0x1
  2768                           
  2769  0021                     ??_I2C_Send_Byte:	
  2770                           ; 1 bytes @ 0x1
  2771                           
  2772  0021                     ??_I2C_Receive_Byte:	
  2773                           ; 1 bytes @ 0x1
  2774                           
  2775  0021                     ??_I2C_Stop:	
  2776                           ; 1 bytes @ 0x1
  2777                           
  2778  0021                     ??_Key_Scan:	
  2779                           ; 1 bytes @ 0x1
  2780                           
  2781  0021                     ?___bmul:	
  2782                           ; 1 bytes @ 0x1
  2783                           
  2784  0021                     ?_CRC_cal:	
  2785                           ; 1 bytes @ 0x1
  2786                           
  2787  0021                     ?_FLASH_ReadWord:	
  2788                           ; 2 bytes @ 0x1
  2789                           
  2790  0021                     ?_ADC_GetConversion:	
  2791                           ; 2 bytes @ 0x1
  2792                           
  2793  0021                     ?___wmul:	
  2794                           ; 2 bytes @ 0x1
  2795                           
  2796  0021                     ?___awdiv:	
  2797                           ; 2 bytes @ 0x1
  2798                           
  2799  0021                     ?___awmod:	
  2800                           ; 2 bytes @ 0x1
  2801                           
  2802  0021                     ?___lwmod:	
  2803                           ; 2 bytes @ 0x1
  2804                           
  2805  0021                     SPI_Exchange8bit@data:	
  2806                           ; 2 bytes @ 0x1
  2807                           
  2808  0021                     EUSART_Write@txData:	
  2809                           ; 1 bytes @ 0x1
  2810                           
  2811  0021                     SendBit_1621@cnt:	
  2812                           ; 1 bytes @ 0x1
  2813                           
  2814  0021                     SendDataBit_1621@cnt:	
  2815                           ; 1 bytes @ 0x1
  2816                           
  2817  0021                     CRC_cal@frame_len:	
  2818                           ; 1 bytes @ 0x1
  2819                           
  2820  0021                     ___bmul@multiplicand:	
  2821                           ; 1 bytes @ 0x1
  2822                           
  2823  0021                     FLASH_ReadWord@flashAddr:	
  2824                           ; 1 bytes @ 0x1
  2825                           
  2826  0021                     FLASH_EraseBlock@startAddr:	
  2827                           ; 2 bytes @ 0x1
  2828                           
  2829  0021                     ___wmul@multiplier:	
  2830                           ; 2 bytes @ 0x1
  2831                           
  2832  0021                     ___awdiv@divisor:	
  2833                           ; 2 bytes @ 0x1
  2834                           
  2835  0021                     ___awmod@divisor:	
  2836                           ; 2 bytes @ 0x1
  2837                           
  2838  0021                     ___lwmod@divisor:	
  2839                           ; 2 bytes @ 0x1
  2840                           
  2841  0021                     memset@c:	
  2842                           ; 2 bytes @ 0x1
  2843                           
  2844                           
  2845                           ; 2 bytes @ 0x1
  2846  0021                     	ds	1
  2847  0022                     ??_SYSTEM_Initialize:	
  2848  0022                     ?_SPI_Exchange8bitBuffer:	
  2849                           ; 1 bytes @ 0x2
  2850                           
  2851  0022                     ?_maxim_31856_write_register:	
  2852                           ; 1 bytes @ 0x2
  2853                           
  2854  0022                     ??_maxim_31856_read_register:	
  2855                           ; 1 bytes @ 0x2
  2856                           
  2857  0022                     ??_SendBit_1621:	
  2858                           ; 1 bytes @ 0x2
  2859                           
  2860  0022                     ??_SendDataBit_1621:	
  2861                           ; 1 bytes @ 0x2
  2862                           
  2863  0022                     ??___bmul:	
  2864                           ; 1 bytes @ 0x2
  2865                           
  2866  0022                     SPI_Exchange8bitBuffer@bufLen:	
  2867                           ; 1 bytes @ 0x2
  2868                           
  2869  0022                     maxim_31856_write_register@uch_register_value:	
  2870                           ; 1 bytes @ 0x2
  2871                           
  2872  0022                     I2C_Send_Byte@Data:	
  2873                           ; 1 bytes @ 0x2
  2874                           
  2875  0022                     I2C_Receive_Byte@Data:	
  2876                           ; 1 bytes @ 0x2
  2877                           
  2878                           
  2879                           ; 1 bytes @ 0x2
  2880  0022                     	ds	1
  2881  0023                     ??_FLASH_EraseBlock:	
  2882  0023                     ??_CRC_cal:	
  2883                           ; 1 bytes @ 0x3
  2884                           
  2885  0023                     ??_FLASH_ReadWord:	
  2886                           ; 1 bytes @ 0x3
  2887                           
  2888  0023                     ??_ADC_GetConversion:	
  2889                           ; 1 bytes @ 0x3
  2890                           
  2891  0023                     ??_maxim_31856_write_register:	
  2892                           ; 1 bytes @ 0x3
  2893                           
  2894  0023                     SPI_Exchange8bitBuffer@dataOut:	
  2895                           ; 1 bytes @ 0x3
  2896                           
  2897  0023                     FLASH_ReadWord@GIEBitValue:	
  2898                           ; 1 bytes @ 0x3
  2899                           
  2900  0023                     FLASH_EraseBlock@GIEBitValue:	
  2901                           ; 1 bytes @ 0x3
  2902                           
  2903  0023                     maxim_31856_write_register@uch_register_address:	
  2904                           ; 1 bytes @ 0x3
  2905                           
  2906  0023                     maxim_31856_read_register@uch_register_address:	
  2907                           ; 1 bytes @ 0x3
  2908                           
  2909  0023                     SendBit_1621@data:	
  2910                           ; 1 bytes @ 0x3
  2911                           
  2912  0023                     SendDataBit_1621@data:	
  2913                           ; 1 bytes @ 0x3
  2914                           
  2915  0023                     I2C_Send_Byte@i:	
  2916                           ; 1 bytes @ 0x3
  2917                           
  2918  0023                     I2C_Receive_Byte@i:	
  2919                           ; 1 bytes @ 0x3
  2920                           
  2921  0023                     Key_Scan@Key_val:	
  2922                           ; 1 bytes @ 0x3
  2923                           
  2924  0023                     ___bmul@product:	
  2925                           ; 1 bytes @ 0x3
  2926                           
  2927  0023                     ___wmul@multiplicand:	
  2928                           ; 1 bytes @ 0x3
  2929                           
  2930  0023                     ___awdiv@dividend:	
  2931                           ; 2 bytes @ 0x3
  2932                           
  2933  0023                     ___awmod@dividend:	
  2934                           ; 2 bytes @ 0x3
  2935                           
  2936  0023                     ___lwmod@dividend:	
  2937                           ; 2 bytes @ 0x3
  2938                           
  2939  0023                     memset@n:	
  2940                           ; 2 bytes @ 0x3
  2941                           
  2942                           
  2943                           ; 2 bytes @ 0x3
  2944  0023                     	ds	1
  2945  0024                     ?_FLASH_WriteBlock:	
  2946  0024                     ??_SPI_Exchange8bitBuffer:	
  2947                           ; 1 bytes @ 0x4
  2948                           
  2949  0024                     ?_I2C_Read_Buffer:	
  2950                           ; 1 bytes @ 0x4
  2951                           
  2952  0024                     ?_I2C_Send_Buffer:	
  2953                           ; 1 bytes @ 0x4
  2954                           
  2955  0024                     ADC_GetConversion@channel:	
  2956                           ; 1 bytes @ 0x4
  2957                           
  2958  0024                     maxim_31856_read_register@uch_register_data:	
  2959                           ; 1 bytes @ 0x4
  2960                           
  2961  0024                     SendBit_1621@i:	
  2962                           ; 1 bytes @ 0x4
  2963                           
  2964  0024                     SendDataBit_1621@i:	
  2965                           ; 1 bytes @ 0x4
  2966                           
  2967  0024                     I2C_Read_Buffer@buff:	
  2968                           ; 1 bytes @ 0x4
  2969                           
  2970  0024                     I2C_Send_Buffer@buff:	
  2971                           ; 1 bytes @ 0x4
  2972                           
  2973  0024                     ___bmul@multiplier:	
  2974                           ; 1 bytes @ 0x4
  2975                           
  2976  0024                     FLASH_WriteBlock@writeAddr:	
  2977                           ; 1 bytes @ 0x4
  2978                           
  2979                           
  2980                           ; 2 bytes @ 0x4
  2981  0024                     	ds	1
  2982  0025                     ??_SendCmd_1621:	
  2983  0025                     ?_WriteAll_1621:	
  2984                           ; 1 bytes @ 0x5
  2985                           
  2986  0025                     ??_memset:	
  2987                           ; 1 bytes @ 0x5
  2988                           
  2989  0025                     ??_bcd2bin:	
  2990                           ; 1 bytes @ 0x5
  2991                           
  2992  0025                     ??_maxim_start_conversion:	
  2993                           ; 1 bytes @ 0x5
  2994                           
  2995  0025                     ??_maxim_clear_fault_status:	
  2996                           ; 1 bytes @ 0x5
  2997                           
  2998  0025                     ??___wmul:	
  2999                           ; 1 bytes @ 0x5
  3000                           
  3001  0025                     ??___awdiv:	
  3002                           ; 1 bytes @ 0x5
  3003                           
  3004  0025                     ??___awmod:	
  3005                           ; 1 bytes @ 0x5
  3006                           
  3007  0025                     ??___lwmod:	
  3008                           ; 1 bytes @ 0x5
  3009                           
  3010  0025                     I2C_Read_Buffer@Length:	
  3011                           ; 1 bytes @ 0x5
  3012                           
  3013  0025                     I2C_Send_Buffer@Length:	
  3014                           ; 1 bytes @ 0x5
  3015                           
  3016  0025                     WriteAll_1621@p:	
  3017                           ; 1 bytes @ 0x5
  3018                           
  3019  0025                     ___wmul@product:	
  3020                           ; 2 bytes @ 0x5
  3021                           
  3022                           
  3023                           ; 2 bytes @ 0x5
  3024  0025                     	ds	1
  3025  0026                     ??_I2C_Read_Buffer:	
  3026  0026                     ??_I2C_Send_Buffer:	
  3027                           ; 1 bytes @ 0x6
  3028                           
  3029  0026                     maxim_start_conversion@uch_conversion_mode:	
  3030                           ; 1 bytes @ 0x6
  3031                           
  3032  0026                     SendCmd_1621@command:	
  3033                           ; 1 bytes @ 0x6
  3034                           
  3035  0026                     ___awdiv@counter:	
  3036                           ; 1 bytes @ 0x6
  3037                           
  3038  0026                     ___awmod@counter:	
  3039                           ; 1 bytes @ 0x6
  3040                           
  3041  0026                     ___lwmod@counter:	
  3042                           ; 1 bytes @ 0x6
  3043                           
  3044  0026                     memset@p1:	
  3045                           ; 1 bytes @ 0x6
  3046                           
  3047  0026                     FLASH_WriteBlock@flashWordArray:	
  3048                           ; 1 bytes @ 0x6
  3049                           
  3050                           
  3051                           ; 2 bytes @ 0x6
  3052  0026                     	ds	1
  3053  0027                     ?___lwdiv:	
  3054  0027                     SPI_Exchange8bitBuffer@dataIn:	
  3055                           ; 2 bytes @ 0x7
  3056                           
  3057  0027                     WriteAll_1621@cnt:	
  3058                           ; 1 bytes @ 0x7
  3059                           
  3060  0027                     I2C_Read_Buffer@ADD:	
  3061                           ; 1 bytes @ 0x7
  3062                           
  3063  0027                     CRC_cal@rx_arr:	
  3064                           ; 1 bytes @ 0x7
  3065                           
  3066  0027                     ___awdiv@sign:	
  3067                           ; 1 bytes @ 0x7
  3068                           
  3069  0027                     ___awmod@sign:	
  3070                           ; 1 bytes @ 0x7
  3071                           
  3072  0027                     memset@p:	
  3073                           ; 1 bytes @ 0x7
  3074                           
  3075  0027                     ___lwdiv@divisor:	
  3076                           ; 1 bytes @ 0x7
  3077                           
  3078                           
  3079                           ; 2 bytes @ 0x7
  3080  0027                     	ds	1
  3081  0028                     ??_FLASH_WriteBlock:	
  3082  0028                     ??_WriteAll_1621:	
  3083                           ; 1 bytes @ 0x8
  3084                           
  3085  0028                     SPI_Exchange8bitBuffer@bytesWritten:	
  3086                           ; 1 bytes @ 0x8
  3087                           
  3088  0028                     I2C_Read_Buffer@Flag:	
  3089                           ; 1 bytes @ 0x8
  3090                           
  3091  0028                     I2C_Send_Buffer@ADD:	
  3092                           ; 1 bytes @ 0x8
  3093                           
  3094  0028                     bcd2bin@val:	
  3095                           ; 1 bytes @ 0x8
  3096                           
  3097  0028                     CRC_cal@i:	
  3098                           ; 1 bytes @ 0x8
  3099                           
  3100  0028                     ___awdiv@quotient:	
  3101                           ; 1 bytes @ 0x8
  3102                           
  3103                           
  3104                           ; 2 bytes @ 0x8
  3105  0028                     	ds	1
  3106  0029                     ??_Bq32k_Rtc_Read_Time:	
  3107  0029                     ?_maxim_31856_read_nregisters:	
  3108                           ; 1 bytes @ 0x9
  3109                           
  3110  0029                     maxim_31856_read_nregisters@uch_buff:	
  3111                           ; 1 bytes @ 0x9
  3112                           
  3113  0029                     WriteAll_1621@addr:	
  3114                           ; 1 bytes @ 0x9
  3115                           
  3116  0029                     I2C_Send_Buffer@i:	
  3117                           ; 1 bytes @ 0x9
  3118                           
  3119  0029                     CRC_cal@remainder:	
  3120                           ; 1 bytes @ 0x9
  3121                           
  3122  0029                     ___lwdiv@dividend:	
  3123                           ; 2 bytes @ 0x9
  3124                           
  3125                           
  3126                           ; 2 bytes @ 0x9
  3127  0029                     	ds	1
  3128  002A                     ??_bin2bcd:	
  3129  002A                     maxim_31856_read_nregisters@uch_nBytes:	
  3130                           ; 1 bytes @ 0xA
  3131                           
  3132  002A                     WriteAll_1621@i:	
  3133                           ; 1 bytes @ 0xA
  3134                           
  3135  002A                     I2C_Send_Buffer@Flag:	
  3136                           ; 1 bytes @ 0xA
  3137                           
  3138                           
  3139                           ; 1 bytes @ 0xA
  3140  002A                     	ds	1
  3141  002B                     ??_err_Display:	
  3142  002B                     ??_Two_Display:	
  3143                           ; 1 bytes @ 0xB
  3144                           
  3145  002B                     ??_Read_time_to_Com:	
  3146                           ; 1 bytes @ 0xB
  3147                           
  3148  002B                     ??_maxim_31856_read_nregisters:	
  3149                           ; 1 bytes @ 0xB
  3150                           
  3151  002B                     ??___lwdiv:	
  3152                           ; 1 bytes @ 0xB
  3153                           
  3154  002B                     Bq32k_Rtc_Read_Time@temp:	
  3155                           ; 1 bytes @ 0xB
  3156                           
  3157                           
  3158                           ; 10 bytes @ 0xB
  3159  002B                     	ds	1
  3160  002C                     ___lwdiv@counter:	
  3161  002C                     FLASH_WriteBlock@blockStartAddr:	
  3162                           ; 1 bytes @ 0xC
  3163                           
  3164  002C                     Two_Display@num:	
  3165                           ; 2 bytes @ 0xC
  3166                           
  3167  002C                     err_Display@num:	
  3168                           ; 4 bytes @ 0xC
  3169                           
  3170  002C                     Read_time_to_Com@tmp_buf:	
  3171                           ; 4 bytes @ 0xC
  3172                           
  3173                           
  3174                           ; 16 bytes @ 0xC
  3175  002C                     	ds	1
  3176  002D                     maxim_31856_read_nregisters@uch_register_address:	
  3177  002D                     ___lwdiv@quotient:	
  3178                           ; 1 bytes @ 0xD
  3179                           
  3180                           
  3181                           ; 2 bytes @ 0xD
  3182  002D                     	ds	1
  3183  002E                     ??_one_temperature_trans:	
  3184  002E                     FLASH_WriteBlock@GIEBitValue:	
  3185                           ; 1 bytes @ 0xE
  3186                           
  3187                           
  3188                           ; 1 bytes @ 0xE
  3189  002E                     	ds	1
  3190  002F                     ??_Tc_Display:	
  3191  002F                     FLASH_WriteBlock@i:	
  3192                           ; 1 bytes @ 0xF
  3193                           
  3194                           
  3195                           ; 1 bytes @ 0xF
  3196  002F                     	ds	1
  3197  0030                     ?_FLASH_WriteWord:	
  3198  0030                     Tc_Display@count:	
  3199                           ; 1 bytes @ 0x10
  3200                           
  3201  0030                     Two_Display@number:	
  3202                           ; 1 bytes @ 0x10
  3203                           
  3204  0030                     FLASH_WriteWord@flashAddr:	
  3205                           ; 1 bytes @ 0x10
  3206                           
  3207                           
  3208                           ; 2 bytes @ 0x10
  3209  0030                     	ds	1
  3210  0031                     bin2bcd@val:	
  3211  0031                     Tc_Display@data:	
  3212                           ; 1 bytes @ 0x11
  3213                           
  3214                           
  3215                           ; 2 bytes @ 0x11
  3216  0031                     	ds	1
  3217  0032                     ??_Bq32k_Rtc_Write_Time:	
  3218  0032                     FLASH_WriteWord@ramBuf:	
  3219                           ; 1 bytes @ 0x12
  3220                           
  3221                           
  3222                           ; 2 bytes @ 0x12
  3223  0032                     	ds	2
  3224  0034                     FLASH_WriteWord@word:	
  3225  0034                     Bq32k_Rtc_Write_Time@temp:	
  3226                           ; 2 bytes @ 0x14
  3227                           
  3228                           
  3229                           ; 10 bytes @ 0x14
  3230  0034                     	ds	1
  3231  0035                     Bq32k_Rtc_Read_Time@p:	
  3232                           
  3233                           ; 1 bytes @ 0x15
  3234  0035                     	ds	1
  3235  0036                     ??_time_Display:	
  3236  0036                     ??_FLASH_WriteWord:	
  3237                           ; 1 bytes @ 0x16
  3238                           
  3239                           
  3240                           ; 1 bytes @ 0x16
  3241  0036                     	ds	2
  3242  0038                     FLASH_WriteWord@offset:	
  3243                           
  3244                           ; 1 bytes @ 0x18
  3245  0038                     	ds	1
  3246  0039                     FLASH_WriteWord@blockStartAddr:	
  3247  0039                     time_Display@num:	
  3248                           ; 2 bytes @ 0x19
  3249                           
  3250                           
  3251                           ; 4 bytes @ 0x19
  3252  0039                     	ds	2
  3253  003B                     FLASH_WriteWord@i:	
  3254                           
  3255                           ; 1 bytes @ 0x1B
  3256  003B                     	ds	1
  3257  003C                     ??_Bq32k_Time_Init:	
  3258  003C                     ??_Serach_Flash_Head:	
  3259                           ; 1 bytes @ 0x1C
  3260                           
  3261  003C                     ?_Save_Write_word:	
  3262                           ; 1 bytes @ 0x1C
  3263                           
  3264  003C                     ??_Write_Flash_head:	
  3265                           ; 1 bytes @ 0x1C
  3266                           
  3267  003C                     ??_Write_Flash_finish:	
  3268                           ; 1 bytes @ 0x1C
  3269                           
  3270  003C                     Save_Write_word@data:	
  3271                           ; 1 bytes @ 0x1C
  3272                           
  3273  003C                     Read_time_to_Com@crc_tmp:	
  3274                           ; 2 bytes @ 0x1C
  3275                           
  3276                           
  3277                           ; 2 bytes @ 0x1C
  3278  003C                     	ds	1
  3279  003D                     Serach_Flash_Head@count:	
  3280                           
  3281                           ; 1 bytes @ 0x1D
  3282  003D                     	ds	1
  3283  003E                     ??_Save_Write_word:	
  3284  003E                     Bq32k_Rtc_Write_Time@p:	
  3285                           ; 1 bytes @ 0x1E
  3286                           
  3287  003E                     Read_time_to_Com@i:	
  3288                           ; 1 bytes @ 0x1E
  3289                           
  3290  003E                     Serach_Flash_Head@data:	
  3291                           ; 1 bytes @ 0x1E
  3292                           
  3293  003E                     Bq32k_Time_Init@temp:	
  3294                           ; 2 bytes @ 0x1E
  3295                           
  3296                           
  3297                           ; 10 bytes @ 0x1E
  3298  003E                     	ds	1
  3299  003F                     ??_Set_time_from_Com:	
  3300                           
  3301                           ; 1 bytes @ 0x1F
  3302  003F                     	ds	1
  3303  0040                     ??_Com_Process:	
  3304  0040                     ??_Save_Write_time:	
  3305                           ; 1 bytes @ 0x20
  3306                           
  3307  0040                     Serach_Flash_Head@i:	
  3308                           ; 1 bytes @ 0x20
  3309                           
  3310                           
  3311                           ; 2 bytes @ 0x20
  3312  0040                     	ds	2
  3313  0042                     ??_Calculate_Time:	
  3314                           
  3315                           ; 1 bytes @ 0x22
  3316  0042                     	ds	10
  3317  004C                     Calculate_Time@temp:	
  3318                           
  3319                           ; 4 bytes @ 0x2C
  3320  004C                     	ds	4
  3321  0050                     Calculate_Time@temp1:	
  3322                           
  3323                           ; 4 bytes @ 0x30
  3324  0050                     	ds	4
  3325  0054                     Calculate_Time@temp2:	
  3326                           
  3327                           ; 4 bytes @ 0x34
  3328  0054                     	ds	4
  3329  0058                     ??_Save_process:	
  3330  0058                     ??_tc_temperature_trans:	
  3331                           ; 1 bytes @ 0x38
  3332                           
  3333                           
  3334                           ; 1 bytes @ 0x38
  3335  0058                     	ds	2
  3336  005A                     Save_process@var_time:	
  3337                           
  3338                           ; 2 bytes @ 0x3A
  3339  005A                     	ds	2
  3340  005C                     tc_temperature_trans@temperature_back:	
  3341                           
  3342                           ; 2 bytes @ 0x3C
  3343  005C                     	ds	2
  3344  005E                     tc_temperature_trans@temperature_absolute:	
  3345                           
  3346                           ; 2 bytes @ 0x3E
  3347  005E                     	ds	2
  3348  0060                     tc_temperature_trans@var_time:	
  3349                           
  3350                           ; 2 bytes @ 0x40
  3351  0060                     	ds	2
  3352  0062                     tc_temperature_trans@temperature_temp:	
  3353                           
  3354                           ; 2 bytes @ 0x42
  3355  0062                     	ds	2
  3356  0064                     ??_temperature_display:	
  3357                           
  3358                           ; 1 bytes @ 0x44
  3359  0064                     	ds	1
  3360  0065                     ??_temperature_process:	
  3361  0065                     ??_Key_Process:	
  3362                           ; 1 bytes @ 0x45
  3363                           
  3364                           
  3365                           ; 1 bytes @ 0x45
  3366  0065                     	ds	1
  3367  0066                     Key_Process@data_temp:	
  3368                           
  3369                           ; 2 bytes @ 0x46
  3370  0066                     	ds	2
  3371  0068                     Key_Process@gKeyValue:	
  3372                           
  3373                           ; 1 bytes @ 0x48
  3374  0068                     	ds	1
  3375  0069                     Key_Process@i:	
  3376                           
  3377                           ; 2 bytes @ 0x49
  3378  0069                     	ds	2
  3379  006B                     ??_main:	
  3380                           
  3381                           ; 1 bytes @ 0x4B
  3382  006B                     	ds	3
  3383                           
  3384                           	psect	maintext
  3385  0409                     __pmaintext:	
  3386 ;;
  3387 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3388 ;;
  3389 ;; *************** function _main *****************
  3390 ;; Defined at:
  3391 ;;		line 67 in file "main.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  bat_data        2    3[BANK2 ] unsigned int 
  3396 ;;  data_temp       2    0[BANK2 ] unsigned int 
  3397 ;;  i               1    2[BANK2 ] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : B1F/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3408 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  3409 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3410 ;;      Totals:         0       3       0       5       0       0       0       0       0       0       0       0       
      +0       0
  3411 ;;Total ram usage:        8 bytes
  3412 ;; Hardware stack levels required when called:   13
  3413 ;; This function calls:
  3414 ;;		_ADC_GetConversion
  3415 ;;		_Bq32k_Time_Init
  3416 ;;		_Com_Process
  3417 ;;		_Key_Process
  3418 ;;		_SYSTEM_Initialize
  3419 ;;		_Save_process
  3420 ;;		_SendCmd_1621
  3421 ;;		_Serach_Flash_Head
  3422 ;;		_WriteAll_1621
  3423 ;;		_temperature_process
  3424 ;; This function is called by:
  3425 ;;		Startup code after reset
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           
  3430                           ;psect for function _main
  3431  0409                     _main:	
  3432                           
  3433                           ;main.c: 69: unsigned char i=0;
  3434                           
  3435                           ;incstack = 0
  3436                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3437  0409  0022               	movlb	2	; select bank2
  3438  040A  01E8               	clrf	main@i^(0+256)
  3439                           
  3440                           ;main.c: 71: unsigned int bat_data = 0;
  3441  040B  01E9               	clrf	main@bat_data^(0+256)
  3442  040C  01EA               	clrf	(main@bat_data+1)^(0+256)
  3443                           
  3444                           ;main.c: 72: unsigned int data_temp = 0;
  3445  040D  01E6               	clrf	main@data_temp^(0+256)
  3446  040E  01E7               	clrf	(main@data_temp+1)^(0+256)
  3447                           
  3448                           ;main.c: 73: SWDTEN = 0;
  3449  040F  0021               	movlb	1	; select bank1
  3450  0410  1017               	bcf	23,0	;volatile
  3451                           
  3452                           ;main.c: 74: WDTPS0 = 1;
  3453  0411  1497               	bsf	23,1	;volatile
  3454                           
  3455                           ;main.c: 75: WDTPS1 = 0;
  3456  0412  1117               	bcf	23,2	;volatile
  3457                           
  3458                           ;main.c: 76: WDTPS2 = 0;
  3459  0413  1197               	bcf	23,3	;volatile
  3460                           
  3461                           ;main.c: 77: WDTPS3 = 1;
  3462  0414  1617               	bsf	23,4	;volatile
  3463                           
  3464                           ;main.c: 78: WDTPS4 = 0;
  3465  0415  1297               	bcf	23,5	;volatile
  3466  0416  0064               	clrwdt	;# 
  3467                           
  3468                           ;main.c: 81: SYSTEM_Initialize();
  3469  0417  3188  2000  3184   	fcall	_SYSTEM_Initialize
  3470                           
  3471                           ;main.c: 84: _delay((unsigned long)((3000)*(4000000/4000.0)));
  3472  041A  3010               	movlw	16
  3473  041B  0020               	movlb	0	; select bank0
  3474  041C  00ED               	movwf	??_main+2
  3475  041D  3039               	movlw	57
  3476  041E  00EC               	movwf	??_main+1
  3477  041F  301B               	movlw	27
  3478  0420  00EB               	movwf	??_main
  3479  0421                     u5897:	
  3480  0421  0BEB               	decfsz	??_main,f
  3481  0422  2C21               	goto	u5897
  3482  0423  0BEC               	decfsz	??_main+1,f
  3483  0424  2C21               	goto	u5897
  3484  0425  0BED               	decfsz	??_main+2,f
  3485  0426  2C21               	goto	u5897
  3486  0427  3200               	nop2
  3487                           
  3488                           ;main.c: 85: if(RB5 == 0 ) do { LATA2 = 1; } while(0);
  3489  0428  0020               	movlb	0	; select bank0
  3490  0429  1A8D               	btfsc	13,5	;volatile
  3491  042A  2C2E               	goto	l445
  3492  042B  0022               	movlb	2	; select bank2
  3493  042C  150C               	bsf	12,2	;volatile
  3494  042D  2C30               	goto	l447
  3495  042E                     l445:	
  3496                           ;main.c: 86: else do { LATA2 = 0; } while(0);
  3497                           
  3498  042E  0022               	movlb	2	; select bank2
  3499  042F  110C               	bcf	12,2	;volatile
  3500  0430                     l447:	
  3501                           ;main.c: 87: do { LATA3 = 0; } while(0);
  3502                           
  3503  0430  118C               	bcf	12,3	;volatile
  3504                           
  3505                           ;main.c: 90: bat_data = 0;
  3506  0431  01E9               	clrf	main@bat_data^(0+256)
  3507  0432  01EA               	clrf	(main@bat_data+1)^(0+256)
  3508                           
  3509                           ;main.c: 91: for(i=0;i<16;i++)
  3510  0433  01E8               	clrf	main@i^(0+256)
  3511  0434  3010               	movlw	16
  3512  0435  0268               	subwf	main@i^(0+256),w
  3513  0436  1803               	btfsc	3,0
  3514  0437  2C51               	goto	l6157
  3515  0438                     l6151:	
  3516                           
  3517                           ;main.c: 92: {
  3518                           ;main.c: 93: bat_data = bat_data + ADC_GetConversion(ADC);
  3519  0438  300B               	movlw	11
  3520  0439  3196  2645  3184   	fcall	_ADC_GetConversion
  3521  043C  0022               	movlb	2	; select bank2
  3522  043D  0869               	movf	main@bat_data^(0+256),w
  3523  043E  0020               	movlb	0	; select bank0
  3524  043F  0721               	addwf	?_ADC_GetConversion,w
  3525  0440  0022               	movlb	2	; select bank2
  3526  0441  00E9               	movwf	main@bat_data^(0+256)
  3527  0442  086A               	movf	(main@bat_data+1)^(0+256),w
  3528  0443  0020               	movlb	0	; select bank0
  3529  0444  3D22               	addwfc	?_ADC_GetConversion+1,w
  3530  0445  0022               	movlb	2	; select bank2
  3531  0446  00EA               	movwf	(main@bat_data+1)^(0+256)
  3532  0447  3001               	movlw	1
  3533  0448  0020               	movlb	0	; select bank0
  3534  0449  00EB               	movwf	??_main
  3535  044A  086B               	movf	??_main,w
  3536  044B  0022               	movlb	2	; select bank2
  3537  044C  07E8               	addwf	main@i^(0+256),f
  3538  044D  3010               	movlw	16
  3539  044E  0268               	subwf	main@i^(0+256),w
  3540  044F  1C03               	skipc
  3541  0450  2C38               	goto	l6151
  3542  0451                     l6157:	
  3543                           
  3544                           ;main.c: 94: }
  3545                           ;main.c: 95: bat_data = bat_data>>4;
  3546  0451  0E69               	swapf	main@bat_data^(0+256),w
  3547  0452  390F               	andlw	15
  3548  0453  00E9               	movwf	main@bat_data^(0+256)
  3549  0454  0E6A               	swapf	(main@bat_data+1)^(0+256),w
  3550  0455  39F0               	andlw	240
  3551  0456  04E9               	iorwf	main@bat_data^(0+256),f
  3552  0457  0E6A               	swapf	(main@bat_data+1)^(0+256),w
  3553  0458  390F               	andlw	15
  3554  0459  00EA               	movwf	(main@bat_data^(0+256)+1)
  3555                           
  3556                           ;main.c: 96: if( bat_data < 800)
  3557  045A  3003               	movlw	3
  3558  045B  026A               	subwf	(main@bat_data+1)^(0+256),w
  3559  045C  3020               	movlw	32
  3560  045D  1903               	skipnz
  3561  045E  0269               	subwf	main@bat_data^(0+256),w
  3562  045F  1803               	skipnc
  3563  0460  2C64               	goto	l6161
  3564                           
  3565                           ;main.c: 97: {
  3566                           ;main.c: 98: do { LATA2 = 0; } while(0);
  3567  0461  110C               	bcf	12,2	;volatile
  3568  0462                     l454:	
  3569                           ;main.c: 99: while(1)asm("clrwdt");
  3570                           
  3571  0462  0064               	clrwdt	;# 
  3572  0463  2C62               	goto	l454
  3573  0464                     l6161:	
  3574                           
  3575                           ;main.c: 100: }
  3576                           ;main.c: 101: i = 0 ;
  3577  0464  0022               	movlb	2	; select bank2
  3578  0465  01E8               	clrf	main@i^(0+256)
  3579                           
  3580                           ;main.c: 102: bat_data = 0 ;
  3581  0466  01E9               	clrf	main@bat_data^(0+256)
  3582  0467  01EA               	clrf	(main@bat_data+1)^(0+256)
  3583                           
  3584                           ;main.c: 106: do { TRISB3 = 1; } while(0);
  3585  0468  0021               	movlb	1	; select bank1
  3586  0469  158D               	bsf	13,3	;volatile
  3587                           
  3588                           ;main.c: 107: Bq32k_Time_Init();
  3589  046A  3189  217C  3184   	fcall	_Bq32k_Time_Init
  3590                           
  3591                           ;main.c: 108: SendCmd_1621(0x52);
  3592  046D  3052               	movlw	82
  3593  046E  3195  2551  3184   	fcall	_SendCmd_1621
  3594                           
  3595                           ;main.c: 109: SendCmd_1621(0X28);
  3596  0471  3028               	movlw	40
  3597  0472  3195  2551  3184   	fcall	_SendCmd_1621
  3598                           
  3599                           ;main.c: 110: SendCmd_1621(0x02);
  3600  0475  3002               	movlw	2
  3601  0476  3195  2551  3184   	fcall	_SendCmd_1621
  3602                           
  3603                           ;main.c: 111: SendCmd_1621(0x06);
  3604  0479  3006               	movlw	6
  3605  047A  3195  2551  3184   	fcall	_SendCmd_1621
  3606                           
  3607                           ;main.c: 113: WriteAll_1621(0,Dis_TAB+17,4);
  3608  047D  3011               	movlw	low ((_Dis_TAB| (0+32768)+17))
  3609  047E  0020               	movlb	0	; select bank0
  3610  047F  00A5               	movwf	WriteAll_1621@p
  3611  0480  3098               	movlw	high ((_Dis_TAB| (0+32768)+17))
  3612  0481  00A6               	movwf	WriteAll_1621@p+1
  3613  0482  3004               	movlw	4
  3614  0483  00EB               	movwf	??_main
  3615  0484  086B               	movf	??_main,w
  3616  0485  00A7               	movwf	WriteAll_1621@cnt
  3617  0486  3000               	movlw	0
  3618  0487  3188  20A5  3184   	fcall	_WriteAll_1621
  3619                           
  3620                           ;main.c: 115: time_count = 0;
  3621  048A  0020               	movlb	0	; select bank0
  3622  048B  01EE               	clrf	_time_count
  3623                           
  3624                           ;main.c: 116: Record_flag = 0;
  3625  048C  0021               	movlb	1	; select bank1
  3626  048D  01B6               	clrf	_Record_flag^(0+128)
  3627                           
  3628                           ;main.c: 117: Cur_temperature_time_ch1 = 0;
  3629  048E  01B2               	clrf	_Cur_temperature_time_ch1^(0+128)
  3630                           
  3631                           ;main.c: 118: Cur_temperature_time_ch2 = 0;
  3632  048F  01B3               	clrf	_Cur_temperature_time_ch2^(0+128)
  3633                           
  3634                           ;main.c: 119: CH1_temperature = 0;
  3635  0490  01A6               	clrf	_CH1_temperature^(0+128)
  3636  0491  01A7               	clrf	(_CH1_temperature+1)^(0+128)
  3637                           
  3638                           ;main.c: 120: CH2_temperature = 0;
  3639  0492  01A8               	clrf	_CH2_temperature^(0+128)
  3640  0493  01A9               	clrf	(_CH2_temperature+1)^(0+128)
  3641                           
  3642                           ;main.c: 121: CH1_state = 0;
  3643  0494  01B0               	clrf	_CH1_state^(0+128)
  3644                           
  3645                           ;main.c: 122: CH2_state = 0;
  3646  0495  01B1               	clrf	_CH2_state^(0+128)
  3647                           
  3648                           ;main.c: 123: Usart_Rx_Cnt = 0;
  3649  0496  01B8               	clrf	_Usart_Rx_Cnt^(0+128)
  3650                           
  3651                           ;main.c: 124: Set_time_cmd_flag = 0;
  3652  0497  01B7               	clrf	_Set_time_cmd_flag^(0+128)
  3653                           
  3654                           ;main.c: 125: bat_data = 0;
  3655  0498  0022               	movlb	2	; select bank2
  3656  0499  01E9               	clrf	main@bat_data^(0+256)
  3657  049A  01EA               	clrf	(main@bat_data+1)^(0+256)
  3658                           
  3659                           ;main.c: 126: Cur_Save_Index = 0x2000;
  3660  049B  3000               	movlw	0
  3661  049C  0021               	movlb	1	; select bank1
  3662  049D  00AA               	movwf	_Cur_Save_Index^(0+128)
  3663  049E  3020               	movlw	32
  3664  049F  00AB               	movwf	(_Cur_Save_Index^(0+128)+1)
  3665                           
  3666                           ;main.c: 127: Serach_Flash_Head();
  3667  04A0  318B  23EA  3184   	fcall	_Serach_Flash_Head
  3668  04A3  0064               	clrwdt	;# 
  3669                           
  3670                           ;main.c: 156: (INTCONbits.GIE = 1);
  3671  04A4  178B               	bsf	11,7	;volatile
  3672                           
  3673                           ;main.c: 159: (INTCONbits.PEIE = 1);
  3674  04A5  170B               	bsf	11,6	;volatile
  3675  04A6                     l6207:	
  3676                           ;main.c: 167: while (1)
  3677                           
  3678                           
  3679                           ;main.c: 168: {
  3680                           ;main.c: 173: bat_data = bat_data + ADC_GetConversion(ADC);
  3681  04A6  300B               	movlw	11
  3682  04A7  3196  2645  3184   	fcall	_ADC_GetConversion
  3683  04AA  0022               	movlb	2	; select bank2
  3684  04AB  0869               	movf	main@bat_data^(0+256),w
  3685  04AC  0020               	movlb	0	; select bank0
  3686  04AD  0721               	addwf	?_ADC_GetConversion,w
  3687  04AE  0022               	movlb	2	; select bank2
  3688  04AF  00E9               	movwf	main@bat_data^(0+256)
  3689  04B0  086A               	movf	(main@bat_data+1)^(0+256),w
  3690  04B1  0020               	movlb	0	; select bank0
  3691  04B2  3D22               	addwfc	?_ADC_GetConversion+1,w
  3692  04B3  0022               	movlb	2	; select bank2
  3693  04B4  00EA               	movwf	(main@bat_data+1)^(0+256)
  3694                           
  3695                           ;main.c: 174: i++;
  3696  04B5  3001               	movlw	1
  3697  04B6  0020               	movlb	0	; select bank0
  3698  04B7  00EB               	movwf	??_main
  3699  04B8  086B               	movf	??_main,w
  3700  04B9  0022               	movlb	2	; select bank2
  3701  04BA  07E8               	addwf	main@i^(0+256),f
  3702                           
  3703                           ;main.c: 175: if(i == 16)
  3704  04BB  3010               	movlw	16
  3705  04BC  0668               	xorwf	main@i^(0+256),w
  3706  04BD  1D03               	btfss	3,2
  3707  04BE  2CD6               	goto	l6221
  3708                           
  3709                           ;main.c: 176: {
  3710                           ;main.c: 177: i = 0;
  3711  04BF  01E8               	clrf	main@i^(0+256)
  3712                           
  3713                           ;main.c: 178: bat_data = bat_data>>4;
  3714  04C0  0E69               	swapf	main@bat_data^(0+256),w
  3715  04C1  390F               	andlw	15
  3716  04C2  00E9               	movwf	main@bat_data^(0+256)
  3717  04C3  0E6A               	swapf	(main@bat_data+1)^(0+256),w
  3718  04C4  39F0               	andlw	240
  3719  04C5  04E9               	iorwf	main@bat_data^(0+256),f
  3720  04C6  0E6A               	swapf	(main@bat_data+1)^(0+256),w
  3721  04C7  390F               	andlw	15
  3722  04C8  00EA               	movwf	(main@bat_data^(0+256)+1)
  3723                           
  3724                           ;main.c: 179: if( bat_data < 800)
  3725  04C9  3003               	movlw	3
  3726  04CA  026A               	subwf	(main@bat_data+1)^(0+256),w
  3727  04CB  3020               	movlw	32
  3728  04CC  1903               	skipnz
  3729  04CD  0269               	subwf	main@bat_data^(0+256),w
  3730  04CE  1803               	skipnc
  3731  04CF  2CD3               	goto	l6219
  3732                           
  3733                           ;main.c: 180: {
  3734                           ;main.c: 181: do { LATA2 = 0; } while(0);
  3735  04D0  110C               	bcf	12,2	;volatile
  3736  04D1                     l464:	
  3737                           ;main.c: 182: while(1)asm("clrwdt");
  3738                           
  3739  04D1  0064               	clrwdt	;# 
  3740  04D2  2CD1               	goto	l464
  3741  04D3                     l6219:	
  3742                           
  3743                           ;main.c: 183: }
  3744                           ;main.c: 184: bat_data = 0;
  3745  04D3  0022               	movlb	2	; select bank2
  3746  04D4  01E9               	clrf	main@bat_data^(0+256)
  3747  04D5  01EA               	clrf	(main@bat_data+1)^(0+256)
  3748  04D6                     l6221:	
  3749                           
  3750                           ;main.c: 185: }
  3751                           ;main.c: 190: temperature_process();
  3752  04D6  3189  2145  3184   	fcall	_temperature_process
  3753                           
  3754                           ;main.c: 191: Key_Process();
  3755  04D9  3185  25B4  3184   	fcall	_Key_Process
  3756                           
  3757                           ;main.c: 192: Save_process();
  3758  04DC  3187  2792  3184   	fcall	_Save_process
  3759                           
  3760                           ;main.c: 193: Com_Process();
  3761  04DF  3194  24B3  3184   	fcall	_Com_Process
  3762  04E2  2CA6               	goto	l6207
  3763  04E3                     __end_of_main:	
  3764                           
  3765                           	psect	text1
  3766  0BEA                     __ptext1:	
  3767 ;; *************** function _Serach_Flash_Head *****************
  3768 ;; Defined at:
  3769 ;;		line 42 in file "mcc_generated_files/save.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;		None
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;  i               2   32[BANK0 ] unsigned int 
  3774 ;;  data            2   30[BANK0 ] unsigned int 
  3775 ;;  count           1   29[BANK0 ] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3786 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3788 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;Total ram usage:        6 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    7
  3792 ;; This function calls:
  3793 ;;		_FLASH_ReadWord
  3794 ;;		_Write_Flash_finish
  3795 ;; This function is called by:
  3796 ;;		_main
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           
  3801                           ;psect for function _Serach_Flash_Head
  3802  0BEA                     _Serach_Flash_Head:	
  3803                           
  3804                           ;save.c: 44: unsigned int i=0;
  3805                           
  3806                           ;incstack = 0
  3807                           ; Regs used in _Serach_Flash_Head: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3808  0BEA  0020               	movlb	0	; select bank0
  3809  0BEB  01C0               	clrf	Serach_Flash_Head@i
  3810  0BEC  01C1               	clrf	Serach_Flash_Head@i+1
  3811                           
  3812                           ;save.c: 45: unsigned int data=0;
  3813  0BED  01BE               	clrf	Serach_Flash_Head@data
  3814  0BEE  01BF               	clrf	Serach_Flash_Head@data+1
  3815                           
  3816                           ;save.c: 46: unsigned char count =0;
  3817  0BEF  01BD               	clrf	Serach_Flash_Head@count
  3818                           
  3819                           ;save.c: 47: for(i = 0x2000; i<16384;i++ )
  3820  0BF0  3000               	movlw	0
  3821  0BF1  00C0               	movwf	Serach_Flash_Head@i
  3822  0BF2  3020               	movlw	32
  3823  0BF3  00C1               	movwf	Serach_Flash_Head@i+1
  3824  0BF4                     L1:	
  3825  0BF4  3040               	movlw	64
  3826  0BF5  0241               	subwf	Serach_Flash_Head@i+1,w
  3827  0BF6  3000               	movlw	0
  3828  0BF7  1903               	skipnz
  3829  0BF8  0240               	subwf	Serach_Flash_Head@i,w
  3830  0BF9  1803               	btfsc	3,0
  3831  0BFA  0008               	return
  3832                           
  3833                           ;save.c: 48: {
  3834                           ;save.c: 49: data = FLASH_ReadWord(i);
  3835  0BFB  0841               	movf	Serach_Flash_Head@i+1,w
  3836  0BFC  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  3837  0BFD  0840               	movf	Serach_Flash_Head@i,w
  3838  0BFE  00A1               	movwf	FLASH_ReadWord@flashAddr
  3839  0BFF  3196  2663  318B   	fcall	_FLASH_ReadWord
  3840  0C02  0020               	movlb	0	; select bank0
  3841  0C03  0822               	movf	?_FLASH_ReadWord+1,w
  3842  0C04  00BF               	movwf	Serach_Flash_Head@data+1
  3843  0C05  0821               	movf	?_FLASH_ReadWord,w
  3844  0C06  00BE               	movwf	Serach_Flash_Head@data
  3845                           
  3846                           ;save.c: 51: if( data == 0x1555 )
  3847  0C07  3055               	movlw	85
  3848  0C08  063E               	xorwf	Serach_Flash_Head@data,w
  3849  0C09  3015               	movlw	21
  3850  0C0A  1903               	skipnz
  3851  0C0B  063F               	xorwf	Serach_Flash_Head@data+1,w
  3852  0C0C  1D03               	btfss	3,2
  3853  0C0D  2C13               	goto	l5997
  3854                           
  3855                           ;save.c: 52: {
  3856                           ;save.c: 53: count++;
  3857  0C0E  3001               	movlw	1
  3858  0C0F  00BC               	movwf	??_Serach_Flash_Head
  3859  0C10  083C               	movf	??_Serach_Flash_Head,w
  3860  0C11  07BD               	addwf	Serach_Flash_Head@count,f
  3861                           
  3862                           ;save.c: 54: }
  3863  0C12  2C38               	goto	l6015
  3864  0C13                     l5997:	
  3865                           
  3866                           ;save.c: 55: else
  3867                           ;save.c: 56: {
  3868                           ;save.c: 57: if( data == 0x3fff && count >1 )
  3869  0C13  0A3E               	incf	Serach_Flash_Head@data,w
  3870  0C14  303F               	movlw	63
  3871  0C15  1903               	skipnz
  3872  0C16  063F               	xorwf	Serach_Flash_Head@data+1,w
  3873  0C17  1D03               	btfss	3,2
  3874  0C18  2C25               	goto	l6005
  3875  0C19  3002               	movlw	2
  3876  0C1A  023D               	subwf	Serach_Flash_Head@count,w
  3877  0C1B  1C03               	skipc
  3878  0C1C  2C25               	goto	l6005
  3879                           
  3880                           ;save.c: 58: {
  3881                           ;save.c: 59: Cur_Save_Index = i;
  3882  0C1D  0841               	movf	Serach_Flash_Head@i+1,w
  3883  0C1E  0021               	movlb	1	; select bank1
  3884  0C1F  00AB               	movwf	(_Cur_Save_Index+1)^(0+128)
  3885  0C20  0020               	movlb	0	; select bank0
  3886  0C21  0840               	movf	Serach_Flash_Head@i,w
  3887  0C22  0021               	movlb	1	; select bank1
  3888  0C23  00AA               	movwf	_Cur_Save_Index^(0+128)
  3889                           
  3890                           ;save.c: 60: break;
  3891  0C24  0008               	return
  3892  0C25                     l6005:	
  3893                           ;save.c: 61: }
  3894                           
  3895                           
  3896                           ;save.c: 62: else if( data == 0x3fff )
  3897  0C25  0020               	movlb	0	; select bank0
  3898  0C26  0A3E               	incf	Serach_Flash_Head@data,w
  3899  0C27  303F               	movlw	63
  3900  0C28  1903               	skipnz
  3901  0C29  063F               	xorwf	Serach_Flash_Head@data+1,w
  3902  0C2A  1D03               	btfss	3,2
  3903  0C2B  2C36               	goto	l6013
  3904                           
  3905                           ;save.c: 63: {
  3906                           ;save.c: 64: Cur_Save_Index = i;
  3907  0C2C  0841               	movf	Serach_Flash_Head@i+1,w
  3908  0C2D  0021               	movlb	1	; select bank1
  3909  0C2E  00AB               	movwf	(_Cur_Save_Index+1)^(0+128)
  3910  0C2F  0020               	movlb	0	; select bank0
  3911  0C30  0840               	movf	Serach_Flash_Head@i,w
  3912  0C31  0021               	movlb	1	; select bank1
  3913  0C32  00AA               	movwf	_Cur_Save_Index^(0+128)
  3914                           
  3915                           ;save.c: 65: Write_Flash_finish();
  3916  0C33  3197  27D1         	fcall	_Write_Flash_finish
  3917                           
  3918                           ;save.c: 66: break;
  3919  0C35  0008               	return
  3920  0C36                     l6013:	
  3921                           ;save.c: 67: }
  3922                           
  3923                           
  3924                           ;save.c: 68: else
  3925                           ;save.c: 69: {
  3926                           ;save.c: 70: count = 0;
  3927  0C36  0020               	movlb	0	; select bank0
  3928  0C37  01BD               	clrf	Serach_Flash_Head@count
  3929  0C38                     l6015:	
  3930  0C38  3001               	movlw	1
  3931  0C39  0020               	movlb	0	; select bank0
  3932  0C3A  07C0               	addwf	Serach_Flash_Head@i,f
  3933  0C3B  3000               	movlw	0
  3934  0C3C  3DC1               	addwfc	Serach_Flash_Head@i+1,f
  3935  0C3D  2BF4               	goto	L1
  3936  0C3E                     __end_of_Serach_Flash_Head:	
  3937                           
  3938                           	psect	text2
  3939  0792                     __ptext2:	
  3940 ;; *************** function _Save_process *****************
  3941 ;; Defined at:
  3942 ;;		line 120 in file "mcc_generated_files/save.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;  var_time        2   58[BANK0 ] unsigned int 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      void 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;Total ram usage:        4 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    9
  3963 ;; This function calls:
  3964 ;;		_Calculate_Time
  3965 ;;		_Save_Write_word
  3966 ;; This function is called by:
  3967 ;;		_main
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           
  3972                           ;psect for function _Save_process
  3973  0792                     _Save_process:	
  3974                           
  3975                           ;save.c: 122: unsigned int var_time=0;
  3976                           
  3977                           ;incstack = 0
  3978                           ; Regs used in _Save_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3979  0792  0020               	movlb	0	; select bank0
  3980  0793  01DA               	clrf	Save_process@var_time
  3981  0794  01DB               	clrf	Save_process@var_time+1
  3982                           
  3983                           ;save.c: 123: if( time_count == 1 && Record_flag == 1 )
  3984  0795  036E               	decf	_time_count,w
  3985  0796  1D03               	btfss	3,2
  3986  0797  2FC7               	goto	l6101
  3987  0798  0021               	movlb	1	; select bank1
  3988  0799  0336               	decf	_Record_flag^(0+128),w
  3989  079A  1D03               	btfss	3,2
  3990  079B  2FC7               	goto	l6101
  3991                           
  3992                           ;save.c: 124: {
  3993                           ;save.c: 125: if(Cur_temperature_time_ch1 > 120)
  3994  079C  3079               	movlw	121
  3995  079D  0232               	subwf	_Cur_temperature_time_ch1^(0+128),w
  3996  079E  1C03               	skipc
  3997  079F  0008               	return
  3998                           
  3999                           ;save.c: 126: {
  4000                           ;save.c: 127: var_time = Calculate_Time();
  4001  07A0  3182  226B  3187   	fcall	_Calculate_Time
  4002  07A3  0020               	movlb	0	; select bank0
  4003  07A4  00D8               	movwf	??_Save_process
  4004  07A5  01D9               	clrf	??_Save_process+1
  4005  07A6  0858               	movf	??_Save_process,w
  4006  07A7  00DA               	movwf	Save_process@var_time
  4007  07A8  0859               	movf	??_Save_process+1,w
  4008  07A9  00DB               	movwf	Save_process@var_time+1
  4009                           
  4010                           ;save.c: 128: var_time |= 0x100;
  4011  07AA  145B               	bsf	Save_process@var_time+1,0
  4012                           
  4013                           ;save.c: 129: if(CH1_state == 1) var_time |= 0x400;
  4014  07AB  0021               	movlb	1	; select bank1
  4015  07AC  0330               	decf	_CH1_state^(0+128),w
  4016  07AD  1D03               	btfss	3,2
  4017  07AE  2FB1               	goto	l1097
  4018  07AF  0020               	movlb	0	; select bank0
  4019  07B0  155B               	bsf	Save_process@var_time+1,2
  4020  07B1                     l1097:	
  4021                           
  4022                           ;save.c: 131: var_time |= 0x1000;
  4023  07B1  0020               	movlb	0	; select bank0
  4024  07B2  165B               	bsf	Save_process@var_time+1,4
  4025                           
  4026                           ;save.c: 133: Save_Write_word(var_time);
  4027  07B3  085B               	movf	Save_process@var_time+1,w
  4028  07B4  00BD               	movwf	Save_Write_word@data+1
  4029  07B5  085A               	movf	Save_process@var_time,w
  4030  07B6  00BC               	movwf	Save_Write_word@data
  4031  07B7  3189  210F  3187   	fcall	_Save_Write_word
  4032                           
  4033                           ;save.c: 134: Save_Write_word(CH1_temperature);
  4034  07BA  0021               	movlb	1	; select bank1
  4035  07BB  0827               	movf	(_CH1_temperature+1)^(0+128),w
  4036  07BC  0020               	movlb	0	; select bank0
  4037  07BD  00BD               	movwf	Save_Write_word@data+1
  4038  07BE  0021               	movlb	1	; select bank1
  4039  07BF  0826               	movf	_CH1_temperature^(0+128),w
  4040  07C0  0020               	movlb	0	; select bank0
  4041  07C1  00BC               	movwf	Save_Write_word@data
  4042  07C2  3189  210F         	fcall	_Save_Write_word
  4043                           
  4044                           ;save.c: 136: Cur_temperature_time_ch1 = 0;
  4045  07C4  0021               	movlb	1	; select bank1
  4046  07C5  01B2               	clrf	_Cur_temperature_time_ch1^(0+128)
  4047                           
  4048                           ;save.c: 137: }
  4049                           ;save.c: 138: }
  4050  07C6  0008               	return
  4051  07C7                     l6101:	
  4052                           
  4053                           ;save.c: 139: else if(time_count == 3 && Record_flag == 1)
  4054  07C7  3003               	movlw	3
  4055  07C8  0020               	movlb	0	; select bank0
  4056  07C9  066E               	xorwf	_time_count,w
  4057  07CA  1D03               	btfss	3,2
  4058  07CB  0008               	return
  4059  07CC  0021               	movlb	1	; select bank1
  4060  07CD  0336               	decf	_Record_flag^(0+128),w
  4061  07CE  1D03               	btfss	3,2
  4062  07CF  0008               	return
  4063                           
  4064                           ;save.c: 140: {
  4065                           ;save.c: 141: if(Cur_temperature_time_ch2 > 120)
  4066  07D0  3079               	movlw	121
  4067  07D1  0233               	subwf	_Cur_temperature_time_ch2^(0+128),w
  4068  07D2  1C03               	skipc
  4069  07D3  0008               	return
  4070                           
  4071                           ;save.c: 142: {
  4072                           ;save.c: 143: var_time = Calculate_Time();
  4073  07D4  3182  226B  3187   	fcall	_Calculate_Time
  4074  07D7  0020               	movlb	0	; select bank0
  4075  07D8  00D8               	movwf	??_Save_process
  4076  07D9  01D9               	clrf	??_Save_process+1
  4077  07DA  0858               	movf	??_Save_process,w
  4078  07DB  00DA               	movwf	Save_process@var_time
  4079  07DC  0859               	movf	??_Save_process+1,w
  4080  07DD  00DB               	movwf	Save_process@var_time+1
  4081                           
  4082                           ;save.c: 144: var_time |= 0x200;
  4083  07DE  14DB               	bsf	Save_process@var_time+1,1
  4084                           
  4085                           ;save.c: 145: if(CH2_state == 1) var_time |= 0x800;
  4086  07DF  0021               	movlb	1	; select bank1
  4087  07E0  0331               	decf	_CH2_state^(0+128),w
  4088  07E1  1D03               	btfss	3,2
  4089  07E2  2FE5               	goto	l1101
  4090  07E3  0020               	movlb	0	; select bank0
  4091  07E4  15DB               	bsf	Save_process@var_time+1,3
  4092  07E5                     l1101:	
  4093                           
  4094                           ;save.c: 147: var_time |= 0x1000;
  4095  07E5  0020               	movlb	0	; select bank0
  4096  07E6  165B               	bsf	Save_process@var_time+1,4
  4097                           
  4098                           ;save.c: 149: Save_Write_word(var_time);
  4099  07E7  085B               	movf	Save_process@var_time+1,w
  4100  07E8  00BD               	movwf	Save_Write_word@data+1
  4101  07E9  085A               	movf	Save_process@var_time,w
  4102  07EA  00BC               	movwf	Save_Write_word@data
  4103  07EB  3189  210F  3187   	fcall	_Save_Write_word
  4104                           
  4105                           ;save.c: 150: Save_Write_word(CH2_temperature);
  4106  07EE  0021               	movlb	1	; select bank1
  4107  07EF  0829               	movf	(_CH2_temperature+1)^(0+128),w
  4108  07F0  0020               	movlb	0	; select bank0
  4109  07F1  00BD               	movwf	Save_Write_word@data+1
  4110  07F2  0021               	movlb	1	; select bank1
  4111  07F3  0828               	movf	_CH2_temperature^(0+128),w
  4112  07F4  0020               	movlb	0	; select bank0
  4113  07F5  00BC               	movwf	Save_Write_word@data
  4114  07F6  3189  210F         	fcall	_Save_Write_word
  4115                           
  4116                           ;save.c: 152: Cur_temperature_time_ch2 = 0;
  4117  07F8  0021               	movlb	1	; select bank1
  4118  07F9  01B3               	clrf	_Cur_temperature_time_ch2^(0+128)
  4119  07FA  0008               	return
  4120  07FB                     __end_of_Save_process:	
  4121                           
  4122                           	psect	text3
  4123  0800                     __ptext3:	
  4124 ;; *************** function _SYSTEM_Initialize *****************
  4125 ;; Defined at:
  4126 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;		None
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;		None
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0, pclath, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;Total ram usage:        0 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    4
  4147 ;; This function calls:
  4148 ;;		_ADC_Initialize
  4149 ;;		_EUSART_Initialize
  4150 ;;		_FVR_Initialize
  4151 ;;		_OSCILLATOR_Initialize
  4152 ;;		_PIN_MANAGER_Initialize
  4153 ;;		_SPI_Initialize
  4154 ;;		_TMR0_Initialize
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function _SYSTEM_Initialize
  4162  0800                     _SYSTEM_Initialize:	
  4163                           
  4164                           ;mcc.c: 71: OSCILLATOR_Initialize();
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4168  0800  3187  27FB  3188   	fcall	_OSCILLATOR_Initialize
  4169                           
  4170                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  4171  0803  3197  2705  3188   	fcall	_PIN_MANAGER_Initialize
  4172                           
  4173                           ;mcc.c: 73: SPI_Initialize();
  4174  0806  3194  2499  3188   	fcall	_SPI_Initialize
  4175                           
  4176                           ;mcc.c: 74: EUSART_Initialize();
  4177  0809  3195  25B7  3188   	fcall	_EUSART_Initialize
  4178                           
  4179                           ;mcc.c: 75: ADC_Initialize();
  4180  080C  3194  24AB  3188   	fcall	_ADC_Initialize
  4181                           
  4182                           ;mcc.c: 76: FVR_Initialize();
  4183  080F  3194  2484  3188   	fcall	_FVR_Initialize
  4184                           
  4185                           ;mcc.c: 77: TMR0_Initialize();
  4186  0812  3194  24F2         	fcall	_TMR0_Initialize
  4187  0814  0008               	return
  4188  0815                     __end_of_SYSTEM_Initialize:	
  4189                           
  4190                           	psect	text4
  4191  14F2                     __ptext4:	
  4192 ;; *************** function _TMR0_Initialize *****************
  4193 ;; Defined at:
  4194 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;		None
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;		None
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  1    wreg      void 
  4201 ;; Registers used:
  4202 ;;		wreg, status,2
  4203 ;; Tracked objects:
  4204 ;;		On entry : 0/0
  4205 ;;		On exit  : 0/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;Total ram usage:        1 bytes
  4213 ;; Hardware stack levels used:    1
  4214 ;; Hardware stack levels required when called:    3
  4215 ;; This function calls:
  4216 ;;		Nothing
  4217 ;; This function is called by:
  4218 ;;		_SYSTEM_Initialize
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           
  4223                           ;psect for function _TMR0_Initialize
  4224  14F2                     _TMR0_Initialize:	
  4225                           
  4226                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4227                           
  4228                           ;incstack = 0
  4229                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4230  14F2  0021               	movlb	1	; select bank1
  4231  14F3  0815               	movf	21,w	;volatile
  4232  14F4  39C0               	andlw	192
  4233  14F5  3817               	iorlw	23
  4234  14F6  0095               	movwf	21	;volatile
  4235                           
  4236                           ;tmr0.c: 73: TMR0 = 0xD9;
  4237  14F7  30D9               	movlw	217
  4238  14F8  0020               	movlb	0	; select bank0
  4239  14F9  0095               	movwf	21	;volatile
  4240                           
  4241                           ;tmr0.c: 76: timer0ReloadVal = 217;
  4242  14FA  30D9               	movlw	217
  4243  14FB  00A1               	movwf	??_TMR0_Initialize
  4244  14FC  0821               	movf	??_TMR0_Initialize,w
  4245  14FD  0021               	movlb	1	; select bank1
  4246  14FE  00EC               	movwf	_timer0ReloadVal^(0+128)	;volatile
  4247                           
  4248                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  4249  14FF  110B               	bcf	11,2	;volatile
  4250                           
  4251                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  4252  1500  168B               	bsf	11,5	;volatile
  4253  1501  0008               	return
  4254  1502                     __end_of_TMR0_Initialize:	
  4255                           
  4256                           	psect	text5
  4257  1499                     __ptext5:	
  4258 ;; *************** function _SPI_Initialize *****************
  4259 ;; Defined at:
  4260 ;;		line 64 in file "mcc_generated_files/spi.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;		None
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;		None
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  1    wreg      void 
  4267 ;; Registers used:
  4268 ;;		wreg, status,2
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;Total ram usage:        0 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    3
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_SYSTEM_Initialize
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _SPI_Initialize
  4290  1499                     _SPI_Initialize:	
  4291                           
  4292                           ;spi.c: 68: SSP1STAT = 0x00;
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4296  1499  0024               	movlb	4	; select bank4
  4297  149A  0194               	clrf	20	;volatile
  4298                           
  4299                           ;spi.c: 71: SSP1CON1 = 0x30;
  4300  149B  3030               	movlw	48
  4301  149C  0095               	movwf	21	;volatile
  4302                           
  4303                           ;spi.c: 74: SSP1ADD = 0x00;
  4304  149D  0192               	clrf	18	;volatile
  4305  149E  0008               	return
  4306  149F                     __end_of_SPI_Initialize:	
  4307                           
  4308                           	psect	text6
  4309  1705                     __ptext6:	
  4310 ;; *************** function _PIN_MANAGER_Initialize *****************
  4311 ;; Defined at:
  4312 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;Total ram usage:        0 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    3
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_SYSTEM_Initialize
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           
  4341                           ;psect for function _PIN_MANAGER_Initialize
  4342  1705                     _PIN_MANAGER_Initialize:	
  4343                           
  4344                           ;pin_manager.c: 51: LATA = 0x7B;
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4348  1705  307B               	movlw	123
  4349  1706  0022               	movlb	2	; select bank2
  4350  1707  008C               	movwf	12	;volatile
  4351                           
  4352                           ;pin_manager.c: 52: TRISA = 0x80;
  4353  1708  3080               	movlw	128
  4354  1709  0021               	movlb	1	; select bank1
  4355  170A  008C               	movwf	12	;volatile
  4356                           
  4357                           ;pin_manager.c: 53: ANSELA = 0x00;
  4358  170B  0023               	movlb	3	; select bank3
  4359  170C  018C               	clrf	12	;volatile
  4360                           
  4361                           ;pin_manager.c: 55: LATB = 0x00;
  4362  170D  0022               	movlb	2	; select bank2
  4363  170E  018D               	clrf	13	;volatile
  4364                           
  4365                           ;pin_manager.c: 56: TRISB = 0xFC;
  4366  170F  30FC               	movlw	252
  4367  1710  0021               	movlb	1	; select bank1
  4368  1711  008D               	movwf	13	;volatile
  4369                           
  4370                           ;pin_manager.c: 57: ANSELB = 0x10;
  4371  1712  3010               	movlw	16
  4372  1713  0023               	movlb	3	; select bank3
  4373  1714  008D               	movwf	13	;volatile
  4374                           
  4375                           ;pin_manager.c: 58: WPUB = 0x2C;
  4376  1715  302C               	movlw	44
  4377  1716  0024               	movlb	4	; select bank4
  4378  1717  008D               	movwf	13	;volatile
  4379                           
  4380                           ;pin_manager.c: 60: LATC = 0x07;
  4381  1718  3007               	movlw	7
  4382  1719  0022               	movlb	2	; select bank2
  4383  171A  008E               	movwf	14	;volatile
  4384                           
  4385                           ;pin_manager.c: 61: TRISC = 0xD0;
  4386  171B  30D0               	movlw	208
  4387  171C  0021               	movlb	1	; select bank1
  4388  171D  008E               	movwf	14	;volatile
  4389                           
  4390                           ;pin_manager.c: 62: ANSELC = 0x00;
  4391  171E  0023               	movlb	3	; select bank3
  4392  171F  018E               	clrf	14	;volatile
  4393                           
  4394                           ;pin_manager.c: 64: WPUE = 0x00;
  4395  1720  0024               	movlb	4	; select bank4
  4396  1721  0190               	clrf	16	;volatile
  4397                           
  4398                           ;pin_manager.c: 66: OPTION_REGbits.nWPUEN = 0x00;
  4399  1722  0021               	movlb	1	; select bank1
  4400  1723  1395               	bcf	21,7	;volatile
  4401                           
  4402                           ;pin_manager.c: 68: APFCON = 0x00;
  4403  1724  0022               	movlb	2	; select bank2
  4404  1725  019D               	clrf	29	;volatile
  4405  1726  0008               	return
  4406  1727                     __end_of_PIN_MANAGER_Initialize:	
  4407                           
  4408                           	psect	text7
  4409  07FB                     __ptext7:	
  4410 ;; *************** function _OSCILLATOR_Initialize *****************
  4411 ;; Defined at:
  4412 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    3
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_SYSTEM_Initialize
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           
  4441                           ;psect for function _OSCILLATOR_Initialize
  4442  07FB                     _OSCILLATOR_Initialize:	
  4443                           
  4444                           ;mcc.c: 82: OSCCON = 0x68;
  4445                           
  4446                           ;incstack = 0
  4447                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4448  07FB  3068               	movlw	104
  4449  07FC  0021               	movlb	1	; select bank1
  4450  07FD  0099               	movwf	25	;volatile
  4451                           
  4452                           ;mcc.c: 84: OSCSTAT = 0x00;
  4453  07FE  019A               	clrf	26	;volatile
  4454  07FF  0008               	return
  4455  0800                     __end_of_OSCILLATOR_Initialize:	
  4456                           
  4457                           	psect	text8
  4458  1484                     __ptext8:	
  4459 ;; *************** function _FVR_Initialize *****************
  4460 ;; Defined at:
  4461 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;		None
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;		None
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  1    wreg      void 
  4468 ;; Registers used:
  4469 ;;		wreg
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4479 ;;Total ram usage:        0 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    3
  4482 ;; This function calls:
  4483 ;;		Nothing
  4484 ;; This function is called by:
  4485 ;;		_SYSTEM_Initialize
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function _FVR_Initialize
  4491  1484                     _FVR_Initialize:	
  4492                           
  4493                           ;fvr.c: 60: FVRCON = 0x82;
  4494                           
  4495                           ;incstack = 0
  4496                           ; Regs used in _FVR_Initialize: [wreg]
  4497  1484  3082               	movlw	130
  4498  1485  0022               	movlb	2	; select bank2
  4499  1486  0097               	movwf	23	;volatile
  4500  1487  0008               	return
  4501  1488                     __end_of_FVR_Initialize:	
  4502                           
  4503                           	psect	text9
  4504  15B7                     __ptext9:	
  4505 ;; *************** function _EUSART_Initialize *****************
  4506 ;; Defined at:
  4507 ;;		line 78 in file "mcc_generated_files/eusart.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, status,2
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;Total ram usage:        1 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    3
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_SYSTEM_Initialize
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _EUSART_Initialize
  4537  15B7                     _EUSART_Initialize:	
  4538                           
  4539                           ;eusart.c: 80: PIE1bits.RCIE = 0;
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4543  15B7  0021               	movlb	1	; select bank1
  4544  15B8  1291               	bcf	17,5	;volatile
  4545                           
  4546                           ;eusart.c: 81: PIE1bits.TXIE = 0;
  4547  15B9  1211               	bcf	17,4	;volatile
  4548                           
  4549                           ;eusart.c: 86: BAUDCON = 0x48;
  4550  15BA  3048               	movlw	72
  4551  15BB  0023               	movlb	3	; select bank3
  4552  15BC  009F               	movwf	31	;volatile
  4553                           
  4554                           ;eusart.c: 89: RCSTA = 0x90;
  4555  15BD  3090               	movlw	144
  4556  15BE  009D               	movwf	29	;volatile
  4557                           
  4558                           ;eusart.c: 92: TXSTA = 0x26;
  4559  15BF  3026               	movlw	38
  4560  15C0  009E               	movwf	30	;volatile
  4561                           
  4562                           ;eusart.c: 95: SPBRGL = 0x33;
  4563  15C1  3033               	movlw	51
  4564  15C2  009B               	movwf	27	;volatile
  4565                           
  4566                           ;eusart.c: 98: SPBRGH = 0x00;
  4567  15C3  019C               	clrf	28	;volatile
  4568                           
  4569                           ;eusart.c: 102: eusartTxHead = 0;
  4570  15C4  0021               	movlb	1	; select bank1
  4571  15C5  01BC               	clrf	_eusartTxHead^(0+128)
  4572                           
  4573                           ;eusart.c: 103: eusartTxTail = 0;
  4574  15C6  01BD               	clrf	_eusartTxTail^(0+128)
  4575                           
  4576                           ;eusart.c: 104: eusartTxBufferRemaining = sizeof (eusartTxBuffer);
  4577  15C7  3008               	movlw	8
  4578  15C8  0020               	movlb	0	; select bank0
  4579  15C9  00A1               	movwf	??_EUSART_Initialize
  4580  15CA  0821               	movf	??_EUSART_Initialize,w
  4581  15CB  0021               	movlb	1	; select bank1
  4582  15CC  00EB               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  4583                           
  4584                           ;eusart.c: 106: eusartRxHead = 0;
  4585  15CD  01BA               	clrf	_eusartRxHead^(0+128)
  4586                           
  4587                           ;eusart.c: 107: eusartRxTail = 0;
  4588  15CE  01BB               	clrf	_eusartRxTail^(0+128)
  4589                           
  4590                           ;eusart.c: 108: eusartRxCount = 0;
  4591  15CF  01B9               	clrf	_eusartRxCount^(0+128)	;volatile
  4592                           
  4593                           ;eusart.c: 111: PIE1bits.RCIE = 1;
  4594  15D0  1691               	bsf	17,5	;volatile
  4595  15D1  0008               	return
  4596  15D2                     __end_of_EUSART_Initialize:	
  4597                           
  4598                           	psect	text10
  4599  14AB                     __ptext10:	
  4600 ;; *************** function _ADC_Initialize *****************
  4601 ;; Defined at:
  4602 ;;		line 65 in file "mcc_generated_files/adc.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg, status,2
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    3
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_SYSTEM_Initialize
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           
  4631                           ;psect for function _ADC_Initialize
  4632  14AB                     _ADC_Initialize:	
  4633                           
  4634                           ;adc.c: 69: ADCON0 = 0x01;
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4638  14AB  3001               	movlw	1
  4639  14AC  0021               	movlb	1	; select bank1
  4640  14AD  009D               	movwf	29	;volatile
  4641                           
  4642                           ;adc.c: 72: ADCON1 = 0xC3;
  4643  14AE  30C3               	movlw	195
  4644  14AF  009E               	movwf	30	;volatile
  4645                           
  4646                           ;adc.c: 75: ADRESL = 0x00;
  4647  14B0  019B               	clrf	27	;volatile
  4648                           
  4649                           ;adc.c: 78: ADRESH = 0x00;
  4650  14B1  019C               	clrf	28	;volatile
  4651  14B2  0008               	return
  4652  14B3                     __end_of_ADC_Initialize:	
  4653                           
  4654                           	psect	text11
  4655  05B4                     __ptext11:	
  4656 ;; *************** function _Key_Process *****************
  4657 ;; Defined at:
  4658 ;;		line 42 in file "mcc_generated_files/key.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;		None
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  i               2   73[BANK0 ] unsigned int 
  4663 ;;  data_temp       2   70[BANK0 ] unsigned int 
  4664 ;;  gKeyValue       1   72[BANK0 ] unsigned char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      void 
  4667 ;; Registers used:
  4668 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;Total ram usage:        6 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:   12
  4681 ;; This function calls:
  4682 ;;		_EUSART_Write
  4683 ;;		_FLASH_ReadWord
  4684 ;;		_Key_Scan
  4685 ;;		_Save_Write_time
  4686 ;;		_SendCmd_1621
  4687 ;;		_Set_finish_flag
  4688 ;;		_Set_start_flag
  4689 ;;		_Write_Flash_finish
  4690 ;;		_Write_Flash_head
  4691 ;;		_temperature_process
  4692 ;; This function is called by:
  4693 ;;		_main
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           
  4698                           ;psect for function _Key_Process
  4699  05B4                     _Key_Process:	
  4700                           
  4701                           ;key.c: 44: unsigned char gKeyValue=0;
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _Key_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4705  05B4  0020               	movlb	0	; select bank0
  4706  05B5  01E8               	clrf	Key_Process@gKeyValue
  4707                           
  4708                           ;key.c: 46: unsigned int i;
  4709                           ;key.c: 47: unsigned int data_temp;
  4710                           ;key.c: 49: LongPressSec = 0;
  4711  05B6  0021               	movlb	1	; select bank1
  4712  05B7  01B4               	clrf	_LongPressSec^(0+128)
  4713                           
  4714                           ;key.c: 50: gKeyValue=Key_Scan();
  4715  05B8  3197  2727  3185   	fcall	_Key_Scan
  4716  05BB  0020               	movlb	0	; select bank0
  4717  05BC  00E5               	movwf	??_Key_Process
  4718  05BD  0865               	movf	??_Key_Process,w
  4719  05BE  00E8               	movwf	Key_Process@gKeyValue
  4720                           
  4721                           ;key.c: 51: if(gKeyValue)
  4722  05BF  0868               	movf	Key_Process@gKeyValue,w
  4723  05C0  1903               	btfsc	3,2
  4724  05C1  0008               	return
  4725                           
  4726                           ;key.c: 52: {
  4727                           ;key.c: 53: do { LATA3 = 0; } while(0);
  4728  05C2  0022               	movlb	2	; select bank2
  4729  05C3  118C               	bcf	12,3	;volatile
  4730                           
  4731                           ;key.c: 54: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  4732  05C4  0021               	movlb	1	; select bank1
  4733  05C5  0336               	decf	_Record_flag^(0+128),w
  4734  05C6  1D03               	btfss	3,2
  4735  05C7  2E4D               	goto	l6079
  4736  05C8  0022               	movlb	2	; select bank2
  4737  05C9  120C               	bcf	12,4	;volatile
  4738                           
  4739                           ;key.c: 55: switch(gKeyValue)
  4740  05CA  2E4D               	goto	l6079
  4741  05CB                     l961:	
  4742                           ;key.c: 58: while( !(LongPressSec > 2 || RB5 == 1) ) asm("clrwdt");
  4743                           
  4744                           ;key.c: 56: {
  4745                           ;key.c: 57: case 0x01:
  4746                           
  4747  05CB  0064               	clrwdt	;# 
  4748  05CC                     l6027:	
  4749  05CC  3003               	movlw	3
  4750  05CD  0021               	movlb	1	; select bank1
  4751  05CE  0234               	subwf	_LongPressSec^(0+128),w
  4752  05CF  1803               	skipnc
  4753  05D0  2DD4               	goto	l6031
  4754  05D1  0020               	movlb	0	; select bank0
  4755  05D2  1E8D               	btfss	13,5	;volatile
  4756  05D3  2DCB               	goto	l961
  4757  05D4                     l6031:	
  4758                           
  4759                           ;key.c: 59: if(LongPressSec > 2)
  4760  05D4  3003               	movlw	3
  4761  05D5  0021               	movlb	1	; select bank1
  4762  05D6  0234               	subwf	_LongPressSec^(0+128),w
  4763  05D7  1C03               	skipc
  4764  05D8  2DE1               	goto	l965
  4765                           
  4766                           ;key.c: 60: {
  4767                           ;key.c: 61: do { LATA2 = 0; } while(0);
  4768  05D9  0022               	movlb	2	; select bank2
  4769  05DA  110C               	bcf	12,2	;volatile
  4770                           
  4771                           ;key.c: 62: do { LATA3 = 1; } while(0);
  4772  05DB  158C               	bsf	12,3	;volatile
  4773                           
  4774                           ;key.c: 63: SendCmd_1621(0x04);
  4775  05DC  3004               	movlw	4
  4776  05DD  3195  2551  3185   	fcall	_SendCmd_1621
  4777                           
  4778                           ;key.c: 64: }
  4779  05E0  2E10               	goto	l973
  4780  05E1                     l965:	
  4781                           
  4782                           ;key.c: 66: else
  4783                           ;key.c: 67: {
  4784                           ;key.c: 68: SWDTEN = 0;
  4785  05E1  1017               	bcf	23,0	;volatile
  4786                           
  4787                           ;key.c: 69: for(i=0x2000;i<0x2000+1000;i++)
  4788  05E2  3000               	movlw	0
  4789  05E3  0020               	movlb	0	; select bank0
  4790  05E4  00E9               	movwf	Key_Process@i
  4791  05E5  3020               	movlw	32
  4792  05E6  00EA               	movwf	Key_Process@i+1
  4793  05E7  3023               	movlw	35
  4794  05E8  026A               	subwf	Key_Process@i+1,w
  4795  05E9  30E8               	movlw	232
  4796  05EA  1903               	skipnz
  4797  05EB  0269               	subwf	Key_Process@i,w
  4798  05EC  1803               	btfsc	3,0
  4799  05ED  2E0F               	goto	l972
  4800  05EE                     l6039:	
  4801                           
  4802                           ;key.c: 70: {
  4803                           ;key.c: 71: data_temp = FLASH_ReadWord(i);
  4804  05EE  086A               	movf	Key_Process@i+1,w
  4805  05EF  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  4806  05F0  0869               	movf	Key_Process@i,w
  4807  05F1  00A1               	movwf	FLASH_ReadWord@flashAddr
  4808  05F2  3196  2663  3185   	fcall	_FLASH_ReadWord
  4809  05F5  0020               	movlb	0	; select bank0
  4810  05F6  0822               	movf	?_FLASH_ReadWord+1,w
  4811  05F7  00E7               	movwf	Key_Process@data_temp+1
  4812  05F8  0821               	movf	?_FLASH_ReadWord,w
  4813  05F9  00E6               	movwf	Key_Process@data_temp
  4814                           
  4815                           ;key.c: 72: EUSART_Write(data_temp>>8);
  4816  05FA  0867               	movf	Key_Process@data_temp+1,w
  4817  05FB  3194  24D2  3185   	fcall	_EUSART_Write
  4818                           
  4819                           ;key.c: 73: EUSART_Write(data_temp&0xff);
  4820  05FE  0020               	movlb	0	; select bank0
  4821  05FF  0866               	movf	Key_Process@data_temp,w
  4822  0600  3194  24D2  3185   	fcall	_EUSART_Write
  4823  0603  3001               	movlw	1
  4824  0604  0020               	movlb	0	; select bank0
  4825  0605  07E9               	addwf	Key_Process@i,f
  4826  0606  3000               	movlw	0
  4827  0607  3DEA               	addwfc	Key_Process@i+1,f
  4828  0608  3023               	movlw	35
  4829  0609  026A               	subwf	Key_Process@i+1,w
  4830  060A  30E8               	movlw	232
  4831  060B  1903               	skipnz
  4832  060C  0269               	subwf	Key_Process@i,w
  4833  060D  1C03               	skipc
  4834  060E  2DEE               	goto	l6039
  4835  060F                     l972:	
  4836  060F  0064               	clrwdt	;# 
  4837  0610                     l973:	
  4838                           ;key.c: 80: }
  4839                           ;key.c: 82: while(RB5 == 0) asm("clrwdt");
  4840                           
  4841  0610  0020               	movlb	0	; select bank0
  4842  0611  1A8D               	btfsc	13,5	;volatile
  4843  0612  0008               	return
  4844  0613  0064               	clrwdt	;# 
  4845  0614  2E10               	goto	l973
  4846  0615                     l979:	
  4847                           ;key.c: 85: while( !(LongPressSec > 2 || RA7 == 1) )asm("clrwdt");
  4848                           
  4849                           ;key.c: 84: case 0x02:
  4850                           
  4851                           ;key.c: 83: break;
  4852                           
  4853  0615  0064               	clrwdt	;# 
  4854  0616                     l6045:	
  4855  0616  3003               	movlw	3
  4856  0617  0021               	movlb	1	; select bank1
  4857  0618  0234               	subwf	_LongPressSec^(0+128),w
  4858  0619  1803               	skipnc
  4859  061A  2E1E               	goto	l6049
  4860  061B  0020               	movlb	0	; select bank0
  4861  061C  1F8C               	btfss	12,7	;volatile
  4862  061D  2E15               	goto	l979
  4863  061E                     l6049:	
  4864                           
  4865                           ;key.c: 86: if(LongPressSec > 2)
  4866  061E  3003               	movlw	3
  4867  061F  0021               	movlb	1	; select bank1
  4868  0620  0234               	subwf	_LongPressSec^(0+128),w
  4869  0621  1C03               	skipc
  4870  0622  2E40               	goto	l6073
  4871                           
  4872                           ;key.c: 87: {
  4873                           ;key.c: 88: if(Record_flag == 0)
  4874  0623  0836               	movf	_Record_flag^(0+128),w
  4875  0624  1D03               	btfss	3,2
  4876  0625  2E39               	goto	l6069
  4877                           
  4878                           ;key.c: 89: {
  4879                           ;key.c: 90: Set_start_flag();
  4880  0626  3194  2493  3185   	fcall	_Set_start_flag
  4881                           
  4882                           ;key.c: 91: Write_Flash_head();
  4883  0629  3188  2015  3185   	fcall	_Write_Flash_head
  4884                           
  4885                           ;key.c: 92: Save_Write_time();
  4886  062C  318E  2629  3185   	fcall	_Save_Write_time
  4887                           
  4888                           ;key.c: 93: Cur_temperature_time_ch1 = 0;
  4889  062F  0021               	movlb	1	; select bank1
  4890  0630  01B2               	clrf	_Cur_temperature_time_ch1^(0+128)
  4891                           
  4892                           ;key.c: 94: Cur_temperature_time_ch2 = 0;
  4893  0631  01B3               	clrf	_Cur_temperature_time_ch2^(0+128)
  4894                           
  4895                           ;key.c: 95: CH1_temperature = 0;
  4896  0632  01A6               	clrf	_CH1_temperature^(0+128)
  4897  0633  01A7               	clrf	(_CH1_temperature+1)^(0+128)
  4898                           
  4899                           ;key.c: 96: CH2_temperature = 0;
  4900  0634  01A8               	clrf	_CH2_temperature^(0+128)
  4901  0635  01A9               	clrf	(_CH2_temperature+1)^(0+128)
  4902                           
  4903                           ;key.c: 97: time_count = 0;
  4904  0636  0020               	movlb	0	; select bank0
  4905  0637  01EE               	clrf	_time_count
  4906                           
  4907                           ;key.c: 98: }
  4908  0638  2E48               	goto	l987
  4909  0639                     l6069:	
  4910                           
  4911                           ;key.c: 99: else
  4912                           ;key.c: 100: {
  4913                           ;key.c: 101: Set_finish_flag();
  4914  0639  3194  2488  3185   	fcall	_Set_finish_flag
  4915                           
  4916                           ;key.c: 102: Write_Flash_finish();
  4917  063C  3197  27D1  3185   	fcall	_Write_Flash_finish
  4918                           
  4919                           ;key.c: 103: }
  4920                           ;key.c: 104: }
  4921  063F  2E48               	goto	l987
  4922  0640                     l6073:	
  4923                           
  4924                           ;key.c: 105: else
  4925                           ;key.c: 106: {
  4926                           ;key.c: 107: time_count = 5;
  4927  0640  3005               	movlw	5
  4928  0641  0020               	movlb	0	; select bank0
  4929  0642  00E5               	movwf	??_Key_Process
  4930  0643  0865               	movf	??_Key_Process,w
  4931  0644  00EE               	movwf	_time_count
  4932                           
  4933                           ;key.c: 108: temperature_process();
  4934  0645  3189  2145  3185   	fcall	_temperature_process
  4935  0648                     l987:	
  4936                           ;key.c: 109: }
  4937                           ;key.c: 110: while(RA7 == 0)asm("clrwdt");
  4938                           
  4939  0648  0020               	movlb	0	; select bank0
  4940  0649  1B8C               	btfsc	12,7	;volatile
  4941  064A  0008               	return
  4942  064B  0064               	clrwdt	;# 
  4943  064C  2E48               	goto	l987
  4944  064D                     l6079:	
  4945                           ;key.c: 113: }
  4946                           
  4947                           ;key.c: 112: default:break;
  4948                           
  4949                           ;key.c: 111: break;
  4950                           
  4951  064D  0020               	movlb	0	; select bank0
  4952  064E  0868               	movf	Key_Process@gKeyValue,w
  4953                           
  4954                           ; Switch size 1, requested type "space"
  4955                           ; Number of cases is 2, Range of values is 1 to 2
  4956                           ; switch strategies available:
  4957                           ; Name         Instructions Cycles
  4958                           ; simple_byte            7     4 (average)
  4959                           ; direct_byte           13     9 (fixed)
  4960                           ; jumptable            263     9 (fixed)
  4961                           ;	Chosen strategy is simple_byte
  4962  064F  3A01               	xorlw	1	; case 1
  4963  0650  1903               	skipnz
  4964  0651  2DCC               	goto	l6027
  4965  0652  3A03               	xorlw	3	; case 2
  4966  0653  1903               	skipnz
  4967  0654  2E16               	goto	l6045
  4968  0655  2E57               	goto	l991
  4969  0656  0008               	return
  4970  0657                     l991:	
  4971  0657  0008               	return
  4972  0658                     __end_of_Key_Process:	
  4973                           
  4974                           	psect	text12
  4975  0945                     __ptext12:	
  4976 ;; *************** function _temperature_process *****************
  4977 ;; Defined at:
  4978 ;;		line 381 in file "mcc_generated_files/max31856.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      void 
  4985 ;; Registers used:
  4986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;Total ram usage:        0 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:   11
  4999 ;; This function calls:
  5000 ;;		_Two_Display
  5001 ;;		_one_temperature_trans
  5002 ;;		_temperature_display
  5003 ;;		_time_Display
  5004 ;; This function is called by:
  5005 ;;		_main
  5006 ;;		_Key_Process
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           
  5011                           ;psect for function _temperature_process
  5012  0945                     _temperature_process:	
  5013                           
  5014                           ;max31856.c: 383: switch(time_count)
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _temperature_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5018  0945  2969               	goto	l5929
  5019  0946                     l5897:	
  5020                           ;max31856.c: 384: {
  5021                           ;max31856.c: 385: case 0:
  5022                           
  5023                           
  5024                           ;max31856.c: 386: Two_Display(1);
  5025  0946  3001               	movlw	1
  5026  0947  3188  2074  3189   	fcall	_Two_Display
  5027                           
  5028                           ;max31856.c: 387: do { LATA1 = 1; } while(0);
  5029  094A  0022               	movlb	2	; select bank2
  5030  094B  148C               	bsf	12,1	;volatile
  5031                           
  5032                           ;max31856.c: 388: do { LATA0 = 1; } while(0);
  5033  094C  140C               	bsf	12,0	;volatile
  5034                           
  5035                           ;max31856.c: 389: do { LATA0 = 0; } while(0);
  5036  094D  100C               	bcf	12,0	;volatile
  5037                           
  5038                           ;max31856.c: 390: one_temperature_trans();
  5039  094E  318A  22B0         	fcall	_one_temperature_trans
  5040                           
  5041                           ;max31856.c: 391: do { LATA0 = 1; } while(0);
  5042  0950  0022               	movlb	2	; select bank2
  5043  0951  140C               	bsf	12,0	;volatile
  5044                           
  5045                           ;max31856.c: 392: break;
  5046  0952  0008               	return
  5047  0953                     l5909:	
  5048                           ;max31856.c: 393: case 1:
  5049                           
  5050                           
  5051                           ;max31856.c: 394: temperature_display();
  5052  0953  318A  222C         	fcall	_temperature_display
  5053                           
  5054                           ;max31856.c: 395: break;
  5055  0955  0008               	return
  5056  0956                     l5911:	
  5057                           ;max31856.c: 396: case 2:
  5058                           
  5059                           
  5060                           ;max31856.c: 397: Two_Display(2);
  5061  0956  3002               	movlw	2
  5062  0957  3188  2074  3189   	fcall	_Two_Display
  5063                           
  5064                           ;max31856.c: 398: do { LATA0 = 1; } while(0);
  5065  095A  0022               	movlb	2	; select bank2
  5066  095B  140C               	bsf	12,0	;volatile
  5067                           
  5068                           ;max31856.c: 399: do { LATA1 = 1; } while(0);
  5069  095C  148C               	bsf	12,1	;volatile
  5070                           
  5071                           ;max31856.c: 400: do { LATA1 = 0; } while(0);
  5072  095D  108C               	bcf	12,1	;volatile
  5073                           
  5074                           ;max31856.c: 401: one_temperature_trans();
  5075  095E  318A  22B0         	fcall	_one_temperature_trans
  5076                           
  5077                           ;max31856.c: 402: do { LATA1 = 1; } while(0);
  5078  0960  0022               	movlb	2	; select bank2
  5079  0961  148C               	bsf	12,1	;volatile
  5080                           
  5081                           ;max31856.c: 403: break;
  5082  0962  0008               	return
  5083  0963                     l5923:	
  5084                           ;max31856.c: 404: case 3:
  5085                           
  5086                           
  5087                           ;max31856.c: 405: temperature_display();
  5088  0963  318A  222C         	fcall	_temperature_display
  5089                           
  5090                           ;max31856.c: 406: break;
  5091  0965  0008               	return
  5092  0966                     l5925:	
  5093                           ;max31856.c: 407: case 5:
  5094                           
  5095                           
  5096                           ;max31856.c: 408: time_Display();
  5097  0966  3186  26FC         	fcall	_time_Display
  5098                           
  5099                           ;max31856.c: 411: }
  5100                           
  5101                           ;max31856.c: 410: default:break;
  5102                           
  5103                           ;max31856.c: 409: break;
  5104  0968  0008               	return
  5105  0969                     l5929:	
  5106  0969  0020               	movlb	0	; select bank0
  5107  096A  086E               	movf	_time_count,w
  5108                           
  5109                           ; Switch size 1, requested type "space"
  5110                           ; Number of cases is 5, Range of values is 0 to 5
  5111                           ; switch strategies available:
  5112                           ; Name         Instructions Cycles
  5113                           ; simple_byte           16     9 (average)
  5114                           ; direct_byte           18     6 (fixed)
  5115                           ; jumptable            260     6 (fixed)
  5116                           ;	Chosen strategy is simple_byte
  5117  096B  3A00               	xorlw	0	; case 0
  5118  096C  1903               	skipnz
  5119  096D  2946               	goto	l5897
  5120  096E  3A01               	xorlw	1	; case 1
  5121  096F  1903               	skipnz
  5122  0970  2953               	goto	l5909
  5123  0971  3A03               	xorlw	3	; case 2
  5124  0972  1903               	skipnz
  5125  0973  2956               	goto	l5911
  5126  0974  3A01               	xorlw	1	; case 3
  5127  0975  1903               	skipnz
  5128  0976  2963               	goto	l5923
  5129  0977  3A06               	xorlw	6	; case 5
  5130  0978  1903               	skipnz
  5131  0979  2966               	goto	l5925
  5132  097A  297B               	goto	l663
  5133  097B                     l663:	
  5134  097B  0008               	return
  5135  097C                     __end_of_temperature_process:	
  5136                           
  5137                           	psect	text13
  5138  06FC                     __ptext13:	
  5139 ;; *************** function _time_Display *****************
  5140 ;; Defined at:
  5141 ;;		line 167 in file "mcc_generated_files/ht1621.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;		None
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  num             4   25[BANK0 ] unsigned char [4]
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      void 
  5148 ;; Registers used:
  5149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5158 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5159 ;;Total ram usage:        7 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    6
  5162 ;; This function calls:
  5163 ;;		_Bq32k_Rtc_Read_Time
  5164 ;;		_WriteAll_1621
  5165 ;;		___awdiv
  5166 ;;		___awmod
  5167 ;; This function is called by:
  5168 ;;		_temperature_process
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function _time_Display
  5174  06FC                     _time_Display:	
  5175                           
  5176                           ;ht1621.c: 169: unsigned char num[4]={0};
  5177                           
  5178                           ;incstack = 0
  5179                           ; Regs used in _time_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5180  06FC  0022               	movlb	2	; select bank2
  5181  06FD  083B               	movf	(time_Display@F2138+3)^(0+256),w
  5182  06FE  0020               	movlb	0	; select bank0
  5183  06FF  00BC               	movwf	time_Display@num+3
  5184  0700  0022               	movlb	2	; select bank2
  5185  0701  083A               	movf	(time_Display@F2138+2)^(0+256),w
  5186  0702  0020               	movlb	0	; select bank0
  5187  0703  00BB               	movwf	time_Display@num+2
  5188  0704  0022               	movlb	2	; select bank2
  5189  0705  0839               	movf	(time_Display@F2138+1)^(0+256),w
  5190  0706  0020               	movlb	0	; select bank0
  5191  0707  00BA               	movwf	time_Display@num+1
  5192  0708  0022               	movlb	2	; select bank2
  5193  0709  0838               	movf	time_Display@F2138^(0+256),w
  5194  070A  0020               	movlb	0	; select bank0
  5195  070B  00B9               	movwf	time_Display@num
  5196                           
  5197                           ;ht1621.c: 170: Bq32k_Rtc_Read_Time(&rtc_tm);
  5198  070C  30E0               	movlw	(low (_rtc_tm| 0))& (0+255)
  5199  070D  318C  24F4  3186   	fcall	_Bq32k_Rtc_Read_Time
  5200                           
  5201                           ;ht1621.c: 171: num[0] = Dis_TAB[rtc_tm.hours / 10];
  5202  0710  300A               	movlw	10
  5203  0711  0020               	movlb	0	; select bank0
  5204  0712  00A1               	movwf	___awdiv@divisor
  5205  0713  3000               	movlw	0
  5206  0714  00A2               	movwf	___awdiv@divisor+1
  5207  0715  0021               	movlb	1	; select bank1
  5208  0716  0862               	movf	(_rtc_tm^(0+128)+2),w
  5209  0717  0020               	movlb	0	; select bank0
  5210  0718  00B6               	movwf	??_time_Display
  5211  0719  01B7               	clrf	??_time_Display+1
  5212  071A  0836               	movf	??_time_Display,w
  5213  071B  00A3               	movwf	___awdiv@dividend
  5214  071C  0837               	movf	??_time_Display+1,w
  5215  071D  00A4               	movwf	___awdiv@dividend+1
  5216  071E  318B  2398  3186   	fcall	___awdiv
  5217  0721  0020               	movlb	0	; select bank0
  5218  0722  0822               	movf	?___awdiv+1,w
  5219  0723  0085               	movwf	5
  5220  0724  0821               	movf	?___awdiv,w
  5221  0725  0084               	movwf	4
  5222  0726  3000               	movlw	low (_Dis_TAB| (0+32768))
  5223  0727  0784               	addwf	4,f
  5224  0728  3098               	movlw	high (_Dis_TAB| (0+32768))
  5225  0729  3D85               	addwfc	5,f
  5226  072A  0800               	movf	0,w	;code access
  5227  072B  00B8               	movwf	??_time_Display+2
  5228  072C  0838               	movf	??_time_Display+2,w
  5229  072D  00B9               	movwf	time_Display@num
  5230                           
  5231                           ;ht1621.c: 172: num[0] |= 0x08;
  5232  072E  15B9               	bsf	time_Display@num,3
  5233                           
  5234                           ;ht1621.c: 173: num[1] = Dis_TAB[rtc_tm.hours % 10];
  5235  072F  300A               	movlw	10
  5236  0730  00A1               	movwf	___awmod@divisor
  5237  0731  3000               	movlw	0
  5238  0732  00A2               	movwf	___awmod@divisor+1
  5239  0733  0021               	movlb	1	; select bank1
  5240  0734  0862               	movf	(_rtc_tm^(0+128)+2),w
  5241  0735  0020               	movlb	0	; select bank0
  5242  0736  00B6               	movwf	??_time_Display
  5243  0737  01B7               	clrf	??_time_Display+1
  5244  0738  0836               	movf	??_time_Display,w
  5245  0739  00A3               	movwf	___awmod@dividend
  5246  073A  0837               	movf	??_time_Display+1,w
  5247  073B  00A4               	movwf	___awmod@dividend+1
  5248  073C  318A  226A  3186   	fcall	___awmod
  5249  073F  0020               	movlb	0	; select bank0
  5250  0740  0822               	movf	?___awmod+1,w
  5251  0741  0085               	movwf	5
  5252  0742  0821               	movf	?___awmod,w
  5253  0743  0084               	movwf	4
  5254  0744  3000               	movlw	low (_Dis_TAB| (0+32768))
  5255  0745  0784               	addwf	4,f
  5256  0746  3098               	movlw	high (_Dis_TAB| (0+32768))
  5257  0747  3D85               	addwfc	5,f
  5258  0748  0800               	movf	0,w	;code access
  5259  0749  00B8               	movwf	??_time_Display+2
  5260  074A  0838               	movf	??_time_Display+2,w
  5261  074B  00BA               	movwf	time_Display@num+1
  5262                           
  5263                           ;ht1621.c: 174: num[2] = Dis_TAB[rtc_tm.minutes / 10];
  5264  074C  300A               	movlw	10
  5265  074D  00A1               	movwf	___awdiv@divisor
  5266  074E  3000               	movlw	0
  5267  074F  00A2               	movwf	___awdiv@divisor+1
  5268  0750  0021               	movlb	1	; select bank1
  5269  0751  0861               	movf	(_rtc_tm^(0+128)+1),w
  5270  0752  0020               	movlb	0	; select bank0
  5271  0753  00B6               	movwf	??_time_Display
  5272  0754  01B7               	clrf	??_time_Display+1
  5273  0755  0836               	movf	??_time_Display,w
  5274  0756  00A3               	movwf	___awdiv@dividend
  5275  0757  0837               	movf	??_time_Display+1,w
  5276  0758  00A4               	movwf	___awdiv@dividend+1
  5277  0759  318B  2398  3186   	fcall	___awdiv
  5278  075C  0020               	movlb	0	; select bank0
  5279  075D  0822               	movf	?___awdiv+1,w
  5280  075E  0085               	movwf	5
  5281  075F  0821               	movf	?___awdiv,w
  5282  0760  0084               	movwf	4
  5283  0761  3000               	movlw	low (_Dis_TAB| (0+32768))
  5284  0762  0784               	addwf	4,f
  5285  0763  3098               	movlw	high (_Dis_TAB| (0+32768))
  5286  0764  3D85               	addwfc	5,f
  5287  0765  0800               	movf	0,w	;code access
  5288  0766  00B8               	movwf	??_time_Display+2
  5289  0767  0838               	movf	??_time_Display+2,w
  5290  0768  00BB               	movwf	time_Display@num+2
  5291                           
  5292                           ;ht1621.c: 175: num[3] = Dis_TAB[rtc_tm.minutes % 10];
  5293  0769  300A               	movlw	10
  5294  076A  00A1               	movwf	___awmod@divisor
  5295  076B  3000               	movlw	0
  5296  076C  00A2               	movwf	___awmod@divisor+1
  5297  076D  0021               	movlb	1	; select bank1
  5298  076E  0861               	movf	(_rtc_tm^(0+128)+1),w
  5299  076F  0020               	movlb	0	; select bank0
  5300  0770  00B6               	movwf	??_time_Display
  5301  0771  01B7               	clrf	??_time_Display+1
  5302  0772  0836               	movf	??_time_Display,w
  5303  0773  00A3               	movwf	___awmod@dividend
  5304  0774  0837               	movf	??_time_Display+1,w
  5305  0775  00A4               	movwf	___awmod@dividend+1
  5306  0776  318A  226A  3186   	fcall	___awmod
  5307  0779  0020               	movlb	0	; select bank0
  5308  077A  0822               	movf	?___awmod+1,w
  5309  077B  0085               	movwf	5
  5310  077C  0821               	movf	?___awmod,w
  5311  077D  0084               	movwf	4
  5312  077E  3000               	movlw	low (_Dis_TAB| (0+32768))
  5313  077F  0784               	addwf	4,f
  5314  0780  3098               	movlw	high (_Dis_TAB| (0+32768))
  5315  0781  3D85               	addwfc	5,f
  5316  0782  0800               	movf	0,w	;code access
  5317  0783  00B8               	movwf	??_time_Display+2
  5318  0784  0838               	movf	??_time_Display+2,w
  5319  0785  00BC               	movwf	time_Display@num+3
  5320                           
  5321                           ;ht1621.c: 176: WriteAll_1621(0, num, 4);
  5322  0786  3039               	movlw	low time_Display@num
  5323  0787  00A5               	movwf	WriteAll_1621@p
  5324  0788  3000               	movlw	high time_Display@num
  5325  0789  00A6               	movwf	WriteAll_1621@p+1
  5326  078A  3004               	movlw	4
  5327  078B  00B6               	movwf	??_time_Display
  5328  078C  0836               	movf	??_time_Display,w
  5329  078D  00A7               	movwf	WriteAll_1621@cnt
  5330  078E  3000               	movlw	0
  5331  078F  3188  20A5         	fcall	_WriteAll_1621
  5332  0791  0008               	return
  5333  0792                     __end_of_time_Display:	
  5334                           
  5335                           	psect	text14
  5336  0A2C                     __ptext14:	
  5337 ;; *************** function _temperature_display *****************
  5338 ;; Defined at:
  5339 ;;		line 343 in file "mcc_generated_files/max31856.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;		None
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  1    wreg      void 
  5346 ;; Registers used:
  5347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;Total ram usage:        1 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; Hardware stack levels required when called:   10
  5360 ;; This function calls:
  5361 ;;		_Tc_Display
  5362 ;;		_err_Display
  5363 ;;		_maxim_31856_write_register
  5364 ;;		_maxim_clear_fault_status
  5365 ;;		_tc_temperature_trans
  5366 ;; This function is called by:
  5367 ;;		_temperature_process
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           
  5372                           ;psect for function _temperature_display
  5373  0A2C                     _temperature_display:	
  5374                           
  5375                           ;max31856.c: 345: if(uch_sr==(uint8_t)0x00)
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _temperature_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5379  0A2C  0021               	movlb	1	; select bank1
  5380  0A2D  0849               	movf	_uch_sr^(0+128),w
  5381  0A2E  1D03               	btfss	3,2
  5382  0A2F  2A45               	goto	l5749
  5383                           
  5384                           ;max31856.c: 346: {
  5385                           ;max31856.c: 347: tc_temperature_trans();
  5386  0A30  3180  2051  318A   	fcall	_tc_temperature_trans
  5387                           
  5388                           ;max31856.c: 348: Tc_Display();
  5389  0A33  3184  24E3  318A   	fcall	_Tc_Display
  5390                           
  5391                           ;max31856.c: 349: if(time_count == 1)
  5392  0A36  0020               	movlb	0	; select bank0
  5393  0A37  036E               	decf	_time_count,w
  5394  0A38  1D03               	btfss	3,2
  5395  0A39  2A3D               	goto	l5745
  5396                           
  5397                           ;max31856.c: 350: {
  5398                           ;max31856.c: 351: CH1_state = 0;
  5399  0A3A  0021               	movlb	1	; select bank1
  5400  0A3B  01B0               	clrf	_CH1_state^(0+128)
  5401                           
  5402                           ;max31856.c: 352: }
  5403  0A3C  0008               	return
  5404  0A3D                     l5745:	
  5405                           
  5406                           ;max31856.c: 353: else if(time_count == 3)
  5407  0A3D  3003               	movlw	3
  5408  0A3E  0020               	movlb	0	; select bank0
  5409  0A3F  066E               	xorwf	_time_count,w
  5410  0A40  1D03               	btfss	3,2
  5411  0A41  0008               	return
  5412                           
  5413                           ;max31856.c: 354: {
  5414                           ;max31856.c: 355: CH2_state = 0;
  5415  0A42  0021               	movlb	1	; select bank1
  5416  0A43  01B1               	clrf	_CH2_state^(0+128)
  5417                           
  5418                           ;max31856.c: 356: }
  5419                           ;max31856.c: 357: }
  5420  0A44  0008               	return
  5421  0A45                     l5749:	
  5422                           
  5423                           ;max31856.c: 358: else
  5424                           ;max31856.c: 359: {
  5425                           ;max31856.c: 360: if(time_count == 1)
  5426  0A45  0020               	movlb	0	; select bank0
  5427  0A46  036E               	decf	_time_count,w
  5428  0A47  1D03               	btfss	3,2
  5429  0A48  2A4D               	goto	l5753
  5430                           
  5431                           ;max31856.c: 361: {
  5432                           ;max31856.c: 362: CH1_state = 1;
  5433  0A49  0021               	movlb	1	; select bank1
  5434  0A4A  01B0               	clrf	_CH1_state^(0+128)
  5435  0A4B  0AB0               	incf	_CH1_state^(0+128),f
  5436                           
  5437                           ;max31856.c: 363: }
  5438  0A4C  2A55               	goto	l5757
  5439  0A4D                     l5753:	
  5440                           
  5441                           ;max31856.c: 364: else if(time_count == 3)
  5442  0A4D  3003               	movlw	3
  5443  0A4E  0020               	movlb	0	; select bank0
  5444  0A4F  066E               	xorwf	_time_count,w
  5445  0A50  1D03               	btfss	3,2
  5446  0A51  2A55               	goto	l5757
  5447                           
  5448                           ;max31856.c: 365: {
  5449                           ;max31856.c: 366: CH2_state = 1;
  5450  0A52  0021               	movlb	1	; select bank1
  5451  0A53  01B1               	clrf	_CH2_state^(0+128)
  5452  0A54  0AB1               	incf	_CH2_state^(0+128),f
  5453  0A55                     l5757:	
  5454                           
  5455                           ;max31856.c: 367: }
  5456                           ;max31856.c: 368: err_Display();
  5457  0A55  3197  274A  318A   	fcall	_err_Display
  5458                           
  5459                           ;max31856.c: 369: maxim_31856_write_register(0x82, 0xFF);
  5460  0A58  30FF               	movlw	255
  5461  0A59  0020               	movlb	0	; select bank0
  5462  0A5A  00E4               	movwf	??_temperature_display
  5463  0A5B  0864               	movf	??_temperature_display,w
  5464  0A5C  00A2               	movwf	maxim_31856_write_register@uch_register_value
  5465  0A5D  3082               	movlw	130
  5466  0A5E  3194  24E2  318A   	fcall	_maxim_31856_write_register
  5467                           
  5468                           ;max31856.c: 370: maxim_clear_fault_status();
  5469  0A61  3195  2514  318A   	fcall	_maxim_clear_fault_status
  5470                           
  5471                           ;max31856.c: 371: maxim_31856_write_register(0x82, 0x00);
  5472  0A64  0020               	movlb	0	; select bank0
  5473  0A65  01A2               	clrf	maxim_31856_write_register@uch_register_value
  5474  0A66  3082               	movlw	130
  5475  0A67  3194  24E2         	fcall	_maxim_31856_write_register
  5476  0A69  0008               	return
  5477  0A6A                     __end_of_temperature_display:	
  5478                           
  5479                           	psect	text15
  5480  0051                     __ptext15:	
  5481 ;; *************** function _tc_temperature_trans *****************
  5482 ;; Defined at:
  5483 ;;		line 168 in file "mcc_generated_files/max31856.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  temperature_    2   66[BANK0 ] unsigned int 
  5488 ;;  var_time        2   64[BANK0 ] unsigned int 
  5489 ;;  temperature_    2   62[BANK0 ] unsigned int 
  5490 ;;  temperature_    2   60[BANK0 ] unsigned int 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      void 
  5493 ;; Registers used:
  5494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;Total ram usage:       12 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    9
  5507 ;; This function calls:
  5508 ;;		_Calculate_Time
  5509 ;;		_Save_Write_word
  5510 ;; This function is called by:
  5511 ;;		_temperature_display
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           
  5516                           ;psect for function _tc_temperature_trans
  5517  0051                     _tc_temperature_trans:	
  5518                           
  5519                           ;max31856.c: 170: unsigned int temperature_absolute = 0;
  5520                           
  5521                           ;incstack = 0
  5522                           ; Regs used in _tc_temperature_trans: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5523  0051  0020               	movlb	0	; select bank0
  5524  0052  01DE               	clrf	tc_temperature_trans@temperature_absolute
  5525  0053  01DF               	clrf	tc_temperature_trans@temperature_absolute+1
  5526                           
  5527                           ;max31856.c: 171: unsigned int temperature_temp = 0;
  5528  0054  01E2               	clrf	tc_temperature_trans@temperature_temp
  5529  0055  01E3               	clrf	tc_temperature_trans@temperature_temp+1
  5530                           
  5531                           ;max31856.c: 172: unsigned int temperature_back = 0;
  5532  0056  01DC               	clrf	tc_temperature_trans@temperature_back
  5533  0057  01DD               	clrf	tc_temperature_trans@temperature_back+1
  5534                           
  5535                           ;max31856.c: 173: unsigned int var_time=0;
  5536  0058  01E0               	clrf	tc_temperature_trans@var_time
  5537  0059  01E1               	clrf	tc_temperature_trans@var_time+1
  5538                           
  5539                           ;max31856.c: 174: temperature_value = 0;
  5540  005A  3000               	movlw	0
  5541  005B  0021               	movlb	1	; select bank1
  5542  005C  00A3               	movwf	(_temperature_value+3)^(0+128)
  5543  005D  3000               	movlw	0
  5544  005E  00A2               	movwf	(_temperature_value+2)^(0+128)
  5545  005F  3000               	movlw	0
  5546  0060  00A1               	movwf	(_temperature_value+1)^(0+128)
  5547  0061  3000               	movlw	0
  5548  0062  00A0               	movwf	_temperature_value^(0+128)
  5549                           
  5550                           ;max31856.c: 175: temperature_value = (((uch_ltcbh&0x3f)<<8) | (uch_ltcbm) )>>1;
  5551  0063  303F               	movlw	63
  5552  0064  0545               	andwf	_uch_ltcbh^(0+128),w
  5553  0065  0020               	movlb	0	; select bank0
  5554  0066  00D8               	movwf	??_tc_temperature_trans
  5555  0067  0858               	movf	??_tc_temperature_trans,w
  5556  0068  00DA               	movwf	??_tc_temperature_trans+2
  5557  0069  0021               	movlb	1	; select bank1
  5558  006A  0847               	movf	_uch_ltcbm^(0+128),w
  5559  006B  0020               	movlb	0	; select bank0
  5560  006C  00D9               	movwf	??_tc_temperature_trans+1
  5561  006D  0D5A               	rlf	??_tc_temperature_trans+2,w
  5562  006E  0CDA               	rrf	??_tc_temperature_trans+2,f
  5563  006F  0CD9               	rrf	??_tc_temperature_trans+1,f
  5564  0070  0859               	movf	??_tc_temperature_trans+1,w
  5565  0071  0021               	movlb	1	; select bank1
  5566  0072  00A0               	movwf	_temperature_value^(0+128)
  5567  0073  0020               	movlb	0	; select bank0
  5568  0074  085A               	movf	??_tc_temperature_trans+2,w
  5569  0075  0021               	movlb	1	; select bank1
  5570  0076  00A1               	movwf	(_temperature_value+1)^(0+128)
  5571  0077  0D89               	rlf	9,f
  5572  0078  3B89               	subwfb	9,f
  5573  0079  0989               	comf	9,f
  5574  007A  00A2               	movwf	(_temperature_value+2)^(0+128)
  5575  007B  00A3               	movwf	(_temperature_value+3)^(0+128)
  5576                           
  5577                           ;max31856.c: 176: if(uch_ltcbh & 0x80) temperature_value |=0x2000;
  5578  007C  1BC5               	btfsc	_uch_ltcbh^(0+128),7
  5579  007D  16A1               	bsf	(_temperature_value^(0+128)+1),5
  5580                           
  5581                           ;max31856.c: 177: temperature_temp = temperature_value;
  5582  007E  0821               	movf	(_temperature_value+1)^(0+128),w
  5583  007F  0020               	movlb	0	; select bank0
  5584  0080  00E3               	movwf	tc_temperature_trans@temperature_temp+1
  5585  0081  0021               	movlb	1	; select bank1
  5586  0082  0820               	movf	_temperature_value^(0+128),w
  5587  0083  0020               	movlb	0	; select bank0
  5588  0084  00E2               	movwf	tc_temperature_trans@temperature_temp
  5589                           
  5590                           ;max31856.c: 180: if(time_count == 1 && Record_flag == 1)
  5591  0085  036E               	decf	_time_count,w
  5592  0086  1D03               	btfss	3,2
  5593  0087  2936               	goto	l5539
  5594  0088  0021               	movlb	1	; select bank1
  5595  0089  0336               	decf	_Record_flag^(0+128),w
  5596  008A  1D03               	btfss	3,2
  5597  008B  2936               	goto	l5539
  5598                           
  5599                           ;max31856.c: 181: {
  5600                           ;max31856.c: 182: temperature_back = CH1_temperature;
  5601  008C  0827               	movf	(_CH1_temperature+1)^(0+128),w
  5602  008D  0020               	movlb	0	; select bank0
  5603  008E  00DD               	movwf	tc_temperature_trans@temperature_back+1
  5604  008F  0021               	movlb	1	; select bank1
  5605  0090  0826               	movf	_CH1_temperature^(0+128),w
  5606  0091  0020               	movlb	0	; select bank0
  5607  0092  00DC               	movwf	tc_temperature_trans@temperature_back
  5608                           
  5609                           ;max31856.c: 183: if( CH1_temperature & 0x2000 != temperature_temp & 0x2000)
  5610  0093  3020               	movlw	32
  5611  0094  0663               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5612  0095  0462               	iorwf	tc_temperature_trans@temperature_temp,w
  5613  0096  1903               	btfsc	3,2
  5614  0097  289A               	goto	u4970
  5615  0098  3001               	movlw	1
  5616  0099  289B               	goto	u4980
  5617  009A                     u4970:	
  5618  009A  3000               	movlw	0
  5619  009B                     u4980:	
  5620  009B  00D8               	movwf	??_tc_temperature_trans
  5621  009C  01D9               	clrf	??_tc_temperature_trans+1
  5622  009D  0021               	movlb	1	; select bank1
  5623  009E  0826               	movf	_CH1_temperature^(0+128),w
  5624  009F  0020               	movlb	0	; select bank0
  5625  00A0  0558               	andwf	??_tc_temperature_trans,w
  5626  00A1  00DA               	movwf	??_tc_temperature_trans+2
  5627  00A2  0021               	movlb	1	; select bank1
  5628  00A3  0827               	movf	(_CH1_temperature+1)^(0+128),w
  5629  00A4  0020               	movlb	0	; select bank0
  5630  00A5  0559               	andwf	??_tc_temperature_trans+1,w
  5631  00A6  00DB               	movwf	??_tc_temperature_trans+3
  5632  00A7  1ADB               	btfsc	??_tc_temperature_trans+3,5
  5633  00A8  2902               	goto	L6
  5634                           
  5635                           ;max31856.c: 196: else
  5636                           ;max31856.c: 197: {
  5637                           ;max31856.c: 198: if(CH1_temperature & 0x2000) CH1_temperature=0x3FFF-CH1_temperature + 
      +                          1 ;
  5638                           
  5639                           ;max31856.c: 195: }
  5640                           
  5641                           ;max31856.c: 194: CH1_temperature = temperature_value;
  5642                           
  5643                           ;max31856.c: 193: Cur_temperature_time_ch1 = 0;
  5644                           
  5645                           ;max31856.c: 192: Save_Write_word(temperature_value);
  5646                           
  5647                           ;max31856.c: 191: Save_Write_word(var_time);
  5648                           
  5649                           ;max31856.c: 189: var_time |= 0x2000;
  5650                           
  5651                           ;max31856.c: 187: if(CH1_state == 1) var_time |= 0x400;
  5652                           
  5653                           ;max31856.c: 186: var_time |= 0x100;
  5654                           
  5655                           ;max31856.c: 184: {
  5656                           ;max31856.c: 185: var_time = Calculate_Time();
  5657  00A9  0021               	movlb	1	; select bank1
  5658  00AA  1EA7               	btfss	(_CH1_temperature+1)^(0+128),5
  5659  00AB  28BF               	goto	l5511
  5660  00AC  0926               	comf	_CH1_temperature^(0+128),w
  5661  00AD  0020               	movlb	0	; select bank0
  5662  00AE  00D8               	movwf	??_tc_temperature_trans
  5663  00AF  0021               	movlb	1	; select bank1
  5664  00B0  0927               	comf	(_CH1_temperature+1)^(0+128),w
  5665  00B1  0020               	movlb	0	; select bank0
  5666  00B2  00D9               	movwf	??_tc_temperature_trans+1
  5667  00B3  0AD8               	incf	??_tc_temperature_trans,f
  5668  00B4  1903               	skipnz
  5669  00B5  0AD9               	incf	??_tc_temperature_trans+1,f
  5670  00B6  0858               	movf	??_tc_temperature_trans,w
  5671  00B7  3E00               	addlw	0
  5672  00B8  0021               	movlb	1	; select bank1
  5673  00B9  00A6               	movwf	_CH1_temperature^(0+128)
  5674  00BA  3040               	movlw	64
  5675  00BB  0020               	movlb	0	; select bank0
  5676  00BC  3D59               	addwfc	??_tc_temperature_trans+1,w
  5677  00BD  0021               	movlb	1	; select bank1
  5678  00BE  00A7               	movwf	(_CH1_temperature+1)^(0+128)
  5679  00BF                     l5511:	
  5680                           
  5681                           ;max31856.c: 199: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  5682  00BF  0020               	movlb	0	; select bank0
  5683  00C0  1EE3               	btfss	tc_temperature_trans@temperature_temp+1,5
  5684  00C1  28CF               	goto	l5515
  5685  00C2  0962               	comf	tc_temperature_trans@temperature_temp,w
  5686  00C3  00D8               	movwf	??_tc_temperature_trans
  5687  00C4  0963               	comf	tc_temperature_trans@temperature_temp+1,w
  5688  00C5  00D9               	movwf	??_tc_temperature_trans+1
  5689  00C6  0AD8               	incf	??_tc_temperature_trans,f
  5690  00C7  1903               	skipnz
  5691  00C8  0AD9               	incf	??_tc_temperature_trans+1,f
  5692  00C9  0858               	movf	??_tc_temperature_trans,w
  5693  00CA  3E00               	addlw	0
  5694  00CB  00E2               	movwf	tc_temperature_trans@temperature_temp
  5695  00CC  3040               	movlw	64
  5696  00CD  3D59               	addwfc	??_tc_temperature_trans+1,w
  5697  00CE  00E3               	movwf	tc_temperature_trans@temperature_temp+1
  5698  00CF                     l5515:	
  5699                           
  5700                           ;max31856.c: 200: if( temperature_temp > CH1_temperature ) temperature_absolute = temper
      +                          ature_temp - CH1_temperature;
  5701  00CF  0863               	movf	tc_temperature_trans@temperature_temp+1,w
  5702  00D0  0021               	movlb	1	; select bank1
  5703  00D1  0227               	subwf	(_CH1_temperature+1)^(0+128),w
  5704  00D2  1D03               	skipz
  5705  00D3  28D8               	goto	u5035
  5706  00D4  0020               	movlb	0	; select bank0
  5707  00D5  0862               	movf	tc_temperature_trans@temperature_temp,w
  5708  00D6  0021               	movlb	1	; select bank1
  5709  00D7  0226               	subwf	_CH1_temperature^(0+128),w
  5710  00D8                     u5035:	
  5711  00D8  1803               	skipnc
  5712  00D9  28E9               	goto	l5519
  5713  00DA  0926               	comf	_CH1_temperature^(0+128),w
  5714  00DB  0020               	movlb	0	; select bank0
  5715  00DC  00D8               	movwf	??_tc_temperature_trans
  5716  00DD  0021               	movlb	1	; select bank1
  5717  00DE  0927               	comf	(_CH1_temperature+1)^(0+128),w
  5718  00DF  0020               	movlb	0	; select bank0
  5719  00E0  00D9               	movwf	??_tc_temperature_trans+1
  5720  00E1  0AD8               	incf	??_tc_temperature_trans,f
  5721  00E2  1903               	skipnz
  5722  00E3  0AD9               	incf	??_tc_temperature_trans+1,f
  5723  00E4  0862               	movf	tc_temperature_trans@temperature_temp,w
  5724  00E5  0758               	addwf	??_tc_temperature_trans,w
  5725  00E6  00DE               	movwf	tc_temperature_trans@temperature_absolute
  5726  00E7  0863               	movf	tc_temperature_trans@temperature_temp+1,w
  5727  00E8  28F9               	goto	L2
  5728  00E9                     l5519:	
  5729                           
  5730                           ;max31856.c: 201: else temperature_absolute = CH1_temperature - temperature_temp;
  5731  00E9  0020               	movlb	0	; select bank0
  5732  00EA  0962               	comf	tc_temperature_trans@temperature_temp,w
  5733  00EB  00D8               	movwf	??_tc_temperature_trans
  5734  00EC  0963               	comf	tc_temperature_trans@temperature_temp+1,w
  5735  00ED  00D9               	movwf	??_tc_temperature_trans+1
  5736  00EE  0AD8               	incf	??_tc_temperature_trans,f
  5737  00EF  1903               	skipnz
  5738  00F0  0AD9               	incf	??_tc_temperature_trans+1,f
  5739  00F1  0021               	movlb	1	; select bank1
  5740  00F2  0826               	movf	_CH1_temperature^(0+128),w
  5741  00F3  0020               	movlb	0	; select bank0
  5742  00F4  0758               	addwf	??_tc_temperature_trans,w
  5743  00F5  00DE               	movwf	tc_temperature_trans@temperature_absolute
  5744  00F6  0021               	movlb	1	; select bank1
  5745  00F7  0827               	movf	(_CH1_temperature+1)^(0+128),w
  5746  00F8  0020               	movlb	0	; select bank0
  5747  00F9                     L2:	
  5748  00F9  3D59               	addwfc	??_tc_temperature_trans+1,w
  5749  00FA  00DF               	movwf	tc_temperature_trans@temperature_absolute+1
  5750                           
  5751                           ;max31856.c: 202: if( temperature_absolute > 4)
  5752  00FB  3000               	movlw	0
  5753  00FC  025F               	subwf	tc_temperature_trans@temperature_absolute+1,w
  5754  00FD  3005               	movlw	5
  5755  00FE  1903               	skipnz
  5756  00FF  025E               	subwf	tc_temperature_trans@temperature_absolute,w
  5757  0100  1C03               	skipc
  5758  0101  292D               	goto	l5537
  5759  0102                     L6:	
  5760                           
  5761                           ;max31856.c: 203: {
  5762                           ;max31856.c: 204: var_time = Calculate_Time();
  5763  0102  3182  226B  3180   	fcall	_Calculate_Time
  5764  0105  0020               	movlb	0	; select bank0
  5765  0106  00D8               	movwf	??_tc_temperature_trans
  5766  0107  01D9               	clrf	??_tc_temperature_trans+1
  5767  0108  0858               	movf	??_tc_temperature_trans,w
  5768  0109  00E0               	movwf	tc_temperature_trans@var_time
  5769  010A  0859               	movf	??_tc_temperature_trans+1,w
  5770  010B  00E1               	movwf	tc_temperature_trans@var_time+1
  5771                           
  5772                           ;max31856.c: 205: var_time |= 0x100;
  5773  010C  1461               	bsf	tc_temperature_trans@var_time+1,0
  5774                           
  5775                           ;max31856.c: 206: if(CH1_state == 1) var_time |= 0x400;
  5776  010D  0021               	movlb	1	; select bank1
  5777  010E  0330               	decf	_CH1_state^(0+128),w
  5778  010F  1D03               	btfss	3,2
  5779  0110  2913               	goto	l591
  5780  0111  0020               	movlb	0	; select bank0
  5781  0112  1561               	bsf	tc_temperature_trans@var_time+1,2
  5782  0113                     l591:	
  5783                           
  5784                           ;max31856.c: 208: var_time |= 0x2000;
  5785  0113  0020               	movlb	0	; select bank0
  5786  0114  16E1               	bsf	tc_temperature_trans@var_time+1,5
  5787                           
  5788                           ;max31856.c: 210: Save_Write_word(var_time);
  5789  0115  0861               	movf	tc_temperature_trans@var_time+1,w
  5790  0116  00BD               	movwf	Save_Write_word@data+1
  5791  0117  0860               	movf	tc_temperature_trans@var_time,w
  5792  0118  00BC               	movwf	Save_Write_word@data
  5793  0119  3189  210F  3180   	fcall	_Save_Write_word
  5794                           
  5795                           ;max31856.c: 211: Save_Write_word(temperature_value);
  5796  011C  0021               	movlb	1	; select bank1
  5797  011D  0821               	movf	(_temperature_value+1)^(0+128),w
  5798  011E  0020               	movlb	0	; select bank0
  5799  011F  00BD               	movwf	Save_Write_word@data+1
  5800  0120  0021               	movlb	1	; select bank1
  5801  0121  0820               	movf	_temperature_value^(0+128),w
  5802  0122  0020               	movlb	0	; select bank0
  5803  0123  00BC               	movwf	Save_Write_word@data
  5804  0124  3189  210F  3180   	fcall	_Save_Write_word
  5805                           
  5806                           ;max31856.c: 212: Cur_temperature_time_ch1 = 0;
  5807  0127  0021               	movlb	1	; select bank1
  5808  0128  01B2               	clrf	_Cur_temperature_time_ch1^(0+128)
  5809                           
  5810                           ;max31856.c: 213: CH1_temperature = temperature_value;
  5811  0129  0821               	movf	(_temperature_value+1)^(0+128),w
  5812  012A  00A7               	movwf	(_CH1_temperature+1)^(0+128)
  5813  012B  0820               	movf	_temperature_value^(0+128),w
  5814  012C  2934               	goto	L3
  5815  012D                     l5537:	
  5816                           ;max31856.c: 214: }
  5817                           
  5818                           
  5819                           ;max31856.c: 215: else
  5820                           ;max31856.c: 216: {
  5821                           ;max31856.c: 217: CH1_temperature = temperature_back;
  5822  012D  0020               	movlb	0	; select bank0
  5823  012E  085D               	movf	tc_temperature_trans@temperature_back+1,w
  5824  012F  0021               	movlb	1	; select bank1
  5825  0130  00A7               	movwf	(_CH1_temperature+1)^(0+128)
  5826  0131  0020               	movlb	0	; select bank0
  5827  0132  085C               	movf	tc_temperature_trans@temperature_back,w
  5828  0133  0021               	movlb	1	; select bank1
  5829  0134                     L3:	
  5830  0134  00A6               	movwf	_CH1_temperature^(0+128)
  5831                           
  5832                           ;max31856.c: 218: }
  5833                           ;max31856.c: 219: }
  5834                           ;max31856.c: 221: }
  5835  0135  29E8               	goto	l593
  5836  0136                     l5539:	
  5837                           
  5838                           ;max31856.c: 222: else if( time_count == 3 && Record_flag == 1)
  5839  0136  3003               	movlw	3
  5840  0137  0020               	movlb	0	; select bank0
  5841  0138  066E               	xorwf	_time_count,w
  5842  0139  1D03               	btfss	3,2
  5843  013A  29E8               	goto	l593
  5844  013B  0021               	movlb	1	; select bank1
  5845  013C  0336               	decf	_Record_flag^(0+128),w
  5846  013D  1D03               	btfss	3,2
  5847  013E  29E8               	goto	l593
  5848                           
  5849                           ;max31856.c: 223: {
  5850                           ;max31856.c: 224: temperature_back = CH2_temperature;
  5851  013F  0829               	movf	(_CH2_temperature+1)^(0+128),w
  5852  0140  0020               	movlb	0	; select bank0
  5853  0141  00DD               	movwf	tc_temperature_trans@temperature_back+1
  5854  0142  0021               	movlb	1	; select bank1
  5855  0143  0828               	movf	_CH2_temperature^(0+128),w
  5856  0144  0020               	movlb	0	; select bank0
  5857  0145  00DC               	movwf	tc_temperature_trans@temperature_back
  5858                           
  5859                           ;max31856.c: 225: if( CH2_temperature & 0x2000 != temperature_temp & 0x2000)
  5860  0146  3020               	movlw	32
  5861  0147  0663               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5862  0148  0462               	iorwf	tc_temperature_trans@temperature_temp,w
  5863  0149  1903               	btfsc	3,2
  5864  014A  294D               	goto	u5080
  5865  014B  3001               	movlw	1
  5866  014C  294E               	goto	u5090
  5867  014D                     u5080:	
  5868  014D  3000               	movlw	0
  5869  014E                     u5090:	
  5870  014E  00D8               	movwf	??_tc_temperature_trans
  5871  014F  01D9               	clrf	??_tc_temperature_trans+1
  5872  0150  0021               	movlb	1	; select bank1
  5873  0151  0828               	movf	_CH2_temperature^(0+128),w
  5874  0152  0020               	movlb	0	; select bank0
  5875  0153  0558               	andwf	??_tc_temperature_trans,w
  5876  0154  00DA               	movwf	??_tc_temperature_trans+2
  5877  0155  0021               	movlb	1	; select bank1
  5878  0156  0829               	movf	(_CH2_temperature+1)^(0+128),w
  5879  0157  0020               	movlb	0	; select bank0
  5880  0158  0559               	andwf	??_tc_temperature_trans+1,w
  5881  0159  00DB               	movwf	??_tc_temperature_trans+3
  5882  015A  1ADB               	btfsc	??_tc_temperature_trans+3,5
  5883  015B  29B5               	goto	L7
  5884                           
  5885                           ;max31856.c: 238: else
  5886                           ;max31856.c: 239: {
  5887                           ;max31856.c: 240: if(CH2_temperature & 0x2000) CH2_temperature=0x3FFF-CH2_temperature + 
      +                          1 ;
  5888                           
  5889                           ;max31856.c: 237: }
  5890                           
  5891                           ;max31856.c: 236: CH2_temperature = temperature_value;
  5892                           
  5893                           ;max31856.c: 235: Cur_temperature_time_ch2 = 0;
  5894                           
  5895                           ;max31856.c: 234: Save_Write_word(temperature_value);
  5896                           
  5897                           ;max31856.c: 233: Save_Write_word(var_time);
  5898                           
  5899                           ;max31856.c: 231: var_time |= 0x2000;
  5900                           
  5901                           ;max31856.c: 229: if(CH2_state == 1) var_time |= 0x800;
  5902                           
  5903                           ;max31856.c: 228: var_time |= 0x200;
  5904                           
  5905                           ;max31856.c: 226: {
  5906                           ;max31856.c: 227: var_time = Calculate_Time();
  5907  015C  0021               	movlb	1	; select bank1
  5908  015D  1EA9               	btfss	(_CH2_temperature+1)^(0+128),5
  5909  015E  2972               	goto	l5563
  5910  015F  0928               	comf	_CH2_temperature^(0+128),w
  5911  0160  0020               	movlb	0	; select bank0
  5912  0161  00D8               	movwf	??_tc_temperature_trans
  5913  0162  0021               	movlb	1	; select bank1
  5914  0163  0929               	comf	(_CH2_temperature+1)^(0+128),w
  5915  0164  0020               	movlb	0	; select bank0
  5916  0165  00D9               	movwf	??_tc_temperature_trans+1
  5917  0166  0AD8               	incf	??_tc_temperature_trans,f
  5918  0167  1903               	skipnz
  5919  0168  0AD9               	incf	??_tc_temperature_trans+1,f
  5920  0169  0858               	movf	??_tc_temperature_trans,w
  5921  016A  3E00               	addlw	0
  5922  016B  0021               	movlb	1	; select bank1
  5923  016C  00A8               	movwf	_CH2_temperature^(0+128)
  5924  016D  3040               	movlw	64
  5925  016E  0020               	movlb	0	; select bank0
  5926  016F  3D59               	addwfc	??_tc_temperature_trans+1,w
  5927  0170  0021               	movlb	1	; select bank1
  5928  0171  00A9               	movwf	(_CH2_temperature+1)^(0+128)
  5929  0172                     l5563:	
  5930                           
  5931                           ;max31856.c: 241: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  5932  0172  0020               	movlb	0	; select bank0
  5933  0173  1EE3               	btfss	tc_temperature_trans@temperature_temp+1,5
  5934  0174  2982               	goto	l5567
  5935  0175  0962               	comf	tc_temperature_trans@temperature_temp,w
  5936  0176  00D8               	movwf	??_tc_temperature_trans
  5937  0177  0963               	comf	tc_temperature_trans@temperature_temp+1,w
  5938  0178  00D9               	movwf	??_tc_temperature_trans+1
  5939  0179  0AD8               	incf	??_tc_temperature_trans,f
  5940  017A  1903               	skipnz
  5941  017B  0AD9               	incf	??_tc_temperature_trans+1,f
  5942  017C  0858               	movf	??_tc_temperature_trans,w
  5943  017D  3E00               	addlw	0
  5944  017E  00E2               	movwf	tc_temperature_trans@temperature_temp
  5945  017F  3040               	movlw	64
  5946  0180  3D59               	addwfc	??_tc_temperature_trans+1,w
  5947  0181  00E3               	movwf	tc_temperature_trans@temperature_temp+1
  5948  0182                     l5567:	
  5949                           
  5950                           ;max31856.c: 242: if( temperature_temp > CH2_temperature ) temperature_absolute = temper
      +                          ature_temp - CH2_temperature;
  5951  0182  0863               	movf	tc_temperature_trans@temperature_temp+1,w
  5952  0183  0021               	movlb	1	; select bank1
  5953  0184  0229               	subwf	(_CH2_temperature+1)^(0+128),w
  5954  0185  1D03               	skipz
  5955  0186  298B               	goto	u5145
  5956  0187  0020               	movlb	0	; select bank0
  5957  0188  0862               	movf	tc_temperature_trans@temperature_temp,w
  5958  0189  0021               	movlb	1	; select bank1
  5959  018A  0228               	subwf	_CH2_temperature^(0+128),w
  5960  018B                     u5145:	
  5961  018B  1803               	skipnc
  5962  018C  299C               	goto	l5571
  5963  018D  0928               	comf	_CH2_temperature^(0+128),w
  5964  018E  0020               	movlb	0	; select bank0
  5965  018F  00D8               	movwf	??_tc_temperature_trans
  5966  0190  0021               	movlb	1	; select bank1
  5967  0191  0929               	comf	(_CH2_temperature+1)^(0+128),w
  5968  0192  0020               	movlb	0	; select bank0
  5969  0193  00D9               	movwf	??_tc_temperature_trans+1
  5970  0194  0AD8               	incf	??_tc_temperature_trans,f
  5971  0195  1903               	skipnz
  5972  0196  0AD9               	incf	??_tc_temperature_trans+1,f
  5973  0197  0862               	movf	tc_temperature_trans@temperature_temp,w
  5974  0198  0758               	addwf	??_tc_temperature_trans,w
  5975  0199  00DE               	movwf	tc_temperature_trans@temperature_absolute
  5976  019A  0863               	movf	tc_temperature_trans@temperature_temp+1,w
  5977  019B  29AC               	goto	L4
  5978  019C                     l5571:	
  5979                           
  5980                           ;max31856.c: 243: else temperature_absolute = CH2_temperature - temperature_temp;
  5981  019C  0020               	movlb	0	; select bank0
  5982  019D  0962               	comf	tc_temperature_trans@temperature_temp,w
  5983  019E  00D8               	movwf	??_tc_temperature_trans
  5984  019F  0963               	comf	tc_temperature_trans@temperature_temp+1,w
  5985  01A0  00D9               	movwf	??_tc_temperature_trans+1
  5986  01A1  0AD8               	incf	??_tc_temperature_trans,f
  5987  01A2  1903               	skipnz
  5988  01A3  0AD9               	incf	??_tc_temperature_trans+1,f
  5989  01A4  0021               	movlb	1	; select bank1
  5990  01A5  0828               	movf	_CH2_temperature^(0+128),w
  5991  01A6  0020               	movlb	0	; select bank0
  5992  01A7  0758               	addwf	??_tc_temperature_trans,w
  5993  01A8  00DE               	movwf	tc_temperature_trans@temperature_absolute
  5994  01A9  0021               	movlb	1	; select bank1
  5995  01AA  0829               	movf	(_CH2_temperature+1)^(0+128),w
  5996  01AB  0020               	movlb	0	; select bank0
  5997  01AC                     L4:	
  5998  01AC  3D59               	addwfc	??_tc_temperature_trans+1,w
  5999  01AD  00DF               	movwf	tc_temperature_trans@temperature_absolute+1
  6000                           
  6001                           ;max31856.c: 244: if( temperature_absolute > 4)
  6002  01AE  3000               	movlw	0
  6003  01AF  025F               	subwf	tc_temperature_trans@temperature_absolute+1,w
  6004  01B0  3005               	movlw	5
  6005  01B1  1903               	skipnz
  6006  01B2  025E               	subwf	tc_temperature_trans@temperature_absolute,w
  6007  01B3  1C03               	skipc
  6008  01B4  29E0               	goto	l5589
  6009  01B5                     L7:	
  6010                           
  6011                           ;max31856.c: 245: {
  6012                           ;max31856.c: 246: var_time = Calculate_Time();
  6013  01B5  3182  226B  3180   	fcall	_Calculate_Time
  6014  01B8  0020               	movlb	0	; select bank0
  6015  01B9  00D8               	movwf	??_tc_temperature_trans
  6016  01BA  01D9               	clrf	??_tc_temperature_trans+1
  6017  01BB  0858               	movf	??_tc_temperature_trans,w
  6018  01BC  00E0               	movwf	tc_temperature_trans@var_time
  6019  01BD  0859               	movf	??_tc_temperature_trans+1,w
  6020  01BE  00E1               	movwf	tc_temperature_trans@var_time+1
  6021                           
  6022                           ;max31856.c: 247: var_time |= 0x200;
  6023  01BF  14E1               	bsf	tc_temperature_trans@var_time+1,1
  6024                           
  6025                           ;max31856.c: 248: if(CH2_state == 1) var_time |= 0x800;
  6026  01C0  0021               	movlb	1	; select bank1
  6027  01C1  0331               	decf	_CH2_state^(0+128),w
  6028  01C2  1D03               	btfss	3,2
  6029  01C3  29C6               	goto	l603
  6030  01C4  0020               	movlb	0	; select bank0
  6031  01C5  15E1               	bsf	tc_temperature_trans@var_time+1,3
  6032  01C6                     l603:	
  6033                           
  6034                           ;max31856.c: 250: var_time |= 0x2000;
  6035  01C6  0020               	movlb	0	; select bank0
  6036  01C7  16E1               	bsf	tc_temperature_trans@var_time+1,5
  6037                           
  6038                           ;max31856.c: 252: Save_Write_word(var_time);
  6039  01C8  0861               	movf	tc_temperature_trans@var_time+1,w
  6040  01C9  00BD               	movwf	Save_Write_word@data+1
  6041  01CA  0860               	movf	tc_temperature_trans@var_time,w
  6042  01CB  00BC               	movwf	Save_Write_word@data
  6043  01CC  3189  210F  3180   	fcall	_Save_Write_word
  6044                           
  6045                           ;max31856.c: 253: Save_Write_word(temperature_value);
  6046  01CF  0021               	movlb	1	; select bank1
  6047  01D0  0821               	movf	(_temperature_value+1)^(0+128),w
  6048  01D1  0020               	movlb	0	; select bank0
  6049  01D2  00BD               	movwf	Save_Write_word@data+1
  6050  01D3  0021               	movlb	1	; select bank1
  6051  01D4  0820               	movf	_temperature_value^(0+128),w
  6052  01D5  0020               	movlb	0	; select bank0
  6053  01D6  00BC               	movwf	Save_Write_word@data
  6054  01D7  3189  210F  3180   	fcall	_Save_Write_word
  6055                           
  6056                           ;max31856.c: 254: Cur_temperature_time_ch2 = 0;
  6057  01DA  0021               	movlb	1	; select bank1
  6058  01DB  01B3               	clrf	_Cur_temperature_time_ch2^(0+128)
  6059                           
  6060                           ;max31856.c: 255: CH2_temperature = temperature_value;
  6061  01DC  0821               	movf	(_temperature_value+1)^(0+128),w
  6062  01DD  00A9               	movwf	(_CH2_temperature+1)^(0+128)
  6063  01DE  0820               	movf	_temperature_value^(0+128),w
  6064  01DF  29E7               	goto	L5
  6065  01E0                     l5589:	
  6066                           ;max31856.c: 256: }
  6067                           
  6068                           
  6069                           ;max31856.c: 257: else
  6070                           ;max31856.c: 258: {
  6071                           ;max31856.c: 259: CH2_temperature = temperature_back;
  6072  01E0  0020               	movlb	0	; select bank0
  6073  01E1  085D               	movf	tc_temperature_trans@temperature_back+1,w
  6074  01E2  0021               	movlb	1	; select bank1
  6075  01E3  00A9               	movwf	(_CH2_temperature+1)^(0+128)
  6076  01E4  0020               	movlb	0	; select bank0
  6077  01E5  085C               	movf	tc_temperature_trans@temperature_back,w
  6078  01E6  0021               	movlb	1	; select bank1
  6079  01E7                     L5:	
  6080  01E7  00A8               	movwf	_CH2_temperature^(0+128)
  6081  01E8                     l593:	
  6082                           
  6083                           ;max31856.c: 260: }
  6084                           ;max31856.c: 261: }
  6085                           ;max31856.c: 263: }
  6086                           ;max31856.c: 265: temperature_temp = temperature_value;
  6087  01E8  0021               	movlb	1	; select bank1
  6088  01E9  0821               	movf	(_temperature_value+1)^(0+128),w
  6089  01EA  0020               	movlb	0	; select bank0
  6090  01EB  00E3               	movwf	tc_temperature_trans@temperature_temp+1
  6091  01EC  0021               	movlb	1	; select bank1
  6092  01ED  0820               	movf	_temperature_value^(0+128),w
  6093  01EE  0020               	movlb	0	; select bank0
  6094  01EF  00E2               	movwf	tc_temperature_trans@temperature_temp
  6095                           
  6096                           ;max31856.c: 266: if((uch_ltcbh&0x80)==0x80)
  6097  01F0  0021               	movlb	1	; select bank1
  6098  01F1  1FC5               	btfss	_uch_ltcbh^(0+128),7
  6099  01F2  2A36               	goto	l5607
  6100                           
  6101                           ;max31856.c: 267: {
  6102                           ;max31856.c: 268: temperature_sign = 1;
  6103  01F3  01BF               	clrf	_temperature_sign^(0+128)
  6104  01F4  0ABF               	incf	_temperature_sign^(0+128),f
  6105                           
  6106                           ;max31856.c: 269: temperature_temp=0x3FFF-temperature_temp + 1 ;
  6107  01F5  0020               	movlb	0	; select bank0
  6108  01F6  0962               	comf	tc_temperature_trans@temperature_temp,w
  6109  01F7  00D8               	movwf	??_tc_temperature_trans
  6110  01F8  0963               	comf	tc_temperature_trans@temperature_temp+1,w
  6111  01F9  00D9               	movwf	??_tc_temperature_trans+1
  6112  01FA  0AD8               	incf	??_tc_temperature_trans,f
  6113  01FB  1903               	skipnz
  6114  01FC  0AD9               	incf	??_tc_temperature_trans+1,f
  6115  01FD  0858               	movf	??_tc_temperature_trans,w
  6116  01FE  3E00               	addlw	0
  6117  01FF  00E2               	movwf	tc_temperature_trans@temperature_temp
  6118  0200  3040               	movlw	64
  6119  0201  3D59               	addwfc	??_tc_temperature_trans+1,w
  6120  0202  00E3               	movwf	tc_temperature_trans@temperature_temp+1
  6121                           
  6122                           ;max31856.c: 271: temperature_int = temperature_temp>>3;
  6123  0203  0863               	movf	tc_temperature_trans@temperature_temp+1,w
  6124  0204  00D9               	movwf	??_tc_temperature_trans+1
  6125  0205  0862               	movf	tc_temperature_trans@temperature_temp,w
  6126  0206  00D8               	movwf	??_tc_temperature_trans
  6127  0207  36D9               	lsrf	??_tc_temperature_trans+1,f
  6128  0208  0CD8               	rrf	??_tc_temperature_trans,f
  6129  0209  36D9               	lsrf	??_tc_temperature_trans+1,f
  6130  020A  0CD8               	rrf	??_tc_temperature_trans,f
  6131  020B  36D9               	lsrf	??_tc_temperature_trans+1,f
  6132  020C  0CD8               	rrf	??_tc_temperature_trans,f
  6133  020D  0858               	movf	??_tc_temperature_trans,w
  6134  020E  0021               	movlb	1	; select bank1
  6135  020F  00AE               	movwf	_temperature_int^(0+128)
  6136  0210  0020               	movlb	0	; select bank0
  6137  0211  0859               	movf	??_tc_temperature_trans+1,w
  6138  0212  0021               	movlb	1	; select bank1
  6139  0213  00AF               	movwf	(_temperature_int+1)^(0+128)
  6140                           
  6141                           ;max31856.c: 272: temperature_decimal = temperature_temp & 0x07;
  6142  0214  0020               	movlb	0	; select bank0
  6143  0215  0862               	movf	tc_temperature_trans@temperature_temp,w
  6144  0216  3907               	andlw	7
  6145  0217  00D8               	movwf	??_tc_temperature_trans
  6146  0218  0858               	movf	??_tc_temperature_trans,w
  6147  0219  0021               	movlb	1	; select bank1
  6148  021A  00BE               	movwf	_temperature_decimal^(0+128)
  6149                           
  6150                           ;max31856.c: 273: if(temperature_decimal > 3) temperature_decimal++;
  6151  021B  3004               	movlw	4
  6152  021C  023E               	subwf	_temperature_decimal^(0+128),w
  6153  021D  1C03               	skipc
  6154  021E  2A25               	goto	l606
  6155  021F  3001               	movlw	1
  6156  0220  0020               	movlb	0	; select bank0
  6157  0221  00D8               	movwf	??_tc_temperature_trans
  6158  0222  0858               	movf	??_tc_temperature_trans,w
  6159  0223  0021               	movlb	1	; select bank1
  6160  0224  07BE               	addwf	_temperature_decimal^(0+128),f
  6161  0225                     l606:	
  6162                           
  6163                           ;max31856.c: 274: if(( temperature_decimal == 3 || temperature_decimal == 8 ) && (temper
      +                          ature_int & 0x01)) temperature_decimal++;
  6164  0225  3003               	movlw	3
  6165  0226  063E               	xorwf	_temperature_decimal^(0+128),w
  6166  0227  1903               	btfsc	3,2
  6167  0228  2A2D               	goto	l609
  6168  0229  3008               	movlw	8
  6169  022A  063E               	xorwf	_temperature_decimal^(0+128),w
  6170  022B  1D03               	btfss	3,2
  6171  022C  0008               	return
  6172  022D                     l609:	
  6173  022D  1C2E               	btfss	_temperature_int^(0+128),0
  6174  022E  0008               	return
  6175  022F  3001               	movlw	1
  6176  0230  0020               	movlb	0	; select bank0
  6177  0231  00D8               	movwf	??_tc_temperature_trans
  6178  0232  0858               	movf	??_tc_temperature_trans,w
  6179  0233  0021               	movlb	1	; select bank1
  6180  0234  07BE               	addwf	_temperature_decimal^(0+128),f
  6181                           
  6182                           ;max31856.c: 275: }
  6183  0235  0008               	return
  6184  0236                     l5607:	
  6185                           
  6186                           ;max31856.c: 276: else
  6187                           ;max31856.c: 277: {
  6188                           ;max31856.c: 278: temperature_sign = 0;
  6189  0236  01BF               	clrf	_temperature_sign^(0+128)
  6190                           
  6191                           ;max31856.c: 279: temperature_int = temperature_temp>>3;
  6192  0237  0020               	movlb	0	; select bank0
  6193  0238  0863               	movf	tc_temperature_trans@temperature_temp+1,w
  6194  0239  00D9               	movwf	??_tc_temperature_trans+1
  6195  023A  0862               	movf	tc_temperature_trans@temperature_temp,w
  6196  023B  00D8               	movwf	??_tc_temperature_trans
  6197  023C  36D9               	lsrf	??_tc_temperature_trans+1,f
  6198  023D  0CD8               	rrf	??_tc_temperature_trans,f
  6199  023E  36D9               	lsrf	??_tc_temperature_trans+1,f
  6200  023F  0CD8               	rrf	??_tc_temperature_trans,f
  6201  0240  36D9               	lsrf	??_tc_temperature_trans+1,f
  6202  0241  0CD8               	rrf	??_tc_temperature_trans,f
  6203  0242  0858               	movf	??_tc_temperature_trans,w
  6204  0243  0021               	movlb	1	; select bank1
  6205  0244  00AE               	movwf	_temperature_int^(0+128)
  6206  0245  0020               	movlb	0	; select bank0
  6207  0246  0859               	movf	??_tc_temperature_trans+1,w
  6208  0247  0021               	movlb	1	; select bank1
  6209  0248  00AF               	movwf	(_temperature_int+1)^(0+128)
  6210                           
  6211                           ;max31856.c: 280: temperature_decimal = temperature_temp & 0x07;
  6212  0249  0020               	movlb	0	; select bank0
  6213  024A  0862               	movf	tc_temperature_trans@temperature_temp,w
  6214  024B  3907               	andlw	7
  6215  024C  00D8               	movwf	??_tc_temperature_trans
  6216  024D  0858               	movf	??_tc_temperature_trans,w
  6217  024E  0021               	movlb	1	; select bank1
  6218  024F  00BE               	movwf	_temperature_decimal^(0+128)
  6219                           
  6220                           ;max31856.c: 281: if(temperature_decimal > 3) temperature_decimal++;
  6221  0250  3004               	movlw	4
  6222  0251  023E               	subwf	_temperature_decimal^(0+128),w
  6223  0252  1C03               	skipc
  6224  0253  2A5A               	goto	l611
  6225  0254  3001               	movlw	1
  6226  0255  0020               	movlb	0	; select bank0
  6227  0256  00D8               	movwf	??_tc_temperature_trans
  6228  0257  0858               	movf	??_tc_temperature_trans,w
  6229  0258  0021               	movlb	1	; select bank1
  6230  0259  07BE               	addwf	_temperature_decimal^(0+128),f
  6231  025A                     l611:	
  6232                           
  6233                           ;max31856.c: 282: if((temperature_decimal == 4 || temperature_decimal == 8) && (temperat
      +                          ure_int & 0x01)) temperature_decimal++;
  6234  025A  3004               	movlw	4
  6235  025B  063E               	xorwf	_temperature_decimal^(0+128),w
  6236  025C  1903               	btfsc	3,2
  6237  025D  2A62               	goto	l614
  6238  025E  3008               	movlw	8
  6239  025F  063E               	xorwf	_temperature_decimal^(0+128),w
  6240  0260  1D03               	btfss	3,2
  6241  0261  0008               	return
  6242  0262                     l614:	
  6243  0262  1C2E               	btfss	_temperature_int^(0+128),0
  6244  0263  0008               	return
  6245  0264  3001               	movlw	1
  6246  0265  0020               	movlb	0	; select bank0
  6247  0266  00D8               	movwf	??_tc_temperature_trans
  6248  0267  0858               	movf	??_tc_temperature_trans,w
  6249  0268  0021               	movlb	1	; select bank1
  6250  0269  07BE               	addwf	_temperature_decimal^(0+128),f
  6251  026A  0008               	return
  6252  026B                     __end_of_tc_temperature_trans:	
  6253                           
  6254                           	psect	text16
  6255  026B                     __ptext16:	
  6256 ;; *************** function _Calculate_Time *****************
  6257 ;; Defined at:
  6258 ;;		line 163 in file "mcc_generated_files/save.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;		None
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  temp2           4   52[BANK0 ] unsigned long 
  6263 ;;  temp1           4   48[BANK0 ] unsigned long 
  6264 ;;  temp            4   44[BANK0 ] unsigned long 
  6265 ;; Return value:  Size  Location     Type
  6266 ;;                  1    wreg      unsigned char 
  6267 ;; Registers used:
  6268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;Total ram usage:       22 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:    8
  6281 ;; This function calls:
  6282 ;;		_Bq32k_Rtc_Read_Time
  6283 ;;		_Save_Write_time
  6284 ;;		_Write_Flash_finish
  6285 ;;		_Write_Flash_head
  6286 ;;		___wmul
  6287 ;; This function is called by:
  6288 ;;		_tc_temperature_trans
  6289 ;;		_Save_process
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           
  6294                           ;psect for function _Calculate_Time
  6295  026B                     _Calculate_Time:	
  6296                           
  6297                           ;save.c: 165: unsigned long temp = 0 ;
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in _Calculate_Time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6301  026B  3000               	movlw	0
  6302  026C  0020               	movlb	0	; select bank0
  6303  026D  00CF               	movwf	Calculate_Time@temp+3
  6304  026E  3000               	movlw	0
  6305  026F  00CE               	movwf	Calculate_Time@temp+2
  6306  0270  3000               	movlw	0
  6307  0271  00CD               	movwf	Calculate_Time@temp+1
  6308  0272  3000               	movlw	0
  6309  0273  00CC               	movwf	Calculate_Time@temp
  6310                           
  6311                           ;save.c: 166: unsigned long temp1 = 0 ;
  6312  0274  3000               	movlw	0
  6313  0275  00D3               	movwf	Calculate_Time@temp1+3
  6314  0276  3000               	movlw	0
  6315  0277  00D2               	movwf	Calculate_Time@temp1+2
  6316  0278  3000               	movlw	0
  6317  0279  00D1               	movwf	Calculate_Time@temp1+1
  6318  027A  3000               	movlw	0
  6319  027B  00D0               	movwf	Calculate_Time@temp1
  6320                           
  6321                           ;save.c: 167: unsigned long temp2 = 0 ;
  6322  027C  3000               	movlw	0
  6323  027D  00D7               	movwf	Calculate_Time@temp2+3
  6324  027E  3000               	movlw	0
  6325  027F  00D6               	movwf	Calculate_Time@temp2+2
  6326  0280  3000               	movlw	0
  6327  0281  00D5               	movwf	Calculate_Time@temp2+1
  6328  0282  3000               	movlw	0
  6329  0283  00D4               	movwf	Calculate_Time@temp2
  6330                           
  6331                           ;save.c: 168: Bq32k_Rtc_Read_Time(&rtc_tm);
  6332  0284  30E0               	movlw	(low (_rtc_tm| 0))& (0+255)
  6333  0285  318C  24F4  3182   	fcall	_Bq32k_Rtc_Read_Time
  6334                           
  6335                           ;save.c: 169: if( time_count == 1 )
  6336  0288  0020               	movlb	0	; select bank0
  6337  0289  036E               	decf	_time_count,w
  6338  028A  1D03               	btfss	3,2
  6339  028B  2B40               	goto	l5287
  6340                           
  6341                           ;save.c: 170: {
  6342                           ;save.c: 171: if(rtc_tm.date != rtc_save_ch1.date)
  6343  028C  0021               	movlb	1	; select bank1
  6344  028D  0864               	movf	(_rtc_tm^(0+128)+4),w
  6345  028E  0656               	xorwf	(_rtc_save_ch1^(0+128)+4),w
  6346  028F  1D03               	btfss	3,2
  6347  0290  2B49               	goto	l5291
  6348                           
  6349                           ;save.c: 183: else
  6350                           ;save.c: 184: {
  6351                           ;save.c: 185: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6352                           
  6353                           ;save.c: 182: }
  6354                           
  6355                           ;save.c: 181: time_count = 0;
  6356                           
  6357                           ;save.c: 178: Cur_temperature_time_ch2 = 0;
  6358                           
  6359                           ;save.c: 177: Cur_temperature_time_ch1 = 0;
  6360                           
  6361                           ;save.c: 176: Save_Write_time();
  6362                           
  6363                           ;save.c: 175: Write_Flash_head();
  6364                           
  6365                           ;save.c: 172: {
  6366                           ;save.c: 174: Write_Flash_finish();
  6367  0291  0021               	movlb	1	; select bank1
  6368  0292  0860               	movf	_rtc_tm^(0+128),w
  6369  0293  0020               	movlb	0	; select bank0
  6370  0294  00C2               	movwf	??_Calculate_Time
  6371  0295  01C3               	clrf	??_Calculate_Time+1
  6372  0296  0021               	movlb	1	; select bank1
  6373  0297  0862               	movf	(_rtc_tm^(0+128)+2),w
  6374  0298  0020               	movlb	0	; select bank0
  6375  0299  00C4               	movwf	??_Calculate_Time+2
  6376  029A  01C5               	clrf	??_Calculate_Time+3
  6377  029B  0844               	movf	??_Calculate_Time+2,w
  6378  029C  00A1               	movwf	___wmul@multiplier
  6379  029D  0845               	movf	??_Calculate_Time+3,w
  6380  029E  00A2               	movwf	___wmul@multiplier+1
  6381  029F  3010               	movlw	16
  6382  02A0  00A3               	movwf	___wmul@multiplicand
  6383  02A1  300E               	movlw	14
  6384  02A2  00A4               	movwf	___wmul@multiplicand+1
  6385  02A3  3195  25D2  3182   	fcall	___wmul
  6386  02A6  0020               	movlb	0	; select bank0
  6387  02A7  0821               	movf	?___wmul,w
  6388  02A8  00C6               	movwf	??_Calculate_Time+4
  6389  02A9  0822               	movf	?___wmul+1,w
  6390  02AA  00C7               	movwf	??_Calculate_Time+5
  6391  02AB  0021               	movlb	1	; select bank1
  6392  02AC  0861               	movf	(_rtc_tm^(0+128)+1),w
  6393  02AD  0020               	movlb	0	; select bank0
  6394  02AE  00C8               	movwf	??_Calculate_Time+6
  6395  02AF  01C9               	clrf	??_Calculate_Time+7
  6396  02B0  0848               	movf	??_Calculate_Time+6,w
  6397  02B1  00A1               	movwf	___wmul@multiplier
  6398  02B2  0849               	movf	??_Calculate_Time+7,w
  6399  02B3  00A2               	movwf	___wmul@multiplier+1
  6400  02B4  303C               	movlw	60
  6401  02B5  00A3               	movwf	___wmul@multiplicand
  6402  02B6  3000               	movlw	0
  6403  02B7  00A4               	movwf	___wmul@multiplicand+1
  6404  02B8  3195  25D2  3182   	fcall	___wmul
  6405  02BB  0020               	movlb	0	; select bank0
  6406  02BC  0821               	movf	?___wmul,w
  6407  02BD  0746               	addwf	??_Calculate_Time+4,w
  6408  02BE  00CA               	movwf	??_Calculate_Time+8
  6409  02BF  0822               	movf	?___wmul+1,w
  6410  02C0  3D47               	addwfc	??_Calculate_Time+5,w
  6411  02C1  00CB               	movwf	??_Calculate_Time+9
  6412  02C2  0842               	movf	??_Calculate_Time,w
  6413  02C3  074A               	addwf	??_Calculate_Time+8,w
  6414  02C4  00D0               	movwf	Calculate_Time@temp1
  6415  02C5  0843               	movf	??_Calculate_Time+1,w
  6416  02C6  3D4B               	addwfc	??_Calculate_Time+9,w
  6417  02C7  00D1               	movwf	Calculate_Time@temp1+1
  6418  02C8  01D2               	clrf	Calculate_Time@temp1+2
  6419  02C9  1BD1               	btfsc	Calculate_Time@temp1+1,7
  6420  02CA  03D2               	decf	Calculate_Time@temp1+2,f
  6421  02CB  0852               	movf	Calculate_Time@temp1+2,w
  6422  02CC  00D3               	movwf	Calculate_Time@temp1+3
  6423                           
  6424                           ;save.c: 186: temp2 = rtc_save_ch1.hours*3600+rtc_save_ch1.minutes*60+rtc_save_ch1.secon
      +                          ds;
  6425  02CD  0021               	movlb	1	; select bank1
  6426  02CE  0852               	movf	_rtc_save_ch1^(0+128),w
  6427  02CF  0020               	movlb	0	; select bank0
  6428  02D0  00C2               	movwf	??_Calculate_Time
  6429  02D1  01C3               	clrf	??_Calculate_Time+1
  6430  02D2  0021               	movlb	1	; select bank1
  6431  02D3  0854               	movf	(_rtc_save_ch1^(0+128)+2),w
  6432  02D4  0020               	movlb	0	; select bank0
  6433  02D5  00C4               	movwf	??_Calculate_Time+2
  6434  02D6  01C5               	clrf	??_Calculate_Time+3
  6435  02D7  0844               	movf	??_Calculate_Time+2,w
  6436  02D8  00A1               	movwf	___wmul@multiplier
  6437  02D9  0845               	movf	??_Calculate_Time+3,w
  6438  02DA  00A2               	movwf	___wmul@multiplier+1
  6439  02DB  3010               	movlw	16
  6440  02DC  00A3               	movwf	___wmul@multiplicand
  6441  02DD  300E               	movlw	14
  6442  02DE  00A4               	movwf	___wmul@multiplicand+1
  6443  02DF  3195  25D2  3182   	fcall	___wmul
  6444  02E2  0020               	movlb	0	; select bank0
  6445  02E3  0821               	movf	?___wmul,w
  6446  02E4  00C6               	movwf	??_Calculate_Time+4
  6447  02E5  0822               	movf	?___wmul+1,w
  6448  02E6  00C7               	movwf	??_Calculate_Time+5
  6449  02E7  0021               	movlb	1	; select bank1
  6450  02E8  0853               	movf	(_rtc_save_ch1^(0+128)+1),w
  6451  02E9  0020               	movlb	0	; select bank0
  6452  02EA  00C8               	movwf	??_Calculate_Time+6
  6453  02EB  01C9               	clrf	??_Calculate_Time+7
  6454  02EC  0848               	movf	??_Calculate_Time+6,w
  6455  02ED  00A1               	movwf	___wmul@multiplier
  6456  02EE  0849               	movf	??_Calculate_Time+7,w
  6457  02EF  00A2               	movwf	___wmul@multiplier+1
  6458  02F0  303C               	movlw	60
  6459  02F1  00A3               	movwf	___wmul@multiplicand
  6460  02F2  3000               	movlw	0
  6461  02F3  00A4               	movwf	___wmul@multiplicand+1
  6462  02F4  3195  25D2  3182   	fcall	___wmul
  6463  02F7  0020               	movlb	0	; select bank0
  6464  02F8  0821               	movf	?___wmul,w
  6465  02F9  0746               	addwf	??_Calculate_Time+4,w
  6466  02FA  00CA               	movwf	??_Calculate_Time+8
  6467  02FB  0822               	movf	?___wmul+1,w
  6468  02FC  3D47               	addwfc	??_Calculate_Time+5,w
  6469  02FD  00CB               	movwf	??_Calculate_Time+9
  6470  02FE  0842               	movf	??_Calculate_Time,w
  6471  02FF  074A               	addwf	??_Calculate_Time+8,w
  6472  0300  00D4               	movwf	Calculate_Time@temp2
  6473  0301  0843               	movf	??_Calculate_Time+1,w
  6474  0302  3D4B               	addwfc	??_Calculate_Time+9,w
  6475  0303  00D5               	movwf	Calculate_Time@temp2+1
  6476  0304  01D6               	clrf	Calculate_Time@temp2+2
  6477  0305  1BD5               	btfsc	Calculate_Time@temp2+1,7
  6478  0306  03D6               	decf	Calculate_Time@temp2+2,f
  6479  0307  0856               	movf	Calculate_Time@temp2+2,w
  6480  0308  00D7               	movwf	Calculate_Time@temp2+3
  6481                           
  6482                           ;save.c: 187: temp = temp1 - temp2;
  6483  0309  0850               	movf	Calculate_Time@temp1,w
  6484  030A  00C2               	movwf	??_Calculate_Time
  6485  030B  0851               	movf	Calculate_Time@temp1+1,w
  6486  030C  00C3               	movwf	??_Calculate_Time+1
  6487  030D  0852               	movf	Calculate_Time@temp1+2,w
  6488  030E  00C4               	movwf	??_Calculate_Time+2
  6489  030F  0853               	movf	Calculate_Time@temp1+3,w
  6490  0310  00C5               	movwf	??_Calculate_Time+3
  6491  0311  0954               	comf	Calculate_Time@temp2,w
  6492  0312  00C6               	movwf	??_Calculate_Time+4
  6493  0313  0955               	comf	Calculate_Time@temp2+1,w
  6494  0314  00C7               	movwf	??_Calculate_Time+5
  6495  0315  0956               	comf	Calculate_Time@temp2+2,w
  6496  0316  00C8               	movwf	??_Calculate_Time+6
  6497  0317  0957               	comf	Calculate_Time@temp2+3,w
  6498  0318  00C9               	movwf	??_Calculate_Time+7
  6499  0319  0AC6               	incf	??_Calculate_Time+4,f
  6500  031A  1903               	skipnz
  6501  031B  0AC7               	incf	??_Calculate_Time+5,f
  6502  031C  1903               	skipnz
  6503  031D  0AC8               	incf	??_Calculate_Time+6,f
  6504  031E  1903               	skipnz
  6505  031F  0AC9               	incf	??_Calculate_Time+7,f
  6506  0320  0846               	movf	??_Calculate_Time+4,w
  6507  0321  07C2               	addwf	??_Calculate_Time,f
  6508  0322  0847               	movf	??_Calculate_Time+5,w
  6509  0323  3DC3               	addwfc	??_Calculate_Time+1,f
  6510  0324  0848               	movf	??_Calculate_Time+6,w
  6511  0325  3DC4               	addwfc	??_Calculate_Time+2,f
  6512  0326  0849               	movf	??_Calculate_Time+7,w
  6513  0327  3DC5               	addwfc	??_Calculate_Time+3,f
  6514  0328  0845               	movf	??_Calculate_Time+3,w
  6515  0329  00CF               	movwf	Calculate_Time@temp+3
  6516  032A  0844               	movf	??_Calculate_Time+2,w
  6517  032B  00CE               	movwf	Calculate_Time@temp+2
  6518  032C  0843               	movf	??_Calculate_Time+1,w
  6519  032D  00CD               	movwf	Calculate_Time@temp+1
  6520  032E  0842               	movf	??_Calculate_Time,w
  6521  032F  00CC               	movwf	Calculate_Time@temp
  6522                           
  6523                           ;save.c: 188: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  6524  0330  30D2               	movlw	low (_rtc_save_ch1| 0)
  6525  0331  0086               	movwf	6
  6526  0332  0187               	clrf	7
  6527  0333  30E0               	movlw	low (_rtc_tm| 0)
  6528  0334  0084               	movwf	4
  6529  0335  0185               	clrf	5
  6530  0336  3007               	movlw	7
  6531  0337  0020               	movlb	0	; select bank0
  6532  0338  00C2               	movwf	??_Calculate_Time
  6533  0339                     u456m0:	
  6534  0339  0012               	moviw fsr0++
  6535  033A  001E               	movwi fsr1++
  6536  033B  0BC2               	decfsz	??_Calculate_Time,f
  6537  033C  2B39               	goto	u456m0
  6538                           
  6539                           ;save.c: 189: return temp;
  6540  033D  0020               	movlb	0	; select bank0
  6541  033E  084C               	movf	Calculate_Time@temp,w
  6542  033F  0008               	return
  6543  0340                     l5287:	
  6544                           ;save.c: 190: }
  6545                           ;save.c: 191: }
  6546                           
  6547                           
  6548                           ;save.c: 192: else if( time_count == 3 )
  6549  0340  3003               	movlw	3
  6550  0341  066E               	xorwf	_time_count,w
  6551  0342  1D03               	btfss	3,2
  6552  0343  2C07               	goto	l5311
  6553                           
  6554                           ;save.c: 193: {
  6555                           ;save.c: 194: if(rtc_tm.date != rtc_save_ch2.date)
  6556  0344  0021               	movlb	1	; select bank1
  6557  0345  0864               	movf	(_rtc_tm^(0+128)+4),w
  6558  0346  065D               	xorwf	(_rtc_save_ch2^(0+128)+4),w
  6559  0347  1903               	skipnz
  6560  0348  2B58               	goto	l5301
  6561  0349                     l5291:	
  6562                           
  6563                           ;save.c: 195: {
  6564                           ;save.c: 197: Write_Flash_finish();
  6565  0349  3197  27D1  3182   	fcall	_Write_Flash_finish
  6566                           
  6567                           ;save.c: 198: Write_Flash_head();
  6568  034C  3188  2015  3182   	fcall	_Write_Flash_head
  6569                           
  6570                           ;save.c: 199: Save_Write_time();
  6571  034F  318E  2629  3182   	fcall	_Save_Write_time
  6572                           
  6573                           ;save.c: 200: Cur_temperature_time_ch1 = 0;
  6574  0352  0021               	movlb	1	; select bank1
  6575  0353  01B2               	clrf	_Cur_temperature_time_ch1^(0+128)
  6576                           
  6577                           ;save.c: 201: Cur_temperature_time_ch2 = 0;
  6578  0354  01B3               	clrf	_Cur_temperature_time_ch2^(0+128)
  6579                           
  6580                           ;save.c: 204: time_count = 0;
  6581  0355  0020               	movlb	0	; select bank0
  6582  0356  01EE               	clrf	_time_count
  6583                           
  6584                           ;save.c: 205: }
  6585  0357  2C07               	goto	l5311
  6586  0358                     l5301:	
  6587                           
  6588                           ;save.c: 206: else
  6589                           ;save.c: 207: {
  6590                           ;save.c: 208: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6591  0358  0021               	movlb	1	; select bank1
  6592  0359  0860               	movf	_rtc_tm^(0+128),w
  6593  035A  0020               	movlb	0	; select bank0
  6594  035B  00C2               	movwf	??_Calculate_Time
  6595  035C  01C3               	clrf	??_Calculate_Time+1
  6596  035D  0021               	movlb	1	; select bank1
  6597  035E  0862               	movf	(_rtc_tm^(0+128)+2),w
  6598  035F  0020               	movlb	0	; select bank0
  6599  0360  00C4               	movwf	??_Calculate_Time+2
  6600  0361  01C5               	clrf	??_Calculate_Time+3
  6601  0362  0844               	movf	??_Calculate_Time+2,w
  6602  0363  00A1               	movwf	___wmul@multiplier
  6603  0364  0845               	movf	??_Calculate_Time+3,w
  6604  0365  00A2               	movwf	___wmul@multiplier+1
  6605  0366  3010               	movlw	16
  6606  0367  00A3               	movwf	___wmul@multiplicand
  6607  0368  300E               	movlw	14
  6608  0369  00A4               	movwf	___wmul@multiplicand+1
  6609  036A  3195  25D2  3182   	fcall	___wmul
  6610  036D  0020               	movlb	0	; select bank0
  6611  036E  0821               	movf	?___wmul,w
  6612  036F  00C6               	movwf	??_Calculate_Time+4
  6613  0370  0822               	movf	?___wmul+1,w
  6614  0371  00C7               	movwf	??_Calculate_Time+5
  6615  0372  0021               	movlb	1	; select bank1
  6616  0373  0861               	movf	(_rtc_tm^(0+128)+1),w
  6617  0374  0020               	movlb	0	; select bank0
  6618  0375  00C8               	movwf	??_Calculate_Time+6
  6619  0376  01C9               	clrf	??_Calculate_Time+7
  6620  0377  0848               	movf	??_Calculate_Time+6,w
  6621  0378  00A1               	movwf	___wmul@multiplier
  6622  0379  0849               	movf	??_Calculate_Time+7,w
  6623  037A  00A2               	movwf	___wmul@multiplier+1
  6624  037B  303C               	movlw	60
  6625  037C  00A3               	movwf	___wmul@multiplicand
  6626  037D  3000               	movlw	0
  6627  037E  00A4               	movwf	___wmul@multiplicand+1
  6628  037F  3195  25D2  3182   	fcall	___wmul
  6629  0382  0020               	movlb	0	; select bank0
  6630  0383  0821               	movf	?___wmul,w
  6631  0384  0746               	addwf	??_Calculate_Time+4,w
  6632  0385  00CA               	movwf	??_Calculate_Time+8
  6633  0386  0822               	movf	?___wmul+1,w
  6634  0387  3D47               	addwfc	??_Calculate_Time+5,w
  6635  0388  00CB               	movwf	??_Calculate_Time+9
  6636  0389  0842               	movf	??_Calculate_Time,w
  6637  038A  074A               	addwf	??_Calculate_Time+8,w
  6638  038B  00D0               	movwf	Calculate_Time@temp1
  6639  038C  0843               	movf	??_Calculate_Time+1,w
  6640  038D  3D4B               	addwfc	??_Calculate_Time+9,w
  6641  038E  00D1               	movwf	Calculate_Time@temp1+1
  6642  038F  01D2               	clrf	Calculate_Time@temp1+2
  6643  0390  1BD1               	btfsc	Calculate_Time@temp1+1,7
  6644  0391  03D2               	decf	Calculate_Time@temp1+2,f
  6645  0392  0852               	movf	Calculate_Time@temp1+2,w
  6646  0393  00D3               	movwf	Calculate_Time@temp1+3
  6647                           
  6648                           ;save.c: 209: temp2 = rtc_save_ch2.hours*3600+rtc_save_ch2.minutes*60+rtc_save_ch2.secon
      +                          ds;
  6649  0394  0021               	movlb	1	; select bank1
  6650  0395  0859               	movf	_rtc_save_ch2^(0+128),w
  6651  0396  0020               	movlb	0	; select bank0
  6652  0397  00C2               	movwf	??_Calculate_Time
  6653  0398  01C3               	clrf	??_Calculate_Time+1
  6654  0399  0021               	movlb	1	; select bank1
  6655  039A  085B               	movf	(_rtc_save_ch2^(0+128)+2),w
  6656  039B  0020               	movlb	0	; select bank0
  6657  039C  00C4               	movwf	??_Calculate_Time+2
  6658  039D  01C5               	clrf	??_Calculate_Time+3
  6659  039E  0844               	movf	??_Calculate_Time+2,w
  6660  039F  00A1               	movwf	___wmul@multiplier
  6661  03A0  0845               	movf	??_Calculate_Time+3,w
  6662  03A1  00A2               	movwf	___wmul@multiplier+1
  6663  03A2  3010               	movlw	16
  6664  03A3  00A3               	movwf	___wmul@multiplicand
  6665  03A4  300E               	movlw	14
  6666  03A5  00A4               	movwf	___wmul@multiplicand+1
  6667  03A6  3195  25D2  3182   	fcall	___wmul
  6668  03A9  0020               	movlb	0	; select bank0
  6669  03AA  0821               	movf	?___wmul,w
  6670  03AB  00C6               	movwf	??_Calculate_Time+4
  6671  03AC  0822               	movf	?___wmul+1,w
  6672  03AD  00C7               	movwf	??_Calculate_Time+5
  6673  03AE  0021               	movlb	1	; select bank1
  6674  03AF  085A               	movf	(_rtc_save_ch2^(0+128)+1),w
  6675  03B0  0020               	movlb	0	; select bank0
  6676  03B1  00C8               	movwf	??_Calculate_Time+6
  6677  03B2  01C9               	clrf	??_Calculate_Time+7
  6678  03B3  0848               	movf	??_Calculate_Time+6,w
  6679  03B4  00A1               	movwf	___wmul@multiplier
  6680  03B5  0849               	movf	??_Calculate_Time+7,w
  6681  03B6  00A2               	movwf	___wmul@multiplier+1
  6682  03B7  303C               	movlw	60
  6683  03B8  00A3               	movwf	___wmul@multiplicand
  6684  03B9  3000               	movlw	0
  6685  03BA  00A4               	movwf	___wmul@multiplicand+1
  6686  03BB  3195  25D2  3182   	fcall	___wmul
  6687  03BE  0020               	movlb	0	; select bank0
  6688  03BF  0821               	movf	?___wmul,w
  6689  03C0  0746               	addwf	??_Calculate_Time+4,w
  6690  03C1  00CA               	movwf	??_Calculate_Time+8
  6691  03C2  0822               	movf	?___wmul+1,w
  6692  03C3  3D47               	addwfc	??_Calculate_Time+5,w
  6693  03C4  00CB               	movwf	??_Calculate_Time+9
  6694  03C5  0842               	movf	??_Calculate_Time,w
  6695  03C6  074A               	addwf	??_Calculate_Time+8,w
  6696  03C7  00D4               	movwf	Calculate_Time@temp2
  6697  03C8  0843               	movf	??_Calculate_Time+1,w
  6698  03C9  3D4B               	addwfc	??_Calculate_Time+9,w
  6699  03CA  00D5               	movwf	Calculate_Time@temp2+1
  6700  03CB  01D6               	clrf	Calculate_Time@temp2+2
  6701  03CC  1BD5               	btfsc	Calculate_Time@temp2+1,7
  6702  03CD  03D6               	decf	Calculate_Time@temp2+2,f
  6703  03CE  0856               	movf	Calculate_Time@temp2+2,w
  6704  03CF  00D7               	movwf	Calculate_Time@temp2+3
  6705                           
  6706                           ;save.c: 210: temp = temp1 - temp2;
  6707  03D0  0850               	movf	Calculate_Time@temp1,w
  6708  03D1  00C2               	movwf	??_Calculate_Time
  6709  03D2  0851               	movf	Calculate_Time@temp1+1,w
  6710  03D3  00C3               	movwf	??_Calculate_Time+1
  6711  03D4  0852               	movf	Calculate_Time@temp1+2,w
  6712  03D5  00C4               	movwf	??_Calculate_Time+2
  6713  03D6  0853               	movf	Calculate_Time@temp1+3,w
  6714  03D7  00C5               	movwf	??_Calculate_Time+3
  6715  03D8  0954               	comf	Calculate_Time@temp2,w
  6716  03D9  00C6               	movwf	??_Calculate_Time+4
  6717  03DA  0955               	comf	Calculate_Time@temp2+1,w
  6718  03DB  00C7               	movwf	??_Calculate_Time+5
  6719  03DC  0956               	comf	Calculate_Time@temp2+2,w
  6720  03DD  00C8               	movwf	??_Calculate_Time+6
  6721  03DE  0957               	comf	Calculate_Time@temp2+3,w
  6722  03DF  00C9               	movwf	??_Calculate_Time+7
  6723  03E0  0AC6               	incf	??_Calculate_Time+4,f
  6724  03E1  1903               	skipnz
  6725  03E2  0AC7               	incf	??_Calculate_Time+5,f
  6726  03E3  1903               	skipnz
  6727  03E4  0AC8               	incf	??_Calculate_Time+6,f
  6728  03E5  1903               	skipnz
  6729  03E6  0AC9               	incf	??_Calculate_Time+7,f
  6730  03E7  0846               	movf	??_Calculate_Time+4,w
  6731  03E8  07C2               	addwf	??_Calculate_Time,f
  6732  03E9  0847               	movf	??_Calculate_Time+5,w
  6733  03EA  3DC3               	addwfc	??_Calculate_Time+1,f
  6734  03EB  0848               	movf	??_Calculate_Time+6,w
  6735  03EC  3DC4               	addwfc	??_Calculate_Time+2,f
  6736  03ED  0849               	movf	??_Calculate_Time+7,w
  6737  03EE  3DC5               	addwfc	??_Calculate_Time+3,f
  6738  03EF  0845               	movf	??_Calculate_Time+3,w
  6739  03F0  00CF               	movwf	Calculate_Time@temp+3
  6740  03F1  0844               	movf	??_Calculate_Time+2,w
  6741  03F2  00CE               	movwf	Calculate_Time@temp+2
  6742  03F3  0843               	movf	??_Calculate_Time+1,w
  6743  03F4  00CD               	movwf	Calculate_Time@temp+1
  6744  03F5  0842               	movf	??_Calculate_Time,w
  6745  03F6  00CC               	movwf	Calculate_Time@temp
  6746                           
  6747                           ;save.c: 211: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  6748  03F7  30D9               	movlw	low (_rtc_save_ch2| 0)
  6749  03F8  0086               	movwf	6
  6750  03F9  0187               	clrf	7
  6751  03FA  30E0               	movlw	low (_rtc_tm| 0)
  6752  03FB  0084               	movwf	4
  6753  03FC  0185               	clrf	5
  6754  03FD  3007               	movlw	7
  6755  03FE  0020               	movlb	0	; select bank0
  6756  03FF  00C2               	movwf	??_Calculate_Time
  6757  0400                     u459m0:	
  6758  0400  0012               	moviw fsr0++
  6759  0401  001E               	movwi fsr1++
  6760  0402  0BC2               	decfsz	??_Calculate_Time,f
  6761  0403  2C00               	goto	u459m0
  6762                           
  6763                           ;save.c: 212: return temp;
  6764  0404  0020               	movlb	0	; select bank0
  6765  0405  084C               	movf	Calculate_Time@temp,w
  6766  0406  0008               	return
  6767  0407                     l5311:	
  6768                           
  6769                           ;save.c: 213: }
  6770                           ;save.c: 214: }
  6771                           ;save.c: 215: return 0;
  6772  0407  3000               	movlw	0
  6773  0408  0008               	return
  6774  0409                     __end_of_Calculate_Time:	
  6775                           
  6776                           	psect	text17
  6777  15D2                     __ptext17:	
  6778 ;; *************** function ___wmul *****************
  6779 ;; Defined at:
  6780 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6783 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  product         2    5[BANK0 ] unsigned int 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  2    1[BANK0 ] unsigned int 
  6788 ;; Registers used:
  6789 ;;		wreg, status,2, status,0
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6795 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;Total ram usage:        6 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    3
  6802 ;; This function calls:
  6803 ;;		Nothing
  6804 ;; This function is called by:
  6805 ;;		_Calculate_Time
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           
  6810                           ;psect for function ___wmul
  6811  15D2                     ___wmul:	
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6815  15D2  0020               	movlb	0	; select bank0
  6816  15D3  01A5               	clrf	___wmul@product
  6817  15D4  01A6               	clrf	___wmul@product+1
  6818  15D5                     l5193:	
  6819  15D5  1C21               	btfss	___wmul@multiplier,0
  6820  15D6  2DDB               	goto	l1237
  6821  15D7  0823               	movf	___wmul@multiplicand,w
  6822  15D8  07A5               	addwf	___wmul@product,f
  6823  15D9  0824               	movf	___wmul@multiplicand+1,w
  6824  15DA  3DA6               	addwfc	___wmul@product+1,f
  6825  15DB                     l1237:	
  6826  15DB  3001               	movlw	1
  6827  15DC                     u4445:	
  6828  15DC  35A3               	lslf	___wmul@multiplicand,f
  6829  15DD  0DA4               	rlf	___wmul@multiplicand+1,f
  6830  15DE  0B89               	decfsz	9,f
  6831  15DF  2DDC               	goto	u4445
  6832  15E0  3001               	movlw	1
  6833  15E1                     u4455:	
  6834  15E1  36A2               	lsrf	___wmul@multiplier+1,f
  6835  15E2  0CA1               	rrf	___wmul@multiplier,f
  6836  15E3  0B89               	decfsz	9,f
  6837  15E4  2DE1               	goto	u4455
  6838  15E5  0821               	movf	___wmul@multiplier,w
  6839  15E6  0422               	iorwf	___wmul@multiplier+1,w
  6840  15E7  1D03               	btfss	3,2
  6841  15E8  2DD5               	goto	l5193
  6842  15E9  0826               	movf	___wmul@product+1,w
  6843  15EA  00A2               	movwf	?___wmul+1
  6844  15EB  0825               	movf	___wmul@product,w
  6845  15EC  00A1               	movwf	?___wmul
  6846  15ED  0008               	return
  6847  15EE                     __end_of___wmul:	
  6848                           
  6849                           	psect	text18
  6850  0815                     __ptext18:	
  6851 ;; *************** function _Write_Flash_head *****************
  6852 ;; Defined at:
  6853 ;;		line 92 in file "mcc_generated_files/save.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;		None
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      void 
  6860 ;; Registers used:
  6861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;Total ram usage:        0 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    6
  6874 ;; This function calls:
  6875 ;;		_FLASH_WriteWord
  6876 ;; This function is called by:
  6877 ;;		_Key_Process
  6878 ;;		_Calculate_Time
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _Write_Flash_head
  6884  0815                     _Write_Flash_head:	
  6885                           
  6886                           ;save.c: 94: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0xAAAA);
  6887                           
  6888                           ;incstack = 0
  6889                           ; Regs used in _Write_Flash_head: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6890  0815  0021               	movlb	1	; select bank1
  6891  0816  082B               	movf	(_Cur_Save_Index+1)^(0+128),w
  6892  0817  0020               	movlb	0	; select bank0
  6893  0818  00B1               	movwf	FLASH_WriteWord@flashAddr+1
  6894  0819  0021               	movlb	1	; select bank1
  6895  081A  082A               	movf	_Cur_Save_Index^(0+128),w
  6896  081B  0020               	movlb	0	; select bank0
  6897  081C  00B0               	movwf	FLASH_WriteWord@flashAddr
  6898  081D  30A0               	movlw	low _Flash_buff
  6899  081E  00B2               	movwf	FLASH_WriteWord@ramBuf
  6900  081F  3001               	movlw	high _Flash_buff
  6901  0820  00B3               	movwf	FLASH_WriteWord@ramBuf+1
  6902  0821  30AA               	movlw	170
  6903  0822  00B4               	movwf	FLASH_WriteWord@word
  6904  0823  30AA               	movlw	170
  6905  0824  00B5               	movwf	FLASH_WriteWord@word+1
  6906  0825  318A  22FA  3188   	fcall	_FLASH_WriteWord
  6907                           
  6908                           ;save.c: 95: Cur_Save_Index++;
  6909  0828  3001               	movlw	1
  6910  0829  0021               	movlb	1	; select bank1
  6911  082A  07AA               	addwf	_Cur_Save_Index^(0+128),f
  6912  082B  3000               	movlw	0
  6913  082C  3DAB               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  6914                           
  6915                           ;save.c: 96: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0xAAAA);
  6916  082D  082B               	movf	(_Cur_Save_Index+1)^(0+128),w
  6917  082E  0020               	movlb	0	; select bank0
  6918  082F  00B1               	movwf	FLASH_WriteWord@flashAddr+1
  6919  0830  0021               	movlb	1	; select bank1
  6920  0831  082A               	movf	_Cur_Save_Index^(0+128),w
  6921  0832  0020               	movlb	0	; select bank0
  6922  0833  00B0               	movwf	FLASH_WriteWord@flashAddr
  6923  0834  30A0               	movlw	low _Flash_buff
  6924  0835  00B2               	movwf	FLASH_WriteWord@ramBuf
  6925  0836  3001               	movlw	high _Flash_buff
  6926  0837  00B3               	movwf	FLASH_WriteWord@ramBuf+1
  6927  0838  30AA               	movlw	170
  6928  0839  00B4               	movwf	FLASH_WriteWord@word
  6929  083A  30AA               	movlw	170
  6930  083B  00B5               	movwf	FLASH_WriteWord@word+1
  6931  083C  318A  22FA         	fcall	_FLASH_WriteWord
  6932                           
  6933                           ;save.c: 97: Cur_Save_Index++;
  6934  083E  3001               	movlw	1
  6935  083F  0021               	movlb	1	; select bank1
  6936  0840  07AA               	addwf	_Cur_Save_Index^(0+128),f
  6937  0841  3000               	movlw	0
  6938  0842  3DAB               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  6939  0843  0008               	return
  6940  0844                     __end_of_Write_Flash_head:	
  6941                           
  6942                           	psect	text19
  6943  17D1                     __ptext19:	
  6944 ;; *************** function _Write_Flash_finish *****************
  6945 ;; Defined at:
  6946 ;;		line 106 in file "mcc_generated_files/save.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;		None
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;		None
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  1    wreg      void 
  6953 ;; Registers used:
  6954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6955 ;; Tracked objects:
  6956 ;;		On entry : 0/0
  6957 ;;		On exit  : 0/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;Total ram usage:        0 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; Hardware stack levels required when called:    6
  6967 ;; This function calls:
  6968 ;;		_FLASH_WriteWord
  6969 ;; This function is called by:
  6970 ;;		_Key_Process
  6971 ;;		_Serach_Flash_Head
  6972 ;;		_Calculate_Time
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976                           
  6977                           ;psect for function _Write_Flash_finish
  6978  17D1                     _Write_Flash_finish:	
  6979                           
  6980                           ;save.c: 108: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x5555);
  6981                           
  6982                           ;incstack = 0
  6983                           ; Regs used in _Write_Flash_finish: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6984  17D1  0021               	movlb	1	; select bank1
  6985  17D2  082B               	movf	(_Cur_Save_Index+1)^(0+128),w
  6986  17D3  0020               	movlb	0	; select bank0
  6987  17D4  00B1               	movwf	FLASH_WriteWord@flashAddr+1
  6988  17D5  0021               	movlb	1	; select bank1
  6989  17D6  082A               	movf	_Cur_Save_Index^(0+128),w
  6990  17D7  0020               	movlb	0	; select bank0
  6991  17D8  00B0               	movwf	FLASH_WriteWord@flashAddr
  6992  17D9  30A0               	movlw	low _Flash_buff
  6993  17DA  00B2               	movwf	FLASH_WriteWord@ramBuf
  6994  17DB  3001               	movlw	high _Flash_buff
  6995  17DC  00B3               	movwf	FLASH_WriteWord@ramBuf+1
  6996  17DD  3055               	movlw	85
  6997  17DE  00B4               	movwf	FLASH_WriteWord@word
  6998  17DF  3055               	movlw	85
  6999  17E0  00B5               	movwf	FLASH_WriteWord@word+1
  7000  17E1  318A  22FA  3197   	fcall	_FLASH_WriteWord
  7001                           
  7002                           ;save.c: 109: Cur_Save_Index++;
  7003  17E4  3001               	movlw	1
  7004  17E5  0021               	movlb	1	; select bank1
  7005  17E6  07AA               	addwf	_Cur_Save_Index^(0+128),f
  7006  17E7  3000               	movlw	0
  7007  17E8  3DAB               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7008                           
  7009                           ;save.c: 110: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x5555);
  7010  17E9  082B               	movf	(_Cur_Save_Index+1)^(0+128),w
  7011  17EA  0020               	movlb	0	; select bank0
  7012  17EB  00B1               	movwf	FLASH_WriteWord@flashAddr+1
  7013  17EC  0021               	movlb	1	; select bank1
  7014  17ED  082A               	movf	_Cur_Save_Index^(0+128),w
  7015  17EE  0020               	movlb	0	; select bank0
  7016  17EF  00B0               	movwf	FLASH_WriteWord@flashAddr
  7017  17F0  30A0               	movlw	low _Flash_buff
  7018  17F1  00B2               	movwf	FLASH_WriteWord@ramBuf
  7019  17F2  3001               	movlw	high _Flash_buff
  7020  17F3  00B3               	movwf	FLASH_WriteWord@ramBuf+1
  7021  17F4  3055               	movlw	85
  7022  17F5  00B4               	movwf	FLASH_WriteWord@word
  7023  17F6  3055               	movlw	85
  7024  17F7  00B5               	movwf	FLASH_WriteWord@word+1
  7025  17F8  318A  22FA         	fcall	_FLASH_WriteWord
  7026                           
  7027                           ;save.c: 111: Cur_Save_Index++;
  7028  17FA  3001               	movlw	1
  7029  17FB  0021               	movlb	1	; select bank1
  7030  17FC  07AA               	addwf	_Cur_Save_Index^(0+128),f
  7031  17FD  3000               	movlw	0
  7032  17FE  3DAB               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7033  17FF  0008               	return
  7034  1800                     __end_of_Write_Flash_finish:	
  7035                           
  7036                           	psect	text20
  7037  0E29                     __ptext20:	
  7038 ;; *************** function _Save_Write_time *****************
  7039 ;; Defined at:
  7040 ;;		line 239 in file "mcc_generated_files/save.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;		None
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  i               1    0        unsigned char 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      void 
  7047 ;; Registers used:
  7048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;Total ram usage:        2 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    7
  7061 ;; This function calls:
  7062 ;;		_Bq32k_Rtc_Read_Time
  7063 ;;		_Save_Write_word
  7064 ;; This function is called by:
  7065 ;;		_Key_Process
  7066 ;;		_Calculate_Time
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _Save_Write_time
  7072  0E29                     _Save_Write_time:	
  7073                           
  7074                           ;save.c: 241: unsigned char i;
  7075                           ;save.c: 242: Bq32k_Rtc_Read_Time(&rtc_tm);
  7076                           
  7077                           ;incstack = 0
  7078                           ; Regs used in _Save_Write_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7079  0E29  30E0               	movlw	(low (_rtc_tm| 0))& (0+255)
  7080  0E2A  318C  24F4  318E   	fcall	_Bq32k_Rtc_Read_Time
  7081                           
  7082                           ;save.c: 243: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  7083  0E2D  30D2               	movlw	low (_rtc_save_ch1| 0)
  7084  0E2E  0086               	movwf	6
  7085  0E2F  0187               	clrf	7
  7086  0E30  30E0               	movlw	low (_rtc_tm| 0)
  7087  0E31  0084               	movwf	4
  7088  0E32  0185               	clrf	5
  7089  0E33  3007               	movlw	7
  7090  0E34  0020               	movlb	0	; select bank0
  7091  0E35  00C0               	movwf	??_Save_Write_time
  7092  0E36                     u441m0:	
  7093  0E36  0012               	moviw fsr0++
  7094  0E37  001E               	movwi fsr1++
  7095  0E38  0BC0               	decfsz	??_Save_Write_time,f
  7096  0E39  2E36               	goto	u441m0
  7097                           
  7098                           ;save.c: 244: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7099  0E3A  30D9               	movlw	low (_rtc_save_ch2| 0)
  7100  0E3B  0086               	movwf	6
  7101  0E3C  0187               	clrf	7
  7102  0E3D  30E0               	movlw	low (_rtc_tm| 0)
  7103  0E3E  0084               	movwf	4
  7104  0E3F  0185               	clrf	5
  7105  0E40  3007               	movlw	7
  7106  0E41  0020               	movlb	0	; select bank0
  7107  0E42  00C0               	movwf	??_Save_Write_time
  7108  0E43                     u442m0:	
  7109  0E43  0012               	moviw fsr0++
  7110  0E44  001E               	movwi fsr1++
  7111  0E45  0BC0               	decfsz	??_Save_Write_time,f
  7112  0E46  2E43               	goto	u442m0
  7113                           
  7114                           ;save.c: 245: Save_Write_word( rtc_tm.years);
  7115  0E47  0021               	movlb	1	; select bank1
  7116  0E48  0866               	movf	(_rtc_tm^(0+128)+6),w
  7117  0E49  0020               	movlb	0	; select bank0
  7118  0E4A  00C0               	movwf	??_Save_Write_time
  7119  0E4B  01C1               	clrf	??_Save_Write_time+1
  7120  0E4C  0840               	movf	??_Save_Write_time,w
  7121  0E4D  00BC               	movwf	Save_Write_word@data
  7122  0E4E  0841               	movf	??_Save_Write_time+1,w
  7123  0E4F  00BD               	movwf	Save_Write_word@data+1
  7124  0E50  3189  210F  318E   	fcall	_Save_Write_word
  7125                           
  7126                           ;save.c: 246: Save_Write_word( rtc_tm.month);
  7127  0E53  0021               	movlb	1	; select bank1
  7128  0E54  0865               	movf	(_rtc_tm^(0+128)+5),w
  7129  0E55  0020               	movlb	0	; select bank0
  7130  0E56  00C0               	movwf	??_Save_Write_time
  7131  0E57  01C1               	clrf	??_Save_Write_time+1
  7132  0E58  0840               	movf	??_Save_Write_time,w
  7133  0E59  00BC               	movwf	Save_Write_word@data
  7134  0E5A  0841               	movf	??_Save_Write_time+1,w
  7135  0E5B  00BD               	movwf	Save_Write_word@data+1
  7136  0E5C  3189  210F  318E   	fcall	_Save_Write_word
  7137                           
  7138                           ;save.c: 247: Save_Write_word( rtc_tm.date);
  7139  0E5F  0021               	movlb	1	; select bank1
  7140  0E60  0864               	movf	(_rtc_tm^(0+128)+4),w
  7141  0E61  0020               	movlb	0	; select bank0
  7142  0E62  00C0               	movwf	??_Save_Write_time
  7143  0E63  01C1               	clrf	??_Save_Write_time+1
  7144  0E64  0840               	movf	??_Save_Write_time,w
  7145  0E65  00BC               	movwf	Save_Write_word@data
  7146  0E66  0841               	movf	??_Save_Write_time+1,w
  7147  0E67  00BD               	movwf	Save_Write_word@data+1
  7148  0E68  3189  210F  318E   	fcall	_Save_Write_word
  7149                           
  7150                           ;save.c: 248: Save_Write_word( rtc_tm.hours);
  7151  0E6B  0021               	movlb	1	; select bank1
  7152  0E6C  0862               	movf	(_rtc_tm^(0+128)+2),w
  7153  0E6D  0020               	movlb	0	; select bank0
  7154  0E6E  00C0               	movwf	??_Save_Write_time
  7155  0E6F  01C1               	clrf	??_Save_Write_time+1
  7156  0E70  0840               	movf	??_Save_Write_time,w
  7157  0E71  00BC               	movwf	Save_Write_word@data
  7158  0E72  0841               	movf	??_Save_Write_time+1,w
  7159  0E73  00BD               	movwf	Save_Write_word@data+1
  7160  0E74  3189  210F  318E   	fcall	_Save_Write_word
  7161                           
  7162                           ;save.c: 249: Save_Write_word( rtc_tm.minutes);
  7163  0E77  0021               	movlb	1	; select bank1
  7164  0E78  0861               	movf	(_rtc_tm^(0+128)+1),w
  7165  0E79  0020               	movlb	0	; select bank0
  7166  0E7A  00C0               	movwf	??_Save_Write_time
  7167  0E7B  01C1               	clrf	??_Save_Write_time+1
  7168  0E7C  0840               	movf	??_Save_Write_time,w
  7169  0E7D  00BC               	movwf	Save_Write_word@data
  7170  0E7E  0841               	movf	??_Save_Write_time+1,w
  7171  0E7F  00BD               	movwf	Save_Write_word@data+1
  7172  0E80  3189  210F  318E   	fcall	_Save_Write_word
  7173                           
  7174                           ;save.c: 250: Save_Write_word( rtc_tm.seconds);
  7175  0E83  0021               	movlb	1	; select bank1
  7176  0E84  0860               	movf	_rtc_tm^(0+128),w
  7177  0E85  0020               	movlb	0	; select bank0
  7178  0E86  00C0               	movwf	??_Save_Write_time
  7179  0E87  01C1               	clrf	??_Save_Write_time+1
  7180  0E88  0840               	movf	??_Save_Write_time,w
  7181  0E89  00BC               	movwf	Save_Write_word@data
  7182  0E8A  0841               	movf	??_Save_Write_time+1,w
  7183  0E8B  00BD               	movwf	Save_Write_word@data+1
  7184  0E8C  3189  210F  318E   	fcall	_Save_Write_word
  7185                           
  7186                           ;save.c: 251: Save_Write_word( rtc_tm.wday);
  7187  0E8F  0021               	movlb	1	; select bank1
  7188  0E90  0863               	movf	(_rtc_tm^(0+128)+3),w
  7189  0E91  0020               	movlb	0	; select bank0
  7190  0E92  00C0               	movwf	??_Save_Write_time
  7191  0E93  01C1               	clrf	??_Save_Write_time+1
  7192  0E94  0840               	movf	??_Save_Write_time,w
  7193  0E95  00BC               	movwf	Save_Write_word@data
  7194  0E96  0841               	movf	??_Save_Write_time+1,w
  7195  0E97  00BD               	movwf	Save_Write_word@data+1
  7196  0E98  3189  210F         	fcall	_Save_Write_word
  7197  0E9A  0008               	return
  7198  0E9B                     __end_of_Save_Write_time:	
  7199                           
  7200                           	psect	text21
  7201  090F                     __ptext21:	
  7202 ;; *************** function _Save_Write_word *****************
  7203 ;; Defined at:
  7204 ;;		line 224 in file "mcc_generated_files/save.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  data            2   28[BANK0 ] unsigned int 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;		None
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      void 
  7211 ;; Registers used:
  7212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7218 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;Total ram usage:        4 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    6
  7225 ;; This function calls:
  7226 ;;		_FLASH_WriteWord
  7227 ;; This function is called by:
  7228 ;;		_tc_temperature_trans
  7229 ;;		_Save_process
  7230 ;;		_Save_Write_time
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           
  7235                           ;psect for function _Save_Write_word
  7236  090F                     _Save_Write_word:	
  7237                           
  7238                           ;save.c: 226: if( (data & 0x3fff) == 0x3fff)
  7239                           
  7240                           ;incstack = 0
  7241                           ; Regs used in _Save_Write_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7242  090F  30FF               	movlw	255
  7243  0910  0020               	movlb	0	; select bank0
  7244  0911  053C               	andwf	Save_Write_word@data,w
  7245  0912  00BE               	movwf	??_Save_Write_word
  7246  0913  303F               	movlw	63
  7247  0914  053D               	andwf	Save_Write_word@data+1,w
  7248  0915  00BF               	movwf	??_Save_Write_word+1
  7249  0916  0A3E               	incf	??_Save_Write_word,w
  7250  0917  303F               	movlw	63
  7251  0918  1903               	skipnz
  7252  0919  063F               	xorwf	??_Save_Write_word+1,w
  7253  091A  1D03               	btfss	3,2
  7254  091B  292D               	goto	l5135
  7255                           
  7256                           ;save.c: 227: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x3ffe);
  7257  091C  0021               	movlb	1	; select bank1
  7258  091D  082B               	movf	(_Cur_Save_Index+1)^(0+128),w
  7259  091E  0020               	movlb	0	; select bank0
  7260  091F  00B1               	movwf	FLASH_WriteWord@flashAddr+1
  7261  0920  0021               	movlb	1	; select bank1
  7262  0921  082A               	movf	_Cur_Save_Index^(0+128),w
  7263  0922  0020               	movlb	0	; select bank0
  7264  0923  00B0               	movwf	FLASH_WriteWord@flashAddr
  7265  0924  30A0               	movlw	low _Flash_buff
  7266  0925  00B2               	movwf	FLASH_WriteWord@ramBuf
  7267  0926  3001               	movlw	high _Flash_buff
  7268  0927  00B3               	movwf	FLASH_WriteWord@ramBuf+1
  7269  0928  30FE               	movlw	254
  7270  0929  00B4               	movwf	FLASH_WriteWord@word
  7271  092A  303F               	movlw	63
  7272  092B  00B5               	movwf	FLASH_WriteWord@word+1
  7273  092C  293D               	goto	L8
  7274  092D                     l5135:	
  7275                           
  7276                           ;save.c: 228: else
  7277                           ;save.c: 229: FLASH_WriteWord(Cur_Save_Index, Flash_buff, data);
  7278  092D  0021               	movlb	1	; select bank1
  7279  092E  082B               	movf	(_Cur_Save_Index+1)^(0+128),w
  7280  092F  0020               	movlb	0	; select bank0
  7281  0930  00B1               	movwf	FLASH_WriteWord@flashAddr+1
  7282  0931  0021               	movlb	1	; select bank1
  7283  0932  082A               	movf	_Cur_Save_Index^(0+128),w
  7284  0933  0020               	movlb	0	; select bank0
  7285  0934  00B0               	movwf	FLASH_WriteWord@flashAddr
  7286  0935  30A0               	movlw	low _Flash_buff
  7287  0936  00B2               	movwf	FLASH_WriteWord@ramBuf
  7288  0937  3001               	movlw	high _Flash_buff
  7289  0938  00B3               	movwf	FLASH_WriteWord@ramBuf+1
  7290  0939  083D               	movf	Save_Write_word@data+1,w
  7291  093A  00B5               	movwf	FLASH_WriteWord@word+1
  7292  093B  083C               	movf	Save_Write_word@data,w
  7293  093C  00B4               	movwf	FLASH_WriteWord@word
  7294  093D                     L8:	
  7295  093D  318A  22FA         	fcall	_FLASH_WriteWord
  7296                           
  7297                           ;save.c: 230: Cur_Save_Index++;
  7298  093F  3001               	movlw	1
  7299  0940  0021               	movlb	1	; select bank1
  7300  0941  07AA               	addwf	_Cur_Save_Index^(0+128),f
  7301  0942  3000               	movlw	0
  7302  0943  3DAB               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7303  0944  0008               	return
  7304  0945                     __end_of_Save_Write_word:	
  7305                           
  7306                           	psect	text22
  7307  1514                     __ptext22:	
  7308 ;; *************** function _maxim_clear_fault_status *****************
  7309 ;; Defined at:
  7310 ;;		line 155 in file "mcc_generated_files/max31856.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;		None
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0, pclath, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;Total ram usage:        1 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    5
  7331 ;; This function calls:
  7332 ;;		_maxim_31856_read_register
  7333 ;;		_maxim_31856_write_register
  7334 ;; This function is called by:
  7335 ;;		_temperature_display
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function _maxim_clear_fault_status
  7341  1514                     _maxim_clear_fault_status:	
  7342                           
  7343                           ;max31856.c: 157: uch_cr0= maxim_31856_read_register(0x00);
  7344                           
  7345                           ;incstack = 0
  7346                           ; Regs used in _maxim_clear_fault_status: [wreg+status,2+status,0+pclath+cstack]
  7347  1514  3000               	movlw	0
  7348  1515  3195  253C  3195   	fcall	_maxim_31856_read_register
  7349  1518  0020               	movlb	0	; select bank0
  7350  1519  00A5               	movwf	??_maxim_clear_fault_status
  7351  151A  0825               	movf	??_maxim_clear_fault_status,w
  7352  151B  0021               	movlb	1	; select bank1
  7353  151C  00C3               	movwf	_uch_cr0^(0+128)
  7354                           
  7355                           ;max31856.c: 158: uch_cr0|= (uint8_t) 0x02 ;
  7356  151D  14C3               	bsf	_uch_cr0^(0+128),1
  7357                           
  7358                           ;max31856.c: 159: maxim_31856_write_register(0x80, uch_cr0);
  7359  151E  0843               	movf	_uch_cr0^(0+128),w
  7360  151F  0020               	movlb	0	; select bank0
  7361  1520  00A5               	movwf	??_maxim_clear_fault_status
  7362  1521  0825               	movf	??_maxim_clear_fault_status,w
  7363  1522  00A2               	movwf	maxim_31856_write_register@uch_register_value
  7364  1523  3080               	movlw	128
  7365  1524  3194  24E2         	fcall	_maxim_31856_write_register
  7366  1526  0008               	return
  7367  1527                     __end_of_maxim_clear_fault_status:	
  7368                           
  7369                           	psect	text23
  7370  174A                     __ptext23:	
  7371 ;; *************** function _err_Display *****************
  7372 ;; Defined at:
  7373 ;;		line 153 in file "mcc_generated_files/ht1621.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;		None
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  num             4   12[BANK0 ] unsigned char [4]
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  1    wreg      void 
  7380 ;; Registers used:
  7381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;Total ram usage:        5 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:    5
  7394 ;; This function calls:
  7395 ;;		_WriteAll_1621
  7396 ;; This function is called by:
  7397 ;;		_temperature_display
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400                           
  7401                           
  7402                           ;psect for function _err_Display
  7403  174A                     _err_Display:	
  7404                           
  7405                           ;ht1621.c: 155: unsigned char num[4]={0};
  7406                           
  7407                           ;incstack = 0
  7408                           ; Regs used in _err_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7409  174A  0022               	movlb	2	; select bank2
  7410  174B  0837               	movf	(err_Display@F2135+3)^(0+256),w
  7411  174C  0020               	movlb	0	; select bank0
  7412  174D  00AF               	movwf	err_Display@num+3
  7413  174E  0022               	movlb	2	; select bank2
  7414  174F  0836               	movf	(err_Display@F2135+2)^(0+256),w
  7415  1750  0020               	movlb	0	; select bank0
  7416  1751  00AE               	movwf	err_Display@num+2
  7417  1752  0022               	movlb	2	; select bank2
  7418  1753  0835               	movf	(err_Display@F2135+1)^(0+256),w
  7419  1754  0020               	movlb	0	; select bank0
  7420  1755  00AD               	movwf	err_Display@num+1
  7421  1756  0022               	movlb	2	; select bank2
  7422  1757  0834               	movf	err_Display@F2135^(0+256),w
  7423  1758  0020               	movlb	0	; select bank0
  7424  1759  00AC               	movwf	err_Display@num
  7425                           
  7426                           ;ht1621.c: 156: num[1] = Dis_TAB[0x10];
  7427  175A  3010               	movlw	low ((_Dis_TAB+16)| (0+32768))
  7428  175B  0084               	movwf	4
  7429  175C  3098               	movlw	high ((_Dis_TAB+16)| (0+32768))
  7430  175D  0085               	movwf	5
  7431  175E  0800               	movf	0,w	;code access
  7432  175F  00AB               	movwf	??_err_Display
  7433  1760  082B               	movf	??_err_Display,w
  7434  1761  00AD               	movwf	err_Display@num+1
  7435                           
  7436                           ;ht1621.c: 157: num[2] = Dis_TAB[0x0c];
  7437  1762  300C               	movlw	low ((_Dis_TAB+12)| (0+32768))
  7438  1763  0084               	movwf	4
  7439  1764  3098               	movlw	high ((_Dis_TAB+12)| (0+32768))
  7440  1765  0085               	movwf	5
  7441  1766  0800               	movf	0,w	;code access
  7442  1767  00AB               	movwf	??_err_Display
  7443  1768  082B               	movf	??_err_Display,w
  7444  1769  00AE               	movwf	err_Display@num+2
  7445                           
  7446                           ;ht1621.c: 158: WriteAll_1621(0, num, 4);
  7447  176A  302C               	movlw	low err_Display@num
  7448  176B  00A5               	movwf	WriteAll_1621@p
  7449  176C  3000               	movlw	high err_Display@num
  7450  176D  00A6               	movwf	WriteAll_1621@p+1
  7451  176E  3004               	movlw	4
  7452  176F  00AB               	movwf	??_err_Display
  7453  1770  082B               	movf	??_err_Display,w
  7454  1771  00A7               	movwf	WriteAll_1621@cnt
  7455  1772  3000               	movlw	0
  7456  1773  3188  20A5         	fcall	_WriteAll_1621
  7457  1775  0008               	return
  7458  1776                     __end_of_err_Display:	
  7459                           
  7460                           	psect	text24
  7461  04E3                     __ptext24:	
  7462 ;; *************** function _Tc_Display *****************
  7463 ;; Defined at:
  7464 ;;		line 110 in file "mcc_generated_files/ht1621.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;		None
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  data            2   17[BANK0 ] unsigned int 
  7469 ;;  count           1   16[BANK0 ] unsigned char 
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      void 
  7472 ;; Registers used:
  7473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;Total ram usage:        4 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    5
  7486 ;; This function calls:
  7487 ;;		_WriteAll_1621
  7488 ;;		___lwdiv
  7489 ;;		___lwmod
  7490 ;;		_memset
  7491 ;; This function is called by:
  7492 ;;		_temperature_display
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           
  7497                           ;psect for function _Tc_Display
  7498  04E3                     _Tc_Display:	
  7499                           
  7500                           ;ht1621.c: 112: unsigned char count = 0;
  7501                           
  7502                           ;incstack = 0
  7503                           ; Regs used in _Tc_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7504  04E3  0020               	movlb	0	; select bank0
  7505  04E4  01B0               	clrf	Tc_Display@count
  7506                           
  7507                           ;ht1621.c: 113: unsigned int data = temperature_int;
  7508  04E5  0021               	movlb	1	; select bank1
  7509  04E6  082F               	movf	(_temperature_int+1)^(0+128),w
  7510  04E7  0020               	movlb	0	; select bank0
  7511  04E8  00B2               	movwf	Tc_Display@data+1
  7512  04E9  0021               	movlb	1	; select bank1
  7513  04EA  082E               	movf	_temperature_int^(0+128),w
  7514  04EB  0020               	movlb	0	; select bank0
  7515  04EC  00B1               	movwf	Tc_Display@data
  7516                           
  7517                           ;ht1621.c: 114: memset(display_buff,0,4);
  7518  04ED  3000               	movlw	0
  7519  04EE  00A1               	movwf	memset@c
  7520  04EF  00A2               	movwf	memset@c+1
  7521  04F0  3004               	movlw	4
  7522  04F1  00A3               	movwf	memset@n
  7523  04F2  3000               	movlw	0
  7524  04F3  00A4               	movwf	memset@n+1
  7525  04F4  30E7               	movlw	(low (_display_buff| 0))& (0+255)
  7526  04F5  3195  259C  3184   	fcall	_memset
  7527  04F8                     l5631:	
  7528                           ;ht1621.c: 115: while(data)
  7529                           
  7530  04F8  0020               	movlb	0	; select bank0
  7531  04F9  0831               	movf	Tc_Display@data,w
  7532  04FA  0432               	iorwf	Tc_Display@data+1,w
  7533  04FB  1903               	btfsc	3,2
  7534  04FC  2D80               	goto	l5639
  7535                           
  7536                           ;ht1621.c: 116: {
  7537                           ;ht1621.c: 117: count++;
  7538  04FD  3001               	movlw	1
  7539  04FE  0020               	movlb	0	; select bank0
  7540  04FF  00AF               	movwf	??_Tc_Display
  7541  0500  082F               	movf	??_Tc_Display,w
  7542  0501  07B0               	addwf	Tc_Display@count,f
  7543                           
  7544                           ;ht1621.c: 118: data /=10;
  7545  0502  300A               	movlw	10
  7546  0503  00A7               	movwf	___lwdiv@divisor
  7547  0504  3000               	movlw	0
  7548  0505  00A8               	movwf	___lwdiv@divisor+1
  7549  0506  0832               	movf	Tc_Display@data+1,w
  7550  0507  00AA               	movwf	___lwdiv@dividend+1
  7551  0508  0831               	movf	Tc_Display@data,w
  7552  0509  00A9               	movwf	___lwdiv@dividend
  7553  050A  3188  20DA  3184   	fcall	___lwdiv
  7554  050D  0020               	movlb	0	; select bank0
  7555  050E  0828               	movf	?___lwdiv+1,w
  7556  050F  00B2               	movwf	Tc_Display@data+1
  7557  0510  0827               	movf	?___lwdiv,w
  7558  0511  00B1               	movwf	Tc_Display@data
  7559  0512  2CF8               	goto	l5631
  7560  0513                     l5633:	
  7561                           ;ht1621.c: 121: {
  7562                           ;ht1621.c: 122: case 3:display_buff[0] = Dis_TAB[temperature_int/100];
  7563                           
  7564                           ;ht1621.c: 119: }
  7565                           ;ht1621.c: 120: switch(count)
  7566                           
  7567  0513  3064               	movlw	100
  7568  0514  00A7               	movwf	___lwdiv@divisor
  7569  0515  3000               	movlw	0
  7570  0516  00A8               	movwf	___lwdiv@divisor+1
  7571  0517  0021               	movlb	1	; select bank1
  7572  0518  082F               	movf	(_temperature_int+1)^(0+128),w
  7573  0519  0020               	movlb	0	; select bank0
  7574  051A  00AA               	movwf	___lwdiv@dividend+1
  7575  051B  0021               	movlb	1	; select bank1
  7576  051C  082E               	movf	_temperature_int^(0+128),w
  7577  051D  0020               	movlb	0	; select bank0
  7578  051E  00A9               	movwf	___lwdiv@dividend
  7579  051F  3188  20DA  3184   	fcall	___lwdiv
  7580  0522  0020               	movlb	0	; select bank0
  7581  0523  0828               	movf	?___lwdiv+1,w
  7582  0524  0085               	movwf	5
  7583  0525  0827               	movf	?___lwdiv,w
  7584  0526  0084               	movwf	4
  7585  0527  3000               	movlw	low (_Dis_TAB| (0+32768))
  7586  0528  0784               	addwf	4,f
  7587  0529  3098               	movlw	high (_Dis_TAB| (0+32768))
  7588  052A  3D85               	addwfc	5,f
  7589  052B  0800               	movf	0,w	;code access
  7590  052C  00AF               	movwf	??_Tc_Display
  7591  052D  082F               	movf	??_Tc_Display,w
  7592  052E  0021               	movlb	1	; select bank1
  7593  052F  00E7               	movwf	_display_buff^(0+128)
  7594  0530                     l761:	
  7595                           ;ht1621.c: 123: case 2:display_buff[1] = Dis_TAB[temperature_int%100/10];
  7596                           
  7597  0530  300A               	movlw	10
  7598  0531  0020               	movlb	0	; select bank0
  7599  0532  00A7               	movwf	___lwdiv@divisor
  7600  0533  3000               	movlw	0
  7601  0534  00A8               	movwf	___lwdiv@divisor+1
  7602  0535  0021               	movlb	1	; select bank1
  7603  0536  082F               	movf	(_temperature_int+1)^(0+128),w
  7604  0537  0020               	movlb	0	; select bank0
  7605  0538  00A4               	movwf	___lwmod@dividend+1
  7606  0539  0021               	movlb	1	; select bank1
  7607  053A  082E               	movf	_temperature_int^(0+128),w
  7608  053B  0020               	movlb	0	; select bank0
  7609  053C  00A3               	movwf	___lwmod@dividend
  7610  053D  3064               	movlw	100
  7611  053E  00A1               	movwf	___lwmod@divisor
  7612  053F  3000               	movlw	0
  7613  0540  00A2               	movwf	___lwmod@divisor+1
  7614  0541  3197  2776  3184   	fcall	___lwmod
  7615  0544  0020               	movlb	0	; select bank0
  7616  0545  0822               	movf	?___lwmod+1,w
  7617  0546  00AA               	movwf	___lwdiv@dividend+1
  7618  0547  0821               	movf	?___lwmod,w
  7619  0548  00A9               	movwf	___lwdiv@dividend
  7620  0549  3188  20DA  3184   	fcall	___lwdiv
  7621  054C  0020               	movlb	0	; select bank0
  7622  054D  0828               	movf	?___lwdiv+1,w
  7623  054E  0085               	movwf	5
  7624  054F  0827               	movf	?___lwdiv,w
  7625  0550  0084               	movwf	4
  7626  0551  3000               	movlw	low (_Dis_TAB| (0+32768))
  7627  0552  0784               	addwf	4,f
  7628  0553  3098               	movlw	high (_Dis_TAB| (0+32768))
  7629  0554  3D85               	addwfc	5,f
  7630  0555  0800               	movf	0,w	;code access
  7631  0556  00AF               	movwf	??_Tc_Display
  7632  0557  082F               	movf	??_Tc_Display,w
  7633  0558  0021               	movlb	1	; select bank1
  7634  0559  00E8               	movwf	(_display_buff^(0+128)+1)
  7635  055A                     l762:	
  7636                           ;ht1621.c: 124: case 1:display_buff[2] = Dis_TAB[temperature_int%10]; break;
  7637                           
  7638  055A  300A               	movlw	10
  7639  055B  0020               	movlb	0	; select bank0
  7640  055C  00A1               	movwf	___lwmod@divisor
  7641  055D  3000               	movlw	0
  7642  055E  00A2               	movwf	___lwmod@divisor+1
  7643  055F  0021               	movlb	1	; select bank1
  7644  0560  082F               	movf	(_temperature_int+1)^(0+128),w
  7645  0561  0020               	movlb	0	; select bank0
  7646  0562  00A4               	movwf	___lwmod@dividend+1
  7647  0563  0021               	movlb	1	; select bank1
  7648  0564  082E               	movf	_temperature_int^(0+128),w
  7649  0565  0020               	movlb	0	; select bank0
  7650  0566  00A3               	movwf	___lwmod@dividend
  7651  0567  3197  2776  3184   	fcall	___lwmod
  7652  056A  0020               	movlb	0	; select bank0
  7653  056B  0822               	movf	?___lwmod+1,w
  7654  056C  0085               	movwf	5
  7655  056D  0821               	movf	?___lwmod,w
  7656  056E  0084               	movwf	4
  7657  056F  3000               	movlw	low (_Dis_TAB| (0+32768))
  7658  0570  0784               	addwf	4,f
  7659  0571  3098               	movlw	high (_Dis_TAB| (0+32768))
  7660  0572  3D85               	addwfc	5,f
  7661  0573  0800               	movf	0,w	;code access
  7662  0574  2D7B               	goto	L9
  7663  0575                     l5635:	
  7664                           ;ht1621.c: 125: case 0:display_buff[2] = Dis_TAB[0];
  7665                           
  7666  0575  3000               	movlw	low (_Dis_TAB| (0+32768))
  7667  0576  0084               	movwf	4
  7668  0577  3098               	movlw	high (_Dis_TAB| (0+32768))
  7669  0578  0085               	movwf	5
  7670  0579  0800               	movf	0,w	;code access
  7671  057A  0020               	movlb	0	; select bank0
  7672  057B                     L9:	
  7673  057B  00AF               	movwf	??_Tc_Display
  7674  057C  082F               	movf	??_Tc_Display,w
  7675  057D  0021               	movlb	1	; select bank1
  7676  057E  00E9               	movwf	(_display_buff^(0+128)+2)
  7677                           
  7678                           ;ht1621.c: 127: }
  7679                           
  7680                           ;ht1621.c: 126: default:break;
  7681  057F  2D8F               	goto	l5641
  7682  0580                     l5639:	
  7683  0580  0020               	movlb	0	; select bank0
  7684  0581  0830               	movf	Tc_Display@count,w
  7685                           
  7686                           ; Switch size 1, requested type "space"
  7687                           ; Number of cases is 4, Range of values is 0 to 3
  7688                           ; switch strategies available:
  7689                           ; Name         Instructions Cycles
  7690                           ; simple_byte           13     7 (average)
  7691                           ; direct_byte           14     6 (fixed)
  7692                           ; jumptable            260     6 (fixed)
  7693                           ;	Chosen strategy is simple_byte
  7694  0582  3A00               	xorlw	0	; case 0
  7695  0583  1903               	skipnz
  7696  0584  2D75               	goto	l5635
  7697  0585  3A01               	xorlw	1	; case 1
  7698  0586  1903               	skipnz
  7699  0587  2D5A               	goto	l762
  7700  0588  3A03               	xorlw	3	; case 2
  7701  0589  1903               	skipnz
  7702  058A  2D30               	goto	l761
  7703  058B  3A01               	xorlw	1	; case 3
  7704  058C  1903               	skipnz
  7705  058D  2D13               	goto	l5633
  7706  058E  2D8F               	goto	l5641
  7707  058F                     l5641:	
  7708                           
  7709                           ;ht1621.c: 128: if(temperature_sign == 1) display_buff[0]=0x20;
  7710  058F  0021               	movlb	1	; select bank1
  7711  0590  033F               	decf	_temperature_sign^(0+128),w
  7712  0591  1D03               	btfss	3,2
  7713  0592  2D99               	goto	l5645
  7714  0593  3020               	movlw	32
  7715  0594  0020               	movlb	0	; select bank0
  7716  0595  00AF               	movwf	??_Tc_Display
  7717  0596  082F               	movf	??_Tc_Display,w
  7718  0597  0021               	movlb	1	; select bank1
  7719  0598  00E7               	movwf	_display_buff^(0+128)
  7720  0599                     l5645:	
  7721                           
  7722                           ;ht1621.c: 129: display_buff[3] = Dis_TAB[temperature_decimal] | 0x08;
  7723  0599  083E               	movf	_temperature_decimal^(0+128),w
  7724  059A  3E00               	addlw	low (_Dis_TAB| (0+32768))
  7725  059B  0084               	movwf	4
  7726  059C  3098               	movlw	high (_Dis_TAB| (0+32768))
  7727  059D  1803               	skipnc
  7728  059E  3E01               	addlw	1
  7729  059F  0085               	movwf	5
  7730  05A0  0800               	movf	0,w	;code access
  7731  05A1  3808               	iorlw	8
  7732  05A2  0020               	movlb	0	; select bank0
  7733  05A3  00AF               	movwf	??_Tc_Display
  7734  05A4  082F               	movf	??_Tc_Display,w
  7735  05A5  0021               	movlb	1	; select bank1
  7736  05A6  00EA               	movwf	(_display_buff^(0+128)+3)
  7737                           
  7738                           ;ht1621.c: 130: WriteAll_1621(0,display_buff,4);
  7739  05A7  30E7               	movlw	low _display_buff
  7740  05A8  0020               	movlb	0	; select bank0
  7741  05A9  00A5               	movwf	WriteAll_1621@p
  7742  05AA  3000               	movlw	high _display_buff
  7743  05AB  00A6               	movwf	WriteAll_1621@p+1
  7744  05AC  3004               	movlw	4
  7745  05AD  00AF               	movwf	??_Tc_Display
  7746  05AE  082F               	movf	??_Tc_Display,w
  7747  05AF  00A7               	movwf	WriteAll_1621@cnt
  7748  05B0  3000               	movlw	0
  7749  05B1  3188  20A5         	fcall	_WriteAll_1621
  7750  05B3  0008               	return
  7751  05B4                     __end_of_Tc_Display:	
  7752                           
  7753                           	psect	text25
  7754  159C                     __ptext25:	
  7755 ;; *************** function _memset *****************
  7756 ;; Defined at:
  7757 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  p1              1    wreg     PTR void 
  7760 ;;		 -> display_buff(4), 
  7761 ;;  c               2    1[BANK0 ] int 
  7762 ;;  n               2    3[BANK0 ] unsigned int 
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;  p1              1    6[BANK0 ] PTR void 
  7765 ;;		 -> display_buff(4), 
  7766 ;;  p               1    7[BANK0 ] PTR unsigned char 
  7767 ;;		 -> display_buff(4), 
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  1    wreg      PTR void 
  7770 ;; Registers used:
  7771 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7777 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;Total ram usage:        7 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    3
  7784 ;; This function calls:
  7785 ;;		Nothing
  7786 ;; This function is called by:
  7787 ;;		_Tc_Display
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           
  7792                           ;psect for function _memset
  7793  159C                     _memset:	
  7794                           
  7795                           ;incstack = 0
  7796                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7797                           ;memset@p1 stored from wreg
  7798  159C  0020               	movlb	0	; select bank0
  7799  159D  00A6               	movwf	memset@p1
  7800  159E  0826               	movf	memset@p1,w
  7801  159F  00A5               	movwf	??_memset
  7802  15A0  0825               	movf	??_memset,w
  7803  15A1  00A7               	movwf	memset@p
  7804  15A2                     l5321:	
  7805  15A2  3001               	movlw	1
  7806  15A3  02A3               	subwf	memset@n,f
  7807  15A4  3000               	movlw	0
  7808  15A5  3BA4               	subwfb	memset@n+1,f
  7809  15A6  0A23               	incf	memset@n,w
  7810  15A7  1903               	btfsc	3,2
  7811  15A8  0A24               	incf	memset@n+1,w
  7812  15A9  1903               	btfsc	3,2
  7813  15AA  0008               	return
  7814  15AB  0821               	movf	memset@c,w
  7815  15AC  00A5               	movwf	??_memset
  7816  15AD  0827               	movf	memset@p,w
  7817  15AE  0086               	movwf	6
  7818  15AF  0187               	clrf	7
  7819  15B0  0825               	movf	??_memset,w
  7820  15B1  0081               	movwf	1
  7821  15B2  3001               	movlw	1
  7822  15B3  00A5               	movwf	??_memset
  7823  15B4  0825               	movf	??_memset,w
  7824  15B5  07A7               	addwf	memset@p,f
  7825  15B6  2DA2               	goto	l5321
  7826  15B7                     __end_of_memset:	
  7827                           ;	Return value of _memset is never used
  7828                           
  7829                           
  7830                           	psect	text26
  7831  1776                     __ptext26:	
  7832 ;; *************** function ___lwmod *****************
  7833 ;; Defined at:
  7834 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  divisor         2    1[BANK0 ] unsigned int 
  7837 ;;  dividend        2    3[BANK0 ] unsigned int 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  counter         1    6[BANK0 ] unsigned char 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  2    1[BANK0 ] unsigned int 
  7842 ;; Registers used:
  7843 ;;		wreg, status,2, status,0
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7849 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7852 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;Total ram usage:        6 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    3
  7856 ;; This function calls:
  7857 ;;		Nothing
  7858 ;; This function is called by:
  7859 ;;		_Tc_Display
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           
  7864                           ;psect for function ___lwmod
  7865  1776                     ___lwmod:	
  7866                           
  7867                           ;incstack = 0
  7868                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7869  1776  0020               	movlb	0	; select bank0
  7870  1777  0821               	movf	___lwmod@divisor,w
  7871  1778  0422               	iorwf	___lwmod@divisor+1,w
  7872  1779  1903               	btfsc	3,2
  7873  177A  2F9E               	goto	l5449
  7874  177B  01A6               	clrf	___lwmod@counter
  7875  177C  0AA6               	incf	___lwmod@counter,f
  7876  177D                     l5439:	
  7877  177D  1BA2               	btfsc	___lwmod@divisor+1,7
  7878  177E  2F89               	goto	l5441
  7879  177F  3001               	movlw	1
  7880  1780                     u4885:	
  7881  1780  35A1               	lslf	___lwmod@divisor,f
  7882  1781  0DA2               	rlf	___lwmod@divisor+1,f
  7883  1782  0B89               	decfsz	9,f
  7884  1783  2F80               	goto	u4885
  7885  1784  3001               	movlw	1
  7886  1785  00A5               	movwf	??___lwmod
  7887  1786  0825               	movf	??___lwmod,w
  7888  1787  07A6               	addwf	___lwmod@counter,f
  7889  1788  2F7D               	goto	l5439
  7890  1789                     l5441:	
  7891  1789  0822               	movf	___lwmod@divisor+1,w
  7892  178A  0224               	subwf	___lwmod@dividend+1,w
  7893  178B  1D03               	skipz
  7894  178C  2F8F               	goto	u4905
  7895  178D  0821               	movf	___lwmod@divisor,w
  7896  178E  0223               	subwf	___lwmod@dividend,w
  7897  178F                     u4905:	
  7898  178F  1C03               	skipc
  7899  1790  2F95               	goto	l5445
  7900  1791  0821               	movf	___lwmod@divisor,w
  7901  1792  02A3               	subwf	___lwmod@dividend,f
  7902  1793  0822               	movf	___lwmod@divisor+1,w
  7903  1794  3BA4               	subwfb	___lwmod@dividend+1,f
  7904  1795                     l5445:	
  7905  1795  3001               	movlw	1
  7906  1796                     u4915:	
  7907  1796  36A2               	lsrf	___lwmod@divisor+1,f
  7908  1797  0CA1               	rrf	___lwmod@divisor,f
  7909  1798  0B89               	decfsz	9,f
  7910  1799  2F96               	goto	u4915
  7911  179A  3001               	movlw	1
  7912  179B  02A6               	subwf	___lwmod@counter,f
  7913  179C  1D03               	btfss	3,2
  7914  179D  2F89               	goto	l5441
  7915  179E                     l5449:	
  7916  179E  0824               	movf	___lwmod@dividend+1,w
  7917  179F  00A2               	movwf	?___lwmod+1
  7918  17A0  0823               	movf	___lwmod@dividend,w
  7919  17A1  00A1               	movwf	?___lwmod
  7920  17A2  0008               	return
  7921  17A3                     __end_of___lwmod:	
  7922                           
  7923                           	psect	text27
  7924  08DA                     __ptext27:	
  7925 ;; *************** function ___lwdiv *****************
  7926 ;; Defined at:
  7927 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  divisor         2    7[BANK0 ] unsigned int 
  7930 ;;  dividend        2    9[BANK0 ] unsigned int 
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;  quotient        2   13[BANK0 ] unsigned int 
  7933 ;;  counter         1   12[BANK0 ] unsigned char 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  2    7[BANK0 ] unsigned int 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;Total ram usage:        8 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    3
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_Tc_Display
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           
  7958                           ;psect for function ___lwdiv
  7959  08DA                     ___lwdiv:	
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7963  08DA  0020               	movlb	0	; select bank0
  7964  08DB  01AD               	clrf	___lwdiv@quotient
  7965  08DC  01AE               	clrf	___lwdiv@quotient+1
  7966  08DD  0827               	movf	___lwdiv@divisor,w
  7967  08DE  0428               	iorwf	___lwdiv@divisor+1,w
  7968  08DF  1903               	btfsc	3,2
  7969  08E0  290A               	goto	l5427
  7970  08E1  01AC               	clrf	___lwdiv@counter
  7971  08E2  0AAC               	incf	___lwdiv@counter,f
  7972  08E3                     l5415:	
  7973  08E3  1BA8               	btfsc	___lwdiv@divisor+1,7
  7974  08E4  28EF               	goto	l5417
  7975  08E5  3001               	movlw	1
  7976  08E6                     u4815:	
  7977  08E6  35A7               	lslf	___lwdiv@divisor,f
  7978  08E7  0DA8               	rlf	___lwdiv@divisor+1,f
  7979  08E8  0B89               	decfsz	9,f
  7980  08E9  28E6               	goto	u4815
  7981  08EA  3001               	movlw	1
  7982  08EB  00AB               	movwf	??___lwdiv
  7983  08EC  082B               	movf	??___lwdiv,w
  7984  08ED  07AC               	addwf	___lwdiv@counter,f
  7985  08EE  28E3               	goto	l5415
  7986  08EF                     l5417:	
  7987  08EF  3001               	movlw	1
  7988  08F0                     u4835:	
  7989  08F0  35AD               	lslf	___lwdiv@quotient,f
  7990  08F1  0DAE               	rlf	___lwdiv@quotient+1,f
  7991  08F2  0B89               	decfsz	9,f
  7992  08F3  28F0               	goto	u4835
  7993  08F4  0828               	movf	___lwdiv@divisor+1,w
  7994  08F5  022A               	subwf	___lwdiv@dividend+1,w
  7995  08F6  1D03               	skipz
  7996  08F7  28FA               	goto	u4845
  7997  08F8  0827               	movf	___lwdiv@divisor,w
  7998  08F9  0229               	subwf	___lwdiv@dividend,w
  7999  08FA                     u4845:	
  8000  08FA  1C03               	skipc
  8001  08FB  2901               	goto	l5423
  8002  08FC  0827               	movf	___lwdiv@divisor,w
  8003  08FD  02A9               	subwf	___lwdiv@dividend,f
  8004  08FE  0828               	movf	___lwdiv@divisor+1,w
  8005  08FF  3BAA               	subwfb	___lwdiv@dividend+1,f
  8006  0900  142D               	bsf	___lwdiv@quotient,0
  8007  0901                     l5423:	
  8008  0901  3001               	movlw	1
  8009  0902                     u4855:	
  8010  0902  36A8               	lsrf	___lwdiv@divisor+1,f
  8011  0903  0CA7               	rrf	___lwdiv@divisor,f
  8012  0904  0B89               	decfsz	9,f
  8013  0905  2902               	goto	u4855
  8014  0906  3001               	movlw	1
  8015  0907  02AC               	subwf	___lwdiv@counter,f
  8016  0908  1D03               	btfss	3,2
  8017  0909  28EF               	goto	l5417
  8018  090A                     l5427:	
  8019  090A  082E               	movf	___lwdiv@quotient+1,w
  8020  090B  00A8               	movwf	?___lwdiv+1
  8021  090C  082D               	movf	___lwdiv@quotient,w
  8022  090D  00A7               	movwf	?___lwdiv
  8023  090E  0008               	return
  8024  090F                     __end_of___lwdiv:	
  8025                           
  8026                           	psect	text28
  8027  0AB0                     __ptext28:	
  8028 ;; *************** function _one_temperature_trans *****************
  8029 ;; Defined at:
  8030 ;;		line 292 in file "mcc_generated_files/max31856.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;		None
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;Total ram usage:        2 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    6
  8051 ;; This function calls:
  8052 ;;		_maxim_31856_read_nregisters
  8053 ;;		_maxim_start_conversion
  8054 ;; This function is called by:
  8055 ;;		_temperature_process
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function _one_temperature_trans
  8061  0AB0                     _one_temperature_trans:	
  8062                           
  8063                           ;max31856.c: 294: maxim_start_conversion((uint8_t) 0x40);
  8064                           
  8065                           ;incstack = 0
  8066                           ; Regs used in _one_temperature_trans: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8067  0AB0  3040               	movlw	64
  8068  0AB1  3196  26A3  318A   	fcall	_maxim_start_conversion
  8069                           
  8070                           ;max31856.c: 296: MAX31856Sec = 0;
  8071  0AB4  0021               	movlb	1	; select bank1
  8072  0AB5  01B5               	clrf	_MAX31856Sec^(0+128)
  8073                           
  8074                           ;max31856.c: 297: while( !(RB3 == 0 || MAX31856Sec > 30) ) asm("clrwdt");
  8075  0AB6  2AB8               	goto	l618
  8076  0AB7                     l619:	
  8077  0AB7  0064               	clrwdt	;# 
  8078  0AB8                     l618:	
  8079  0AB8  0020               	movlb	0	; select bank0
  8080  0AB9  1D8D               	btfss	13,3	;volatile
  8081  0ABA  2AC0               	goto	l5719
  8082  0ABB  301F               	movlw	31
  8083  0ABC  0021               	movlb	1	; select bank1
  8084  0ABD  0235               	subwf	_MAX31856Sec^(0+128),w
  8085  0ABE  1C03               	skipc
  8086  0ABF  2AB7               	goto	l619
  8087  0AC0                     l5719:	
  8088                           
  8089                           ;max31856.c: 298: if( MAX31856Sec > 30)
  8090  0AC0  301F               	movlw	31
  8091  0AC1  0021               	movlb	1	; select bank1
  8092  0AC2  0235               	subwf	_MAX31856Sec^(0+128),w
  8093  0AC3  1C03               	skipc
  8094  0AC4  2AC8               	goto	l5723
  8095                           
  8096                           ;max31856.c: 299: {
  8097                           ;max31856.c: 300: uch_sr = 0x01;
  8098  0AC5  01C9               	clrf	_uch_sr^(0+128)
  8099  0AC6  0AC9               	incf	_uch_sr^(0+128),f
  8100                           
  8101                           ;max31856.c: 301: }
  8102  0AC7  0008               	return
  8103  0AC8                     l5723:	
  8104                           
  8105                           ;max31856.c: 328: else
  8106                           ;max31856.c: 329: {
  8107                           ;max31856.c: 330: maxim_31856_read_nregisters(0x0A, uch_reg,6);
  8108  0AC8  30CA               	movlw	(low (_uch_reg| 0))& (0+255)
  8109  0AC9  0020               	movlb	0	; select bank0
  8110  0ACA  00AE               	movwf	??_one_temperature_trans
  8111  0ACB  082E               	movf	??_one_temperature_trans,w
  8112  0ACC  00A9               	movwf	maxim_31856_read_nregisters@uch_buff
  8113  0ACD  3006               	movlw	6
  8114  0ACE  00AF               	movwf	??_one_temperature_trans+1
  8115  0ACF  082F               	movf	??_one_temperature_trans+1,w
  8116  0AD0  00AA               	movwf	maxim_31856_read_nregisters@uch_nBytes
  8117  0AD1  300A               	movlw	10
  8118  0AD2  3195  2569         	fcall	_maxim_31856_read_nregisters
  8119                           
  8120                           ;max31856.c: 331: uch_cjth=uch_reg[0];uch_cjtl=uch_reg[1];
  8121  0AD4  0021               	movlb	1	; select bank1
  8122  0AD5  084A               	movf	_uch_reg^(0+128),w
  8123  0AD6  0020               	movlb	0	; select bank0
  8124  0AD7  00AE               	movwf	??_one_temperature_trans
  8125  0AD8  082E               	movf	??_one_temperature_trans,w
  8126  0AD9  0021               	movlb	1	; select bank1
  8127  0ADA  00C1               	movwf	_uch_cjth^(0+128)
  8128  0ADB  084B               	movf	(_uch_reg^(0+128)+1),w
  8129  0ADC  0020               	movlb	0	; select bank0
  8130  0ADD  00AE               	movwf	??_one_temperature_trans
  8131  0ADE  082E               	movf	??_one_temperature_trans,w
  8132  0ADF  0021               	movlb	1	; select bank1
  8133  0AE0  00C2               	movwf	_uch_cjtl^(0+128)
  8134                           
  8135                           ;max31856.c: 332: uch_ltcbh=uch_reg[2];uch_ltcbm=uch_reg[3];uch_ltcbl=uch_reg[4];
  8136  0AE1  084C               	movf	(_uch_reg^(0+128)+2),w
  8137  0AE2  0020               	movlb	0	; select bank0
  8138  0AE3  00AE               	movwf	??_one_temperature_trans
  8139  0AE4  082E               	movf	??_one_temperature_trans,w
  8140  0AE5  0021               	movlb	1	; select bank1
  8141  0AE6  00C5               	movwf	_uch_ltcbh^(0+128)
  8142  0AE7  084D               	movf	(_uch_reg^(0+128)+3),w
  8143  0AE8  0020               	movlb	0	; select bank0
  8144  0AE9  00AE               	movwf	??_one_temperature_trans
  8145  0AEA  082E               	movf	??_one_temperature_trans,w
  8146  0AEB  0021               	movlb	1	; select bank1
  8147  0AEC  00C7               	movwf	_uch_ltcbm^(0+128)
  8148  0AED  084E               	movf	(_uch_reg^(0+128)+4),w
  8149  0AEE  0020               	movlb	0	; select bank0
  8150  0AEF  00AE               	movwf	??_one_temperature_trans
  8151  0AF0  082E               	movf	??_one_temperature_trans,w
  8152  0AF1  0021               	movlb	1	; select bank1
  8153  0AF2  00C6               	movwf	_uch_ltcbl^(0+128)
  8154                           
  8155                           ;max31856.c: 333: uch_sr=uch_reg[5];
  8156  0AF3  084F               	movf	(_uch_reg^(0+128)+5),w
  8157  0AF4  0020               	movlb	0	; select bank0
  8158  0AF5  00AE               	movwf	??_one_temperature_trans
  8159  0AF6  082E               	movf	??_one_temperature_trans,w
  8160  0AF7  0021               	movlb	1	; select bank1
  8161  0AF8  00C9               	movwf	_uch_sr^(0+128)
  8162  0AF9  0008               	return
  8163  0AFA                     __end_of_one_temperature_trans:	
  8164                           
  8165                           	psect	text29
  8166  16A3                     __ptext29:	
  8167 ;; *************** function _maxim_start_conversion *****************
  8168 ;; Defined at:
  8169 ;;		line 114 in file "mcc_generated_files/max31856.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;  uch_conversi    1    wreg     unsigned char 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;  uch_conversi    1    6[BANK0 ] unsigned char 
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  1    wreg      void 
  8176 ;; Registers used:
  8177 ;;		wreg, status,2, status,0, pclath, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;Total ram usage:        2 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    5
  8190 ;; This function calls:
  8191 ;;		_maxim_31856_read_register
  8192 ;;		_maxim_31856_write_register
  8193 ;; This function is called by:
  8194 ;;		_one_temperature_trans
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           
  8199                           ;psect for function _maxim_start_conversion
  8200  16A3                     _maxim_start_conversion:	
  8201                           
  8202                           ;incstack = 0
  8203                           ; Regs used in _maxim_start_conversion: [wreg+status,2+status,0+pclath+cstack]
  8204                           ;maxim_start_conversion@uch_conversion_mode stored from wreg
  8205  16A3  0020               	movlb	0	; select bank0
  8206  16A4  00A6               	movwf	maxim_start_conversion@uch_conversion_mode
  8207                           
  8208                           ;max31856.c: 116: uch_cr0=maxim_31856_read_register(0x00);
  8209  16A5  3000               	movlw	0
  8210  16A6  3195  253C  3196   	fcall	_maxim_31856_read_register
  8211  16A9  0020               	movlb	0	; select bank0
  8212  16AA  00A5               	movwf	??_maxim_start_conversion
  8213  16AB  0825               	movf	??_maxim_start_conversion,w
  8214  16AC  0021               	movlb	1	; select bank1
  8215  16AD  00C3               	movwf	_uch_cr0^(0+128)
  8216                           
  8217                           ;max31856.c: 117: uch_cr0&=(uint8_t) 0x3F;
  8218  16AE  303F               	movlw	63
  8219  16AF  0020               	movlb	0	; select bank0
  8220  16B0  00A5               	movwf	??_maxim_start_conversion
  8221  16B1  0825               	movf	??_maxim_start_conversion,w
  8222  16B2  0021               	movlb	1	; select bank1
  8223  16B3  05C3               	andwf	_uch_cr0^(0+128),f
  8224                           
  8225                           ;max31856.c: 118: uch_cr0|=uch_conversion_mode;
  8226  16B4  0020               	movlb	0	; select bank0
  8227  16B5  0826               	movf	maxim_start_conversion@uch_conversion_mode,w
  8228  16B6  00A5               	movwf	??_maxim_start_conversion
  8229  16B7  0825               	movf	??_maxim_start_conversion,w
  8230  16B8  0021               	movlb	1	; select bank1
  8231  16B9  04C3               	iorwf	_uch_cr0^(0+128),f
  8232                           
  8233                           ;max31856.c: 119: maxim_31856_write_register(0x80, uch_cr0);
  8234  16BA  0843               	movf	_uch_cr0^(0+128),w
  8235  16BB  0020               	movlb	0	; select bank0
  8236  16BC  00A5               	movwf	??_maxim_start_conversion
  8237  16BD  0825               	movf	??_maxim_start_conversion,w
  8238  16BE  00A2               	movwf	maxim_31856_write_register@uch_register_value
  8239  16BF  3080               	movlw	128
  8240  16C0  3194  24E2         	fcall	_maxim_31856_write_register
  8241  16C2  0008               	return
  8242  16C3                     __end_of_maxim_start_conversion:	
  8243                           
  8244                           	psect	text30
  8245  14E2                     __ptext30:	
  8246 ;; *************** function _maxim_31856_write_register *****************
  8247 ;; Defined at:
  8248 ;;		line 20 in file "mcc_generated_files/max31856.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  uch_register    1    wreg     unsigned char 
  8251 ;;  uch_register    1    2[BANK0 ] unsigned char 
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  1    wreg      void 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2, status,0, pclath, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8263 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;Total ram usage:        2 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    4
  8270 ;; This function calls:
  8271 ;;		_SPI_Exchange8bit
  8272 ;; This function is called by:
  8273 ;;		_maxim_start_conversion
  8274 ;;		_maxim_clear_fault_status
  8275 ;;		_temperature_display
  8276 ;;		_maxim_31856_init
  8277 ;;		_maxim_stop_conversion
  8278 ;;		_maxim_disable_oc_fault_detection
  8279 ;;		_maxim_set_oc_fault_detection
  8280 ;; This function uses a non-reentrant model
  8281 ;;
  8282                           
  8283                           
  8284                           ;psect for function _maxim_31856_write_register
  8285  14E2                     _maxim_31856_write_register:	
  8286                           
  8287                           ;incstack = 0
  8288                           ; Regs used in _maxim_31856_write_register: [wreg+status,2+status,0+pclath+cstack]
  8289                           ;maxim_31856_write_register@uch_register_address stored from wreg
  8290  14E2  0020               	movlb	0	; select bank0
  8291  14E3  00A3               	movwf	maxim_31856_write_register@uch_register_address
  8292                           
  8293                           ;max31856.c: 22: do { LATA5 = 0; } while(0);
  8294  14E4  0022               	movlb	2	; select bank2
  8295  14E5  128C               	bcf	12,5	;volatile
  8296                           
  8297                           ;max31856.c: 23: SPI_Exchange8bit(uch_register_address);
  8298  14E6  0020               	movlb	0	; select bank0
  8299  14E7  0823               	movf	maxim_31856_write_register@uch_register_address,w
  8300  14E8  3194  24C6  3194   	fcall	_SPI_Exchange8bit
  8301                           
  8302                           ;max31856.c: 24: SPI_Exchange8bit(uch_register_value);
  8303  14EB  0020               	movlb	0	; select bank0
  8304  14EC  0822               	movf	maxim_31856_write_register@uch_register_value,w
  8305  14ED  3194  24C6         	fcall	_SPI_Exchange8bit
  8306                           
  8307                           ;max31856.c: 25: do { LATA5 = 1; } while(0);
  8308  14EF  0022               	movlb	2	; select bank2
  8309  14F0  168C               	bsf	12,5	;volatile
  8310  14F1  0008               	return
  8311  14F2                     __end_of_maxim_31856_write_register:	
  8312                           
  8313                           	psect	text31
  8314  153C                     __ptext31:	
  8315 ;; *************** function _maxim_31856_read_register *****************
  8316 ;; Defined at:
  8317 ;;		line 34 in file "mcc_generated_files/max31856.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  uch_register    1    wreg     unsigned char 
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8322 ;;  uch_register    1    4[BANK0 ] unsigned char 
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  1    wreg      unsigned char 
  8325 ;; Registers used:
  8326 ;;		wreg, status,2, status,0, pclath, cstack
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;Total ram usage:        3 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; Hardware stack levels required when called:    4
  8339 ;; This function calls:
  8340 ;;		_SPI_Exchange8bit
  8341 ;; This function is called by:
  8342 ;;		_maxim_start_conversion
  8343 ;;		_maxim_clear_fault_status
  8344 ;;		_maxim_stop_conversion
  8345 ;;		_maxim_disable_oc_fault_detection
  8346 ;;		_maxim_set_oc_fault_detection
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           
  8351                           ;psect for function _maxim_31856_read_register
  8352  153C                     _maxim_31856_read_register:	
  8353                           
  8354                           ;incstack = 0
  8355                           ; Regs used in _maxim_31856_read_register: [wreg+status,2+status,0+pclath+cstack]
  8356                           ;maxim_31856_read_register@uch_register_address stored from wreg
  8357  153C  0020               	movlb	0	; select bank0
  8358  153D  00A3               	movwf	maxim_31856_read_register@uch_register_address
  8359                           
  8360                           ;max31856.c: 36: uint8_t uch_register_data;
  8361                           ;max31856.c: 37: do { LATA5 = 0; } while(0);
  8362  153E  0022               	movlb	2	; select bank2
  8363  153F  128C               	bcf	12,5	;volatile
  8364                           
  8365                           ;max31856.c: 38: SPI_Exchange8bit(uch_register_address);
  8366  1540  0020               	movlb	0	; select bank0
  8367  1541  0823               	movf	maxim_31856_read_register@uch_register_address,w
  8368  1542  3194  24C6  3195   	fcall	_SPI_Exchange8bit
  8369                           
  8370                           ;max31856.c: 39: uch_register_data=SPI_Exchange8bit(0xff);
  8371  1545  30FF               	movlw	255
  8372  1546  3194  24C6         	fcall	_SPI_Exchange8bit
  8373  1548  0020               	movlb	0	; select bank0
  8374  1549  00A2               	movwf	??_maxim_31856_read_register
  8375  154A  0822               	movf	??_maxim_31856_read_register,w
  8376  154B  00A4               	movwf	maxim_31856_read_register@uch_register_data
  8377                           
  8378                           ;max31856.c: 40: do { LATA5 = 1; } while(0);
  8379  154C  0022               	movlb	2	; select bank2
  8380  154D  168C               	bsf	12,5	;volatile
  8381                           
  8382                           ;max31856.c: 41: return (uch_register_data);
  8383  154E  0020               	movlb	0	; select bank0
  8384  154F  0824               	movf	maxim_31856_read_register@uch_register_data,w
  8385  1550  0008               	return
  8386  1551                     __end_of_maxim_31856_read_register:	
  8387                           
  8388                           	psect	text32
  8389  1569                     __ptext32:	
  8390 ;; *************** function _maxim_31856_read_nregisters *****************
  8391 ;; Defined at:
  8392 ;;		line 50 in file "mcc_generated_files/max31856.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;  uch_register    1    wreg     unsigned char 
  8395 ;;  uch_buff        1    9[BANK0 ] PTR unsigned char 
  8396 ;;		 -> uch_reg(8), 
  8397 ;;  uch_nBytes      1   10[BANK0 ] unsigned char 
  8398 ;; Auto vars:     Size  Location     Type
  8399 ;;  uch_register    1   13[BANK0 ] unsigned char 
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  1    wreg      void 
  8402 ;; Registers used:
  8403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8409 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;Total ram usage:        5 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    5
  8416 ;; This function calls:
  8417 ;;		_SPI_Exchange8bit
  8418 ;;		_SPI_Exchange8bitBuffer
  8419 ;; This function is called by:
  8420 ;;		_one_temperature_trans
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           
  8425                           ;psect for function _maxim_31856_read_nregisters
  8426  1569                     _maxim_31856_read_nregisters:	
  8427                           
  8428                           ;incstack = 0
  8429                           ; Regs used in _maxim_31856_read_nregisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8430                           ;maxim_31856_read_nregisters@uch_register_address stored from wreg
  8431  1569  0020               	movlb	0	; select bank0
  8432  156A  00AD               	movwf	maxim_31856_read_nregisters@uch_register_address
  8433                           
  8434                           ;max31856.c: 52: do { LATA5 = 0; } while(0);
  8435  156B  0022               	movlb	2	; select bank2
  8436  156C  128C               	bcf	12,5	;volatile
  8437                           
  8438                           ;max31856.c: 53: SPI_Exchange8bit(uch_register_address);
  8439  156D  0020               	movlb	0	; select bank0
  8440  156E  082D               	movf	maxim_31856_read_nregisters@uch_register_address,w
  8441  156F  3194  24C6  3195   	fcall	_SPI_Exchange8bit
  8442                           
  8443                           ;max31856.c: 54: SPI_Exchange8bitBuffer((0), uch_nBytes, uch_buff);
  8444  1572  0020               	movlb	0	; select bank0
  8445  1573  082A               	movf	maxim_31856_read_nregisters@uch_nBytes,w
  8446  1574  00AB               	movwf	??_maxim_31856_read_nregisters
  8447  1575  082B               	movf	??_maxim_31856_read_nregisters,w
  8448  1576  00A2               	movwf	SPI_Exchange8bitBuffer@bufLen
  8449  1577  0829               	movf	maxim_31856_read_nregisters@uch_buff,w
  8450  1578  00AC               	movwf	??_maxim_31856_read_nregisters+1
  8451  1579  082C               	movf	??_maxim_31856_read_nregisters+1,w
  8452  157A  00A3               	movwf	SPI_Exchange8bitBuffer@dataOut
  8453  157B  3000               	movlw	0
  8454  157C  318B  2347         	fcall	_SPI_Exchange8bitBuffer
  8455                           
  8456                           ;max31856.c: 55: do { LATA5 = 1; } while(0);
  8457  157E  0022               	movlb	2	; select bank2
  8458  157F  168C               	bsf	12,5	;volatile
  8459  1580  0008               	return
  8460  1581                     __end_of_maxim_31856_read_nregisters:	
  8461                           
  8462                           	psect	text33
  8463  0B47                     __ptext33:	
  8464 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8465 ;; Defined at:
  8466 ;;		line 89 in file "mcc_generated_files/spi.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;  dataIn          1    wreg     PTR unsigned char 
  8469 ;;		 -> NULL(0), 
  8470 ;;  bufLen          1    2[BANK0 ] unsigned char 
  8471 ;;  dataOut         1    3[BANK0 ] PTR unsigned char 
  8472 ;;		 -> uch_reg(8), 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;  dataIn          1    7[BANK0 ] PTR unsigned char 
  8475 ;;		 -> NULL(0), 
  8476 ;;  bytesWritten    1    8[BANK0 ] unsigned char 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      unsigned char 
  8479 ;; Registers used:
  8480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8486 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;Total ram usage:        7 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    4
  8493 ;; This function calls:
  8494 ;;		_SPI_Exchange8bit
  8495 ;; This function is called by:
  8496 ;;		_maxim_31856_read_nregisters
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           
  8501                           ;psect for function _SPI_Exchange8bitBuffer
  8502  0B47                     _SPI_Exchange8bitBuffer:	
  8503                           
  8504                           ;incstack = 0
  8505                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8506                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8507  0B47  0020               	movlb	0	; select bank0
  8508  0B48  00A7               	movwf	SPI_Exchange8bitBuffer@dataIn
  8509                           
  8510                           ;spi.c: 90: uint8_t bytesWritten = 0;
  8511  0B49  01A8               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8512                           
  8513                           ;spi.c: 92: if (bufLen != 0) {
  8514  0B4A  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8515  0B4B  1903               	btfsc	3,2
  8516  0B4C  0008               	return
  8517                           
  8518                           ;spi.c: 93: if (dataIn != (0)) {
  8519  0B4D  0827               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8520  0B4E  1D03               	btfss	3,2
  8521  0B4F  2B79               	goto	l5221
  8522  0B50  2B7E               	goto	l5223
  8523  0B51                     l5213:	
  8524                           ;spi.c: 94: while (bytesWritten < bufLen) {
  8525                           
  8526                           
  8527                           ;spi.c: 95: if (dataOut == (0)) {
  8528  0B51  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8529  0B52  1D03               	btfss	3,2
  8530  0B53  2B5F               	goto	l5217
  8531                           
  8532                           ;spi.c: 96: SPI_Exchange8bit(dataIn[bytesWritten]);
  8533  0B54  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8534  0B55  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8535  0B56  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8536  0B57  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8537  0B58  0086               	movwf	6
  8538  0B59  0187               	clrf	7
  8539  0B5A  0801               	movf	1,w
  8540  0B5B  3194  24C6  318B   	fcall	_SPI_Exchange8bit
  8541                           
  8542                           ;spi.c: 97: } else {
  8543  0B5E  2B74               	goto	l5219
  8544  0B5F                     l5217:	
  8545                           
  8546                           ;spi.c: 98: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  8547  0B5F  0020               	movlb	0	; select bank0
  8548  0B60  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8549  0B61  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8550  0B62  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8551  0B63  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8552  0B64  0086               	movwf	6
  8553  0B65  0187               	clrf	7
  8554  0B66  0801               	movf	1,w
  8555  0B67  3194  24C6  318B   	fcall	_SPI_Exchange8bit
  8556  0B6A  0020               	movlb	0	; select bank0
  8557  0B6B  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  8558  0B6C  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8559  0B6D  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8560  0B6E  00A6               	movwf	??_SPI_Exchange8bitBuffer+2
  8561  0B6F  0826               	movf	??_SPI_Exchange8bitBuffer+2,w
  8562  0B70  0086               	movwf	6
  8563  0B71  0187               	clrf	7
  8564  0B72  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  8565  0B73  0081               	movwf	1
  8566  0B74                     l5219:	
  8567                           
  8568                           ;spi.c: 99: }
  8569                           ;spi.c: 101: bytesWritten++;
  8570  0B74  3001               	movlw	1
  8571  0B75  0020               	movlb	0	; select bank0
  8572  0B76  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8573  0B77  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8574  0B78  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8575  0B79                     l5221:	
  8576  0B79  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8577  0B7A  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8578  0B7B  1803               	btfsc	3,0
  8579  0B7C  0008               	return
  8580  0B7D  2B51               	goto	l5213
  8581  0B7E                     l5223:	
  8582                           ;spi.c: 102: }
  8583                           ;spi.c: 103: } else {
  8584                           
  8585                           
  8586                           ;spi.c: 104: if (dataOut != (0)) {
  8587  0B7E  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8588  0B7F  1903               	btfsc	3,2
  8589  0B80  0008               	return
  8590  0B81                     l5231:	
  8591  0B81  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8592  0B82  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8593  0B83  1803               	btfsc	3,0
  8594  0B84  0008               	return
  8595                           
  8596                           ;spi.c: 106: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  8597                           
  8598                           ;spi.c: 105: while (bytesWritten < bufLen) {
  8599  0B85  3000               	movlw	0
  8600  0B86  3194  24C6  318B   	fcall	_SPI_Exchange8bit
  8601  0B89  0020               	movlb	0	; select bank0
  8602  0B8A  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8603  0B8B  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8604  0B8C  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8605  0B8D  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  8606  0B8E  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  8607  0B8F  0086               	movwf	6
  8608  0B90  0187               	clrf	7
  8609  0B91  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8610  0B92  0081               	movwf	1
  8611                           
  8612                           ;spi.c: 108: bytesWritten++;
  8613  0B93  3001               	movlw	1
  8614  0B94  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8615  0B95  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8616  0B96  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8617  0B97  2B81               	goto	l5231
  8618  0B98                     __end_of_SPI_Exchange8bitBuffer:	
  8619                           ;spi.c: 109: }
  8620                           ;spi.c: 110: }
  8621                           ;spi.c: 111: }
  8622                           ;spi.c: 112: }
  8623                           ;spi.c: 114: return bytesWritten;
  8624                           ;	Return value of _SPI_Exchange8bitBuffer is never used
  8625                           
  8626                           
  8627                           	psect	text34
  8628  14C6                     __ptext34:	
  8629 ;; *************** function _SPI_Exchange8bit *****************
  8630 ;; Defined at:
  8631 ;;		line 77 in file "mcc_generated_files/spi.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;  data            1    wreg     unsigned char 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  data            1    1[BANK0 ] unsigned char 
  8636 ;; Return value:  Size  Location     Type
  8637 ;;                  1    wreg      unsigned char 
  8638 ;; Registers used:
  8639 ;;		wreg
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;Total ram usage:        1 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    3
  8652 ;; This function calls:
  8653 ;;		Nothing
  8654 ;; This function is called by:
  8655 ;;		_SPI_Exchange8bitBuffer
  8656 ;;		_maxim_31856_write_register
  8657 ;;		_maxim_31856_read_register
  8658 ;;		_maxim_31856_read_nregisters
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           
  8663                           ;psect for function _SPI_Exchange8bit
  8664  14C6                     _SPI_Exchange8bit:	
  8665                           
  8666                           ;incstack = 0
  8667                           ; Regs used in _SPI_Exchange8bit: [wreg]
  8668                           ;SPI_Exchange8bit@data stored from wreg
  8669  14C6  0020               	movlb	0	; select bank0
  8670  14C7  00A1               	movwf	SPI_Exchange8bit@data
  8671                           
  8672                           ;spi.c: 79: SSP1CON1bits.WCOL = 0;
  8673  14C8  0024               	movlb	4	; select bank4
  8674  14C9  1395               	bcf	21,7	;volatile
  8675                           
  8676                           ;spi.c: 81: SSPBUF = data;
  8677  14CA  0020               	movlb	0	; select bank0
  8678  14CB  0821               	movf	SPI_Exchange8bit@data,w
  8679  14CC  0024               	movlb	4	; select bank4
  8680  14CD  0091               	movwf	17	;volatile
  8681  14CE                     l71:	
  8682                           ;spi.c: 83: while (SSP1STATbits.BF == 0x0) {
  8683                           
  8684  14CE  1C14               	btfss	20,0	;volatile
  8685  14CF  2CCE               	goto	l71
  8686                           
  8687                           ;spi.c: 84: }
  8688                           ;spi.c: 86: return (SSPBUF);
  8689  14D0  0811               	movf	17,w	;volatile
  8690  14D1  0008               	return
  8691  14D2                     __end_of_SPI_Exchange8bit:	
  8692                           
  8693                           	psect	text35
  8694  0874                     __ptext35:	
  8695 ;; *************** function _Two_Display *****************
  8696 ;; Defined at:
  8697 ;;		line 139 in file "mcc_generated_files/ht1621.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  number          1    wreg     unsigned char 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  number          1   16[BANK0 ] unsigned char 
  8702 ;;  num             4   12[BANK0 ] unsigned char [4]
  8703 ;; Return value:  Size  Location     Type
  8704 ;;                  1    wreg      void 
  8705 ;; Registers used:
  8706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;Total ram usage:        6 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:    5
  8719 ;; This function calls:
  8720 ;;		_WriteAll_1621
  8721 ;; This function is called by:
  8722 ;;		_temperature_process
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function _Two_Display
  8728  0874                     _Two_Display:	
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _Two_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8732                           ;Two_Display@number stored from wreg
  8733  0874  0020               	movlb	0	; select bank0
  8734  0875  00B0               	movwf	Two_Display@number
  8735                           
  8736                           ;ht1621.c: 141: unsigned char num[4]={0};
  8737  0876  0022               	movlb	2	; select bank2
  8738  0877  0833               	movf	(Two_Display@F2132+3)^(0+256),w
  8739  0878  0020               	movlb	0	; select bank0
  8740  0879  00AF               	movwf	Two_Display@num+3
  8741  087A  0022               	movlb	2	; select bank2
  8742  087B  0832               	movf	(Two_Display@F2132+2)^(0+256),w
  8743  087C  0020               	movlb	0	; select bank0
  8744  087D  00AE               	movwf	Two_Display@num+2
  8745  087E  0022               	movlb	2	; select bank2
  8746  087F  0831               	movf	(Two_Display@F2132+1)^(0+256),w
  8747  0880  0020               	movlb	0	; select bank0
  8748  0881  00AD               	movwf	Two_Display@num+1
  8749  0882  0022               	movlb	2	; select bank2
  8750  0883  0830               	movf	Two_Display@F2132^(0+256),w
  8751  0884  0020               	movlb	0	; select bank0
  8752  0885  00AC               	movwf	Two_Display@num
  8753                           
  8754                           ;ht1621.c: 142: num[1] = Dis_TAB[0];
  8755  0886  3000               	movlw	low (_Dis_TAB| (0+32768))
  8756  0887  0084               	movwf	4
  8757  0888  3098               	movlw	high (_Dis_TAB| (0+32768))
  8758  0889  0085               	movwf	5
  8759  088A  0800               	movf	0,w	;code access
  8760  088B  00AB               	movwf	??_Two_Display
  8761  088C  082B               	movf	??_Two_Display,w
  8762  088D  00AD               	movwf	Two_Display@num+1
  8763                           
  8764                           ;ht1621.c: 143: num[2] = Dis_TAB[number];
  8765  088E  0830               	movf	Two_Display@number,w
  8766  088F  3E00               	addlw	low (_Dis_TAB| (0+32768))
  8767  0890  0084               	movwf	4
  8768  0891  3098               	movlw	high (_Dis_TAB| (0+32768))
  8769  0892  1803               	skipnc
  8770  0893  3E01               	addlw	1
  8771  0894  0085               	movwf	5
  8772  0895  0800               	movf	0,w	;code access
  8773  0896  00AB               	movwf	??_Two_Display
  8774  0897  082B               	movf	??_Two_Display,w
  8775  0898  00AE               	movwf	Two_Display@num+2
  8776                           
  8777                           ;ht1621.c: 144: WriteAll_1621(0, num, 4);
  8778  0899  302C               	movlw	low Two_Display@num
  8779  089A  00A5               	movwf	WriteAll_1621@p
  8780  089B  3000               	movlw	high Two_Display@num
  8781  089C  00A6               	movwf	WriteAll_1621@p+1
  8782  089D  3004               	movlw	4
  8783  089E  00AB               	movwf	??_Two_Display
  8784  089F  082B               	movf	??_Two_Display,w
  8785  08A0  00A7               	movwf	WriteAll_1621@cnt
  8786  08A1  3000               	movlw	0
  8787  08A2  3188  20A5         	fcall	_WriteAll_1621
  8788  08A4  0008               	return
  8789  08A5                     __end_of_Two_Display:	
  8790                           
  8791                           	psect	text36
  8792  08A5                     __ptext36:	
  8793 ;; *************** function _WriteAll_1621 *****************
  8794 ;; Defined at:
  8795 ;;		line 91 in file "mcc_generated_files/ht1621.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  addr            1    wreg     unsigned char 
  8798 ;;  p               2    5[BANK0 ] PTR unsigned char 
  8799 ;;		 -> time_Display@num(4), err_Display@num(4), Two_Display@num(4), display_buff(4), 
  8800 ;;		 -> Dis_TAB(21), 
  8801 ;;  cnt             1    7[BANK0 ] unsigned char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  addr            1    9[BANK0 ] unsigned char 
  8804 ;;  i               1   10[BANK0 ] unsigned char 
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  1    wreg      void 
  8807 ;; Registers used:
  8808 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8814 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;Total ram usage:        6 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:    4
  8821 ;; This function calls:
  8822 ;;		_SendBit_1621
  8823 ;;		_SendDataBit_1621
  8824 ;; This function is called by:
  8825 ;;		_main
  8826 ;;		_Tc_Display
  8827 ;;		_Two_Display
  8828 ;;		_err_Display
  8829 ;;		_time_Display
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           
  8834                           ;psect for function _WriteAll_1621
  8835  08A5                     _WriteAll_1621:	
  8836                           
  8837                           ;incstack = 0
  8838                           ; Regs used in _WriteAll_1621: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8839                           ;WriteAll_1621@addr stored from wreg
  8840  08A5  0020               	movlb	0	; select bank0
  8841  08A6  00A9               	movwf	WriteAll_1621@addr
  8842                           
  8843                           ;ht1621.c: 93: unsigned char i;
  8844                           ;ht1621.c: 94: do { LATC0 = 0; } while(0);
  8845  08A7  0022               	movlb	2	; select bank2
  8846  08A8  100E               	bcf	14,0	;volatile
  8847                           
  8848                           ;ht1621.c: 95: SendBit_1621(0xa0,3);
  8849  08A9  3003               	movlw	3
  8850  08AA  0020               	movlb	0	; select bank0
  8851  08AB  00A8               	movwf	??_WriteAll_1621
  8852  08AC  0828               	movf	??_WriteAll_1621,w
  8853  08AD  00A1               	movwf	SendBit_1621@cnt
  8854  08AE  30A0               	movlw	160
  8855  08AF  3196  26C3  3188   	fcall	_SendBit_1621
  8856                           
  8857                           ;ht1621.c: 96: SendBit_1621(addr,6);
  8858  08B2  3006               	movlw	6
  8859  08B3  0020               	movlb	0	; select bank0
  8860  08B4  00A8               	movwf	??_WriteAll_1621
  8861  08B5  0828               	movf	??_WriteAll_1621,w
  8862  08B6  00A1               	movwf	SendBit_1621@cnt
  8863  08B7  0829               	movf	WriteAll_1621@addr,w
  8864  08B8  3196  26C3  3188   	fcall	_SendBit_1621
  8865                           
  8866                           ;ht1621.c: 97: for(i =0; i <cnt; i ++,p++)
  8867  08BB  0020               	movlb	0	; select bank0
  8868  08BC  01AA               	clrf	WriteAll_1621@i
  8869  08BD                     l5243:	
  8870  08BD  0827               	movf	WriteAll_1621@cnt,w
  8871  08BE  022A               	subwf	WriteAll_1621@i,w
  8872  08BF  1803               	btfsc	3,0
  8873  08C0  28D7               	goto	l751
  8874                           
  8875                           ;ht1621.c: 98: {
  8876                           ;ht1621.c: 99: SendDataBit_1621(*p,8);
  8877  08C1  3008               	movlw	8
  8878  08C2  00A8               	movwf	??_WriteAll_1621
  8879  08C3  0828               	movf	??_WriteAll_1621,w
  8880  08C4  00A1               	movwf	SendDataBit_1621@cnt
  8881  08C5  0825               	movf	WriteAll_1621@p,w
  8882  08C6  0084               	movwf	4
  8883  08C7  0826               	movf	WriteAll_1621@p+1,w
  8884  08C8  0085               	movwf	5
  8885  08C9  0800               	movf	0,w	;code access
  8886  08CA  3196  26E4  3188   	fcall	_SendDataBit_1621
  8887  08CD  3001               	movlw	1
  8888  08CE  0020               	movlb	0	; select bank0
  8889  08CF  00A8               	movwf	??_WriteAll_1621
  8890  08D0  0828               	movf	??_WriteAll_1621,w
  8891  08D1  07AA               	addwf	WriteAll_1621@i,f
  8892  08D2  3001               	movlw	1
  8893  08D3  07A5               	addwf	WriteAll_1621@p,f
  8894  08D4  3000               	movlw	0
  8895  08D5  3DA6               	addwfc	WriteAll_1621@p+1,f
  8896  08D6  28BD               	goto	l5243
  8897  08D7                     l751:	
  8898                           ;ht1621.c: 100: }
  8899                           ;ht1621.c: 101: do { LATC0 = 1; } while(0);
  8900                           
  8901  08D7  0022               	movlb	2	; select bank2
  8902  08D8  140E               	bsf	14,0	;volatile
  8903  08D9  0008               	return
  8904  08DA                     __end_of_WriteAll_1621:	
  8905                           
  8906                           	psect	text37
  8907  16E4                     __ptext37:	
  8908 ;; *************** function _SendDataBit_1621 *****************
  8909 ;; Defined at:
  8910 ;;		line 42 in file "mcc_generated_files/ht1621.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  data            1    wreg     unsigned char 
  8913 ;;  cnt             1    1[BANK0 ] unsigned char 
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;  data            1    3[BANK0 ] unsigned char 
  8916 ;;  i               1    4[BANK0 ] unsigned char 
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  1    wreg      void 
  8919 ;; Registers used:
  8920 ;;		wreg, status,2, status,0
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8926 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;Total ram usage:        4 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; Hardware stack levels required when called:    3
  8933 ;; This function calls:
  8934 ;;		Nothing
  8935 ;; This function is called by:
  8936 ;;		_WriteAll_1621
  8937 ;;		_Write_1621
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           
  8942                           ;psect for function _SendDataBit_1621
  8943  16E4                     _SendDataBit_1621:	
  8944                           
  8945                           ;incstack = 0
  8946                           ; Regs used in _SendDataBit_1621: [wreg+status,2+status,0]
  8947                           ;SendDataBit_1621@data stored from wreg
  8948  16E4  0020               	movlb	0	; select bank0
  8949  16E5  00A3               	movwf	SendDataBit_1621@data
  8950                           
  8951                           ;ht1621.c: 44: unsigned char i;
  8952                           ;ht1621.c: 45: for(i =0; i <cnt; i ++)
  8953  16E6  01A4               	clrf	SendDataBit_1621@i
  8954  16E7                     l5171:	
  8955  16E7  0821               	movf	SendDataBit_1621@cnt,w
  8956  16E8  0224               	subwf	SendDataBit_1621@i,w
  8957  16E9  1803               	btfsc	3,0
  8958  16EA  0008               	return
  8959                           
  8960                           ;ht1621.c: 46: {
  8961                           ;ht1621.c: 47: if((data&0x01)==0) do { LATC2 = 0; } while(0);
  8962  16EB  1823               	btfsc	SendDataBit_1621@data,0
  8963  16EC  2EF0               	goto	l722
  8964  16ED  0022               	movlb	2	; select bank2
  8965  16EE  110E               	bcf	14,2	;volatile
  8966  16EF  2EF2               	goto	l724
  8967  16F0                     l722:	
  8968                           ;ht1621.c: 48: else do { LATC2 = 1; } while(0);
  8969                           
  8970  16F0  0022               	movlb	2	; select bank2
  8971  16F1  150E               	bsf	14,2	;volatile
  8972  16F2                     l724:	
  8973                           ;ht1621.c: 49: do { LATC1 = 0; } while(0);
  8974                           
  8975  16F2  108E               	bcf	14,1	;volatile
  8976                           
  8977                           ;ht1621.c: 50: _delay((unsigned long)((1)*(4000000/4000.0)));
  8978  16F3  30F9               	movlw	249
  8979  16F4  0020               	movlb	0	; select bank0
  8980  16F5  00A2               	movwf	??_SendDataBit_1621
  8981  16F6                     u5907:	
  8982  16F6  0000               	nop
  8983  16F7  0BA2               	decfsz	??_SendDataBit_1621,f
  8984  16F8  2EF6               	goto	u5907
  8985  16F9  3200               	nop2	;nop
  8986  16FA  0000               	nop
  8987                           
  8988                           ;ht1621.c: 51: do { LATC1 = 1; } while(0);
  8989  16FB  0022               	movlb	2	; select bank2
  8990  16FC  148E               	bsf	14,1	;volatile
  8991                           
  8992                           ;ht1621.c: 52: data>>=1;
  8993  16FD  1003               	clrc
  8994  16FE  0020               	movlb	0	; select bank0
  8995  16FF  0CA3               	rrf	SendDataBit_1621@data,f
  8996  1700  3001               	movlw	1
  8997  1701  00A2               	movwf	??_SendDataBit_1621
  8998  1702  0822               	movf	??_SendDataBit_1621,w
  8999  1703  07A4               	addwf	SendDataBit_1621@i,f
  9000  1704  2EE7               	goto	l5171
  9001  1705                     __end_of_SendDataBit_1621:	
  9002                           
  9003                           	psect	text38
  9004  1493                     __ptext38:	
  9005 ;; *************** function _Set_start_flag *****************
  9006 ;; Defined at:
  9007 ;;		line 18 in file "mcc_generated_files/save.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;		None
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;		None
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  1    wreg      void 
  9014 ;; Registers used:
  9015 ;;		None
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;Total ram usage:        0 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    3
  9028 ;; This function calls:
  9029 ;;		Nothing
  9030 ;; This function is called by:
  9031 ;;		_Key_Process
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           
  9036                           ;psect for function _Set_start_flag
  9037  1493                     _Set_start_flag:	
  9038                           
  9039                           ;save.c: 20: Record_flag = 1;
  9040                           
  9041                           ;incstack = 0
  9042                           ; Regs used in _Set_start_flag: []
  9043  1493  0021               	movlb	1	; select bank1
  9044  1494  01B6               	clrf	_Record_flag^(0+128)
  9045  1495  0AB6               	incf	_Record_flag^(0+128),f
  9046                           
  9047                           ;save.c: 21: do { LATA4 = 0; } while(0);
  9048  1496  0022               	movlb	2	; select bank2
  9049  1497  120C               	bcf	12,4	;volatile
  9050  1498  0008               	return
  9051  1499                     __end_of_Set_start_flag:	
  9052                           
  9053                           	psect	text39
  9054  1488                     __ptext39:	
  9055 ;; *************** function _Set_finish_flag *****************
  9056 ;; Defined at:
  9057 ;;		line 30 in file "mcc_generated_files/save.c"
  9058 ;; Parameters:    Size  Location     Type
  9059 ;;		None
  9060 ;; Auto vars:     Size  Location     Type
  9061 ;;		None
  9062 ;; Return value:  Size  Location     Type
  9063 ;;                  1    wreg      void 
  9064 ;; Registers used:
  9065 ;;		status,2
  9066 ;; Tracked objects:
  9067 ;;		On entry : 0/0
  9068 ;;		On exit  : 0/0
  9069 ;;		Unchanged: 0/0
  9070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;Total ram usage:        0 bytes
  9076 ;; Hardware stack levels used:    1
  9077 ;; Hardware stack levels required when called:    3
  9078 ;; This function calls:
  9079 ;;		Nothing
  9080 ;; This function is called by:
  9081 ;;		_Key_Process
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           
  9086                           ;psect for function _Set_finish_flag
  9087  1488                     _Set_finish_flag:	
  9088                           
  9089                           ;save.c: 32: Record_flag = 0;
  9090                           
  9091                           ;incstack = 0
  9092                           ; Regs used in _Set_finish_flag: [status,2]
  9093  1488  0021               	movlb	1	; select bank1
  9094  1489  01B6               	clrf	_Record_flag^(0+128)
  9095                           
  9096                           ;save.c: 33: do { LATA4 = 1; } while(0);
  9097  148A  0022               	movlb	2	; select bank2
  9098  148B  160C               	bsf	12,4	;volatile
  9099  148C  0008               	return
  9100  148D                     __end_of_Set_finish_flag:	
  9101                           
  9102                           	psect	text40
  9103  1551                     __ptext40:	
  9104 ;; *************** function _SendCmd_1621 *****************
  9105 ;; Defined at:
  9106 ;;		line 62 in file "mcc_generated_files/ht1621.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  command         1    wreg     unsigned char 
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;  command         1    6[BANK0 ] unsigned char 
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  1    wreg      void 
  9113 ;; Registers used:
  9114 ;;		wreg, status,2, status,0, pclath, cstack
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;Total ram usage:        2 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:    4
  9127 ;; This function calls:
  9128 ;;		_SendBit_1621
  9129 ;; This function is called by:
  9130 ;;		_main
  9131 ;;		_Key_Process
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           
  9136                           ;psect for function _SendCmd_1621
  9137  1551                     _SendCmd_1621:	
  9138                           
  9139                           ;incstack = 0
  9140                           ; Regs used in _SendCmd_1621: [wreg+status,2+status,0+pclath+cstack]
  9141                           ;SendCmd_1621@command stored from wreg
  9142  1551  0020               	movlb	0	; select bank0
  9143  1552  00A6               	movwf	SendCmd_1621@command
  9144                           
  9145                           ;ht1621.c: 64: do { LATC0 = 0; } while(0);
  9146  1553  0022               	movlb	2	; select bank2
  9147  1554  100E               	bcf	14,0	;volatile
  9148                           
  9149                           ;ht1621.c: 65: SendBit_1621(0x80,4);
  9150  1555  3004               	movlw	4
  9151  1556  0020               	movlb	0	; select bank0
  9152  1557  00A5               	movwf	??_SendCmd_1621
  9153  1558  0825               	movf	??_SendCmd_1621,w
  9154  1559  00A1               	movwf	SendBit_1621@cnt
  9155  155A  3080               	movlw	128
  9156  155B  3196  26C3  3195   	fcall	_SendBit_1621
  9157                           
  9158                           ;ht1621.c: 66: SendBit_1621(command,8);
  9159  155E  3008               	movlw	8
  9160  155F  0020               	movlb	0	; select bank0
  9161  1560  00A5               	movwf	??_SendCmd_1621
  9162  1561  0825               	movf	??_SendCmd_1621,w
  9163  1562  00A1               	movwf	SendBit_1621@cnt
  9164  1563  0826               	movf	SendCmd_1621@command,w
  9165  1564  3196  26C3         	fcall	_SendBit_1621
  9166                           
  9167                           ;ht1621.c: 67: do { LATC0 = 1; } while(0);
  9168  1566  0022               	movlb	2	; select bank2
  9169  1567  140E               	bsf	14,0	;volatile
  9170  1568  0008               	return
  9171  1569                     __end_of_SendCmd_1621:	
  9172                           
  9173                           	psect	text41
  9174  16C3                     __ptext41:	
  9175 ;; *************** function _SendBit_1621 *****************
  9176 ;; Defined at:
  9177 ;;		line 22 in file "mcc_generated_files/ht1621.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;  data            1    wreg     unsigned char 
  9180 ;;  cnt             1    1[BANK0 ] unsigned char 
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;  data            1    3[BANK0 ] unsigned char 
  9183 ;;  i               1    4[BANK0 ] unsigned char 
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      void 
  9186 ;; Registers used:
  9187 ;;		wreg, status,2, status,0
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9193 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;Total ram usage:        4 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    3
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_SendCmd_1621
  9204 ;;		_WriteAll_1621
  9205 ;;		_Write_1621
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           
  9210                           ;psect for function _SendBit_1621
  9211  16C3                     _SendBit_1621:	
  9212                           
  9213                           ;incstack = 0
  9214                           ; Regs used in _SendBit_1621: [wreg+status,2+status,0]
  9215                           ;SendBit_1621@data stored from wreg
  9216  16C3  0020               	movlb	0	; select bank0
  9217  16C4  00A3               	movwf	SendBit_1621@data
  9218                           
  9219                           ;ht1621.c: 24: unsigned char i;
  9220                           ;ht1621.c: 25: for(i =0; i <cnt; i ++)
  9221  16C5  01A4               	clrf	SendBit_1621@i
  9222  16C6                     l5159:	
  9223  16C6  0821               	movf	SendBit_1621@cnt,w
  9224  16C7  0224               	subwf	SendBit_1621@i,w
  9225  16C8  1803               	btfsc	3,0
  9226  16C9  0008               	return
  9227                           
  9228                           ;ht1621.c: 26: {
  9229                           ;ht1621.c: 27: if((data&0x80)==0) do { LATC2 = 0; } while(0);
  9230  16CA  1BA3               	btfsc	SendBit_1621@data,7
  9231  16CB  2ECF               	goto	l706
  9232  16CC  0022               	movlb	2	; select bank2
  9233  16CD  110E               	bcf	14,2	;volatile
  9234  16CE  2ED1               	goto	l708
  9235  16CF                     l706:	
  9236                           ;ht1621.c: 28: else do { LATC2 = 1; } while(0);
  9237                           
  9238  16CF  0022               	movlb	2	; select bank2
  9239  16D0  150E               	bsf	14,2	;volatile
  9240  16D1                     l708:	
  9241                           ;ht1621.c: 29: do { LATC1 = 0; } while(0);
  9242                           
  9243  16D1  108E               	bcf	14,1	;volatile
  9244                           
  9245                           ;ht1621.c: 30: _delay((unsigned long)((1)*(4000000/4000.0)));
  9246  16D2  30F9               	movlw	249
  9247  16D3  0020               	movlb	0	; select bank0
  9248  16D4  00A2               	movwf	??_SendBit_1621
  9249  16D5                     u5917:	
  9250  16D5  0000               	nop
  9251  16D6  0BA2               	decfsz	??_SendBit_1621,f
  9252  16D7  2ED5               	goto	u5917
  9253  16D8  3200               	nop2	;nop
  9254  16D9  0000               	nop
  9255                           
  9256                           ;ht1621.c: 31: do { LATC1 = 1; } while(0);
  9257  16DA  0022               	movlb	2	; select bank2
  9258  16DB  148E               	bsf	14,1	;volatile
  9259                           
  9260                           ;ht1621.c: 32: data<<=1;
  9261  16DC  1003               	clrc
  9262  16DD  0020               	movlb	0	; select bank0
  9263  16DE  0DA3               	rlf	SendBit_1621@data,f
  9264  16DF  3001               	movlw	1
  9265  16E0  00A2               	movwf	??_SendBit_1621
  9266  16E1  0822               	movf	??_SendBit_1621,w
  9267  16E2  07A4               	addwf	SendBit_1621@i,f
  9268  16E3  2EC6               	goto	l5159
  9269  16E4                     __end_of_SendBit_1621:	
  9270                           
  9271                           	psect	text42
  9272  1727                     __ptext42:	
  9273 ;; *************** function _Key_Scan *****************
  9274 ;; Defined at:
  9275 ;;		line 20 in file "mcc_generated_files/key.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;  Key_val         1    3[BANK0 ] unsigned char 
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  1    wreg      unsigned char 
  9282 ;; Registers used:
  9283 ;;		wreg
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;Total ram usage:        3 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:    3
  9296 ;; This function calls:
  9297 ;;		Nothing
  9298 ;; This function is called by:
  9299 ;;		_Key_Process
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           
  9304                           ;psect for function _Key_Scan
  9305  1727                     _Key_Scan:	
  9306                           
  9307                           ;key.c: 22: unsigned char Key_val=0xff;
  9308                           
  9309                           ;incstack = 0
  9310                           ; Regs used in _Key_Scan: [wreg]
  9311  1727  30FF               	movlw	255
  9312  1728  0020               	movlb	0	; select bank0
  9313  1729  00A1               	movwf	??_Key_Scan
  9314  172A  0821               	movf	??_Key_Scan,w
  9315  172B  00A3               	movwf	Key_Scan@Key_val
  9316                           
  9317                           ;key.c: 23: if( RA7 == 0 || RB5 == 0 )
  9318  172C  1F8C               	btfss	12,7	;volatile
  9319  172D  2F30               	goto	l5937
  9320  172E  1A8D               	btfsc	13,5	;volatile
  9321  172F  2F48               	goto	l941
  9322  1730                     l5937:	
  9323                           
  9324                           ;key.c: 24: {
  9325                           ;key.c: 25: _delay((unsigned long)((10)*(4000000/4000.0)));
  9326  1730  300D               	movlw	13
  9327  1731  00A2               	movwf	??_Key_Scan+1
  9328  1732  30FB               	movlw	251
  9329  1733  00A1               	movwf	??_Key_Scan
  9330  1734                     u5927:	
  9331  1734  0BA1               	decfsz	??_Key_Scan,f
  9332  1735  2F34               	goto	u5927
  9333  1736  0BA2               	decfsz	??_Key_Scan+1,f
  9334  1737  2F34               	goto	u5927
  9335  1738  3200               	nop2
  9336                           
  9337                           ;key.c: 26: if( RA7 == 0 || RB5 == 0)
  9338  1739  0020               	movlb	0	; select bank0
  9339  173A  1F8C               	btfss	12,7	;volatile
  9340  173B  2F3E               	goto	l946
  9341  173C  1A8D               	btfsc	13,5	;volatile
  9342  173D  2F48               	goto	l941
  9343  173E                     l946:	
  9344                           
  9345                           ;key.c: 27: {
  9346                           ;key.c: 28: if(RB5 == 0 ) Key_val = 0x01;
  9347  173E  1A8D               	btfsc	13,5	;volatile
  9348  173F  2F42               	goto	l947
  9349  1740  01A3               	clrf	Key_Scan@Key_val
  9350  1741  0AA3               	incf	Key_Scan@Key_val,f
  9351  1742                     l947:	
  9352                           
  9353                           ;key.c: 29: if(RA7 == 0 ) Key_val = 0x02;
  9354  1742  1B8C               	btfsc	12,7	;volatile
  9355  1743  2F48               	goto	l941
  9356  1744  3002               	movlw	2
  9357  1745  00A1               	movwf	??_Key_Scan
  9358  1746  0821               	movf	??_Key_Scan,w
  9359  1747  00A3               	movwf	Key_Scan@Key_val
  9360  1748                     l941:	
  9361                           
  9362                           ;key.c: 30: }
  9363                           ;key.c: 31: }
  9364                           ;key.c: 32: return Key_val;
  9365  1748  0823               	movf	Key_Scan@Key_val,w
  9366  1749  0008               	return
  9367  174A                     __end_of_Key_Scan:	
  9368                           
  9369                           	psect	text43
  9370  14B3                     __ptext43:	
  9371 ;; *************** function _Com_Process *****************
  9372 ;; Defined at:
  9373 ;;		line 18 in file "mcc_generated_files/com.c"
  9374 ;; Parameters:    Size  Location     Type
  9375 ;;		None
  9376 ;; Auto vars:     Size  Location     Type
  9377 ;;		None
  9378 ;; Return value:  Size  Location     Type
  9379 ;;                  2  368[None  ] int 
  9380 ;; Registers used:
  9381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9382 ;; Tracked objects:
  9383 ;;		On entry : 0/0
  9384 ;;		On exit  : 0/0
  9385 ;;		Unchanged: 0/0
  9386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;Total ram usage:        0 bytes
  9392 ;; Hardware stack levels used:    1
  9393 ;; Hardware stack levels required when called:    7
  9394 ;; This function calls:
  9395 ;;		_Set_time_from_Com
  9396 ;; This function is called by:
  9397 ;;		_main
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           
  9402                           ;psect for function _Com_Process
  9403  14B3                     _Com_Process:	
  9404                           
  9405                           ;com.c: 20: if(Set_time_cmd_flag == 1)
  9406                           
  9407                           ;incstack = 0
  9408                           ; Regs used in _Com_Process: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9409  14B3  0021               	movlb	1	; select bank1
  9410  14B4  0337               	decf	_Set_time_cmd_flag^(0+128),w
  9411  14B5  1D03               	btfss	3,2
  9412  14B6  0008               	return
  9413                           
  9414                           ;com.c: 21: {
  9415                           ;com.c: 22: Set_time_from_Com();
  9416  14B7  3189  21F0         	fcall	_Set_time_from_Com
  9417                           
  9418                           ;com.c: 23: Set_time_cmd_flag = 0;
  9419  14B9  0021               	movlb	1	; select bank1
  9420  14BA  01B7               	clrf	_Set_time_cmd_flag^(0+128)
  9421  14BB  0008               	return
  9422  14BC                     __end_of_Com_Process:	
  9423                           
  9424                           	psect	text44
  9425  09F0                     __ptext44:	
  9426 ;; *************** function _Set_time_from_Com *****************
  9427 ;; Defined at:
  9428 ;;		line 33 in file "mcc_generated_files/com.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;		None
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;		None
  9433 ;; Return value:  Size  Location     Type
  9434 ;;                  1    wreg      void 
  9435 ;; Registers used:
  9436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;Total ram usage:        1 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    6
  9449 ;; This function calls:
  9450 ;;		_Bq32k_Rtc_Read_Time
  9451 ;;		_Bq32k_Rtc_Write_Time
  9452 ;;		_Read_time_to_Com
  9453 ;; This function is called by:
  9454 ;;		_Com_Process
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           
  9459                           ;psect for function _Set_time_from_Com
  9460  09F0                     _Set_time_from_Com:	
  9461                           
  9462                           ;com.c: 35: rtc_tm.years = Usart_Rx_Buff[4];
  9463                           
  9464                           ;incstack = 0
  9465                           ; Regs used in _Set_time_from_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9466  09F0  0022               	movlb	2	; select bank2
  9467  09F1  0840               	movf	(_Usart_Rx_Buff^(0+256)+4),w
  9468  09F2  0020               	movlb	0	; select bank0
  9469  09F3  00BF               	movwf	??_Set_time_from_Com
  9470  09F4  083F               	movf	??_Set_time_from_Com,w
  9471  09F5  0021               	movlb	1	; select bank1
  9472  09F6  00E6               	movwf	(_rtc_tm^(0+128)+6)
  9473                           
  9474                           ;com.c: 36: rtc_tm.month= Usart_Rx_Buff[5];
  9475  09F7  0022               	movlb	2	; select bank2
  9476  09F8  0841               	movf	(_Usart_Rx_Buff^(0+256)+5),w
  9477  09F9  0020               	movlb	0	; select bank0
  9478  09FA  00BF               	movwf	??_Set_time_from_Com
  9479  09FB  083F               	movf	??_Set_time_from_Com,w
  9480  09FC  0021               	movlb	1	; select bank1
  9481  09FD  00E5               	movwf	(_rtc_tm^(0+128)+5)
  9482                           
  9483                           ;com.c: 37: rtc_tm.date= Usart_Rx_Buff[6];
  9484  09FE  0022               	movlb	2	; select bank2
  9485  09FF  0842               	movf	(_Usart_Rx_Buff^(0+256)+6),w
  9486  0A00  0020               	movlb	0	; select bank0
  9487  0A01  00BF               	movwf	??_Set_time_from_Com
  9488  0A02  083F               	movf	??_Set_time_from_Com,w
  9489  0A03  0021               	movlb	1	; select bank1
  9490  0A04  00E4               	movwf	(_rtc_tm^(0+128)+4)
  9491                           
  9492                           ;com.c: 38: rtc_tm.hours= Usart_Rx_Buff[7];
  9493  0A05  0022               	movlb	2	; select bank2
  9494  0A06  0843               	movf	(_Usart_Rx_Buff^(0+256)+7),w
  9495  0A07  0020               	movlb	0	; select bank0
  9496  0A08  00BF               	movwf	??_Set_time_from_Com
  9497  0A09  083F               	movf	??_Set_time_from_Com,w
  9498  0A0A  0021               	movlb	1	; select bank1
  9499  0A0B  00E2               	movwf	(_rtc_tm^(0+128)+2)
  9500                           
  9501                           ;com.c: 39: rtc_tm.minutes= Usart_Rx_Buff[8];
  9502  0A0C  0022               	movlb	2	; select bank2
  9503  0A0D  0844               	movf	(_Usart_Rx_Buff^(0+256)+8),w
  9504  0A0E  0020               	movlb	0	; select bank0
  9505  0A0F  00BF               	movwf	??_Set_time_from_Com
  9506  0A10  083F               	movf	??_Set_time_from_Com,w
  9507  0A11  0021               	movlb	1	; select bank1
  9508  0A12  00E1               	movwf	(_rtc_tm^(0+128)+1)
  9509                           
  9510                           ;com.c: 40: rtc_tm.seconds= Usart_Rx_Buff[9];
  9511  0A13  0022               	movlb	2	; select bank2
  9512  0A14  0845               	movf	(_Usart_Rx_Buff^(0+256)+9),w
  9513  0A15  0020               	movlb	0	; select bank0
  9514  0A16  00BF               	movwf	??_Set_time_from_Com
  9515  0A17  083F               	movf	??_Set_time_from_Com,w
  9516  0A18  0021               	movlb	1	; select bank1
  9517  0A19  00E0               	movwf	_rtc_tm^(0+128)
  9518                           
  9519                           ;com.c: 41: rtc_tm.wday= Usart_Rx_Buff[10];
  9520  0A1A  0022               	movlb	2	; select bank2
  9521  0A1B  0846               	movf	(_Usart_Rx_Buff^(0+256)+10),w
  9522  0A1C  0020               	movlb	0	; select bank0
  9523  0A1D  00BF               	movwf	??_Set_time_from_Com
  9524  0A1E  083F               	movf	??_Set_time_from_Com,w
  9525  0A1F  0021               	movlb	1	; select bank1
  9526  0A20  00E3               	movwf	(_rtc_tm^(0+128)+3)
  9527                           
  9528                           ;com.c: 42: Bq32k_Rtc_Write_Time(&rtc_tm);
  9529  0A21  30E0               	movlw	(low (_rtc_tm| 0))& (0+255)
  9530  0A22  318C  2494  3189   	fcall	_Bq32k_Rtc_Write_Time
  9531                           
  9532                           ;com.c: 43: Bq32k_Rtc_Read_Time(&rtc_tm);
  9533  0A25  30E0               	movlw	(low (_rtc_tm| 0))& (0+255)
  9534  0A26  318C  24F4  3189   	fcall	_Bq32k_Rtc_Read_Time
  9535                           
  9536                           ;com.c: 44: Read_time_to_Com();
  9537  0A29  318D  25C0         	fcall	_Read_time_to_Com
  9538  0A2B  0008               	return
  9539  0A2C                     __end_of_Set_time_from_Com:	
  9540                           
  9541                           	psect	text45
  9542  0DC0                     __ptext45:	
  9543 ;; *************** function _Read_time_to_Com *****************
  9544 ;; Defined at:
  9545 ;;		line 53 in file "mcc_generated_files/com.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;		None
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;  tmp_buf        16   12[BANK0 ] unsigned char [16]
  9550 ;;  crc_tmp         2   28[BANK0 ] unsigned int 
  9551 ;;  i               1   30[BANK0 ] unsigned char 
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      void 
  9554 ;; Registers used:
  9555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;Total ram usage:       20 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    4
  9568 ;; This function calls:
  9569 ;;		_CRC_cal
  9570 ;;		_EUSART_Write
  9571 ;; This function is called by:
  9572 ;;		_Set_time_from_Com
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           
  9577                           ;psect for function _Read_time_to_Com
  9578  0DC0                     _Read_time_to_Com:	
  9579                           
  9580                           ;com.c: 55: unsigned int crc_tmp=0;
  9581                           
  9582                           ;incstack = 0
  9583                           ; Regs used in _Read_time_to_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9584  0DC0  0020               	movlb	0	; select bank0
  9585  0DC1  01BC               	clrf	Read_time_to_Com@crc_tmp
  9586  0DC2  01BD               	clrf	Read_time_to_Com@crc_tmp+1
  9587                           
  9588                           ;com.c: 56: unsigned char tmp_buf[16];
  9589                           ;com.c: 57: unsigned char i;
  9590                           ;com.c: 58: tmp_buf[0] = 0xfe;
  9591  0DC3  30FE               	movlw	254
  9592  0DC4  00AB               	movwf	??_Read_time_to_Com
  9593  0DC5  082B               	movf	??_Read_time_to_Com,w
  9594  0DC6  00AC               	movwf	Read_time_to_Com@tmp_buf
  9595                           
  9596                           ;com.c: 59: tmp_buf[1] = 0xfe;
  9597  0DC7  30FE               	movlw	254
  9598  0DC8  00AB               	movwf	??_Read_time_to_Com
  9599  0DC9  082B               	movf	??_Read_time_to_Com,w
  9600  0DCA  00AD               	movwf	Read_time_to_Com@tmp_buf+1
  9601                           
  9602                           ;com.c: 60: tmp_buf[2] = 0X02;
  9603  0DCB  3002               	movlw	2
  9604  0DCC  00AB               	movwf	??_Read_time_to_Com
  9605  0DCD  082B               	movf	??_Read_time_to_Com,w
  9606  0DCE  00AE               	movwf	Read_time_to_Com@tmp_buf+2
  9607                           
  9608                           ;com.c: 61: tmp_buf[3] = 0x07;
  9609  0DCF  3007               	movlw	7
  9610  0DD0  00AB               	movwf	??_Read_time_to_Com
  9611  0DD1  082B               	movf	??_Read_time_to_Com,w
  9612  0DD2  00AF               	movwf	Read_time_to_Com@tmp_buf+3
  9613                           
  9614                           ;com.c: 62: tmp_buf[4] = rtc_tm.years;
  9615  0DD3  0021               	movlb	1	; select bank1
  9616  0DD4  0866               	movf	(_rtc_tm^(0+128)+6),w
  9617  0DD5  0020               	movlb	0	; select bank0
  9618  0DD6  00AB               	movwf	??_Read_time_to_Com
  9619  0DD7  082B               	movf	??_Read_time_to_Com,w
  9620  0DD8  00B0               	movwf	Read_time_to_Com@tmp_buf+4
  9621                           
  9622                           ;com.c: 63: tmp_buf[5] = rtc_tm.month;
  9623  0DD9  0021               	movlb	1	; select bank1
  9624  0DDA  0865               	movf	(_rtc_tm^(0+128)+5),w
  9625  0DDB  0020               	movlb	0	; select bank0
  9626  0DDC  00AB               	movwf	??_Read_time_to_Com
  9627  0DDD  082B               	movf	??_Read_time_to_Com,w
  9628  0DDE  00B1               	movwf	Read_time_to_Com@tmp_buf+5
  9629                           
  9630                           ;com.c: 64: tmp_buf[6] = rtc_tm.date;
  9631  0DDF  0021               	movlb	1	; select bank1
  9632  0DE0  0864               	movf	(_rtc_tm^(0+128)+4),w
  9633  0DE1  0020               	movlb	0	; select bank0
  9634  0DE2  00AB               	movwf	??_Read_time_to_Com
  9635  0DE3  082B               	movf	??_Read_time_to_Com,w
  9636  0DE4  00B2               	movwf	Read_time_to_Com@tmp_buf+6
  9637                           
  9638                           ;com.c: 65: tmp_buf[7] = rtc_tm.hours;
  9639  0DE5  0021               	movlb	1	; select bank1
  9640  0DE6  0862               	movf	(_rtc_tm^(0+128)+2),w
  9641  0DE7  0020               	movlb	0	; select bank0
  9642  0DE8  00AB               	movwf	??_Read_time_to_Com
  9643  0DE9  082B               	movf	??_Read_time_to_Com,w
  9644  0DEA  00B3               	movwf	Read_time_to_Com@tmp_buf+7
  9645                           
  9646                           ;com.c: 66: tmp_buf[8] = rtc_tm.minutes;
  9647  0DEB  0021               	movlb	1	; select bank1
  9648  0DEC  0861               	movf	(_rtc_tm^(0+128)+1),w
  9649  0DED  0020               	movlb	0	; select bank0
  9650  0DEE  00AB               	movwf	??_Read_time_to_Com
  9651  0DEF  082B               	movf	??_Read_time_to_Com,w
  9652  0DF0  00B4               	movwf	Read_time_to_Com@tmp_buf+8
  9653                           
  9654                           ;com.c: 67: tmp_buf[9] = rtc_tm.seconds;
  9655  0DF1  0021               	movlb	1	; select bank1
  9656  0DF2  0860               	movf	_rtc_tm^(0+128),w
  9657  0DF3  0020               	movlb	0	; select bank0
  9658  0DF4  00AB               	movwf	??_Read_time_to_Com
  9659  0DF5  082B               	movf	??_Read_time_to_Com,w
  9660  0DF6  00B5               	movwf	Read_time_to_Com@tmp_buf+9
  9661                           
  9662                           ;com.c: 68: tmp_buf[10] = rtc_tm.wday;
  9663  0DF7  0021               	movlb	1	; select bank1
  9664  0DF8  0863               	movf	(_rtc_tm^(0+128)+3),w
  9665  0DF9  0020               	movlb	0	; select bank0
  9666  0DFA  00AB               	movwf	??_Read_time_to_Com
  9667  0DFB  082B               	movf	??_Read_time_to_Com,w
  9668  0DFC  00B6               	movwf	Read_time_to_Com@tmp_buf+10
  9669                           
  9670                           ;com.c: 69: crc_tmp = CRC_cal(tmp_buf,14);
  9671  0DFD  300E               	movlw	14
  9672  0DFE  00AB               	movwf	??_Read_time_to_Com
  9673  0DFF  082B               	movf	??_Read_time_to_Com,w
  9674  0E00  00A1               	movwf	CRC_cal@frame_len
  9675  0E01  302C               	movlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
  9676  0E02  318F  2786  318D   	fcall	_CRC_cal
  9677  0E05  0020               	movlb	0	; select bank0
  9678  0E06  0822               	movf	?_CRC_cal+1,w
  9679  0E07  00BD               	movwf	Read_time_to_Com@crc_tmp+1
  9680  0E08  0821               	movf	?_CRC_cal,w
  9681  0E09  00BC               	movwf	Read_time_to_Com@crc_tmp
  9682                           
  9683                           ;com.c: 70: tmp_buf[11] = crc_tmp >>8;
  9684  0E0A  083D               	movf	Read_time_to_Com@crc_tmp+1,w
  9685  0E0B  00AB               	movwf	??_Read_time_to_Com
  9686  0E0C  082B               	movf	??_Read_time_to_Com,w
  9687  0E0D  00B7               	movwf	Read_time_to_Com@tmp_buf+11
  9688                           
  9689                           ;com.c: 71: tmp_buf[12] = crc_tmp & 0xff;
  9690  0E0E  083C               	movf	Read_time_to_Com@crc_tmp,w
  9691  0E0F  00AB               	movwf	??_Read_time_to_Com
  9692  0E10  082B               	movf	??_Read_time_to_Com,w
  9693  0E11  00B8               	movwf	Read_time_to_Com@tmp_buf+12
  9694                           
  9695                           ;com.c: 72: tmp_buf[13] = 0xbb;
  9696  0E12  30BB               	movlw	187
  9697  0E13  00AB               	movwf	??_Read_time_to_Com
  9698  0E14  082B               	movf	??_Read_time_to_Com,w
  9699  0E15  00B9               	movwf	Read_time_to_Com@tmp_buf+13
  9700                           
  9701                           ;com.c: 73: for(i=0;i<14;i++)
  9702  0E16  01BE               	clrf	Read_time_to_Com@i
  9703  0E17                     L10:	
  9704  0E17  300E               	movlw	14
  9705  0E18  023E               	subwf	Read_time_to_Com@i,w
  9706  0E19  1803               	btfsc	3,0
  9707  0E1A  0008               	return
  9708                           
  9709                           ;com.c: 74: {
  9710                           ;com.c: 75: EUSART_Write(tmp_buf[i]);
  9711  0E1B  083E               	movf	Read_time_to_Com@i,w
  9712  0E1C  3E2C               	addlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
  9713  0E1D  0086               	movwf	6
  9714  0E1E  0187               	clrf	7
  9715  0E1F  0801               	movf	1,w
  9716  0E20  3194  24D2  318D   	fcall	_EUSART_Write
  9717  0E23  3001               	movlw	1
  9718  0E24  0020               	movlb	0	; select bank0
  9719  0E25  00AB               	movwf	??_Read_time_to_Com
  9720  0E26  082B               	movf	??_Read_time_to_Com,w
  9721  0E27  07BE               	addwf	Read_time_to_Com@i,f
  9722  0E28  2E17               	goto	L10
  9723  0E29                     __end_of_Read_time_to_Com:	
  9724                           
  9725                           	psect	text46
  9726  14D2                     __ptext46:	
  9727 ;; *************** function _EUSART_Write *****************
  9728 ;; Defined at:
  9729 ;;		line 132 in file "mcc_generated_files/eusart.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;  txData          1    wreg     unsigned char 
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;  txData          1    1[BANK0 ] unsigned char 
  9734 ;; Return value:  Size  Location     Type
  9735 ;;                  1    wreg      void 
  9736 ;; Registers used:
  9737 ;;		wreg
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;Total ram usage:        1 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    3
  9750 ;; This function calls:
  9751 ;;		Nothing
  9752 ;; This function is called by:
  9753 ;;		_Key_Process
  9754 ;;		_Read_time_to_Com
  9755 ;;		_EUSART_SendString
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           
  9760                           ;psect for function _EUSART_Write
  9761  14D2                     _EUSART_Write:	
  9762                           
  9763                           ;incstack = 0
  9764                           ; Regs used in _EUSART_Write: [wreg]
  9765                           ;EUSART_Write@txData stored from wreg
  9766  14D2  0020               	movlb	0	; select bank0
  9767  14D3  00A1               	movwf	EUSART_Write@txData
  9768                           
  9769                           ;eusart.c: 135: TXREG = txData;
  9770  14D4  0821               	movf	EUSART_Write@txData,w
  9771  14D5  0023               	movlb	3	; select bank3
  9772  14D6  009A               	movwf	26	;volatile
  9773                           
  9774                           ;eusart.c: 136: PIR1bits.TXIF = 0;
  9775  14D7  0020               	movlb	0	; select bank0
  9776  14D8  1211               	bcf	17,4	;volatile
  9777                           
  9778                           ;eusart.c: 137: __nop();
  9779  14D9  0000               	nop
  9780  14DA                     l157:	
  9781                           ;eusart.c: 138: while(!PIR1bits.TXIF)
  9782                           
  9783  14DA  0020               	movlb	0	; select bank0
  9784  14DB  1A11               	btfsc	17,4	;volatile
  9785  14DC  0008               	return
  9786                           
  9787                           ;eusart.c: 139: {__nop();__nop();__nop();__nop();}
  9788  14DD  0000               	nop
  9789  14DE  0000               	nop
  9790  14DF  0000               	nop
  9791  14E0  0000               	nop
  9792  14E1  2CDA               	goto	l157
  9793  14E2                     __end_of_EUSART_Write:	
  9794                           
  9795                           	psect	text47
  9796  0F86                     __ptext47:	
  9797 ;; *************** function _CRC_cal *****************
  9798 ;; Defined at:
  9799 ;;		line 124 in file "mcc_generated_files/com.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  rx_arr          1    wreg     PTR unsigned char 
  9802 ;;		 -> Read_time_to_Com@tmp_buf(16), 
  9803 ;;  frame_len       1    1[BANK0 ] unsigned char 
  9804 ;; Auto vars:     Size  Location     Type
  9805 ;;  rx_arr          1    7[BANK0 ] PTR unsigned char 
  9806 ;;		 -> Read_time_to_Com@tmp_buf(16), 
  9807 ;;  remainder       2    9[BANK0 ] unsigned int 
  9808 ;;  i               1    8[BANK0 ] unsigned char 
  9809 ;; Return value:  Size  Location     Type
  9810 ;;                  2    1[BANK0 ] unsigned int 
  9811 ;; Registers used:
  9812 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9813 ;; Tracked objects:
  9814 ;;		On entry : 0/0
  9815 ;;		On exit  : 0/0
  9816 ;;		Unchanged: 0/0
  9817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9818 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;Total ram usage:       10 bytes
  9823 ;; Hardware stack levels used:    1
  9824 ;; Hardware stack levels required when called:    3
  9825 ;; This function calls:
  9826 ;;		Nothing
  9827 ;; This function is called by:
  9828 ;;		_Read_time_to_Com
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           
  9833                           ;psect for function _CRC_cal
  9834  0F86                     _CRC_cal:	
  9835                           
  9836                           ;incstack = 0
  9837                           ; Regs used in _CRC_cal: [wreg+fsr1l+fsr1h+status,2+status,0]
  9838                           ;CRC_cal@rx_arr stored from wreg
  9839  0F86  0020               	movlb	0	; select bank0
  9840  0F87  00A7               	movwf	CRC_cal@rx_arr
  9841                           
  9842                           ;com.c: 126: unsigned char i = 0;
  9843  0F88  01A8               	clrf	CRC_cal@i
  9844                           
  9845                           ;com.c: 127: unsigned int remainder = 0;
  9846  0F89  01A9               	clrf	CRC_cal@remainder
  9847  0F8A  01AA               	clrf	CRC_cal@remainder+1
  9848                           
  9849                           ;com.c: 129: for(i = 2; i < frame_len - 3; i++)
  9850  0F8B  3002               	movlw	2
  9851  0F8C  00A3               	movwf	??_CRC_cal
  9852  0F8D  0823               	movf	??_CRC_cal,w
  9853  0F8E  00A8               	movwf	CRC_cal@i
  9854  0F8F                     l5707:	
  9855  0F8F  0821               	movf	CRC_cal@frame_len,w
  9856  0F90  3EFD               	addlw	253
  9857  0F91  00A3               	movwf	??_CRC_cal
  9858  0F92  30FF               	movlw	255
  9859  0F93  1803               	skipnc
  9860  0F94  3000               	movlw	0
  9861  0F95  00A4               	movwf	??_CRC_cal+1
  9862  0F96  0824               	movf	??_CRC_cal+1,w
  9863  0F97  3A80               	xorlw	128
  9864  0F98  3C80               	sublw	128
  9865  0F99  1D03               	skipz
  9866  0F9A  2F9D               	goto	u5345
  9867  0F9B  0823               	movf	??_CRC_cal,w
  9868  0F9C  0228               	subwf	CRC_cal@i,w
  9869  0F9D                     u5345:	
  9870  0F9D  1803               	btfsc	3,0
  9871  0F9E  2FFA               	goto	l5709
  9872                           
  9873                           ;com.c: 130: {
  9874                           ;com.c: 131: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
  9875  0F9F  0020               	movlb	0	; select bank0
  9876  0FA0  0829               	movf	CRC_cal@remainder,w
  9877  0FA1  00A4               	movwf	??_CRC_cal+1
  9878  0FA2  01A3               	clrf	??_CRC_cal
  9879  0FA3  082A               	movf	CRC_cal@remainder+1,w
  9880  0FA4  00A6               	movwf	??_CRC_cal+3
  9881  0FA5  0829               	movf	CRC_cal@remainder,w
  9882  0FA6  00A5               	movwf	??_CRC_cal+2
  9883  0FA7  0826               	movf	??_CRC_cal+3,w
  9884  0FA8  00A5               	movwf	??_CRC_cal+2
  9885  0FA9  01A6               	clrf	??_CRC_cal+3
  9886  0FAA  0823               	movf	??_CRC_cal,w
  9887  0FAB  0425               	iorwf	??_CRC_cal+2,w
  9888  0FAC  00A9               	movwf	CRC_cal@remainder
  9889  0FAD  0824               	movf	??_CRC_cal+1,w
  9890  0FAE  0426               	iorwf	??_CRC_cal+3,w
  9891  0FAF  00AA               	movwf	CRC_cal@remainder+1
  9892                           
  9893                           ;com.c: 132: remainder ^= rx_arr[i];
  9894  0FB0  0828               	movf	CRC_cal@i,w
  9895  0FB1  0727               	addwf	CRC_cal@rx_arr,w
  9896  0FB2  00A3               	movwf	??_CRC_cal
  9897  0FB3  0823               	movf	??_CRC_cal,w
  9898  0FB4  0086               	movwf	6
  9899  0FB5  0187               	clrf	7
  9900  0FB6  0801               	movf	1,w
  9901  0FB7  00A4               	movwf	??_CRC_cal+1
  9902  0FB8  01A5               	clrf	??_CRC_cal+2
  9903  0FB9  0824               	movf	??_CRC_cal+1,w
  9904  0FBA  06A9               	xorwf	CRC_cal@remainder,f
  9905  0FBB  0825               	movf	??_CRC_cal+2,w
  9906  0FBC  06AA               	xorwf	CRC_cal@remainder+1,f
  9907                           
  9908                           ;com.c: 133: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
  9909  0FBD  082A               	movf	CRC_cal@remainder+1,w
  9910  0FBE  00A4               	movwf	??_CRC_cal+1
  9911  0FBF  0829               	movf	CRC_cal@remainder,w
  9912  0FC0  00A3               	movwf	??_CRC_cal
  9913  0FC1  3004               	movlw	4
  9914  0FC2                     u5335:	
  9915  0FC2  36A4               	lsrf	??_CRC_cal+1,f
  9916  0FC3  0CA3               	rrf	??_CRC_cal,f
  9917  0FC4  0B89               	decfsz	9,f
  9918  0FC5  2FC2               	goto	u5335
  9919  0FC6  300F               	movlw	15
  9920  0FC7  0523               	andwf	??_CRC_cal,w
  9921  0FC8  00A5               	movwf	??_CRC_cal+2
  9922  0FC9  3000               	movlw	0
  9923  0FCA  0524               	andwf	??_CRC_cal+1,w
  9924  0FCB  00A6               	movwf	??_CRC_cal+3
  9925  0FCC  0825               	movf	??_CRC_cal+2,w
  9926  0FCD  06A9               	xorwf	CRC_cal@remainder,f
  9927  0FCE  0826               	movf	??_CRC_cal+3,w
  9928  0FCF  06AA               	xorwf	CRC_cal@remainder+1,f
  9929                           
  9930                           ;com.c: 134: remainder ^= (unsigned int)((remainder << 8) << 4);
  9931  0FD0  0829               	movf	CRC_cal@remainder,w
  9932  0FD1  00A4               	movwf	??_CRC_cal+1
  9933  0FD2  01A3               	clrf	??_CRC_cal
  9934  0FD3  0EA3               	swapf	??_CRC_cal,f
  9935  0FD4  0EA4               	swapf	??_CRC_cal+1,f
  9936  0FD5  30F0               	movlw	240
  9937  0FD6  05A4               	andwf	??_CRC_cal+1,f
  9938  0FD7  0823               	movf	??_CRC_cal,w
  9939  0FD8  390F               	andlw	15
  9940  0FD9  04A4               	iorwf	??_CRC_cal+1,f
  9941  0FDA  30F0               	movlw	240
  9942  0FDB  05A3               	andwf	??_CRC_cal,f
  9943  0FDC  0823               	movf	??_CRC_cal,w
  9944  0FDD  06A9               	xorwf	CRC_cal@remainder,f
  9945  0FDE  0824               	movf	??_CRC_cal+1,w
  9946  0FDF  06AA               	xorwf	CRC_cal@remainder+1,f
  9947                           
  9948                           ;com.c: 135: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
  9949  0FE0  30FF               	movlw	255
  9950  0FE1  0529               	andwf	CRC_cal@remainder,w
  9951  0FE2  00A3               	movwf	??_CRC_cal
  9952  0FE3  3000               	movlw	0
  9953  0FE4  052A               	andwf	CRC_cal@remainder+1,w
  9954  0FE5  00A4               	movwf	??_CRC_cal+1
  9955  0FE6  0EA3               	swapf	??_CRC_cal,f
  9956  0FE7  0EA4               	swapf	??_CRC_cal+1,f
  9957  0FE8  30F0               	movlw	240
  9958  0FE9  05A4               	andwf	??_CRC_cal+1,f
  9959  0FEA  0823               	movf	??_CRC_cal,w
  9960  0FEB  390F               	andlw	15
  9961  0FEC  04A4               	iorwf	??_CRC_cal+1,f
  9962  0FED  30F0               	movlw	240
  9963  0FEE  05A3               	andwf	??_CRC_cal,f
  9964  0FEF  35A3               	lslf	??_CRC_cal,f
  9965  0FF0  0DA4               	rlf	??_CRC_cal+1,f
  9966  0FF1  0823               	movf	??_CRC_cal,w
  9967  0FF2  06A9               	xorwf	CRC_cal@remainder,f
  9968  0FF3  0824               	movf	??_CRC_cal+1,w
  9969  0FF4  06AA               	xorwf	CRC_cal@remainder+1,f
  9970  0FF5  3001               	movlw	1
  9971  0FF6  00A3               	movwf	??_CRC_cal
  9972  0FF7  0823               	movf	??_CRC_cal,w
  9973  0FF8  07A8               	addwf	CRC_cal@i,f
  9974  0FF9  2F8F               	goto	l5707
  9975  0FFA                     l5709:	
  9976                           
  9977                           ;com.c: 136: }
  9978                           ;com.c: 137: return remainder;
  9979  0FFA  0020               	movlb	0	; select bank0
  9980  0FFB  082A               	movf	CRC_cal@remainder+1,w
  9981  0FFC  00A2               	movwf	?_CRC_cal+1
  9982  0FFD  0829               	movf	CRC_cal@remainder,w
  9983  0FFE  00A1               	movwf	?_CRC_cal
  9984  0FFF  0008               	return
  9985  1000                     __end_of_CRC_cal:	
  9986                           
  9987                           	psect	text48
  9988  0C94                     __ptext48:	
  9989 ;; *************** function _Bq32k_Rtc_Write_Time *****************
  9990 ;; Defined at:
  9991 ;;		line 53 in file "mcc_generated_files/bq32k.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;  p               1    wreg     PTR struct bq32k_regs
  9994 ;;		 -> rtc_tm(7), 
  9995 ;; Auto vars:     Size  Location     Type
  9996 ;;  p               1   30[BANK0 ] PTR struct bq32k_regs
  9997 ;;		 -> rtc_tm(7), 
  9998 ;;  temp           10   20[BANK0 ] unsigned char [10]
  9999 ;; Return value:  Size  Location     Type
 10000 ;;                  1    wreg      void 
 10001 ;; Registers used:
 10002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;Total ram usage:       13 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    5
 10015 ;; This function calls:
 10016 ;;		_I2C_Send_Buffer
 10017 ;;		_bin2bcd
 10018 ;; This function is called by:
 10019 ;;		_Set_time_from_Com
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           
 10024                           ;psect for function _Bq32k_Rtc_Write_Time
 10025  0C94                     _Bq32k_Rtc_Write_Time:	
 10026                           
 10027                           ;incstack = 0
 10028                           ; Regs used in _Bq32k_Rtc_Write_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10029                           ;Bq32k_Rtc_Write_Time@p stored from wreg
 10030  0C94  0020               	movlb	0	; select bank0
 10031  0C95  00BE               	movwf	Bq32k_Rtc_Write_Time@p
 10032                           
 10033                           ;bq32k.c: 55: unsigned char temp[10] ;
 10034                           ;bq32k.c: 56: temp[0] = bin2bcd(p->seconds);
 10035  0C96  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10036  0C97  0086               	movwf	6
 10037  0C98  0187               	clrf	7
 10038  0C99  0801               	movf	1,w
 10039  0C9A  3197  27A3  318C   	fcall	_bin2bcd
 10040  0C9D  0020               	movlb	0	; select bank0
 10041  0C9E  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10042  0C9F  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10043  0CA0  00B4               	movwf	Bq32k_Rtc_Write_Time@temp
 10044                           
 10045                           ;bq32k.c: 57: temp[1] = bin2bcd(p->minutes);
 10046  0CA1  0A3E               	incf	Bq32k_Rtc_Write_Time@p,w
 10047  0CA2  0086               	movwf	6
 10048  0CA3  0187               	clrf	7
 10049  0CA4  0801               	movf	1,w
 10050  0CA5  3197  27A3  318C   	fcall	_bin2bcd
 10051  0CA8  0020               	movlb	0	; select bank0
 10052  0CA9  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10053  0CAA  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10054  0CAB  00B5               	movwf	Bq32k_Rtc_Write_Time@temp+1
 10055                           
 10056                           ;bq32k.c: 58: temp[2] = bin2bcd(p->hours);
 10057  0CAC  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10058  0CAD  3E02               	addlw	2
 10059  0CAE  0086               	movwf	6
 10060  0CAF  0187               	clrf	7
 10061  0CB0  0801               	movf	1,w
 10062  0CB1  3197  27A3  318C   	fcall	_bin2bcd
 10063  0CB4  0020               	movlb	0	; select bank0
 10064  0CB5  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10065  0CB6  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10066  0CB7  00B6               	movwf	Bq32k_Rtc_Write_Time@temp+2
 10067                           
 10068                           ;bq32k.c: 59: temp[3] = bin2bcd(p->wday);
 10069  0CB8  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10070  0CB9  3E03               	addlw	3
 10071  0CBA  0086               	movwf	6
 10072  0CBB  0187               	clrf	7
 10073  0CBC  0801               	movf	1,w
 10074  0CBD  3197  27A3  318C   	fcall	_bin2bcd
 10075  0CC0  0020               	movlb	0	; select bank0
 10076  0CC1  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10077  0CC2  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10078  0CC3  00B7               	movwf	Bq32k_Rtc_Write_Time@temp+3
 10079                           
 10080                           ;bq32k.c: 60: temp[4] = bin2bcd(p->date);
 10081  0CC4  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10082  0CC5  3E04               	addlw	4
 10083  0CC6  0086               	movwf	6
 10084  0CC7  0187               	clrf	7
 10085  0CC8  0801               	movf	1,w
 10086  0CC9  3197  27A3  318C   	fcall	_bin2bcd
 10087  0CCC  0020               	movlb	0	; select bank0
 10088  0CCD  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10089  0CCE  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10090  0CCF  00B8               	movwf	Bq32k_Rtc_Write_Time@temp+4
 10091                           
 10092                           ;bq32k.c: 61: temp[5] = bin2bcd(p->month);
 10093  0CD0  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10094  0CD1  3E05               	addlw	5
 10095  0CD2  0086               	movwf	6
 10096  0CD3  0187               	clrf	7
 10097  0CD4  0801               	movf	1,w
 10098  0CD5  3197  27A3  318C   	fcall	_bin2bcd
 10099  0CD8  0020               	movlb	0	; select bank0
 10100  0CD9  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10101  0CDA  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10102  0CDB  00B9               	movwf	Bq32k_Rtc_Write_Time@temp+5
 10103                           
 10104                           ;bq32k.c: 62: temp[6] = bin2bcd(p->years);
 10105  0CDC  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10106  0CDD  3E06               	addlw	6
 10107  0CDE  0086               	movwf	6
 10108  0CDF  0187               	clrf	7
 10109  0CE0  0801               	movf	1,w
 10110  0CE1  3197  27A3  318C   	fcall	_bin2bcd
 10111  0CE4  0020               	movlb	0	; select bank0
 10112  0CE5  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10113  0CE6  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10114  0CE7  00BA               	movwf	Bq32k_Rtc_Write_Time@temp+6
 10115                           
 10116                           ;bq32k.c: 63: I2C_Send_Buffer( 0 , temp , 7);
 10117  0CE8  3034               	movlw	(low (Bq32k_Rtc_Write_Time@temp| 0))& (0+255)
 10118  0CE9  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10119  0CEA  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10120  0CEB  00A4               	movwf	I2C_Send_Buffer@buff
 10121  0CEC  3007               	movlw	7
 10122  0CED  00B3               	movwf	??_Bq32k_Rtc_Write_Time+1
 10123  0CEE  0833               	movf	??_Bq32k_Rtc_Write_Time+1,w
 10124  0CEF  00A5               	movwf	I2C_Send_Buffer@Length
 10125  0CF0  3000               	movlw	0
 10126  0CF1  3189  21B5         	fcall	_I2C_Send_Buffer
 10127  0CF3  0008               	return
 10128  0CF4                     __end_of_Bq32k_Rtc_Write_Time:	
 10129                           
 10130                           	psect	text49
 10131  17A3                     __ptext49:	
 10132 ;; *************** function _bin2bcd *****************
 10133 ;; Defined at:
 10134 ;;		line 83 in file "mcc_generated_files/bq32k.c"
 10135 ;; Parameters:    Size  Location     Type
 10136 ;;  val             1    wreg     unsigned char 
 10137 ;; Auto vars:     Size  Location     Type
 10138 ;;  val             1   17[BANK0 ] unsigned char 
 10139 ;; Return value:  Size  Location     Type
 10140 ;;                  1    wreg      unsigned char 
 10141 ;; Registers used:
 10142 ;;		wreg, status,2, status,0, pclath, cstack
 10143 ;; Tracked objects:
 10144 ;;		On entry : 0/0
 10145 ;;		On exit  : 0/0
 10146 ;;		Unchanged: 0/0
 10147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;Total ram usage:        8 bytes
 10153 ;; Hardware stack levels used:    1
 10154 ;; Hardware stack levels required when called:    4
 10155 ;; This function calls:
 10156 ;;		___awdiv
 10157 ;;		___awmod
 10158 ;; This function is called by:
 10159 ;;		_Bq32k_Rtc_Write_Time
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           
 10164                           ;psect for function _bin2bcd
 10165  17A3                     _bin2bcd:	
 10166                           
 10167                           ;incstack = 0
 10168                           ; Regs used in _bin2bcd: [wreg+status,2+status,0+pclath+cstack]
 10169                           ;bin2bcd@val stored from wreg
 10170  17A3  0020               	movlb	0	; select bank0
 10171  17A4  00B1               	movwf	bin2bcd@val
 10172                           
 10173                           ;bq32k.c: 85: return ((val / 10) << 4) + val % 10;
 10174  17A5  300A               	movlw	10
 10175  17A6  00A1               	movwf	___awmod@divisor
 10176  17A7  3000               	movlw	0
 10177  17A8  00A2               	movwf	___awmod@divisor+1
 10178  17A9  0831               	movf	bin2bcd@val,w
 10179  17AA  00AA               	movwf	??_bin2bcd
 10180  17AB  01AB               	clrf	??_bin2bcd+1
 10181  17AC  082A               	movf	??_bin2bcd,w
 10182  17AD  00A3               	movwf	___awmod@dividend
 10183  17AE  082B               	movf	??_bin2bcd+1,w
 10184  17AF  00A4               	movwf	___awmod@dividend+1
 10185  17B0  318A  226A  3197   	fcall	___awmod
 10186  17B3  0020               	movlb	0	; select bank0
 10187  17B4  0821               	movf	?___awmod,w
 10188  17B5  00AC               	movwf	??_bin2bcd+2
 10189  17B6  0822               	movf	?___awmod+1,w
 10190  17B7  00AD               	movwf	??_bin2bcd+3
 10191  17B8  300A               	movlw	10
 10192  17B9  00A1               	movwf	___awdiv@divisor
 10193  17BA  3000               	movlw	0
 10194  17BB  00A2               	movwf	___awdiv@divisor+1
 10195  17BC  0831               	movf	bin2bcd@val,w
 10196  17BD  00AE               	movwf	??_bin2bcd+4
 10197  17BE  01AF               	clrf	??_bin2bcd+5
 10198  17BF  082E               	movf	??_bin2bcd+4,w
 10199  17C0  00A3               	movwf	___awdiv@dividend
 10200  17C1  082F               	movf	??_bin2bcd+5,w
 10201  17C2  00A4               	movwf	___awdiv@dividend+1
 10202  17C3  318B  2398  3197   	fcall	___awdiv
 10203  17C6  0020               	movlb	0	; select bank0
 10204  17C7  0821               	movf	?___awdiv,w
 10205  17C8  00B0               	movwf	??_bin2bcd+6
 10206  17C9  3003               	movlw	3
 10207  17CA                     u5325:	
 10208  17CA  35B0               	lslf	??_bin2bcd+6,f
 10209  17CB  3EFF               	addlw	-1
 10210  17CC  1D03               	skipz
 10211  17CD  2FCA               	goto	u5325
 10212  17CE  3530               	lslf	??_bin2bcd+6,w
 10213  17CF  072C               	addwf	??_bin2bcd+2,w
 10214  17D0  0008               	return
 10215  17D1                     __end_of_bin2bcd:	
 10216                           
 10217                           	psect	text50
 10218  0A6A                     __ptext50:	
 10219 ;; *************** function ___awmod *****************
 10220 ;; Defined at:
 10221 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;  divisor         2    1[BANK0 ] int 
 10224 ;;  dividend        2    3[BANK0 ] int 
 10225 ;; Auto vars:     Size  Location     Type
 10226 ;;  sign            1    7[BANK0 ] unsigned char 
 10227 ;;  counter         1    6[BANK0 ] unsigned char 
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  2    1[BANK0 ] int 
 10230 ;; Registers used:
 10231 ;;		wreg, status,2, status,0
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;Total ram usage:        7 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    3
 10244 ;; This function calls:
 10245 ;;		Nothing
 10246 ;; This function is called by:
 10247 ;;		_time_Display
 10248 ;;		_bin2bcd
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           
 10253                           ;psect for function ___awmod
 10254  0A6A                     ___awmod:	
 10255                           
 10256                           ;incstack = 0
 10257                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10258  0A6A  0020               	movlb	0	; select bank0
 10259  0A6B  01A7               	clrf	___awmod@sign
 10260  0A6C  1FA4               	btfss	___awmod@dividend+1,7
 10261  0A6D  2A75               	goto	l5375
 10262  0A6E  09A3               	comf	___awmod@dividend,f
 10263  0A6F  09A4               	comf	___awmod@dividend+1,f
 10264  0A70  0AA3               	incf	___awmod@dividend,f
 10265  0A71  1903               	skipnz
 10266  0A72  0AA4               	incf	___awmod@dividend+1,f
 10267  0A73  01A7               	clrf	___awmod@sign
 10268  0A74  0AA7               	incf	___awmod@sign,f
 10269  0A75                     l5375:	
 10270  0A75  1FA2               	btfss	___awmod@divisor+1,7
 10271  0A76  2A7C               	goto	l5379
 10272  0A77  09A1               	comf	___awmod@divisor,f
 10273  0A78  09A2               	comf	___awmod@divisor+1,f
 10274  0A79  0AA1               	incf	___awmod@divisor,f
 10275  0A7A  1903               	skipnz
 10276  0A7B  0AA2               	incf	___awmod@divisor+1,f
 10277  0A7C                     l5379:	
 10278  0A7C  0821               	movf	___awmod@divisor,w
 10279  0A7D  0422               	iorwf	___awmod@divisor+1,w
 10280  0A7E  1903               	btfsc	3,2
 10281  0A7F  2AA3               	goto	l5397
 10282  0A80  01A6               	clrf	___awmod@counter
 10283  0A81  0AA6               	incf	___awmod@counter,f
 10284  0A82                     l5387:	
 10285  0A82  1BA2               	btfsc	___awmod@divisor+1,7
 10286  0A83  2A8E               	goto	l5389
 10287  0A84  3001               	movlw	1
 10288  0A85                     u4745:	
 10289  0A85  35A1               	lslf	___awmod@divisor,f
 10290  0A86  0DA2               	rlf	___awmod@divisor+1,f
 10291  0A87  0B89               	decfsz	9,f
 10292  0A88  2A85               	goto	u4745
 10293  0A89  3001               	movlw	1
 10294  0A8A  00A5               	movwf	??___awmod
 10295  0A8B  0825               	movf	??___awmod,w
 10296  0A8C  07A6               	addwf	___awmod@counter,f
 10297  0A8D  2A82               	goto	l5387
 10298  0A8E                     l5389:	
 10299  0A8E  0822               	movf	___awmod@divisor+1,w
 10300  0A8F  0224               	subwf	___awmod@dividend+1,w
 10301  0A90  1D03               	skipz
 10302  0A91  2A94               	goto	u4765
 10303  0A92  0821               	movf	___awmod@divisor,w
 10304  0A93  0223               	subwf	___awmod@dividend,w
 10305  0A94                     u4765:	
 10306  0A94  1C03               	skipc
 10307  0A95  2A9A               	goto	l5393
 10308  0A96  0821               	movf	___awmod@divisor,w
 10309  0A97  02A3               	subwf	___awmod@dividend,f
 10310  0A98  0822               	movf	___awmod@divisor+1,w
 10311  0A99  3BA4               	subwfb	___awmod@dividend+1,f
 10312  0A9A                     l5393:	
 10313  0A9A  3001               	movlw	1
 10314  0A9B                     u4775:	
 10315  0A9B  36A2               	lsrf	___awmod@divisor+1,f
 10316  0A9C  0CA1               	rrf	___awmod@divisor,f
 10317  0A9D  0B89               	decfsz	9,f
 10318  0A9E  2A9B               	goto	u4775
 10319  0A9F  3001               	movlw	1
 10320  0AA0  02A6               	subwf	___awmod@counter,f
 10321  0AA1  1D03               	btfss	3,2
 10322  0AA2  2A8E               	goto	l5389
 10323  0AA3                     l5397:	
 10324  0AA3  0827               	movf	___awmod@sign,w
 10325  0AA4  1903               	btfsc	3,2
 10326  0AA5  2AAB               	goto	l5401
 10327  0AA6  09A3               	comf	___awmod@dividend,f
 10328  0AA7  09A4               	comf	___awmod@dividend+1,f
 10329  0AA8  0AA3               	incf	___awmod@dividend,f
 10330  0AA9  1903               	skipnz
 10331  0AAA  0AA4               	incf	___awmod@dividend+1,f
 10332  0AAB                     l5401:	
 10333  0AAB  0824               	movf	___awmod@dividend+1,w
 10334  0AAC  00A2               	movwf	?___awmod+1
 10335  0AAD  0823               	movf	___awmod@dividend,w
 10336  0AAE  00A1               	movwf	?___awmod
 10337  0AAF  0008               	return
 10338  0AB0                     __end_of___awmod:	
 10339                           
 10340                           	psect	text51
 10341  0B98                     __ptext51:	
 10342 ;; *************** function ___awdiv *****************
 10343 ;; Defined at:
 10344 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;  divisor         2    1[BANK0 ] int 
 10347 ;;  dividend        2    3[BANK0 ] int 
 10348 ;; Auto vars:     Size  Location     Type
 10349 ;;  quotient        2    8[BANK0 ] int 
 10350 ;;  sign            1    7[BANK0 ] unsigned char 
 10351 ;;  counter         1    6[BANK0 ] unsigned char 
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  2    1[BANK0 ] int 
 10354 ;; Registers used:
 10355 ;;		wreg, status,2, status,0
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10361 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;Total ram usage:        9 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    3
 10368 ;; This function calls:
 10369 ;;		Nothing
 10370 ;; This function is called by:
 10371 ;;		_time_Display
 10372 ;;		_bin2bcd
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           
 10377                           ;psect for function ___awdiv
 10378  0B98                     ___awdiv:	
 10379                           
 10380                           ;incstack = 0
 10381                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10382  0B98  0020               	movlb	0	; select bank0
 10383  0B99  01A7               	clrf	___awdiv@sign
 10384  0B9A  1FA2               	btfss	___awdiv@divisor+1,7
 10385  0B9B  2BA3               	goto	l5331
 10386  0B9C  09A1               	comf	___awdiv@divisor,f
 10387  0B9D  09A2               	comf	___awdiv@divisor+1,f
 10388  0B9E  0AA1               	incf	___awdiv@divisor,f
 10389  0B9F  1903               	skipnz
 10390  0BA0  0AA2               	incf	___awdiv@divisor+1,f
 10391  0BA1  01A7               	clrf	___awdiv@sign
 10392  0BA2  0AA7               	incf	___awdiv@sign,f
 10393  0BA3                     l5331:	
 10394  0BA3  1FA4               	btfss	___awdiv@dividend+1,7
 10395  0BA4  2BAE               	goto	l5337
 10396  0BA5  09A3               	comf	___awdiv@dividend,f
 10397  0BA6  09A4               	comf	___awdiv@dividend+1,f
 10398  0BA7  0AA3               	incf	___awdiv@dividend,f
 10399  0BA8  1903               	skipnz
 10400  0BA9  0AA4               	incf	___awdiv@dividend+1,f
 10401  0BAA  3001               	movlw	1
 10402  0BAB  00A5               	movwf	??___awdiv
 10403  0BAC  0825               	movf	??___awdiv,w
 10404  0BAD  06A7               	xorwf	___awdiv@sign,f
 10405  0BAE                     l5337:	
 10406  0BAE  01A8               	clrf	___awdiv@quotient
 10407  0BAF  01A9               	clrf	___awdiv@quotient+1
 10408  0BB0  0821               	movf	___awdiv@divisor,w
 10409  0BB1  0422               	iorwf	___awdiv@divisor+1,w
 10410  0BB2  1903               	btfsc	3,2
 10411  0BB3  2BDD               	goto	l5359
 10412  0BB4  01A6               	clrf	___awdiv@counter
 10413  0BB5  0AA6               	incf	___awdiv@counter,f
 10414  0BB6                     l5347:	
 10415  0BB6  1BA2               	btfsc	___awdiv@divisor+1,7
 10416  0BB7  2BC2               	goto	l5349
 10417  0BB8  3001               	movlw	1
 10418  0BB9                     u4645:	
 10419  0BB9  35A1               	lslf	___awdiv@divisor,f
 10420  0BBA  0DA2               	rlf	___awdiv@divisor+1,f
 10421  0BBB  0B89               	decfsz	9,f
 10422  0BBC  2BB9               	goto	u4645
 10423  0BBD  3001               	movlw	1
 10424  0BBE  00A5               	movwf	??___awdiv
 10425  0BBF  0825               	movf	??___awdiv,w
 10426  0BC0  07A6               	addwf	___awdiv@counter,f
 10427  0BC1  2BB6               	goto	l5347
 10428  0BC2                     l5349:	
 10429  0BC2  3001               	movlw	1
 10430  0BC3                     u4665:	
 10431  0BC3  35A8               	lslf	___awdiv@quotient,f
 10432  0BC4  0DA9               	rlf	___awdiv@quotient+1,f
 10433  0BC5  0B89               	decfsz	9,f
 10434  0BC6  2BC3               	goto	u4665
 10435  0BC7  0822               	movf	___awdiv@divisor+1,w
 10436  0BC8  0224               	subwf	___awdiv@dividend+1,w
 10437  0BC9  1D03               	skipz
 10438  0BCA  2BCD               	goto	u4675
 10439  0BCB  0821               	movf	___awdiv@divisor,w
 10440  0BCC  0223               	subwf	___awdiv@dividend,w
 10441  0BCD                     u4675:	
 10442  0BCD  1C03               	skipc
 10443  0BCE  2BD4               	goto	l5355
 10444  0BCF  0821               	movf	___awdiv@divisor,w
 10445  0BD0  02A3               	subwf	___awdiv@dividend,f
 10446  0BD1  0822               	movf	___awdiv@divisor+1,w
 10447  0BD2  3BA4               	subwfb	___awdiv@dividend+1,f
 10448  0BD3  1428               	bsf	___awdiv@quotient,0
 10449  0BD4                     l5355:	
 10450  0BD4  3001               	movlw	1
 10451  0BD5                     u4685:	
 10452  0BD5  36A2               	lsrf	___awdiv@divisor+1,f
 10453  0BD6  0CA1               	rrf	___awdiv@divisor,f
 10454  0BD7  0B89               	decfsz	9,f
 10455  0BD8  2BD5               	goto	u4685
 10456  0BD9  3001               	movlw	1
 10457  0BDA  02A6               	subwf	___awdiv@counter,f
 10458  0BDB  1D03               	btfss	3,2
 10459  0BDC  2BC2               	goto	l5349
 10460  0BDD                     l5359:	
 10461  0BDD  0827               	movf	___awdiv@sign,w
 10462  0BDE  1903               	btfsc	3,2
 10463  0BDF  2BE5               	goto	l5363
 10464  0BE0  09A8               	comf	___awdiv@quotient,f
 10465  0BE1  09A9               	comf	___awdiv@quotient+1,f
 10466  0BE2  0AA8               	incf	___awdiv@quotient,f
 10467  0BE3  1903               	skipnz
 10468  0BE4  0AA9               	incf	___awdiv@quotient+1,f
 10469  0BE5                     l5363:	
 10470  0BE5  0829               	movf	___awdiv@quotient+1,w
 10471  0BE6  00A2               	movwf	?___awdiv+1
 10472  0BE7  0828               	movf	___awdiv@quotient,w
 10473  0BE8  00A1               	movwf	?___awdiv
 10474  0BE9  0008               	return
 10475  0BEA                     __end_of___awdiv:	
 10476                           
 10477                           	psect	text52
 10478  0CF4                     __ptext52:	
 10479 ;; *************** function _Bq32k_Rtc_Read_Time *****************
 10480 ;; Defined at:
 10481 ;;		line 34 in file "mcc_generated_files/bq32k.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;  p               1    wreg     PTR struct bq32k_regs
 10484 ;;		 -> rtc_tm(7), 
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;  p               1   21[BANK0 ] PTR struct bq32k_regs
 10487 ;;		 -> rtc_tm(7), 
 10488 ;;  temp           10   11[BANK0 ] unsigned char [10]
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      void 
 10491 ;; Registers used:
 10492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;Total ram usage:       13 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    5
 10505 ;; This function calls:
 10506 ;;		_I2C_Read_Buffer
 10507 ;;		_bcd2bin
 10508 ;; This function is called by:
 10509 ;;		_time_Display
 10510 ;;		_Calculate_Time
 10511 ;;		_Save_Write_time
 10512 ;;		_Set_time_from_Com
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _Bq32k_Rtc_Read_Time
 10518  0CF4                     _Bq32k_Rtc_Read_Time:	
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _Bq32k_Rtc_Read_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10522                           ;Bq32k_Rtc_Read_Time@p stored from wreg
 10523  0CF4  0020               	movlb	0	; select bank0
 10524  0CF5  00B5               	movwf	Bq32k_Rtc_Read_Time@p
 10525                           
 10526                           ;bq32k.c: 36: unsigned char temp[10] ;
 10527                           ;bq32k.c: 37: I2C_Read_Buffer( 0 , temp , 7);
 10528  0CF6  302B               	movlw	(low (Bq32k_Rtc_Read_Time@temp| 0))& (0+255)
 10529  0CF7  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10530  0CF8  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10531  0CF9  00A4               	movwf	I2C_Read_Buffer@buff
 10532  0CFA  3007               	movlw	7
 10533  0CFB  00AA               	movwf	??_Bq32k_Rtc_Read_Time+1
 10534  0CFC  082A               	movf	??_Bq32k_Rtc_Read_Time+1,w
 10535  0CFD  00A5               	movwf	I2C_Read_Buffer@Length
 10536  0CFE  3000               	movlw	0
 10537  0CFF  318F  270E  318C   	fcall	_I2C_Read_Buffer
 10538                           
 10539                           ;bq32k.c: 38: p->seconds = bcd2bin(temp[0] & 0x7F);
 10540  0D02  0020               	movlb	0	; select bank0
 10541  0D03  082B               	movf	Bq32k_Rtc_Read_Time@temp,w
 10542  0D04  397F               	andlw	127
 10543  0D05  3195  2527  318C   	fcall	_bcd2bin
 10544  0D08  0020               	movlb	0	; select bank0
 10545  0D09  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10546  0D0A  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10547  0D0B  0086               	movwf	6
 10548  0D0C  0187               	clrf	7
 10549  0D0D  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10550  0D0E  0081               	movwf	1
 10551                           
 10552                           ;bq32k.c: 39: p->minutes = bcd2bin(temp[1] & 0x7F);
 10553  0D0F  082C               	movf	Bq32k_Rtc_Read_Time@temp+1,w
 10554  0D10  397F               	andlw	127
 10555  0D11  3195  2527  318C   	fcall	_bcd2bin
 10556  0D14  0020               	movlb	0	; select bank0
 10557  0D15  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10558  0D16  0A35               	incf	Bq32k_Rtc_Read_Time@p,w
 10559  0D17  0086               	movwf	6
 10560  0D18  0187               	clrf	7
 10561  0D19  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10562  0D1A  0081               	movwf	1
 10563                           
 10564                           ;bq32k.c: 40: p->hours = bcd2bin(temp[2] & 0x3F);
 10565  0D1B  082D               	movf	Bq32k_Rtc_Read_Time@temp+2,w
 10566  0D1C  393F               	andlw	63
 10567  0D1D  3195  2527  318C   	fcall	_bcd2bin
 10568  0D20  0020               	movlb	0	; select bank0
 10569  0D21  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10570  0D22  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10571  0D23  3E02               	addlw	2
 10572  0D24  0086               	movwf	6
 10573  0D25  0187               	clrf	7
 10574  0D26  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10575  0D27  0081               	movwf	1
 10576                           
 10577                           ;bq32k.c: 41: p->wday = bcd2bin(temp[3]);
 10578  0D28  082E               	movf	Bq32k_Rtc_Read_Time@temp+3,w
 10579  0D29  3195  2527  318C   	fcall	_bcd2bin
 10580  0D2C  0020               	movlb	0	; select bank0
 10581  0D2D  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10582  0D2E  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10583  0D2F  3E03               	addlw	3
 10584  0D30  0086               	movwf	6
 10585  0D31  0187               	clrf	7
 10586  0D32  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10587  0D33  0081               	movwf	1
 10588                           
 10589                           ;bq32k.c: 42: p->date = bcd2bin(temp[4]);
 10590  0D34  082F               	movf	Bq32k_Rtc_Read_Time@temp+4,w
 10591  0D35  3195  2527  318C   	fcall	_bcd2bin
 10592  0D38  0020               	movlb	0	; select bank0
 10593  0D39  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10594  0D3A  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10595  0D3B  3E04               	addlw	4
 10596  0D3C  0086               	movwf	6
 10597  0D3D  0187               	clrf	7
 10598  0D3E  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10599  0D3F  0081               	movwf	1
 10600                           
 10601                           ;bq32k.c: 43: p->month = bcd2bin(temp[5]);
 10602  0D40  0830               	movf	Bq32k_Rtc_Read_Time@temp+5,w
 10603  0D41  3195  2527  318C   	fcall	_bcd2bin
 10604  0D44  0020               	movlb	0	; select bank0
 10605  0D45  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10606  0D46  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10607  0D47  3E05               	addlw	5
 10608  0D48  0086               	movwf	6
 10609  0D49  0187               	clrf	7
 10610  0D4A  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10611  0D4B  0081               	movwf	1
 10612                           
 10613                           ;bq32k.c: 44: p->years= bcd2bin(temp[6]);
 10614  0D4C  0831               	movf	Bq32k_Rtc_Read_Time@temp+6,w
 10615  0D4D  3195  2527         	fcall	_bcd2bin
 10616  0D4F  0020               	movlb	0	; select bank0
 10617  0D50  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10618  0D51  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10619  0D52  3E06               	addlw	6
 10620  0D53  0086               	movwf	6
 10621  0D54  0187               	clrf	7
 10622  0D55  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10623  0D56  0081               	movwf	1
 10624  0D57  0008               	return
 10625  0D58                     __end_of_Bq32k_Rtc_Read_Time:	
 10626                           
 10627                           	psect	text53
 10628  1527                     __ptext53:	
 10629 ;; *************** function _bcd2bin *****************
 10630 ;; Defined at:
 10631 ;;		line 72 in file "mcc_generated_files/bq32k.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;  val             1    wreg     unsigned char 
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  val             1    8[BANK0 ] unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  1    wreg      unsigned char 
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, status,0, pclath, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;Total ram usage:        4 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:    4
 10652 ;; This function calls:
 10653 ;;		___bmul
 10654 ;; This function is called by:
 10655 ;;		_Bq32k_Rtc_Read_Time
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           
 10660                           ;psect for function _bcd2bin
 10661  1527                     _bcd2bin:	
 10662                           
 10663                           ;incstack = 0
 10664                           ; Regs used in _bcd2bin: [wreg+status,2+status,0+pclath+cstack]
 10665                           ;bcd2bin@val stored from wreg
 10666  1527  0020               	movlb	0	; select bank0
 10667  1528  00A8               	movwf	bcd2bin@val
 10668                           
 10669                           ;bq32k.c: 74: return (val & 0x0f) + (val >> 4) * 10;
 10670  1529  300F               	movlw	15
 10671  152A  0528               	andwf	bcd2bin@val,w
 10672  152B  00A5               	movwf	??_bcd2bin
 10673  152C  300A               	movlw	10
 10674  152D  00A6               	movwf	??_bcd2bin+1
 10675  152E  0826               	movf	??_bcd2bin+1,w
 10676  152F  00A1               	movwf	___bmul@multiplicand
 10677  1530  0828               	movf	bcd2bin@val,w
 10678  1531  00A7               	movwf	??_bcd2bin+2
 10679  1532  3004               	movlw	4
 10680  1533                     u4345:	
 10681  1533  36A7               	lsrf	??_bcd2bin+2,f
 10682  1534  0B89               	decfsz	9,f
 10683  1535  2D33               	goto	u4345
 10684  1536  0827               	movf	??_bcd2bin+2,w
 10685  1537  3195  2502         	fcall	___bmul
 10686  1539  0020               	movlb	0	; select bank0
 10687  153A  0725               	addwf	??_bcd2bin,w
 10688  153B  0008               	return
 10689  153C                     __end_of_bcd2bin:	
 10690                           
 10691                           	psect	text54
 10692  1502                     __ptext54:	
 10693 ;; *************** function ___bmul *****************
 10694 ;; Defined at:
 10695 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;  multiplier      1    wreg     unsigned char 
 10698 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 10699 ;; Auto vars:     Size  Location     Type
 10700 ;;  multiplier      1    4[BANK0 ] unsigned char 
 10701 ;;  product         1    3[BANK0 ] unsigned char 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  1    wreg      unsigned char 
 10704 ;; Registers used:
 10705 ;;		wreg, status,2, status,0
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        4 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    3
 10718 ;; This function calls:
 10719 ;;		Nothing
 10720 ;; This function is called by:
 10721 ;;		_bcd2bin
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           
 10726                           ;psect for function ___bmul
 10727  1502                     ___bmul:	
 10728                           
 10729                           ;incstack = 0
 10730                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10731                           ;___bmul@multiplier stored from wreg
 10732  1502  0020               	movlb	0	; select bank0
 10733  1503  00A4               	movwf	___bmul@multiplier
 10734  1504  01A3               	clrf	___bmul@product
 10735  1505                     l5039:	
 10736  1505  1C24               	btfss	___bmul@multiplier,0
 10737  1506  2D0B               	goto	l5043
 10738  1507  0821               	movf	___bmul@multiplicand,w
 10739  1508  00A2               	movwf	??___bmul
 10740  1509  0822               	movf	??___bmul,w
 10741  150A  07A3               	addwf	___bmul@product,f
 10742  150B                     l5043:	
 10743  150B  1003               	clrc
 10744  150C  0DA1               	rlf	___bmul@multiplicand,f
 10745  150D  1003               	clrc
 10746  150E  0CA4               	rrf	___bmul@multiplier,f
 10747  150F  0824               	movf	___bmul@multiplier,w
 10748  1510  1D03               	btfss	3,2
 10749  1511  2D05               	goto	l5039
 10750  1512  0823               	movf	___bmul@product,w
 10751  1513  0008               	return
 10752  1514                     __end_of___bmul:	
 10753                           
 10754                           	psect	text55
 10755  0F0E                     __ptext55:	
 10756 ;; *************** function _I2C_Read_Buffer *****************
 10757 ;; Defined at:
 10758 ;;		line 120 in file "mcc_generated_files/i2c.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;  ADD             1    wreg     unsigned char 
 10761 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 10762 ;;		 -> Bq32k_Rtc_Read_Time@temp(10), 
 10763 ;;  Length          1    5[BANK0 ] unsigned char 
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;  ADD             1    7[BANK0 ] unsigned char 
 10766 ;;  Flag            1    8[BANK0 ] unsigned char 
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  1    wreg      unsigned char 
 10769 ;; Registers used:
 10770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;Total ram usage:        5 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    4
 10783 ;; This function calls:
 10784 ;;		_I2C_Receive_Byte
 10785 ;;		_I2C_Send_Byte
 10786 ;;		_I2C_Start
 10787 ;;		_I2C_Stop
 10788 ;; This function is called by:
 10789 ;;		_Bq32k_Rtc_Read_Time
 10790 ;; This function uses a non-reentrant model
 10791 ;;
 10792                           
 10793                           
 10794                           ;psect for function _I2C_Read_Buffer
 10795  0F0E                     _I2C_Read_Buffer:	
 10796                           
 10797                           ;incstack = 0
 10798                           ; Regs used in _I2C_Read_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10799                           ;I2C_Read_Buffer@ADD stored from wreg
 10800  0F0E  0020               	movlb	0	; select bank0
 10801  0F0F  00A7               	movwf	I2C_Read_Buffer@ADD
 10802                           
 10803                           ;i2c.c: 122: unsigned char Flag=1;
 10804  0F10  01A8               	clrf	I2C_Read_Buffer@Flag
 10805  0F11  0AA8               	incf	I2C_Read_Buffer@Flag,f
 10806                           
 10807                           ;i2c.c: 124: I2C_Start();
 10808  0F12  3196  260B  318F   	fcall	_I2C_Start
 10809                           
 10810                           ;i2c.c: 126: Flag=I2C_Send_Byte(0XD0);
 10811  0F15  30D0               	movlw	208
 10812  0F16  318C  243E  318F   	fcall	_I2C_Send_Byte
 10813  0F19  0020               	movlb	0	; select bank0
 10814  0F1A  00A6               	movwf	??_I2C_Read_Buffer
 10815  0F1B  0826               	movf	??_I2C_Read_Buffer,w
 10816  0F1C  00A8               	movwf	I2C_Read_Buffer@Flag
 10817                           
 10818                           ;i2c.c: 127: if(Flag)
 10819  0F1D  0828               	movf	I2C_Read_Buffer@Flag,w
 10820  0F1E  1D03               	btfss	3,2
 10821  0F1F  0008               	return
 10822                           
 10823                           ;i2c.c: 130: Flag=I2C_Send_Byte(ADD);
 10824                           
 10825                           ;i2c.c: 128: return 0x01;
 10826                           ;	Return value of _I2C_Read_Buffer is never used
 10827  0F20  0827               	movf	I2C_Read_Buffer@ADD,w
 10828  0F21  318C  243E  318F   	fcall	_I2C_Send_Byte
 10829  0F24  0020               	movlb	0	; select bank0
 10830  0F25  00A6               	movwf	??_I2C_Read_Buffer
 10831  0F26  0826               	movf	??_I2C_Read_Buffer,w
 10832  0F27  00A8               	movwf	I2C_Read_Buffer@Flag
 10833                           
 10834                           ;i2c.c: 131: if(Flag)
 10835  0F28  0828               	movf	I2C_Read_Buffer@Flag,w
 10836  0F29  1D03               	btfss	3,2
 10837  0F2A  0008               	return
 10838                           
 10839                           ;i2c.c: 134: I2C_Start();
 10840                           
 10841                           ;i2c.c: 132: return 0x01;
 10842                           ;	Return value of _I2C_Read_Buffer is never used
 10843  0F2B  3196  260B  318F   	fcall	_I2C_Start
 10844                           
 10845                           ;i2c.c: 135: Flag=I2C_Send_Byte(0XD0+1);
 10846  0F2E  30D1               	movlw	209
 10847  0F2F  318C  243E  318F   	fcall	_I2C_Send_Byte
 10848  0F32  0020               	movlb	0	; select bank0
 10849  0F33  00A6               	movwf	??_I2C_Read_Buffer
 10850  0F34  0826               	movf	??_I2C_Read_Buffer,w
 10851  0F35  00A8               	movwf	I2C_Read_Buffer@Flag
 10852                           
 10853                           ;i2c.c: 136: if(Flag)
 10854  0F36  0828               	movf	I2C_Read_Buffer@Flag,w
 10855  0F37  1D03               	btfss	3,2
 10856  0F38  0008               	return
 10857  0F39                     l5107:	
 10858  0F39  3002               	movlw	2
 10859  0F3A  0225               	subwf	I2C_Read_Buffer@Length,w
 10860  0F3B  1C03               	btfss	3,0
 10861  0F3C  2F64               	goto	l5109
 10862                           
 10863                           ;i2c.c: 140: {
 10864                           ;i2c.c: 141: *buff = I2C_Receive_Byte();
 10865                           
 10866                           ;i2c.c: 139: while(Length>1)
 10867                           
 10868                           ;i2c.c: 137: return 0x01;
 10869                           ;	Return value of _I2C_Read_Buffer is never used
 10870  0F3D  3188  2044  318F   	fcall	_I2C_Receive_Byte
 10871  0F40  0020               	movlb	0	; select bank0
 10872  0F41  00A6               	movwf	??_I2C_Read_Buffer
 10873  0F42  0824               	movf	I2C_Read_Buffer@buff,w
 10874  0F43  0086               	movwf	6
 10875  0F44  0187               	clrf	7
 10876  0F45  0826               	movf	??_I2C_Read_Buffer,w
 10877  0F46  0081               	movwf	1
 10878                           
 10879                           ;i2c.c: 143: do { LATB1 = 0; } while(0);
 10880  0F47  0022               	movlb	2	; select bank2
 10881  0F48  108D               	bcf	13,1	;volatile
 10882                           
 10883                           ;i2c.c: 144: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10884  0F49  3003               	movlw	3
 10885  0F4A  0020               	movlb	0	; select bank0
 10886  0F4B  00A6               	movwf	??_I2C_Read_Buffer
 10887  0F4C                     u5937:	
 10888  0F4C  0BA6               	decfsz	??_I2C_Read_Buffer,f
 10889  0F4D  2F4C               	goto	u5937
 10890                           
 10891                           ;i2c.c: 145: do { LATB0 = 1; } while(0);
 10892  0F4E  0022               	movlb	2	; select bank2
 10893  0F4F  140D               	bsf	13,0	;volatile
 10894                           
 10895                           ;i2c.c: 146: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10896  0F50  3003               	movlw	3
 10897  0F51  0020               	movlb	0	; select bank0
 10898  0F52  00A6               	movwf	??_I2C_Read_Buffer
 10899  0F53                     u5947:	
 10900  0F53  0BA6               	decfsz	??_I2C_Read_Buffer,f
 10901  0F54  2F53               	goto	u5947
 10902                           
 10903                           ;i2c.c: 147: do { LATB0 = 0; } while(0);
 10904  0F55  0022               	movlb	2	; select bank2
 10905  0F56  100D               	bcf	13,0	;volatile
 10906                           
 10907                           ;i2c.c: 148: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10908  0F57  3003               	movlw	3
 10909  0F58  0020               	movlb	0	; select bank0
 10910  0F59  00A6               	movwf	??_I2C_Read_Buffer
 10911  0F5A                     u5957:	
 10912  0F5A  0BA6               	decfsz	??_I2C_Read_Buffer,f
 10913  0F5B  2F5A               	goto	u5957
 10914                           
 10915                           ;i2c.c: 150: buff++;
 10916  0F5C  3001               	movlw	1
 10917  0F5D  0020               	movlb	0	; select bank0
 10918  0F5E  00A6               	movwf	??_I2C_Read_Buffer
 10919  0F5F  0826               	movf	??_I2C_Read_Buffer,w
 10920  0F60  07A4               	addwf	I2C_Read_Buffer@buff,f
 10921                           
 10922                           ;i2c.c: 151: Length--;
 10923  0F61  3001               	movlw	1
 10924  0F62  02A5               	subwf	I2C_Read_Buffer@Length,f
 10925  0F63  2F39               	goto	l5107
 10926  0F64                     l5109:	
 10927                           
 10928                           ;i2c.c: 152: }
 10929                           ;i2c.c: 153: *buff = I2C_Receive_Byte();
 10930  0F64  3188  2044  318F   	fcall	_I2C_Receive_Byte
 10931  0F67  0020               	movlb	0	; select bank0
 10932  0F68  00A6               	movwf	??_I2C_Read_Buffer
 10933  0F69  0824               	movf	I2C_Read_Buffer@buff,w
 10934  0F6A  0086               	movwf	6
 10935  0F6B  0187               	clrf	7
 10936  0F6C  0826               	movf	??_I2C_Read_Buffer,w
 10937  0F6D  0081               	movwf	1
 10938                           
 10939                           ;i2c.c: 155: do { LATB1 = 1; } while(0);
 10940  0F6E  0022               	movlb	2	; select bank2
 10941  0F6F  148D               	bsf	13,1	;volatile
 10942                           
 10943                           ;i2c.c: 156: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10944  0F70  3003               	movlw	3
 10945  0F71  0020               	movlb	0	; select bank0
 10946  0F72  00A6               	movwf	??_I2C_Read_Buffer
 10947  0F73                     u5967:	
 10948  0F73  0BA6               	decfsz	??_I2C_Read_Buffer,f
 10949  0F74  2F73               	goto	u5967
 10950                           
 10951                           ;i2c.c: 157: do { LATB0 = 1; } while(0);
 10952  0F75  0022               	movlb	2	; select bank2
 10953  0F76  140D               	bsf	13,0	;volatile
 10954                           
 10955                           ;i2c.c: 158: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10956  0F77  3003               	movlw	3
 10957  0F78  0020               	movlb	0	; select bank0
 10958  0F79  00A6               	movwf	??_I2C_Read_Buffer
 10959  0F7A                     u5977:	
 10960  0F7A  0BA6               	decfsz	??_I2C_Read_Buffer,f
 10961  0F7B  2F7A               	goto	u5977
 10962                           
 10963                           ;i2c.c: 159: do { LATB0 = 0; } while(0);
 10964  0F7C  0022               	movlb	2	; select bank2
 10965  0F7D  100D               	bcf	13,0	;volatile
 10966                           
 10967                           ;i2c.c: 160: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10968  0F7E  3003               	movlw	3
 10969  0F7F  0020               	movlb	0	; select bank0
 10970  0F80  00A6               	movwf	??_I2C_Read_Buffer
 10971  0F81                     u5987:	
 10972  0F81  0BA6               	decfsz	??_I2C_Read_Buffer,f
 10973  0F82  2F81               	goto	u5987
 10974                           
 10975                           ;i2c.c: 162: I2C_Stop();
 10976  0F83  3196  2628         	fcall	_I2C_Stop
 10977  0F85  0008               	return
 10978  0F86                     __end_of_I2C_Read_Buffer:	
 10979                           ;i2c.c: 164: return 0x00;
 10980                           ;	Return value of _I2C_Read_Buffer is never used
 10981                           
 10982                           
 10983                           	psect	text56
 10984  0844                     __ptext56:	
 10985 ;; *************** function _I2C_Receive_Byte *****************
 10986 ;; Defined at:
 10987 ;;		line 74 in file "mcc_generated_files/i2c.c"
 10988 ;; Parameters:    Size  Location     Type
 10989 ;;		None
 10990 ;; Auto vars:     Size  Location     Type
 10991 ;;  i               1    3[BANK0 ] unsigned char 
 10992 ;;  Data            1    2[BANK0 ] unsigned char 
 10993 ;; Return value:  Size  Location     Type
 10994 ;;                  1    wreg      unsigned char 
 10995 ;; Registers used:
 10996 ;;		wreg, status,2, status,0
 10997 ;; Tracked objects:
 10998 ;;		On entry : 0/0
 10999 ;;		On exit  : 0/0
 11000 ;;		Unchanged: 0/0
 11001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;Total ram usage:        3 bytes
 11007 ;; Hardware stack levels used:    1
 11008 ;; Hardware stack levels required when called:    3
 11009 ;; This function calls:
 11010 ;;		Nothing
 11011 ;; This function is called by:
 11012 ;;		_I2C_Read_Buffer
 11013 ;; This function uses a non-reentrant model
 11014 ;;
 11015                           
 11016                           
 11017                           ;psect for function _I2C_Receive_Byte
 11018  0844                     _I2C_Receive_Byte:	
 11019                           
 11020                           ;i2c.c: 76: unsigned char i,Data=0;
 11021                           
 11022                           ;incstack = 0
 11023                           ; Regs used in _I2C_Receive_Byte: [wreg+status,2+status,0]
 11024  0844  0020               	movlb	0	; select bank0
 11025  0845  01A2               	clrf	I2C_Receive_Byte@Data
 11026                           
 11027                           ;i2c.c: 77: do { LATB1 = 1; } while(0);
 11028  0846  0022               	movlb	2	; select bank2
 11029  0847  148D               	bsf	13,1	;volatile
 11030                           
 11031                           ;i2c.c: 78: for(i=0;i<8;i++)
 11032  0848  0020               	movlb	0	; select bank0
 11033  0849  01A3               	clrf	I2C_Receive_Byte@i
 11034  084A  3008               	movlw	8
 11035  084B  0223               	subwf	I2C_Receive_Byte@i,w
 11036  084C  1803               	btfsc	3,0
 11037  084D  2872               	goto	l5025
 11038                           
 11039                           ;i2c.c: 79: {
 11040                           ;i2c.c: 80: Data <<= 1;
 11041  084E  1003               	clrc
 11042  084F                     L11:	
 11043  084F  0DA2               	rlf	I2C_Receive_Byte@Data,f
 11044                           
 11045                           ;i2c.c: 81: do { LATB0 = 1; } while(0);
 11046  0850  0022               	movlb	2	; select bank2
 11047  0851  140D               	bsf	13,0	;volatile
 11048                           
 11049                           ;i2c.c: 82: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11050  0852  3003               	movlw	3
 11051  0853  0020               	movlb	0	; select bank0
 11052  0854  00A1               	movwf	??_I2C_Receive_Byte
 11053  0855                     u5997:	
 11054  0855  0BA1               	decfsz	??_I2C_Receive_Byte,f
 11055  0856  2855               	goto	u5997
 11056                           
 11057                           ;i2c.c: 83: do { TRISB1 = 1; } while(0);
 11058  0857  0021               	movlb	1	; select bank1
 11059  0858  148D               	bsf	13,1	;volatile
 11060                           
 11061                           ;i2c.c: 84: if(RB1)
 11062  0859  0020               	movlb	0	; select bank0
 11063  085A  1C8D               	btfss	13,1	;volatile
 11064  085B  2860               	goto	l847
 11065                           
 11066                           ;i2c.c: 85: {
 11067                           ;i2c.c: 86: do { TRISB1 = 0; } while(0);
 11068  085C  0021               	movlb	1	; select bank1
 11069  085D  108D               	bcf	13,1	;volatile
 11070                           
 11071                           ;i2c.c: 87: Data |= 0x01;
 11072  085E  0020               	movlb	0	; select bank0
 11073  085F  1422               	bsf	I2C_Receive_Byte@Data,0
 11074  0860                     l847:	
 11075                           ;i2c.c: 88: }
 11076                           ;i2c.c: 89: do { TRISB1 = 0; } while(0);
 11077                           
 11078  0860  0021               	movlb	1	; select bank1
 11079  0861  108D               	bcf	13,1	;volatile
 11080                           
 11081                           ;i2c.c: 90: do { LATB0 = 0; } while(0);
 11082  0862  0022               	movlb	2	; select bank2
 11083  0863  100D               	bcf	13,0	;volatile
 11084                           
 11085                           ;i2c.c: 91: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11086  0864  3003               	movlw	3
 11087  0865  0020               	movlb	0	; select bank0
 11088  0866  00A1               	movwf	??_I2C_Receive_Byte
 11089  0867                     u6007:	
 11090  0867  0BA1               	decfsz	??_I2C_Receive_Byte,f
 11091  0868  2867               	goto	u6007
 11092  0869  3001               	movlw	1
 11093  086A  0020               	movlb	0	; select bank0
 11094  086B  00A1               	movwf	??_I2C_Receive_Byte
 11095  086C  0821               	movf	??_I2C_Receive_Byte,w
 11096  086D  07A3               	addwf	I2C_Receive_Byte@i,f
 11097  086E  3008               	movlw	8
 11098  086F  0223               	subwf	I2C_Receive_Byte@i,w
 11099  0870  1C03               	skipc
 11100  0871  284F               	goto	L11
 11101  0872                     l5025:	
 11102                           
 11103                           ;i2c.c: 92: }
 11104                           ;i2c.c: 93: return Data;
 11105  0872  0822               	movf	I2C_Receive_Byte@Data,w
 11106  0873  0008               	return
 11107  0874                     __end_of_I2C_Receive_Byte:	
 11108                           
 11109                           	psect	text57
 11110  097C                     __ptext57:	
 11111 ;; *************** function _Bq32k_Time_Init *****************
 11112 ;; Defined at:
 11113 ;;		line 17 in file "mcc_generated_files/bq32k.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;		None
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;  temp           10   30[BANK0 ] unsigned char [10]
 11118 ;;  time            7    0        struct bq32k_regs
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  1    wreg      void 
 11121 ;; Registers used:
 11122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;Total ram usage:       12 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; Hardware stack levels required when called:    6
 11135 ;; This function calls:
 11136 ;;		_FLASH_ReadWord
 11137 ;;		_FLASH_WriteWord
 11138 ;;		_I2C_Send_Buffer
 11139 ;; This function is called by:
 11140 ;;		_main
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           
 11145                           ;psect for function _Bq32k_Time_Init
 11146  097C                     _Bq32k_Time_Init:	
 11147                           
 11148                           ;bq32k.c: 19: bq32k_t time;
 11149                           ;bq32k.c: 20: unsigned char temp[10] = { 0x01,0x44,0x10,0x02,0x18,0x07,0x16 };
 11150                           
 11151                           ;incstack = 0
 11152                           ; Regs used in _Bq32k_Time_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11153  097C  305C               	movlw	low Bq32k_Time_Init@F2027
 11154  097D  0086               	movwf	6
 11155  097E  3001               	movlw	high Bq32k_Time_Init@F2027
 11156  097F  0087               	movwf	7
 11157  0980  303E               	movlw	low Bq32k_Time_Init@temp
 11158  0981  0084               	movwf	4
 11159  0982  3000               	movlw	high Bq32k_Time_Init@temp
 11160  0983  0085               	movwf	5
 11161  0984  300A               	movlw	10
 11162  0985  0020               	movlb	0	; select bank0
 11163  0986  00BC               	movwf	??_Bq32k_Time_Init
 11164  0987                     u5520:	
 11165  0987  0016               	moviw fsr1++
 11166  0988  001A               	movwi fsr0++
 11167  0989  0BBC               	decfsz	??_Bq32k_Time_Init,f
 11168  098A  2987               	goto	u5520
 11169                           
 11170                           ;bq32k.c: 21: if( FLASH_ReadWord(0x1fff) == 0x3fff )
 11171  098B  30FF               	movlw	255
 11172  098C  00A1               	movwf	FLASH_ReadWord@flashAddr
 11173  098D  301F               	movlw	31
 11174  098E  00A2               	movwf	FLASH_ReadWord@flashAddr+1
 11175  098F  3196  2663  3189   	fcall	_FLASH_ReadWord
 11176  0992  0020               	movlb	0	; select bank0
 11177  0993  0A21               	incf	?_FLASH_ReadWord,w
 11178  0994  303F               	movlw	63
 11179  0995  1903               	skipnz
 11180  0996  0622               	xorwf	?_FLASH_ReadWord+1,w
 11181  0997  1D03               	btfss	3,2
 11182  0998  0008               	return
 11183                           
 11184                           ;bq32k.c: 22: {
 11185                           ;bq32k.c: 23: I2C_Send_Buffer(0, temp, 7);
 11186  0999  303E               	movlw	(low (Bq32k_Time_Init@temp| 0))& (0+255)
 11187  099A  00BC               	movwf	??_Bq32k_Time_Init
 11188  099B  083C               	movf	??_Bq32k_Time_Init,w
 11189  099C  00A4               	movwf	I2C_Send_Buffer@buff
 11190  099D  3007               	movlw	7
 11191  099E  00BD               	movwf	??_Bq32k_Time_Init+1
 11192  099F  083D               	movf	??_Bq32k_Time_Init+1,w
 11193  09A0  00A5               	movwf	I2C_Send_Buffer@Length
 11194  09A1  3000               	movlw	0
 11195  09A2  3189  21B5  3189   	fcall	_I2C_Send_Buffer
 11196                           
 11197                           ;bq32k.c: 24: FLASH_WriteWord(0x1fff, temp, 1);
 11198  09A5  30FF               	movlw	255
 11199  09A6  0020               	movlb	0	; select bank0
 11200  09A7  00B0               	movwf	FLASH_WriteWord@flashAddr
 11201  09A8  301F               	movlw	31
 11202  09A9  00B1               	movwf	FLASH_WriteWord@flashAddr+1
 11203  09AA  303E               	movlw	low Bq32k_Time_Init@temp
 11204  09AB  00B2               	movwf	FLASH_WriteWord@ramBuf
 11205  09AC  3000               	movlw	high Bq32k_Time_Init@temp
 11206  09AD  00B3               	movwf	FLASH_WriteWord@ramBuf+1
 11207  09AE  3001               	movlw	1
 11208  09AF  00B4               	movwf	FLASH_WriteWord@word
 11209  09B0  3000               	movlw	0
 11210  09B1  00B5               	movwf	FLASH_WriteWord@word+1
 11211  09B2  318A  22FA         	fcall	_FLASH_WriteWord
 11212  09B4  0008               	return
 11213  09B5                     __end_of_Bq32k_Time_Init:	
 11214                           
 11215                           	psect	text58
 11216  09B5                     __ptext58:	
 11217 ;; *************** function _I2C_Send_Buffer *****************
 11218 ;; Defined at:
 11219 ;;		line 173 in file "mcc_generated_files/i2c.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;  ADD             1    wreg     unsigned char 
 11222 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 11223 ;;		 -> Bq32k_Rtc_Write_Time@temp(10), Bq32k_Time_Init@temp(10), 
 11224 ;;  Length          1    5[BANK0 ] unsigned char 
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;  ADD             1    8[BANK0 ] unsigned char 
 11227 ;;  Flag            1   10[BANK0 ] unsigned char 
 11228 ;;  i               1    9[BANK0 ] unsigned char 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      unsigned char 
 11231 ;; Registers used:
 11232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11238 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;Total ram usage:        7 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    4
 11245 ;; This function calls:
 11246 ;;		_I2C_Send_Byte
 11247 ;;		_I2C_Start
 11248 ;;		_I2C_Stop
 11249 ;; This function is called by:
 11250 ;;		_Bq32k_Time_Init
 11251 ;;		_Bq32k_Rtc_Write_Time
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           
 11256                           ;psect for function _I2C_Send_Buffer
 11257  09B5                     _I2C_Send_Buffer:	
 11258                           
 11259                           ;incstack = 0
 11260                           ; Regs used in _I2C_Send_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11261                           ;I2C_Send_Buffer@ADD stored from wreg
 11262  09B5  0020               	movlb	0	; select bank0
 11263  09B6  00A8               	movwf	I2C_Send_Buffer@ADD
 11264                           
 11265                           ;i2c.c: 175: unsigned char Flag=1;
 11266  09B7  01AA               	clrf	I2C_Send_Buffer@Flag
 11267  09B8  0AAA               	incf	I2C_Send_Buffer@Flag,f
 11268                           
 11269                           ;i2c.c: 176: unsigned char i;
 11270                           ;i2c.c: 178: I2C_Start();
 11271  09B9  3196  260B  3189   	fcall	_I2C_Start
 11272                           
 11273                           ;i2c.c: 180: Flag=I2C_Send_Byte(0XD0);
 11274  09BC  30D0               	movlw	208
 11275  09BD  318C  243E  3189   	fcall	_I2C_Send_Byte
 11276  09C0  0020               	movlb	0	; select bank0
 11277  09C1  00A6               	movwf	??_I2C_Send_Buffer
 11278  09C2  0826               	movf	??_I2C_Send_Buffer,w
 11279  09C3  00AA               	movwf	I2C_Send_Buffer@Flag
 11280                           
 11281                           ;i2c.c: 181: if(Flag)
 11282  09C4  082A               	movf	I2C_Send_Buffer@Flag,w
 11283  09C5  1D03               	btfss	3,2
 11284  09C6  0008               	return
 11285                           
 11286                           ;i2c.c: 184: Flag=I2C_Send_Byte( ADD );
 11287                           
 11288                           ;i2c.c: 182: return 0x01;
 11289                           ;	Return value of _I2C_Send_Buffer is never used
 11290  09C7  0828               	movf	I2C_Send_Buffer@ADD,w
 11291  09C8  318C  243E  3189   	fcall	_I2C_Send_Byte
 11292  09CB  0020               	movlb	0	; select bank0
 11293  09CC  00A6               	movwf	??_I2C_Send_Buffer
 11294  09CD  0826               	movf	??_I2C_Send_Buffer,w
 11295  09CE  00AA               	movwf	I2C_Send_Buffer@Flag
 11296                           
 11297                           ;i2c.c: 185: if(Flag)
 11298  09CF  082A               	movf	I2C_Send_Buffer@Flag,w
 11299  09D0  1D03               	btfss	3,2
 11300  09D1  0008               	return
 11301                           
 11302                           ;i2c.c: 188: for (i = 0; i<Length; i++)
 11303                           
 11304                           ;i2c.c: 186: return 0x01;
 11305                           ;	Return value of _I2C_Send_Buffer is never used
 11306  09D2  01A9               	clrf	I2C_Send_Buffer@i
 11307  09D3                     l5681:	
 11308  09D3  0825               	movf	I2C_Send_Buffer@Length,w
 11309  09D4  0229               	subwf	I2C_Send_Buffer@i,w
 11310  09D5  1803               	btfsc	3,0
 11311  09D6  29ED               	goto	l5683
 11312                           
 11313                           ;i2c.c: 189: {
 11314                           ;i2c.c: 190: Flag=I2C_Send_Byte(*(buff+i));
 11315  09D7  0829               	movf	I2C_Send_Buffer@i,w
 11316  09D8  0724               	addwf	I2C_Send_Buffer@buff,w
 11317  09D9  00A6               	movwf	??_I2C_Send_Buffer
 11318  09DA  0826               	movf	??_I2C_Send_Buffer,w
 11319  09DB  0086               	movwf	6
 11320  09DC  0187               	clrf	7
 11321  09DD  0801               	movf	1,w
 11322  09DE  318C  243E  3189   	fcall	_I2C_Send_Byte
 11323  09E1  0020               	movlb	0	; select bank0
 11324  09E2  00A7               	movwf	??_I2C_Send_Buffer+1
 11325  09E3  0827               	movf	??_I2C_Send_Buffer+1,w
 11326  09E4  00AA               	movwf	I2C_Send_Buffer@Flag
 11327                           
 11328                           ;i2c.c: 191: if(Flag)
 11329  09E5  082A               	movf	I2C_Send_Buffer@Flag,w
 11330  09E6  1D03               	btfss	3,2
 11331  09E7  0008               	return
 11332                           
 11333                           ;i2c.c: 192: return 0x01;
 11334                           ;	Return value of _I2C_Send_Buffer is never used
 11335  09E8  3001               	movlw	1
 11336  09E9  00A6               	movwf	??_I2C_Send_Buffer
 11337  09EA  0826               	movf	??_I2C_Send_Buffer,w
 11338  09EB  07A9               	addwf	I2C_Send_Buffer@i,f
 11339  09EC  29D3               	goto	l5681
 11340  09ED                     l5683:	
 11341                           
 11342                           ;i2c.c: 193: }
 11343                           ;i2c.c: 194: I2C_Stop();
 11344  09ED  3196  2628         	fcall	_I2C_Stop
 11345  09EF  0008               	return
 11346  09F0                     __end_of_I2C_Send_Buffer:	
 11347                           ;i2c.c: 195: return 0x00;
 11348                           ;	Return value of _I2C_Send_Buffer is never used
 11349                           
 11350                           
 11351                           	psect	text59
 11352  1628                     __ptext59:	
 11353 ;; *************** function _I2C_Stop *****************
 11354 ;; Defined at:
 11355 ;;		line 102 in file "mcc_generated_files/i2c.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;		None
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  1    wreg      void 
 11362 ;; Registers used:
 11363 ;;		wreg
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;Total ram usage:        1 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    3
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		_I2C_Read_Buffer
 11380 ;;		_I2C_Send_Buffer
 11381 ;; This function uses a non-reentrant model
 11382 ;;
 11383                           
 11384                           
 11385                           ;psect for function _I2C_Stop
 11386  1628                     _I2C_Stop:	
 11387                           
 11388                           ;incstack = 0
 11389                           ; Regs used in _I2C_Stop: [wreg]
 11390                           ;i2c.c: 104: do { LATB0 = 0; } while(0);
 11391  1628  0022               	movlb	2	; select bank2
 11392  1629  100D               	bcf	13,0	;volatile
 11393                           
 11394                           ;i2c.c: 105: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11395  162A  3003               	movlw	3
 11396  162B  0020               	movlb	0	; select bank0
 11397  162C  00A1               	movwf	??_I2C_Stop
 11398  162D                     u6017:	
 11399  162D  0BA1               	decfsz	??_I2C_Stop,f
 11400  162E  2E2D               	goto	u6017
 11401                           
 11402                           ;i2c.c: 106: do { LATB1 = 0; } while(0);
 11403  162F  0022               	movlb	2	; select bank2
 11404  1630  108D               	bcf	13,1	;volatile
 11405                           
 11406                           ;i2c.c: 107: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11407  1631  3003               	movlw	3
 11408  1632  0020               	movlb	0	; select bank0
 11409  1633  00A1               	movwf	??_I2C_Stop
 11410  1634                     u6027:	
 11411  1634  0BA1               	decfsz	??_I2C_Stop,f
 11412  1635  2E34               	goto	u6027
 11413                           
 11414                           ;i2c.c: 108: do { LATB0 = 1; } while(0);
 11415  1636  0022               	movlb	2	; select bank2
 11416  1637  140D               	bsf	13,0	;volatile
 11417                           
 11418                           ;i2c.c: 109: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11419  1638  3003               	movlw	3
 11420  1639  0020               	movlb	0	; select bank0
 11421  163A  00A1               	movwf	??_I2C_Stop
 11422  163B                     u6037:	
 11423  163B  0BA1               	decfsz	??_I2C_Stop,f
 11424  163C  2E3B               	goto	u6037
 11425                           
 11426                           ;i2c.c: 110: do { LATB1 = 1; } while(0);
 11427  163D  0022               	movlb	2	; select bank2
 11428  163E  148D               	bsf	13,1	;volatile
 11429                           
 11430                           ;i2c.c: 111: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11431  163F  3003               	movlw	3
 11432  1640  0020               	movlb	0	; select bank0
 11433  1641  00A1               	movwf	??_I2C_Stop
 11434  1642                     u6047:	
 11435  1642  0BA1               	decfsz	??_I2C_Stop,f
 11436  1643  2E42               	goto	u6047
 11437  1644  0008               	return
 11438  1645                     __end_of_I2C_Stop:	
 11439                           
 11440                           	psect	text60
 11441  160B                     __ptext60:	
 11442 ;; *************** function _I2C_Start *****************
 11443 ;; Defined at:
 11444 ;;		line 16 in file "mcc_generated_files/i2c.c"
 11445 ;; Parameters:    Size  Location     Type
 11446 ;;		None
 11447 ;; Auto vars:     Size  Location     Type
 11448 ;;		None
 11449 ;; Return value:  Size  Location     Type
 11450 ;;                  1    wreg      void 
 11451 ;; Registers used:
 11452 ;;		wreg
 11453 ;; Tracked objects:
 11454 ;;		On entry : 0/0
 11455 ;;		On exit  : 0/0
 11456 ;;		Unchanged: 0/0
 11457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11462 ;;Total ram usage:        1 bytes
 11463 ;; Hardware stack levels used:    1
 11464 ;; Hardware stack levels required when called:    3
 11465 ;; This function calls:
 11466 ;;		Nothing
 11467 ;; This function is called by:
 11468 ;;		_I2C_Read_Buffer
 11469 ;;		_I2C_Send_Buffer
 11470 ;; This function uses a non-reentrant model
 11471 ;;
 11472                           
 11473                           
 11474                           ;psect for function _I2C_Start
 11475  160B                     _I2C_Start:	
 11476                           
 11477                           ;incstack = 0
 11478                           ; Regs used in _I2C_Start: [wreg]
 11479                           ;i2c.c: 18: do { LATB1 = 1; } while(0);
 11480  160B  0022               	movlb	2	; select bank2
 11481  160C  148D               	bsf	13,1	;volatile
 11482                           
 11483                           ;i2c.c: 19: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11484  160D  3003               	movlw	3
 11485  160E  0020               	movlb	0	; select bank0
 11486  160F  00A1               	movwf	??_I2C_Start
 11487  1610                     u6057:	
 11488  1610  0BA1               	decfsz	??_I2C_Start,f
 11489  1611  2E10               	goto	u6057
 11490                           
 11491                           ;i2c.c: 20: do { LATB0 = 1; } while(0);
 11492  1612  0022               	movlb	2	; select bank2
 11493  1613  140D               	bsf	13,0	;volatile
 11494                           
 11495                           ;i2c.c: 21: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11496  1614  3003               	movlw	3
 11497  1615  0020               	movlb	0	; select bank0
 11498  1616  00A1               	movwf	??_I2C_Start
 11499  1617                     u6067:	
 11500  1617  0BA1               	decfsz	??_I2C_Start,f
 11501  1618  2E17               	goto	u6067
 11502                           
 11503                           ;i2c.c: 22: do { LATB1 = 0; } while(0);
 11504  1619  0022               	movlb	2	; select bank2
 11505  161A  108D               	bcf	13,1	;volatile
 11506                           
 11507                           ;i2c.c: 23: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11508  161B  3003               	movlw	3
 11509  161C  0020               	movlb	0	; select bank0
 11510  161D  00A1               	movwf	??_I2C_Start
 11511  161E                     u6077:	
 11512  161E  0BA1               	decfsz	??_I2C_Start,f
 11513  161F  2E1E               	goto	u6077
 11514                           
 11515                           ;i2c.c: 24: do { LATB0 = 0; } while(0);
 11516  1620  0022               	movlb	2	; select bank2
 11517  1621  100D               	bcf	13,0	;volatile
 11518                           
 11519                           ;i2c.c: 25: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11520  1622  3003               	movlw	3
 11521  1623  0020               	movlb	0	; select bank0
 11522  1624  00A1               	movwf	??_I2C_Start
 11523  1625                     u6087:	
 11524  1625  0BA1               	decfsz	??_I2C_Start,f
 11525  1626  2E25               	goto	u6087
 11526  1627  0008               	return
 11527  1628                     __end_of_I2C_Start:	
 11528                           
 11529                           	psect	text61
 11530  0C3E                     __ptext61:	
 11531 ;; *************** function _I2C_Send_Byte *****************
 11532 ;; Defined at:
 11533 ;;		line 34 in file "mcc_generated_files/i2c.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;  Data            1    wreg     unsigned char 
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;  Data            1    2[BANK0 ] unsigned char 
 11538 ;;  i               1    3[BANK0 ] unsigned char 
 11539 ;; Return value:  Size  Location     Type
 11540 ;;                  1    wreg      unsigned char 
 11541 ;; Registers used:
 11542 ;;		wreg, status,2, status,0
 11543 ;; Tracked objects:
 11544 ;;		On entry : 0/0
 11545 ;;		On exit  : 0/0
 11546 ;;		Unchanged: 0/0
 11547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;Total ram usage:        3 bytes
 11553 ;; Hardware stack levels used:    1
 11554 ;; Hardware stack levels required when called:    3
 11555 ;; This function calls:
 11556 ;;		Nothing
 11557 ;; This function is called by:
 11558 ;;		_I2C_Read_Buffer
 11559 ;;		_I2C_Send_Buffer
 11560 ;; This function uses a non-reentrant model
 11561 ;;
 11562                           
 11563                           
 11564                           ;psect for function _I2C_Send_Byte
 11565  0C3E                     _I2C_Send_Byte:	
 11566                           
 11567                           ;incstack = 0
 11568                           ; Regs used in _I2C_Send_Byte: [wreg+status,2+status,0]
 11569                           ;I2C_Send_Byte@Data stored from wreg
 11570  0C3E  0020               	movlb	0	; select bank0
 11571  0C3F  00A2               	movwf	I2C_Send_Byte@Data
 11572                           
 11573                           ;i2c.c: 36: unsigned char i;
 11574                           ;i2c.c: 37: for(i=0;i<8;i++)
 11575  0C40  01A3               	clrf	I2C_Send_Byte@i
 11576  0C41  3008               	movlw	8
 11577  0C42  0223               	subwf	I2C_Send_Byte@i,w
 11578  0C43  1803               	btfsc	3,0
 11579  0C44  2C6B               	goto	l818
 11580  0C45                     l806:	
 11581                           
 11582                           ;i2c.c: 38: {
 11583                           ;i2c.c: 39: if(Data&0x80)
 11584  0C45  1FA2               	btfss	I2C_Send_Byte@Data,7
 11585  0C46  2C4A               	goto	l812
 11586                           
 11587                           ;i2c.c: 40: do { LATB1 = 1; } while(0);
 11588  0C47  0022               	movlb	2	; select bank2
 11589  0C48  148D               	bsf	13,1	;volatile
 11590  0C49  2C4C               	goto	l4975
 11591  0C4A                     l812:	
 11592                           ;i2c.c: 41: else
 11593                           ;i2c.c: 42: do { LATB1 = 0; } while(0);
 11594                           
 11595  0C4A  0022               	movlb	2	; select bank2
 11596  0C4B  108D               	bcf	13,1	;volatile
 11597  0C4C                     l4975:	
 11598                           
 11599                           ;i2c.c: 43: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11600  0C4C  3003               	movlw	3
 11601  0C4D  0020               	movlb	0	; select bank0
 11602  0C4E  00A1               	movwf	??_I2C_Send_Byte
 11603  0C4F                     u6097:	
 11604  0C4F  0BA1               	decfsz	??_I2C_Send_Byte,f
 11605  0C50  2C4F               	goto	u6097
 11606                           
 11607                           ;i2c.c: 44: do { LATB0 = 1; } while(0);
 11608  0C51  0022               	movlb	2	; select bank2
 11609  0C52  140D               	bsf	13,0	;volatile
 11610                           
 11611                           ;i2c.c: 45: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11612  0C53  3003               	movlw	3
 11613  0C54  0020               	movlb	0	; select bank0
 11614  0C55  00A1               	movwf	??_I2C_Send_Byte
 11615  0C56                     u6107:	
 11616  0C56  0BA1               	decfsz	??_I2C_Send_Byte,f
 11617  0C57  2C56               	goto	u6107
 11618                           
 11619                           ;i2c.c: 46: Data<<=1;
 11620  0C58  1003               	clrc
 11621  0C59  0020               	movlb	0	; select bank0
 11622  0C5A  0DA2               	rlf	I2C_Send_Byte@Data,f
 11623                           
 11624                           ;i2c.c: 47: do { LATB0 = 0; } while(0);
 11625  0C5B  0022               	movlb	2	; select bank2
 11626  0C5C  100D               	bcf	13,0	;volatile
 11627                           
 11628                           ;i2c.c: 48: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11629  0C5D  3003               	movlw	3
 11630  0C5E  0020               	movlb	0	; select bank0
 11631  0C5F  00A1               	movwf	??_I2C_Send_Byte
 11632  0C60                     u6117:	
 11633  0C60  0BA1               	decfsz	??_I2C_Send_Byte,f
 11634  0C61  2C60               	goto	u6117
 11635  0C62  3001               	movlw	1
 11636  0C63  0020               	movlb	0	; select bank0
 11637  0C64  00A1               	movwf	??_I2C_Send_Byte
 11638  0C65  0821               	movf	??_I2C_Send_Byte,w
 11639  0C66  07A3               	addwf	I2C_Send_Byte@i,f
 11640  0C67  3008               	movlw	8
 11641  0C68  0223               	subwf	I2C_Send_Byte@i,w
 11642  0C69  1C03               	skipc
 11643  0C6A  2C45               	goto	l806
 11644  0C6B                     l818:	
 11645                           ;i2c.c: 49: }
 11646                           ;i2c.c: 50: do { LATB1 = 1; } while(0);
 11647                           
 11648  0C6B  0022               	movlb	2	; select bank2
 11649  0C6C  148D               	bsf	13,1	;volatile
 11650                           
 11651                           ;i2c.c: 51: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11652  0C6D  3003               	movlw	3
 11653  0C6E  0020               	movlb	0	; select bank0
 11654  0C6F  00A1               	movwf	??_I2C_Send_Byte
 11655  0C70                     u6127:	
 11656  0C70  0BA1               	decfsz	??_I2C_Send_Byte,f
 11657  0C71  2C70               	goto	u6127
 11658                           
 11659                           ;i2c.c: 52: do { LATB0 = 1; } while(0);
 11660  0C72  0022               	movlb	2	; select bank2
 11661  0C73  140D               	bsf	13,0	;volatile
 11662                           
 11663                           ;i2c.c: 53: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11664  0C74  3003               	movlw	3
 11665  0C75  0020               	movlb	0	; select bank0
 11666  0C76  00A1               	movwf	??_I2C_Send_Byte
 11667  0C77                     u6137:	
 11668  0C77  0BA1               	decfsz	??_I2C_Send_Byte,f
 11669  0C78  2C77               	goto	u6137
 11670                           
 11671                           ;i2c.c: 54: do { TRISB1 = 1; } while(0);
 11672  0C79  0021               	movlb	1	; select bank1
 11673  0C7A  148D               	bsf	13,1	;volatile
 11674                           
 11675                           ;i2c.c: 55: if(RB1)
 11676  0C7B  0020               	movlb	0	; select bank0
 11677  0C7C  1C8D               	btfss	13,1	;volatile
 11678  0C7D  2C82               	goto	l828
 11679                           
 11680                           ;i2c.c: 56: {
 11681                           ;i2c.c: 57: do { TRISB1 = 0; } while(0);
 11682  0C7E  0021               	movlb	1	; select bank1
 11683  0C7F  108D               	bcf	13,1	;volatile
 11684                           
 11685                           ;i2c.c: 58: return 0x01;
 11686  0C80  3001               	movlw	1
 11687  0C81  0008               	return
 11688  0C82                     l828:	
 11689                           ;i2c.c: 59: }
 11690                           ;i2c.c: 60: do { TRISB1 = 0; } while(0);
 11691                           
 11692  0C82  0021               	movlb	1	; select bank1
 11693  0C83  108D               	bcf	13,1	;volatile
 11694                           
 11695                           ;i2c.c: 61: do { LATB0 = 0; } while(0);
 11696  0C84  0022               	movlb	2	; select bank2
 11697  0C85  100D               	bcf	13,0	;volatile
 11698                           
 11699                           ;i2c.c: 62: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11700  0C86  3003               	movlw	3
 11701  0C87  0020               	movlb	0	; select bank0
 11702  0C88  00A1               	movwf	??_I2C_Send_Byte
 11703  0C89                     u6147:	
 11704  0C89  0BA1               	decfsz	??_I2C_Send_Byte,f
 11705  0C8A  2C89               	goto	u6147
 11706                           
 11707                           ;i2c.c: 63: do { LATB1 = 0; } while(0);
 11708  0C8B  0022               	movlb	2	; select bank2
 11709  0C8C  108D               	bcf	13,1	;volatile
 11710                           
 11711                           ;i2c.c: 64: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11712  0C8D  3003               	movlw	3
 11713  0C8E  0020               	movlb	0	; select bank0
 11714  0C8F  00A1               	movwf	??_I2C_Send_Byte
 11715  0C90                     u6157:	
 11716  0C90  0BA1               	decfsz	??_I2C_Send_Byte,f
 11717  0C91  2C90               	goto	u6157
 11718                           
 11719                           ;i2c.c: 65: return 0x00;
 11720  0C92  3000               	movlw	0
 11721  0C93  0008               	return
 11722  0C94                     __end_of_I2C_Send_Byte:	
 11723                           
 11724                           	psect	text62
 11725  0AFA                     __ptext62:	
 11726 ;; *************** function _FLASH_WriteWord *****************
 11727 ;; Defined at:
 11728 ;;		line 74 in file "mcc_generated_files/memory.c"
 11729 ;; Parameters:    Size  Location     Type
 11730 ;;  flashAddr       2   16[BANK0 ] unsigned int 
 11731 ;;  ramBuf          2   18[BANK0 ] PTR unsigned int 
 11732 ;;		 -> Flash_buff(64), Bq32k_Time_Init@temp(10), 
 11733 ;;  word            2   20[BANK0 ] unsigned int 
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;  blockStartAd    2   25[BANK0 ] unsigned int 
 11736 ;;  i               1   27[BANK0 ] unsigned char 
 11737 ;;  offset          1   24[BANK0 ] unsigned char 
 11738 ;; Return value:  Size  Location     Type
 11739 ;;                  1    wreg      void 
 11740 ;; Registers used:
 11741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11742 ;; Tracked objects:
 11743 ;;		On entry : 0/0
 11744 ;;		On exit  : 0/0
 11745 ;;		Unchanged: 0/0
 11746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11747 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11748 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11749 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11750 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;Total ram usage:       12 bytes
 11752 ;; Hardware stack levels used:    1
 11753 ;; Hardware stack levels required when called:    5
 11754 ;; This function calls:
 11755 ;;		_FLASH_ReadWord
 11756 ;;		_FLASH_WriteBlock
 11757 ;; This function is called by:
 11758 ;;		_Bq32k_Time_Init
 11759 ;;		_Write_Flash_head
 11760 ;;		_Write_Flash_finish
 11761 ;;		_Save_Write_word
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           
 11766                           ;psect for function _FLASH_WriteWord
 11767  0AFA                     _FLASH_WriteWord:	
 11768                           
 11769                           ;memory.c: 75: uint16_t blockStartAddr = (uint16_t) (flashAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
 11770                           
 11771                           ;incstack = 0
 11772                           ; Regs used in _FLASH_WriteWord: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11773  0AFA  30E0               	movlw	224
 11774  0AFB  0020               	movlb	0	; select bank0
 11775  0AFC  0530               	andwf	FLASH_WriteWord@flashAddr,w
 11776  0AFD  00B9               	movwf	FLASH_WriteWord@blockStartAddr
 11777  0AFE  303F               	movlw	63
 11778  0AFF  0531               	andwf	FLASH_WriteWord@flashAddr+1,w
 11779  0B00  00BA               	movwf	FLASH_WriteWord@blockStartAddr+1
 11780                           
 11781                           ;memory.c: 76: uint8_t offset = (uint8_t) (flashAddr & (32 - 1));
 11782  0B01  0830               	movf	FLASH_WriteWord@flashAddr,w
 11783  0B02  391F               	andlw	31
 11784  0B03  00B6               	movwf	??_FLASH_WriteWord
 11785  0B04  0836               	movf	??_FLASH_WriteWord,w
 11786  0B05  00B8               	movwf	FLASH_WriteWord@offset
 11787                           
 11788                           ;memory.c: 77: uint8_t i;
 11789                           ;memory.c: 80: for (i = 0; i < 32; i++) {
 11790  0B06  01BB               	clrf	FLASH_WriteWord@i
 11791  0B07  3020               	movlw	32
 11792  0B08  023B               	subwf	FLASH_WriteWord@i,w
 11793  0B09  1803               	btfsc	3,0
 11794  0B0A  2B2D               	goto	l5065
 11795  0B0B                     l5059:	
 11796                           
 11797                           ;memory.c: 81: ramBuf[i] = FLASH_ReadWord((blockStartAddr + i));
 11798  0B0B  083B               	movf	FLASH_WriteWord@i,w
 11799  0B0C  0739               	addwf	FLASH_WriteWord@blockStartAddr,w
 11800  0B0D  00A1               	movwf	FLASH_ReadWord@flashAddr
 11801  0B0E  083A               	movf	FLASH_WriteWord@blockStartAddr+1,w
 11802  0B0F  1803               	skipnc
 11803  0B10  0A3A               	incf	FLASH_WriteWord@blockStartAddr+1,w
 11804  0B11  00A2               	movwf	FLASH_ReadWord@flashAddr+1
 11805  0B12  3196  2663  318A   	fcall	_FLASH_ReadWord
 11806  0B15  0020               	movlb	0	; select bank0
 11807  0B16  083B               	movf	FLASH_WriteWord@i,w
 11808  0B17  00B6               	movwf	??_FLASH_WriteWord
 11809  0B18  01B7               	clrf	??_FLASH_WriteWord+1
 11810  0B19  35B6               	lslf	??_FLASH_WriteWord,f
 11811  0B1A  0DB7               	rlf	??_FLASH_WriteWord+1,f
 11812  0B1B  0836               	movf	??_FLASH_WriteWord,w
 11813  0B1C  0732               	addwf	FLASH_WriteWord@ramBuf,w
 11814  0B1D  0086               	movwf	6
 11815  0B1E  0837               	movf	??_FLASH_WriteWord+1,w
 11816  0B1F  3D33               	addwfc	FLASH_WriteWord@ramBuf+1,w
 11817  0B20  0087               	movwf	7
 11818  0B21  0821               	movf	?_FLASH_ReadWord,w
 11819  0B22  3FC0               	movwi [0]fsr1
 11820  0B23  0822               	movf	?_FLASH_ReadWord+1,w
 11821  0B24  3FC1               	movwi [1]fsr1
 11822  0B25  3001               	movlw	1
 11823  0B26  00B6               	movwf	??_FLASH_WriteWord
 11824  0B27  0836               	movf	??_FLASH_WriteWord,w
 11825  0B28  07BB               	addwf	FLASH_WriteWord@i,f
 11826  0B29  3020               	movlw	32
 11827  0B2A  023B               	subwf	FLASH_WriteWord@i,w
 11828  0B2B  1C03               	skipc
 11829  0B2C  2B0B               	goto	l5059
 11830  0B2D                     l5065:	
 11831                           
 11832                           ;memory.c: 82: }
 11833                           ;memory.c: 85: ramBuf[offset] = word;
 11834  0B2D  0838               	movf	FLASH_WriteWord@offset,w
 11835  0B2E  00B6               	movwf	??_FLASH_WriteWord
 11836  0B2F  01B7               	clrf	??_FLASH_WriteWord+1
 11837  0B30  35B6               	lslf	??_FLASH_WriteWord,f
 11838  0B31  0DB7               	rlf	??_FLASH_WriteWord+1,f
 11839  0B32  0836               	movf	??_FLASH_WriteWord,w
 11840  0B33  0732               	addwf	FLASH_WriteWord@ramBuf,w
 11841  0B34  0086               	movwf	6
 11842  0B35  0837               	movf	??_FLASH_WriteWord+1,w
 11843  0B36  3D33               	addwfc	FLASH_WriteWord@ramBuf+1,w
 11844  0B37  0087               	movwf	7
 11845  0B38  0834               	movf	FLASH_WriteWord@word,w
 11846  0B39  3FC0               	movwi [0]fsr1
 11847  0B3A  0835               	movf	FLASH_WriteWord@word+1,w
 11848  0B3B  3FC1               	movwi [1]fsr1
 11849                           
 11850                           ;memory.c: 88: FLASH_WriteBlock(blockStartAddr, ramBuf);
 11851  0B3C  083A               	movf	FLASH_WriteWord@blockStartAddr+1,w
 11852  0B3D  00A5               	movwf	FLASH_WriteBlock@writeAddr+1
 11853  0B3E  0839               	movf	FLASH_WriteWord@blockStartAddr,w
 11854  0B3F  00A4               	movwf	FLASH_WriteBlock@writeAddr
 11855  0B40  0833               	movf	FLASH_WriteWord@ramBuf+1,w
 11856  0B41  00A7               	movwf	FLASH_WriteBlock@flashWordArray+1
 11857  0B42  0832               	movf	FLASH_WriteWord@ramBuf,w
 11858  0B43  00A6               	movwf	FLASH_WriteBlock@flashWordArray
 11859  0B44  318E  269B         	fcall	_FLASH_WriteBlock
 11860  0B46  0008               	return
 11861  0B47                     __end_of_FLASH_WriteWord:	
 11862                           
 11863                           	psect	text63
 11864  0E9B                     __ptext63:	
 11865 ;; *************** function _FLASH_WriteBlock *****************
 11866 ;; Defined at:
 11867 ;;		line 91 in file "mcc_generated_files/memory.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;  writeAddr       2    4[BANK0 ] unsigned int 
 11870 ;;  flashWordArr    2    6[BANK0 ] PTR unsigned int 
 11871 ;;		 -> Flash_buff(64), Bq32k_Time_Init@temp(10), 
 11872 ;; Auto vars:     Size  Location     Type
 11873 ;;  blockStartAd    2   12[BANK0 ] unsigned int 
 11874 ;;  i               1   15[BANK0 ] unsigned char 
 11875 ;;  GIEBitValue     1   14[BANK0 ] unsigned char 
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  1    wreg      char 
 11878 ;; Registers used:
 11879 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11885 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;Total ram usage:       12 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    4
 11892 ;; This function calls:
 11893 ;;		_FLASH_EraseBlock
 11894 ;; This function is called by:
 11895 ;;		_FLASH_WriteWord
 11896 ;; This function uses a non-reentrant model
 11897 ;;
 11898                           
 11899                           
 11900                           ;psect for function _FLASH_WriteBlock
 11901  0E9B                     _FLASH_WriteBlock:	
 11902                           
 11903                           ;memory.c: 92: uint16_t blockStartAddr = (uint16_t) (writeAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
 11904                           
 11905                           ;incstack = 0
 11906                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11907  0E9B  30E0               	movlw	224
 11908  0E9C  0020               	movlb	0	; select bank0
 11909  0E9D  0524               	andwf	FLASH_WriteBlock@writeAddr,w
 11910  0E9E  00AC               	movwf	FLASH_WriteBlock@blockStartAddr
 11911  0E9F  303F               	movlw	63
 11912  0EA0  0525               	andwf	FLASH_WriteBlock@writeAddr+1,w
 11913  0EA1  00AD               	movwf	FLASH_WriteBlock@blockStartAddr+1
 11914                           
 11915                           ;memory.c: 93: uint8_t GIEBitValue = INTCONbits.GIE;
 11916  0EA2  3000               	movlw	0
 11917  0EA3  1B8B               	btfsc	11,7	;volatile
 11918  0EA4  3001               	movlw	1
 11919  0EA5  00AE               	movwf	FLASH_WriteBlock@GIEBitValue
 11920                           
 11921                           ;memory.c: 94: uint8_t i;
 11922                           ;memory.c: 97: if (writeAddr != blockStartAddr) {
 11923  0EA6  082D               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 11924  0EA7  0625               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 11925  0EA8  1D03               	skipz
 11926  0EA9  2EAC               	goto	u4155
 11927  0EAA  082C               	movf	FLASH_WriteBlock@blockStartAddr,w
 11928  0EAB  0624               	xorwf	FLASH_WriteBlock@writeAddr,w
 11929  0EAC                     u4155:	
 11930  0EAC  1D03               	btfss	3,2
 11931  0EAD  0008               	return
 11932                           
 11933                           ;memory.c: 99: }
 11934                           ;memory.c: 101: INTCONbits.GIE = 0;
 11935                           
 11936                           ;memory.c: 98: return -1;
 11937                           ;	Return value of _FLASH_WriteBlock is never used
 11938  0EAE  138B               	bcf	11,7	;volatile
 11939                           
 11940                           ;memory.c: 104: FLASH_EraseBlock(writeAddr);
 11941  0EAF  0825               	movf	FLASH_WriteBlock@writeAddr+1,w
 11942  0EB0  00A2               	movwf	FLASH_EraseBlock@startAddr+1
 11943  0EB1  0824               	movf	FLASH_WriteBlock@writeAddr,w
 11944  0EB2  00A1               	movwf	FLASH_EraseBlock@startAddr
 11945  0EB3  3196  2683  318E   	fcall	_FLASH_EraseBlock
 11946                           
 11947                           ;memory.c: 107: PMCON1bits.CFGS = 0;
 11948  0EB6  0023               	movlb	3	; select bank3
 11949  0EB7  1315               	bcf	21,6	;volatile
 11950                           
 11951                           ;memory.c: 108: PMCON1bits.WREN = 1;
 11952  0EB8  1515               	bsf	21,2	;volatile
 11953                           
 11954                           ;memory.c: 109: PMCON1bits.LWLO = 1;
 11955  0EB9  1695               	bsf	21,5	;volatile
 11956                           
 11957                           ;memory.c: 111: for (i = 0; i < 32; i++) {
 11958  0EBA  0020               	movlb	0	; select bank0
 11959  0EBB  01AF               	clrf	FLASH_WriteBlock@i
 11960  0EBC  3020               	movlw	32
 11961  0EBD  022F               	subwf	FLASH_WriteBlock@i,w
 11962  0EBE  1803               	btfsc	3,0
 11963  0EBF  2F05               	goto	l222
 11964  0EC0                     l4933:	
 11965                           
 11966                           ;memory.c: 113: PMADRL = (writeAddr & 0xFF);
 11967  0EC0  0824               	movf	FLASH_WriteBlock@writeAddr,w
 11968  0EC1  0023               	movlb	3	; select bank3
 11969  0EC2  0091               	movwf	17	;volatile
 11970                           
 11971                           ;memory.c: 115: PMADRH = ((writeAddr & 0xFF00) >> 8);
 11972  0EC3  0020               	movlb	0	; select bank0
 11973  0EC4  0825               	movf	FLASH_WriteBlock@writeAddr+1,w
 11974  0EC5  0023               	movlb	3	; select bank3
 11975  0EC6  0092               	movwf	18	;volatile
 11976                           
 11977                           ;memory.c: 118: PMDATL = flashWordArray[i];
 11978  0EC7  0020               	movlb	0	; select bank0
 11979  0EC8  082F               	movf	FLASH_WriteBlock@i,w
 11980  0EC9  00A8               	movwf	??_FLASH_WriteBlock
 11981  0ECA  01A9               	clrf	??_FLASH_WriteBlock+1
 11982  0ECB  35A8               	lslf	??_FLASH_WriteBlock,f
 11983  0ECC  0DA9               	rlf	??_FLASH_WriteBlock+1,f
 11984  0ECD  0828               	movf	??_FLASH_WriteBlock,w
 11985  0ECE  0726               	addwf	FLASH_WriteBlock@flashWordArray,w
 11986  0ECF  0086               	movwf	6
 11987  0ED0  0829               	movf	??_FLASH_WriteBlock+1,w
 11988  0ED1  3D27               	addwfc	FLASH_WriteBlock@flashWordArray+1,w
 11989  0ED2  0087               	movwf	7
 11990  0ED3  0801               	movf	1,w
 11991  0ED4  0023               	movlb	3	; select bank3
 11992  0ED5  0093               	movwf	19	;volatile
 11993                           
 11994                           ;memory.c: 119: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 11995  0ED6  0020               	movlb	0	; select bank0
 11996  0ED7  082F               	movf	FLASH_WriteBlock@i,w
 11997  0ED8  00A8               	movwf	??_FLASH_WriteBlock
 11998  0ED9  01A9               	clrf	??_FLASH_WriteBlock+1
 11999  0EDA  35A8               	lslf	??_FLASH_WriteBlock,f
 12000  0EDB  0DA9               	rlf	??_FLASH_WriteBlock+1,f
 12001  0EDC  0828               	movf	??_FLASH_WriteBlock,w
 12002  0EDD  0726               	addwf	FLASH_WriteBlock@flashWordArray,w
 12003  0EDE  0086               	movwf	6
 12004  0EDF  0829               	movf	??_FLASH_WriteBlock+1,w
 12005  0EE0  3D27               	addwfc	FLASH_WriteBlock@flashWordArray+1,w
 12006  0EE1  0087               	movwf	7
 12007  0EE2  3F40               	moviw [0]fsr1
 12008  0EE3  00AA               	movwf	??_FLASH_WriteBlock+2
 12009  0EE4  3F41               	moviw [1]fsr1
 12010  0EE5  00AB               	movwf	??_FLASH_WriteBlock+3
 12011  0EE6  082B               	movf	??_FLASH_WriteBlock+3,w
 12012  0EE7  0023               	movlb	3	; select bank3
 12013  0EE8  0094               	movwf	20	;volatile
 12014                           
 12015                           ;memory.c: 121: if (i == (32 - 1)) {
 12016  0EE9  301F               	movlw	31
 12017  0EEA  0020               	movlb	0	; select bank0
 12018  0EEB  062F               	xorwf	FLASH_WriteBlock@i,w
 12019  0EEC  1D03               	btfss	3,2
 12020  0EED  2EF0               	goto	l4945
 12021                           
 12022                           ;memory.c: 123: PMCON1bits.LWLO = 0;
 12023  0EEE  0023               	movlb	3	; select bank3
 12024  0EEF  1295               	bcf	21,5	;volatile
 12025  0EF0                     l4945:	
 12026                           
 12027                           ;memory.c: 124: }
 12028                           ;memory.c: 126: PMCON2 = 0x55;
 12029  0EF0  3055               	movlw	85
 12030  0EF1  0023               	movlb	3	; select bank3
 12031  0EF2  0096               	movwf	22	;volsfr
 12032                           
 12033                           ;memory.c: 127: PMCON2 = 0xAA;
 12034  0EF3  30AA               	movlw	170
 12035  0EF4  0096               	movwf	22	;volsfr
 12036                           
 12037                           ;memory.c: 128: PMCON1bits.WR = 1;
 12038  0EF5  1495               	bsf	21,1	;volatile
 12039                           
 12040                           ;memory.c: 129: __nop();
 12041  0EF6  0000               	nop
 12042                           
 12043                           ;memory.c: 130: __nop();
 12044  0EF7  0000               	nop
 12045                           
 12046                           ;memory.c: 132: writeAddr++;
 12047  0EF8  3001               	movlw	1
 12048  0EF9  0020               	movlb	0	; select bank0
 12049  0EFA  07A4               	addwf	FLASH_WriteBlock@writeAddr,f
 12050  0EFB  3000               	movlw	0
 12051  0EFC  3DA5               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 12052  0EFD  3001               	movlw	1
 12053  0EFE  00A8               	movwf	??_FLASH_WriteBlock
 12054  0EFF  0828               	movf	??_FLASH_WriteBlock,w
 12055  0F00  07AF               	addwf	FLASH_WriteBlock@i,f
 12056  0F01  3020               	movlw	32
 12057  0F02  022F               	subwf	FLASH_WriteBlock@i,w
 12058  0F03  1C03               	skipc
 12059  0F04  2EC0               	goto	l4933
 12060  0F05                     l222:	
 12061                           
 12062                           ;memory.c: 133: }
 12063                           ;memory.c: 135: PMCON1bits.WREN = 0;
 12064  0F05  0023               	movlb	3	; select bank3
 12065  0F06  1115               	bcf	21,2	;volatile
 12066                           
 12067                           ;memory.c: 136: INTCONbits.GIE = GIEBitValue;
 12068  0F07  0020               	movlb	0	; select bank0
 12069  0F08  0C2E               	rrf	FLASH_WriteBlock@GIEBitValue,w
 12070  0F09  1C03               	skipc
 12071  0F0A  138B               	bcf	11,7	;volatile
 12072  0F0B  1803               	skipnc
 12073  0F0C  178B               	bsf	11,7	;volatile
 12074  0F0D  0008               	return
 12075  0F0E                     __end_of_FLASH_WriteBlock:	
 12076                           ;memory.c: 138: return 0;
 12077                           ;	Return value of _FLASH_WriteBlock is never used
 12078                           
 12079                           
 12080                           	psect	text64
 12081  1683                     __ptext64:	
 12082 ;; *************** function _FLASH_EraseBlock *****************
 12083 ;; Defined at:
 12084 ;;		line 141 in file "mcc_generated_files/memory.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;  startAddr       2    1[BANK0 ] unsigned int 
 12087 ;; Auto vars:     Size  Location     Type
 12088 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 12089 ;; Return value:  Size  Location     Type
 12090 ;;                  1    wreg      void 
 12091 ;; Registers used:
 12092 ;;		wreg, status,2, status,0
 12093 ;; Tracked objects:
 12094 ;;		On entry : 0/0
 12095 ;;		On exit  : 0/0
 12096 ;;		Unchanged: 0/0
 12097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12098 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;Total ram usage:        3 bytes
 12103 ;; Hardware stack levels used:    1
 12104 ;; Hardware stack levels required when called:    3
 12105 ;; This function calls:
 12106 ;;		Nothing
 12107 ;; This function is called by:
 12108 ;;		_FLASH_WriteBlock
 12109 ;; This function uses a non-reentrant model
 12110 ;;
 12111                           
 12112                           
 12113                           ;psect for function _FLASH_EraseBlock
 12114  1683                     _FLASH_EraseBlock:	
 12115                           
 12116                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
 12117                           
 12118                           ;incstack = 0
 12119                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12120  1683  3000               	movlw	0
 12121  1684  1B8B               	btfsc	11,7	;volatile
 12122  1685  3001               	movlw	1
 12123  1686  0020               	movlb	0	; select bank0
 12124  1687  00A3               	movwf	FLASH_EraseBlock@GIEBitValue
 12125                           
 12126                           ;memory.c: 145: INTCONbits.GIE = 0;
 12127  1688  138B               	bcf	11,7	;volatile
 12128                           
 12129                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
 12130  1689  0821               	movf	FLASH_EraseBlock@startAddr,w
 12131  168A  0023               	movlb	3	; select bank3
 12132  168B  0091               	movwf	17	;volatile
 12133                           
 12134                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
 12135  168C  0020               	movlb	0	; select bank0
 12136  168D  0822               	movf	FLASH_EraseBlock@startAddr+1,w
 12137  168E  0023               	movlb	3	; select bank3
 12138  168F  0092               	movwf	18	;volatile
 12139                           
 12140                           ;memory.c: 152: PMCON1bits.CFGS = 0;
 12141  1690  1315               	bcf	21,6	;volatile
 12142                           
 12143                           ;memory.c: 153: PMCON1bits.FREE = 1;
 12144  1691  1615               	bsf	21,4	;volatile
 12145                           
 12146                           ;memory.c: 154: PMCON1bits.WREN = 1;
 12147  1692  1515               	bsf	21,2	;volatile
 12148                           
 12149                           ;memory.c: 157: PMCON2 = 0x55;
 12150  1693  3055               	movlw	85
 12151  1694  0096               	movwf	22	;volsfr
 12152                           
 12153                           ;memory.c: 158: PMCON2 = 0xAA;
 12154  1695  30AA               	movlw	170
 12155  1696  0096               	movwf	22	;volsfr
 12156                           
 12157                           ;memory.c: 159: PMCON1bits.WR = 1;
 12158  1697  1495               	bsf	21,1	;volatile
 12159                           
 12160                           ;memory.c: 160: __nop();
 12161  1698  0000               	nop
 12162                           
 12163                           ;memory.c: 161: __nop();
 12164  1699  0000               	nop
 12165                           
 12166                           ;memory.c: 163: PMCON1bits.WREN = 0;
 12167  169A  0023               	movlb	3	; select bank3
 12168  169B  1115               	bcf	21,2	;volatile
 12169                           
 12170                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
 12171  169C  0020               	movlb	0	; select bank0
 12172  169D  0C23               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12173  169E  1C03               	skipc
 12174  169F  138B               	bcf	11,7	;volatile
 12175  16A0  1803               	skipnc
 12176  16A1  178B               	bsf	11,7	;volatile
 12177  16A2  0008               	return
 12178  16A3                     __end_of_FLASH_EraseBlock:	
 12179                           
 12180                           	psect	text65
 12181  1663                     __ptext65:	
 12182 ;; *************** function _FLASH_ReadWord *****************
 12183 ;; Defined at:
 12184 ;;		line 58 in file "mcc_generated_files/memory.c"
 12185 ;; Parameters:    Size  Location     Type
 12186 ;;  flashAddr       2    1[BANK0 ] unsigned int 
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 12189 ;; Return value:  Size  Location     Type
 12190 ;;                  2    1[BANK0 ] unsigned int 
 12191 ;; Registers used:
 12192 ;;		wreg, status,2, status,0
 12193 ;; Tracked objects:
 12194 ;;		On entry : 0/0
 12195 ;;		On exit  : 0/0
 12196 ;;		Unchanged: 0/0
 12197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12198 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;Total ram usage:        3 bytes
 12203 ;; Hardware stack levels used:    1
 12204 ;; Hardware stack levels required when called:    3
 12205 ;; This function calls:
 12206 ;;		Nothing
 12207 ;; This function is called by:
 12208 ;;		_FLASH_WriteWord
 12209 ;;		_Key_Process
 12210 ;;		_Bq32k_Time_Init
 12211 ;;		_Serach_Flash_Head
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           
 12216                           ;psect for function _FLASH_ReadWord
 12217  1663                     _FLASH_ReadWord:	
 12218                           
 12219                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12220                           
 12221                           ;incstack = 0
 12222                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12223  1663  3000               	movlw	0
 12224  1664  1B8B               	btfsc	11,7	;volatile
 12225  1665  3001               	movlw	1
 12226  1666  0020               	movlb	0	; select bank0
 12227  1667  00A3               	movwf	FLASH_ReadWord@GIEBitValue
 12228                           
 12229                           ;memory.c: 61: INTCONbits.GIE = 0;
 12230  1668  138B               	bcf	11,7	;volatile
 12231                           
 12232                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12233  1669  0821               	movf	FLASH_ReadWord@flashAddr,w
 12234  166A  0023               	movlb	3	; select bank3
 12235  166B  0091               	movwf	17	;volatile
 12236                           
 12237                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12238  166C  0020               	movlb	0	; select bank0
 12239  166D  0822               	movf	FLASH_ReadWord@flashAddr+1,w
 12240  166E  0023               	movlb	3	; select bank3
 12241  166F  0092               	movwf	18	;volatile
 12242                           
 12243                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12244  1670  1315               	bcf	21,6	;volatile
 12245                           
 12246                           ;memory.c: 66: PMCON1bits.RD = 1;
 12247  1671  1415               	bsf	21,0	;volatile
 12248                           
 12249                           ;memory.c: 67: __nop();
 12250  1672  0000               	nop
 12251                           
 12252                           ;memory.c: 68: __nop();
 12253  1673  0000               	nop
 12254                           
 12255                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12256  1674  0020               	movlb	0	; select bank0
 12257  1675  0C23               	rrf	FLASH_ReadWord@GIEBitValue,w
 12258  1676  1C03               	skipc
 12259  1677  138B               	bcf	11,7	;volatile
 12260  1678  1803               	skipnc
 12261  1679  178B               	bsf	11,7	;volatile
 12262                           
 12263                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12264  167A  0023               	movlb	3	; select bank3
 12265  167B  0814               	movf	20,w	;volatile
 12266  167C  0020               	movlb	0	; select bank0
 12267  167D  00A2               	movwf	?_FLASH_ReadWord+1
 12268  167E  0023               	movlb	3	; select bank3
 12269  167F  0813               	movf	19,w	;volatile
 12270  1680  0020               	movlb	0	; select bank0
 12271  1681  00A1               	movwf	?_FLASH_ReadWord
 12272  1682  0008               	return
 12273  1683                     __end_of_FLASH_ReadWord:	
 12274                           
 12275                           	psect	text66
 12276  1645                     __ptext66:	
 12277 ;; *************** function _ADC_GetConversion *****************
 12278 ;; Defined at:
 12279 ;;		line 106 in file "mcc_generated_files/adc.c"
 12280 ;; Parameters:    Size  Location     Type
 12281 ;;  channel         1    wreg     enum E1850
 12282 ;; Auto vars:     Size  Location     Type
 12283 ;;  channel         1    4[BANK0 ] enum E1850
 12284 ;; Return value:  Size  Location     Type
 12285 ;;                  2    1[BANK0 ] unsigned int 
 12286 ;; Registers used:
 12287 ;;		wreg, status,2, status,0
 12288 ;; Tracked objects:
 12289 ;;		On entry : 0/0
 12290 ;;		On exit  : 0/0
 12291 ;;		Unchanged: 0/0
 12292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12293 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;Total ram usage:        4 bytes
 12298 ;; Hardware stack levels used:    1
 12299 ;; Hardware stack levels required when called:    3
 12300 ;; This function calls:
 12301 ;;		Nothing
 12302 ;; This function is called by:
 12303 ;;		_main
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           
 12308                           ;psect for function _ADC_GetConversion
 12309  1645                     _ADC_GetConversion:	
 12310                           
 12311                           ;incstack = 0
 12312                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 12313                           ;ADC_GetConversion@channel stored from wreg
 12314  1645  0020               	movlb	0	; select bank0
 12315  1646  00A4               	movwf	ADC_GetConversion@channel
 12316                           
 12317                           ;adc.c: 108: ADCON0bits.CHS = channel;
 12318  1647  0824               	movf	ADC_GetConversion@channel,w
 12319  1648  00A3               	movwf	??_ADC_GetConversion
 12320  1649  0DA3               	rlf	??_ADC_GetConversion,f
 12321  164A  0DA3               	rlf	??_ADC_GetConversion,f
 12322  164B  0021               	movlb	1	; select bank1
 12323  164C  081D               	movf	29,w	;volatile
 12324  164D  0020               	movlb	0	; select bank0
 12325  164E  0623               	xorwf	??_ADC_GetConversion,w
 12326  164F  3983               	andlw	-125
 12327  1650  0623               	xorwf	??_ADC_GetConversion,w
 12328  1651  0021               	movlb	1	; select bank1
 12329  1652  009D               	movwf	29	;volatile
 12330                           
 12331                           ;adc.c: 111: ADCON0bits.ADON = 1;
 12332  1653  141D               	bsf	29,0	;volatile
 12333                           
 12334                           ;adc.c: 114: _delay((unsigned long)((5)*(4000000/4000000.0)));
 12335  1654  3200               	nop2	;2 cycle nop
 12336  1655  3200               	nop2	;2 cycle nop
 12337  1656  0000               	nop
 12338                           
 12339                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
 12340  1657  0021               	movlb	1	; select bank1
 12341  1658  149D               	bsf	29,1	;volatile
 12342  1659                     l253:	
 12343                           ;adc.c: 120: while (ADCON0bits.GO_nDONE) {
 12344                           
 12345  1659  189D               	btfsc	29,1	;volatile
 12346  165A  2E59               	goto	l253
 12347                           
 12348                           ;adc.c: 121: }
 12349                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
 12350  165B  081C               	movf	28,w	;volatile
 12351  165C  0020               	movlb	0	; select bank0
 12352  165D  00A2               	movwf	?_ADC_GetConversion+1
 12353  165E  0021               	movlb	1	; select bank1
 12354  165F  081B               	movf	27,w	;volatile
 12355  1660  0020               	movlb	0	; select bank0
 12356  1661  00A1               	movwf	?_ADC_GetConversion
 12357  1662  0008               	return
 12358  1663                     __end_of_ADC_GetConversion:	
 12359                           
 12360                           	psect	intentry
 12361  0004                     __pintentry:	
 12362 ;; *************** function _INTERRUPT_InterruptManager *****************
 12363 ;; Defined at:
 12364 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;		None
 12367 ;; Auto vars:     Size  Location     Type
 12368 ;;		None
 12369 ;; Return value:  Size  Location     Type
 12370 ;;                  1    wreg      void 
 12371 ;; Registers used:
 12372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12373 ;; Tracked objects:
 12374 ;;		On entry : 0/0
 12375 ;;		On exit  : 0/0
 12376 ;;		Unchanged: 0/0
 12377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;Total ram usage:        1 bytes
 12383 ;; Hardware stack levels used:    1
 12384 ;; Hardware stack levels required when called:    2
 12385 ;; This function calls:
 12386 ;;		_EUSART_Receive_ISR
 12387 ;;		_EUSART_Transmit_ISR
 12388 ;;		_TMR0_ISR
 12389 ;; This function is called by:
 12390 ;;		Interrupt level 1
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394  0004                     _INTERRUPT_InterruptManager:	
 12395                           
 12396                           ;incstack = 0
 12397                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12398  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12399  0005  3180               	pagesel	$
 12400  0006  0020               	movlb	0	; select bank0
 12401  0007  087F               	movf	127,w
 12402  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 12403                           
 12404                           ;interrupt_manager.c: 54: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 12405  0009  1A8B               	btfsc	11,5	;volatile
 12406  000A  1D0B               	btfss	11,2	;volatile
 12407  000B  2810               	goto	i1l316
 12408                           
 12409                           ;interrupt_manager.c: 55: TMR0_ISR();
 12410  000C  3195  2581  3180   	fcall	_TMR0_ISR
 12411                           
 12412                           ;interrupt_manager.c: 56: } else if (PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1) {
 12413  000F  2822               	goto	i1l322
 12414  0010                     i1l316:	
 12415  0010  0021               	movlb	1	; select bank1
 12416  0011  1E91               	btfss	17,5	;volatile
 12417  0012  281A               	goto	i1l318
 12418  0013  0020               	movlb	0	; select bank0
 12419  0014  1E91               	btfss	17,5	;volatile
 12420  0015  281A               	goto	i1l318
 12421                           
 12422                           ;interrupt_manager.c: 57: EUSART_Receive_ISR();
 12423  0016  318D  2558  3180   	fcall	_EUSART_Receive_ISR
 12424                           
 12425                           ;interrupt_manager.c: 58: } else if (PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1) {
 12426  0019  2822               	goto	i1l322
 12427  001A                     i1l318:	
 12428  001A  0021               	movlb	1	; select bank1
 12429  001B  1E11               	btfss	17,4	;volatile
 12430  001C  2822               	goto	i1l322
 12431  001D  0020               	movlb	0	; select bank0
 12432  001E  1E11               	btfss	17,4	;volatile
 12433  001F  2822               	goto	i1l322
 12434                           
 12435                           ;interrupt_manager.c: 59: EUSART_Transmit_ISR();
 12436  0020  3195  25EE         	fcall	_EUSART_Transmit_ISR
 12437  0022                     i1l322:	
 12438                           ;interrupt_manager.c: 60: } else {
 12439                           
 12440  0022  0020               	movlb	0	; select bank0
 12441  0023  0820               	movf	??_INTERRUPT_InterruptManager,w
 12442  0024  00FF               	movwf	127
 12443  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12444  0026  0009               	retfie
 12445  0027                     __end_of_INTERRUPT_InterruptManager:	
 12446                           
 12447                           	psect	text68
 12448  1581                     __ptext68:	
 12449 ;; *************** function _TMR0_ISR *****************
 12450 ;; Defined at:
 12451 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 12452 ;; Parameters:    Size  Location     Type
 12453 ;;		None
 12454 ;; Auto vars:     Size  Location     Type
 12455 ;;		None
 12456 ;; Return value:  Size  Location     Type
 12457 ;;                  1    wreg      void 
 12458 ;; Registers used:
 12459 ;;		wreg, status,2, status,0, pclath, cstack
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;Total ram usage:        1 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    1
 12472 ;; This function calls:
 12473 ;;		_TMR0_CallBack
 12474 ;; This function is called by:
 12475 ;;		_INTERRUPT_InterruptManager
 12476 ;; This function uses a non-reentrant model
 12477 ;;
 12478                           
 12479                           
 12480                           ;psect for function _TMR0_ISR
 12481  1581                     _TMR0_ISR:	
 12482                           
 12483                           ;tmr0.c: 104: static volatile unsigned int CountCallBack = 0;
 12484                           ;tmr0.c: 107: INTCONbits.TMR0IF = 0;
 12485                           
 12486                           ;incstack = 0
 12487                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 12488  1581  110B               	bcf	11,2	;volatile
 12489                           
 12490                           ;tmr0.c: 109: TMR0 = timer0ReloadVal;
 12491  1582  0021               	movlb	1	; select bank1
 12492  1583  086C               	movf	_timer0ReloadVal^(0+128),w	;volatile
 12493  1584  0020               	movlb	0	; select bank0
 12494  1585  0095               	movwf	21	;volatile
 12495                           
 12496                           ;tmr0.c: 111: MAX31856Sec++;
 12497  1586  3001               	movlw	1
 12498  1587  00F1               	movwf	??_TMR0_ISR
 12499  1588  0871               	movf	??_TMR0_ISR,w
 12500  1589  0021               	movlb	1	; select bank1
 12501  158A  07B5               	addwf	_MAX31856Sec^(0+128),f
 12502                           
 12503                           ;tmr0.c: 114: if (++CountCallBack >= 100) {
 12504  158B  3001               	movlw	1
 12505  158C  07A4               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
 12506  158D  3000               	movlw	0
 12507  158E  3DA5               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
 12508  158F  3000               	movlw	0
 12509  1590  0225               	subwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
 12510  1591  3064               	movlw	100
 12511  1592  1903               	skipnz
 12512  1593  0224               	subwf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
 12513  1594  1C03               	skipc
 12514  1595  0008               	return
 12515                           
 12516                           ;tmr0.c: 116: TMR0_CallBack();
 12517  1596  3194  248D         	fcall	_TMR0_CallBack
 12518                           
 12519                           ;tmr0.c: 119: CountCallBack = 0;
 12520  1598  0021               	movlb	1	; select bank1
 12521  1599  01A4               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
 12522  159A  01A5               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
 12523  159B  0008               	return
 12524  159C                     __end_of_TMR0_ISR:	
 12525                           
 12526                           	psect	text69
 12527  148D                     __ptext69:	
 12528 ;; *************** function _TMR0_CallBack *****************
 12529 ;; Defined at:
 12530 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;		None
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;		None
 12535 ;; Return value:  Size  Location     Type
 12536 ;;                  1    wreg      void 
 12537 ;; Registers used:
 12538 ;;		wreg, status,2, status,0
 12539 ;; Tracked objects:
 12540 ;;		On entry : 0/0
 12541 ;;		On exit  : 0/0
 12542 ;;		Unchanged: 0/0
 12543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;Total ram usage:        1 bytes
 12549 ;; Hardware stack levels used:    1
 12550 ;; This function calls:
 12551 ;;		Nothing
 12552 ;; This function is called by:
 12553 ;;		_TMR0_ISR
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           
 12558                           ;psect for function _TMR0_CallBack
 12559  148D                     _TMR0_CallBack:	
 12560                           
 12561                           ;tmr0.c: 128: LongPressSec++;
 12562                           
 12563                           ;incstack = 0
 12564                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0]
 12565  148D  3001               	movlw	1
 12566  148E  00F0               	movwf	??_TMR0_CallBack
 12567  148F  0870               	movf	??_TMR0_CallBack,w
 12568  1490  0021               	movlb	1	; select bank1
 12569  1491  07B4               	addwf	_LongPressSec^(0+128),f
 12570  1492  0008               	return
 12571  1493                     __end_of_TMR0_CallBack:	
 12572                           
 12573                           	psect	text70
 12574  15EE                     __ptext70:	
 12575 ;; *************** function _EUSART_Transmit_ISR *****************
 12576 ;; Defined at:
 12577 ;;		line 155 in file "mcc_generated_files/eusart.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  1    wreg      void 
 12584 ;; Registers used:
 12585 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;Total ram usage:        1 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; This function calls:
 12598 ;;		Nothing
 12599 ;; This function is called by:
 12600 ;;		_INTERRUPT_InterruptManager
 12601 ;; This function uses a non-reentrant model
 12602 ;;
 12603                           
 12604                           
 12605                           ;psect for function _EUSART_Transmit_ISR
 12606  15EE                     _EUSART_Transmit_ISR:	
 12607                           
 12608                           ;eusart.c: 158: if (sizeof (eusartTxBuffer) > eusartTxBufferRemaining) {
 12609                           
 12610                           ;incstack = 0
 12611                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12612  15EE  3008               	movlw	8
 12613  15EF  0021               	movlb	1	; select bank1
 12614  15F0  026B               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 12615  15F1  1803               	skipnc
 12616  15F2  2E09               	goto	i1l163
 12617                           
 12618                           ;eusart.c: 159: TXREG = eusartTxBuffer[eusartTxTail++];
 12619  15F3  083D               	movf	_eusartTxTail^(0+128),w
 12620  15F4  3E28               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12621  15F5  0086               	movwf	6
 12622  15F6  3001               	movlw	1	; select bank2/3
 12623  15F7  0087               	movwf	7
 12624  15F8  0801               	movf	1,w
 12625  15F9  0023               	movlb	3	; select bank3
 12626  15FA  009A               	movwf	26	;volatile
 12627  15FB  3001               	movlw	1
 12628  15FC  00F0               	movwf	??_EUSART_Transmit_ISR
 12629  15FD  0870               	movf	??_EUSART_Transmit_ISR,w
 12630  15FE  0021               	movlb	1	; select bank1
 12631  15FF  07BD               	addwf	_eusartTxTail^(0+128),f
 12632                           
 12633                           ;eusart.c: 160: if (sizeof (eusartTxBuffer) <= eusartTxTail) {
 12634  1600  3008               	movlw	8
 12635  1601  023D               	subwf	_eusartTxTail^(0+128),w
 12636  1602  1803               	btfsc	3,0
 12637                           
 12638                           ;eusart.c: 161: eusartTxTail = 0;
 12639  1603  01BD               	clrf	_eusartTxTail^(0+128)
 12640                           
 12641                           ;eusart.c: 162: }
 12642                           ;eusart.c: 163: eusartTxBufferRemaining++;
 12643  1604  3001               	movlw	1
 12644  1605  00F0               	movwf	??_EUSART_Transmit_ISR
 12645  1606  0870               	movf	??_EUSART_Transmit_ISR,w
 12646  1607  07EB               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 12647                           
 12648                           ;eusart.c: 164: } else {
 12649  1608  0008               	return
 12650  1609                     i1l163:	
 12651                           
 12652                           ;eusart.c: 165: PIE1bits.TXIE = 0;
 12653  1609  1211               	bcf	17,4	;volatile
 12654  160A  0008               	return
 12655  160B                     __end_of_EUSART_Transmit_ISR:	
 12656                           
 12657                           	psect	text71
 12658  0D58                     __ptext71:	
 12659 ;; *************** function _EUSART_Receive_ISR *****************
 12660 ;; Defined at:
 12661 ;;		line 169 in file "mcc_generated_files/eusart.c"
 12662 ;; Parameters:    Size  Location     Type
 12663 ;;		None
 12664 ;; Auto vars:     Size  Location     Type
 12665 ;;  rx_tmp          1   13[COMMON] unsigned char 
 12666 ;; Return value:  Size  Location     Type
 12667 ;;                  1    wreg      void 
 12668 ;; Registers used:
 12669 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12670 ;; Tracked objects:
 12671 ;;		On entry : 0/0
 12672 ;;		On exit  : 0/0
 12673 ;;		Unchanged: 0/0
 12674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;Total ram usage:        3 bytes
 12680 ;; Hardware stack levels used:    1
 12681 ;; Hardware stack levels required when called:    1
 12682 ;; This function calls:
 12683 ;;		_RxFrameCheck
 12684 ;; This function is called by:
 12685 ;;		_INTERRUPT_InterruptManager
 12686 ;; This function uses a non-reentrant model
 12687 ;;
 12688                           
 12689                           
 12690                           ;psect for function _EUSART_Receive_ISR
 12691  0D58                     _EUSART_Receive_ISR:	
 12692                           
 12693                           ;eusart.c: 170: unsigned char rx_tmp;
 12694                           ;eusart.c: 171: if (1 == RCSTAbits.OERR) {
 12695                           
 12696                           ;incstack = 0
 12697                           ; Regs used in _EUSART_Receive_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12698  0D58  0023               	movlb	3	; select bank3
 12699  0D59  1C9D               	btfss	29,1	;volatile
 12700  0D5A  2D5D               	goto	i1l4417
 12701                           
 12702                           ;eusart.c: 174: RCSTAbits.CREN = 0;
 12703  0D5B  121D               	bcf	29,4	;volatile
 12704                           
 12705                           ;eusart.c: 175: RCSTAbits.CREN = 1;
 12706  0D5C  161D               	bsf	29,4	;volatile
 12707  0D5D                     i1l4417:	
 12708                           
 12709                           ;eusart.c: 176: }
 12710                           ;eusart.c: 177: rx_tmp = RCREG;
 12711  0D5D  0819               	movf	25,w	;volatile
 12712  0D5E  00FB               	movwf	??_EUSART_Receive_ISR
 12713  0D5F  087B               	movf	??_EUSART_Receive_ISR,w
 12714  0D60  00FD               	movwf	EUSART_Receive_ISR@rx_tmp
 12715                           
 12716                           ;eusart.c: 178: Usart_Rx_Buff[Usart_Rx_Cnt] = rx_tmp ;
 12717  0D61  087D               	movf	EUSART_Receive_ISR@rx_tmp,w
 12718  0D62  00FB               	movwf	??_EUSART_Receive_ISR
 12719  0D63  0021               	movlb	1	; select bank1
 12720  0D64  0838               	movf	_Usart_Rx_Cnt^(0+128),w
 12721  0D65  3E3C               	addlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 12722  0D66  0086               	movwf	6
 12723  0D67  3001               	movlw	1	; select bank2/3
 12724  0D68  0087               	movwf	7
 12725  0D69  087B               	movf	??_EUSART_Receive_ISR,w
 12726  0D6A  0081               	movwf	1
 12727                           
 12728                           ;eusart.c: 179: Usart_Rx_Cnt++;
 12729  0D6B  3001               	movlw	1
 12730  0D6C  00FB               	movwf	??_EUSART_Receive_ISR
 12731  0D6D  087B               	movf	??_EUSART_Receive_ISR,w
 12732  0D6E  07B8               	addwf	_Usart_Rx_Cnt^(0+128),f
 12733                           
 12734                           ;eusart.c: 190: if( Usart_Rx_Cnt == 1)
 12735  0D6F  0338               	decf	_Usart_Rx_Cnt^(0+128),w
 12736  0D70  1D03               	btfss	3,2
 12737  0D71  2D78               	goto	i1l4429
 12738                           
 12739                           ;eusart.c: 191: {
 12740                           ;eusart.c: 192: if( rx_tmp != 0xfe)
 12741  0D72  30FE               	movlw	254
 12742  0D73  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 12743  0D74  1903               	btfsc	3,2
 12744  0D75  0008               	return
 12745                           
 12746                           ;eusart.c: 193: {
 12747                           ;eusart.c: 194: Usart_Rx_Cnt = 0;
 12748  0D76  01B8               	clrf	_Usart_Rx_Cnt^(0+128)
 12749                           
 12750                           ;eusart.c: 195: }
 12751                           ;eusart.c: 196: }
 12752  0D77  0008               	return
 12753  0D78                     i1l4429:	
 12754                           
 12755                           ;eusart.c: 197: else if( Usart_Rx_Cnt == 2)
 12756  0D78  3002               	movlw	2
 12757  0D79  0638               	xorwf	_Usart_Rx_Cnt^(0+128),w
 12758  0D7A  1D03               	btfss	3,2
 12759  0D7B  2D82               	goto	i1l4435
 12760                           
 12761                           ;eusart.c: 198: {
 12762                           ;eusart.c: 199: if( rx_tmp != 0xfe)
 12763  0D7C  30FE               	movlw	254
 12764  0D7D  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 12765  0D7E  1903               	btfsc	3,2
 12766  0D7F  0008               	return
 12767                           
 12768                           ;eusart.c: 200: {
 12769                           ;eusart.c: 201: Usart_Rx_Cnt = 0;
 12770  0D80  01B8               	clrf	_Usart_Rx_Cnt^(0+128)
 12771                           
 12772                           ;eusart.c: 202: }
 12773                           ;eusart.c: 203: }
 12774  0D81  0008               	return
 12775  0D82                     i1l4435:	
 12776                           
 12777                           ;eusart.c: 204: else if( Usart_Rx_Cnt == 4)
 12778  0D82  3004               	movlw	4
 12779  0D83  0638               	xorwf	_Usart_Rx_Cnt^(0+128),w
 12780  0D84  1D03               	btfss	3,2
 12781  0D85  2D8C               	goto	i1l4441
 12782                           
 12783                           ;eusart.c: 205: {
 12784                           ;eusart.c: 206: if( rx_tmp > 7)
 12785  0D86  3008               	movlw	8
 12786  0D87  027D               	subwf	EUSART_Receive_ISR@rx_tmp,w
 12787  0D88  1C03               	skipc
 12788  0D89  0008               	return
 12789                           
 12790                           ;eusart.c: 207: {
 12791                           ;eusart.c: 208: Usart_Rx_Cnt = 0;
 12792  0D8A  01B8               	clrf	_Usart_Rx_Cnt^(0+128)
 12793                           
 12794                           ;eusart.c: 209: }
 12795                           ;eusart.c: 210: }
 12796  0D8B  0008               	return
 12797  0D8C                     i1l4441:	
 12798                           
 12799                           ;eusart.c: 211: else if( Usart_Rx_Cnt > 14)
 12800  0D8C  300F               	movlw	15
 12801  0D8D  0238               	subwf	_Usart_Rx_Cnt^(0+128),w
 12802  0D8E  1C03               	skipc
 12803  0D8F  2D92               	goto	i1l4445
 12804                           
 12805                           ;eusart.c: 212: {
 12806                           ;eusart.c: 213: Usart_Rx_Cnt = 0;
 12807  0D90  01B8               	clrf	_Usart_Rx_Cnt^(0+128)
 12808                           
 12809                           ;eusart.c: 214: }
 12810  0D91  0008               	return
 12811  0D92                     i1l4445:	
 12812                           
 12813                           ;eusart.c: 215: else if( (Usart_Rx_Cnt == (Usart_Rx_Buff[3]+7)) && ( rx_tmp == 0Xbb) )
 12814  0D92  0022               	movlb	2	; select bank2
 12815  0D93  083F               	movf	(_Usart_Rx_Buff^(0+256)+3),w
 12816  0D94  3E07               	addlw	7
 12817  0D95  00FB               	movwf	??_EUSART_Receive_ISR
 12818  0D96  3000               	movlw	0
 12819  0D97  1803               	skipnc
 12820  0D98  3001               	movlw	1
 12821  0D99  00FC               	movwf	??_EUSART_Receive_ISR+1
 12822  0D9A  0021               	movlb	1	; select bank1
 12823  0D9B  0838               	movf	_Usart_Rx_Cnt^(0+128),w
 12824  0D9C  067B               	xorwf	??_EUSART_Receive_ISR,w
 12825  0D9D  047C               	iorwf	??_EUSART_Receive_ISR+1,w
 12826  0D9E  1D03               	skipz
 12827  0D9F  0008               	return
 12828  0DA0  30BB               	movlw	187
 12829  0DA1  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 12830  0DA2  1D03               	btfss	3,2
 12831  0DA3  0008               	return
 12832                           
 12833                           ;eusart.c: 216: {
 12834                           ;eusart.c: 217: if(RxFrameCheck(Usart_Rx_Buff,Usart_Rx_Cnt))
 12835  0DA4  0838               	movf	_Usart_Rx_Cnt^(0+128),w
 12836  0DA5  00FB               	movwf	??_EUSART_Receive_ISR
 12837  0DA6  087B               	movf	??_EUSART_Receive_ISR,w
 12838  0DA7  00F0               	movwf	RxFrameCheck@frame_len
 12839  0DA8  303C               	movlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 12840  0DA9  3186  2658  318D   	fcall	_RxFrameCheck
 12841  0DAC  3A00               	xorlw	0
 12842  0DAD  1D03               	btfss	3,2
 12843  0DAE  2DB4               	goto	i1l4455
 12844  0DAF  2DBD               	goto	i1l4457
 12845  0DB0                     i1l186:	
 12846                           ;eusart.c: 223: case 0X02: Set_time_cmd_flag = 1;
 12847                           
 12848                           ;eusart.c: 222: break;
 12849                           
 12850                           ;eusart.c: 220: {
 12851                           ;eusart.c: 221: case 0x01:
 12852                           
 12853                           ;eusart.c: 218: {
 12854                           ;eusart.c: 219: switch( Usart_Rx_Buff[2] )
 12855                           
 12856  0DB0  0021               	movlb	1	; select bank1
 12857  0DB1  01B7               	clrf	_Set_time_cmd_flag^(0+128)
 12858  0DB2  0AB7               	incf	_Set_time_cmd_flag^(0+128),f
 12859                           
 12860                           ;eusart.c: 226: }
 12861                           
 12862                           ;eusart.c: 225: default:break;
 12863                           
 12864                           ;eusart.c: 224: break;
 12865  0DB3  2DBD               	goto	i1l4457
 12866  0DB4                     i1l4455:	
 12867  0DB4  0022               	movlb	2	; select bank2
 12868  0DB5  083E               	movf	(_Usart_Rx_Buff^(0+256)+2),w
 12869                           
 12870                           ; Switch size 1, requested type "space"
 12871                           ; Number of cases is 2, Range of values is 1 to 2
 12872                           ; switch strategies available:
 12873                           ; Name         Instructions Cycles
 12874                           ; simple_byte            7     4 (average)
 12875                           ; direct_byte           13     9 (fixed)
 12876                           ; jumptable            263     9 (fixed)
 12877                           ;	Chosen strategy is simple_byte
 12878  0DB6  3A01               	xorlw	1	; case 1
 12879  0DB7  1903               	skipnz
 12880  0DB8  2DBD               	goto	i1l4457
 12881  0DB9  3A03               	xorlw	3	; case 2
 12882  0DBA  1903               	skipnz
 12883  0DBB  2DB0               	goto	i1l186
 12884  0DBC  2DBD               	goto	i1l4457
 12885  0DBD                     i1l4457:	
 12886                           
 12887                           ;eusart.c: 227: }
 12888                           ;eusart.c: 228: Usart_Rx_Cnt = 0;
 12889  0DBD  0021               	movlb	1	; select bank1
 12890  0DBE  01B8               	clrf	_Usart_Rx_Cnt^(0+128)
 12891  0DBF  0008               	return
 12892  0DC0                     __end_of_EUSART_Receive_ISR:	
 12893                           
 12894                           	psect	text72
 12895  0658                     __ptext72:	
 12896 ;; *************** function _RxFrameCheck *****************
 12897 ;; Defined at:
 12898 ;;		line 85 in file "mcc_generated_files/com.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;  rx_arr          1    wreg     PTR unsigned char 
 12901 ;;		 -> Usart_Rx_Buff(32), 
 12902 ;;  frame_len       1    0[COMMON] unsigned char 
 12903 ;; Auto vars:     Size  Location     Type
 12904 ;;  rx_arr          1    8[COMMON] PTR unsigned char 
 12905 ;;		 -> Usart_Rx_Buff(32), 
 12906 ;;  remainder       2    9[COMMON] unsigned int 
 12907 ;;  tmp_crc         2    5[COMMON] unsigned int 
 12908 ;;  i               1    7[COMMON] unsigned char 
 12909 ;; Return value:  Size  Location     Type
 12910 ;;                  1    wreg      unsigned char 
 12911 ;; Registers used:
 12912 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12913 ;; Tracked objects:
 12914 ;;		On entry : 0/0
 12915 ;;		On exit  : 0/0
 12916 ;;		Unchanged: 0/0
 12917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12918 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;Total ram usage:       11 bytes
 12923 ;; Hardware stack levels used:    1
 12924 ;; This function calls:
 12925 ;;		Nothing
 12926 ;; This function is called by:
 12927 ;;		_EUSART_Receive_ISR
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931                           
 12932                           ;psect for function _RxFrameCheck
 12933  0658                     _RxFrameCheck:	
 12934                           
 12935                           ;incstack = 0
 12936                           ; Regs used in _RxFrameCheck: [wreg+fsr1l+fsr1h+status,2+status,0]
 12937                           ;RxFrameCheck@rx_arr stored from wreg
 12938  0658  00F8               	movwf	RxFrameCheck@rx_arr
 12939                           
 12940                           ;com.c: 87: unsigned char i = 0;
 12941  0659  01F7               	clrf	RxFrameCheck@i
 12942                           
 12943                           ;com.c: 88: unsigned int remainder = 0;
 12944  065A  01F9               	clrf	RxFrameCheck@remainder
 12945  065B  01FA               	clrf	RxFrameCheck@remainder+1
 12946                           
 12947                           ;com.c: 89: unsigned int tmp_crc = 0;
 12948  065C  01F5               	clrf	RxFrameCheck@tmp_crc
 12949  065D  01F6               	clrf	RxFrameCheck@tmp_crc+1
 12950                           
 12951                           ;com.c: 91: for(i = 2; i < frame_len - 3; i++)
 12952  065E  3002               	movlw	2
 12953  065F  00F1               	movwf	??_RxFrameCheck
 12954  0660  0871               	movf	??_RxFrameCheck,w
 12955  0661  00F7               	movwf	RxFrameCheck@i
 12956  0662                     i1l4307:	
 12957  0662  0870               	movf	RxFrameCheck@frame_len,w
 12958  0663  3EFD               	addlw	253
 12959  0664  00F1               	movwf	??_RxFrameCheck
 12960  0665  30FF               	movlw	255
 12961  0666  1803               	skipnc
 12962  0667  3000               	movlw	0
 12963  0668  00F2               	movwf	??_RxFrameCheck+1
 12964  0669  0872               	movf	??_RxFrameCheck+1,w
 12965  066A  3A80               	xorlw	128
 12966  066B  3C80               	sublw	128
 12967  066C  1D03               	skipz
 12968  066D  2E70               	goto	u339_25
 12969  066E  0871               	movf	??_RxFrameCheck,w
 12970  066F  0277               	subwf	RxFrameCheck@i,w
 12971  0670                     u339_25:	
 12972  0670  1803               	btfsc	3,0
 12973  0671  2ECD               	goto	i1l4309
 12974                           
 12975                           ;com.c: 92: {
 12976                           ;com.c: 93: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 12977  0672  0879               	movf	RxFrameCheck@remainder,w
 12978  0673  00F2               	movwf	??_RxFrameCheck+1
 12979  0674  01F1               	clrf	??_RxFrameCheck
 12980  0675  087A               	movf	RxFrameCheck@remainder+1,w
 12981  0676  00F4               	movwf	??_RxFrameCheck+3
 12982  0677  0879               	movf	RxFrameCheck@remainder,w
 12983  0678  00F3               	movwf	??_RxFrameCheck+2
 12984  0679  0874               	movf	??_RxFrameCheck+3,w
 12985  067A  00F3               	movwf	??_RxFrameCheck+2
 12986  067B  01F4               	clrf	??_RxFrameCheck+3
 12987  067C  0871               	movf	??_RxFrameCheck,w
 12988  067D  0473               	iorwf	??_RxFrameCheck+2,w
 12989  067E  00F9               	movwf	RxFrameCheck@remainder
 12990  067F  0872               	movf	??_RxFrameCheck+1,w
 12991  0680  0474               	iorwf	??_RxFrameCheck+3,w
 12992  0681  00FA               	movwf	RxFrameCheck@remainder+1
 12993                           
 12994                           ;com.c: 94: remainder ^= rx_arr[i];
 12995  0682  0877               	movf	RxFrameCheck@i,w
 12996  0683  0778               	addwf	RxFrameCheck@rx_arr,w
 12997  0684  00F1               	movwf	??_RxFrameCheck
 12998  0685  0871               	movf	??_RxFrameCheck,w
 12999  0686  0086               	movwf	6
 13000  0687  3001               	movlw	1	; select bank2/3
 13001  0688  0087               	movwf	7
 13002  0689  0801               	movf	1,w
 13003  068A  00F2               	movwf	??_RxFrameCheck+1
 13004  068B  01F3               	clrf	??_RxFrameCheck+2
 13005  068C  0872               	movf	??_RxFrameCheck+1,w
 13006  068D  06F9               	xorwf	RxFrameCheck@remainder,f
 13007  068E  0873               	movf	??_RxFrameCheck+2,w
 13008  068F  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13009                           
 13010                           ;com.c: 95: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 13011  0690  087A               	movf	RxFrameCheck@remainder+1,w
 13012  0691  00F2               	movwf	??_RxFrameCheck+1
 13013  0692  0879               	movf	RxFrameCheck@remainder,w
 13014  0693  00F1               	movwf	??_RxFrameCheck
 13015  0694  3004               	movlw	4
 13016  0695                     u338_25:	
 13017  0695  36F2               	lsrf	??_RxFrameCheck+1,f
 13018  0696  0CF1               	rrf	??_RxFrameCheck,f
 13019  0697  0B89               	decfsz	9,f
 13020  0698  2E95               	goto	u338_25
 13021  0699  300F               	movlw	15
 13022  069A  0571               	andwf	??_RxFrameCheck,w
 13023  069B  00F3               	movwf	??_RxFrameCheck+2
 13024  069C  3000               	movlw	0
 13025  069D  0572               	andwf	??_RxFrameCheck+1,w
 13026  069E  00F4               	movwf	??_RxFrameCheck+3
 13027  069F  0873               	movf	??_RxFrameCheck+2,w
 13028  06A0  06F9               	xorwf	RxFrameCheck@remainder,f
 13029  06A1  0874               	movf	??_RxFrameCheck+3,w
 13030  06A2  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13031                           
 13032                           ;com.c: 96: remainder ^= (unsigned int)((remainder << 8) << 4);
 13033  06A3  0879               	movf	RxFrameCheck@remainder,w
 13034  06A4  00F2               	movwf	??_RxFrameCheck+1
 13035  06A5  01F1               	clrf	??_RxFrameCheck
 13036  06A6  0EF1               	swapf	??_RxFrameCheck,f
 13037  06A7  0EF2               	swapf	??_RxFrameCheck+1,f
 13038  06A8  30F0               	movlw	240
 13039  06A9  05F2               	andwf	??_RxFrameCheck+1,f
 13040  06AA  0871               	movf	??_RxFrameCheck,w
 13041  06AB  390F               	andlw	15
 13042  06AC  04F2               	iorwf	??_RxFrameCheck+1,f
 13043  06AD  30F0               	movlw	240
 13044  06AE  05F1               	andwf	??_RxFrameCheck,f
 13045  06AF  0871               	movf	??_RxFrameCheck,w
 13046  06B0  06F9               	xorwf	RxFrameCheck@remainder,f
 13047  06B1  0872               	movf	??_RxFrameCheck+1,w
 13048  06B2  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13049                           
 13050                           ;com.c: 97: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 13051  06B3  30FF               	movlw	255
 13052  06B4  0579               	andwf	RxFrameCheck@remainder,w
 13053  06B5  00F1               	movwf	??_RxFrameCheck
 13054  06B6  3000               	movlw	0
 13055  06B7  057A               	andwf	RxFrameCheck@remainder+1,w
 13056  06B8  00F2               	movwf	??_RxFrameCheck+1
 13057  06B9  0EF1               	swapf	??_RxFrameCheck,f
 13058  06BA  0EF2               	swapf	??_RxFrameCheck+1,f
 13059  06BB  30F0               	movlw	240
 13060  06BC  05F2               	andwf	??_RxFrameCheck+1,f
 13061  06BD  0871               	movf	??_RxFrameCheck,w
 13062  06BE  390F               	andlw	15
 13063  06BF  04F2               	iorwf	??_RxFrameCheck+1,f
 13064  06C0  30F0               	movlw	240
 13065  06C1  05F1               	andwf	??_RxFrameCheck,f
 13066  06C2  35F1               	lslf	??_RxFrameCheck,f
 13067  06C3  0DF2               	rlf	??_RxFrameCheck+1,f
 13068  06C4  0871               	movf	??_RxFrameCheck,w
 13069  06C5  06F9               	xorwf	RxFrameCheck@remainder,f
 13070  06C6  0872               	movf	??_RxFrameCheck+1,w
 13071  06C7  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13072  06C8  3001               	movlw	1
 13073  06C9  00F1               	movwf	??_RxFrameCheck
 13074  06CA  0871               	movf	??_RxFrameCheck,w
 13075  06CB  07F7               	addwf	RxFrameCheck@i,f
 13076  06CC  2E62               	goto	i1l4307
 13077  06CD                     i1l4309:	
 13078                           
 13079                           ;com.c: 98: }
 13080                           ;com.c: 100: tmp_crc = rx_arr[frame_len - 2];
 13081  06CD  0870               	movf	RxFrameCheck@frame_len,w
 13082  06CE  3EFE               	addlw	-2
 13083  06CF  0778               	addwf	RxFrameCheck@rx_arr,w
 13084  06D0  00F1               	movwf	??_RxFrameCheck
 13085  06D1  0871               	movf	??_RxFrameCheck,w
 13086  06D2  0086               	movwf	6
 13087  06D3  3001               	movlw	1	; select bank2/3
 13088  06D4  0087               	movwf	7
 13089  06D5  0801               	movf	1,w
 13090  06D6  00F2               	movwf	??_RxFrameCheck+1
 13091  06D7  01F3               	clrf	??_RxFrameCheck+2
 13092  06D8  0872               	movf	??_RxFrameCheck+1,w
 13093  06D9  00F5               	movwf	RxFrameCheck@tmp_crc
 13094  06DA  0873               	movf	??_RxFrameCheck+2,w
 13095  06DB  00F6               	movwf	RxFrameCheck@tmp_crc+1
 13096                           
 13097                           ;com.c: 101: tmp_crc<<=8;
 13098  06DC  3008               	movlw	8
 13099  06DD                     u340_25:	
 13100  06DD  35F5               	lslf	RxFrameCheck@tmp_crc,f
 13101  06DE  0DF6               	rlf	RxFrameCheck@tmp_crc+1,f
 13102  06DF  0B89               	decfsz	9,f
 13103  06E0  2EDD               	goto	u340_25
 13104                           
 13105                           ;com.c: 102: tmp_crc|=rx_arr[frame_len - 3];
 13106  06E1  0870               	movf	RxFrameCheck@frame_len,w
 13107  06E2  3EFD               	addlw	-3
 13108  06E3  0778               	addwf	RxFrameCheck@rx_arr,w
 13109  06E4  00F1               	movwf	??_RxFrameCheck
 13110  06E5  0871               	movf	??_RxFrameCheck,w
 13111  06E6  0086               	movwf	6
 13112  06E7  3001               	movlw	1	; select bank2/3
 13113  06E8  0087               	movwf	7
 13114  06E9  0801               	movf	1,w
 13115  06EA  00F2               	movwf	??_RxFrameCheck+1
 13116  06EB  01F3               	clrf	??_RxFrameCheck+2
 13117  06EC  0872               	movf	??_RxFrameCheck+1,w
 13118  06ED  04F5               	iorwf	RxFrameCheck@tmp_crc,f
 13119  06EE  0873               	movf	??_RxFrameCheck+2,w
 13120  06EF  04F6               	iorwf	RxFrameCheck@tmp_crc+1,f
 13121                           
 13122                           ;com.c: 108: if(remainder == tmp_crc)
 13123  06F0  0876               	movf	RxFrameCheck@tmp_crc+1,w
 13124  06F1  067A               	xorwf	RxFrameCheck@remainder+1,w
 13125  06F2  1D03               	skipz
 13126  06F3  2EF6               	goto	u341_25
 13127  06F4  0875               	movf	RxFrameCheck@tmp_crc,w
 13128  06F5  0679               	xorwf	RxFrameCheck@remainder,w
 13129  06F6                     u341_25:	
 13130  06F6  1D03               	skipz
 13131  06F7  2EFA               	goto	i1l4321
 13132                           
 13133                           ;com.c: 109: {
 13134                           ;com.c: 110: return 1;
 13135  06F8  3001               	movlw	1
 13136                           
 13137                           ;com.c: 111: }
 13138  06F9  0008               	return
 13139  06FA                     i1l4321:	
 13140                           
 13141                           ;com.c: 112: else
 13142                           ;com.c: 113: {
 13143                           ;com.c: 114: return 0;
 13144  06FA  3000               	movlw	0
 13145  06FB  0008               	return
 13146  06FC                     __end_of_RxFrameCheck:	
 13147  007E                     btemp	set	126	;btemp
 13148  007E                     int$flags	set	126
 13149  007E                     wtemp	set	126
 13150  007E                     wtemp0	set	126
 13151  0080                     wtemp1	set	128
 13152  0082                     wtemp2	set	130
 13153  0084                     wtemp3	set	132
 13154  0086                     wtemp4	set	134
 13155  0088                     wtemp5	set	136
 13156  007F                     wtemp6	set	127
 13157  007E                     ttemp	set	126
 13158  007E                     ttemp0	set	126
 13159  0081                     ttemp1	set	129
 13160  0084                     ttemp2	set	132
 13161  0087                     ttemp3	set	135
 13162  007F                     ttemp4	set	127
 13163  007E                     ltemp	set	126
 13164  007E                     ltemp0	set	126
 13165  0082                     ltemp1	set	130
 13166  0086                     ltemp2	set	134
 13167  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    21
    Data        10
    BSS         200
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      0      77
    BANK2            80      5      75
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 7
		 -> rtc_save_ch2(BANK1[7]), rtc_save_ch1(BANK1[7]), 

    memset@p1	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    memset@p	PTR unsigned char  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    CRC_cal@rx_arr	PTR unsigned char  size(1) Largest target is 16
		 -> Read_time_to_Com@tmp_buf(BANK0[16]), 

    RxFrameCheck@rx_arr	PTR unsigned char  size(1) Largest target is 32
		 -> Usart_Rx_Buff(BANK2[32]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    Bq32k_Rtc_Write_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    Bq32k_Rtc_Read_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    I2C_Send_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Write_Time@temp(BANK0[10]), Bq32k_Time_Init@temp(BANK0[10]), 

    I2C_Read_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Read_Time@temp(BANK0[10]), 

    sp__memset	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    WriteAll_1621@p	PTR unsigned char  size(2) Largest target is 21
		 -> time_Display@num(BANK0[4]), err_Display@num(BANK0[4]), Two_Display@num(BANK0[4]), display_buff(BANK1[4]), 
		 -> Dis_TAB(CODE[21]), 

    maxim_31856_read_nregisters@uch_buff	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(2) Largest target is 64
		 -> Flash_buff(BANK3[64]), Bq32k_Time_Init@temp(BANK0[10]), 

    FLASH_WriteWord@ramBuf	PTR unsigned int  size(2) Largest target is 64
		 -> Flash_buff(BANK3[64]), Bq32k_Time_Init@temp(BANK0[10]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack
    _EUSART_Receive_ISR->_RxFrameCheck

Critical Paths under _main in BANK0

    _main->_Key_Process
    _Save_process->_Calculate_Time
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize
    _temperature_process->_temperature_display
    _time_Display->_Bq32k_Rtc_Read_Time
    _temperature_display->_tc_temperature_trans
    _tc_temperature_trans->_Calculate_Time
    _Calculate_Time->_Save_Write_time
    _Write_Flash_head->_FLASH_WriteWord
    _Write_Flash_finish->_FLASH_WriteWord
    _Save_Write_time->_Save_Write_word
    _Save_Write_word->_FLASH_WriteWord
    _maxim_clear_fault_status->_maxim_31856_read_register
    _err_Display->_WriteAll_1621
    _Tc_Display->___lwdiv
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_31856_read_nregisters
    _maxim_start_conversion->_maxim_31856_read_register
    _maxim_31856_write_register->_SPI_Exchange8bit
    _maxim_31856_read_register->_SPI_Exchange8bit
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _Two_Display->_WriteAll_1621
    _WriteAll_1621->_SendBit_1621
    _WriteAll_1621->_SendDataBit_1621
    _SendCmd_1621->_SendBit_1621
    _Com_Process->_Set_time_from_Com
    _Set_time_from_Com->_Bq32k_Rtc_Write_Time
    _Set_time_from_Com->_Read_time_to_Com
    _Read_time_to_Com->_CRC_cal
    _Bq32k_Rtc_Write_Time->_bin2bcd
    _bin2bcd->___awdiv
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _bcd2bin->___bmul
    _I2C_Read_Buffer->_I2C_Receive_Byte
    _I2C_Read_Buffer->_I2C_Send_Byte
    _Bq32k_Time_Init->_FLASH_WriteWord
    _I2C_Send_Buffer->_I2C_Send_Byte
    _FLASH_WriteWord->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  130316
                                             75 BANK0      3     3      0
                                              0 BANK2      5     5      0
                  _ADC_GetConversion
                    _Bq32k_Time_Init
                        _Com_Process
                        _Key_Process
                  _SYSTEM_Initialize
                       _Save_process
                       _SendCmd_1621
                  _Serach_Flash_Head
                      _WriteAll_1621
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _Serach_Flash_Head                                    6     6      0    3919
                                             28 BANK0      6     6      0
                     _FLASH_ReadWord
                 _Write_Flash_finish
 ---------------------------------------------------------------------------------
 (1) _Save_process                                         4     4      0   20570
                                             56 BANK0      4     4      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Key_Process                                          6     6      0   53495
                                             69 BANK0      6     6      0
                       _EUSART_Write
                     _FLASH_ReadWord
                           _Key_Scan
                    _Save_Write_time
                       _SendCmd_1621
                    _Set_finish_flag
                     _Set_start_flag
                 _Write_Flash_finish
                   _Write_Flash_head
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _temperature_process                                  0     0      0   39531
                        _Two_Display
              _one_temperature_trans
                _temperature_display
                       _time_Display
 ---------------------------------------------------------------------------------
 (2) _time_Display                                         7     7      0    5180
                                             22 BANK0      7     7      0
                _Bq32k_Rtc_Read_Time
                      _WriteAll_1621
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _temperature_display                                  1     1      0   29786
                                             68 BANK0      1     1      0
                         _Tc_Display
                        _err_Display
         _maxim_31856_write_register
           _maxim_clear_fault_status
               _tc_temperature_trans
 ---------------------------------------------------------------------------------
 (3) _tc_temperature_trans                                12    12      0   21349
                                             56 BANK0     12    12      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Calculate_Time                                      22    22      0   15744
                                             34 BANK0     22    22      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_time
                 _Write_Flash_finish
                   _Write_Flash_head
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1368
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_head                                     0     0      0    3212
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_finish                                   0     0      0    3212
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Save_Write_time                                      3     3      0    6238
                                             32 BANK0      2     2      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Save_Write_word                                      4     2      2    4737
                                             28 BANK0      4     2      2
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (3) _maxim_clear_fault_status                             1     1      0    1652
                                              5 BANK0      1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (3) _err_Display                                          5     5      0    1834
                                             11 BANK0      5     5      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _Tc_Display                                           4     4      0    3395
                                             15 BANK0      4     4      0
                      _WriteAll_1621
                            ___lwdiv
                            ___lwmod
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     324
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     540
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     703
                                              7 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _one_temperature_trans                                2     2      0    2700
                                             14 BANK0      2     2      0
        _maxim_31856_read_nregisters
             _maxim_start_conversion
 ---------------------------------------------------------------------------------
 (3) _maxim_start_conversion                               2     2      0    1683
                                              5 BANK0      2     2      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_write_register                           2     1      1    1556
                                              2 BANK0      2     1      1
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_read_register                            3     3      0      96
                                              2 BANK0      3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _maxim_31856_read_nregisters                          5     3      2    1017
                                              9 BANK0      5     3      2
                   _SPI_Exchange8bit
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     739
                                              2 BANK0      7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Two_Display                                          6     6      0    1865
                                             11 BANK0      6     6      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _WriteAll_1621                                        6     3      3    1723
                                              5 BANK0      6     3      3
                       _SendBit_1621
                   _SendDataBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendDataBit_1621                                     4     3      1     256
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Set_start_flag                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_finish_flag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendCmd_1621                                         2     2      0     595
                                              5 BANK0      2     2      0
                       _SendBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendBit_1621                                         4     3      1     564
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Key_Scan                                             3     3      0      40
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Com_Process                                          0     0      0    5747
                  _Set_time_from_Com
 ---------------------------------------------------------------------------------
 (2) _Set_time_from_Com                                    1     1      0    5747
                                             31 BANK0      1     1      0
                _Bq32k_Rtc_Read_Time
               _Bq32k_Rtc_Write_Time
                   _Read_time_to_Com
 ---------------------------------------------------------------------------------
 (3) _Read_time_to_Com                                    20    20      0    1197
                                             11 BANK0     20    20      0
                            _CRC_cal
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _CRC_cal                                             10     8      2     447
                                              1 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Write_Time                                13    13      0    3049
                                             18 BANK0     13    13      0
                    _I2C_Send_Buffer
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (4) _bin2bcd                                              8     8      0    1864
                                             10 BANK0      8     8      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     895
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     907
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Read_Time                                 13    13      0    1501
                                              9 BANK0     13    13      0
                    _I2C_Read_Buffer
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (4) _bcd2bin                                              4     4      0     275
                                              5 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     213
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Buffer                                      5     3      2     599
                                              4 BANK0      5     3      2
                   _I2C_Receive_Byte
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Receive_Byte                                     3     3      0     108
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Bq32k_Time_Init                                     19    19      0    4378
                                             28 BANK0     12    12      0
                     _FLASH_ReadWord
                    _FLASH_WriteWord
                    _I2C_Send_Buffer
 ---------------------------------------------------------------------------------
 (4) _I2C_Send_Buffer                                      7     5      2     676
                                              4 BANK0      7     5      2
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_Byte                                        3     3      0     102
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteWord                                     12     6      6    3212
                                             16 BANK0     12     6      6
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_WriteBlock                                    12     8      4     776
                                              4 BANK0     12     8      4
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (7) _FLASH_EraseBlock                                     3     1      2     173
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _FLASH_ReadWord                                       3     1      2     404
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      31
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0     548
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            1     1      0       0
                                              1 COMMON     1     1      0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  3     3      0     548
                                             11 COMMON     3     3      0
                       _RxFrameCheck
 ---------------------------------------------------------------------------------
 (13) _RxFrameCheck                                       11    10      1     437
                                              0 COMMON    11    10      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _Bq32k_Time_Init
     _FLASH_ReadWord
     _FLASH_WriteWord
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _I2C_Send_Buffer
       _I2C_Send_Byte
       _I2C_Start
       _I2C_Stop
   _Com_Process
     _Set_time_from_Com
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Bq32k_Rtc_Write_Time
         _I2C_Send_Buffer
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bin2bcd
           ___awdiv
           ___awmod
       _Read_time_to_Com
         _CRC_cal
         _EUSART_Write
   _Key_Process
     _EUSART_Write
     _FLASH_ReadWord
     _Key_Scan
     _Save_Write_time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_word
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
     _SendCmd_1621
       _SendBit_1621
     _Set_finish_flag
     _Set_start_flag
     _Write_Flash_finish
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _Write_Flash_head
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _temperature_process
       _Two_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _one_temperature_trans
         _maxim_31856_read_nregisters
           _SPI_Exchange8bit
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
         _maxim_start_conversion
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
       _temperature_display
         _Tc_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
           _memset
         _err_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
         _maxim_31856_write_register
           _SPI_Exchange8bit
         _maxim_clear_fault_status
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
         _tc_temperature_trans
           _Calculate_Time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_time
               _Bq32k_Rtc_Read_Time
                 _I2C_Read_Buffer
                   _I2C_Receive_Byte
                   _I2C_Send_Byte
                   _I2C_Start
                   _I2C_Stop
                 _bcd2bin
                   ___bmul
               _Save_Write_word
                 _FLASH_WriteWord
                   _FLASH_ReadWord
                   _FLASH_WriteBlock
                     _FLASH_EraseBlock
             _Write_Flash_finish
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
             _Write_Flash_head
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
             ___wmul
           _Save_Write_word
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
       _time_Display
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___awdiv
         ___awmod
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR0_Initialize
   _Save_process
     _Calculate_Time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_time
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _Save_Write_word
           _FLASH_WriteWord
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
       _Write_Flash_finish
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
       _Write_Flash_head
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
       ___wmul
     _Save_Write_word
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
   _SendCmd_1621
     _SendBit_1621
   _Serach_Flash_Head
     _FLASH_ReadWord
     _Write_Flash_finish
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
   _WriteAll_1621
     _SendBit_1621
     _SendDataBit_1621
   _temperature_process
     _Two_Display
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
     _one_temperature_trans
       _maxim_31856_read_nregisters
         _SPI_Exchange8bit
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _maxim_start_conversion
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
     _temperature_display
       _Tc_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         _memset
       _err_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _maxim_31856_write_register
         _SPI_Exchange8bit
       _maxim_clear_fault_status
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
       _tc_temperature_trans
         _Calculate_Time
           _Bq32k_Rtc_Read_Time
             _I2C_Read_Buffer
               _I2C_Receive_Byte
               _I2C_Send_Byte
               _I2C_Start
               _I2C_Stop
             _bcd2bin
               ___bmul
           _Save_Write_time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_word
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
           _Write_Flash_finish
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
           _Write_Flash_head
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
           ___wmul
         _Save_Write_word
           _FLASH_WriteWord
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
     _time_Display
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
       ___awdiv
       ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
     _RxFrameCheck
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      5      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     135      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     135      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Jul 20 11:43:38 2016

                        __end_of_I2C_Send_Buffer 09F0                                   _SPI_Initialize 1499  
                     ?_maxim_31856_read_register 0070                                     _Usart_Rx_Cnt 00B8  
  maxim_31856_read_register@uch_register_address 0023                                   ___bmul@product 0023  
                             __size_of_I2C_Start 001D                                      __CFG_CP$OFF 0000  
                              ?_Write_Flash_head 0070                                    _Usart_Rx_Buff 013C  
                                             l71 14CE                                     ___awdiv@sign 0027  
                        ?_SPI_Exchange8bitBuffer 0022                           __end_of_FVR_Initialize 1488  
                            ___wmul@multiplicand 0023                                 ?_Save_Write_time 0070  
                               ?_Save_Write_word 003C                                  _timer0ReloadVal 00EC  
                             ??_Write_Flash_head 003C                             Bq32k_Rtc_Read_Time@p 0035  
                                            l222 0F05                                              l253 1659  
                                            l157 14DA                                              l611 025A  
                                            l603 01C6                                              l445 042E  
                                            l614 0262                                              l606 0225  
                                            l454 0462                                              l447 0430  
                                            l464 04D1                                              l609 022D  
                                            l706 16CF                                              l722 16F0  
                                            l618 0AB8                                              l619 0AB7  
                                            l812 0C4A                                              l708 16D1  
                                            l724 16F2                                              l806 0C45  
                                            l751 08D7                                              l591 0113  
                                            l663 097B                                              l761 0530  
                                            l593 01E8                                              l818 0C6B  
                                            l762 055A                                              l828 0C82  
                                            l941 1748                                              l847 0860  
                                            l961 05CB                                              l946 173E  
                                            l947 1742                                              l972 060F  
                                            l973 0610                                              l965 05E1  
                                            l991 0657                                              l987 0648  
                                            l979 0615                                              _RB1 0069  
                                            _RB3 006B                                              _RB5 006D  
                                            _RA7 0067                                     ?_err_Display 0070  
                                   ___awmod@sign 0027                               _Write_Flash_finish 17D1  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000                                 ?_FLASH_WriteWord 0030  
                         _maxim_start_conversion 16A3                              __end_of_Com_Process 14BC  
                 FLASH_WriteBlock@flashWordArray 0026                                  __end_of_CRC_cal 1000  
                                   __CFG_LVP$OFF 0000                                             l1101 07E5  
                                           l1237 15DB                                             l1097 07B1  
                                           l5025 0872                                             l5107 0F39  
                                           l5043 150B                                             l5109 0F64  
                                           l5213 0B51                                             l5221 0B79  
                                           l5301 0358                                             l6101 07C7  
                                           l6013 0C36                                             l6005 0C25  
                                           l5039 1505                                             l5231 0B81  
                                           l5223 0B7E                                             l5135 092D  
                                           l5311 0407                                             l6031 05D4  
                                           l6015 0C38                                             l5065 0B2D  
                                           l5401 0AAB                                             l5217 0B5F  
                                           l5321 15A2                                             l5059 0B0B  
                                           l5331 0BA3                                             l5171 16E7  
                                           l5243 08BD                                             l5219 0B74  
                                           l6027 05CC                                             l6045 0616  
                                           l6221 04D6                                             l5159 16C6  
                                           l5423 0901                                             l5415 08E3  
                                           l5511 00BF                                             l6039 05EE  
                                           l6207 04A6                                             l6151 0438  
                                           l5337 0BAE                                             l5417 08EF  
                                           l5441 1789                                             l5193 15D5  
                                           l6073 0640                                             l6049 061E  
                                           l6161 0464                                             l5363 0BE5  
                                           l5355 0BD4                                             l5347 0BB6  
                                           l5427 090A                                             l5291 0349  
                                           l5515 00CF                                             l6219 04D3  
                                           l5349 0BC2                                             l5445 1795  
                                           l6069 0639                                             l6157 0451  
                                           l5359 0BDD                                             l5375 0A75  
                                           l5439 177D                                             l5631 04F8  
                                           l5287 0340                                             l5607 0236  
                                           l5519 00E9                                             l6079 064D  
                                           l5393 0A9A                                             l5449 179E  
                                           l5641 058F                                             l5633 0513  
                                           l5537 012D                                             l5387 0A82  
                                           l5379 0A7C                                             l5707 0F8F  
                                           l5723 0AC8                                             l5635 0575  
                                           l5571 019C                                             l5563 0172  
                                           l5539 0136                                             l4933 0EC0  
                                           l5389 0A8E                                             l5397 0AA3  
                                           l5709 0FFA                                             l5645 0599  
                                           l5719 0AC0                                             l5639 0580  
                                           l5567 0182                                             l5911 0956  
                                           l4945 0EF0                                             l5681 09D3  
                                           l5753 0A4D                                             l5745 0A3D  
                                           l5683 09ED                                             l5923 0963  
                                           l5589 01E0                                             l5757 0A55  
                                           l5749 0A45                                             l5925 0966  
                                           l5909 0953                                             l4975 0C4C  
                                           l5937 1730                                             l5929 0969  
                                           l5897 0946                                             l5997 0C13  
                            ?_Write_Flash_finish 0070                                             _LATA 010C  
                                           _LATB 010D                                             _LATC 010E  
                                           u4155 0EAC                                             u5035 00D8  
                                           u6007 0867                                             u5080 014D  
                                           u6017 162D                                             u4345 1533  
                                           u5145 018B                                             u5090 014E  
                                           u6107 0C56                                             u6027 1634  
                                           u6117 0C60                                             u6037 163B  
                                           u5325 17CA                                             u4445 15DC  
                                           u6127 0C70                                             u6047 1642  
                                           u5335 0FC2                                             u4455 15E1  
                                           u5520 0987                                             u6137 0C77  
                                           u6057 1610                                             u5345 0F9D  
                                           u6147 0C89                                             u6067 1617  
                                           u6157 0C90                                             u6077 161E  
                                           u4645 0BB9                                             u6087 1625  
                                           u4815 08E6                                             u6097 0C4F  
                                           u4665 0BC3                                             u4745 0A85  
                                           u4905 178F                                             u4675 0BCD  
                                           u4835 08F0                                             u4915 1796  
                                           u4685 0BD5                                             u4765 0A94  
                                           u4845 08FA                                             u4775 0A9B  
                                           u4855 0902                                             u4970 009A  
                                           u5907 16F6                                             u4980 009B  
                                           u5917 16D5                                             u4885 1780  
                                           u5927 1734                                             u5937 0F4C  
                                           u5947 0F53                                             u5957 0F5A  
                                           u5967 0F73                                             u5977 0F7A  
                                           u5897 0421                                             u5987 0F81  
                                           u5997 0855                                             _TMR0 0015  
                                           _WPUB 020D                                             _WPUE 0210  
                            RxFrameCheck@tmp_crc 0075                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                          __size_of_Set_start_flag 0006  
                         __size_of_WriteAll_1621 0035                                    ??_Key_Process 0065  
                                           _main 0409                                             fsr0h 0005  
                                           fsr1h 0007                                             fsr0l 0004  
                                           indf0 0000                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                               __end_of_I2C_Stop 1645                                ?_FLASH_WriteBlock 0024  
                                  __CFG_BOREN$ON 0000                                             ltemp 007E  
                            SendCmd_1621@command 0026                                             start 0027  
                                           ttemp 007E                                             wtemp 007E  
                                __end_of_Dis_TAB 1815                                ?_Read_time_to_Com 0070  
                         __end_of_SPI_Initialize 149F                               ??_FLASH_WriteBlock 0028  
                               ?_I2C_Read_Buffer 0024                                ___bmul@multiplier 0024  
                                  __CFG_MCLRE$ON 0000                                     main@bat_data 0169  
                             ??_Read_time_to_Com 002B                   __end_of_SPI_Exchange8bitBuffer 0B98  
                                time_Display@num 0039                             ??_Write_Flash_finish 003C  
                        __end_of_TMR0_Initialize 1502                                  ?_FVR_Initialize 0070  
                                  ?_EUSART_Write 0070                   __size_of_OSCILLATOR_Initialize 0005  
                  __end_of_OSCILLATOR_Initialize 0800                                  __end_of_bcd2bin 153C  
                                          ?_main 0070                                  __end_of___awdiv 0BEA  
                                __end_of___awmod 0AB0                                  ___awdiv@divisor 0021  
                                          _LATA0 0860                                            _LATA1 0861  
                                          _LATB0 0868                                            _LATA2 0862  
                                __end_of_bin2bcd 17D1                                            _LATB1 0869  
                                          _LATA3 0863                                            _LATC0 0870  
                                          _LATA4 0864                                            _LATC1 0871  
                                          _LATA5 0865                                            _LATC2 0872  
                                          _LATA6 0866                                  __end_of___lwdiv 090F  
                                          i1l322 0022                                            i1l163 1609  
                                          i1l316 0010                                            i1l318 001A  
                                __end_of___lwmod 17A3                                            i1l186 0DB0  
                                ___awdiv@counter 0026                                            _RCREG 0199  
                                          _RCSTA 019D                                            u441m0 0E36  
                                          u442m0 0E43                                       _Flash_buff 01A0  
                                          u456m0 0339                                            u459m0 0400  
                        ??_one_temperature_trans 002E                                ?_SendDataBit_1621 0021  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                          _TXSTA 019E                                 __end_of_TMR0_ISR 159C  
                             ??_SendDataBit_1621 0022                     __end_of_tc_temperature_trans 026B  
                                          main@i 0168                                __end_of_I2C_Start 1628  
                            _Bq32k_Rtc_Read_Time 0CF4                                  Tc_Display@count 0030  
                              WriteAll_1621@addr 0029                                            ltemp0 007E  
                                          ltemp1 0082                                            ltemp2 0086  
                                          ltemp3 0080                                            ttemp0 007E  
                                          ttemp1 0081                                            ttemp2 0084  
                                          ttemp3 0087                                            ttemp4 007F  
                                          status 0003                                            wtemp0 007E  
                                          wtemp1 0080                                            wtemp2 0082  
                                          wtemp3 0084                                            wtemp4 0086  
                                          wtemp5 0088                                            wtemp6 007F  
                         __size_of_I2C_Send_Byte 0056                                  _Cur_temperature 00AC  
                                     _Tc_Display 04E3                                  ?_SPI_Initialize 0070  
                    __end_of_temperature_display 0A6A                                  __initialization 0029  
                            __end_of_Key_Process 0658                                 ?_I2C_Send_Buffer 0024  
                                   __end_of_main 04E3                            RxFrameCheck@frame_len 0070  
                                 WriteAll_1621@i 002A                                   WriteAll_1621@p 0025  
                               __end_of_Key_Scan 174A                                    main@data_temp 0166  
                                 ??_EUSART_Write 0021                             ?_Bq32k_Rtc_Read_Time 0070  
                    __end_of_temperature_process 097C                                   __CFG_LPBOR$OFF 0000  
   maxim_31856_write_register@uch_register_value 0022                      ?_INTERRUPT_InterruptManager 0070  
                                  _WriteAll_1621 08A5                                           ??_main 006B  
                                    _Com_Process 14B3                                     Key_Process@i 0069  
 maxim_31856_write_register@uch_register_address 0023                                        ??_CRC_cal 0023  
                        __size_of_FLASH_ReadWord 0020                          Bq32k_Rtc_Read_Time@temp 002B  
                              I2C_Receive_Byte@i 0023                                    CRC_cal@rx_arr 0027  
                       __end_of_SPI_Exchange8bit 14D2                            RxFrameCheck@remainder 0079  
                                         _ADCON0 009D                                           _ADCON1 009E  
                      FLASH_WriteBlock@writeAddr 0024                                           _ADRESH 009C  
                                         _ADRESL 009B                                 ___awdiv@dividend 0023  
                                         _APFCON 011D                                           _ANSELA 018C  
                                         _ANSELB 018D                                           _ANSELC 018E  
                                         i1l4321 06FA                                           i1l4307 0662  
                                         i1l4309 06CD                                           i1l4441 0D8C  
                                         i1l4417 0D5D                                           i1l4435 0D82  
                                         i1l4445 0D92                                           i1l4429 0D78  
                                         i1l4455 0DB4                                           i1l4457 0DBD  
                                         _FVRCON 0117                                           u340_25 06DD  
                                         u341_25 06F6                                           _PMADRH 0192  
                                         _PMADRL 0191                                           _PMDATH 0194  
                                         u338_25 0695                                           _PMDATL 0193  
                                         u339_25 0670                                _temperature_value 00A0  
                                         _PMCON2 0196                        __size_of_FLASH_EraseBlock 0020  
                                         _OSCCON 0099                                           _SPBRGH 019C  
                                         _SPBRGL 019B                         _Cur_temperature_time_ch1 00B2  
                       _Cur_temperature_time_ch2 00B3                                           _WDTPS0 04B9  
                                         _WDTPS1 04BA                                           _WDTPS2 04BB  
                                         _WDTPS3 04BC                                           _WDTPS4 04BD  
                                         _TRISB1 0469                                           _TRISB3 046B  
                                         _SSPBUF 0211                                    ?_SendCmd_1621 0070  
                                         _SWDTEN 04B8                     __end_of_Bq32k_Rtc_Write_Time 0CF4  
                                  ?_SendBit_1621 0021                                   __CFG_PWRTE$OFF 0000  
                                _Bq32k_Time_Init 097C                                 SendBit_1621@data 0023  
                                         ___bmul 1502                                        ??_bcd2bin 0025  
                                  RxFrameCheck@i 0077                                           ___wmul 15D2  
                  FLASH_WriteWord@blockStartAddr 0039                                        ??___awdiv 0025  
                                 __CFG_STVREN$ON 0000                                        ??___awmod 0025  
                          ??_Bq32k_Rtc_Read_Time 0029                                        ??_bin2bcd 002A  
                                      ??___lwdiv 002B                                        ??___lwmod 0025  
                            _EUSART_Transmit_ISR 15EE                     ?_maxim_31856_read_nregisters 0029  
                            FLASH_WriteWord@word 0034                                   ?_WriteAll_1621 0025  
                               ?_TMR0_Initialize 0070                                           _memset 159C  
                              ?_I2C_Receive_Byte 0070                                 ___awdiv@quotient 0028  
                                ___awmod@divisor 0021                                           _uch_sr 00C9  
                                ___awmod@counter 0026                                           _rtc_tm 00E0  
                                _Set_finish_flag 1488                                    _I2C_Send_Byte 0C3E  
                             ??_I2C_Receive_Byte 0021                          FLASH_ReadWord@flashAddr 0021  
                                      ?_I2C_Stop 0070                     ??_maxim_31856_write_register 0023  
                          I2C_Read_Buffer@Length 0025                         ADC_GetConversion@channel 0024  
                           __size_of_err_Display 002C                            __end_of_TMR0_CallBack 1493  
                                     bcd2bin@val 0028                       ??_maxim_clear_fault_status 0025  
                           ?_EUSART_Transmit_ISR 0070                                   _Set_start_flag 1493  
                              _SYSTEM_Initialize 0800                                   ??_SendCmd_1621 0025  
                        __end_of__initialization 004D                                   ??_SendBit_1621 0022  
                                    _Key_Process 05B4                               ?_SYSTEM_Initialize 0070  
                               CRC_cal@frame_len 0021                                      ?_Tc_Display 0070  
                             Calculate_Time@temp 004C                              ___bmul@multiplicand 0021  
                                  ?_RxFrameCheck 0070                                time_Display@F2138 0138  
           tc_temperature_trans@temperature_back 005C                                   __pcstackCOMMON 0070  
           tc_temperature_trans@temperature_temp 0062                                     __pidataBANK2 14BC  
                            ??_SYSTEM_Initialize 0022                             _tc_temperature_trans 0051  
                                      ?_TMR0_ISR 0070                      ??_maxim_31856_read_register 0022  
                               FLASH_WriteWord@i 003B              __size_of_maxim_31856_write_register 0010  
                                  ?_Save_process 0070                                   ?_I2C_Send_Byte 0070  
                  ??_maxim_31856_read_nregisters 002B                                 CRC_cal@remainder 0029  
                        ?_maxim_start_conversion 0070                                   _OPTION_REGbits 0095  
                          TMR0_ISR@CountCallBack 00A4                                  _temperature_int 00AE  
                                     ??_I2C_Stop 0021                                    ??_Two_Display 002B  
                    FLASH_WriteBlock@GIEBitValue 002E                                 Two_Display@F2132 0130  
                           I2C_Receive_Byte@Data 0022                           __end_of_Set_start_flag 1499  
                            I2C_Read_Buffer@Flag 0028                        __end_of_SYSTEM_Initialize 0815  
                      __size_of_Write_Flash_head 002F                            ??_EUSART_Transmit_ISR 0070  
                            I2C_Read_Buffer@buff 0024                          __end_of_Bq32k_Time_Init 09B5  
                                     __pbssBANK0 006E                                       __pbssBANK1 00A0  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                                      ?_Key_Scan 0070                             __end_of_EUSART_Write 14E2  
                                __CFG_VCAPEN$OFF 0000                      __size_of_EUSART_Receive_ISR 0068  
                                     bin2bcd@val 0031                                   ??_RxFrameCheck 0071  
                               ??_FVR_Initialize 0021                                       __pmaintext 0409  
                                        ?___bmul 0021                          __end_of_Set_finish_flag 148D  
                          ?_tc_temperature_trans 0070                                      _Record_flag 00B6  
                                ??_WriteAll_1621 0028                                          ?___wmul 0021  
                                     ??_TMR0_ISR 0071                                   ??_Save_process 0058  
                                     __pintentry 0004                                          _BAUDCON 019F  
                                        ?_memset 0021                   __end_of_maxim_start_conversion 16C3  
                      __size_of_FLASH_WriteBlock 0073                          __size_of_ADC_Initialize 0008  
                                 _FLASH_ReadWord 1663                                    _eusartRxCount 00B9  
                                        _CRC_cal 0F86                        __size_of_Read_time_to_Com 0069  
                           _Bq32k_Rtc_Write_Time 0C94                              __size_of_Tc_Display 00D1  
                 __size_of_one_temperature_trans 004A                    __end_of_one_temperature_trans 0AFA  
                                        _OSCSTAT 009A                         __size_of_Save_Write_time 0072  
                                        _SSP1ADD 0212                         __size_of_Save_Write_word 0036  
                      _maxim_31856_read_register 153C                                  ?_Set_start_flag 0070  
           __size_of_maxim_31856_read_nregisters 0018                                       ??_Key_Scan 0021  
                                        _Dis_TAB 1800                                 _FLASH_EraseBlock 1683  
                               ??_SPI_Initialize 0021                         __size_of_FLASH_WriteWord 004D  
                        __size_of_Calculate_Time 019E                              __end_of_Two_Display 08A5  
                      __size_of_SendDataBit_1621 0021                                        _I2C_Start 160B  
maxim_31856_read_nregisters@uch_register_address 002D                                        _CH1_state 00B0  
                                      _CH2_state 00B1                                          _bcd2bin 1527  
                                __size_of___bmul 0012                                    ?_time_Display 0070  
                                        ___awdiv 0B98                                          ___awmod 0A6A  
                                __size_of___wmul 001C                                          _bin2bcd 17A3  
                                        ___lwdiv 08DA                                          ___lwmod 1776  
                                ??_I2C_Send_Byte 0021                      __size_of_Write_Flash_finish 002F  
                              I2C_Send_Byte@Data 0022                           __end_of_FLASH_ReadWord 1683  
                                __size_of_memset 001B                         __size_of_I2C_Read_Buffer 0078  
                                        __ptext1 0BEA                                          __ptext2 0792  
                                        __ptext3 0800                                          __ptext4 14F2  
                                        __ptext5 1499                                          __ptext6 1705  
                                        __ptext7 07FB                                          __ptext8 1484  
                                        __ptext9 15B7                                     ?_Com_Process 0070  
                           __end_of_SendCmd_1621 1569                          Read_time_to_Com@crc_tmp 003C  
                           SendDataBit_1621@data 0023                             __end_of_SendBit_1621 16E4  
                          ?_Bq32k_Rtc_Write_Time 0070               __end_of_maxim_31856_write_register 14F2  
                     _maxim_31856_write_register 14E2                            _OSCILLATOR_Initialize 07FB  
                                 I2C_Send_Byte@i 0023                                 ___awmod@dividend 0023  
                                        _uch_cr0 00C3                                          _uch_cr1 00C4  
                       ??_PIN_MANAGER_Initialize 0021                                          _uch_reg 00CA  
               __end_of_maxim_clear_fault_status 1527                                ?_SPI_Exchange8bit 0070  
                        Read_time_to_Com@tmp_buf 002C                            I2C_Send_Buffer@Length 0025  
                     __size_of_SYSTEM_Initialize 0015                                          clrloop0 14A6  
                           end_of_initialization 004D                               ??_SPI_Exchange8bit 0021  
                           SPI_Exchange8bit@data 0021                                 ?_Bq32k_Time_Init 0070  
                                        init_ram 149F                                          memset@c 0021  
                                        memset@n 0023                                          memset@p 0027  
                                        initloop 14A0                                       ?_I2C_Start 0070  
                              _EUSART_Initialize 15B7                           ??_tc_temperature_trans 0058  
                             ?_EUSART_Initialize 0070                                   ??_time_Display 0036  
                                      _RCSTAbits 019D                                 ?_Set_finish_flag 0070  
                          Serach_Flash_Head@data 003E                                     __pstringtext 1800  
                      FLASH_ReadWord@GIEBitValue 0023                                       _time_count 006E  
                                ?_FLASH_ReadWord 0021                     __size_of_temperature_display 003E  
                            ??_EUSART_Initialize 0021                                     _display_buff 00E7  
                       __size_of_I2C_Send_Buffer 003B                                 __CFG_FOSC$INTOSC 0000  
                   __size_of_temperature_process 0037                             __end_of_RxFrameCheck 06FC  
                          __size_of_EUSART_Write 0010                                      _Two_Display 0874  
                              __size_of_I2C_Stop 001D                                 _Write_Flash_head 0815  
                            Bq32k_Time_Init@temp 003E                             __end_of_Save_process 07FB  
                      __size_of_I2C_Receive_Byte 0030                             Key_Process@gKeyValue 0068  
                      __end_of_EUSART_Initialize 15D2                              Calculate_Time@temp1 0050  
                            Calculate_Time@temp2 0054                         EUSART_Receive_ISR@rx_tmp 007D  
                              ??_Save_Write_time 0040                                     ?_Key_Process 0070  
                              ??_Save_Write_word 003E                         ??_SPI_Exchange8bitBuffer 0024  
                                   ??_Tc_Display 002F                               RxFrameCheck@rx_arr 0078  
                    __end_of_Bq32k_Rtc_Read_Time 0D58                                FLASH_WriteBlock@i 002F  
                              ??_FLASH_WriteWord 0036                     tc_temperature_trans@var_time 0060  
      maxim_start_conversion@uch_conversion_mode 0026                                   __end_of___bmul 1514  
                                 __end_of___wmul 15EE                                     _EUSART_Write 14D2  
                              __size_of_TMR0_ISR 001B                                   _ADC_Initialize 14AB  
                         ??_Bq32k_Rtc_Write_Time 0032                                 _FLASH_WriteBlock 0E9B  
                           Key_Process@data_temp 0066                           ?_OSCILLATOR_Initialize 0070  
                              Read_time_to_Com@i 003E                                   __end_of_memset 15B7  
                                 Tc_Display@data 0031                                 WriteAll_1621@cnt 0027  
                                  ??_err_Display 002B                                 _Read_time_to_Com 0DC0  
                            start_initialization 0029                         __size_of_TMR0_Initialize 0010  
                             __end_of_Tc_Display 05B4                  __size_of_PIN_MANAGER_Initialize 0022  
                              ??_I2C_Read_Buffer 0026                            Bq32k_Rtc_Write_Time@p 003E  
                                 Two_Display@num 002C                                   _Calculate_Time 026B  
                               _SendDataBit_1621 16E4                                      ??_I2C_Start 0021  
                              __size_of_Key_Scan 0023                                 _temperature_sign 00BF  
             __size_of_maxim_31856_read_register 0015                                  SendBit_1621@cnt 0021  
                                       ??___bmul 0022                __size_of_maxim_clear_fault_status 0013  
                      ?_maxim_clear_fault_status 0070                                         ??___wmul 0025  
                          __size_of_SendCmd_1621 0018                            __size_of_SendBit_1621 0021  
                            I2C_Send_Buffer@Flag 002A                           __size_of_TMR0_CallBack 0006  
                         __end_of_ADC_Initialize 14B3                                      __pdataBANK2 015C  
                            I2C_Send_Buffer@buff 0024                                         ??_memset 0025  
                    FLASH_EraseBlock@GIEBitValue 0023                         __end_of_FLASH_EraseBlock 16A3  
                                       ?_CRC_cal 0021                                 ??_Set_start_flag 0021  
                    __end_of_EUSART_Transmit_ISR 160B                             __size_of_Com_Process 0009  
                                       CRC_cal@i 0028                                  _CH1_temperature 00A6  
                                      ___latbits 0003                                    __pcstackBANK0 0020  
                                  __pcstackBANK2 0166                         Bq32k_Rtc_Write_Time@temp 0034  
                           __end_of_time_Display 0792                    SPI_Exchange8bitBuffer@dataOut 0023  
                         __end_of_Calculate_Time 0409                                ??_I2C_Send_Buffer 0026  
                            __end_of_err_Display 1776                       __end_of_EUSART_Receive_ISR 0DC0  
                     __size_of_EUSART_Initialize 001B                               I2C_Read_Buffer@ADD 0027  
                                   _LongPressSec 00B4                                Two_Display@number 0030  
                                   _SendCmd_1621 1551                                     _SendBit_1621 16C3  
                                      __pnvBANK1 00EB                  __size_of_SPI_Exchange8bitBuffer 0051  
                               ___lwdiv@dividend 0029                           _PIN_MANAGER_Initialize 1705  
                                    _MAX31856Sec 00B5                __end_of_maxim_31856_read_register 1551  
                                       ?_bcd2bin 0070                                         ?___awdiv 0021  
                                       ?___awmod 0021              __end_of_maxim_31856_read_nregisters 1581  
                    _maxim_31856_read_nregisters 1569                                         ?_bin2bcd 0070  
                                       ?___lwdiv 0027                                         ?___lwmod 0021  
                                ?_ADC_Initialize 0070                                SendDataBit_1621@i 0024  
                                   _eusartRxHead 00BA                                     _eusartTxHead 00BC  
                          __end_of_WriteAll_1621 08DA                                     _eusartRxTail 00BB  
                                   _eusartTxTail 00BD                     ??_INTERRUPT_InterruptManager 0020  
                          __size_of_RxFrameCheck 00A4                          _eusartTxBufferRemaining 00EB  
                              _Set_time_cmd_flag 00B7                      ?_maxim_31856_write_register 0022  
                                       _I2C_Stop 1628                            __size_of_Save_process 0069  
                                _CH2_temperature 00A8                                 I2C_Send_Buffer@i 0029  
                               __CFG_WDTE$SWDTEN 0000                                 ___lwdiv@quotient 002D  
                                  _TMR0_CallBack 148D                                  ?_Calculate_Time 0070  
                            _temperature_decimal 00BE                            _one_temperature_trans 0AB0  
                              _Set_time_from_Com 09F0                                 _I2C_Receive_Byte 0844  
                            SendDataBit_1621@cnt 0021                         FLASH_WriteWord@flashAddr 0030  
                                 err_Display@num 002C                   FLASH_WriteBlock@blockStartAddr 002C  
                                 _eusartRxBuffer 0120            maxim_31856_read_nregisters@uch_nBytes 002A  
                            _temperature_display 0A2C                                ??_TMR0_Initialize 0021  
                                 _eusartTxBuffer 0128                               ?_Set_time_from_Com 0070  
                                 ___wmul@product 0025                                        clear_ram0 14A5  
                                       _PIE1bits 0091                                        _uch_ltcbh 00C5  
                                      _uch_ltcbl 00C6                                        _uch_ltcbm 00C7  
                           __size_of_Key_Process 00A4              __size_of_INTERRUPT_InterruptManager 0023  
                            _temperature_process 0945                                         _PIR1bits 0011  
                      FLASH_EraseBlock@startAddr 0021                                     _RxFrameCheck 0658  
                            ??_Set_time_from_Com 003F                                 ??_FLASH_ReadWord 0023  
                      __size_of_SPI_Exchange8bit 000C                       __end_of_Write_Flash_finish 1800  
                                       _SSP1CON1 0215                                         _TMR0_ISR 1581  
                       __end_of_Write_Flash_head 0844                                         _SSP1STAT 0214  
                                   _Save_process 0792                             ?_temperature_display 0070  
                          __end_of_I2C_Send_Byte 0C94                                       _ADCON0bits 009D  
                              ___wmul@multiplier 0021                          __size_of_FVR_Initialize 0004  
                         _SPI_Exchange8bitBuffer 0B47                                   _Cur_Save_Index 00AA  
                                    _err_Display 174A                              Save_Write_word@data 003C  
                           ?_temperature_process 0070                                 __size_of_CRC_cal 007A  
                                _Save_Write_time 0E29                                  _Save_Write_word 090F  
                                   ?_Two_Display 0070                        __end_of_Set_time_from_Com 0A2C  
                                 ?_TMR0_CallBack 0070                                  _FLASH_WriteWord 0AFA  
                                       _Key_Scan 1727              maxim_31856_read_nregisters@uch_buff 0029  
                       __end_of_FLASH_WriteBlock 0F0E                                _Serach_Flash_Head 0BEA  
                       __end_of_Read_time_to_Com 0E29                         __size_of_Bq32k_Time_Init 0039  
                             ?_Serach_Flash_Head 0070                                _ADC_GetConversion 1645  
                       ??_maxim_start_conversion 0025                               I2C_Send_Buffer@ADD 0028  
                  __size_of_tc_temperature_trans 021A                          __size_of_SPI_Initialize 0006  
                               __size_of_bcd2bin 0015                          ??_OSCILLATOR_Initialize 0021  
                             Serach_Flash_Head@i 0040                               ?_ADC_GetConversion 0021  
                               __size_of___awdiv 0052                            ??_temperature_display 0064  
                               __size_of___awmod 0046                                  _I2C_Read_Buffer 0F0E  
                               __size_of_bin2bcd 002E                                 __size_of___lwdiv 0035  
                               __size_of___lwmod 002D                              ??_Serach_Flash_Head 003C  
                   SPI_Exchange8bitBuffer@dataIn 0027                     SPI_Exchange8bitBuffer@bufLen 0022  
                               err_Display@F2135 0134                         __end_of_SendDataBit_1621 1705  
                       __size_of_Set_finish_flag 0005                            __size_of_time_Display 0096  
                            ??_ADC_GetConversion 0023                            ??_temperature_process 0065  
                                ___lwdiv@divisor 0027                                  ___lwdiv@counter 002C  
                                       __ptext10 14AB                                         __ptext11 05B4  
                                       __ptext20 0E29                                         __ptext12 0945  
                                       __ptext21 090F                                         __ptext13 06FC  
                                       __ptext30 14E2                                         __ptext22 1514  
                                       __ptext14 0A2C                                         __ptext31 153C  
                                       __ptext23 174A                                         __ptext15 0051  
                                       __ptext40 1551                                         __ptext32 1569  
                                       __ptext24 04E3                                         __ptext16 026B  
                                       __ptext41 16C3                                         __ptext33 0B47  
                                       __ptext25 159C                                         __ptext17 15D2  
                                       __ptext50 0A6A                                         __ptext42 1727  
                                       __ptext34 14C6                                         __ptext26 1776  
                                       __ptext18 0815                                         __ptext51 0B98  
                                       __ptext43 14B3                                         __ptext35 0874  
                                       __ptext27 08DA                                         __ptext19 17D1  
                                       __ptext60 160B                                         __ptext52 0CF4  
                                       __ptext44 09F0                                         __ptext36 08A5  
                                       __ptext28 0AB0                                         __ptext61 0C3E  
                                       __ptext53 1527                                         __ptext45 0DC0  
                                       __ptext37 16E4                                         __ptext29 16A3  
                                       __ptext70 15EE                                         __ptext62 0AFA  
                                       __ptext54 1502                                         __ptext46 14D2  
                                       __ptext38 1493                                         __ptext71 0D58  
                                       __ptext63 0E9B                                         __ptext55 0F0E  
                                       __ptext47 0F86                                         __ptext39 1488  
                                       __ptext72 0658                                         __ptext64 1683  
                                       __ptext56 0844                                         __ptext48 0C94  
                                       __ptext65 1663                                         __ptext57 097C  
                                       __ptext49 17A3                                         __ptext66 1645  
                                       __ptext58 09B5                                         __ptext59 1628  
                                       __ptext68 1581                                         __ptext69 148D  
                         ?_one_temperature_trans 0070                                     _SSP1CON1bits 0215  
                          FLASH_WriteWord@ramBuf 0032                            FLASH_WriteWord@offset 0038  
                      __end_of_Serach_Flash_Head 0C3E                                    __size_of_main 00DA  
     maxim_31856_read_register@uch_register_data 0024                        __end_of_ADC_GetConversion 1663  
                                       _uch_cjth 00C1                                         _uch_cjtl 00C2  
                                       _uch_mask 00C8                             Save_process@var_time 005A  
                                       int$flags 007E                                     _time_Display 06FC  
                                       _tmr_flag 00C0               __end_of_INTERRUPT_InterruptManager 0027  
                     _INTERRUPT_InterruptManager 0004                     __size_of_Bq32k_Rtc_Read_Time 0064  
                                   _SSP1STATbits 0214                          __end_of_Save_Write_time 0E9B  
                        __end_of_Save_Write_word 0945                                  _I2C_Send_Buffer 09B5  
                              ?_FLASH_EraseBlock 0021                    __size_of_Bq32k_Rtc_Write_Time 0060  
                             ??_FLASH_EraseBlock 0023                                       _INTCONbits 000B  
                        __end_of_FLASH_WriteWord 0B47                                  ??_TMR0_CallBack 0070  
                                     _FVRCONbits 0117                                  Key_Scan@Key_val 0023  
                                  SendBit_1621@i 0024                       __size_of_Set_time_from_Com 003C  
                                       memset@p1 0026                                         intlevel1 0000  
                                     _PMCON1bits 0195                                 ___lwmod@dividend 0023  
                        ?_PIN_MANAGER_Initialize 0070                                __CFG_CLKOUTEN$OFF 0000  
             SPI_Exchange8bitBuffer@bytesWritten 0028                                 ??_ADC_Initialize 0021  
                        __end_of_I2C_Read_Buffer 0F86                                 _SPI_Exchange8bit 14C6  
                __size_of_maxim_start_conversion 0020                               _EUSART_Receive_ISR 0D58  
                       __end_of_I2C_Receive_Byte 0874                           Serach_Flash_Head@count 003D  
                              ??_Bq32k_Time_Init 003C                                    ??_Com_Process 0040  
                                 _FVR_Initialize 1484                                     _rtc_save_ch1 00D2  
                                   _rtc_save_ch2 00D9                                       _OPTION_REG 0095  
                            ?_EUSART_Receive_ISR 0070                                 ??_Calculate_Time 0042  
                                ___lwmod@divisor 0021                                  _TMR0_Initialize 14F2  
                                ___lwmod@counter 0026         tc_temperature_trans@temperature_absolute 005E  
                              ??_Set_finish_flag 0021                               EUSART_Write@txData 0021  
                           __size_of_Two_Display 0031                     __size_of_EUSART_Transmit_ISR 001D  
                 __end_of_PIN_MANAGER_Initialize 1727                       __size_of_Serach_Flash_Head 0054  
                           ??_EUSART_Receive_ISR 007B                             Bq32k_Time_Init@F2027 015C  
                     __size_of_ADC_GetConversion 001E                         _maxim_clear_fault_status 1514  
