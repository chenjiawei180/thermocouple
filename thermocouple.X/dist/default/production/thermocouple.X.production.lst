

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Sep 08 09:17:26 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	intentry,global,class=CODE,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	dabs	1,0x7E,2
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  0010                     	;# 
   110  0011                     	;# 
   111  0012                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  0116                     	;# 
   141  0117                     	;# 
   142  011D                     	;# 
   143  018C                     	;# 
   144  018D                     	;# 
   145  018E                     	;# 
   146  0191                     	;# 
   147  0191                     	;# 
   148  0192                     	;# 
   149  0193                     	;# 
   150  0193                     	;# 
   151  0194                     	;# 
   152  0195                     	;# 
   153  0196                     	;# 
   154  0197                     	;# 
   155  0199                     	;# 
   156  019A                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019C                     	;# 
   163  019D                     	;# 
   164  019E                     	;# 
   165  019F                     	;# 
   166  020D                     	;# 
   167  0210                     	;# 
   168  0211                     	;# 
   169  0211                     	;# 
   170  0212                     	;# 
   171  0212                     	;# 
   172  0213                     	;# 
   173  0213                     	;# 
   174  0214                     	;# 
   175  0214                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0216                     	;# 
   180  0216                     	;# 
   181  0217                     	;# 
   182  0217                     	;# 
   183  0291                     	;# 
   184  0291                     	;# 
   185  0292                     	;# 
   186  0293                     	;# 
   187  0298                     	;# 
   188  0298                     	;# 
   189  0299                     	;# 
   190  029A                     	;# 
   191  0394                     	;# 
   192  0395                     	;# 
   193  0396                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEF                     	;# 
   205  0000                     	;# 
   206  0001                     	;# 
   207  0002                     	;# 
   208  0003                     	;# 
   209  0004                     	;# 
   210  0005                     	;# 
   211  0006                     	;# 
   212  0007                     	;# 
   213  0008                     	;# 
   214  0009                     	;# 
   215  000A                     	;# 
   216  000B                     	;# 
   217  000C                     	;# 
   218  000D                     	;# 
   219  000E                     	;# 
   220  0010                     	;# 
   221  0011                     	;# 
   222  0012                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0016                     	;# 
   226  0017                     	;# 
   227  0018                     	;# 
   228  0019                     	;# 
   229  001A                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  008C                     	;# 
   233  008D                     	;# 
   234  008E                     	;# 
   235  0090                     	;# 
   236  0091                     	;# 
   237  0092                     	;# 
   238  0095                     	;# 
   239  0096                     	;# 
   240  0097                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009B                     	;# 
   245  009C                     	;# 
   246  009D                     	;# 
   247  009E                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  011D                     	;# 
   254  018C                     	;# 
   255  018D                     	;# 
   256  018E                     	;# 
   257  0191                     	;# 
   258  0191                     	;# 
   259  0192                     	;# 
   260  0193                     	;# 
   261  0193                     	;# 
   262  0194                     	;# 
   263  0195                     	;# 
   264  0196                     	;# 
   265  0197                     	;# 
   266  0199                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019C                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019F                     	;# 
   277  020D                     	;# 
   278  0210                     	;# 
   279  0211                     	;# 
   280  0211                     	;# 
   281  0212                     	;# 
   282  0212                     	;# 
   283  0213                     	;# 
   284  0213                     	;# 
   285  0214                     	;# 
   286  0214                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0216                     	;# 
   291  0216                     	;# 
   292  0217                     	;# 
   293  0217                     	;# 
   294  0291                     	;# 
   295  0291                     	;# 
   296  0292                     	;# 
   297  0293                     	;# 
   298  0298                     	;# 
   299  0298                     	;# 
   300  0299                     	;# 
   301  029A                     	;# 
   302  0394                     	;# 
   303  0395                     	;# 
   304  0396                     	;# 
   305  0FE4                     	;# 
   306  0FE5                     	;# 
   307  0FE6                     	;# 
   308  0FE7                     	;# 
   309  0FE8                     	;# 
   310  0FE9                     	;# 
   311  0FEA                     	;# 
   312  0FEB                     	;# 
   313  0FED                     	;# 
   314  0FEE                     	;# 
   315  0FEF                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000D                     	;# 
   330  000E                     	;# 
   331  0010                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0015                     	;# 
   335  0016                     	;# 
   336  0016                     	;# 
   337  0017                     	;# 
   338  0018                     	;# 
   339  0019                     	;# 
   340  001A                     	;# 
   341  001B                     	;# 
   342  001C                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  0090                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010E                     	;# 
   362  0116                     	;# 
   363  0117                     	;# 
   364  011D                     	;# 
   365  018C                     	;# 
   366  018D                     	;# 
   367  018E                     	;# 
   368  0191                     	;# 
   369  0191                     	;# 
   370  0192                     	;# 
   371  0193                     	;# 
   372  0193                     	;# 
   373  0194                     	;# 
   374  0195                     	;# 
   375  0196                     	;# 
   376  0197                     	;# 
   377  0199                     	;# 
   378  019A                     	;# 
   379  019B                     	;# 
   380  019B                     	;# 
   381  019B                     	;# 
   382  019B                     	;# 
   383  019C                     	;# 
   384  019C                     	;# 
   385  019D                     	;# 
   386  019E                     	;# 
   387  019F                     	;# 
   388  020D                     	;# 
   389  0210                     	;# 
   390  0211                     	;# 
   391  0211                     	;# 
   392  0212                     	;# 
   393  0212                     	;# 
   394  0213                     	;# 
   395  0213                     	;# 
   396  0214                     	;# 
   397  0214                     	;# 
   398  0215                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0216                     	;# 
   402  0216                     	;# 
   403  0217                     	;# 
   404  0217                     	;# 
   405  0291                     	;# 
   406  0291                     	;# 
   407  0292                     	;# 
   408  0293                     	;# 
   409  0298                     	;# 
   410  0298                     	;# 
   411  0299                     	;# 
   412  029A                     	;# 
   413  0394                     	;# 
   414  0395                     	;# 
   415  0396                     	;# 
   416  0FE4                     	;# 
   417  0FE5                     	;# 
   418  0FE6                     	;# 
   419  0FE7                     	;# 
   420  0FE8                     	;# 
   421  0FE9                     	;# 
   422  0FEA                     	;# 
   423  0FEB                     	;# 
   424  0FED                     	;# 
   425  0FEE                     	;# 
   426  0FEF                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0008                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000D                     	;# 
   441  000E                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0016                     	;# 
   448  0017                     	;# 
   449  0018                     	;# 
   450  0019                     	;# 
   451  001A                     	;# 
   452  001B                     	;# 
   453  001C                     	;# 
   454  008C                     	;# 
   455  008D                     	;# 
   456  008E                     	;# 
   457  0090                     	;# 
   458  0091                     	;# 
   459  0092                     	;# 
   460  0095                     	;# 
   461  0096                     	;# 
   462  0097                     	;# 
   463  0099                     	;# 
   464  009A                     	;# 
   465  009B                     	;# 
   466  009B                     	;# 
   467  009C                     	;# 
   468  009D                     	;# 
   469  009E                     	;# 
   470  010C                     	;# 
   471  010D                     	;# 
   472  010E                     	;# 
   473  0116                     	;# 
   474  0117                     	;# 
   475  011D                     	;# 
   476  018C                     	;# 
   477  018D                     	;# 
   478  018E                     	;# 
   479  0191                     	;# 
   480  0191                     	;# 
   481  0192                     	;# 
   482  0193                     	;# 
   483  0193                     	;# 
   484  0194                     	;# 
   485  0195                     	;# 
   486  0196                     	;# 
   487  0197                     	;# 
   488  0199                     	;# 
   489  019A                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019C                     	;# 
   495  019C                     	;# 
   496  019D                     	;# 
   497  019E                     	;# 
   498  019F                     	;# 
   499  020D                     	;# 
   500  0210                     	;# 
   501  0211                     	;# 
   502  0211                     	;# 
   503  0212                     	;# 
   504  0212                     	;# 
   505  0213                     	;# 
   506  0213                     	;# 
   507  0214                     	;# 
   508  0214                     	;# 
   509  0215                     	;# 
   510  0215                     	;# 
   511  0215                     	;# 
   512  0216                     	;# 
   513  0216                     	;# 
   514  0217                     	;# 
   515  0217                     	;# 
   516  0291                     	;# 
   517  0291                     	;# 
   518  0292                     	;# 
   519  0293                     	;# 
   520  0298                     	;# 
   521  0298                     	;# 
   522  0299                     	;# 
   523  029A                     	;# 
   524  0394                     	;# 
   525  0395                     	;# 
   526  0396                     	;# 
   527  0FE4                     	;# 
   528  0FE5                     	;# 
   529  0FE6                     	;# 
   530  0FE7                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEB                     	;# 
   535  0FED                     	;# 
   536  0FEE                     	;# 
   537  0FEF                     	;# 
   538  0000                     	;# 
   539  0001                     	;# 
   540  0002                     	;# 
   541  0003                     	;# 
   542  0004                     	;# 
   543  0005                     	;# 
   544  0006                     	;# 
   545  0007                     	;# 
   546  0008                     	;# 
   547  0009                     	;# 
   548  000A                     	;# 
   549  000B                     	;# 
   550  000C                     	;# 
   551  000D                     	;# 
   552  000E                     	;# 
   553  0010                     	;# 
   554  0011                     	;# 
   555  0012                     	;# 
   556  0015                     	;# 
   557  0016                     	;# 
   558  0016                     	;# 
   559  0017                     	;# 
   560  0018                     	;# 
   561  0019                     	;# 
   562  001A                     	;# 
   563  001B                     	;# 
   564  001C                     	;# 
   565  008C                     	;# 
   566  008D                     	;# 
   567  008E                     	;# 
   568  0090                     	;# 
   569  0091                     	;# 
   570  0092                     	;# 
   571  0095                     	;# 
   572  0096                     	;# 
   573  0097                     	;# 
   574  0099                     	;# 
   575  009A                     	;# 
   576  009B                     	;# 
   577  009B                     	;# 
   578  009C                     	;# 
   579  009D                     	;# 
   580  009E                     	;# 
   581  010C                     	;# 
   582  010D                     	;# 
   583  010E                     	;# 
   584  0116                     	;# 
   585  0117                     	;# 
   586  011D                     	;# 
   587  018C                     	;# 
   588  018D                     	;# 
   589  018E                     	;# 
   590  0191                     	;# 
   591  0191                     	;# 
   592  0192                     	;# 
   593  0193                     	;# 
   594  0193                     	;# 
   595  0194                     	;# 
   596  0195                     	;# 
   597  0196                     	;# 
   598  0197                     	;# 
   599  0199                     	;# 
   600  019A                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019C                     	;# 
   606  019C                     	;# 
   607  019D                     	;# 
   608  019E                     	;# 
   609  019F                     	;# 
   610  020D                     	;# 
   611  0210                     	;# 
   612  0211                     	;# 
   613  0211                     	;# 
   614  0212                     	;# 
   615  0212                     	;# 
   616  0213                     	;# 
   617  0213                     	;# 
   618  0214                     	;# 
   619  0214                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0215                     	;# 
   623  0216                     	;# 
   624  0216                     	;# 
   625  0217                     	;# 
   626  0217                     	;# 
   627  0291                     	;# 
   628  0291                     	;# 
   629  0292                     	;# 
   630  0293                     	;# 
   631  0298                     	;# 
   632  0298                     	;# 
   633  0299                     	;# 
   634  029A                     	;# 
   635  0394                     	;# 
   636  0395                     	;# 
   637  0396                     	;# 
   638  0FE4                     	;# 
   639  0FE5                     	;# 
   640  0FE6                     	;# 
   641  0FE7                     	;# 
   642  0FE8                     	;# 
   643  0FE9                     	;# 
   644  0FEA                     	;# 
   645  0FEB                     	;# 
   646  0FED                     	;# 
   647  0FEE                     	;# 
   648  0FEF                     	;# 
   649  0000                     	;# 
   650  0001                     	;# 
   651  0002                     	;# 
   652  0003                     	;# 
   653  0004                     	;# 
   654  0005                     	;# 
   655  0006                     	;# 
   656  0007                     	;# 
   657  0008                     	;# 
   658  0009                     	;# 
   659  000A                     	;# 
   660  000B                     	;# 
   661  000C                     	;# 
   662  000D                     	;# 
   663  000E                     	;# 
   664  0010                     	;# 
   665  0011                     	;# 
   666  0012                     	;# 
   667  0015                     	;# 
   668  0016                     	;# 
   669  0016                     	;# 
   670  0017                     	;# 
   671  0018                     	;# 
   672  0019                     	;# 
   673  001A                     	;# 
   674  001B                     	;# 
   675  001C                     	;# 
   676  008C                     	;# 
   677  008D                     	;# 
   678  008E                     	;# 
   679  0090                     	;# 
   680  0091                     	;# 
   681  0092                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0097                     	;# 
   685  0099                     	;# 
   686  009A                     	;# 
   687  009B                     	;# 
   688  009B                     	;# 
   689  009C                     	;# 
   690  009D                     	;# 
   691  009E                     	;# 
   692  010C                     	;# 
   693  010D                     	;# 
   694  010E                     	;# 
   695  0116                     	;# 
   696  0117                     	;# 
   697  011D                     	;# 
   698  018C                     	;# 
   699  018D                     	;# 
   700  018E                     	;# 
   701  0191                     	;# 
   702  0191                     	;# 
   703  0192                     	;# 
   704  0193                     	;# 
   705  0193                     	;# 
   706  0194                     	;# 
   707  0195                     	;# 
   708  0196                     	;# 
   709  0197                     	;# 
   710  0199                     	;# 
   711  019A                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019B                     	;# 
   715  019B                     	;# 
   716  019C                     	;# 
   717  019C                     	;# 
   718  019D                     	;# 
   719  019E                     	;# 
   720  019F                     	;# 
   721  020D                     	;# 
   722  0210                     	;# 
   723  0211                     	;# 
   724  0211                     	;# 
   725  0212                     	;# 
   726  0212                     	;# 
   727  0213                     	;# 
   728  0213                     	;# 
   729  0214                     	;# 
   730  0214                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0215                     	;# 
   734  0216                     	;# 
   735  0216                     	;# 
   736  0217                     	;# 
   737  0217                     	;# 
   738  0291                     	;# 
   739  0291                     	;# 
   740  0292                     	;# 
   741  0293                     	;# 
   742  0298                     	;# 
   743  0298                     	;# 
   744  0299                     	;# 
   745  029A                     	;# 
   746  0394                     	;# 
   747  0395                     	;# 
   748  0396                     	;# 
   749  0FE4                     	;# 
   750  0FE5                     	;# 
   751  0FE6                     	;# 
   752  0FE7                     	;# 
   753  0FE8                     	;# 
   754  0FE9                     	;# 
   755  0FEA                     	;# 
   756  0FEB                     	;# 
   757  0FED                     	;# 
   758  0FEE                     	;# 
   759  0FEF                     	;# 
   760  0000                     	;# 
   761  0001                     	;# 
   762  0002                     	;# 
   763  0003                     	;# 
   764  0004                     	;# 
   765  0005                     	;# 
   766  0006                     	;# 
   767  0007                     	;# 
   768  0008                     	;# 
   769  0009                     	;# 
   770  000A                     	;# 
   771  000B                     	;# 
   772  000C                     	;# 
   773  000D                     	;# 
   774  000E                     	;# 
   775  0010                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0015                     	;# 
   779  0016                     	;# 
   780  0016                     	;# 
   781  0017                     	;# 
   782  0018                     	;# 
   783  0019                     	;# 
   784  001A                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  008C                     	;# 
   788  008D                     	;# 
   789  008E                     	;# 
   790  0090                     	;# 
   791  0091                     	;# 
   792  0092                     	;# 
   793  0095                     	;# 
   794  0096                     	;# 
   795  0097                     	;# 
   796  0099                     	;# 
   797  009A                     	;# 
   798  009B                     	;# 
   799  009B                     	;# 
   800  009C                     	;# 
   801  009D                     	;# 
   802  009E                     	;# 
   803  010C                     	;# 
   804  010D                     	;# 
   805  010E                     	;# 
   806  0116                     	;# 
   807  0117                     	;# 
   808  011D                     	;# 
   809  018C                     	;# 
   810  018D                     	;# 
   811  018E                     	;# 
   812  0191                     	;# 
   813  0191                     	;# 
   814  0192                     	;# 
   815  0193                     	;# 
   816  0193                     	;# 
   817  0194                     	;# 
   818  0195                     	;# 
   819  0196                     	;# 
   820  0197                     	;# 
   821  0199                     	;# 
   822  019A                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019B                     	;# 
   827  019C                     	;# 
   828  019C                     	;# 
   829  019D                     	;# 
   830  019E                     	;# 
   831  019F                     	;# 
   832  020D                     	;# 
   833  0210                     	;# 
   834  0211                     	;# 
   835  0211                     	;# 
   836  0212                     	;# 
   837  0212                     	;# 
   838  0213                     	;# 
   839  0213                     	;# 
   840  0214                     	;# 
   841  0214                     	;# 
   842  0215                     	;# 
   843  0215                     	;# 
   844  0215                     	;# 
   845  0216                     	;# 
   846  0216                     	;# 
   847  0217                     	;# 
   848  0217                     	;# 
   849  0291                     	;# 
   850  0291                     	;# 
   851  0292                     	;# 
   852  0293                     	;# 
   853  0298                     	;# 
   854  0298                     	;# 
   855  0299                     	;# 
   856  029A                     	;# 
   857  0394                     	;# 
   858  0395                     	;# 
   859  0396                     	;# 
   860  0FE4                     	;# 
   861  0FE5                     	;# 
   862  0FE6                     	;# 
   863  0FE7                     	;# 
   864  0FE8                     	;# 
   865  0FE9                     	;# 
   866  0FEA                     	;# 
   867  0FEB                     	;# 
   868  0FED                     	;# 
   869  0FEE                     	;# 
   870  0FEF                     	;# 
   871  0000                     	;# 
   872  0001                     	;# 
   873  0002                     	;# 
   874  0003                     	;# 
   875  0004                     	;# 
   876  0005                     	;# 
   877  0006                     	;# 
   878  0007                     	;# 
   879  0008                     	;# 
   880  0009                     	;# 
   881  000A                     	;# 
   882  000B                     	;# 
   883  000C                     	;# 
   884  000D                     	;# 
   885  000E                     	;# 
   886  0010                     	;# 
   887  0011                     	;# 
   888  0012                     	;# 
   889  0015                     	;# 
   890  0016                     	;# 
   891  0016                     	;# 
   892  0017                     	;# 
   893  0018                     	;# 
   894  0019                     	;# 
   895  001A                     	;# 
   896  001B                     	;# 
   897  001C                     	;# 
   898  008C                     	;# 
   899  008D                     	;# 
   900  008E                     	;# 
   901  0090                     	;# 
   902  0091                     	;# 
   903  0092                     	;# 
   904  0095                     	;# 
   905  0096                     	;# 
   906  0097                     	;# 
   907  0099                     	;# 
   908  009A                     	;# 
   909  009B                     	;# 
   910  009B                     	;# 
   911  009C                     	;# 
   912  009D                     	;# 
   913  009E                     	;# 
   914  010C                     	;# 
   915  010D                     	;# 
   916  010E                     	;# 
   917  0116                     	;# 
   918  0117                     	;# 
   919  011D                     	;# 
   920  018C                     	;# 
   921  018D                     	;# 
   922  018E                     	;# 
   923  0191                     	;# 
   924  0191                     	;# 
   925  0192                     	;# 
   926  0193                     	;# 
   927  0193                     	;# 
   928  0194                     	;# 
   929  0195                     	;# 
   930  0196                     	;# 
   931  0197                     	;# 
   932  0199                     	;# 
   933  019A                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019C                     	;# 
   939  019C                     	;# 
   940  019D                     	;# 
   941  019E                     	;# 
   942  019F                     	;# 
   943  020D                     	;# 
   944  0210                     	;# 
   945  0211                     	;# 
   946  0211                     	;# 
   947  0212                     	;# 
   948  0212                     	;# 
   949  0213                     	;# 
   950  0213                     	;# 
   951  0214                     	;# 
   952  0214                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0215                     	;# 
   956  0216                     	;# 
   957  0216                     	;# 
   958  0217                     	;# 
   959  0217                     	;# 
   960  0291                     	;# 
   961  0291                     	;# 
   962  0292                     	;# 
   963  0293                     	;# 
   964  0298                     	;# 
   965  0298                     	;# 
   966  0299                     	;# 
   967  029A                     	;# 
   968  0394                     	;# 
   969  0395                     	;# 
   970  0396                     	;# 
   971  0FE4                     	;# 
   972  0FE5                     	;# 
   973  0FE6                     	;# 
   974  0FE7                     	;# 
   975  0FE8                     	;# 
   976  0FE9                     	;# 
   977  0FEA                     	;# 
   978  0FEB                     	;# 
   979  0FED                     	;# 
   980  0FEE                     	;# 
   981  0FEF                     	;# 
   982  0000                     	;# 
   983  0001                     	;# 
   984  0002                     	;# 
   985  0003                     	;# 
   986  0004                     	;# 
   987  0005                     	;# 
   988  0006                     	;# 
   989  0007                     	;# 
   990  0008                     	;# 
   991  0009                     	;# 
   992  000A                     	;# 
   993  000B                     	;# 
   994  000C                     	;# 
   995  000D                     	;# 
   996  000E                     	;# 
   997  0010                     	;# 
   998  0011                     	;# 
   999  0012                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0016                     	;# 
  1003  0017                     	;# 
  1004  0018                     	;# 
  1005  0019                     	;# 
  1006  001A                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  008C                     	;# 
  1010  008D                     	;# 
  1011  008E                     	;# 
  1012  0090                     	;# 
  1013  0091                     	;# 
  1014  0092                     	;# 
  1015  0095                     	;# 
  1016  0096                     	;# 
  1017  0097                     	;# 
  1018  0099                     	;# 
  1019  009A                     	;# 
  1020  009B                     	;# 
  1021  009B                     	;# 
  1022  009C                     	;# 
  1023  009D                     	;# 
  1024  009E                     	;# 
  1025  010C                     	;# 
  1026  010D                     	;# 
  1027  010E                     	;# 
  1028  0116                     	;# 
  1029  0117                     	;# 
  1030  011D                     	;# 
  1031  018C                     	;# 
  1032  018D                     	;# 
  1033  018E                     	;# 
  1034  0191                     	;# 
  1035  0191                     	;# 
  1036  0192                     	;# 
  1037  0193                     	;# 
  1038  0193                     	;# 
  1039  0194                     	;# 
  1040  0195                     	;# 
  1041  0196                     	;# 
  1042  0197                     	;# 
  1043  0199                     	;# 
  1044  019A                     	;# 
  1045  019B                     	;# 
  1046  019B                     	;# 
  1047  019B                     	;# 
  1048  019B                     	;# 
  1049  019C                     	;# 
  1050  019C                     	;# 
  1051  019D                     	;# 
  1052  019E                     	;# 
  1053  019F                     	;# 
  1054  020D                     	;# 
  1055  0210                     	;# 
  1056  0211                     	;# 
  1057  0211                     	;# 
  1058  0212                     	;# 
  1059  0212                     	;# 
  1060  0213                     	;# 
  1061  0213                     	;# 
  1062  0214                     	;# 
  1063  0214                     	;# 
  1064  0215                     	;# 
  1065  0215                     	;# 
  1066  0215                     	;# 
  1067  0216                     	;# 
  1068  0216                     	;# 
  1069  0217                     	;# 
  1070  0217                     	;# 
  1071  0291                     	;# 
  1072  0291                     	;# 
  1073  0292                     	;# 
  1074  0293                     	;# 
  1075  0298                     	;# 
  1076  0298                     	;# 
  1077  0299                     	;# 
  1078  029A                     	;# 
  1079  0394                     	;# 
  1080  0395                     	;# 
  1081  0396                     	;# 
  1082  0FE4                     	;# 
  1083  0FE5                     	;# 
  1084  0FE6                     	;# 
  1085  0FE7                     	;# 
  1086  0FE8                     	;# 
  1087  0FE9                     	;# 
  1088  0FEA                     	;# 
  1089  0FEB                     	;# 
  1090  0FED                     	;# 
  1091  0FEE                     	;# 
  1092  0FEF                     	;# 
  1093  0000                     	;# 
  1094  0001                     	;# 
  1095  0002                     	;# 
  1096  0003                     	;# 
  1097  0004                     	;# 
  1098  0005                     	;# 
  1099  0006                     	;# 
  1100  0007                     	;# 
  1101  0008                     	;# 
  1102  0009                     	;# 
  1103  000A                     	;# 
  1104  000B                     	;# 
  1105  000C                     	;# 
  1106  000D                     	;# 
  1107  000E                     	;# 
  1108  0010                     	;# 
  1109  0011                     	;# 
  1110  0012                     	;# 
  1111  0015                     	;# 
  1112  0016                     	;# 
  1113  0016                     	;# 
  1114  0017                     	;# 
  1115  0018                     	;# 
  1116  0019                     	;# 
  1117  001A                     	;# 
  1118  001B                     	;# 
  1119  001C                     	;# 
  1120  008C                     	;# 
  1121  008D                     	;# 
  1122  008E                     	;# 
  1123  0090                     	;# 
  1124  0091                     	;# 
  1125  0092                     	;# 
  1126  0095                     	;# 
  1127  0096                     	;# 
  1128  0097                     	;# 
  1129  0099                     	;# 
  1130  009A                     	;# 
  1131  009B                     	;# 
  1132  009B                     	;# 
  1133  009C                     	;# 
  1134  009D                     	;# 
  1135  009E                     	;# 
  1136  010C                     	;# 
  1137  010D                     	;# 
  1138  010E                     	;# 
  1139  0116                     	;# 
  1140  0117                     	;# 
  1141  011D                     	;# 
  1142  018C                     	;# 
  1143  018D                     	;# 
  1144  018E                     	;# 
  1145  0191                     	;# 
  1146  0191                     	;# 
  1147  0192                     	;# 
  1148  0193                     	;# 
  1149  0193                     	;# 
  1150  0194                     	;# 
  1151  0195                     	;# 
  1152  0196                     	;# 
  1153  0197                     	;# 
  1154  0199                     	;# 
  1155  019A                     	;# 
  1156  019B                     	;# 
  1157  019B                     	;# 
  1158  019B                     	;# 
  1159  019B                     	;# 
  1160  019C                     	;# 
  1161  019C                     	;# 
  1162  019D                     	;# 
  1163  019E                     	;# 
  1164  019F                     	;# 
  1165  020D                     	;# 
  1166  0210                     	;# 
  1167  0211                     	;# 
  1168  0211                     	;# 
  1169  0212                     	;# 
  1170  0212                     	;# 
  1171  0213                     	;# 
  1172  0213                     	;# 
  1173  0214                     	;# 
  1174  0214                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0215                     	;# 
  1178  0216                     	;# 
  1179  0216                     	;# 
  1180  0217                     	;# 
  1181  0217                     	;# 
  1182  0291                     	;# 
  1183  0291                     	;# 
  1184  0292                     	;# 
  1185  0293                     	;# 
  1186  0298                     	;# 
  1187  0298                     	;# 
  1188  0299                     	;# 
  1189  029A                     	;# 
  1190  0394                     	;# 
  1191  0395                     	;# 
  1192  0396                     	;# 
  1193  0FE4                     	;# 
  1194  0FE5                     	;# 
  1195  0FE6                     	;# 
  1196  0FE7                     	;# 
  1197  0FE8                     	;# 
  1198  0FE9                     	;# 
  1199  0FEA                     	;# 
  1200  0FEB                     	;# 
  1201  0FED                     	;# 
  1202  0FEE                     	;# 
  1203  0FEF                     	;# 
  1204  0000                     	;# 
  1205  0001                     	;# 
  1206  0002                     	;# 
  1207  0003                     	;# 
  1208  0004                     	;# 
  1209  0005                     	;# 
  1210  0006                     	;# 
  1211  0007                     	;# 
  1212  0008                     	;# 
  1213  0009                     	;# 
  1214  000A                     	;# 
  1215  000B                     	;# 
  1216  000C                     	;# 
  1217  000D                     	;# 
  1218  000E                     	;# 
  1219  0010                     	;# 
  1220  0011                     	;# 
  1221  0012                     	;# 
  1222  0015                     	;# 
  1223  0016                     	;# 
  1224  0016                     	;# 
  1225  0017                     	;# 
  1226  0018                     	;# 
  1227  0019                     	;# 
  1228  001A                     	;# 
  1229  001B                     	;# 
  1230  001C                     	;# 
  1231  008C                     	;# 
  1232  008D                     	;# 
  1233  008E                     	;# 
  1234  0090                     	;# 
  1235  0091                     	;# 
  1236  0092                     	;# 
  1237  0095                     	;# 
  1238  0096                     	;# 
  1239  0097                     	;# 
  1240  0099                     	;# 
  1241  009A                     	;# 
  1242  009B                     	;# 
  1243  009B                     	;# 
  1244  009C                     	;# 
  1245  009D                     	;# 
  1246  009E                     	;# 
  1247  010C                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  0116                     	;# 
  1251  0117                     	;# 
  1252  011D                     	;# 
  1253  018C                     	;# 
  1254  018D                     	;# 
  1255  018E                     	;# 
  1256  0191                     	;# 
  1257  0191                     	;# 
  1258  0192                     	;# 
  1259  0193                     	;# 
  1260  0193                     	;# 
  1261  0194                     	;# 
  1262  0195                     	;# 
  1263  0196                     	;# 
  1264  0197                     	;# 
  1265  0199                     	;# 
  1266  019A                     	;# 
  1267  019B                     	;# 
  1268  019B                     	;# 
  1269  019B                     	;# 
  1270  019B                     	;# 
  1271  019C                     	;# 
  1272  019C                     	;# 
  1273  019D                     	;# 
  1274  019E                     	;# 
  1275  019F                     	;# 
  1276  020D                     	;# 
  1277  0210                     	;# 
  1278  0211                     	;# 
  1279  0211                     	;# 
  1280  0212                     	;# 
  1281  0212                     	;# 
  1282  0213                     	;# 
  1283  0213                     	;# 
  1284  0214                     	;# 
  1285  0214                     	;# 
  1286  0215                     	;# 
  1287  0215                     	;# 
  1288  0215                     	;# 
  1289  0216                     	;# 
  1290  0216                     	;# 
  1291  0217                     	;# 
  1292  0217                     	;# 
  1293  0291                     	;# 
  1294  0291                     	;# 
  1295  0292                     	;# 
  1296  0293                     	;# 
  1297  0298                     	;# 
  1298  0298                     	;# 
  1299  0299                     	;# 
  1300  029A                     	;# 
  1301  0394                     	;# 
  1302  0395                     	;# 
  1303  0396                     	;# 
  1304  0FE4                     	;# 
  1305  0FE5                     	;# 
  1306  0FE6                     	;# 
  1307  0FE7                     	;# 
  1308  0FE8                     	;# 
  1309  0FE9                     	;# 
  1310  0FEA                     	;# 
  1311  0FEB                     	;# 
  1312  0FED                     	;# 
  1313  0FEE                     	;# 
  1314  0FEF                     	;# 
  1315  0000                     	;# 
  1316  0001                     	;# 
  1317  0002                     	;# 
  1318  0003                     	;# 
  1319  0004                     	;# 
  1320  0005                     	;# 
  1321  0006                     	;# 
  1322  0007                     	;# 
  1323  0008                     	;# 
  1324  0009                     	;# 
  1325  000A                     	;# 
  1326  000B                     	;# 
  1327  000C                     	;# 
  1328  000D                     	;# 
  1329  000E                     	;# 
  1330  0010                     	;# 
  1331  0011                     	;# 
  1332  0012                     	;# 
  1333  0015                     	;# 
  1334  0016                     	;# 
  1335  0016                     	;# 
  1336  0017                     	;# 
  1337  0018                     	;# 
  1338  0019                     	;# 
  1339  001A                     	;# 
  1340  001B                     	;# 
  1341  001C                     	;# 
  1342  008C                     	;# 
  1343  008D                     	;# 
  1344  008E                     	;# 
  1345  0090                     	;# 
  1346  0091                     	;# 
  1347  0092                     	;# 
  1348  0095                     	;# 
  1349  0096                     	;# 
  1350  0097                     	;# 
  1351  0099                     	;# 
  1352  009A                     	;# 
  1353  009B                     	;# 
  1354  009B                     	;# 
  1355  009C                     	;# 
  1356  009D                     	;# 
  1357  009E                     	;# 
  1358  010C                     	;# 
  1359  010D                     	;# 
  1360  010E                     	;# 
  1361  0116                     	;# 
  1362  0117                     	;# 
  1363  011D                     	;# 
  1364  018C                     	;# 
  1365  018D                     	;# 
  1366  018E                     	;# 
  1367  0191                     	;# 
  1368  0191                     	;# 
  1369  0192                     	;# 
  1370  0193                     	;# 
  1371  0193                     	;# 
  1372  0194                     	;# 
  1373  0195                     	;# 
  1374  0196                     	;# 
  1375  0197                     	;# 
  1376  0199                     	;# 
  1377  019A                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019B                     	;# 
  1382  019C                     	;# 
  1383  019C                     	;# 
  1384  019D                     	;# 
  1385  019E                     	;# 
  1386  019F                     	;# 
  1387  020D                     	;# 
  1388  0210                     	;# 
  1389  0211                     	;# 
  1390  0211                     	;# 
  1391  0212                     	;# 
  1392  0212                     	;# 
  1393  0213                     	;# 
  1394  0213                     	;# 
  1395  0214                     	;# 
  1396  0214                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0216                     	;# 
  1401  0216                     	;# 
  1402  0217                     	;# 
  1403  0217                     	;# 
  1404  0291                     	;# 
  1405  0291                     	;# 
  1406  0292                     	;# 
  1407  0293                     	;# 
  1408  0298                     	;# 
  1409  0298                     	;# 
  1410  0299                     	;# 
  1411  029A                     	;# 
  1412  0394                     	;# 
  1413  0395                     	;# 
  1414  0396                     	;# 
  1415  0FE4                     	;# 
  1416  0FE5                     	;# 
  1417  0FE6                     	;# 
  1418  0FE7                     	;# 
  1419  0FE8                     	;# 
  1420  0FE9                     	;# 
  1421  0FEA                     	;# 
  1422  0FEB                     	;# 
  1423  0FED                     	;# 
  1424  0FEE                     	;# 
  1425  0FEF                     	;# 
  1426  0000                     	;# 
  1427  0001                     	;# 
  1428  0002                     	;# 
  1429  0003                     	;# 
  1430  0004                     	;# 
  1431  0005                     	;# 
  1432  0006                     	;# 
  1433  0007                     	;# 
  1434  0008                     	;# 
  1435  0009                     	;# 
  1436  000A                     	;# 
  1437  000B                     	;# 
  1438  000C                     	;# 
  1439  000D                     	;# 
  1440  000E                     	;# 
  1441  0010                     	;# 
  1442  0011                     	;# 
  1443  0012                     	;# 
  1444  0015                     	;# 
  1445  0016                     	;# 
  1446  0016                     	;# 
  1447  0017                     	;# 
  1448  0018                     	;# 
  1449  0019                     	;# 
  1450  001A                     	;# 
  1451  001B                     	;# 
  1452  001C                     	;# 
  1453  008C                     	;# 
  1454  008D                     	;# 
  1455  008E                     	;# 
  1456  0090                     	;# 
  1457  0091                     	;# 
  1458  0092                     	;# 
  1459  0095                     	;# 
  1460  0096                     	;# 
  1461  0097                     	;# 
  1462  0099                     	;# 
  1463  009A                     	;# 
  1464  009B                     	;# 
  1465  009B                     	;# 
  1466  009C                     	;# 
  1467  009D                     	;# 
  1468  009E                     	;# 
  1469  010C                     	;# 
  1470  010D                     	;# 
  1471  010E                     	;# 
  1472  0116                     	;# 
  1473  0117                     	;# 
  1474  011D                     	;# 
  1475  018C                     	;# 
  1476  018D                     	;# 
  1477  018E                     	;# 
  1478  0191                     	;# 
  1479  0191                     	;# 
  1480  0192                     	;# 
  1481  0193                     	;# 
  1482  0193                     	;# 
  1483  0194                     	;# 
  1484  0195                     	;# 
  1485  0196                     	;# 
  1486  0197                     	;# 
  1487  0199                     	;# 
  1488  019A                     	;# 
  1489  019B                     	;# 
  1490  019B                     	;# 
  1491  019B                     	;# 
  1492  019B                     	;# 
  1493  019C                     	;# 
  1494  019C                     	;# 
  1495  019D                     	;# 
  1496  019E                     	;# 
  1497  019F                     	;# 
  1498  020D                     	;# 
  1499  0210                     	;# 
  1500  0211                     	;# 
  1501  0211                     	;# 
  1502  0212                     	;# 
  1503  0212                     	;# 
  1504  0213                     	;# 
  1505  0213                     	;# 
  1506  0214                     	;# 
  1507  0214                     	;# 
  1508  0215                     	;# 
  1509  0215                     	;# 
  1510  0215                     	;# 
  1511  0216                     	;# 
  1512  0216                     	;# 
  1513  0217                     	;# 
  1514  0217                     	;# 
  1515  0291                     	;# 
  1516  0291                     	;# 
  1517  0292                     	;# 
  1518  0293                     	;# 
  1519  0298                     	;# 
  1520  0298                     	;# 
  1521  0299                     	;# 
  1522  029A                     	;# 
  1523  0394                     	;# 
  1524  0395                     	;# 
  1525  0396                     	;# 
  1526  0FE4                     	;# 
  1527  0FE5                     	;# 
  1528  0FE6                     	;# 
  1529  0FE7                     	;# 
  1530  0FE8                     	;# 
  1531  0FE9                     	;# 
  1532  0FEA                     	;# 
  1533  0FEB                     	;# 
  1534  0FED                     	;# 
  1535  0FEE                     	;# 
  1536  0FEF                     	;# 
  1537  0000                     	;# 
  1538  0001                     	;# 
  1539  0002                     	;# 
  1540  0003                     	;# 
  1541  0004                     	;# 
  1542  0005                     	;# 
  1543  0006                     	;# 
  1544  0007                     	;# 
  1545  0008                     	;# 
  1546  0009                     	;# 
  1547  000A                     	;# 
  1548  000B                     	;# 
  1549  000C                     	;# 
  1550  000D                     	;# 
  1551  000E                     	;# 
  1552  0010                     	;# 
  1553  0011                     	;# 
  1554  0012                     	;# 
  1555  0015                     	;# 
  1556  0016                     	;# 
  1557  0016                     	;# 
  1558  0017                     	;# 
  1559  0018                     	;# 
  1560  0019                     	;# 
  1561  001A                     	;# 
  1562  001B                     	;# 
  1563  001C                     	;# 
  1564  008C                     	;# 
  1565  008D                     	;# 
  1566  008E                     	;# 
  1567  0090                     	;# 
  1568  0091                     	;# 
  1569  0092                     	;# 
  1570  0095                     	;# 
  1571  0096                     	;# 
  1572  0097                     	;# 
  1573  0099                     	;# 
  1574  009A                     	;# 
  1575  009B                     	;# 
  1576  009B                     	;# 
  1577  009C                     	;# 
  1578  009D                     	;# 
  1579  009E                     	;# 
  1580  010C                     	;# 
  1581  010D                     	;# 
  1582  010E                     	;# 
  1583  0116                     	;# 
  1584  0117                     	;# 
  1585  011D                     	;# 
  1586  018C                     	;# 
  1587  018D                     	;# 
  1588  018E                     	;# 
  1589  0191                     	;# 
  1590  0191                     	;# 
  1591  0192                     	;# 
  1592  0193                     	;# 
  1593  0193                     	;# 
  1594  0194                     	;# 
  1595  0195                     	;# 
  1596  0196                     	;# 
  1597  0197                     	;# 
  1598  0199                     	;# 
  1599  019A                     	;# 
  1600  019B                     	;# 
  1601  019B                     	;# 
  1602  019B                     	;# 
  1603  019B                     	;# 
  1604  019C                     	;# 
  1605  019C                     	;# 
  1606  019D                     	;# 
  1607  019E                     	;# 
  1608  019F                     	;# 
  1609  020D                     	;# 
  1610  0210                     	;# 
  1611  0211                     	;# 
  1612  0211                     	;# 
  1613  0212                     	;# 
  1614  0212                     	;# 
  1615  0213                     	;# 
  1616  0213                     	;# 
  1617  0214                     	;# 
  1618  0214                     	;# 
  1619  0215                     	;# 
  1620  0215                     	;# 
  1621  0215                     	;# 
  1622  0216                     	;# 
  1623  0216                     	;# 
  1624  0217                     	;# 
  1625  0217                     	;# 
  1626  0291                     	;# 
  1627  0291                     	;# 
  1628  0292                     	;# 
  1629  0293                     	;# 
  1630  0298                     	;# 
  1631  0298                     	;# 
  1632  0299                     	;# 
  1633  029A                     	;# 
  1634  0394                     	;# 
  1635  0395                     	;# 
  1636  0396                     	;# 
  1637  0FE4                     	;# 
  1638  0FE5                     	;# 
  1639  0FE6                     	;# 
  1640  0FE7                     	;# 
  1641  0FE8                     	;# 
  1642  0FE9                     	;# 
  1643  0FEA                     	;# 
  1644  0FEB                     	;# 
  1645  0FED                     	;# 
  1646  0FEE                     	;# 
  1647  0FEF                     	;# 
  1648  0000                     	;# 
  1649  0001                     	;# 
  1650  0002                     	;# 
  1651  0003                     	;# 
  1652  0004                     	;# 
  1653  0005                     	;# 
  1654  0006                     	;# 
  1655  0007                     	;# 
  1656  0008                     	;# 
  1657  0009                     	;# 
  1658  000A                     	;# 
  1659  000B                     	;# 
  1660  000C                     	;# 
  1661  000D                     	;# 
  1662  000E                     	;# 
  1663  0010                     	;# 
  1664  0011                     	;# 
  1665  0012                     	;# 
  1666  0015                     	;# 
  1667  0016                     	;# 
  1668  0016                     	;# 
  1669  0017                     	;# 
  1670  0018                     	;# 
  1671  0019                     	;# 
  1672  001A                     	;# 
  1673  001B                     	;# 
  1674  001C                     	;# 
  1675  008C                     	;# 
  1676  008D                     	;# 
  1677  008E                     	;# 
  1678  0090                     	;# 
  1679  0091                     	;# 
  1680  0092                     	;# 
  1681  0095                     	;# 
  1682  0096                     	;# 
  1683  0097                     	;# 
  1684  0099                     	;# 
  1685  009A                     	;# 
  1686  009B                     	;# 
  1687  009B                     	;# 
  1688  009C                     	;# 
  1689  009D                     	;# 
  1690  009E                     	;# 
  1691  010C                     	;# 
  1692  010D                     	;# 
  1693  010E                     	;# 
  1694  0116                     	;# 
  1695  0117                     	;# 
  1696  011D                     	;# 
  1697  018C                     	;# 
  1698  018D                     	;# 
  1699  018E                     	;# 
  1700  0191                     	;# 
  1701  0191                     	;# 
  1702  0192                     	;# 
  1703  0193                     	;# 
  1704  0193                     	;# 
  1705  0194                     	;# 
  1706  0195                     	;# 
  1707  0196                     	;# 
  1708  0197                     	;# 
  1709  0199                     	;# 
  1710  019A                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019B                     	;# 
  1714  019B                     	;# 
  1715  019C                     	;# 
  1716  019C                     	;# 
  1717  019D                     	;# 
  1718  019E                     	;# 
  1719  019F                     	;# 
  1720  020D                     	;# 
  1721  0210                     	;# 
  1722  0211                     	;# 
  1723  0211                     	;# 
  1724  0212                     	;# 
  1725  0212                     	;# 
  1726  0213                     	;# 
  1727  0213                     	;# 
  1728  0214                     	;# 
  1729  0214                     	;# 
  1730  0215                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0216                     	;# 
  1734  0216                     	;# 
  1735  0217                     	;# 
  1736  0217                     	;# 
  1737  0291                     	;# 
  1738  0291                     	;# 
  1739  0292                     	;# 
  1740  0293                     	;# 
  1741  0298                     	;# 
  1742  0298                     	;# 
  1743  0299                     	;# 
  1744  029A                     	;# 
  1745  0394                     	;# 
  1746  0395                     	;# 
  1747  0396                     	;# 
  1748  0FE4                     	;# 
  1749  0FE5                     	;# 
  1750  0FE6                     	;# 
  1751  0FE7                     	;# 
  1752  0FE8                     	;# 
  1753  0FE9                     	;# 
  1754  0FEA                     	;# 
  1755  0FEB                     	;# 
  1756  0FED                     	;# 
  1757  0FEE                     	;# 
  1758  0FEF                     	;# 
  1759  0000                     	;# 
  1760  0001                     	;# 
  1761  0002                     	;# 
  1762  0003                     	;# 
  1763  0004                     	;# 
  1764  0005                     	;# 
  1765  0006                     	;# 
  1766  0007                     	;# 
  1767  0008                     	;# 
  1768  0009                     	;# 
  1769  000A                     	;# 
  1770  000B                     	;# 
  1771  000C                     	;# 
  1772  000D                     	;# 
  1773  000E                     	;# 
  1774  0010                     	;# 
  1775  0011                     	;# 
  1776  0012                     	;# 
  1777  0015                     	;# 
  1778  0016                     	;# 
  1779  0016                     	;# 
  1780  0017                     	;# 
  1781  0018                     	;# 
  1782  0019                     	;# 
  1783  001A                     	;# 
  1784  001B                     	;# 
  1785  001C                     	;# 
  1786  008C                     	;# 
  1787  008D                     	;# 
  1788  008E                     	;# 
  1789  0090                     	;# 
  1790  0091                     	;# 
  1791  0092                     	;# 
  1792  0095                     	;# 
  1793  0096                     	;# 
  1794  0097                     	;# 
  1795  0099                     	;# 
  1796  009A                     	;# 
  1797  009B                     	;# 
  1798  009B                     	;# 
  1799  009C                     	;# 
  1800  009D                     	;# 
  1801  009E                     	;# 
  1802  010C                     	;# 
  1803  010D                     	;# 
  1804  010E                     	;# 
  1805  0116                     	;# 
  1806  0117                     	;# 
  1807  011D                     	;# 
  1808  018C                     	;# 
  1809  018D                     	;# 
  1810  018E                     	;# 
  1811  0191                     	;# 
  1812  0191                     	;# 
  1813  0192                     	;# 
  1814  0193                     	;# 
  1815  0193                     	;# 
  1816  0194                     	;# 
  1817  0195                     	;# 
  1818  0196                     	;# 
  1819  0197                     	;# 
  1820  0199                     	;# 
  1821  019A                     	;# 
  1822  019B                     	;# 
  1823  019B                     	;# 
  1824  019B                     	;# 
  1825  019B                     	;# 
  1826  019C                     	;# 
  1827  019C                     	;# 
  1828  019D                     	;# 
  1829  019E                     	;# 
  1830  019F                     	;# 
  1831  020D                     	;# 
  1832  0210                     	;# 
  1833  0211                     	;# 
  1834  0211                     	;# 
  1835  0212                     	;# 
  1836  0212                     	;# 
  1837  0213                     	;# 
  1838  0213                     	;# 
  1839  0214                     	;# 
  1840  0214                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0216                     	;# 
  1845  0216                     	;# 
  1846  0217                     	;# 
  1847  0217                     	;# 
  1848  0291                     	;# 
  1849  0291                     	;# 
  1850  0292                     	;# 
  1851  0293                     	;# 
  1852  0298                     	;# 
  1853  0298                     	;# 
  1854  0299                     	;# 
  1855  029A                     	;# 
  1856  0394                     	;# 
  1857  0395                     	;# 
  1858  0396                     	;# 
  1859  0FE4                     	;# 
  1860  0FE5                     	;# 
  1861  0FE6                     	;# 
  1862  0FE7                     	;# 
  1863  0FE8                     	;# 
  1864  0FE9                     	;# 
  1865  0FEA                     	;# 
  1866  0FEB                     	;# 
  1867  0FED                     	;# 
  1868  0FEE                     	;# 
  1869  0FEF                     	;# 
  1870  0000                     	;# 
  1871  0001                     	;# 
  1872  0002                     	;# 
  1873  0003                     	;# 
  1874  0004                     	;# 
  1875  0005                     	;# 
  1876  0006                     	;# 
  1877  0007                     	;# 
  1878  0008                     	;# 
  1879  0009                     	;# 
  1880  000A                     	;# 
  1881  000B                     	;# 
  1882  000C                     	;# 
  1883  000D                     	;# 
  1884  000E                     	;# 
  1885  0010                     	;# 
  1886  0011                     	;# 
  1887  0012                     	;# 
  1888  0015                     	;# 
  1889  0016                     	;# 
  1890  0016                     	;# 
  1891  0017                     	;# 
  1892  0018                     	;# 
  1893  0019                     	;# 
  1894  001A                     	;# 
  1895  001B                     	;# 
  1896  001C                     	;# 
  1897  008C                     	;# 
  1898  008D                     	;# 
  1899  008E                     	;# 
  1900  0090                     	;# 
  1901  0091                     	;# 
  1902  0092                     	;# 
  1903  0095                     	;# 
  1904  0096                     	;# 
  1905  0097                     	;# 
  1906  0099                     	;# 
  1907  009A                     	;# 
  1908  009B                     	;# 
  1909  009B                     	;# 
  1910  009C                     	;# 
  1911  009D                     	;# 
  1912  009E                     	;# 
  1913  010C                     	;# 
  1914  010D                     	;# 
  1915  010E                     	;# 
  1916  0116                     	;# 
  1917  0117                     	;# 
  1918  011D                     	;# 
  1919  018C                     	;# 
  1920  018D                     	;# 
  1921  018E                     	;# 
  1922  0191                     	;# 
  1923  0191                     	;# 
  1924  0192                     	;# 
  1925  0193                     	;# 
  1926  0193                     	;# 
  1927  0194                     	;# 
  1928  0195                     	;# 
  1929  0196                     	;# 
  1930  0197                     	;# 
  1931  0199                     	;# 
  1932  019A                     	;# 
  1933  019B                     	;# 
  1934  019B                     	;# 
  1935  019B                     	;# 
  1936  019B                     	;# 
  1937  019C                     	;# 
  1938  019C                     	;# 
  1939  019D                     	;# 
  1940  019E                     	;# 
  1941  019F                     	;# 
  1942  020D                     	;# 
  1943  0210                     	;# 
  1944  0211                     	;# 
  1945  0211                     	;# 
  1946  0212                     	;# 
  1947  0212                     	;# 
  1948  0213                     	;# 
  1949  0213                     	;# 
  1950  0214                     	;# 
  1951  0214                     	;# 
  1952  0215                     	;# 
  1953  0215                     	;# 
  1954  0215                     	;# 
  1955  0216                     	;# 
  1956  0216                     	;# 
  1957  0217                     	;# 
  1958  0217                     	;# 
  1959  0291                     	;# 
  1960  0291                     	;# 
  1961  0292                     	;# 
  1962  0293                     	;# 
  1963  0298                     	;# 
  1964  0298                     	;# 
  1965  0299                     	;# 
  1966  029A                     	;# 
  1967  0394                     	;# 
  1968  0395                     	;# 
  1969  0396                     	;# 
  1970  0FE4                     	;# 
  1971  0FE5                     	;# 
  1972  0FE6                     	;# 
  1973  0FE7                     	;# 
  1974  0FE8                     	;# 
  1975  0FE9                     	;# 
  1976  0FEA                     	;# 
  1977  0FEB                     	;# 
  1978  0FED                     	;# 
  1979  0FEE                     	;# 
  1980  0FEF                     	;# 
  1981  0000                     	;# 
  1982  0001                     	;# 
  1983  0002                     	;# 
  1984  0003                     	;# 
  1985  0004                     	;# 
  1986  0005                     	;# 
  1987  0006                     	;# 
  1988  0007                     	;# 
  1989  0008                     	;# 
  1990  0009                     	;# 
  1991  000A                     	;# 
  1992  000B                     	;# 
  1993  000C                     	;# 
  1994  000D                     	;# 
  1995  000E                     	;# 
  1996  0010                     	;# 
  1997  0011                     	;# 
  1998  0012                     	;# 
  1999  0015                     	;# 
  2000  0016                     	;# 
  2001  0016                     	;# 
  2002  0017                     	;# 
  2003  0018                     	;# 
  2004  0019                     	;# 
  2005  001A                     	;# 
  2006  001B                     	;# 
  2007  001C                     	;# 
  2008  008C                     	;# 
  2009  008D                     	;# 
  2010  008E                     	;# 
  2011  0090                     	;# 
  2012  0091                     	;# 
  2013  0092                     	;# 
  2014  0095                     	;# 
  2015  0096                     	;# 
  2016  0097                     	;# 
  2017  0099                     	;# 
  2018  009A                     	;# 
  2019  009B                     	;# 
  2020  009B                     	;# 
  2021  009C                     	;# 
  2022  009D                     	;# 
  2023  009E                     	;# 
  2024  010C                     	;# 
  2025  010D                     	;# 
  2026  010E                     	;# 
  2027  0116                     	;# 
  2028  0117                     	;# 
  2029  011D                     	;# 
  2030  018C                     	;# 
  2031  018D                     	;# 
  2032  018E                     	;# 
  2033  0191                     	;# 
  2034  0191                     	;# 
  2035  0192                     	;# 
  2036  0193                     	;# 
  2037  0193                     	;# 
  2038  0194                     	;# 
  2039  0195                     	;# 
  2040  0196                     	;# 
  2041  0197                     	;# 
  2042  0199                     	;# 
  2043  019A                     	;# 
  2044  019B                     	;# 
  2045  019B                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019C                     	;# 
  2049  019C                     	;# 
  2050  019D                     	;# 
  2051  019E                     	;# 
  2052  019F                     	;# 
  2053  020D                     	;# 
  2054  0210                     	;# 
  2055  0211                     	;# 
  2056  0211                     	;# 
  2057  0212                     	;# 
  2058  0212                     	;# 
  2059  0213                     	;# 
  2060  0213                     	;# 
  2061  0214                     	;# 
  2062  0214                     	;# 
  2063  0215                     	;# 
  2064  0215                     	;# 
  2065  0215                     	;# 
  2066  0216                     	;# 
  2067  0216                     	;# 
  2068  0217                     	;# 
  2069  0217                     	;# 
  2070  0291                     	;# 
  2071  0291                     	;# 
  2072  0292                     	;# 
  2073  0293                     	;# 
  2074  0298                     	;# 
  2075  0298                     	;# 
  2076  0299                     	;# 
  2077  029A                     	;# 
  2078  0394                     	;# 
  2079  0395                     	;# 
  2080  0396                     	;# 
  2081  0FE4                     	;# 
  2082  0FE5                     	;# 
  2083  0FE6                     	;# 
  2084  0FE7                     	;# 
  2085  0FE8                     	;# 
  2086  0FE9                     	;# 
  2087  0FEA                     	;# 
  2088  0FEB                     	;# 
  2089  0FED                     	;# 
  2090  0FEE                     	;# 
  2091  0FEF                     	;# 
  2092  0000                     	;# 
  2093  0001                     	;# 
  2094  0002                     	;# 
  2095  0003                     	;# 
  2096  0004                     	;# 
  2097  0005                     	;# 
  2098  0006                     	;# 
  2099  0007                     	;# 
  2100  0008                     	;# 
  2101  0009                     	;# 
  2102  000A                     	;# 
  2103  000B                     	;# 
  2104  000C                     	;# 
  2105  000D                     	;# 
  2106  000E                     	;# 
  2107  0010                     	;# 
  2108  0011                     	;# 
  2109  0012                     	;# 
  2110  0015                     	;# 
  2111  0016                     	;# 
  2112  0016                     	;# 
  2113  0017                     	;# 
  2114  0018                     	;# 
  2115  0019                     	;# 
  2116  001A                     	;# 
  2117  001B                     	;# 
  2118  001C                     	;# 
  2119  008C                     	;# 
  2120  008D                     	;# 
  2121  008E                     	;# 
  2122  0090                     	;# 
  2123  0091                     	;# 
  2124  0092                     	;# 
  2125  0095                     	;# 
  2126  0096                     	;# 
  2127  0097                     	;# 
  2128  0099                     	;# 
  2129  009A                     	;# 
  2130  009B                     	;# 
  2131  009B                     	;# 
  2132  009C                     	;# 
  2133  009D                     	;# 
  2134  009E                     	;# 
  2135  010C                     	;# 
  2136  010D                     	;# 
  2137  010E                     	;# 
  2138  0116                     	;# 
  2139  0117                     	;# 
  2140  011D                     	;# 
  2141  018C                     	;# 
  2142  018D                     	;# 
  2143  018E                     	;# 
  2144  0191                     	;# 
  2145  0191                     	;# 
  2146  0192                     	;# 
  2147  0193                     	;# 
  2148  0193                     	;# 
  2149  0194                     	;# 
  2150  0195                     	;# 
  2151  0196                     	;# 
  2152  0197                     	;# 
  2153  0199                     	;# 
  2154  019A                     	;# 
  2155  019B                     	;# 
  2156  019B                     	;# 
  2157  019B                     	;# 
  2158  019B                     	;# 
  2159  019C                     	;# 
  2160  019C                     	;# 
  2161  019D                     	;# 
  2162  019E                     	;# 
  2163  019F                     	;# 
  2164  020D                     	;# 
  2165  0210                     	;# 
  2166  0211                     	;# 
  2167  0211                     	;# 
  2168  0212                     	;# 
  2169  0212                     	;# 
  2170  0213                     	;# 
  2171  0213                     	;# 
  2172  0214                     	;# 
  2173  0214                     	;# 
  2174  0215                     	;# 
  2175  0215                     	;# 
  2176  0215                     	;# 
  2177  0216                     	;# 
  2178  0216                     	;# 
  2179  0217                     	;# 
  2180  0217                     	;# 
  2181  0291                     	;# 
  2182  0291                     	;# 
  2183  0292                     	;# 
  2184  0293                     	;# 
  2185  0298                     	;# 
  2186  0298                     	;# 
  2187  0299                     	;# 
  2188  029A                     	;# 
  2189  0394                     	;# 
  2190  0395                     	;# 
  2191  0396                     	;# 
  2192  0FE4                     	;# 
  2193  0FE5                     	;# 
  2194  0FE6                     	;# 
  2195  0FE7                     	;# 
  2196  0FE8                     	;# 
  2197  0FE9                     	;# 
  2198  0FEA                     	;# 
  2199  0FEB                     	;# 
  2200  0FED                     	;# 
  2201  0FEE                     	;# 
  2202  0FEF                     	;# 
  2203                           
  2204                           	psect	idataBANK2
  2205  0002                     __pidataBANK2:	
  2206                           
  2207                           ;initializer for Bq32k_Time_Init@F2033
  2208  0002  34B0               	retlw	176
  2209  0003  34E5               	retlw	229
  2210                           
  2211                           	psect	stringtext
  2212  1800                     __pstringtext:	
  2213  1800                     _Dis_TAB:	
  2214  1800  34D7               	retlw	215
  2215  1801  3450               	retlw	80
  2216  1802  34B5               	retlw	181
  2217  1803  34F1               	retlw	241
  2218  1804  3472               	retlw	114
  2219  1805  34E3               	retlw	227
  2220  1806  34E7               	retlw	231
  2221  1807  3451               	retlw	81
  2222  1808  34F7               	retlw	247
  2223  1809  34F3               	retlw	243
  2224  180A  3477               	retlw	119
  2225  180B  34E6               	retlw	230
  2226  180C  3487               	retlw	135
  2227  180D  34F4               	retlw	244
  2228  180E  34A7               	retlw	167
  2229  180F  3427               	retlw	39
  2230  1810  3457               	retlw	87
  2231  1811  3420               	retlw	32
  2232  1812  3420               	retlw	32
  2233  1813  3420               	retlw	32
  2234  1814  3420               	retlw	32
  2235  1815                     __end_of_Dis_TAB:	
  2236                           
  2237                           	psect	nvBANK2
  2238  016B                     __pnvBANK2:	
  2239  016B                     _Usart_Run_Flag:	
  2240  016B                     	ds	1
  2241  016C                     _eusartTxBufferRemaining:	
  2242  016C                     	ds	1
  2243  016D                     _timer0ReloadVal:	
  2244  016D                     	ds	1
  2245  000B                     _INTCONbits	set	11
  2246  0011                     _PIR1bits	set	17
  2247  0015                     _TMR0	set	21
  2248  0067                     _RA7	set	103
  2249  0069                     _RB1	set	105
  2250  006B                     _RB3	set	107
  2251  006D                     _RB5	set	109
  2252  009D                     _ADCON0	set	157
  2253  009D                     _ADCON0bits	set	157
  2254  009E                     _ADCON1	set	158
  2255  009C                     _ADRESH	set	156
  2256  009B                     _ADRESL	set	155
  2257  0095                     _OPTION_REG	set	149
  2258  0095                     _OPTION_REGbits	set	149
  2259  0099                     _OSCCON	set	153
  2260  009A                     _OSCSTAT	set	154
  2261  0091                     _PIE1bits	set	145
  2262  008C                     _TRISA	set	140
  2263  008D                     _TRISB	set	141
  2264  008E                     _TRISC	set	142
  2265  04B8                     _SWDTEN	set	1208
  2266  0469                     _TRISB1	set	1129
  2267  046B                     _TRISB3	set	1131
  2268  04B9                     _WDTPS0	set	1209
  2269  04BA                     _WDTPS1	set	1210
  2270  04BB                     _WDTPS2	set	1211
  2271  04BC                     _WDTPS3	set	1212
  2272  04BD                     _WDTPS4	set	1213
  2273  011D                     _APFCON	set	285
  2274  0117                     _FVRCON	set	279
  2275  0117                     _FVRCONbits	set	279
  2276  010C                     _LATA	set	268
  2277  010D                     _LATB	set	269
  2278  010E                     _LATC	set	270
  2279  0860                     _LATA0	set	2144
  2280  0861                     _LATA1	set	2145
  2281  0862                     _LATA2	set	2146
  2282  0863                     _LATA3	set	2147
  2283  0864                     _LATA4	set	2148
  2284  0865                     _LATA5	set	2149
  2285  0866                     _LATA6	set	2150
  2286  0868                     _LATB0	set	2152
  2287  0869                     _LATB1	set	2153
  2288  0870                     _LATC0	set	2160
  2289  0871                     _LATC1	set	2161
  2290  0872                     _LATC2	set	2162
  2291  018C                     _ANSELA	set	396
  2292  018D                     _ANSELB	set	397
  2293  018E                     _ANSELC	set	398
  2294  019F                     _BAUDCON	set	415
  2295  0192                     _PMADRH	set	402
  2296  0191                     _PMADRL	set	401
  2297  0195                     _PMCON1bits	set	405
  2298  0196                     _PMCON2	set	406
  2299  0194                     _PMDATH	set	404
  2300  0193                     _PMDATL	set	403
  2301  0199                     _RCREG	set	409
  2302  019D                     _RCSTA	set	413
  2303  019D                     _RCSTAbits	set	413
  2304  019C                     _SPBRGH	set	412
  2305  019B                     _SPBRGL	set	411
  2306  019A                     _TXREG	set	410
  2307  019E                     _TXSTA	set	414
  2308  0212                     _SSP1ADD	set	530
  2309  0215                     _SSP1CON1	set	533
  2310  0215                     _SSP1CON1bits	set	533
  2311  0214                     _SSP1STAT	set	532
  2312  0214                     _SSP1STATbits	set	532
  2313  0211                     _SSPBUF	set	529
  2314  020D                     _WPUB	set	525
  2315  0210                     _WPUE	set	528
  2316                           
  2317                           ; #config settings
  2318  0000                     
  2319                           	psect	cinit
  2320  0029                     start_initialization:	
  2321  0029                     __initialization:	
  2322                           
  2323                           ; Clear objects allocated to BANK0
  2324  0029  3061               	movlw	low __pbssBANK0
  2325  002A  0084               	movwf	4
  2326  002B  3000               	movlw	high __pbssBANK0
  2327  002C  0085               	movwf	5
  2328  002D  300A               	movlw	10
  2329  002E  3193  23D2  3180   	fcall	clear_ram0
  2330                           
  2331                           ; Clear objects allocated to BANK1
  2332  0031  0021               	movlb	1	; select bank1
  2333  0032  01EE               	clrf	__pbssBANK1& (0+127)
  2334  0033  01EF               	clrf	(__pbssBANK1+1)& (0+127)
  2335                           
  2336                           ; Clear objects allocated to BANK2
  2337  0034  3020               	movlw	low __pbssBANK2
  2338  0035  0084               	movwf	4
  2339  0036  3001               	movlw	high __pbssBANK2
  2340  0037  0085               	movwf	5
  2341  0038  304B               	movlw	75
  2342  0039  3193  23D2  3180   	fcall	clear_ram0
  2343                           
  2344                           ; Clear objects allocated to BANK3
  2345  003C  30A0               	movlw	low __pbssBANK3
  2346  003D  0084               	movwf	4
  2347  003E  3001               	movlw	high __pbssBANK3
  2348  003F  0085               	movwf	5
  2349  0040  3034               	movlw	52
  2350  0041  3193  23D2  3180   	fcall	clear_ram0
  2351                           
  2352                           ; Clear objects allocated to BANK4
  2353  0044  3020               	movlw	low __pbssBANK4
  2354  0045  0084               	movwf	4
  2355  0046  3002               	movlw	high __pbssBANK4
  2356  0047  0085               	movwf	5
  2357  0048  3040               	movlw	64
  2358  0049  3193  23D2  3180   	fcall	clear_ram0
  2359                           
  2360                           ; Initialize objects allocated to BANK2
  2361  004C  0022               	movlb	2	; select bank2
  2362  004D  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  2363  0050  00EE               	movwf	__pdataBANK2& (0+127)
  2364  0051  3180  2003         	fcall	__pidataBANK2+1	;fetch initializer
  2365  0053  00EF               	movwf	(__pdataBANK2+1)& (0+127)
  2366  0054                     end_of_initialization:	
  2367                           ;End of C runtime variable initialization code
  2368                           
  2369  0054                     __end_of__initialization:	
  2370  0054  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2371  0055  0020               	movlb	0
  2372  0056  3184  2CE3         	ljmp	_main	;jump to C main() function
  2373                           
  2374                           	psect	bssBANK0
  2375  0061                     __pbssBANK0:	
  2376  0061                     _temperature_value:	
  2377  0061                     	ds	4
  2378  0065                     _Cur_Save_Index:	
  2379  0065                     	ds	2
  2380  0067                     _Record_flag:	
  2381  0067                     	ds	1
  2382  0068                     _Usart_Rx_Cnt:	
  2383  0068                     	ds	1
  2384  0069                     _temperature_decimal:	
  2385  0069                     	ds	1
  2386  006A                     _time_count:	
  2387  006A                     	ds	1
  2388                           
  2389                           	psect	bssBANK1
  2390  00EE                     __pbssBANK1:	
  2391  00EE                     _LongPressSec:	
  2392  00EE                     	ds	1
  2393  00EF                     _uch_cr0:	
  2394  00EF                     	ds	1
  2395                           
  2396                           	psect	bssBANK2
  2397  0120                     __pbssBANK2:	
  2398  0120                     Two_Display@F2138:	
  2399  0120                     	ds	4
  2400  0124                     err_Display@F2141:	
  2401  0124                     	ds	4
  2402  0128                     TMR0_ISR@CountCallBack:	
  2403  0128                     	ds	2
  2404  012A                     _CH1_temperature:	
  2405  012A                     	ds	2
  2406  012C                     _CH2_temperature:	
  2407  012C                     	ds	2
  2408  012E                     _Cur_Save_Index_Bak:	
  2409  012E                     	ds	2
  2410  0130                     _Cur_temperature:	
  2411  0130                     	ds	2
  2412  0132                     _temperature_int:	
  2413  0132                     	ds	2
  2414  0134                     _CH1_state:	
  2415  0134                     	ds	1
  2416  0135                     _CH2_state:	
  2417  0135                     	ds	1
  2418  0136                     _Cur_temperature_time_ch1:	
  2419  0136                     	ds	1
  2420  0137                     _Cur_temperature_time_ch2:	
  2421  0137                     	ds	1
  2422  0138                     _Inf_cmd_flag:	
  2423  0138                     	ds	1
  2424  0139                     _MAX31856Sec:	
  2425  0139                     	ds	1
  2426  013A                     _Set_time_cmd_flag:	
  2427  013A                     	ds	1
  2428  013B                     _eusartRxCount:	
  2429  013B                     	ds	1
  2430  013C                     _eusartRxHead:	
  2431  013C                     	ds	1
  2432  013D                     _eusartRxTail:	
  2433  013D                     	ds	1
  2434  013E                     _eusartTxHead:	
  2435  013E                     	ds	1
  2436  013F                     _eusartTxTail:	
  2437  013F                     	ds	1
  2438  0140                     _temperature_sign:	
  2439  0140                     	ds	1
  2440  0141                     _tmr_flag:	
  2441  0141                     	ds	1
  2442  0142                     _uch_cjth:	
  2443  0142                     	ds	1
  2444  0143                     _uch_cjtl:	
  2445  0143                     	ds	1
  2446  0144                     _uch_cr1:	
  2447  0144                     	ds	1
  2448  0145                     _uch_ltcbh:	
  2449  0145                     	ds	1
  2450  0146                     _uch_ltcbl:	
  2451  0146                     	ds	1
  2452  0147                     _uch_ltcbm:	
  2453  0147                     	ds	1
  2454  0148                     _uch_mask:	
  2455  0148                     	ds	1
  2456  0149                     _uch_sr:	
  2457  0149                     	ds	1
  2458  014A                     _uch_reg:	
  2459  014A                     	ds	8
  2460  0152                     _rtc_save_ch1:	
  2461  0152                     	ds	7
  2462  0159                     _rtc_save_ch2:	
  2463  0159                     	ds	7
  2464  0160                     _rtc_tm:	
  2465  0160                     	ds	7
  2466  0167                     _display_buff:	
  2467  0167                     	ds	4
  2468                           
  2469                           	psect	dataBANK2
  2470  016E                     __pdataBANK2:	
  2471  016E                     Bq32k_Time_Init@F2033:	
  2472  016E                     	ds	2
  2473                           
  2474                           	psect	bssBANK3
  2475  01A0                     __pbssBANK3:	
  2476  01A0                     _eusartRxBuffer:	
  2477  01A0                     	ds	8
  2478  01A8                     _eusartTxBuffer:	
  2479  01A8                     	ds	8
  2480  01B0                     time_Display@F2144:	
  2481  01B0                     	ds	4
  2482  01B4                     _Usart_Rx_Buff:	
  2483  01B4                     	ds	32
  2484                           
  2485                           	psect	bssBANK4
  2486  0220                     __pbssBANK4:	
  2487  0220                     _Flash_buff:	
  2488  0220                     	ds	64
  2489                           
  2490                           	psect	clrtext
  2491  13D2                     clear_ram0:	
  2492                           ;	Called with FSR0 containing the base address, and
  2493                           ;	WREG with the size to clear
  2494                           
  2495  13D2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2496  13D3                     clrloop0:	
  2497  13D3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2498  13D4  3101               	addfsr 0,1
  2499  13D5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2500  13D6  2BD3               	goto	clrloop0	;have we reached the end yet?
  2501  13D7  3400               	retlw	0	;all done for this memory range, return
  2502                           
  2503                           	psect	cstackBANK3
  2504  01D4                     __pcstackBANK3:	
  2505  01D4                     main@data_temp:	
  2506                           
  2507                           ; 2 bytes @ 0x0
  2508  01D4                     	ds	2
  2509  01D6                     main@i:	
  2510                           
  2511                           ; 1 bytes @ 0x2
  2512  01D6                     	ds	1
  2513  01D7                     main@bat_data:	
  2514                           
  2515                           ; 2 bytes @ 0x3
  2516  01D7                     	ds	2
  2517                           
  2518                           	psect	cstackBANK1
  2519  00A0                     __pcstackBANK1:	
  2520  00A0                     Inf_to_Com@tmp_buf:	
  2521                           
  2522                           ; 72 bytes @ 0x0
  2523  00A0                     	ds	72
  2524  00E8                     Inf_to_Com@add_tmp:	
  2525                           
  2526                           ; 2 bytes @ 0x48
  2527  00E8                     	ds	2
  2528  00EA                     Inf_to_Com@crc_tmp:	
  2529                           
  2530                           ; 2 bytes @ 0x4A
  2531  00EA                     	ds	2
  2532  00EC                     Inf_to_Com@i:	
  2533                           
  2534                           ; 1 bytes @ 0x4C
  2535  00EC                     	ds	1
  2536  00ED                     Inf_to_Com@count_tmp:	
  2537                           
  2538                           ; 1 bytes @ 0x4D
  2539  00ED                     	ds	1
  2540                           
  2541                           	psect	cstackCOMMON
  2542  0070                     __pcstackCOMMON:	
  2543  0070                     ?_OSCILLATOR_Initialize:	
  2544  0070                     ?_SPI_Initialize:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0070                     ?_EUSART_Initialize:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0070                     ?_ADC_Initialize:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     ?_FVR_Initialize:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ?_TMR0_Initialize:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ?_RxFrameCheck:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ?_TMR0_CallBack:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ??_TMR0_CallBack:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ?_SendCmd_1621:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ?_Serach_Flash_Head:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_temperature_process:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_Key_Process:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_Save_process:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_Set_finish_flag:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_Write_Flash_finish:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ?_Sleep_process:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_Calculate_Time:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_Tc_Display:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_err_Display:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_Two_Display:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_time_Display:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ?_Bq32k_Rtc_Read_Time:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_Set_start_flag:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?_Write_Flash_head:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_Save_Write_time:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?_bcd2bin:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_bin2bcd:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ?_Step_control:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?_Set_time_from_Com:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_Inf_to_Com:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ?_Read_time_to_Com:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_PIN_MANAGER_Initialize:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ?_SYSTEM_Initialize:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_SPI_Exchange8bit:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ?_EUSART_Write:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_EUSART_Transmit_ISR:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ??_EUSART_Transmit_ISR:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ?_EUSART_Receive_ISR:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ?_TMR0_ISR:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_INTERRUPT_InterruptManager:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ?_main:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_maxim_31856_read_register:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ?_maxim_start_conversion:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_maxim_clear_fault_status:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_tc_temperature_trans:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ?_one_temperature_trans:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ?_temperature_display:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?_I2C_Start:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?_I2C_Send_Byte:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_I2C_Receive_Byte:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?_I2C_Stop:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     ?_Key_Scan:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0070                     ?_Bq32k_Rtc_Write_Time:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_Com_Process:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     RxFrameCheck@frame_len:	
  2707                           ; 2 bytes @ 0x0
  2708                           
  2709                           
  2710                           ; 1 bytes @ 0x0
  2711  0070                     	ds	1
  2712  0071                     ??_RxFrameCheck:	
  2713  0071                     ??_TMR0_ISR:	
  2714                           ; 1 bytes @ 0x1
  2715                           
  2716                           
  2717                           ; 1 bytes @ 0x1
  2718  0071                     	ds	4
  2719  0075                     RxFrameCheck@tmp_crc:	
  2720                           
  2721                           ; 2 bytes @ 0x5
  2722  0075                     	ds	2
  2723  0077                     RxFrameCheck@i:	
  2724                           
  2725                           ; 1 bytes @ 0x7
  2726  0077                     	ds	1
  2727  0078                     RxFrameCheck@rx_arr:	
  2728                           
  2729                           ; 1 bytes @ 0x8
  2730  0078                     	ds	1
  2731  0079                     RxFrameCheck@remainder:	
  2732                           
  2733                           ; 2 bytes @ 0x9
  2734  0079                     	ds	2
  2735  007B                     ??_EUSART_Receive_ISR:	
  2736                           
  2737                           ; 1 bytes @ 0xB
  2738  007B                     	ds	2
  2739  007D                     EUSART_Receive_ISR@rx_tmp:	
  2740                           
  2741                           ; 1 bytes @ 0xD
  2742  007D                     	ds	1
  2743                           
  2744                           	psect	cstackBANK0
  2745  0020                     __pcstackBANK0:	
  2746  0020                     ??_INTERRUPT_InterruptManager:	
  2747                           
  2748                           ; 1 bytes @ 0x0
  2749  0020                     	ds	1
  2750  0021                     ??_OSCILLATOR_Initialize:	
  2751  0021                     ??_SPI_Initialize:	
  2752                           ; 1 bytes @ 0x1
  2753                           
  2754  0021                     ??_EUSART_Initialize:	
  2755                           ; 1 bytes @ 0x1
  2756                           
  2757  0021                     ??_ADC_Initialize:	
  2758                           ; 1 bytes @ 0x1
  2759                           
  2760  0021                     ??_FVR_Initialize:	
  2761                           ; 1 bytes @ 0x1
  2762                           
  2763  0021                     ??_TMR0_Initialize:	
  2764                           ; 1 bytes @ 0x1
  2765                           
  2766  0021                     ?_FLASH_EraseBlock:	
  2767                           ; 1 bytes @ 0x1
  2768                           
  2769  0021                     ??_Set_finish_flag:	
  2770                           ; 1 bytes @ 0x1
  2771                           
  2772  0021                     ?_memset:	
  2773                           ; 1 bytes @ 0x1
  2774                           
  2775  0021                     ??_Set_start_flag:	
  2776                           ; 1 bytes @ 0x1
  2777                           
  2778  0021                     ??_Step_control:	
  2779                           ; 1 bytes @ 0x1
  2780                           
  2781  0021                     ??_PIN_MANAGER_Initialize:	
  2782                           ; 1 bytes @ 0x1
  2783                           
  2784  0021                     ??_SPI_Exchange8bit:	
  2785                           ; 1 bytes @ 0x1
  2786                           
  2787  0021                     ??_EUSART_Write:	
  2788                           ; 1 bytes @ 0x1
  2789                           
  2790  0021                     ?_FLASH_WriteWord:	
  2791                           ; 1 bytes @ 0x1
  2792                           
  2793  0021                     ?_SendBit_1621:	
  2794                           ; 1 bytes @ 0x1
  2795                           
  2796  0021                     ?_SendDataBit_1621:	
  2797                           ; 1 bytes @ 0x1
  2798                           
  2799  0021                     ??_I2C_Start:	
  2800                           ; 1 bytes @ 0x1
  2801                           
  2802  0021                     ??_I2C_Send_Byte:	
  2803                           ; 1 bytes @ 0x1
  2804                           
  2805  0021                     ??_I2C_Receive_Byte:	
  2806                           ; 1 bytes @ 0x1
  2807                           
  2808  0021                     ??_I2C_Stop:	
  2809                           ; 1 bytes @ 0x1
  2810                           
  2811  0021                     ??_Key_Scan:	
  2812                           ; 1 bytes @ 0x1
  2813                           
  2814  0021                     ?___bmul:	
  2815                           ; 1 bytes @ 0x1
  2816                           
  2817  0021                     ?_CRC_cal:	
  2818                           ; 1 bytes @ 0x1
  2819                           
  2820  0021                     ?_FLASH_ReadWord:	
  2821                           ; 2 bytes @ 0x1
  2822                           
  2823  0021                     ?___wmul:	
  2824                           ; 2 bytes @ 0x1
  2825                           
  2826  0021                     ?___awdiv:	
  2827                           ; 2 bytes @ 0x1
  2828                           
  2829  0021                     ?___awmod:	
  2830                           ; 2 bytes @ 0x1
  2831                           
  2832  0021                     ?___lwmod:	
  2833                           ; 2 bytes @ 0x1
  2834                           
  2835  0021                     SPI_Exchange8bit@data:	
  2836                           ; 2 bytes @ 0x1
  2837                           
  2838  0021                     EUSART_Write@txData:	
  2839                           ; 1 bytes @ 0x1
  2840                           
  2841  0021                     SendBit_1621@cnt:	
  2842                           ; 1 bytes @ 0x1
  2843                           
  2844  0021                     SendDataBit_1621@cnt:	
  2845                           ; 1 bytes @ 0x1
  2846                           
  2847  0021                     CRC_cal@frame_len:	
  2848                           ; 1 bytes @ 0x1
  2849                           
  2850  0021                     ___bmul@multiplicand:	
  2851                           ; 1 bytes @ 0x1
  2852                           
  2853  0021                     FLASH_ReadWord@flashAddr:	
  2854                           ; 1 bytes @ 0x1
  2855                           
  2856  0021                     FLASH_WriteWord@flashAddr:	
  2857                           ; 2 bytes @ 0x1
  2858                           
  2859  0021                     FLASH_EraseBlock@startAddr:	
  2860                           ; 2 bytes @ 0x1
  2861                           
  2862  0021                     ___wmul@multiplier:	
  2863                           ; 2 bytes @ 0x1
  2864                           
  2865  0021                     ___awdiv@divisor:	
  2866                           ; 2 bytes @ 0x1
  2867                           
  2868  0021                     ___awmod@divisor:	
  2869                           ; 2 bytes @ 0x1
  2870                           
  2871  0021                     ___lwmod@divisor:	
  2872                           ; 2 bytes @ 0x1
  2873                           
  2874  0021                     memset@c:	
  2875                           ; 2 bytes @ 0x1
  2876                           
  2877                           
  2878                           ; 2 bytes @ 0x1
  2879  0021                     	ds	1
  2880  0022                     ??_Sleep_process:	
  2881  0022                     ??_SYSTEM_Initialize:	
  2882                           ; 1 bytes @ 0x2
  2883                           
  2884  0022                     ?_SPI_Exchange8bitBuffer:	
  2885                           ; 1 bytes @ 0x2
  2886                           
  2887  0022                     ?_maxim_31856_write_register:	
  2888                           ; 1 bytes @ 0x2
  2889                           
  2890  0022                     ??_maxim_31856_read_register:	
  2891                           ; 1 bytes @ 0x2
  2892                           
  2893  0022                     ??_SendBit_1621:	
  2894                           ; 1 bytes @ 0x2
  2895                           
  2896  0022                     ??_SendDataBit_1621:	
  2897                           ; 1 bytes @ 0x2
  2898                           
  2899  0022                     ??___bmul:	
  2900                           ; 1 bytes @ 0x2
  2901                           
  2902  0022                     SPI_Exchange8bitBuffer@bufLen:	
  2903                           ; 1 bytes @ 0x2
  2904                           
  2905  0022                     maxim_31856_write_register@uch_register_value:	
  2906                           ; 1 bytes @ 0x2
  2907                           
  2908  0022                     I2C_Send_Byte@Data:	
  2909                           ; 1 bytes @ 0x2
  2910                           
  2911  0022                     I2C_Receive_Byte@Data:	
  2912                           ; 1 bytes @ 0x2
  2913                           
  2914                           
  2915                           ; 1 bytes @ 0x2
  2916  0022                     	ds	1
  2917  0023                     ??_FLASH_EraseBlock:	
  2918  0023                     ??_CRC_cal:	
  2919                           ; 1 bytes @ 0x3
  2920                           
  2921  0023                     ??_FLASH_ReadWord:	
  2922                           ; 1 bytes @ 0x3
  2923                           
  2924  0023                     ??_maxim_31856_write_register:	
  2925                           ; 1 bytes @ 0x3
  2926                           
  2927  0023                     SPI_Exchange8bitBuffer@dataOut:	
  2928                           ; 1 bytes @ 0x3
  2929                           
  2930  0023                     FLASH_ReadWord@GIEBitValue:	
  2931                           ; 1 bytes @ 0x3
  2932                           
  2933  0023                     FLASH_EraseBlock@GIEBitValue:	
  2934                           ; 1 bytes @ 0x3
  2935                           
  2936  0023                     maxim_31856_write_register@uch_register_address:	
  2937                           ; 1 bytes @ 0x3
  2938                           
  2939  0023                     maxim_31856_read_register@uch_register_address:	
  2940                           ; 1 bytes @ 0x3
  2941                           
  2942  0023                     SendBit_1621@data:	
  2943                           ; 1 bytes @ 0x3
  2944                           
  2945  0023                     SendDataBit_1621@data:	
  2946                           ; 1 bytes @ 0x3
  2947                           
  2948  0023                     I2C_Send_Byte@i:	
  2949                           ; 1 bytes @ 0x3
  2950                           
  2951  0023                     I2C_Receive_Byte@i:	
  2952                           ; 1 bytes @ 0x3
  2953                           
  2954  0023                     Key_Scan@Key_val:	
  2955                           ; 1 bytes @ 0x3
  2956                           
  2957  0023                     ___bmul@product:	
  2958                           ; 1 bytes @ 0x3
  2959                           
  2960  0023                     FLASH_WriteWord@word:	
  2961                           ; 1 bytes @ 0x3
  2962                           
  2963  0023                     ___wmul@multiplicand:	
  2964                           ; 2 bytes @ 0x3
  2965                           
  2966  0023                     ___awdiv@dividend:	
  2967                           ; 2 bytes @ 0x3
  2968                           
  2969  0023                     ___awmod@dividend:	
  2970                           ; 2 bytes @ 0x3
  2971                           
  2972  0023                     ___lwmod@dividend:	
  2973                           ; 2 bytes @ 0x3
  2974                           
  2975  0023                     memset@n:	
  2976                           ; 2 bytes @ 0x3
  2977                           
  2978                           
  2979                           ; 2 bytes @ 0x3
  2980  0023                     	ds	1
  2981  0024                     ??_SPI_Exchange8bitBuffer:	
  2982  0024                     ?_FLASH_readBlock:	
  2983                           ; 1 bytes @ 0x4
  2984                           
  2985  0024                     ?_I2C_Read_Buffer:	
  2986                           ; 1 bytes @ 0x4
  2987                           
  2988  0024                     ?_I2C_Send_Buffer:	
  2989                           ; 1 bytes @ 0x4
  2990                           
  2991  0024                     maxim_31856_read_register@uch_register_data:	
  2992                           ; 1 bytes @ 0x4
  2993                           
  2994  0024                     SendBit_1621@i:	
  2995                           ; 1 bytes @ 0x4
  2996                           
  2997  0024                     SendDataBit_1621@i:	
  2998                           ; 1 bytes @ 0x4
  2999                           
  3000  0024                     I2C_Read_Buffer@buff:	
  3001                           ; 1 bytes @ 0x4
  3002                           
  3003  0024                     I2C_Send_Buffer@buff:	
  3004                           ; 1 bytes @ 0x4
  3005                           
  3006  0024                     ___bmul@multiplier:	
  3007                           ; 1 bytes @ 0x4
  3008                           
  3009  0024                     FLASH_readBlock@address:	
  3010                           ; 1 bytes @ 0x4
  3011                           
  3012                           
  3013                           ; 2 bytes @ 0x4
  3014  0024                     	ds	1
  3015  0025                     ??_SendCmd_1621:	
  3016  0025                     ?_WriteAll_1621:	
  3017                           ; 1 bytes @ 0x5
  3018                           
  3019  0025                     ??_memset:	
  3020                           ; 1 bytes @ 0x5
  3021                           
  3022  0025                     ??_bcd2bin:	
  3023                           ; 1 bytes @ 0x5
  3024                           
  3025  0025                     ??_FLASH_WriteWord:	
  3026                           ; 1 bytes @ 0x5
  3027                           
  3028  0025                     ??_maxim_start_conversion:	
  3029                           ; 1 bytes @ 0x5
  3030                           
  3031  0025                     ??_maxim_clear_fault_status:	
  3032                           ; 1 bytes @ 0x5
  3033                           
  3034  0025                     ??___wmul:	
  3035                           ; 1 bytes @ 0x5
  3036                           
  3037  0025                     ??___awdiv:	
  3038                           ; 1 bytes @ 0x5
  3039                           
  3040  0025                     ??___awmod:	
  3041                           ; 1 bytes @ 0x5
  3042                           
  3043  0025                     ??___lwmod:	
  3044                           ; 1 bytes @ 0x5
  3045                           
  3046  0025                     FLASH_WriteWord@GIEBitValue:	
  3047                           ; 1 bytes @ 0x5
  3048                           
  3049  0025                     I2C_Read_Buffer@Length:	
  3050                           ; 1 bytes @ 0x5
  3051                           
  3052  0025                     I2C_Send_Buffer@Length:	
  3053                           ; 1 bytes @ 0x5
  3054                           
  3055  0025                     WriteAll_1621@p:	
  3056                           ; 1 bytes @ 0x5
  3057                           
  3058  0025                     ___wmul@product:	
  3059                           ; 2 bytes @ 0x5
  3060                           
  3061                           
  3062                           ; 2 bytes @ 0x5
  3063  0025                     	ds	1
  3064  0026                     ?_Save_Write_word:	
  3065  0026                     ??_I2C_Read_Buffer:	
  3066                           ; 1 bytes @ 0x6
  3067                           
  3068  0026                     ??_I2C_Send_Buffer:	
  3069                           ; 1 bytes @ 0x6
  3070                           
  3071  0026                     FLASH_readBlock@count:	
  3072                           ; 1 bytes @ 0x6
  3073                           
  3074  0026                     maxim_start_conversion@uch_conversion_mode:	
  3075                           ; 1 bytes @ 0x6
  3076                           
  3077  0026                     SendCmd_1621@command:	
  3078                           ; 1 bytes @ 0x6
  3079                           
  3080  0026                     ___awdiv@counter:	
  3081                           ; 1 bytes @ 0x6
  3082                           
  3083  0026                     ___awmod@counter:	
  3084                           ; 1 bytes @ 0x6
  3085                           
  3086  0026                     ___lwmod@counter:	
  3087                           ; 1 bytes @ 0x6
  3088                           
  3089  0026                     memset@p1:	
  3090                           ; 1 bytes @ 0x6
  3091                           
  3092  0026                     Save_Write_word@data:	
  3093                           ; 1 bytes @ 0x6
  3094                           
  3095                           
  3096                           ; 2 bytes @ 0x6
  3097  0026                     	ds	1
  3098  0027                     ??_FLASH_readBlock:	
  3099  0027                     ?___lwdiv:	
  3100                           ; 1 bytes @ 0x7
  3101                           
  3102  0027                     SPI_Exchange8bitBuffer@dataIn:	
  3103                           ; 2 bytes @ 0x7
  3104                           
  3105  0027                     WriteAll_1621@cnt:	
  3106                           ; 1 bytes @ 0x7
  3107                           
  3108  0027                     I2C_Read_Buffer@ADD:	
  3109                           ; 1 bytes @ 0x7
  3110                           
  3111  0027                     CRC_cal@rx_arr:	
  3112                           ; 1 bytes @ 0x7
  3113                           
  3114  0027                     ___awdiv@sign:	
  3115                           ; 1 bytes @ 0x7
  3116                           
  3117  0027                     ___awmod@sign:	
  3118                           ; 1 bytes @ 0x7
  3119                           
  3120  0027                     memset@p:	
  3121                           ; 1 bytes @ 0x7
  3122                           
  3123  0027                     ___lwdiv@divisor:	
  3124                           ; 1 bytes @ 0x7
  3125                           
  3126                           
  3127                           ; 2 bytes @ 0x7
  3128  0027                     	ds	1
  3129  0028                     ??_WriteAll_1621:	
  3130  0028                     ??_Save_Write_word:	
  3131                           ; 1 bytes @ 0x8
  3132                           
  3133  0028                     SPI_Exchange8bitBuffer@bytesWritten:	
  3134                           ; 1 bytes @ 0x8
  3135                           
  3136  0028                     FLASH_readBlock@buffer:	
  3137                           ; 1 bytes @ 0x8
  3138                           
  3139  0028                     I2C_Read_Buffer@Flag:	
  3140                           ; 1 bytes @ 0x8
  3141                           
  3142  0028                     I2C_Send_Buffer@ADD:	
  3143                           ; 1 bytes @ 0x8
  3144                           
  3145  0028                     bcd2bin@val:	
  3146                           ; 1 bytes @ 0x8
  3147                           
  3148  0028                     CRC_cal@i:	
  3149                           ; 1 bytes @ 0x8
  3150                           
  3151  0028                     ___awdiv@quotient:	
  3152                           ; 1 bytes @ 0x8
  3153                           
  3154                           
  3155                           ; 2 bytes @ 0x8
  3156  0028                     	ds	1
  3157  0029                     ??_Bq32k_Rtc_Read_Time:	
  3158  0029                     ?_maxim_31856_read_nregisters:	
  3159                           ; 1 bytes @ 0x9
  3160                           
  3161  0029                     maxim_31856_read_nregisters@uch_buff:	
  3162                           ; 1 bytes @ 0x9
  3163                           
  3164  0029                     WriteAll_1621@addr:	
  3165                           ; 1 bytes @ 0x9
  3166                           
  3167  0029                     I2C_Send_Buffer@i:	
  3168                           ; 1 bytes @ 0x9
  3169                           
  3170  0029                     CRC_cal@remainder:	
  3171                           ; 1 bytes @ 0x9
  3172                           
  3173  0029                     ___lwdiv@dividend:	
  3174                           ; 2 bytes @ 0x9
  3175                           
  3176                           
  3177                           ; 2 bytes @ 0x9
  3178  0029                     	ds	1
  3179  002A                     ??_bin2bcd:	
  3180  002A                     maxim_31856_read_nregisters@uch_nBytes:	
  3181                           ; 1 bytes @ 0xA
  3182                           
  3183  002A                     WriteAll_1621@i:	
  3184                           ; 1 bytes @ 0xA
  3185                           
  3186  002A                     I2C_Send_Buffer@Flag:	
  3187                           ; 1 bytes @ 0xA
  3188                           
  3189                           
  3190                           ; 1 bytes @ 0xA
  3191  002A                     	ds	1
  3192  002B                     ??_err_Display:	
  3193  002B                     ??_Two_Display:	
  3194                           ; 1 bytes @ 0xB
  3195                           
  3196  002B                     ??_Inf_to_Com:	
  3197                           ; 1 bytes @ 0xB
  3198                           
  3199  002B                     ??_Read_time_to_Com:	
  3200                           ; 1 bytes @ 0xB
  3201                           
  3202  002B                     ??_maxim_31856_read_nregisters:	
  3203                           ; 1 bytes @ 0xB
  3204                           
  3205  002B                     ??___lwdiv:	
  3206                           ; 1 bytes @ 0xB
  3207                           
  3208  002B                     Bq32k_Rtc_Read_Time@temp:	
  3209                           ; 1 bytes @ 0xB
  3210                           
  3211                           
  3212                           ; 10 bytes @ 0xB
  3213  002B                     	ds	1
  3214  002C                     ??_Serach_Flash_Head:	
  3215  002C                     ??_Write_Flash_finish:	
  3216                           ; 1 bytes @ 0xC
  3217                           
  3218  002C                     ??_Write_Flash_head:	
  3219                           ; 1 bytes @ 0xC
  3220                           
  3221  002C                     ___lwdiv@counter:	
  3222                           ; 1 bytes @ 0xC
  3223                           
  3224  002C                     Two_Display@num:	
  3225                           ; 1 bytes @ 0xC
  3226                           
  3227  002C                     err_Display@num:	
  3228                           ; 4 bytes @ 0xC
  3229                           
  3230  002C                     Read_time_to_Com@tmp_buf:	
  3231                           ; 4 bytes @ 0xC
  3232                           
  3233                           
  3234                           ; 16 bytes @ 0xC
  3235  002C                     	ds	1
  3236  002D                     maxim_31856_read_nregisters@uch_register_address:	
  3237  002D                     Serach_Flash_Head@count:	
  3238                           ; 1 bytes @ 0xD
  3239                           
  3240  002D                     ___lwdiv@quotient:	
  3241                           ; 1 bytes @ 0xD
  3242                           
  3243                           
  3244                           ; 2 bytes @ 0xD
  3245  002D                     	ds	1
  3246  002E                     ??_one_temperature_trans:	
  3247  002E                     Serach_Flash_Head@data:	
  3248                           ; 1 bytes @ 0xE
  3249                           
  3250                           
  3251                           ; 2 bytes @ 0xE
  3252  002E                     	ds	1
  3253  002F                     ??_Tc_Display:	
  3254                           
  3255                           ; 1 bytes @ 0xF
  3256  002F                     	ds	1
  3257  0030                     Tc_Display@count:	
  3258  0030                     Two_Display@number:	
  3259                           ; 1 bytes @ 0x10
  3260                           
  3261  0030                     Serach_Flash_Head@i:	
  3262                           ; 1 bytes @ 0x10
  3263                           
  3264                           
  3265                           ; 2 bytes @ 0x10
  3266  0030                     	ds	1
  3267  0031                     bin2bcd@val:	
  3268  0031                     Tc_Display@data:	
  3269                           ; 1 bytes @ 0x11
  3270                           
  3271                           
  3272                           ; 2 bytes @ 0x11
  3273  0031                     	ds	1
  3274  0032                     ??_Bq32k_Rtc_Write_Time:	
  3275                           
  3276                           ; 1 bytes @ 0x12
  3277  0032                     	ds	2
  3278  0034                     Bq32k_Rtc_Write_Time@temp:	
  3279                           
  3280                           ; 10 bytes @ 0x14
  3281  0034                     	ds	1
  3282  0035                     Bq32k_Rtc_Read_Time@p:	
  3283                           
  3284                           ; 1 bytes @ 0x15
  3285  0035                     	ds	1
  3286  0036                     ??_time_Display:	
  3287  0036                     ??_Save_Write_time:	
  3288                           ; 1 bytes @ 0x16
  3289                           
  3290                           
  3291                           ; 1 bytes @ 0x16
  3292  0036                     	ds	2
  3293  0038                     ??_Calculate_Time:	
  3294                           
  3295                           ; 1 bytes @ 0x18
  3296  0038                     	ds	1
  3297  0039                     time_Display@num:	
  3298                           
  3299                           ; 4 bytes @ 0x19
  3300  0039                     	ds	3
  3301  003C                     Read_time_to_Com@crc_tmp:	
  3302                           
  3303                           ; 2 bytes @ 0x1C
  3304  003C                     	ds	2
  3305  003E                     Bq32k_Rtc_Write_Time@p:	
  3306  003E                     Read_time_to_Com@i:	
  3307                           ; 1 bytes @ 0x1E
  3308                           
  3309                           
  3310                           ; 1 bytes @ 0x1E
  3311  003E                     	ds	1
  3312  003F                     ??_Set_time_from_Com:	
  3313                           
  3314                           ; 1 bytes @ 0x1F
  3315  003F                     	ds	1
  3316  0040                     ??_Com_Process:	
  3317                           
  3318                           ; 1 bytes @ 0x20
  3319  0040                     	ds	2
  3320  0042                     Calculate_Time@temp:	
  3321                           
  3322                           ; 4 bytes @ 0x22
  3323  0042                     	ds	4
  3324  0046                     Calculate_Time@temp1:	
  3325                           
  3326                           ; 4 bytes @ 0x26
  3327  0046                     	ds	4
  3328  004A                     Calculate_Time@temp2:	
  3329                           
  3330                           ; 4 bytes @ 0x2A
  3331  004A                     	ds	4
  3332  004E                     ??_Save_process:	
  3333  004E                     ??_tc_temperature_trans:	
  3334                           ; 1 bytes @ 0x2E
  3335                           
  3336                           
  3337                           ; 1 bytes @ 0x2E
  3338  004E                     	ds	2
  3339  0050                     Save_process@var_time:	
  3340                           
  3341                           ; 2 bytes @ 0x30
  3342  0050                     	ds	2
  3343  0052                     tc_temperature_trans@temperature_back:	
  3344                           
  3345                           ; 2 bytes @ 0x32
  3346  0052                     	ds	2
  3347  0054                     tc_temperature_trans@temperature_absolute:	
  3348                           
  3349                           ; 2 bytes @ 0x34
  3350  0054                     	ds	2
  3351  0056                     tc_temperature_trans@var_time:	
  3352                           
  3353                           ; 2 bytes @ 0x36
  3354  0056                     	ds	2
  3355  0058                     tc_temperature_trans@temperature_temp:	
  3356                           
  3357                           ; 2 bytes @ 0x38
  3358  0058                     	ds	2
  3359  005A                     ??_temperature_display:	
  3360                           
  3361                           ; 1 bytes @ 0x3A
  3362  005A                     	ds	1
  3363  005B                     ??_temperature_process:	
  3364  005B                     ??_Key_Process:	
  3365                           ; 1 bytes @ 0x3B
  3366                           
  3367                           
  3368                           ; 1 bytes @ 0x3B
  3369  005B                     	ds	1
  3370  005C                     Key_Process@gKeyValue:	
  3371                           
  3372                           ; 1 bytes @ 0x3C
  3373  005C                     	ds	1
  3374  005D                     ??_main:	
  3375                           
  3376                           ; 1 bytes @ 0x3D
  3377  005D                     	ds	4
  3378                           
  3379                           	psect	maintext
  3380  04E3                     __pmaintext:	
  3381 ;;
  3382 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3383 ;;
  3384 ;; *************** function _main *****************
  3385 ;; Defined at:
  3386 ;;		line 67 in file "main.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  bat_data        2    3[BANK3 ] unsigned int 
  3391 ;;  data_temp       2    0[BANK3 ] unsigned int 
  3392 ;;  i               1    2[BANK3 ] unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : B1F/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3403 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  3404 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3405 ;;      Totals:         0       4       0       0       5       0       0       0       0       0       0       0       
      +0       0
  3406 ;;Total ram usage:        9 bytes
  3407 ;; Hardware stack levels required when called:   12
  3408 ;; This function calls:
  3409 ;;		_Com_Process
  3410 ;;		_Key_Process
  3411 ;;		_SYSTEM_Initialize
  3412 ;;		_Save_process
  3413 ;;		_SendCmd_1621
  3414 ;;		_Serach_Flash_Head
  3415 ;;		_Set_finish_flag
  3416 ;;		_Sleep_process
  3417 ;;		_WriteAll_1621
  3418 ;;		_Write_Flash_finish
  3419 ;;		_temperature_process
  3420 ;; This function is called by:
  3421 ;;		Startup code after reset
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           
  3426                           ;psect for function _main
  3427  04E3                     _main:	
  3428                           
  3429                           ;main.c: 69: unsigned char i=0;
  3430                           
  3431                           ;incstack = 0
  3432                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3433  04E3  0023               	movlb	3	; select bank3
  3434  04E4  01D6               	clrf	main@i^(0+384)
  3435                           
  3436                           ;main.c: 71: unsigned int bat_data = 0;
  3437  04E5  01D7               	clrf	main@bat_data^(0+384)
  3438  04E6  01D8               	clrf	(main@bat_data+1)^(0+384)
  3439                           
  3440                           ;main.c: 72: unsigned int data_temp = 0;
  3441  04E7  01D4               	clrf	main@data_temp^(0+384)
  3442  04E8  01D5               	clrf	(main@data_temp+1)^(0+384)
  3443                           
  3444                           ;main.c: 73: Usart_Run_Flag = 20;
  3445  04E9  3014               	movlw	20
  3446  04EA  0020               	movlb	0	; select bank0
  3447  04EB  00DD               	movwf	??_main
  3448  04EC  085D               	movf	??_main,w
  3449  04ED  0022               	movlb	2	; select bank2
  3450  04EE  00EB               	movwf	_Usart_Run_Flag^(0+256)
  3451                           
  3452                           ;main.c: 74: SWDTEN = 0;
  3453  04EF  0021               	movlb	1	; select bank1
  3454  04F0  1017               	bcf	23,0	;volatile
  3455                           
  3456                           ;main.c: 75: WDTPS0 = 1;
  3457  04F1  1497               	bsf	23,1	;volatile
  3458                           
  3459                           ;main.c: 76: WDTPS1 = 0;
  3460  04F2  1117               	bcf	23,2	;volatile
  3461                           
  3462                           ;main.c: 77: WDTPS2 = 0;
  3463  04F3  1197               	bcf	23,3	;volatile
  3464                           
  3465                           ;main.c: 78: WDTPS3 = 1;
  3466  04F4  1617               	bsf	23,4	;volatile
  3467                           
  3468                           ;main.c: 79: WDTPS4 = 0;
  3469  04F5  1297               	bcf	23,5	;volatile
  3470  04F6  0064               	clrwdt	;# 
  3471                           
  3472                           ;main.c: 82: SYSTEM_Initialize();
  3473  04F7  3188  2000  3184   	fcall	_SYSTEM_Initialize
  3474                           
  3475                           ;main.c: 85: _delay((unsigned long)((3000)*(4000000/4000.0)));
  3476  04FA  3010               	movlw	16
  3477  04FB  0020               	movlb	0	; select bank0
  3478  04FC  00DF               	movwf	??_main+2
  3479  04FD  3039               	movlw	57
  3480  04FE  00DE               	movwf	??_main+1
  3481  04FF  301B               	movlw	27
  3482  0500  00DD               	movwf	??_main
  3483  0501                     u6347:	
  3484  0501  0BDD               	decfsz	??_main,f
  3485  0502  2D01               	goto	u6347
  3486  0503  0BDE               	decfsz	??_main+1,f
  3487  0504  2D01               	goto	u6347
  3488  0505  0BDF               	decfsz	??_main+2,f
  3489  0506  2D01               	goto	u6347
  3490  0507  3200               	nop2
  3491                           
  3492                           ;main.c: 86: if(RB5 == 0 ) do { LATA2 = 1; } while(0);
  3493  0508  0020               	movlb	0	; select bank0
  3494  0509  1A8D               	btfsc	13,5	;volatile
  3495  050A  2D0E               	goto	l488
  3496  050B  0022               	movlb	2	; select bank2
  3497  050C  150C               	bsf	12,2	;volatile
  3498  050D  2D10               	goto	l490
  3499  050E                     l488:	
  3500                           ;main.c: 87: else do { LATA2 = 0; } while(0);
  3501                           
  3502  050E  0022               	movlb	2	; select bank2
  3503  050F  110C               	bcf	12,2	;volatile
  3504  0510                     l490:	
  3505                           ;main.c: 88: do { LATA3 = 0; } while(0);
  3506                           
  3507  0510  118C               	bcf	12,3	;volatile
  3508                           
  3509                           ;main.c: 107: do { TRISB3 = 1; } while(0);
  3510  0511  0021               	movlb	1	; select bank1
  3511  0512  158D               	bsf	13,3	;volatile
  3512                           
  3513                           ;main.c: 109: SendCmd_1621(0x52);
  3514  0513  3052               	movlw	82
  3515  0514  3194  2494  3184   	fcall	_SendCmd_1621
  3516                           
  3517                           ;main.c: 110: SendCmd_1621(0X28);
  3518  0517  3028               	movlw	40
  3519  0518  3194  2494  3184   	fcall	_SendCmd_1621
  3520                           
  3521                           ;main.c: 111: SendCmd_1621(0x02);
  3522  051B  3002               	movlw	2
  3523  051C  3194  2494  3184   	fcall	_SendCmd_1621
  3524                           
  3525                           ;main.c: 112: SendCmd_1621(0x06);
  3526  051F  3006               	movlw	6
  3527  0520  3194  2494  3184   	fcall	_SendCmd_1621
  3528                           
  3529                           ;main.c: 114: WriteAll_1621(0,Dis_TAB+17,4);
  3530  0523  3011               	movlw	low ((_Dis_TAB| (0+32768)+17))
  3531  0524  0020               	movlb	0	; select bank0
  3532  0525  00A5               	movwf	WriteAll_1621@p
  3533  0526  3098               	movlw	high ((_Dis_TAB| (0+32768)+17))
  3534  0527  00A6               	movwf	WriteAll_1621@p+1
  3535  0528  3004               	movlw	4
  3536  0529  00DD               	movwf	??_main
  3537  052A  085D               	movf	??_main,w
  3538  052B  00A7               	movwf	WriteAll_1621@cnt
  3539  052C  3000               	movlw	0
  3540  052D  3188  2015  3184   	fcall	_WriteAll_1621
  3541                           
  3542                           ;main.c: 116: time_count = 0;
  3543  0530  0020               	movlb	0	; select bank0
  3544  0531  01EA               	clrf	_time_count
  3545                           
  3546                           ;main.c: 117: Record_flag = 0;
  3547  0532  01E7               	clrf	_Record_flag
  3548                           
  3549                           ;main.c: 118: Cur_temperature_time_ch1 = 0;
  3550  0533  0022               	movlb	2	; select bank2
  3551  0534  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  3552                           
  3553                           ;main.c: 119: Cur_temperature_time_ch2 = 0;
  3554  0535  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  3555                           
  3556                           ;main.c: 120: CH1_temperature = 0;
  3557  0536  01AA               	clrf	_CH1_temperature^(0+256)
  3558  0537  01AB               	clrf	(_CH1_temperature+1)^(0+256)
  3559                           
  3560                           ;main.c: 121: CH2_temperature = 0;
  3561  0538  01AC               	clrf	_CH2_temperature^(0+256)
  3562  0539  01AD               	clrf	(_CH2_temperature+1)^(0+256)
  3563                           
  3564                           ;main.c: 122: CH1_state = 0;
  3565  053A  01B4               	clrf	_CH1_state^(0+256)
  3566                           
  3567                           ;main.c: 123: CH2_state = 0;
  3568  053B  01B5               	clrf	_CH2_state^(0+256)
  3569                           
  3570                           ;main.c: 124: Usart_Rx_Cnt = 0;
  3571  053C  0020               	movlb	0	; select bank0
  3572  053D  01E8               	clrf	_Usart_Rx_Cnt
  3573                           
  3574                           ;main.c: 125: Set_time_cmd_flag = 0;
  3575  053E  0022               	movlb	2	; select bank2
  3576  053F  01BA               	clrf	_Set_time_cmd_flag^(0+256)
  3577                           
  3578                           ;main.c: 126: Usart_Run_Flag = 0;
  3579  0540  01EB               	clrf	_Usart_Run_Flag^(0+256)
  3580                           
  3581                           ;main.c: 127: Inf_cmd_flag = 0;
  3582  0541  01B8               	clrf	_Inf_cmd_flag^(0+256)
  3583                           
  3584                           ;main.c: 128: Cur_Save_Index_Bak = 0;
  3585  0542  01AE               	clrf	_Cur_Save_Index_Bak^(0+256)
  3586  0543  01AF               	clrf	(_Cur_Save_Index_Bak+1)^(0+256)
  3587                           
  3588                           ;main.c: 129: bat_data = 0;
  3589  0544  0023               	movlb	3	; select bank3
  3590  0545  01D7               	clrf	main@bat_data^(0+384)
  3591  0546  01D8               	clrf	(main@bat_data+1)^(0+384)
  3592                           
  3593                           ;main.c: 130: Cur_Save_Index = 0x2000;
  3594  0547  3000               	movlw	0
  3595  0548  0020               	movlb	0	; select bank0
  3596  0549  00E5               	movwf	_Cur_Save_Index
  3597  054A  3020               	movlw	32
  3598  054B  00E6               	movwf	_Cur_Save_Index+1
  3599                           
  3600                           ;main.c: 131: Serach_Flash_Head();
  3601  054C  3189  21FB  3184   	fcall	_Serach_Flash_Head
  3602  054F  0064               	clrwdt	;# 
  3603                           
  3604                           ;main.c: 134: SWDTEN = 1;
  3605  0550  0021               	movlb	1	; select bank1
  3606  0551  1417               	bsf	23,0	;volatile
  3607  0552                     l494:	
  3608                           ;main.c: 135: while(RB5 == 0) asm("clrwdt");
  3609                           
  3610  0552  0020               	movlb	0	; select bank0
  3611  0553  1A8D               	btfsc	13,5	;volatile
  3612  0554  2D57               	goto	l496
  3613  0555  0064               	clrwdt	;# 
  3614  0556  2D52               	goto	l494
  3615  0557                     l496:	
  3616                           
  3617                           ;main.c: 161: (INTCONbits.GIE = 1);
  3618  0557  178B               	bsf	11,7	;volatile
  3619                           
  3620                           ;main.c: 164: (INTCONbits.PEIE = 1);
  3621  0558  170B               	bsf	11,6	;volatile
  3622  0559                     l6573:	
  3623                           ;main.c: 172: while (1)
  3624                           
  3625                           
  3626                           ;main.c: 173: {
  3627                           ;main.c: 195: temperature_process();
  3628  0559  3188  207F  3184   	fcall	_temperature_process
  3629                           
  3630                           ;main.c: 196: Key_Process();
  3631  055C  318E  26D8  3184   	fcall	_Key_Process
  3632                           
  3633                           ;main.c: 197: Save_process();
  3634  055F  318C  2413  3184   	fcall	_Save_process
  3635                           
  3636                           ;main.c: 198: Com_Process();
  3637  0562  3194  2434  3184   	fcall	_Com_Process
  3638                           
  3639                           ;main.c: 199: if(Record_flag == 1)
  3640  0565  0020               	movlb	0	; select bank0
  3641  0566  0367               	decf	_Record_flag,w
  3642  0567  1D03               	btfss	3,2
  3643  0568  2DB0               	goto	l6595
  3644                           
  3645                           ;main.c: 200: {
  3646                           ;main.c: 201: if( (Cur_Save_Index_Bak - 0x2000 < 32) )
  3647  0569  0022               	movlb	2	; select bank2
  3648  056A  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  3649  056B  3E00               	addlw	0
  3650  056C  0020               	movlb	0	; select bank0
  3651  056D  00DD               	movwf	??_main
  3652  056E  30E0               	movlw	224
  3653  056F  0022               	movlb	2	; select bank2
  3654  0570  3D2F               	addwfc	(_Cur_Save_Index_Bak+1)^(0+256),w
  3655  0571  0020               	movlb	0	; select bank0
  3656  0572  00DE               	movwf	??_main+1
  3657  0573  3000               	movlw	0
  3658  0574  025E               	subwf	??_main+1,w
  3659  0575  3020               	movlw	32
  3660  0576  1903               	skipnz
  3661  0577  025D               	subwf	??_main,w
  3662  0578  1803               	skipnc
  3663  0579  2D86               	goto	l6587
  3664                           
  3665                           ;main.c: 202: {
  3666                           ;main.c: 203: if( 0x3fff - Cur_Save_Index < 32)
  3667  057A  0965               	comf	_Cur_Save_Index,w
  3668  057B  00DD               	movwf	??_main
  3669  057C  0966               	comf	_Cur_Save_Index+1,w
  3670  057D  00DE               	movwf	??_main+1
  3671  057E  0ADD               	incf	??_main,f
  3672  057F  1903               	skipnz
  3673  0580  0ADE               	incf	??_main+1,f
  3674  0581  085D               	movf	??_main,w
  3675  0582  3EFF               	addlw	255
  3676  0583  00DF               	movwf	??_main+2
  3677  0584  303F               	movlw	63
  3678  0585  2DA1               	goto	L1
  3679  0586                     l6587:	
  3680                           ;main.c: 207: }
  3681                           ;main.c: 208: }
  3682                           
  3683                           ;main.c: 206: Write_Flash_finish();
  3684                           
  3685                           ;main.c: 204: {
  3686                           ;main.c: 205: Set_finish_flag();
  3687                           
  3688                           
  3689                           ;main.c: 209: else
  3690                           ;main.c: 210: {
  3691                           ;main.c: 211: if( (Cur_Save_Index_Bak > Cur_Save_Index) && (Cur_Save_Index_Bak - Cur_Sav
      +                          e_Index < 32) )
  3692  0586  0022               	movlb	2	; select bank2
  3693  0587  082F               	movf	(_Cur_Save_Index_Bak+1)^(0+256),w
  3694  0588  0020               	movlb	0	; select bank0
  3695  0589  0266               	subwf	_Cur_Save_Index+1,w
  3696  058A  1D03               	skipz
  3697  058B  2D90               	goto	u6305
  3698  058C  0022               	movlb	2	; select bank2
  3699  058D  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  3700  058E  0020               	movlb	0	; select bank0
  3701  058F  0265               	subwf	_Cur_Save_Index,w
  3702  0590                     u6305:	
  3703  0590  1803               	skipnc
  3704  0591  2DB0               	goto	l6595
  3705  0592  0965               	comf	_Cur_Save_Index,w
  3706  0593  00DD               	movwf	??_main
  3707  0594  0966               	comf	_Cur_Save_Index+1,w
  3708  0595  00DE               	movwf	??_main+1
  3709  0596  0ADD               	incf	??_main,f
  3710  0597  1903               	skipnz
  3711  0598  0ADE               	incf	??_main+1,f
  3712  0599  0022               	movlb	2	; select bank2
  3713  059A  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  3714  059B  0020               	movlb	0	; select bank0
  3715  059C  075D               	addwf	??_main,w
  3716  059D  00DF               	movwf	??_main+2
  3717  059E  0022               	movlb	2	; select bank2
  3718  059F  082F               	movf	(_Cur_Save_Index_Bak+1)^(0+256),w
  3719  05A0  0020               	movlb	0	; select bank0
  3720  05A1                     L1:	
  3721  05A1  3D5E               	addwfc	??_main+1,w
  3722  05A2  00E0               	movwf	??_main+3
  3723  05A3  3000               	movlw	0
  3724  05A4  0260               	subwf	??_main+3,w
  3725  05A5  3020               	movlw	32
  3726  05A6  1903               	skipnz
  3727  05A7  025F               	subwf	??_main+2,w
  3728  05A8  1803               	skipnc
  3729  05A9  2DB0               	goto	l6595
  3730                           
  3731                           ;main.c: 212: {
  3732                           ;main.c: 213: Set_finish_flag();
  3733  05AA  3193  23BC  3184   	fcall	_Set_finish_flag
  3734                           
  3735                           ;main.c: 214: Write_Flash_finish();
  3736  05AD  3194  2404  3184   	fcall	_Write_Flash_finish
  3737  05B0                     l6595:	
  3738                           
  3739                           ;main.c: 215: }
  3740                           ;main.c: 216: }
  3741                           ;main.c: 217: }
  3742                           ;main.c: 221: if(Usart_Run_Flag == 0)
  3743  05B0  0022               	movlb	2	; select bank2
  3744  05B1  086B               	movf	_Usart_Run_Flag^(0+256),w
  3745  05B2  1D03               	btfss	3,2
  3746  05B3  2D59               	goto	l6573
  3747                           
  3748                           ;main.c: 222: {
  3749                           ;main.c: 223: Sleep_process();
  3750  05B4  3195  25A4  3184   	fcall	_Sleep_process
  3751  05B7  2D59               	goto	l6573
  3752  05B8                     __end_of_main:	
  3753                           
  3754                           	psect	text1
  3755  15A4                     __ptext1:	
  3756 ;; *************** function _Sleep_process *****************
  3757 ;; Defined at:
  3758 ;;		line 17 in file "mcc_generated_files/power.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      void 
  3765 ;; Registers used:
  3766 ;;		wreg, status,2, status,0, pclath, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3776 ;;Total ram usage:        0 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    4
  3779 ;; This function calls:
  3780 ;;		_Step_control
  3781 ;; This function is called by:
  3782 ;;		_main
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           
  3787                           ;psect for function _Sleep_process
  3788  15A4                     _Sleep_process:	
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _Sleep_process: [wreg+status,2+status,0+pclath+cstack]
  3792                           ;power.c: 19: do { LATA3 = 1; } while(0);
  3793  15A4  0022               	movlb	2	; select bank2
  3794  15A5  158C               	bsf	12,3	;volatile
  3795                           
  3796                           ;power.c: 20: do { LATA4 = 1; } while(0);
  3797  15A6  160C               	bsf	12,4	;volatile
  3798                           
  3799                           ;power.c: 21: do { LATA0 = 1; } while(0);
  3800  15A7  140C               	bsf	12,0	;volatile
  3801                           
  3802                           ;power.c: 22: do { LATA1 = 1; } while(0);
  3803  15A8  148C               	bsf	12,1	;volatile
  3804                           
  3805                           ;power.c: 26: do { LATC0 = 1; } while(0);
  3806  15A9  140E               	bsf	14,0	;volatile
  3807                           
  3808                           ;power.c: 27: do { LATC2 = 1; } while(0);
  3809  15AA  150E               	bsf	14,2	;volatile
  3810                           
  3811                           ;power.c: 28: do { LATA6 = 1; } while(0);
  3812  15AB  170C               	bsf	12,6	;volatile
  3813                           
  3814                           ;power.c: 29: do { LATC1 = 1; } while(0);
  3815  15AC  148E               	bsf	14,1	;volatile
  3816                           
  3817                           ;power.c: 30: do { LATB0 = 1; } while(0);
  3818  15AD  140D               	bsf	13,0	;volatile
  3819                           
  3820                           ;power.c: 31: do { LATB1 = 1; } while(0);
  3821  15AE  148D               	bsf	13,1	;volatile
  3822  15AF  0063               	sleep	;# 
  3823                           
  3824                           ;power.c: 33: if( time_count == 0 || time_count == 2 )
  3825  15B0  0020               	movlb	0	; select bank0
  3826  15B1  086A               	movf	_time_count,w
  3827  15B2  1903               	btfsc	3,2
  3828  15B3  2DB8               	goto	l1226
  3829  15B4  3002               	movlw	2
  3830  15B5  066A               	xorwf	_time_count,w
  3831  15B6  1D03               	btfss	3,2
  3832  15B7  2DC0               	goto	l6461
  3833  15B8                     l1226:	
  3834                           ;power.c: 34: {
  3835                           ;power.c: 35: do { LATA3 = 0; } while(0);
  3836                           
  3837  15B8  0022               	movlb	2	; select bank2
  3838  15B9  118C               	bcf	12,3	;volatile
  3839                           
  3840                           ;power.c: 36: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  3841  15BA  0020               	movlb	0	; select bank0
  3842  15BB  0367               	decf	_Record_flag,w
  3843  15BC  1D03               	btfss	3,2
  3844  15BD  2DC0               	goto	l6461
  3845  15BE  0022               	movlb	2	; select bank2
  3846  15BF  120C               	bcf	12,4	;volatile
  3847  15C0                     l6461:	
  3848                           
  3849                           ;power.c: 37: }
  3850                           ;power.c: 39: Step_control();
  3851  15C0  3196  26CA         	fcall	_Step_control
  3852  15C2  0008               	return
  3853  15C3                     __end_of_Sleep_process:	
  3854                           
  3855                           	psect	text2
  3856  16CA                     __ptext2:	
  3857 ;; *************** function _Step_control *****************
  3858 ;; Defined at:
  3859 ;;		line 48 in file "mcc_generated_files/power.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;		None
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;		None
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, status,2, status,0
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3877 ;;Total ram usage:        1 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    3
  3880 ;; This function calls:
  3881 ;;		Nothing
  3882 ;; This function is called by:
  3883 ;;		_Sleep_process
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function _Step_control
  3889  16CA                     _Step_control:	
  3890                           
  3891                           ;power.c: 50: time_count++;
  3892                           
  3893                           ;incstack = 0
  3894                           ; Regs used in _Step_control: [wreg+status,2+status,0]
  3895  16CA  3001               	movlw	1
  3896  16CB  0020               	movlb	0	; select bank0
  3897  16CC  00A1               	movwf	??_Step_control
  3898  16CD  0821               	movf	??_Step_control,w
  3899  16CE  07EA               	addwf	_time_count,f
  3900                           
  3901                           ;power.c: 51: if(time_count == 4 || time_count > 12) time_count = 0;
  3902  16CF  3004               	movlw	4
  3903  16D0  066A               	xorwf	_time_count,w
  3904  16D1  1903               	btfsc	3,2
  3905  16D2  2ED7               	goto	l6247
  3906  16D3  300D               	movlw	13
  3907  16D4  026A               	subwf	_time_count,w
  3908  16D5  1C03               	skipc
  3909  16D6  2ED8               	goto	l6249
  3910  16D7                     l6247:	
  3911  16D7  01EA               	clrf	_time_count
  3912  16D8                     l6249:	
  3913                           
  3914                           ;power.c: 53: Cur_temperature_time_ch1++;
  3915  16D8  3001               	movlw	1
  3916  16D9  00A1               	movwf	??_Step_control
  3917  16DA  0821               	movf	??_Step_control,w
  3918  16DB  0022               	movlb	2	; select bank2
  3919  16DC  07B6               	addwf	_Cur_temperature_time_ch1^(0+256),f
  3920                           
  3921                           ;power.c: 54: if(Cur_temperature_time_ch1 > 130)
  3922  16DD  3083               	movlw	131
  3923  16DE  0236               	subwf	_Cur_temperature_time_ch1^(0+256),w
  3924  16DF  1803               	btfsc	3,0
  3925                           
  3926                           ;power.c: 55: {
  3927                           ;power.c: 56: Cur_temperature_time_ch1 = 0;
  3928  16E0  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  3929                           
  3930                           ;power.c: 57: }
  3931                           ;power.c: 59: Cur_temperature_time_ch2++;
  3932  16E1  3001               	movlw	1
  3933  16E2  0020               	movlb	0	; select bank0
  3934  16E3  00A1               	movwf	??_Step_control
  3935  16E4  0821               	movf	??_Step_control,w
  3936  16E5  0022               	movlb	2	; select bank2
  3937  16E6  07B7               	addwf	_Cur_temperature_time_ch2^(0+256),f
  3938                           
  3939                           ;power.c: 60: if(Cur_temperature_time_ch2 > 130)
  3940  16E7  3083               	movlw	131
  3941  16E8  0237               	subwf	_Cur_temperature_time_ch2^(0+256),w
  3942  16E9  1C03               	skipc
  3943  16EA  0008               	return
  3944                           
  3945                           ;power.c: 61: {
  3946                           ;power.c: 62: Cur_temperature_time_ch2= 0;
  3947  16EB  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  3948  16EC  0008               	return
  3949  16ED                     __end_of_Step_control:	
  3950                           
  3951                           	psect	text3
  3952  09FB                     __ptext3:	
  3953 ;; *************** function _Serach_Flash_Head *****************
  3954 ;; Defined at:
  3955 ;;		line 42 in file "mcc_generated_files/save.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;		None
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;  i               2   16[BANK0 ] unsigned int 
  3960 ;;  data            2   14[BANK0 ] unsigned int 
  3961 ;;  count           1   13[BANK0 ] unsigned char 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      void 
  3964 ;; Registers used:
  3965 ;;		wreg, status,2, status,0, pclath, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3972 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3974 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3975 ;;Total ram usage:        6 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    6
  3978 ;; This function calls:
  3979 ;;		_FLASH_ReadWord
  3980 ;;		_Write_Flash_finish
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _Serach_Flash_Head
  3988  09FB                     _Serach_Flash_Head:	
  3989                           
  3990                           ;save.c: 44: unsigned int i=0;
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in _Serach_Flash_Head: [wreg+status,2+status,0+pclath+cstack]
  3994  09FB  0020               	movlb	0	; select bank0
  3995  09FC  01B0               	clrf	Serach_Flash_Head@i
  3996  09FD  01B1               	clrf	Serach_Flash_Head@i+1
  3997                           
  3998                           ;save.c: 45: unsigned int data=0;
  3999  09FE  01AE               	clrf	Serach_Flash_Head@data
  4000  09FF  01AF               	clrf	Serach_Flash_Head@data+1
  4001                           
  4002                           ;save.c: 46: unsigned char count =0;
  4003  0A00  01AD               	clrf	Serach_Flash_Head@count
  4004                           
  4005                           ;save.c: 47: for(i = 0x2000; i<0x3fff;i++ )
  4006  0A01  3000               	movlw	0
  4007  0A02  00B0               	movwf	Serach_Flash_Head@i
  4008  0A03  3020               	movlw	32
  4009  0A04  00B1               	movwf	Serach_Flash_Head@i+1
  4010  0A05                     L2:	
  4011  0A05  303F               	movlw	63
  4012  0A06  0231               	subwf	Serach_Flash_Head@i+1,w
  4013  0A07  30FF               	movlw	255
  4014  0A08  1903               	skipnz
  4015  0A09  0230               	subwf	Serach_Flash_Head@i,w
  4016  0A0A  1803               	btfsc	3,0
  4017  0A0B  0008               	return
  4018                           
  4019                           ;save.c: 48: {
  4020                           ;save.c: 49: data = FLASH_ReadWord(i);
  4021  0A0C  0831               	movf	Serach_Flash_Head@i+1,w
  4022  0A0D  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  4023  0A0E  0830               	movf	Serach_Flash_Head@i,w
  4024  0A0F  00A1               	movwf	FLASH_ReadWord@flashAddr
  4025  0A10  3195  25C3  3189   	fcall	_FLASH_ReadWord
  4026  0A13  0020               	movlb	0	; select bank0
  4027  0A14  0822               	movf	?_FLASH_ReadWord+1,w
  4028  0A15  00AF               	movwf	Serach_Flash_Head@data+1
  4029  0A16  0821               	movf	?_FLASH_ReadWord,w
  4030  0A17  00AE               	movwf	Serach_Flash_Head@data
  4031                           
  4032                           ;save.c: 51: if( data == 0x1555 )
  4033  0A18  3055               	movlw	85
  4034  0A19  062E               	xorwf	Serach_Flash_Head@data,w
  4035  0A1A  3015               	movlw	21
  4036  0A1B  1903               	skipnz
  4037  0A1C  062F               	xorwf	Serach_Flash_Head@data+1,w
  4038  0A1D  1D03               	btfss	3,2
  4039  0A1E  2A24               	goto	l6325
  4040                           
  4041                           ;save.c: 52: {
  4042                           ;save.c: 53: count++;
  4043  0A1F  3001               	movlw	1
  4044  0A20  00AC               	movwf	??_Serach_Flash_Head
  4045  0A21  082C               	movf	??_Serach_Flash_Head,w
  4046  0A22  07AD               	addwf	Serach_Flash_Head@count,f
  4047                           
  4048                           ;save.c: 54: }
  4049  0A23  2A42               	goto	l6343
  4050  0A24                     l6325:	
  4051                           
  4052                           ;save.c: 55: else
  4053                           ;save.c: 56: {
  4054                           ;save.c: 57: if( data == 0x3fff && count >1 )
  4055  0A24  0A2E               	incf	Serach_Flash_Head@data,w
  4056  0A25  303F               	movlw	63
  4057  0A26  1903               	skipnz
  4058  0A27  062F               	xorwf	Serach_Flash_Head@data+1,w
  4059  0A28  1D03               	btfss	3,2
  4060  0A29  2A33               	goto	l6333
  4061  0A2A  3002               	movlw	2
  4062  0A2B  022D               	subwf	Serach_Flash_Head@count,w
  4063  0A2C  1C03               	skipc
  4064  0A2D  2A33               	goto	l6333
  4065                           
  4066                           ;save.c: 58: {
  4067                           ;save.c: 59: Cur_Save_Index = i;
  4068  0A2E  0831               	movf	Serach_Flash_Head@i+1,w
  4069  0A2F  00E6               	movwf	_Cur_Save_Index+1
  4070  0A30  0830               	movf	Serach_Flash_Head@i,w
  4071  0A31  00E5               	movwf	_Cur_Save_Index
  4072                           
  4073                           ;save.c: 60: break;
  4074  0A32  0008               	return
  4075  0A33                     l6333:	
  4076                           ;save.c: 61: }
  4077                           
  4078                           
  4079                           ;save.c: 62: else if( data == 0x3fff )
  4080  0A33  0A2E               	incf	Serach_Flash_Head@data,w
  4081  0A34  303F               	movlw	63
  4082  0A35  1903               	skipnz
  4083  0A36  062F               	xorwf	Serach_Flash_Head@data+1,w
  4084  0A37  1D03               	btfss	3,2
  4085  0A38  2A40               	goto	l6341
  4086                           
  4087                           ;save.c: 63: {
  4088                           ;save.c: 64: Cur_Save_Index = i;
  4089  0A39  0831               	movf	Serach_Flash_Head@i+1,w
  4090  0A3A  00E6               	movwf	_Cur_Save_Index+1
  4091  0A3B  0830               	movf	Serach_Flash_Head@i,w
  4092  0A3C  00E5               	movwf	_Cur_Save_Index
  4093                           
  4094                           ;save.c: 65: Write_Flash_finish();
  4095  0A3D  3194  2404         	fcall	_Write_Flash_finish
  4096                           
  4097                           ;save.c: 66: break;
  4098  0A3F  0008               	return
  4099  0A40                     l6341:	
  4100                           ;save.c: 67: }
  4101                           
  4102                           
  4103                           ;save.c: 68: else
  4104                           ;save.c: 69: {
  4105                           ;save.c: 70: count = 0;
  4106  0A40  0020               	movlb	0	; select bank0
  4107  0A41  01AD               	clrf	Serach_Flash_Head@count
  4108  0A42                     l6343:	
  4109  0A42  3001               	movlw	1
  4110  0A43  0020               	movlb	0	; select bank0
  4111  0A44  07B0               	addwf	Serach_Flash_Head@i,f
  4112  0A45  3000               	movlw	0
  4113  0A46  3DB1               	addwfc	Serach_Flash_Head@i+1,f
  4114  0A47  2A05               	goto	L2
  4115  0A48                     __end_of_Serach_Flash_Head:	
  4116                           
  4117                           	psect	text4
  4118  0C13                     __ptext4:	
  4119 ;; *************** function _Save_process *****************
  4120 ;; Defined at:
  4121 ;;		line 117 in file "mcc_generated_files/save.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  var_time        2   48[BANK0 ] unsigned int 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;Total ram usage:        4 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    8
  4142 ;; This function calls:
  4143 ;;		_Calculate_Time
  4144 ;;		_Save_Write_word
  4145 ;; This function is called by:
  4146 ;;		_main
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           
  4151                           ;psect for function _Save_process
  4152  0C13                     _Save_process:	
  4153                           
  4154                           ;save.c: 119: unsigned int var_time=0;
  4155                           
  4156                           ;incstack = 0
  4157                           ; Regs used in _Save_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4158  0C13  0020               	movlb	0	; select bank0
  4159  0C14  01D0               	clrf	Save_process@var_time
  4160  0C15  01D1               	clrf	Save_process@var_time+1
  4161                           
  4162                           ;save.c: 120: if( time_count == 1 && Record_flag == 1 )
  4163  0C16  036A               	decf	_time_count,w
  4164  0C17  1D03               	btfss	3,2
  4165  0C18  2C48               	goto	l6425
  4166  0C19  0367               	decf	_Record_flag,w
  4167  0C1A  1D03               	btfss	3,2
  4168  0C1B  2C48               	goto	l6425
  4169                           
  4170                           ;save.c: 121: {
  4171                           ;save.c: 122: if(Cur_temperature_time_ch1 > 120)
  4172  0C1C  3079               	movlw	121
  4173  0C1D  0022               	movlb	2	; select bank2
  4174  0C1E  0236               	subwf	_Cur_temperature_time_ch1^(0+256),w
  4175  0C1F  1C03               	skipc
  4176  0C20  0008               	return
  4177                           
  4178                           ;save.c: 123: {
  4179                           ;save.c: 124: var_time = Calculate_Time();
  4180  0C21  3182  2268  318C   	fcall	_Calculate_Time
  4181  0C24  0020               	movlb	0	; select bank0
  4182  0C25  00CE               	movwf	??_Save_process
  4183  0C26  01CF               	clrf	??_Save_process+1
  4184  0C27  084E               	movf	??_Save_process,w
  4185  0C28  00D0               	movwf	Save_process@var_time
  4186  0C29  084F               	movf	??_Save_process+1,w
  4187  0C2A  00D1               	movwf	Save_process@var_time+1
  4188                           
  4189                           ;save.c: 125: var_time |= 0x100;
  4190  0C2B  1451               	bsf	Save_process@var_time+1,0
  4191                           
  4192                           ;save.c: 126: if(CH1_state == 1) var_time |= 0x400;
  4193  0C2C  0022               	movlb	2	; select bank2
  4194  0C2D  0334               	decf	_CH1_state^(0+256),w
  4195  0C2E  1D03               	btfss	3,2
  4196  0C2F  2C32               	goto	l1130
  4197  0C30  0020               	movlb	0	; select bank0
  4198  0C31  1551               	bsf	Save_process@var_time+1,2
  4199  0C32                     l1130:	
  4200                           
  4201                           ;save.c: 127: var_time |= 0x1000;
  4202  0C32  0020               	movlb	0	; select bank0
  4203  0C33  1651               	bsf	Save_process@var_time+1,4
  4204                           
  4205                           ;save.c: 128: Save_Write_word(var_time);
  4206  0C34  0851               	movf	Save_process@var_time+1,w
  4207  0C35  00A7               	movwf	Save_Write_word@data+1
  4208  0C36  0850               	movf	Save_process@var_time,w
  4209  0C37  00A6               	movwf	Save_Write_word@data
  4210  0C38  3186  2689  318C   	fcall	_Save_Write_word
  4211                           
  4212                           ;save.c: 129: Save_Write_word(CH1_temperature);
  4213  0C3B  0022               	movlb	2	; select bank2
  4214  0C3C  082B               	movf	(_CH1_temperature+1)^(0+256),w
  4215  0C3D  0020               	movlb	0	; select bank0
  4216  0C3E  00A7               	movwf	Save_Write_word@data+1
  4217  0C3F  0022               	movlb	2	; select bank2
  4218  0C40  082A               	movf	_CH1_temperature^(0+256),w
  4219  0C41  0020               	movlb	0	; select bank0
  4220  0C42  00A6               	movwf	Save_Write_word@data
  4221  0C43  3186  2689         	fcall	_Save_Write_word
  4222                           
  4223                           ;save.c: 131: Cur_temperature_time_ch1 = 0;
  4224  0C45  0022               	movlb	2	; select bank2
  4225  0C46  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  4226                           
  4227                           ;save.c: 132: }
  4228                           ;save.c: 133: }
  4229  0C47  0008               	return
  4230  0C48                     l6425:	
  4231                           
  4232                           ;save.c: 134: else if(time_count == 3 && Record_flag == 1)
  4233  0C48  3003               	movlw	3
  4234  0C49  0020               	movlb	0	; select bank0
  4235  0C4A  066A               	xorwf	_time_count,w
  4236  0C4B  1D03               	btfss	3,2
  4237  0C4C  0008               	return
  4238  0C4D  0367               	decf	_Record_flag,w
  4239  0C4E  1D03               	btfss	3,2
  4240  0C4F  0008               	return
  4241                           
  4242                           ;save.c: 135: {
  4243                           ;save.c: 136: if(Cur_temperature_time_ch2 > 120)
  4244  0C50  3079               	movlw	121
  4245  0C51  0022               	movlb	2	; select bank2
  4246  0C52  0237               	subwf	_Cur_temperature_time_ch2^(0+256),w
  4247  0C53  1C03               	skipc
  4248  0C54  0008               	return
  4249                           
  4250                           ;save.c: 137: {
  4251                           ;save.c: 138: var_time = Calculate_Time();
  4252  0C55  3182  2268  318C   	fcall	_Calculate_Time
  4253  0C58  0020               	movlb	0	; select bank0
  4254  0C59  00CE               	movwf	??_Save_process
  4255  0C5A  01CF               	clrf	??_Save_process+1
  4256  0C5B  084E               	movf	??_Save_process,w
  4257  0C5C  00D0               	movwf	Save_process@var_time
  4258  0C5D  084F               	movf	??_Save_process+1,w
  4259  0C5E  00D1               	movwf	Save_process@var_time+1
  4260                           
  4261                           ;save.c: 139: var_time |= 0x200;
  4262  0C5F  14D1               	bsf	Save_process@var_time+1,1
  4263                           
  4264                           ;save.c: 140: if(CH2_state == 1) var_time |= 0x800;
  4265  0C60  0022               	movlb	2	; select bank2
  4266  0C61  0335               	decf	_CH2_state^(0+256),w
  4267  0C62  1D03               	btfss	3,2
  4268  0C63  2C66               	goto	l1134
  4269  0C64  0020               	movlb	0	; select bank0
  4270  0C65  15D1               	bsf	Save_process@var_time+1,3
  4271  0C66                     l1134:	
  4272                           
  4273                           ;save.c: 141: var_time |= 0x1000;
  4274  0C66  0020               	movlb	0	; select bank0
  4275  0C67  1651               	bsf	Save_process@var_time+1,4
  4276                           
  4277                           ;save.c: 142: Save_Write_word(var_time);
  4278  0C68  0851               	movf	Save_process@var_time+1,w
  4279  0C69  00A7               	movwf	Save_Write_word@data+1
  4280  0C6A  0850               	movf	Save_process@var_time,w
  4281  0C6B  00A6               	movwf	Save_Write_word@data
  4282  0C6C  3186  2689  318C   	fcall	_Save_Write_word
  4283                           
  4284                           ;save.c: 143: Save_Write_word(CH2_temperature);
  4285  0C6F  0022               	movlb	2	; select bank2
  4286  0C70  082D               	movf	(_CH2_temperature+1)^(0+256),w
  4287  0C71  0020               	movlb	0	; select bank0
  4288  0C72  00A7               	movwf	Save_Write_word@data+1
  4289  0C73  0022               	movlb	2	; select bank2
  4290  0C74  082C               	movf	_CH2_temperature^(0+256),w
  4291  0C75  0020               	movlb	0	; select bank0
  4292  0C76  00A6               	movwf	Save_Write_word@data
  4293  0C77  3186  2689         	fcall	_Save_Write_word
  4294                           
  4295                           ;save.c: 145: Cur_temperature_time_ch2 = 0;
  4296  0C79  0022               	movlb	2	; select bank2
  4297  0C7A  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  4298  0C7B  0008               	return
  4299  0C7C                     __end_of_Save_process:	
  4300                           
  4301                           	psect	text5
  4302  0800                     __ptext5:	
  4303 ;; *************** function _SYSTEM_Initialize *****************
  4304 ;; Defined at:
  4305 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;		None
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  1    wreg      void 
  4312 ;; Registers used:
  4313 ;;		wreg, status,2, status,0, pclath, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;Total ram usage:        0 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    4
  4326 ;; This function calls:
  4327 ;;		_ADC_Initialize
  4328 ;;		_EUSART_Initialize
  4329 ;;		_FVR_Initialize
  4330 ;;		_OSCILLATOR_Initialize
  4331 ;;		_PIN_MANAGER_Initialize
  4332 ;;		_SPI_Initialize
  4333 ;;		_TMR0_Initialize
  4334 ;; This function is called by:
  4335 ;;		_main
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           
  4340                           ;psect for function _SYSTEM_Initialize
  4341  0800                     _SYSTEM_Initialize:	
  4342                           
  4343                           ;mcc.c: 71: OSCILLATOR_Initialize();
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4347  0800  3193  23C1  3188   	fcall	_OSCILLATOR_Initialize
  4348                           
  4349                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  4350  0803  3196  2685  3188   	fcall	_PIN_MANAGER_Initialize
  4351                           
  4352                           ;mcc.c: 73: SPI_Initialize();
  4353  0806  3193  23CC  3188   	fcall	_SPI_Initialize
  4354                           
  4355                           ;mcc.c: 74: EUSART_Initialize();
  4356  0809  3195  2530  3188   	fcall	_EUSART_Initialize
  4357                           
  4358                           ;mcc.c: 75: ADC_Initialize();
  4359  080C  3187  27F8  3188   	fcall	_ADC_Initialize
  4360                           
  4361                           ;mcc.c: 76: FVR_Initialize();
  4362  080F  3193  23B8  3188   	fcall	_FVR_Initialize
  4363                           
  4364                           ;mcc.c: 77: TMR0_Initialize();
  4365  0812  3194  2424         	fcall	_TMR0_Initialize
  4366  0814  0008               	return
  4367  0815                     __end_of_SYSTEM_Initialize:	
  4368                           
  4369                           	psect	text6
  4370  1424                     __ptext6:	
  4371 ;; *************** function _TMR0_Initialize *****************
  4372 ;; Defined at:
  4373 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;		None
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;		None
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  1    wreg      void 
  4380 ;; Registers used:
  4381 ;;		wreg, status,2
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;Total ram usage:        1 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    3
  4394 ;; This function calls:
  4395 ;;		Nothing
  4396 ;; This function is called by:
  4397 ;;		_SYSTEM_Initialize
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           
  4402                           ;psect for function _TMR0_Initialize
  4403  1424                     _TMR0_Initialize:	
  4404                           
  4405                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4406                           
  4407                           ;incstack = 0
  4408                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4409  1424  0021               	movlb	1	; select bank1
  4410  1425  0815               	movf	21,w	;volatile
  4411  1426  39C0               	andlw	192
  4412  1427  3817               	iorlw	23
  4413  1428  0095               	movwf	21	;volatile
  4414                           
  4415                           ;tmr0.c: 73: TMR0 = 0xD9;
  4416  1429  30D9               	movlw	217
  4417  142A  0020               	movlb	0	; select bank0
  4418  142B  0095               	movwf	21	;volatile
  4419                           
  4420                           ;tmr0.c: 76: timer0ReloadVal = 217;
  4421  142C  30D9               	movlw	217
  4422  142D  00A1               	movwf	??_TMR0_Initialize
  4423  142E  0821               	movf	??_TMR0_Initialize,w
  4424  142F  0022               	movlb	2	; select bank2
  4425  1430  00ED               	movwf	_timer0ReloadVal^(0+256)	;volatile
  4426                           
  4427                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  4428  1431  110B               	bcf	11,2	;volatile
  4429                           
  4430                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  4431  1432  168B               	bsf	11,5	;volatile
  4432  1433  0008               	return
  4433  1434                     __end_of_TMR0_Initialize:	
  4434                           
  4435                           	psect	text7
  4436  13CC                     __ptext7:	
  4437 ;; *************** function _SPI_Initialize *****************
  4438 ;; Defined at:
  4439 ;;		line 64 in file "mcc_generated_files/spi.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;		None
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;		None
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  1    wreg      void 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4457 ;;Total ram usage:        0 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    3
  4460 ;; This function calls:
  4461 ;;		Nothing
  4462 ;; This function is called by:
  4463 ;;		_SYSTEM_Initialize
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           
  4468                           ;psect for function _SPI_Initialize
  4469  13CC                     _SPI_Initialize:	
  4470                           
  4471                           ;spi.c: 68: SSP1STAT = 0x00;
  4472                           
  4473                           ;incstack = 0
  4474                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4475  13CC  0024               	movlb	4	; select bank4
  4476  13CD  0194               	clrf	20	;volatile
  4477                           
  4478                           ;spi.c: 71: SSP1CON1 = 0x30;
  4479  13CE  3030               	movlw	48
  4480  13CF  0095               	movwf	21	;volatile
  4481                           
  4482                           ;spi.c: 74: SSP1ADD = 0x00;
  4483  13D0  0192               	clrf	18	;volatile
  4484  13D1  0008               	return
  4485  13D2                     __end_of_SPI_Initialize:	
  4486                           
  4487                           	psect	text8
  4488  1685                     __ptext8:	
  4489 ;; *************** function _PIN_MANAGER_Initialize *****************
  4490 ;; Defined at:
  4491 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;Total ram usage:        0 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    3
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_SYSTEM_Initialize
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           
  4520                           ;psect for function _PIN_MANAGER_Initialize
  4521  1685                     _PIN_MANAGER_Initialize:	
  4522                           
  4523                           ;pin_manager.c: 51: LATA = 0x7B;
  4524                           
  4525                           ;incstack = 0
  4526                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4527  1685  307B               	movlw	123
  4528  1686  0022               	movlb	2	; select bank2
  4529  1687  008C               	movwf	12	;volatile
  4530                           
  4531                           ;pin_manager.c: 52: TRISA = 0x80;
  4532  1688  3080               	movlw	128
  4533  1689  0021               	movlb	1	; select bank1
  4534  168A  008C               	movwf	12	;volatile
  4535                           
  4536                           ;pin_manager.c: 53: ANSELA = 0x00;
  4537  168B  0023               	movlb	3	; select bank3
  4538  168C  018C               	clrf	12	;volatile
  4539                           
  4540                           ;pin_manager.c: 55: LATB = 0x00;
  4541  168D  0022               	movlb	2	; select bank2
  4542  168E  018D               	clrf	13	;volatile
  4543                           
  4544                           ;pin_manager.c: 56: TRISB = 0xFC;
  4545  168F  30FC               	movlw	252
  4546  1690  0021               	movlb	1	; select bank1
  4547  1691  008D               	movwf	13	;volatile
  4548                           
  4549                           ;pin_manager.c: 57: ANSELB = 0x10;
  4550  1692  3010               	movlw	16
  4551  1693  0023               	movlb	3	; select bank3
  4552  1694  008D               	movwf	13	;volatile
  4553                           
  4554                           ;pin_manager.c: 58: WPUB = 0x2C;
  4555  1695  302C               	movlw	44
  4556  1696  0024               	movlb	4	; select bank4
  4557  1697  008D               	movwf	13	;volatile
  4558                           
  4559                           ;pin_manager.c: 60: LATC = 0x07;
  4560  1698  3007               	movlw	7
  4561  1699  0022               	movlb	2	; select bank2
  4562  169A  008E               	movwf	14	;volatile
  4563                           
  4564                           ;pin_manager.c: 61: TRISC = 0xD0;
  4565  169B  30D0               	movlw	208
  4566  169C  0021               	movlb	1	; select bank1
  4567  169D  008E               	movwf	14	;volatile
  4568                           
  4569                           ;pin_manager.c: 62: ANSELC = 0x00;
  4570  169E  0023               	movlb	3	; select bank3
  4571  169F  018E               	clrf	14	;volatile
  4572                           
  4573                           ;pin_manager.c: 64: WPUE = 0x00;
  4574  16A0  0024               	movlb	4	; select bank4
  4575  16A1  0190               	clrf	16	;volatile
  4576                           
  4577                           ;pin_manager.c: 66: OPTION_REGbits.nWPUEN = 0x00;
  4578  16A2  0021               	movlb	1	; select bank1
  4579  16A3  1395               	bcf	21,7	;volatile
  4580                           
  4581                           ;pin_manager.c: 68: APFCON = 0x00;
  4582  16A4  0022               	movlb	2	; select bank2
  4583  16A5  019D               	clrf	29	;volatile
  4584  16A6  0008               	return
  4585  16A7                     __end_of_PIN_MANAGER_Initialize:	
  4586                           
  4587                           	psect	text9
  4588  13C1                     __ptext9:	
  4589 ;; *************** function _OSCILLATOR_Initialize *****************
  4590 ;; Defined at:
  4591 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;		None
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;		None
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      void 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;Total ram usage:        0 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    3
  4612 ;; This function calls:
  4613 ;;		Nothing
  4614 ;; This function is called by:
  4615 ;;		_SYSTEM_Initialize
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           
  4620                           ;psect for function _OSCILLATOR_Initialize
  4621  13C1                     _OSCILLATOR_Initialize:	
  4622                           
  4623                           ;mcc.c: 82: OSCCON = 0x68;
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4627  13C1  3068               	movlw	104
  4628  13C2  0021               	movlb	1	; select bank1
  4629  13C3  0099               	movwf	25	;volatile
  4630                           
  4631                           ;mcc.c: 84: OSCSTAT = 0x00;
  4632  13C4  019A               	clrf	26	;volatile
  4633  13C5  0008               	return
  4634  13C6                     __end_of_OSCILLATOR_Initialize:	
  4635                           
  4636                           	psect	text10
  4637  13B8                     __ptext10:	
  4638 ;; *************** function _FVR_Initialize *****************
  4639 ;; Defined at:
  4640 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;		None
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;		None
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;Total ram usage:        0 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    3
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_SYSTEM_Initialize
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _FVR_Initialize
  4670  13B8                     _FVR_Initialize:	
  4671                           
  4672                           ;fvr.c: 60: FVRCON = 0x82;
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _FVR_Initialize: [wreg]
  4676  13B8  3082               	movlw	130
  4677  13B9  0022               	movlb	2	; select bank2
  4678  13BA  0097               	movwf	23	;volatile
  4679  13BB  0008               	return
  4680  13BC                     __end_of_FVR_Initialize:	
  4681                           
  4682                           	psect	text11
  4683  1530                     __ptext11:	
  4684 ;; *************** function _EUSART_Initialize *****************
  4685 ;; Defined at:
  4686 ;;		line 78 in file "mcc_generated_files/eusart.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;		None
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, status,2
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4703 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;Total ram usage:        1 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    3
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_SYSTEM_Initialize
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           
  4715                           ;psect for function _EUSART_Initialize
  4716  1530                     _EUSART_Initialize:	
  4717                           
  4718                           ;eusart.c: 80: PIE1bits.RCIE = 0;
  4719                           
  4720                           ;incstack = 0
  4721                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4722  1530  0021               	movlb	1	; select bank1
  4723  1531  1291               	bcf	17,5	;volatile
  4724                           
  4725                           ;eusart.c: 81: PIE1bits.TXIE = 0;
  4726  1532  1211               	bcf	17,4	;volatile
  4727                           
  4728                           ;eusart.c: 86: BAUDCON = 0x48;
  4729  1533  3048               	movlw	72
  4730  1534  0023               	movlb	3	; select bank3
  4731  1535  009F               	movwf	31	;volatile
  4732                           
  4733                           ;eusart.c: 89: RCSTA = 0x90;
  4734  1536  3090               	movlw	144
  4735  1537  009D               	movwf	29	;volatile
  4736                           
  4737                           ;eusart.c: 92: TXSTA = 0x26;
  4738  1538  3026               	movlw	38
  4739  1539  009E               	movwf	30	;volatile
  4740                           
  4741                           ;eusart.c: 95: SPBRGL = 0x33;
  4742  153A  3033               	movlw	51
  4743  153B  009B               	movwf	27	;volatile
  4744                           
  4745                           ;eusart.c: 98: SPBRGH = 0x00;
  4746  153C  019C               	clrf	28	;volatile
  4747                           
  4748                           ;eusart.c: 102: eusartTxHead = 0;
  4749  153D  0022               	movlb	2	; select bank2
  4750  153E  01BE               	clrf	_eusartTxHead^(0+256)
  4751                           
  4752                           ;eusart.c: 103: eusartTxTail = 0;
  4753  153F  01BF               	clrf	_eusartTxTail^(0+256)
  4754                           
  4755                           ;eusart.c: 104: eusartTxBufferRemaining = sizeof (eusartTxBuffer);
  4756  1540  3008               	movlw	8
  4757  1541  0020               	movlb	0	; select bank0
  4758  1542  00A1               	movwf	??_EUSART_Initialize
  4759  1543  0821               	movf	??_EUSART_Initialize,w
  4760  1544  0022               	movlb	2	; select bank2
  4761  1545  00EC               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  4762                           
  4763                           ;eusart.c: 106: eusartRxHead = 0;
  4764  1546  01BC               	clrf	_eusartRxHead^(0+256)
  4765                           
  4766                           ;eusart.c: 107: eusartRxTail = 0;
  4767  1547  01BD               	clrf	_eusartRxTail^(0+256)
  4768                           
  4769                           ;eusart.c: 108: eusartRxCount = 0;
  4770  1548  01BB               	clrf	_eusartRxCount^(0+256)	;volatile
  4771                           
  4772                           ;eusart.c: 111: PIE1bits.RCIE = 1;
  4773  1549  0021               	movlb	1	; select bank1
  4774  154A  1691               	bsf	17,5	;volatile
  4775  154B  0008               	return
  4776  154C                     __end_of_EUSART_Initialize:	
  4777                           
  4778                           	psect	text12
  4779  07F8                     __ptext12:	
  4780 ;; *************** function _ADC_Initialize *****************
  4781 ;; Defined at:
  4782 ;;		line 65 in file "mcc_generated_files/adc.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;		None
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;		None
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      void 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4800 ;;Total ram usage:        0 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    3
  4803 ;; This function calls:
  4804 ;;		Nothing
  4805 ;; This function is called by:
  4806 ;;		_SYSTEM_Initialize
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           
  4811                           ;psect for function _ADC_Initialize
  4812  07F8                     _ADC_Initialize:	
  4813                           
  4814                           ;adc.c: 69: ADCON0 = 0x01;
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4818  07F8  3001               	movlw	1
  4819  07F9  0021               	movlb	1	; select bank1
  4820  07FA  009D               	movwf	29	;volatile
  4821                           
  4822                           ;adc.c: 72: ADCON1 = 0xC3;
  4823  07FB  30C3               	movlw	195
  4824  07FC  009E               	movwf	30	;volatile
  4825                           
  4826                           ;adc.c: 75: ADRESL = 0x00;
  4827  07FD  019B               	clrf	27	;volatile
  4828                           
  4829                           ;adc.c: 78: ADRESH = 0x00;
  4830  07FE  019C               	clrf	28	;volatile
  4831  07FF  0008               	return
  4832  0800                     __end_of_ADC_Initialize:	
  4833                           
  4834                           	psect	text13
  4835  0ED8                     __ptext13:	
  4836 ;; *************** function _Key_Process *****************
  4837 ;; Defined at:
  4838 ;;		line 42 in file "mcc_generated_files/key.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;  gKeyValue       1   60[BANK0 ] unsigned char 
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;Total ram usage:        2 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:   11
  4859 ;; This function calls:
  4860 ;;		_FLASH_EraseBlock
  4861 ;;		_Key_Scan
  4862 ;;		_Save_Write_time
  4863 ;;		_SendCmd_1621
  4864 ;;		_Set_finish_flag
  4865 ;;		_Set_start_flag
  4866 ;;		_Write_Flash_finish
  4867 ;;		_Write_Flash_head
  4868 ;;		_temperature_process
  4869 ;; This function is called by:
  4870 ;;		_main
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           
  4875                           ;psect for function _Key_Process
  4876  0ED8                     _Key_Process:	
  4877                           
  4878                           ;key.c: 44: unsigned char gKeyValue=0;
  4879                           
  4880                           ;incstack = 0
  4881                           ; Regs used in _Key_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4882  0ED8  0020               	movlb	0	; select bank0
  4883  0ED9  01DC               	clrf	Key_Process@gKeyValue
  4884                           
  4885                           ;key.c: 49: LongPressSec = 0;
  4886  0EDA  0021               	movlb	1	; select bank1
  4887  0EDB  01EE               	clrf	_LongPressSec^(0+128)
  4888                           
  4889                           ;key.c: 50: gKeyValue=Key_Scan();
  4890  0EDC  3196  26A7  318E   	fcall	_Key_Scan
  4891  0EDF  0020               	movlb	0	; select bank0
  4892  0EE0  00DB               	movwf	??_Key_Process
  4893  0EE1  085B               	movf	??_Key_Process,w
  4894  0EE2  00DC               	movwf	Key_Process@gKeyValue
  4895                           
  4896                           ;key.c: 51: if(gKeyValue)
  4897  0EE3  085C               	movf	Key_Process@gKeyValue,w
  4898  0EE4  1903               	btfsc	3,2
  4899  0EE5  0008               	return
  4900                           
  4901                           ;key.c: 52: {
  4902                           ;key.c: 53: do { LATA3 = 0; } while(0);
  4903  0EE6  0022               	movlb	2	; select bank2
  4904  0EE7  118C               	bcf	12,3	;volatile
  4905                           
  4906                           ;key.c: 54: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  4907  0EE8  0020               	movlb	0	; select bank0
  4908  0EE9  0367               	decf	_Record_flag,w
  4909  0EEA  1D03               	btfss	3,2
  4910  0EEB  2F5F               	goto	l6403
  4911  0EEC  0022               	movlb	2	; select bank2
  4912  0EED  120C               	bcf	12,4	;volatile
  4913                           
  4914                           ;key.c: 55: switch(gKeyValue)
  4915  0EEE  2F5F               	goto	l6403
  4916  0EEF                     l998:	
  4917                           ;key.c: 58: while( !(LongPressSec > 2 || RB5 == 1) ) asm("clrwdt");
  4918                           
  4919                           ;key.c: 56: {
  4920                           ;key.c: 57: case 0x01:
  4921                           
  4922  0EEF  0064               	clrwdt	;# 
  4923  0EF0                     l6355:	
  4924  0EF0  3003               	movlw	3
  4925  0EF1  0021               	movlb	1	; select bank1
  4926  0EF2  026E               	subwf	_LongPressSec^(0+128),w
  4927  0EF3  1803               	skipnc
  4928  0EF4  2EF8               	goto	l6359
  4929  0EF5  0020               	movlb	0	; select bank0
  4930  0EF6  1E8D               	btfss	13,5	;volatile
  4931  0EF7  2EEF               	goto	l998
  4932  0EF8                     l6359:	
  4933                           
  4934                           ;key.c: 59: if(LongPressSec > 2)
  4935  0EF8  3003               	movlw	3
  4936  0EF9  0021               	movlb	1	; select bank1
  4937  0EFA  026E               	subwf	_LongPressSec^(0+128),w
  4938  0EFB  1C03               	skipc
  4939  0EFC  2F04               	goto	l1007
  4940                           
  4941                           ;key.c: 60: {
  4942                           ;key.c: 61: do { LATA2 = 0; } while(0);
  4943  0EFD  0022               	movlb	2	; select bank2
  4944  0EFE  110C               	bcf	12,2	;volatile
  4945                           
  4946                           ;key.c: 62: do { LATA3 = 1; } while(0);
  4947  0EFF  158C               	bsf	12,3	;volatile
  4948                           
  4949                           ;key.c: 63: SendCmd_1621(0x04);
  4950  0F00  3004               	movlw	4
  4951  0F01  3194  2494  318E   	fcall	_SendCmd_1621
  4952  0F04                     l1007:	
  4953                           ;key.c: 64: }
  4954                           ;key.c: 66: while(RB5 == 0) asm("clrwdt");
  4955                           
  4956  0F04  0020               	movlb	0	; select bank0
  4957  0F05  1A8D               	btfsc	13,5	;volatile
  4958  0F06  0008               	return
  4959  0F07  0064               	clrwdt	;# 
  4960  0F08  2F04               	goto	l1007
  4961  0F09                     l1013:	
  4962                           ;key.c: 69: while( !(LongPressSec > 2 || RA7 == 1) )asm("clrwdt");
  4963                           
  4964                           ;key.c: 68: case 0x02:
  4965                           
  4966                           ;key.c: 67: break;
  4967                           
  4968  0F09  0064               	clrwdt	;# 
  4969  0F0A                     l6363:	
  4970  0F0A  3003               	movlw	3
  4971  0F0B  0021               	movlb	1	; select bank1
  4972  0F0C  026E               	subwf	_LongPressSec^(0+128),w
  4973  0F0D  1803               	skipnc
  4974  0F0E  2F12               	goto	l6367
  4975  0F0F  0020               	movlb	0	; select bank0
  4976  0F10  1F8C               	btfss	12,7	;volatile
  4977  0F11  2F09               	goto	l1013
  4978  0F12                     l6367:	
  4979                           
  4980                           ;key.c: 70: if(LongPressSec > 2)
  4981  0F12  3003               	movlw	3
  4982  0F13  0021               	movlb	1	; select bank1
  4983  0F14  026E               	subwf	_LongPressSec^(0+128),w
  4984  0F15  1C03               	skipc
  4985  0F16  2F52               	goto	l6397
  4986                           
  4987                           ;key.c: 71: {
  4988                           ;key.c: 72: if(Record_flag == 0)
  4989  0F17  0020               	movlb	0	; select bank0
  4990  0F18  0867               	movf	_Record_flag,w
  4991  0F19  1D03               	btfss	3,2
  4992  0F1A  2F4B               	goto	l6393
  4993                           
  4994                           ;key.c: 73: {
  4995                           ;key.c: 74: if( Cur_Save_Index > 0x3fff - 32) FLASH_EraseBlock(0x2000);
  4996  0F1B  303F               	movlw	63
  4997  0F1C  0266               	subwf	_Cur_Save_Index+1,w
  4998  0F1D  30E0               	movlw	224
  4999  0F1E  1903               	skipnz
  5000  0F1F  0265               	subwf	_Cur_Save_Index,w
  5001  0F20  1C03               	skipc
  5002  0F21  2F26               	goto	l6375
  5003  0F22  3000               	movlw	0
  5004  0F23  00A1               	movwf	FLASH_EraseBlock@startAddr
  5005  0F24  3020               	movlw	32
  5006  0F25  2F2C               	goto	L3
  5007  0F26                     l6375:	
  5008                           
  5009                           ;key.c: 75: else FLASH_EraseBlock(Cur_Save_Index+32);
  5010  0F26  0020               	movlb	0	; select bank0
  5011  0F27  0865               	movf	_Cur_Save_Index,w
  5012  0F28  3E20               	addlw	32
  5013  0F29  00A1               	movwf	FLASH_EraseBlock@startAddr
  5014  0F2A  3000               	movlw	0
  5015  0F2B  3D66               	addwfc	_Cur_Save_Index+1,w
  5016  0F2C                     L3:	
  5017  0F2C  00A2               	movwf	FLASH_EraseBlock@startAddr+1
  5018  0F2D  3196  2623  318E   	fcall	_FLASH_EraseBlock
  5019                           
  5020                           ;key.c: 76: Set_start_flag();
  5021  0F30  3193  23C6  318E   	fcall	_Set_start_flag
  5022                           
  5023                           ;key.c: 77: Cur_Save_Index_Bak = Cur_Save_Index;
  5024  0F33  0020               	movlb	0	; select bank0
  5025  0F34  0866               	movf	_Cur_Save_Index+1,w
  5026  0F35  0022               	movlb	2	; select bank2
  5027  0F36  00AF               	movwf	(_Cur_Save_Index_Bak+1)^(0+256)
  5028  0F37  0020               	movlb	0	; select bank0
  5029  0F38  0865               	movf	_Cur_Save_Index,w
  5030  0F39  0022               	movlb	2	; select bank2
  5031  0F3A  00AE               	movwf	_Cur_Save_Index_Bak^(0+256)
  5032                           
  5033                           ;key.c: 78: Write_Flash_head();
  5034  0F3B  3194  2414  318E   	fcall	_Write_Flash_head
  5035                           
  5036                           ;key.c: 79: Save_Write_time();
  5037  0F3E  318E  2656  318E   	fcall	_Save_Write_time
  5038                           
  5039                           ;key.c: 80: Cur_temperature_time_ch1 = 0;
  5040  0F41  0022               	movlb	2	; select bank2
  5041  0F42  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  5042                           
  5043                           ;key.c: 81: Cur_temperature_time_ch2 = 0;
  5044  0F43  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  5045                           
  5046                           ;key.c: 82: CH1_temperature = 0;
  5047  0F44  01AA               	clrf	_CH1_temperature^(0+256)
  5048  0F45  01AB               	clrf	(_CH1_temperature+1)^(0+256)
  5049                           
  5050                           ;key.c: 83: CH2_temperature = 0;
  5051  0F46  01AC               	clrf	_CH2_temperature^(0+256)
  5052  0F47  01AD               	clrf	(_CH2_temperature+1)^(0+256)
  5053                           
  5054                           ;key.c: 84: time_count = 0;
  5055  0F48  0020               	movlb	0	; select bank0
  5056  0F49  01EA               	clrf	_time_count
  5057                           
  5058                           ;key.c: 85: }
  5059  0F4A  2F5A               	goto	l1023
  5060  0F4B                     l6393:	
  5061                           
  5062                           ;key.c: 86: else
  5063                           ;key.c: 87: {
  5064                           ;key.c: 88: Set_finish_flag();
  5065  0F4B  3193  23BC  318E   	fcall	_Set_finish_flag
  5066                           
  5067                           ;key.c: 89: Write_Flash_finish();
  5068  0F4E  3194  2404  318E   	fcall	_Write_Flash_finish
  5069                           
  5070                           ;key.c: 90: }
  5071                           ;key.c: 91: }
  5072  0F51  2F5A               	goto	l1023
  5073  0F52                     l6397:	
  5074                           
  5075                           ;key.c: 92: else
  5076                           ;key.c: 93: {
  5077                           ;key.c: 94: time_count = 5;
  5078  0F52  3005               	movlw	5
  5079  0F53  0020               	movlb	0	; select bank0
  5080  0F54  00DB               	movwf	??_Key_Process
  5081  0F55  085B               	movf	??_Key_Process,w
  5082  0F56  00EA               	movwf	_time_count
  5083                           
  5084                           ;key.c: 95: temperature_process();
  5085  0F57  3188  207F  318E   	fcall	_temperature_process
  5086  0F5A                     l1023:	
  5087                           ;key.c: 96: }
  5088                           ;key.c: 97: while(RA7 == 0)asm("clrwdt");
  5089                           
  5090  0F5A  0020               	movlb	0	; select bank0
  5091  0F5B  1B8C               	btfsc	12,7	;volatile
  5092  0F5C  0008               	return
  5093  0F5D  0064               	clrwdt	;# 
  5094  0F5E  2F5A               	goto	l1023
  5095  0F5F                     l6403:	
  5096                           ;key.c: 100: }
  5097                           
  5098                           ;key.c: 99: default:break;
  5099                           
  5100                           ;key.c: 98: break;
  5101                           
  5102  0F5F  0020               	movlb	0	; select bank0
  5103  0F60  085C               	movf	Key_Process@gKeyValue,w
  5104                           
  5105                           ; Switch size 1, requested type "space"
  5106                           ; Number of cases is 2, Range of values is 1 to 2
  5107                           ; switch strategies available:
  5108                           ; Name         Instructions Cycles
  5109                           ; simple_byte            7     4 (average)
  5110                           ; direct_byte           13     9 (fixed)
  5111                           ; jumptable            263     9 (fixed)
  5112                           ;	Chosen strategy is simple_byte
  5113  0F61  3A01               	xorlw	1	; case 1
  5114  0F62  1903               	skipnz
  5115  0F63  2EF0               	goto	l6355
  5116  0F64  3A03               	xorlw	3	; case 2
  5117  0F65  1903               	skipnz
  5118  0F66  2F0A               	goto	l6363
  5119  0F67  2F69               	goto	l1027
  5120  0F68  0008               	return
  5121  0F69                     l1027:	
  5122  0F69  0008               	return
  5123  0F6A                     __end_of_Key_Process:	
  5124                           
  5125                           	psect	text14
  5126  087F                     __ptext14:	
  5127 ;; *************** function _temperature_process *****************
  5128 ;; Defined at:
  5129 ;;		line 375 in file "mcc_generated_files/max31856.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:   10
  5150 ;; This function calls:
  5151 ;;		_Two_Display
  5152 ;;		_one_temperature_trans
  5153 ;;		_temperature_display
  5154 ;;		_time_Display
  5155 ;; This function is called by:
  5156 ;;		_main
  5157 ;;		_Key_Process
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function _temperature_process
  5163  087F                     _temperature_process:	
  5164                           
  5165                           ;max31856.c: 377: switch(time_count)
  5166                           
  5167                           ;incstack = 0
  5168                           ; Regs used in _temperature_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5169  087F  28A3               	goto	l6217
  5170  0880                     l6185:	
  5171                           ;max31856.c: 378: {
  5172                           ;max31856.c: 379: case 0:
  5173                           
  5174                           
  5175                           ;max31856.c: 380: Two_Display(1);
  5176  0880  3001               	movlw	1
  5177  0881  3197  27CF  3188   	fcall	_Two_Display
  5178                           
  5179                           ;max31856.c: 381: do { LATA1 = 1; } while(0);
  5180  0884  0022               	movlb	2	; select bank2
  5181  0885  148C               	bsf	12,1	;volatile
  5182                           
  5183                           ;max31856.c: 382: do { LATA0 = 1; } while(0);
  5184  0886  140C               	bsf	12,0	;volatile
  5185                           
  5186                           ;max31856.c: 383: do { LATA0 = 0; } while(0);
  5187  0887  100C               	bcf	12,0	;volatile
  5188                           
  5189                           ;max31856.c: 384: one_temperature_trans();
  5190  0888  3189  21B1         	fcall	_one_temperature_trans
  5191                           
  5192                           ;max31856.c: 385: do { LATA0 = 1; } while(0);
  5193  088A  0022               	movlb	2	; select bank2
  5194  088B  140C               	bsf	12,0	;volatile
  5195                           
  5196                           ;max31856.c: 386: break;
  5197  088C  0008               	return
  5198  088D                     l6197:	
  5199                           ;max31856.c: 387: case 1:
  5200                           
  5201                           
  5202                           ;max31856.c: 388: temperature_display();
  5203  088D  3189  212D         	fcall	_temperature_display
  5204                           
  5205                           ;max31856.c: 389: break;
  5206  088F  0008               	return
  5207  0890                     l6199:	
  5208                           ;max31856.c: 390: case 2:
  5209                           
  5210                           
  5211                           ;max31856.c: 391: Two_Display(2);
  5212  0890  3002               	movlw	2
  5213  0891  3197  27CF  3188   	fcall	_Two_Display
  5214                           
  5215                           ;max31856.c: 392: do { LATA0 = 1; } while(0);
  5216  0894  0022               	movlb	2	; select bank2
  5217  0895  140C               	bsf	12,0	;volatile
  5218                           
  5219                           ;max31856.c: 393: do { LATA1 = 1; } while(0);
  5220  0896  148C               	bsf	12,1	;volatile
  5221                           
  5222                           ;max31856.c: 394: do { LATA1 = 0; } while(0);
  5223  0897  108C               	bcf	12,1	;volatile
  5224                           
  5225                           ;max31856.c: 395: one_temperature_trans();
  5226  0898  3189  21B1         	fcall	_one_temperature_trans
  5227                           
  5228                           ;max31856.c: 396: do { LATA1 = 1; } while(0);
  5229  089A  0022               	movlb	2	; select bank2
  5230  089B  148C               	bsf	12,1	;volatile
  5231                           
  5232                           ;max31856.c: 397: break;
  5233  089C  0008               	return
  5234  089D                     l6211:	
  5235                           ;max31856.c: 398: case 3:
  5236                           
  5237                           
  5238                           ;max31856.c: 399: temperature_display();
  5239  089D  3189  212D         	fcall	_temperature_display
  5240                           
  5241                           ;max31856.c: 400: break;
  5242  089F  0008               	return
  5243  08A0                     l6213:	
  5244                           ;max31856.c: 401: case 5:
  5245                           
  5246                           
  5247                           ;max31856.c: 402: time_Display();
  5248  08A0  318F  276A         	fcall	_time_Display
  5249                           
  5250                           ;max31856.c: 405: }
  5251                           
  5252                           ;max31856.c: 404: default:break;
  5253                           
  5254                           ;max31856.c: 403: break;
  5255  08A2  0008               	return
  5256  08A3                     l6217:	
  5257  08A3  0020               	movlb	0	; select bank0
  5258  08A4  086A               	movf	_time_count,w
  5259                           
  5260                           ; Switch size 1, requested type "space"
  5261                           ; Number of cases is 5, Range of values is 0 to 5
  5262                           ; switch strategies available:
  5263                           ; Name         Instructions Cycles
  5264                           ; simple_byte           16     9 (average)
  5265                           ; direct_byte           18     6 (fixed)
  5266                           ; jumptable            260     6 (fixed)
  5267                           ;	Chosen strategy is simple_byte
  5268  08A5  3A00               	xorlw	0	; case 0
  5269  08A6  1903               	skipnz
  5270  08A7  2880               	goto	l6185
  5271  08A8  3A01               	xorlw	1	; case 1
  5272  08A9  1903               	skipnz
  5273  08AA  288D               	goto	l6197
  5274  08AB  3A03               	xorlw	3	; case 2
  5275  08AC  1903               	skipnz
  5276  08AD  2890               	goto	l6199
  5277  08AE  3A01               	xorlw	1	; case 3
  5278  08AF  1903               	skipnz
  5279  08B0  289D               	goto	l6211
  5280  08B1  3A06               	xorlw	6	; case 5
  5281  08B2  1903               	skipnz
  5282  08B3  28A0               	goto	l6213
  5283  08B4  28B5               	goto	l700
  5284  08B5                     l700:	
  5285  08B5  0008               	return
  5286  08B6                     __end_of_temperature_process:	
  5287                           
  5288                           	psect	text15
  5289  0F6A                     __ptext15:	
  5290 ;; *************** function _time_Display *****************
  5291 ;; Defined at:
  5292 ;;		line 167 in file "mcc_generated_files/ht1621.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;		None
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;  num             4   25[BANK0 ] unsigned char [4]
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  1    wreg      void 
  5299 ;; Registers used:
  5300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5310 ;;Total ram usage:        7 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    6
  5313 ;; This function calls:
  5314 ;;		_Bq32k_Rtc_Read_Time
  5315 ;;		_WriteAll_1621
  5316 ;;		___awdiv
  5317 ;;		___awmod
  5318 ;; This function is called by:
  5319 ;;		_temperature_process
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           
  5324                           ;psect for function _time_Display
  5325  0F6A                     _time_Display:	
  5326                           
  5327                           ;ht1621.c: 169: unsigned char num[4]={0};
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in _time_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5331  0F6A  0023               	movlb	3	; select bank3
  5332  0F6B  0833               	movf	(time_Display@F2144+3)^(0+384),w
  5333  0F6C  0020               	movlb	0	; select bank0
  5334  0F6D  00BC               	movwf	time_Display@num+3
  5335  0F6E  0023               	movlb	3	; select bank3
  5336  0F6F  0832               	movf	(time_Display@F2144+2)^(0+384),w
  5337  0F70  0020               	movlb	0	; select bank0
  5338  0F71  00BB               	movwf	time_Display@num+2
  5339  0F72  0023               	movlb	3	; select bank3
  5340  0F73  0831               	movf	(time_Display@F2144+1)^(0+384),w
  5341  0F74  0020               	movlb	0	; select bank0
  5342  0F75  00BA               	movwf	time_Display@num+1
  5343  0F76  0023               	movlb	3	; select bank3
  5344  0F77  0830               	movf	time_Display@F2144^(0+384),w
  5345  0F78  0020               	movlb	0	; select bank0
  5346  0F79  00B9               	movwf	time_Display@num
  5347                           
  5348                           ;ht1621.c: 170: Bq32k_Rtc_Read_Time(&rtc_tm);
  5349  0F7A  3060               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  5350  0F7B  318C  247C  318F   	fcall	_Bq32k_Rtc_Read_Time
  5351                           
  5352                           ;ht1621.c: 171: num[0] = Dis_TAB[rtc_tm.hours / 10];
  5353  0F7E  300A               	movlw	10
  5354  0F7F  0020               	movlb	0	; select bank0
  5355  0F80  00A1               	movwf	___awdiv@divisor
  5356  0F81  3000               	movlw	0
  5357  0F82  00A2               	movwf	___awdiv@divisor+1
  5358  0F83  0022               	movlb	2	; select bank2
  5359  0F84  0862               	movf	(_rtc_tm^(0+256)+2),w
  5360  0F85  0020               	movlb	0	; select bank0
  5361  0F86  00B6               	movwf	??_time_Display
  5362  0F87  01B7               	clrf	??_time_Display+1
  5363  0F88  0836               	movf	??_time_Display,w
  5364  0F89  00A3               	movwf	___awdiv@dividend
  5365  0F8A  0837               	movf	??_time_Display+1,w
  5366  0F8B  00A4               	movwf	___awdiv@dividend+1
  5367  0F8C  318A  2248  318F   	fcall	___awdiv
  5368  0F8F  0020               	movlb	0	; select bank0
  5369  0F90  0822               	movf	?___awdiv+1,w
  5370  0F91  0085               	movwf	5
  5371  0F92  0821               	movf	?___awdiv,w
  5372  0F93  0084               	movwf	4
  5373  0F94  3000               	movlw	low (_Dis_TAB| (0+32768))
  5374  0F95  0784               	addwf	4,f
  5375  0F96  3098               	movlw	high (_Dis_TAB| (0+32768))
  5376  0F97  3D85               	addwfc	5,f
  5377  0F98  0800               	movf	0,w	;code access
  5378  0F99  00B8               	movwf	??_time_Display+2
  5379  0F9A  0838               	movf	??_time_Display+2,w
  5380  0F9B  00B9               	movwf	time_Display@num
  5381                           
  5382                           ;ht1621.c: 172: num[0] |= 0x08;
  5383  0F9C  15B9               	bsf	time_Display@num,3
  5384                           
  5385                           ;ht1621.c: 173: num[1] = Dis_TAB[rtc_tm.hours % 10];
  5386  0F9D  300A               	movlw	10
  5387  0F9E  00A1               	movwf	___awmod@divisor
  5388  0F9F  3000               	movlw	0
  5389  0FA0  00A2               	movwf	___awmod@divisor+1
  5390  0FA1  0022               	movlb	2	; select bank2
  5391  0FA2  0862               	movf	(_rtc_tm^(0+256)+2),w
  5392  0FA3  0020               	movlb	0	; select bank0
  5393  0FA4  00B6               	movwf	??_time_Display
  5394  0FA5  01B7               	clrf	??_time_Display+1
  5395  0FA6  0836               	movf	??_time_Display,w
  5396  0FA7  00A3               	movwf	___awmod@dividend
  5397  0FA8  0837               	movf	??_time_Display+1,w
  5398  0FA9  00A4               	movwf	___awmod@dividend+1
  5399  0FAA  3189  216B  318F   	fcall	___awmod
  5400  0FAD  0020               	movlb	0	; select bank0
  5401  0FAE  0822               	movf	?___awmod+1,w
  5402  0FAF  0085               	movwf	5
  5403  0FB0  0821               	movf	?___awmod,w
  5404  0FB1  0084               	movwf	4
  5405  0FB2  3000               	movlw	low (_Dis_TAB| (0+32768))
  5406  0FB3  0784               	addwf	4,f
  5407  0FB4  3098               	movlw	high (_Dis_TAB| (0+32768))
  5408  0FB5  3D85               	addwfc	5,f
  5409  0FB6  0800               	movf	0,w	;code access
  5410  0FB7  00B8               	movwf	??_time_Display+2
  5411  0FB8  0838               	movf	??_time_Display+2,w
  5412  0FB9  00BA               	movwf	time_Display@num+1
  5413                           
  5414                           ;ht1621.c: 174: num[2] = Dis_TAB[rtc_tm.minutes / 10];
  5415  0FBA  300A               	movlw	10
  5416  0FBB  00A1               	movwf	___awdiv@divisor
  5417  0FBC  3000               	movlw	0
  5418  0FBD  00A2               	movwf	___awdiv@divisor+1
  5419  0FBE  0022               	movlb	2	; select bank2
  5420  0FBF  0861               	movf	(_rtc_tm^(0+256)+1),w
  5421  0FC0  0020               	movlb	0	; select bank0
  5422  0FC1  00B6               	movwf	??_time_Display
  5423  0FC2  01B7               	clrf	??_time_Display+1
  5424  0FC3  0836               	movf	??_time_Display,w
  5425  0FC4  00A3               	movwf	___awdiv@dividend
  5426  0FC5  0837               	movf	??_time_Display+1,w
  5427  0FC6  00A4               	movwf	___awdiv@dividend+1
  5428  0FC7  318A  2248  318F   	fcall	___awdiv
  5429  0FCA  0020               	movlb	0	; select bank0
  5430  0FCB  0822               	movf	?___awdiv+1,w
  5431  0FCC  0085               	movwf	5
  5432  0FCD  0821               	movf	?___awdiv,w
  5433  0FCE  0084               	movwf	4
  5434  0FCF  3000               	movlw	low (_Dis_TAB| (0+32768))
  5435  0FD0  0784               	addwf	4,f
  5436  0FD1  3098               	movlw	high (_Dis_TAB| (0+32768))
  5437  0FD2  3D85               	addwfc	5,f
  5438  0FD3  0800               	movf	0,w	;code access
  5439  0FD4  00B8               	movwf	??_time_Display+2
  5440  0FD5  0838               	movf	??_time_Display+2,w
  5441  0FD6  00BB               	movwf	time_Display@num+2
  5442                           
  5443                           ;ht1621.c: 175: num[3] = Dis_TAB[rtc_tm.minutes % 10];
  5444  0FD7  300A               	movlw	10
  5445  0FD8  00A1               	movwf	___awmod@divisor
  5446  0FD9  3000               	movlw	0
  5447  0FDA  00A2               	movwf	___awmod@divisor+1
  5448  0FDB  0022               	movlb	2	; select bank2
  5449  0FDC  0861               	movf	(_rtc_tm^(0+256)+1),w
  5450  0FDD  0020               	movlb	0	; select bank0
  5451  0FDE  00B6               	movwf	??_time_Display
  5452  0FDF  01B7               	clrf	??_time_Display+1
  5453  0FE0  0836               	movf	??_time_Display,w
  5454  0FE1  00A3               	movwf	___awmod@dividend
  5455  0FE2  0837               	movf	??_time_Display+1,w
  5456  0FE3  00A4               	movwf	___awmod@dividend+1
  5457  0FE4  3189  216B  318F   	fcall	___awmod
  5458  0FE7  0020               	movlb	0	; select bank0
  5459  0FE8  0822               	movf	?___awmod+1,w
  5460  0FE9  0085               	movwf	5
  5461  0FEA  0821               	movf	?___awmod,w
  5462  0FEB  0084               	movwf	4
  5463  0FEC  3000               	movlw	low (_Dis_TAB| (0+32768))
  5464  0FED  0784               	addwf	4,f
  5465  0FEE  3098               	movlw	high (_Dis_TAB| (0+32768))
  5466  0FEF  3D85               	addwfc	5,f
  5467  0FF0  0800               	movf	0,w	;code access
  5468  0FF1  00B8               	movwf	??_time_Display+2
  5469  0FF2  0838               	movf	??_time_Display+2,w
  5470  0FF3  00BC               	movwf	time_Display@num+3
  5471                           
  5472                           ;ht1621.c: 176: WriteAll_1621(0, num, 4);
  5473  0FF4  3039               	movlw	low time_Display@num
  5474  0FF5  00A5               	movwf	WriteAll_1621@p
  5475  0FF6  3000               	movlw	high time_Display@num
  5476  0FF7  00A6               	movwf	WriteAll_1621@p+1
  5477  0FF8  3004               	movlw	4
  5478  0FF9  00B6               	movwf	??_time_Display
  5479  0FFA  0836               	movf	??_time_Display,w
  5480  0FFB  00A7               	movwf	WriteAll_1621@cnt
  5481  0FFC  3000               	movlw	0
  5482  0FFD  3188  2015         	fcall	_WriteAll_1621
  5483  0FFF  0008               	return
  5484  1000                     __end_of_time_Display:	
  5485                           
  5486                           	psect	text16
  5487  092D                     __ptext16:	
  5488 ;; *************** function _temperature_display *****************
  5489 ;; Defined at:
  5490 ;;		line 337 in file "mcc_generated_files/max31856.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;		None
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;		None
  5495 ;; Return value:  Size  Location     Type
  5496 ;;                  1    wreg      void 
  5497 ;; Registers used:
  5498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5508 ;;Total ram usage:        1 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; Hardware stack levels required when called:    9
  5511 ;; This function calls:
  5512 ;;		_Tc_Display
  5513 ;;		_err_Display
  5514 ;;		_maxim_31856_write_register
  5515 ;;		_maxim_clear_fault_status
  5516 ;;		_tc_temperature_trans
  5517 ;; This function is called by:
  5518 ;;		_temperature_process
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function _temperature_display
  5524  092D                     _temperature_display:	
  5525                           
  5526                           ;max31856.c: 339: if(uch_sr==(uint8_t)0x00)
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in _temperature_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5530  092D  0022               	movlb	2	; select bank2
  5531  092E  0849               	movf	_uch_sr^(0+256),w
  5532  092F  1D03               	btfss	3,2
  5533  0930  2946               	goto	l6037
  5534                           
  5535                           ;max31856.c: 340: {
  5536                           ;max31856.c: 341: tc_temperature_trans();
  5537  0931  3180  2058  3189   	fcall	_tc_temperature_trans
  5538                           
  5539                           ;max31856.c: 342: Tc_Display();
  5540  0934  3185  25B8  3189   	fcall	_Tc_Display
  5541                           
  5542                           ;max31856.c: 343: if(time_count == 1)
  5543  0937  0020               	movlb	0	; select bank0
  5544  0938  036A               	decf	_time_count,w
  5545  0939  1D03               	btfss	3,2
  5546  093A  293E               	goto	l6033
  5547                           
  5548                           ;max31856.c: 344: {
  5549                           ;max31856.c: 345: CH1_state = 0;
  5550  093B  0022               	movlb	2	; select bank2
  5551  093C  01B4               	clrf	_CH1_state^(0+256)
  5552                           
  5553                           ;max31856.c: 346: }
  5554  093D  0008               	return
  5555  093E                     l6033:	
  5556                           
  5557                           ;max31856.c: 347: else if(time_count == 3)
  5558  093E  3003               	movlw	3
  5559  093F  0020               	movlb	0	; select bank0
  5560  0940  066A               	xorwf	_time_count,w
  5561  0941  1D03               	btfss	3,2
  5562  0942  0008               	return
  5563                           
  5564                           ;max31856.c: 348: {
  5565                           ;max31856.c: 349: CH2_state = 0;
  5566  0943  0022               	movlb	2	; select bank2
  5567  0944  01B5               	clrf	_CH2_state^(0+256)
  5568                           
  5569                           ;max31856.c: 350: }
  5570                           ;max31856.c: 351: }
  5571  0945  0008               	return
  5572  0946                     l6037:	
  5573                           
  5574                           ;max31856.c: 352: else
  5575                           ;max31856.c: 353: {
  5576                           ;max31856.c: 354: if(time_count == 1)
  5577  0946  0020               	movlb	0	; select bank0
  5578  0947  036A               	decf	_time_count,w
  5579  0948  1D03               	btfss	3,2
  5580  0949  294E               	goto	l6041
  5581                           
  5582                           ;max31856.c: 355: {
  5583                           ;max31856.c: 356: CH1_state = 1;
  5584  094A  0022               	movlb	2	; select bank2
  5585  094B  01B4               	clrf	_CH1_state^(0+256)
  5586  094C  0AB4               	incf	_CH1_state^(0+256),f
  5587                           
  5588                           ;max31856.c: 357: }
  5589  094D  2956               	goto	l6045
  5590  094E                     l6041:	
  5591                           
  5592                           ;max31856.c: 358: else if(time_count == 3)
  5593  094E  3003               	movlw	3
  5594  094F  0020               	movlb	0	; select bank0
  5595  0950  066A               	xorwf	_time_count,w
  5596  0951  1D03               	btfss	3,2
  5597  0952  2956               	goto	l6045
  5598                           
  5599                           ;max31856.c: 359: {
  5600                           ;max31856.c: 360: CH2_state = 1;
  5601  0953  0022               	movlb	2	; select bank2
  5602  0954  01B5               	clrf	_CH2_state^(0+256)
  5603  0955  0AB5               	incf	_CH2_state^(0+256),f
  5604  0956                     l6045:	
  5605                           
  5606                           ;max31856.c: 361: }
  5607                           ;max31856.c: 362: err_Display();
  5608  0956  3197  2718  3189   	fcall	_err_Display
  5609                           
  5610                           ;max31856.c: 363: maxim_31856_write_register(0x82, 0xFF);
  5611  0959  30FF               	movlw	255
  5612  095A  0020               	movlb	0	; select bank0
  5613  095B  00DA               	movwf	??_temperature_display
  5614  095C  085A               	movf	??_temperature_display,w
  5615  095D  00A2               	movwf	maxim_31856_write_register@uch_register_value
  5616  095E  3082               	movlw	130
  5617  095F  3193  23F4  3189   	fcall	_maxim_31856_write_register
  5618                           
  5619                           ;max31856.c: 364: maxim_clear_fault_status();
  5620  0962  3194  2457  3189   	fcall	_maxim_clear_fault_status
  5621                           
  5622                           ;max31856.c: 365: maxim_31856_write_register(0x82, 0x00);
  5623  0965  0020               	movlb	0	; select bank0
  5624  0966  01A2               	clrf	maxim_31856_write_register@uch_register_value
  5625  0967  3082               	movlw	130
  5626  0968  3193  23F4         	fcall	_maxim_31856_write_register
  5627  096A  0008               	return
  5628  096B                     __end_of_temperature_display:	
  5629                           
  5630                           	psect	text17
  5631  0058                     __ptext17:	
  5632 ;; *************** function _tc_temperature_trans *****************
  5633 ;; Defined at:
  5634 ;;		line 168 in file "mcc_generated_files/max31856.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;		None
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;  temperature_    2   56[BANK0 ] unsigned int 
  5639 ;;  var_time        2   54[BANK0 ] unsigned int 
  5640 ;;  temperature_    2   52[BANK0 ] unsigned int 
  5641 ;;  temperature_    2   50[BANK0 ] unsigned int 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      void 
  5644 ;; Registers used:
  5645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;Total ram usage:       12 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    8
  5658 ;; This function calls:
  5659 ;;		_Calculate_Time
  5660 ;;		_Save_Write_word
  5661 ;; This function is called by:
  5662 ;;		_temperature_display
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           
  5667                           ;psect for function _tc_temperature_trans
  5668  0058                     _tc_temperature_trans:	
  5669                           
  5670                           ;max31856.c: 170: unsigned int temperature_absolute = 0;
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in _tc_temperature_trans: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5674  0058  0020               	movlb	0	; select bank0
  5675  0059  01D4               	clrf	tc_temperature_trans@temperature_absolute
  5676  005A  01D5               	clrf	tc_temperature_trans@temperature_absolute+1
  5677                           
  5678                           ;max31856.c: 171: unsigned int temperature_temp = 0;
  5679  005B  01D8               	clrf	tc_temperature_trans@temperature_temp
  5680  005C  01D9               	clrf	tc_temperature_trans@temperature_temp+1
  5681                           
  5682                           ;max31856.c: 172: unsigned int temperature_back = 0;
  5683  005D  01D2               	clrf	tc_temperature_trans@temperature_back
  5684  005E  01D3               	clrf	tc_temperature_trans@temperature_back+1
  5685                           
  5686                           ;max31856.c: 173: unsigned int var_time=0;
  5687  005F  01D6               	clrf	tc_temperature_trans@var_time
  5688  0060  01D7               	clrf	tc_temperature_trans@var_time+1
  5689                           
  5690                           ;max31856.c: 174: temperature_value = 0;
  5691  0061  3000               	movlw	0
  5692  0062  00E4               	movwf	_temperature_value+3
  5693  0063  3000               	movlw	0
  5694  0064  00E3               	movwf	_temperature_value+2
  5695  0065  3000               	movlw	0
  5696  0066  00E2               	movwf	_temperature_value+1
  5697  0067  3000               	movlw	0
  5698  0068  00E1               	movwf	_temperature_value
  5699                           
  5700                           ;max31856.c: 175: temperature_value = (((uch_ltcbh&0x3f)<<8) | (uch_ltcbm) )>>1;
  5701  0069  303F               	movlw	63
  5702  006A  0022               	movlb	2	; select bank2
  5703  006B  0545               	andwf	_uch_ltcbh^(0+256),w
  5704  006C  0020               	movlb	0	; select bank0
  5705  006D  00CE               	movwf	??_tc_temperature_trans
  5706  006E  084E               	movf	??_tc_temperature_trans,w
  5707  006F  00D0               	movwf	??_tc_temperature_trans+2
  5708  0070  0022               	movlb	2	; select bank2
  5709  0071  0847               	movf	_uch_ltcbm^(0+256),w
  5710  0072  0020               	movlb	0	; select bank0
  5711  0073  00CF               	movwf	??_tc_temperature_trans+1
  5712  0074  0D50               	rlf	??_tc_temperature_trans+2,w
  5713  0075  0CD0               	rrf	??_tc_temperature_trans+2,f
  5714  0076  0CCF               	rrf	??_tc_temperature_trans+1,f
  5715  0077  084F               	movf	??_tc_temperature_trans+1,w
  5716  0078  00E1               	movwf	_temperature_value
  5717  0079  0850               	movf	??_tc_temperature_trans+2,w
  5718  007A  00E2               	movwf	_temperature_value+1
  5719  007B  0D89               	rlf	9,f
  5720  007C  3B89               	subwfb	9,f
  5721  007D  0989               	comf	9,f
  5722  007E  00E3               	movwf	_temperature_value+2
  5723  007F  00E4               	movwf	_temperature_value+3
  5724                           
  5725                           ;max31856.c: 176: if(uch_ltcbh & 0x80) temperature_value |=0x2000;
  5726  0080  0022               	movlb	2	; select bank2
  5727  0081  1FC5               	btfss	_uch_ltcbh^(0+256),7
  5728  0082  2885               	goto	l5761
  5729  0083  0020               	movlb	0	; select bank0
  5730  0084  16E2               	bsf	_temperature_value+1,5
  5731  0085                     l5761:	
  5732                           
  5733                           ;max31856.c: 177: temperature_temp = temperature_value;
  5734  0085  0020               	movlb	0	; select bank0
  5735  0086  0862               	movf	_temperature_value+1,w
  5736  0087  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  5737  0088  0861               	movf	_temperature_value,w
  5738  0089  00D8               	movwf	tc_temperature_trans@temperature_temp
  5739                           
  5740                           ;max31856.c: 180: if(time_count == 1 && Record_flag == 1)
  5741  008A  036A               	decf	_time_count,w
  5742  008B  1D03               	btfss	3,2
  5743  008C  293B               	goto	l5815
  5744  008D  0367               	decf	_Record_flag,w
  5745  008E  1D03               	btfss	3,2
  5746  008F  293B               	goto	l5815
  5747                           
  5748                           ;max31856.c: 181: {
  5749                           ;max31856.c: 182: temperature_back = CH1_temperature;
  5750  0090  0022               	movlb	2	; select bank2
  5751  0091  082B               	movf	(_CH1_temperature+1)^(0+256),w
  5752  0092  0020               	movlb	0	; select bank0
  5753  0093  00D3               	movwf	tc_temperature_trans@temperature_back+1
  5754  0094  0022               	movlb	2	; select bank2
  5755  0095  082A               	movf	_CH1_temperature^(0+256),w
  5756  0096  0020               	movlb	0	; select bank0
  5757  0097  00D2               	movwf	tc_temperature_trans@temperature_back
  5758                           
  5759                           ;max31856.c: 183: if( CH1_temperature & 0x2000 != temperature_temp & 0x2000)
  5760  0098  3020               	movlw	32
  5761  0099  0659               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5762  009A  0458               	iorwf	tc_temperature_trans@temperature_temp,w
  5763  009B  1903               	btfsc	3,2
  5764  009C  289F               	goto	u5290
  5765  009D  3001               	movlw	1
  5766  009E  28A0               	goto	u5300
  5767  009F                     u5290:	
  5768  009F  3000               	movlw	0
  5769  00A0                     u5300:	
  5770  00A0  00CE               	movwf	??_tc_temperature_trans
  5771  00A1  01CF               	clrf	??_tc_temperature_trans+1
  5772  00A2  0022               	movlb	2	; select bank2
  5773  00A3  082A               	movf	_CH1_temperature^(0+256),w
  5774  00A4  0020               	movlb	0	; select bank0
  5775  00A5  054E               	andwf	??_tc_temperature_trans,w
  5776  00A6  00D0               	movwf	??_tc_temperature_trans+2
  5777  00A7  0022               	movlb	2	; select bank2
  5778  00A8  082B               	movf	(_CH1_temperature+1)^(0+256),w
  5779  00A9  0020               	movlb	0	; select bank0
  5780  00AA  054F               	andwf	??_tc_temperature_trans+1,w
  5781  00AB  00D1               	movwf	??_tc_temperature_trans+3
  5782  00AC  1AD1               	btfsc	??_tc_temperature_trans+3,5
  5783  00AD  2907               	goto	L8
  5784                           
  5785                           ;max31856.c: 194: else
  5786                           ;max31856.c: 195: {
  5787                           ;max31856.c: 196: if(CH1_temperature & 0x2000) CH1_temperature=0x3FFF-CH1_temperature + 
      +                          1 ;
  5788                           
  5789                           ;max31856.c: 193: }
  5790                           
  5791                           ;max31856.c: 192: CH1_temperature = temperature_value;
  5792                           
  5793                           ;max31856.c: 191: Cur_temperature_time_ch1 = 0;
  5794                           
  5795                           ;max31856.c: 190: Save_Write_word(temperature_value);
  5796                           
  5797                           ;max31856.c: 189: Save_Write_word(var_time);
  5798                           
  5799                           ;max31856.c: 188: var_time |= 0x2000;
  5800                           
  5801                           ;max31856.c: 187: if(CH1_state == 1) var_time |= 0x400;
  5802                           
  5803                           ;max31856.c: 186: var_time |= 0x100;
  5804                           
  5805                           ;max31856.c: 184: {
  5806                           ;max31856.c: 185: var_time = Calculate_Time();
  5807  00AE  0022               	movlb	2	; select bank2
  5808  00AF  1EAB               	btfss	(_CH1_temperature+1)^(0+256),5
  5809  00B0  28C4               	goto	l5787
  5810  00B1  092A               	comf	_CH1_temperature^(0+256),w
  5811  00B2  0020               	movlb	0	; select bank0
  5812  00B3  00CE               	movwf	??_tc_temperature_trans
  5813  00B4  0022               	movlb	2	; select bank2
  5814  00B5  092B               	comf	(_CH1_temperature+1)^(0+256),w
  5815  00B6  0020               	movlb	0	; select bank0
  5816  00B7  00CF               	movwf	??_tc_temperature_trans+1
  5817  00B8  0ACE               	incf	??_tc_temperature_trans,f
  5818  00B9  1903               	skipnz
  5819  00BA  0ACF               	incf	??_tc_temperature_trans+1,f
  5820  00BB  084E               	movf	??_tc_temperature_trans,w
  5821  00BC  3E00               	addlw	0
  5822  00BD  0022               	movlb	2	; select bank2
  5823  00BE  00AA               	movwf	_CH1_temperature^(0+256)
  5824  00BF  3040               	movlw	64
  5825  00C0  0020               	movlb	0	; select bank0
  5826  00C1  3D4F               	addwfc	??_tc_temperature_trans+1,w
  5827  00C2  0022               	movlb	2	; select bank2
  5828  00C3  00AB               	movwf	(_CH1_temperature+1)^(0+256)
  5829  00C4                     l5787:	
  5830                           
  5831                           ;max31856.c: 197: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  5832  00C4  0020               	movlb	0	; select bank0
  5833  00C5  1ED9               	btfss	tc_temperature_trans@temperature_temp+1,5
  5834  00C6  28D4               	goto	l5791
  5835  00C7  0958               	comf	tc_temperature_trans@temperature_temp,w
  5836  00C8  00CE               	movwf	??_tc_temperature_trans
  5837  00C9  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  5838  00CA  00CF               	movwf	??_tc_temperature_trans+1
  5839  00CB  0ACE               	incf	??_tc_temperature_trans,f
  5840  00CC  1903               	skipnz
  5841  00CD  0ACF               	incf	??_tc_temperature_trans+1,f
  5842  00CE  084E               	movf	??_tc_temperature_trans,w
  5843  00CF  3E00               	addlw	0
  5844  00D0  00D8               	movwf	tc_temperature_trans@temperature_temp
  5845  00D1  3040               	movlw	64
  5846  00D2  3D4F               	addwfc	??_tc_temperature_trans+1,w
  5847  00D3  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  5848  00D4                     l5791:	
  5849                           
  5850                           ;max31856.c: 198: if( temperature_temp > CH1_temperature ) temperature_absolute = temper
      +                          ature_temp - CH1_temperature;
  5851  00D4  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  5852  00D5  0022               	movlb	2	; select bank2
  5853  00D6  022B               	subwf	(_CH1_temperature+1)^(0+256),w
  5854  00D7  1D03               	skipz
  5855  00D8  28DD               	goto	u5355
  5856  00D9  0020               	movlb	0	; select bank0
  5857  00DA  0858               	movf	tc_temperature_trans@temperature_temp,w
  5858  00DB  0022               	movlb	2	; select bank2
  5859  00DC  022A               	subwf	_CH1_temperature^(0+256),w
  5860  00DD                     u5355:	
  5861  00DD  1803               	skipnc
  5862  00DE  28EE               	goto	l5795
  5863  00DF  092A               	comf	_CH1_temperature^(0+256),w
  5864  00E0  0020               	movlb	0	; select bank0
  5865  00E1  00CE               	movwf	??_tc_temperature_trans
  5866  00E2  0022               	movlb	2	; select bank2
  5867  00E3  092B               	comf	(_CH1_temperature+1)^(0+256),w
  5868  00E4  0020               	movlb	0	; select bank0
  5869  00E5  00CF               	movwf	??_tc_temperature_trans+1
  5870  00E6  0ACE               	incf	??_tc_temperature_trans,f
  5871  00E7  1903               	skipnz
  5872  00E8  0ACF               	incf	??_tc_temperature_trans+1,f
  5873  00E9  0858               	movf	tc_temperature_trans@temperature_temp,w
  5874  00EA  074E               	addwf	??_tc_temperature_trans,w
  5875  00EB  00D4               	movwf	tc_temperature_trans@temperature_absolute
  5876  00EC  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  5877  00ED  28FE               	goto	L4
  5878  00EE                     l5795:	
  5879                           
  5880                           ;max31856.c: 199: else temperature_absolute = CH1_temperature - temperature_temp;
  5881  00EE  0020               	movlb	0	; select bank0
  5882  00EF  0958               	comf	tc_temperature_trans@temperature_temp,w
  5883  00F0  00CE               	movwf	??_tc_temperature_trans
  5884  00F1  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  5885  00F2  00CF               	movwf	??_tc_temperature_trans+1
  5886  00F3  0ACE               	incf	??_tc_temperature_trans,f
  5887  00F4  1903               	skipnz
  5888  00F5  0ACF               	incf	??_tc_temperature_trans+1,f
  5889  00F6  0022               	movlb	2	; select bank2
  5890  00F7  082A               	movf	_CH1_temperature^(0+256),w
  5891  00F8  0020               	movlb	0	; select bank0
  5892  00F9  074E               	addwf	??_tc_temperature_trans,w
  5893  00FA  00D4               	movwf	tc_temperature_trans@temperature_absolute
  5894  00FB  0022               	movlb	2	; select bank2
  5895  00FC  082B               	movf	(_CH1_temperature+1)^(0+256),w
  5896  00FD  0020               	movlb	0	; select bank0
  5897  00FE                     L4:	
  5898  00FE  3D4F               	addwfc	??_tc_temperature_trans+1,w
  5899  00FF  00D5               	movwf	tc_temperature_trans@temperature_absolute+1
  5900                           
  5901                           ;max31856.c: 200: if( temperature_absolute > 3)
  5902  0100  3000               	movlw	0
  5903  0101  0255               	subwf	tc_temperature_trans@temperature_absolute+1,w
  5904  0102  3004               	movlw	4
  5905  0103  1903               	skipnz
  5906  0104  0254               	subwf	tc_temperature_trans@temperature_absolute,w
  5907  0105  1C03               	skipc
  5908  0106  2932               	goto	l5813
  5909  0107                     L8:	
  5910                           
  5911                           ;max31856.c: 202: {
  5912                           ;max31856.c: 203: var_time = Calculate_Time();
  5913  0107  3182  2268  3180   	fcall	_Calculate_Time
  5914  010A  0020               	movlb	0	; select bank0
  5915  010B  00CE               	movwf	??_tc_temperature_trans
  5916  010C  01CF               	clrf	??_tc_temperature_trans+1
  5917  010D  084E               	movf	??_tc_temperature_trans,w
  5918  010E  00D6               	movwf	tc_temperature_trans@var_time
  5919  010F  084F               	movf	??_tc_temperature_trans+1,w
  5920  0110  00D7               	movwf	tc_temperature_trans@var_time+1
  5921                           
  5922                           ;max31856.c: 204: var_time |= 0x100;
  5923  0111  1457               	bsf	tc_temperature_trans@var_time+1,0
  5924                           
  5925                           ;max31856.c: 205: if(CH1_state == 1) var_time |= 0x400;
  5926  0112  0022               	movlb	2	; select bank2
  5927  0113  0334               	decf	_CH1_state^(0+256),w
  5928  0114  1D03               	btfss	3,2
  5929  0115  2918               	goto	l628
  5930  0116  0020               	movlb	0	; select bank0
  5931  0117  1557               	bsf	tc_temperature_trans@var_time+1,2
  5932  0118                     l628:	
  5933                           
  5934                           ;max31856.c: 206: var_time |= 0x2000;
  5935  0118  0020               	movlb	0	; select bank0
  5936  0119  16D7               	bsf	tc_temperature_trans@var_time+1,5
  5937                           
  5938                           ;max31856.c: 207: Save_Write_word(var_time);
  5939  011A  0857               	movf	tc_temperature_trans@var_time+1,w
  5940  011B  00A7               	movwf	Save_Write_word@data+1
  5941  011C  0856               	movf	tc_temperature_trans@var_time,w
  5942  011D  00A6               	movwf	Save_Write_word@data
  5943  011E  3186  2689  3180   	fcall	_Save_Write_word
  5944                           
  5945                           ;max31856.c: 208: Save_Write_word(temperature_value);
  5946  0121  0020               	movlb	0	; select bank0
  5947  0122  0862               	movf	_temperature_value+1,w
  5948  0123  00A7               	movwf	Save_Write_word@data+1
  5949  0124  0861               	movf	_temperature_value,w
  5950  0125  00A6               	movwf	Save_Write_word@data
  5951  0126  3186  2689  3180   	fcall	_Save_Write_word
  5952                           
  5953                           ;max31856.c: 209: Cur_temperature_time_ch1 = 0;
  5954  0129  0022               	movlb	2	; select bank2
  5955  012A  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  5956                           
  5957                           ;max31856.c: 210: CH1_temperature = temperature_value;
  5958  012B  0020               	movlb	0	; select bank0
  5959  012C  0862               	movf	_temperature_value+1,w
  5960  012D  0022               	movlb	2	; select bank2
  5961  012E  00AB               	movwf	(_CH1_temperature+1)^(0+256)
  5962  012F  0020               	movlb	0	; select bank0
  5963  0130  0861               	movf	_temperature_value,w
  5964  0131  2938               	goto	L5
  5965  0132                     l5813:	
  5966                           ;max31856.c: 211: }
  5967                           
  5968                           
  5969                           ;max31856.c: 212: else
  5970                           ;max31856.c: 213: {
  5971                           ;max31856.c: 214: CH1_temperature = temperature_back;
  5972  0132  0020               	movlb	0	; select bank0
  5973  0133  0853               	movf	tc_temperature_trans@temperature_back+1,w
  5974  0134  0022               	movlb	2	; select bank2
  5975  0135  00AB               	movwf	(_CH1_temperature+1)^(0+256)
  5976  0136  0020               	movlb	0	; select bank0
  5977  0137  0852               	movf	tc_temperature_trans@temperature_back,w
  5978  0138                     L5:	
  5979  0138  0022               	movlb	2	; select bank2
  5980  0139  00AA               	movwf	_CH1_temperature^(0+256)
  5981                           
  5982                           ;max31856.c: 215: }
  5983                           ;max31856.c: 216: }
  5984                           ;max31856.c: 218: }
  5985  013A  29ED               	goto	l630
  5986  013B                     l5815:	
  5987                           
  5988                           ;max31856.c: 219: else if( time_count == 3 && Record_flag == 1)
  5989  013B  3003               	movlw	3
  5990  013C  0020               	movlb	0	; select bank0
  5991  013D  066A               	xorwf	_time_count,w
  5992  013E  1D03               	btfss	3,2
  5993  013F  29ED               	goto	l630
  5994  0140  0367               	decf	_Record_flag,w
  5995  0141  1D03               	btfss	3,2
  5996  0142  29ED               	goto	l630
  5997                           
  5998                           ;max31856.c: 220: {
  5999                           ;max31856.c: 221: temperature_back = CH2_temperature;
  6000  0143  0022               	movlb	2	; select bank2
  6001  0144  082D               	movf	(_CH2_temperature+1)^(0+256),w
  6002  0145  0020               	movlb	0	; select bank0
  6003  0146  00D3               	movwf	tc_temperature_trans@temperature_back+1
  6004  0147  0022               	movlb	2	; select bank2
  6005  0148  082C               	movf	_CH2_temperature^(0+256),w
  6006  0149  0020               	movlb	0	; select bank0
  6007  014A  00D2               	movwf	tc_temperature_trans@temperature_back
  6008                           
  6009                           ;max31856.c: 222: if( CH2_temperature & 0x2000 != temperature_temp & 0x2000)
  6010  014B  3020               	movlw	32
  6011  014C  0659               	xorwf	tc_temperature_trans@temperature_temp+1,w
  6012  014D  0458               	iorwf	tc_temperature_trans@temperature_temp,w
  6013  014E  1903               	btfsc	3,2
  6014  014F  2952               	goto	u5400
  6015  0150  3001               	movlw	1
  6016  0151  2953               	goto	u5410
  6017  0152                     u5400:	
  6018  0152  3000               	movlw	0
  6019  0153                     u5410:	
  6020  0153  00CE               	movwf	??_tc_temperature_trans
  6021  0154  01CF               	clrf	??_tc_temperature_trans+1
  6022  0155  0022               	movlb	2	; select bank2
  6023  0156  082C               	movf	_CH2_temperature^(0+256),w
  6024  0157  0020               	movlb	0	; select bank0
  6025  0158  054E               	andwf	??_tc_temperature_trans,w
  6026  0159  00D0               	movwf	??_tc_temperature_trans+2
  6027  015A  0022               	movlb	2	; select bank2
  6028  015B  082D               	movf	(_CH2_temperature+1)^(0+256),w
  6029  015C  0020               	movlb	0	; select bank0
  6030  015D  054F               	andwf	??_tc_temperature_trans+1,w
  6031  015E  00D1               	movwf	??_tc_temperature_trans+3
  6032  015F  1AD1               	btfsc	??_tc_temperature_trans+3,5
  6033  0160  29BA               	goto	L9
  6034                           
  6035                           ;max31856.c: 233: else
  6036                           ;max31856.c: 234: {
  6037                           ;max31856.c: 235: if(CH2_temperature & 0x2000) CH2_temperature=0x3FFF-CH2_temperature + 
      +                          1 ;
  6038                           
  6039                           ;max31856.c: 232: }
  6040                           
  6041                           ;max31856.c: 231: CH2_temperature = temperature_value;
  6042                           
  6043                           ;max31856.c: 230: Cur_temperature_time_ch2 = 0;
  6044                           
  6045                           ;max31856.c: 229: Save_Write_word(temperature_value);
  6046                           
  6047                           ;max31856.c: 228: Save_Write_word(var_time);
  6048                           
  6049                           ;max31856.c: 227: var_time |= 0x2000;
  6050                           
  6051                           ;max31856.c: 226: if(CH2_state == 1) var_time |= 0x800;
  6052                           
  6053                           ;max31856.c: 225: var_time |= 0x200;
  6054                           
  6055                           ;max31856.c: 223: {
  6056                           ;max31856.c: 224: var_time = Calculate_Time();
  6057  0161  0022               	movlb	2	; select bank2
  6058  0162  1EAD               	btfss	(_CH2_temperature+1)^(0+256),5
  6059  0163  2977               	goto	l5839
  6060  0164  092C               	comf	_CH2_temperature^(0+256),w
  6061  0165  0020               	movlb	0	; select bank0
  6062  0166  00CE               	movwf	??_tc_temperature_trans
  6063  0167  0022               	movlb	2	; select bank2
  6064  0168  092D               	comf	(_CH2_temperature+1)^(0+256),w
  6065  0169  0020               	movlb	0	; select bank0
  6066  016A  00CF               	movwf	??_tc_temperature_trans+1
  6067  016B  0ACE               	incf	??_tc_temperature_trans,f
  6068  016C  1903               	skipnz
  6069  016D  0ACF               	incf	??_tc_temperature_trans+1,f
  6070  016E  084E               	movf	??_tc_temperature_trans,w
  6071  016F  3E00               	addlw	0
  6072  0170  0022               	movlb	2	; select bank2
  6073  0171  00AC               	movwf	_CH2_temperature^(0+256)
  6074  0172  3040               	movlw	64
  6075  0173  0020               	movlb	0	; select bank0
  6076  0174  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6077  0175  0022               	movlb	2	; select bank2
  6078  0176  00AD               	movwf	(_CH2_temperature+1)^(0+256)
  6079  0177                     l5839:	
  6080                           
  6081                           ;max31856.c: 236: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  6082  0177  0020               	movlb	0	; select bank0
  6083  0178  1ED9               	btfss	tc_temperature_trans@temperature_temp+1,5
  6084  0179  2987               	goto	l5843
  6085  017A  0958               	comf	tc_temperature_trans@temperature_temp,w
  6086  017B  00CE               	movwf	??_tc_temperature_trans
  6087  017C  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6088  017D  00CF               	movwf	??_tc_temperature_trans+1
  6089  017E  0ACE               	incf	??_tc_temperature_trans,f
  6090  017F  1903               	skipnz
  6091  0180  0ACF               	incf	??_tc_temperature_trans+1,f
  6092  0181  084E               	movf	??_tc_temperature_trans,w
  6093  0182  3E00               	addlw	0
  6094  0183  00D8               	movwf	tc_temperature_trans@temperature_temp
  6095  0184  3040               	movlw	64
  6096  0185  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6097  0186  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6098  0187                     l5843:	
  6099                           
  6100                           ;max31856.c: 237: if( temperature_temp > CH2_temperature ) temperature_absolute = temper
      +                          ature_temp - CH2_temperature;
  6101  0187  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6102  0188  0022               	movlb	2	; select bank2
  6103  0189  022D               	subwf	(_CH2_temperature+1)^(0+256),w
  6104  018A  1D03               	skipz
  6105  018B  2990               	goto	u5465
  6106  018C  0020               	movlb	0	; select bank0
  6107  018D  0858               	movf	tc_temperature_trans@temperature_temp,w
  6108  018E  0022               	movlb	2	; select bank2
  6109  018F  022C               	subwf	_CH2_temperature^(0+256),w
  6110  0190                     u5465:	
  6111  0190  1803               	skipnc
  6112  0191  29A1               	goto	l5847
  6113  0192  092C               	comf	_CH2_temperature^(0+256),w
  6114  0193  0020               	movlb	0	; select bank0
  6115  0194  00CE               	movwf	??_tc_temperature_trans
  6116  0195  0022               	movlb	2	; select bank2
  6117  0196  092D               	comf	(_CH2_temperature+1)^(0+256),w
  6118  0197  0020               	movlb	0	; select bank0
  6119  0198  00CF               	movwf	??_tc_temperature_trans+1
  6120  0199  0ACE               	incf	??_tc_temperature_trans,f
  6121  019A  1903               	skipnz
  6122  019B  0ACF               	incf	??_tc_temperature_trans+1,f
  6123  019C  0858               	movf	tc_temperature_trans@temperature_temp,w
  6124  019D  074E               	addwf	??_tc_temperature_trans,w
  6125  019E  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6126  019F  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6127  01A0  29B1               	goto	L6
  6128  01A1                     l5847:	
  6129                           
  6130                           ;max31856.c: 238: else temperature_absolute = CH2_temperature - temperature_temp;
  6131  01A1  0020               	movlb	0	; select bank0
  6132  01A2  0958               	comf	tc_temperature_trans@temperature_temp,w
  6133  01A3  00CE               	movwf	??_tc_temperature_trans
  6134  01A4  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6135  01A5  00CF               	movwf	??_tc_temperature_trans+1
  6136  01A6  0ACE               	incf	??_tc_temperature_trans,f
  6137  01A7  1903               	skipnz
  6138  01A8  0ACF               	incf	??_tc_temperature_trans+1,f
  6139  01A9  0022               	movlb	2	; select bank2
  6140  01AA  082C               	movf	_CH2_temperature^(0+256),w
  6141  01AB  0020               	movlb	0	; select bank0
  6142  01AC  074E               	addwf	??_tc_temperature_trans,w
  6143  01AD  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6144  01AE  0022               	movlb	2	; select bank2
  6145  01AF  082D               	movf	(_CH2_temperature+1)^(0+256),w
  6146  01B0  0020               	movlb	0	; select bank0
  6147  01B1                     L6:	
  6148  01B1  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6149  01B2  00D5               	movwf	tc_temperature_trans@temperature_absolute+1
  6150                           
  6151                           ;max31856.c: 239: if( temperature_absolute > 3)
  6152  01B3  3000               	movlw	0
  6153  01B4  0255               	subwf	tc_temperature_trans@temperature_absolute+1,w
  6154  01B5  3004               	movlw	4
  6155  01B6  1903               	skipnz
  6156  01B7  0254               	subwf	tc_temperature_trans@temperature_absolute,w
  6157  01B8  1C03               	skipc
  6158  01B9  29E5               	goto	l5865
  6159  01BA                     L9:	
  6160                           
  6161                           ;max31856.c: 241: {
  6162                           ;max31856.c: 242: var_time = Calculate_Time();
  6163  01BA  3182  2268  3180   	fcall	_Calculate_Time
  6164  01BD  0020               	movlb	0	; select bank0
  6165  01BE  00CE               	movwf	??_tc_temperature_trans
  6166  01BF  01CF               	clrf	??_tc_temperature_trans+1
  6167  01C0  084E               	movf	??_tc_temperature_trans,w
  6168  01C1  00D6               	movwf	tc_temperature_trans@var_time
  6169  01C2  084F               	movf	??_tc_temperature_trans+1,w
  6170  01C3  00D7               	movwf	tc_temperature_trans@var_time+1
  6171                           
  6172                           ;max31856.c: 243: var_time |= 0x200;
  6173  01C4  14D7               	bsf	tc_temperature_trans@var_time+1,1
  6174                           
  6175                           ;max31856.c: 244: if(CH2_state == 1) var_time |= 0x800;
  6176  01C5  0022               	movlb	2	; select bank2
  6177  01C6  0335               	decf	_CH2_state^(0+256),w
  6178  01C7  1D03               	btfss	3,2
  6179  01C8  29CB               	goto	l640
  6180  01C9  0020               	movlb	0	; select bank0
  6181  01CA  15D7               	bsf	tc_temperature_trans@var_time+1,3
  6182  01CB                     l640:	
  6183                           
  6184                           ;max31856.c: 245: var_time |= 0x2000;
  6185  01CB  0020               	movlb	0	; select bank0
  6186  01CC  16D7               	bsf	tc_temperature_trans@var_time+1,5
  6187                           
  6188                           ;max31856.c: 246: Save_Write_word(var_time);
  6189  01CD  0857               	movf	tc_temperature_trans@var_time+1,w
  6190  01CE  00A7               	movwf	Save_Write_word@data+1
  6191  01CF  0856               	movf	tc_temperature_trans@var_time,w
  6192  01D0  00A6               	movwf	Save_Write_word@data
  6193  01D1  3186  2689  3180   	fcall	_Save_Write_word
  6194                           
  6195                           ;max31856.c: 247: Save_Write_word(temperature_value);
  6196  01D4  0020               	movlb	0	; select bank0
  6197  01D5  0862               	movf	_temperature_value+1,w
  6198  01D6  00A7               	movwf	Save_Write_word@data+1
  6199  01D7  0861               	movf	_temperature_value,w
  6200  01D8  00A6               	movwf	Save_Write_word@data
  6201  01D9  3186  2689  3180   	fcall	_Save_Write_word
  6202                           
  6203                           ;max31856.c: 248: Cur_temperature_time_ch2 = 0;
  6204  01DC  0022               	movlb	2	; select bank2
  6205  01DD  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  6206                           
  6207                           ;max31856.c: 249: CH2_temperature = temperature_value;
  6208  01DE  0020               	movlb	0	; select bank0
  6209  01DF  0862               	movf	_temperature_value+1,w
  6210  01E0  0022               	movlb	2	; select bank2
  6211  01E1  00AD               	movwf	(_CH2_temperature+1)^(0+256)
  6212  01E2  0020               	movlb	0	; select bank0
  6213  01E3  0861               	movf	_temperature_value,w
  6214  01E4  29EB               	goto	L7
  6215  01E5                     l5865:	
  6216                           ;max31856.c: 250: }
  6217                           
  6218                           
  6219                           ;max31856.c: 251: else
  6220                           ;max31856.c: 252: {
  6221                           ;max31856.c: 253: CH2_temperature = temperature_back;
  6222  01E5  0020               	movlb	0	; select bank0
  6223  01E6  0853               	movf	tc_temperature_trans@temperature_back+1,w
  6224  01E7  0022               	movlb	2	; select bank2
  6225  01E8  00AD               	movwf	(_CH2_temperature+1)^(0+256)
  6226  01E9  0020               	movlb	0	; select bank0
  6227  01EA  0852               	movf	tc_temperature_trans@temperature_back,w
  6228  01EB                     L7:	
  6229  01EB  0022               	movlb	2	; select bank2
  6230  01EC  00AC               	movwf	_CH2_temperature^(0+256)
  6231  01ED                     l630:	
  6232                           
  6233                           ;max31856.c: 254: }
  6234                           ;max31856.c: 255: }
  6235                           ;max31856.c: 257: }
  6236                           ;max31856.c: 259: temperature_temp = temperature_value;
  6237  01ED  0020               	movlb	0	; select bank0
  6238  01EE  0862               	movf	_temperature_value+1,w
  6239  01EF  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6240  01F0  0861               	movf	_temperature_value,w
  6241  01F1  00D8               	movwf	tc_temperature_trans@temperature_temp
  6242                           
  6243                           ;max31856.c: 260: if((uch_ltcbh&0x80)==0x80)
  6244  01F2  0022               	movlb	2	; select bank2
  6245  01F3  1FC5               	btfss	_uch_ltcbh^(0+256),7
  6246  01F4  2A35               	goto	l5883
  6247                           
  6248                           ;max31856.c: 261: {
  6249                           ;max31856.c: 262: temperature_sign = 1;
  6250  01F5  01C0               	clrf	_temperature_sign^(0+256)
  6251  01F6  0AC0               	incf	_temperature_sign^(0+256),f
  6252                           
  6253                           ;max31856.c: 263: temperature_temp=0x3FFF-temperature_temp + 1 ;
  6254  01F7  0020               	movlb	0	; select bank0
  6255  01F8  0958               	comf	tc_temperature_trans@temperature_temp,w
  6256  01F9  00CE               	movwf	??_tc_temperature_trans
  6257  01FA  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6258  01FB  00CF               	movwf	??_tc_temperature_trans+1
  6259  01FC  0ACE               	incf	??_tc_temperature_trans,f
  6260  01FD  1903               	skipnz
  6261  01FE  0ACF               	incf	??_tc_temperature_trans+1,f
  6262  01FF  084E               	movf	??_tc_temperature_trans,w
  6263  0200  3E00               	addlw	0
  6264  0201  00D8               	movwf	tc_temperature_trans@temperature_temp
  6265  0202  3040               	movlw	64
  6266  0203  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6267  0204  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6268                           
  6269                           ;max31856.c: 265: temperature_int = temperature_temp>>3;
  6270  0205  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6271  0206  00CF               	movwf	??_tc_temperature_trans+1
  6272  0207  0858               	movf	tc_temperature_trans@temperature_temp,w
  6273  0208  00CE               	movwf	??_tc_temperature_trans
  6274  0209  36CF               	lsrf	??_tc_temperature_trans+1,f
  6275  020A  0CCE               	rrf	??_tc_temperature_trans,f
  6276  020B  36CF               	lsrf	??_tc_temperature_trans+1,f
  6277  020C  0CCE               	rrf	??_tc_temperature_trans,f
  6278  020D  36CF               	lsrf	??_tc_temperature_trans+1,f
  6279  020E  0CCE               	rrf	??_tc_temperature_trans,f
  6280  020F  084E               	movf	??_tc_temperature_trans,w
  6281  0210  0022               	movlb	2	; select bank2
  6282  0211  00B2               	movwf	_temperature_int^(0+256)
  6283  0212  0020               	movlb	0	; select bank0
  6284  0213  084F               	movf	??_tc_temperature_trans+1,w
  6285  0214  0022               	movlb	2	; select bank2
  6286  0215  00B3               	movwf	(_temperature_int+1)^(0+256)
  6287                           
  6288                           ;max31856.c: 266: temperature_decimal = temperature_temp & 0x07;
  6289  0216  0020               	movlb	0	; select bank0
  6290  0217  0858               	movf	tc_temperature_trans@temperature_temp,w
  6291  0218  3907               	andlw	7
  6292  0219  00CE               	movwf	??_tc_temperature_trans
  6293  021A  084E               	movf	??_tc_temperature_trans,w
  6294  021B  00E9               	movwf	_temperature_decimal
  6295                           
  6296                           ;max31856.c: 267: if(temperature_decimal > 3) temperature_decimal++;
  6297  021C  3004               	movlw	4
  6298  021D  0269               	subwf	_temperature_decimal,w
  6299  021E  1C03               	skipc
  6300  021F  2A24               	goto	l643
  6301  0220  3001               	movlw	1
  6302  0221  00CE               	movwf	??_tc_temperature_trans
  6303  0222  084E               	movf	??_tc_temperature_trans,w
  6304  0223  07E9               	addwf	_temperature_decimal,f
  6305  0224                     l643:	
  6306                           
  6307                           ;max31856.c: 268: if(( temperature_decimal == 3 || temperature_decimal == 8 ) && (temper
      +                          ature_int & 0x01)) temperature_decimal++;
  6308  0224  3003               	movlw	3
  6309  0225  0669               	xorwf	_temperature_decimal,w
  6310  0226  1903               	btfsc	3,2
  6311  0227  2A2C               	goto	l646
  6312  0228  3008               	movlw	8
  6313  0229  0669               	xorwf	_temperature_decimal,w
  6314  022A  1D03               	btfss	3,2
  6315  022B  0008               	return
  6316  022C                     l646:	
  6317  022C  0022               	movlb	2	; select bank2
  6318  022D  1C32               	btfss	_temperature_int^(0+256),0
  6319  022E  0008               	return
  6320  022F  3001               	movlw	1
  6321  0230  0020               	movlb	0	; select bank0
  6322  0231  00CE               	movwf	??_tc_temperature_trans
  6323  0232  084E               	movf	??_tc_temperature_trans,w
  6324  0233  07E9               	addwf	_temperature_decimal,f
  6325                           
  6326                           ;max31856.c: 269: }
  6327  0234  0008               	return
  6328  0235                     l5883:	
  6329                           
  6330                           ;max31856.c: 270: else
  6331                           ;max31856.c: 271: {
  6332                           ;max31856.c: 272: temperature_sign = 0;
  6333  0235  0022               	movlb	2	; select bank2
  6334  0236  01C0               	clrf	_temperature_sign^(0+256)
  6335                           
  6336                           ;max31856.c: 273: temperature_int = temperature_temp>>3;
  6337  0237  0020               	movlb	0	; select bank0
  6338  0238  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6339  0239  00CF               	movwf	??_tc_temperature_trans+1
  6340  023A  0858               	movf	tc_temperature_trans@temperature_temp,w
  6341  023B  00CE               	movwf	??_tc_temperature_trans
  6342  023C  36CF               	lsrf	??_tc_temperature_trans+1,f
  6343  023D  0CCE               	rrf	??_tc_temperature_trans,f
  6344  023E  36CF               	lsrf	??_tc_temperature_trans+1,f
  6345  023F  0CCE               	rrf	??_tc_temperature_trans,f
  6346  0240  36CF               	lsrf	??_tc_temperature_trans+1,f
  6347  0241  0CCE               	rrf	??_tc_temperature_trans,f
  6348  0242  084E               	movf	??_tc_temperature_trans,w
  6349  0243  0022               	movlb	2	; select bank2
  6350  0244  00B2               	movwf	_temperature_int^(0+256)
  6351  0245  0020               	movlb	0	; select bank0
  6352  0246  084F               	movf	??_tc_temperature_trans+1,w
  6353  0247  0022               	movlb	2	; select bank2
  6354  0248  00B3               	movwf	(_temperature_int+1)^(0+256)
  6355                           
  6356                           ;max31856.c: 274: temperature_decimal = temperature_temp & 0x07;
  6357  0249  0020               	movlb	0	; select bank0
  6358  024A  0858               	movf	tc_temperature_trans@temperature_temp,w
  6359  024B  3907               	andlw	7
  6360  024C  00CE               	movwf	??_tc_temperature_trans
  6361  024D  084E               	movf	??_tc_temperature_trans,w
  6362  024E  00E9               	movwf	_temperature_decimal
  6363                           
  6364                           ;max31856.c: 275: if(temperature_decimal > 3) temperature_decimal++;
  6365  024F  3004               	movlw	4
  6366  0250  0269               	subwf	_temperature_decimal,w
  6367  0251  1C03               	skipc
  6368  0252  2A57               	goto	l648
  6369  0253  3001               	movlw	1
  6370  0254  00CE               	movwf	??_tc_temperature_trans
  6371  0255  084E               	movf	??_tc_temperature_trans,w
  6372  0256  07E9               	addwf	_temperature_decimal,f
  6373  0257                     l648:	
  6374                           
  6375                           ;max31856.c: 276: if((temperature_decimal == 4 || temperature_decimal == 8) && (temperat
      +                          ure_int & 0x01)) temperature_decimal++;
  6376  0257  3004               	movlw	4
  6377  0258  0669               	xorwf	_temperature_decimal,w
  6378  0259  1903               	btfsc	3,2
  6379  025A  2A5F               	goto	l651
  6380  025B  3008               	movlw	8
  6381  025C  0669               	xorwf	_temperature_decimal,w
  6382  025D  1D03               	btfss	3,2
  6383  025E  0008               	return
  6384  025F                     l651:	
  6385  025F  0022               	movlb	2	; select bank2
  6386  0260  1C32               	btfss	_temperature_int^(0+256),0
  6387  0261  0008               	return
  6388  0262  3001               	movlw	1
  6389  0263  0020               	movlb	0	; select bank0
  6390  0264  00CE               	movwf	??_tc_temperature_trans
  6391  0265  084E               	movf	??_tc_temperature_trans,w
  6392  0266  07E9               	addwf	_temperature_decimal,f
  6393  0267  0008               	return
  6394  0268                     __end_of_tc_temperature_trans:	
  6395                           
  6396                           	psect	text18
  6397  0268                     __ptext18:	
  6398 ;; *************** function _Calculate_Time *****************
  6399 ;; Defined at:
  6400 ;;		line 156 in file "mcc_generated_files/save.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;		None
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;  temp2           4   42[BANK0 ] unsigned long 
  6405 ;;  temp1           4   38[BANK0 ] unsigned long 
  6406 ;;  temp            4   34[BANK0 ] unsigned long 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      unsigned char 
  6409 ;; Registers used:
  6410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;Total ram usage:       22 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:    7
  6423 ;; This function calls:
  6424 ;;		_Bq32k_Rtc_Read_Time
  6425 ;;		_Save_Write_time
  6426 ;;		_Write_Flash_finish
  6427 ;;		_Write_Flash_head
  6428 ;;		___wmul
  6429 ;; This function is called by:
  6430 ;;		_tc_temperature_trans
  6431 ;;		_Save_process
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           
  6436                           ;psect for function _Calculate_Time
  6437  0268                     _Calculate_Time:	
  6438                           
  6439                           ;save.c: 158: unsigned long temp = 0 ;
  6440                           
  6441                           ;incstack = 0
  6442                           ; Regs used in _Calculate_Time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6443  0268  3000               	movlw	0
  6444  0269  0020               	movlb	0	; select bank0
  6445  026A  00C5               	movwf	Calculate_Time@temp+3
  6446  026B  3000               	movlw	0
  6447  026C  00C4               	movwf	Calculate_Time@temp+2
  6448  026D  3000               	movlw	0
  6449  026E  00C3               	movwf	Calculate_Time@temp+1
  6450  026F  3000               	movlw	0
  6451  0270  00C2               	movwf	Calculate_Time@temp
  6452                           
  6453                           ;save.c: 159: unsigned long temp1 = 0 ;
  6454  0271  3000               	movlw	0
  6455  0272  00C9               	movwf	Calculate_Time@temp1+3
  6456  0273  3000               	movlw	0
  6457  0274  00C8               	movwf	Calculate_Time@temp1+2
  6458  0275  3000               	movlw	0
  6459  0276  00C7               	movwf	Calculate_Time@temp1+1
  6460  0277  3000               	movlw	0
  6461  0278  00C6               	movwf	Calculate_Time@temp1
  6462                           
  6463                           ;save.c: 160: unsigned long temp2 = 0 ;
  6464  0279  3000               	movlw	0
  6465  027A  00CD               	movwf	Calculate_Time@temp2+3
  6466  027B  3000               	movlw	0
  6467  027C  00CC               	movwf	Calculate_Time@temp2+2
  6468  027D  3000               	movlw	0
  6469  027E  00CB               	movwf	Calculate_Time@temp2+1
  6470  027F  3000               	movlw	0
  6471  0280  00CA               	movwf	Calculate_Time@temp2
  6472                           
  6473                           ;save.c: 161: Bq32k_Rtc_Read_Time(&rtc_tm);
  6474  0281  3060               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  6475  0282  318C  247C  3182   	fcall	_Bq32k_Rtc_Read_Time
  6476                           
  6477                           ;save.c: 162: if( time_count == 1 )
  6478  0285  0020               	movlb	0	; select bank0
  6479  0286  036A               	decf	_time_count,w
  6480  0287  1D03               	btfss	3,2
  6481  0288  2B3F               	goto	l5563
  6482                           
  6483                           ;save.c: 163: {
  6484                           ;save.c: 164: if(rtc_tm.date != rtc_save_ch1.date)
  6485  0289  0022               	movlb	2	; select bank2
  6486  028A  0864               	movf	(_rtc_tm^(0+256)+4),w
  6487  028B  0656               	xorwf	(_rtc_save_ch1^(0+256)+4),w
  6488  028C  1D03               	btfss	3,2
  6489  028D  2B48               	goto	l5567
  6490                           
  6491                           ;save.c: 176: else
  6492                           ;save.c: 177: {
  6493                           ;save.c: 178: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6494                           
  6495                           ;save.c: 175: }
  6496                           
  6497                           ;save.c: 174: time_count = 0;
  6498                           
  6499                           ;save.c: 171: Cur_temperature_time_ch2 = 0;
  6500                           
  6501                           ;save.c: 170: Cur_temperature_time_ch1 = 0;
  6502                           
  6503                           ;save.c: 169: Save_Write_time();
  6504                           
  6505                           ;save.c: 168: Write_Flash_head();
  6506                           
  6507                           ;save.c: 165: {
  6508                           ;save.c: 167: Write_Flash_finish();
  6509  028E  0022               	movlb	2	; select bank2
  6510  028F  0860               	movf	_rtc_tm^(0+256),w
  6511  0290  0020               	movlb	0	; select bank0
  6512  0291  00B8               	movwf	??_Calculate_Time
  6513  0292  01B9               	clrf	??_Calculate_Time+1
  6514  0293  0022               	movlb	2	; select bank2
  6515  0294  0862               	movf	(_rtc_tm^(0+256)+2),w
  6516  0295  0020               	movlb	0	; select bank0
  6517  0296  00BA               	movwf	??_Calculate_Time+2
  6518  0297  01BB               	clrf	??_Calculate_Time+3
  6519  0298  083A               	movf	??_Calculate_Time+2,w
  6520  0299  00A1               	movwf	___wmul@multiplier
  6521  029A  083B               	movf	??_Calculate_Time+3,w
  6522  029B  00A2               	movwf	___wmul@multiplier+1
  6523  029C  3010               	movlw	16
  6524  029D  00A3               	movwf	___wmul@multiplicand
  6525  029E  300E               	movlw	14
  6526  029F  00A4               	movwf	___wmul@multiplicand+1
  6527  02A0  3195  2514  3182   	fcall	___wmul
  6528  02A3  0020               	movlb	0	; select bank0
  6529  02A4  0821               	movf	?___wmul,w
  6530  02A5  00BC               	movwf	??_Calculate_Time+4
  6531  02A6  0822               	movf	?___wmul+1,w
  6532  02A7  00BD               	movwf	??_Calculate_Time+5
  6533  02A8  0022               	movlb	2	; select bank2
  6534  02A9  0861               	movf	(_rtc_tm^(0+256)+1),w
  6535  02AA  0020               	movlb	0	; select bank0
  6536  02AB  00BE               	movwf	??_Calculate_Time+6
  6537  02AC  01BF               	clrf	??_Calculate_Time+7
  6538  02AD  083E               	movf	??_Calculate_Time+6,w
  6539  02AE  00A1               	movwf	___wmul@multiplier
  6540  02AF  083F               	movf	??_Calculate_Time+7,w
  6541  02B0  00A2               	movwf	___wmul@multiplier+1
  6542  02B1  303C               	movlw	60
  6543  02B2  00A3               	movwf	___wmul@multiplicand
  6544  02B3  3000               	movlw	0
  6545  02B4  00A4               	movwf	___wmul@multiplicand+1
  6546  02B5  3195  2514  3182   	fcall	___wmul
  6547  02B8  0020               	movlb	0	; select bank0
  6548  02B9  0821               	movf	?___wmul,w
  6549  02BA  073C               	addwf	??_Calculate_Time+4,w
  6550  02BB  00C0               	movwf	??_Calculate_Time+8
  6551  02BC  0822               	movf	?___wmul+1,w
  6552  02BD  3D3D               	addwfc	??_Calculate_Time+5,w
  6553  02BE  00C1               	movwf	??_Calculate_Time+9
  6554  02BF  0838               	movf	??_Calculate_Time,w
  6555  02C0  0740               	addwf	??_Calculate_Time+8,w
  6556  02C1  00C6               	movwf	Calculate_Time@temp1
  6557  02C2  0839               	movf	??_Calculate_Time+1,w
  6558  02C3  3D41               	addwfc	??_Calculate_Time+9,w
  6559  02C4  00C7               	movwf	Calculate_Time@temp1+1
  6560  02C5  01C8               	clrf	Calculate_Time@temp1+2
  6561  02C6  1BC7               	btfsc	Calculate_Time@temp1+1,7
  6562  02C7  03C8               	decf	Calculate_Time@temp1+2,f
  6563  02C8  0848               	movf	Calculate_Time@temp1+2,w
  6564  02C9  00C9               	movwf	Calculate_Time@temp1+3
  6565                           
  6566                           ;save.c: 179: temp2 = rtc_save_ch1.hours*3600+rtc_save_ch1.minutes*60+rtc_save_ch1.secon
      +                          ds;
  6567  02CA  0022               	movlb	2	; select bank2
  6568  02CB  0852               	movf	_rtc_save_ch1^(0+256),w
  6569  02CC  0020               	movlb	0	; select bank0
  6570  02CD  00B8               	movwf	??_Calculate_Time
  6571  02CE  01B9               	clrf	??_Calculate_Time+1
  6572  02CF  0022               	movlb	2	; select bank2
  6573  02D0  0854               	movf	(_rtc_save_ch1^(0+256)+2),w
  6574  02D1  0020               	movlb	0	; select bank0
  6575  02D2  00BA               	movwf	??_Calculate_Time+2
  6576  02D3  01BB               	clrf	??_Calculate_Time+3
  6577  02D4  083A               	movf	??_Calculate_Time+2,w
  6578  02D5  00A1               	movwf	___wmul@multiplier
  6579  02D6  083B               	movf	??_Calculate_Time+3,w
  6580  02D7  00A2               	movwf	___wmul@multiplier+1
  6581  02D8  3010               	movlw	16
  6582  02D9  00A3               	movwf	___wmul@multiplicand
  6583  02DA  300E               	movlw	14
  6584  02DB  00A4               	movwf	___wmul@multiplicand+1
  6585  02DC  3195  2514  3182   	fcall	___wmul
  6586  02DF  0020               	movlb	0	; select bank0
  6587  02E0  0821               	movf	?___wmul,w
  6588  02E1  00BC               	movwf	??_Calculate_Time+4
  6589  02E2  0822               	movf	?___wmul+1,w
  6590  02E3  00BD               	movwf	??_Calculate_Time+5
  6591  02E4  0022               	movlb	2	; select bank2
  6592  02E5  0853               	movf	(_rtc_save_ch1^(0+256)+1),w
  6593  02E6  0020               	movlb	0	; select bank0
  6594  02E7  00BE               	movwf	??_Calculate_Time+6
  6595  02E8  01BF               	clrf	??_Calculate_Time+7
  6596  02E9  083E               	movf	??_Calculate_Time+6,w
  6597  02EA  00A1               	movwf	___wmul@multiplier
  6598  02EB  083F               	movf	??_Calculate_Time+7,w
  6599  02EC  00A2               	movwf	___wmul@multiplier+1
  6600  02ED  303C               	movlw	60
  6601  02EE  00A3               	movwf	___wmul@multiplicand
  6602  02EF  3000               	movlw	0
  6603  02F0  00A4               	movwf	___wmul@multiplicand+1
  6604  02F1  3195  2514  3182   	fcall	___wmul
  6605  02F4  0020               	movlb	0	; select bank0
  6606  02F5  0821               	movf	?___wmul,w
  6607  02F6  073C               	addwf	??_Calculate_Time+4,w
  6608  02F7  00C0               	movwf	??_Calculate_Time+8
  6609  02F8  0822               	movf	?___wmul+1,w
  6610  02F9  3D3D               	addwfc	??_Calculate_Time+5,w
  6611  02FA  00C1               	movwf	??_Calculate_Time+9
  6612  02FB  0838               	movf	??_Calculate_Time,w
  6613  02FC  0740               	addwf	??_Calculate_Time+8,w
  6614  02FD  00CA               	movwf	Calculate_Time@temp2
  6615  02FE  0839               	movf	??_Calculate_Time+1,w
  6616  02FF  3D41               	addwfc	??_Calculate_Time+9,w
  6617  0300  00CB               	movwf	Calculate_Time@temp2+1
  6618  0301  01CC               	clrf	Calculate_Time@temp2+2
  6619  0302  1BCB               	btfsc	Calculate_Time@temp2+1,7
  6620  0303  03CC               	decf	Calculate_Time@temp2+2,f
  6621  0304  084C               	movf	Calculate_Time@temp2+2,w
  6622  0305  00CD               	movwf	Calculate_Time@temp2+3
  6623                           
  6624                           ;save.c: 180: temp = temp1 - temp2;
  6625  0306  0846               	movf	Calculate_Time@temp1,w
  6626  0307  00B8               	movwf	??_Calculate_Time
  6627  0308  0847               	movf	Calculate_Time@temp1+1,w
  6628  0309  00B9               	movwf	??_Calculate_Time+1
  6629  030A  0848               	movf	Calculate_Time@temp1+2,w
  6630  030B  00BA               	movwf	??_Calculate_Time+2
  6631  030C  0849               	movf	Calculate_Time@temp1+3,w
  6632  030D  00BB               	movwf	??_Calculate_Time+3
  6633  030E  094A               	comf	Calculate_Time@temp2,w
  6634  030F  00BC               	movwf	??_Calculate_Time+4
  6635  0310  094B               	comf	Calculate_Time@temp2+1,w
  6636  0311  00BD               	movwf	??_Calculate_Time+5
  6637  0312  094C               	comf	Calculate_Time@temp2+2,w
  6638  0313  00BE               	movwf	??_Calculate_Time+6
  6639  0314  094D               	comf	Calculate_Time@temp2+3,w
  6640  0315  00BF               	movwf	??_Calculate_Time+7
  6641  0316  0ABC               	incf	??_Calculate_Time+4,f
  6642  0317  1903               	skipnz
  6643  0318  0ABD               	incf	??_Calculate_Time+5,f
  6644  0319  1903               	skipnz
  6645  031A  0ABE               	incf	??_Calculate_Time+6,f
  6646  031B  1903               	skipnz
  6647  031C  0ABF               	incf	??_Calculate_Time+7,f
  6648  031D  083C               	movf	??_Calculate_Time+4,w
  6649  031E  07B8               	addwf	??_Calculate_Time,f
  6650  031F  083D               	movf	??_Calculate_Time+5,w
  6651  0320  3DB9               	addwfc	??_Calculate_Time+1,f
  6652  0321  083E               	movf	??_Calculate_Time+6,w
  6653  0322  3DBA               	addwfc	??_Calculate_Time+2,f
  6654  0323  083F               	movf	??_Calculate_Time+7,w
  6655  0324  3DBB               	addwfc	??_Calculate_Time+3,f
  6656  0325  083B               	movf	??_Calculate_Time+3,w
  6657  0326  00C5               	movwf	Calculate_Time@temp+3
  6658  0327  083A               	movf	??_Calculate_Time+2,w
  6659  0328  00C4               	movwf	Calculate_Time@temp+2
  6660  0329  0839               	movf	??_Calculate_Time+1,w
  6661  032A  00C3               	movwf	Calculate_Time@temp+1
  6662  032B  0838               	movf	??_Calculate_Time,w
  6663  032C  00C2               	movwf	Calculate_Time@temp
  6664                           
  6665                           ;save.c: 181: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  6666  032D  3052               	movlw	low (_rtc_save_ch1| (0+256))
  6667  032E  0086               	movwf	6
  6668  032F  3001               	movlw	1	; select bank2/3
  6669  0330  0087               	movwf	7
  6670  0331  3060               	movlw	low (_rtc_tm| (0+256))
  6671  0332  0084               	movwf	4
  6672  0333  3001               	movlw	1	; select bank2/3
  6673  0334  0085               	movwf	5
  6674  0335  3007               	movlw	7
  6675  0336  0020               	movlb	0	; select bank0
  6676  0337  00B8               	movwf	??_Calculate_Time
  6677  0338                     u488m0:	
  6678  0338  0012               	moviw fsr0++
  6679  0339  001E               	movwi fsr1++
  6680  033A  0BB8               	decfsz	??_Calculate_Time,f
  6681  033B  2B38               	goto	u488m0
  6682                           
  6683                           ;save.c: 182: return temp;
  6684  033C  0020               	movlb	0	; select bank0
  6685  033D  0842               	movf	Calculate_Time@temp,w
  6686  033E  0008               	return
  6687  033F                     l5563:	
  6688                           ;save.c: 183: }
  6689                           ;save.c: 184: }
  6690                           
  6691                           
  6692                           ;save.c: 185: else if( time_count == 3 )
  6693  033F  3003               	movlw	3
  6694  0340  066A               	xorwf	_time_count,w
  6695  0341  1D03               	btfss	3,2
  6696  0342  2C08               	goto	l5587
  6697                           
  6698                           ;save.c: 186: {
  6699                           ;save.c: 187: if(rtc_tm.date != rtc_save_ch2.date)
  6700  0343  0022               	movlb	2	; select bank2
  6701  0344  0864               	movf	(_rtc_tm^(0+256)+4),w
  6702  0345  065D               	xorwf	(_rtc_save_ch2^(0+256)+4),w
  6703  0346  1903               	skipnz
  6704  0347  2B57               	goto	l5577
  6705  0348                     l5567:	
  6706                           
  6707                           ;save.c: 188: {
  6708                           ;save.c: 190: Write_Flash_finish();
  6709  0348  3194  2404  3182   	fcall	_Write_Flash_finish
  6710                           
  6711                           ;save.c: 191: Write_Flash_head();
  6712  034B  3194  2414  3182   	fcall	_Write_Flash_head
  6713                           
  6714                           ;save.c: 192: Save_Write_time();
  6715  034E  318E  2656  3182   	fcall	_Save_Write_time
  6716                           
  6717                           ;save.c: 193: Cur_temperature_time_ch1 = 0;
  6718  0351  0022               	movlb	2	; select bank2
  6719  0352  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  6720                           
  6721                           ;save.c: 194: Cur_temperature_time_ch2 = 0;
  6722  0353  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  6723                           
  6724                           ;save.c: 197: time_count = 0;
  6725  0354  0020               	movlb	0	; select bank0
  6726  0355  01EA               	clrf	_time_count
  6727                           
  6728                           ;save.c: 198: }
  6729  0356  2C08               	goto	l5587
  6730  0357                     l5577:	
  6731                           
  6732                           ;save.c: 199: else
  6733                           ;save.c: 200: {
  6734                           ;save.c: 201: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6735  0357  0022               	movlb	2	; select bank2
  6736  0358  0860               	movf	_rtc_tm^(0+256),w
  6737  0359  0020               	movlb	0	; select bank0
  6738  035A  00B8               	movwf	??_Calculate_Time
  6739  035B  01B9               	clrf	??_Calculate_Time+1
  6740  035C  0022               	movlb	2	; select bank2
  6741  035D  0862               	movf	(_rtc_tm^(0+256)+2),w
  6742  035E  0020               	movlb	0	; select bank0
  6743  035F  00BA               	movwf	??_Calculate_Time+2
  6744  0360  01BB               	clrf	??_Calculate_Time+3
  6745  0361  083A               	movf	??_Calculate_Time+2,w
  6746  0362  00A1               	movwf	___wmul@multiplier
  6747  0363  083B               	movf	??_Calculate_Time+3,w
  6748  0364  00A2               	movwf	___wmul@multiplier+1
  6749  0365  3010               	movlw	16
  6750  0366  00A3               	movwf	___wmul@multiplicand
  6751  0367  300E               	movlw	14
  6752  0368  00A4               	movwf	___wmul@multiplicand+1
  6753  0369  3195  2514  3182   	fcall	___wmul
  6754  036C  0020               	movlb	0	; select bank0
  6755  036D  0821               	movf	?___wmul,w
  6756  036E  00BC               	movwf	??_Calculate_Time+4
  6757  036F  0822               	movf	?___wmul+1,w
  6758  0370  00BD               	movwf	??_Calculate_Time+5
  6759  0371  0022               	movlb	2	; select bank2
  6760  0372  0861               	movf	(_rtc_tm^(0+256)+1),w
  6761  0373  0020               	movlb	0	; select bank0
  6762  0374  00BE               	movwf	??_Calculate_Time+6
  6763  0375  01BF               	clrf	??_Calculate_Time+7
  6764  0376  083E               	movf	??_Calculate_Time+6,w
  6765  0377  00A1               	movwf	___wmul@multiplier
  6766  0378  083F               	movf	??_Calculate_Time+7,w
  6767  0379  00A2               	movwf	___wmul@multiplier+1
  6768  037A  303C               	movlw	60
  6769  037B  00A3               	movwf	___wmul@multiplicand
  6770  037C  3000               	movlw	0
  6771  037D  00A4               	movwf	___wmul@multiplicand+1
  6772  037E  3195  2514  3182   	fcall	___wmul
  6773  0381  0020               	movlb	0	; select bank0
  6774  0382  0821               	movf	?___wmul,w
  6775  0383  073C               	addwf	??_Calculate_Time+4,w
  6776  0384  00C0               	movwf	??_Calculate_Time+8
  6777  0385  0822               	movf	?___wmul+1,w
  6778  0386  3D3D               	addwfc	??_Calculate_Time+5,w
  6779  0387  00C1               	movwf	??_Calculate_Time+9
  6780  0388  0838               	movf	??_Calculate_Time,w
  6781  0389  0740               	addwf	??_Calculate_Time+8,w
  6782  038A  00C6               	movwf	Calculate_Time@temp1
  6783  038B  0839               	movf	??_Calculate_Time+1,w
  6784  038C  3D41               	addwfc	??_Calculate_Time+9,w
  6785  038D  00C7               	movwf	Calculate_Time@temp1+1
  6786  038E  01C8               	clrf	Calculate_Time@temp1+2
  6787  038F  1BC7               	btfsc	Calculate_Time@temp1+1,7
  6788  0390  03C8               	decf	Calculate_Time@temp1+2,f
  6789  0391  0848               	movf	Calculate_Time@temp1+2,w
  6790  0392  00C9               	movwf	Calculate_Time@temp1+3
  6791                           
  6792                           ;save.c: 202: temp2 = rtc_save_ch2.hours*3600+rtc_save_ch2.minutes*60+rtc_save_ch2.secon
      +                          ds;
  6793  0393  0022               	movlb	2	; select bank2
  6794  0394  0859               	movf	_rtc_save_ch2^(0+256),w
  6795  0395  0020               	movlb	0	; select bank0
  6796  0396  00B8               	movwf	??_Calculate_Time
  6797  0397  01B9               	clrf	??_Calculate_Time+1
  6798  0398  0022               	movlb	2	; select bank2
  6799  0399  085B               	movf	(_rtc_save_ch2^(0+256)+2),w
  6800  039A  0020               	movlb	0	; select bank0
  6801  039B  00BA               	movwf	??_Calculate_Time+2
  6802  039C  01BB               	clrf	??_Calculate_Time+3
  6803  039D  083A               	movf	??_Calculate_Time+2,w
  6804  039E  00A1               	movwf	___wmul@multiplier
  6805  039F  083B               	movf	??_Calculate_Time+3,w
  6806  03A0  00A2               	movwf	___wmul@multiplier+1
  6807  03A1  3010               	movlw	16
  6808  03A2  00A3               	movwf	___wmul@multiplicand
  6809  03A3  300E               	movlw	14
  6810  03A4  00A4               	movwf	___wmul@multiplicand+1
  6811  03A5  3195  2514  3182   	fcall	___wmul
  6812  03A8  0020               	movlb	0	; select bank0
  6813  03A9  0821               	movf	?___wmul,w
  6814  03AA  00BC               	movwf	??_Calculate_Time+4
  6815  03AB  0822               	movf	?___wmul+1,w
  6816  03AC  00BD               	movwf	??_Calculate_Time+5
  6817  03AD  0022               	movlb	2	; select bank2
  6818  03AE  085A               	movf	(_rtc_save_ch2^(0+256)+1),w
  6819  03AF  0020               	movlb	0	; select bank0
  6820  03B0  00BE               	movwf	??_Calculate_Time+6
  6821  03B1  01BF               	clrf	??_Calculate_Time+7
  6822  03B2  083E               	movf	??_Calculate_Time+6,w
  6823  03B3  00A1               	movwf	___wmul@multiplier
  6824  03B4  083F               	movf	??_Calculate_Time+7,w
  6825  03B5  00A2               	movwf	___wmul@multiplier+1
  6826  03B6  303C               	movlw	60
  6827  03B7  00A3               	movwf	___wmul@multiplicand
  6828  03B8  3000               	movlw	0
  6829  03B9  00A4               	movwf	___wmul@multiplicand+1
  6830  03BA  3195  2514  3182   	fcall	___wmul
  6831  03BD  0020               	movlb	0	; select bank0
  6832  03BE  0821               	movf	?___wmul,w
  6833  03BF  073C               	addwf	??_Calculate_Time+4,w
  6834  03C0  00C0               	movwf	??_Calculate_Time+8
  6835  03C1  0822               	movf	?___wmul+1,w
  6836  03C2  3D3D               	addwfc	??_Calculate_Time+5,w
  6837  03C3  00C1               	movwf	??_Calculate_Time+9
  6838  03C4  0838               	movf	??_Calculate_Time,w
  6839  03C5  0740               	addwf	??_Calculate_Time+8,w
  6840  03C6  00CA               	movwf	Calculate_Time@temp2
  6841  03C7  0839               	movf	??_Calculate_Time+1,w
  6842  03C8  3D41               	addwfc	??_Calculate_Time+9,w
  6843  03C9  00CB               	movwf	Calculate_Time@temp2+1
  6844  03CA  01CC               	clrf	Calculate_Time@temp2+2
  6845  03CB  1BCB               	btfsc	Calculate_Time@temp2+1,7
  6846  03CC  03CC               	decf	Calculate_Time@temp2+2,f
  6847  03CD  084C               	movf	Calculate_Time@temp2+2,w
  6848  03CE  00CD               	movwf	Calculate_Time@temp2+3
  6849                           
  6850                           ;save.c: 203: temp = temp1 - temp2;
  6851  03CF  0846               	movf	Calculate_Time@temp1,w
  6852  03D0  00B8               	movwf	??_Calculate_Time
  6853  03D1  0847               	movf	Calculate_Time@temp1+1,w
  6854  03D2  00B9               	movwf	??_Calculate_Time+1
  6855  03D3  0848               	movf	Calculate_Time@temp1+2,w
  6856  03D4  00BA               	movwf	??_Calculate_Time+2
  6857  03D5  0849               	movf	Calculate_Time@temp1+3,w
  6858  03D6  00BB               	movwf	??_Calculate_Time+3
  6859  03D7  094A               	comf	Calculate_Time@temp2,w
  6860  03D8  00BC               	movwf	??_Calculate_Time+4
  6861  03D9  094B               	comf	Calculate_Time@temp2+1,w
  6862  03DA  00BD               	movwf	??_Calculate_Time+5
  6863  03DB  094C               	comf	Calculate_Time@temp2+2,w
  6864  03DC  00BE               	movwf	??_Calculate_Time+6
  6865  03DD  094D               	comf	Calculate_Time@temp2+3,w
  6866  03DE  00BF               	movwf	??_Calculate_Time+7
  6867  03DF  0ABC               	incf	??_Calculate_Time+4,f
  6868  03E0  1903               	skipnz
  6869  03E1  0ABD               	incf	??_Calculate_Time+5,f
  6870  03E2  1903               	skipnz
  6871  03E3  0ABE               	incf	??_Calculate_Time+6,f
  6872  03E4  1903               	skipnz
  6873  03E5  0ABF               	incf	??_Calculate_Time+7,f
  6874  03E6  083C               	movf	??_Calculate_Time+4,w
  6875  03E7  07B8               	addwf	??_Calculate_Time,f
  6876  03E8  083D               	movf	??_Calculate_Time+5,w
  6877  03E9  3DB9               	addwfc	??_Calculate_Time+1,f
  6878  03EA  083E               	movf	??_Calculate_Time+6,w
  6879  03EB  3DBA               	addwfc	??_Calculate_Time+2,f
  6880  03EC  083F               	movf	??_Calculate_Time+7,w
  6881  03ED  3DBB               	addwfc	??_Calculate_Time+3,f
  6882  03EE  083B               	movf	??_Calculate_Time+3,w
  6883  03EF  00C5               	movwf	Calculate_Time@temp+3
  6884  03F0  083A               	movf	??_Calculate_Time+2,w
  6885  03F1  00C4               	movwf	Calculate_Time@temp+2
  6886  03F2  0839               	movf	??_Calculate_Time+1,w
  6887  03F3  00C3               	movwf	Calculate_Time@temp+1
  6888  03F4  0838               	movf	??_Calculate_Time,w
  6889  03F5  00C2               	movwf	Calculate_Time@temp
  6890                           
  6891                           ;save.c: 204: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  6892  03F6  3059               	movlw	low (_rtc_save_ch2| (0+256))
  6893  03F7  0086               	movwf	6
  6894  03F8  3001               	movlw	1	; select bank2/3
  6895  03F9  0087               	movwf	7
  6896  03FA  3060               	movlw	low (_rtc_tm| (0+256))
  6897  03FB  0084               	movwf	4
  6898  03FC  3001               	movlw	1	; select bank2/3
  6899  03FD  0085               	movwf	5
  6900  03FE  3007               	movlw	7
  6901  03FF  0020               	movlb	0	; select bank0
  6902  0400  00B8               	movwf	??_Calculate_Time
  6903  0401                     u491m0:	
  6904  0401  0012               	moviw fsr0++
  6905  0402  001E               	movwi fsr1++
  6906  0403  0BB8               	decfsz	??_Calculate_Time,f
  6907  0404  2C01               	goto	u491m0
  6908                           
  6909                           ;save.c: 205: return temp;
  6910  0405  0020               	movlb	0	; select bank0
  6911  0406  0842               	movf	Calculate_Time@temp,w
  6912  0407  0008               	return
  6913  0408                     l5587:	
  6914                           
  6915                           ;save.c: 206: }
  6916                           ;save.c: 207: }
  6917                           ;save.c: 208: return 0;
  6918  0408  3000               	movlw	0
  6919  0409  0008               	return
  6920  040A                     __end_of_Calculate_Time:	
  6921                           
  6922                           	psect	text19
  6923  1514                     __ptext19:	
  6924 ;; *************** function ___wmul *****************
  6925 ;; Defined at:
  6926 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6929 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;  product         2    5[BANK0 ] unsigned int 
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  2    1[BANK0 ] unsigned int 
  6934 ;; Registers used:
  6935 ;;		wreg, status,2, status,0
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6941 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;Total ram usage:        6 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    3
  6948 ;; This function calls:
  6949 ;;		Nothing
  6950 ;; This function is called by:
  6951 ;;		_Calculate_Time
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function ___wmul
  6957  1514                     ___wmul:	
  6958                           
  6959                           ;incstack = 0
  6960                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6961  1514  0020               	movlb	0	; select bank0
  6962  1515  01A5               	clrf	___wmul@product
  6963  1516  01A6               	clrf	___wmul@product+1
  6964  1517                     l5469:	
  6965  1517  1C21               	btfss	___wmul@multiplier,0
  6966  1518  2D1D               	goto	l1305
  6967  1519  0823               	movf	___wmul@multiplicand,w
  6968  151A  07A5               	addwf	___wmul@product,f
  6969  151B  0824               	movf	___wmul@multiplicand+1,w
  6970  151C  3DA6               	addwfc	___wmul@product+1,f
  6971  151D                     l1305:	
  6972  151D  3001               	movlw	1
  6973  151E                     u4765:	
  6974  151E  35A3               	lslf	___wmul@multiplicand,f
  6975  151F  0DA4               	rlf	___wmul@multiplicand+1,f
  6976  1520  0B89               	decfsz	9,f
  6977  1521  2D1E               	goto	u4765
  6978  1522  3001               	movlw	1
  6979  1523                     u4775:	
  6980  1523  36A2               	lsrf	___wmul@multiplier+1,f
  6981  1524  0CA1               	rrf	___wmul@multiplier,f
  6982  1525  0B89               	decfsz	9,f
  6983  1526  2D23               	goto	u4775
  6984  1527  0821               	movf	___wmul@multiplier,w
  6985  1528  0422               	iorwf	___wmul@multiplier+1,w
  6986  1529  1D03               	btfss	3,2
  6987  152A  2D17               	goto	l5469
  6988  152B  0826               	movf	___wmul@product+1,w
  6989  152C  00A2               	movwf	?___wmul+1
  6990  152D  0825               	movf	___wmul@product,w
  6991  152E  00A1               	movwf	?___wmul
  6992  152F  0008               	return
  6993  1530                     __end_of___wmul:	
  6994                           
  6995                           	psect	text20
  6996  1414                     __ptext20:	
  6997 ;; *************** function _Write_Flash_head *****************
  6998 ;; Defined at:
  6999 ;;		line 93 in file "mcc_generated_files/save.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0, pclath, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;Total ram usage:        0 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    5
  7020 ;; This function calls:
  7021 ;;		_Save_Write_word
  7022 ;; This function is called by:
  7023 ;;		_Key_Process
  7024 ;;		_Calculate_Time
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           
  7029                           ;psect for function _Write_Flash_head
  7030  1414                     _Write_Flash_head:	
  7031                           
  7032                           ;save.c: 95: Save_Write_word(0xAAAA);
  7033                           
  7034                           ;incstack = 0
  7035                           ; Regs used in _Write_Flash_head: [wreg+status,2+status,0+pclath+cstack]
  7036  1414  30AA               	movlw	170
  7037  1415  0020               	movlb	0	; select bank0
  7038  1416  00A6               	movwf	Save_Write_word@data
  7039  1417  30AA               	movlw	170
  7040  1418  00A7               	movwf	Save_Write_word@data+1
  7041  1419  3186  2689  3194   	fcall	_Save_Write_word
  7042                           
  7043                           ;save.c: 96: Save_Write_word(0xAAAA);
  7044  141C  30AA               	movlw	170
  7045  141D  0020               	movlb	0	; select bank0
  7046  141E  00A6               	movwf	Save_Write_word@data
  7047  141F  30AA               	movlw	170
  7048  1420  00A7               	movwf	Save_Write_word@data+1
  7049  1421  3186  2689         	fcall	_Save_Write_word
  7050  1423  0008               	return
  7051  1424                     __end_of_Write_Flash_head:	
  7052                           
  7053                           	psect	text21
  7054  1404                     __ptext21:	
  7055 ;; *************** function _Write_Flash_finish *****************
  7056 ;; Defined at:
  7057 ;;		line 105 in file "mcc_generated_files/save.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;		None
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;		None
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  1    wreg      void 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;Total ram usage:        0 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    5
  7078 ;; This function calls:
  7079 ;;		_Save_Write_word
  7080 ;; This function is called by:
  7081 ;;		_main
  7082 ;;		_Key_Process
  7083 ;;		_Serach_Flash_Head
  7084 ;;		_Calculate_Time
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           
  7089                           ;psect for function _Write_Flash_finish
  7090  1404                     _Write_Flash_finish:	
  7091                           
  7092                           ;save.c: 107: Save_Write_word(0x5555);
  7093                           
  7094                           ;incstack = 0
  7095                           ; Regs used in _Write_Flash_finish: [wreg+status,2+status,0+pclath+cstack]
  7096  1404  3055               	movlw	85
  7097  1405  0020               	movlb	0	; select bank0
  7098  1406  00A6               	movwf	Save_Write_word@data
  7099  1407  3055               	movlw	85
  7100  1408  00A7               	movwf	Save_Write_word@data+1
  7101  1409  3186  2689  3194   	fcall	_Save_Write_word
  7102                           
  7103                           ;save.c: 108: Save_Write_word(0x5555);
  7104  140C  3055               	movlw	85
  7105  140D  0020               	movlb	0	; select bank0
  7106  140E  00A6               	movwf	Save_Write_word@data
  7107  140F  3055               	movlw	85
  7108  1410  00A7               	movwf	Save_Write_word@data+1
  7109  1411  3186  2689         	fcall	_Save_Write_word
  7110  1413  0008               	return
  7111  1414                     __end_of_Write_Flash_finish:	
  7112                           
  7113                           	psect	text22
  7114  0E56                     __ptext22:	
  7115 ;; *************** function _Save_Write_time *****************
  7116 ;; Defined at:
  7117 ;;		line 272 in file "mcc_generated_files/save.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;		None
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  i               1    0        unsigned char 
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;Total ram usage:        2 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    6
  7138 ;; This function calls:
  7139 ;;		_Bq32k_Rtc_Read_Time
  7140 ;;		_Save_Write_word
  7141 ;; This function is called by:
  7142 ;;		_Key_Process
  7143 ;;		_Calculate_Time
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           
  7148                           ;psect for function _Save_Write_time
  7149  0E56                     _Save_Write_time:	
  7150                           
  7151                           ;save.c: 274: unsigned char i;
  7152                           ;save.c: 275: Bq32k_Rtc_Read_Time(&rtc_tm);
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in _Save_Write_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7156  0E56  3060               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  7157  0E57  318C  247C  318E   	fcall	_Bq32k_Rtc_Read_Time
  7158                           
  7159                           ;save.c: 276: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  7160  0E5A  3052               	movlw	low (_rtc_save_ch1| (0+256))
  7161  0E5B  0086               	movwf	6
  7162  0E5C  3001               	movlw	1	; select bank2/3
  7163  0E5D  0087               	movwf	7
  7164  0E5E  3060               	movlw	low (_rtc_tm| (0+256))
  7165  0E5F  0084               	movwf	4
  7166  0E60  3001               	movlw	1	; select bank2/3
  7167  0E61  0085               	movwf	5
  7168  0E62  3007               	movlw	7
  7169  0E63  0020               	movlb	0	; select bank0
  7170  0E64  00B6               	movwf	??_Save_Write_time
  7171  0E65                     u473m0:	
  7172  0E65  0012               	moviw fsr0++
  7173  0E66  001E               	movwi fsr1++
  7174  0E67  0BB6               	decfsz	??_Save_Write_time,f
  7175  0E68  2E65               	goto	u473m0
  7176                           
  7177                           ;save.c: 277: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7178  0E69  3059               	movlw	low (_rtc_save_ch2| (0+256))
  7179  0E6A  0086               	movwf	6
  7180  0E6B  3001               	movlw	1	; select bank2/3
  7181  0E6C  0087               	movwf	7
  7182  0E6D  3060               	movlw	low (_rtc_tm| (0+256))
  7183  0E6E  0084               	movwf	4
  7184  0E6F  3001               	movlw	1	; select bank2/3
  7185  0E70  0085               	movwf	5
  7186  0E71  3007               	movlw	7
  7187  0E72  0020               	movlb	0	; select bank0
  7188  0E73  00B6               	movwf	??_Save_Write_time
  7189  0E74                     u474m0:	
  7190  0E74  0012               	moviw fsr0++
  7191  0E75  001E               	movwi fsr1++
  7192  0E76  0BB6               	decfsz	??_Save_Write_time,f
  7193  0E77  2E74               	goto	u474m0
  7194                           
  7195                           ;save.c: 278: Save_Write_word( rtc_tm.years);
  7196  0E78  0022               	movlb	2	; select bank2
  7197  0E79  0866               	movf	(_rtc_tm^(0+256)+6),w
  7198  0E7A  0020               	movlb	0	; select bank0
  7199  0E7B  00B6               	movwf	??_Save_Write_time
  7200  0E7C  01B7               	clrf	??_Save_Write_time+1
  7201  0E7D  0836               	movf	??_Save_Write_time,w
  7202  0E7E  00A6               	movwf	Save_Write_word@data
  7203  0E7F  0837               	movf	??_Save_Write_time+1,w
  7204  0E80  00A7               	movwf	Save_Write_word@data+1
  7205  0E81  3186  2689  318E   	fcall	_Save_Write_word
  7206                           
  7207                           ;save.c: 279: Save_Write_word( rtc_tm.month);
  7208  0E84  0022               	movlb	2	; select bank2
  7209  0E85  0865               	movf	(_rtc_tm^(0+256)+5),w
  7210  0E86  0020               	movlb	0	; select bank0
  7211  0E87  00B6               	movwf	??_Save_Write_time
  7212  0E88  01B7               	clrf	??_Save_Write_time+1
  7213  0E89  0836               	movf	??_Save_Write_time,w
  7214  0E8A  00A6               	movwf	Save_Write_word@data
  7215  0E8B  0837               	movf	??_Save_Write_time+1,w
  7216  0E8C  00A7               	movwf	Save_Write_word@data+1
  7217  0E8D  3186  2689  318E   	fcall	_Save_Write_word
  7218                           
  7219                           ;save.c: 280: Save_Write_word( rtc_tm.date);
  7220  0E90  0022               	movlb	2	; select bank2
  7221  0E91  0864               	movf	(_rtc_tm^(0+256)+4),w
  7222  0E92  0020               	movlb	0	; select bank0
  7223  0E93  00B6               	movwf	??_Save_Write_time
  7224  0E94  01B7               	clrf	??_Save_Write_time+1
  7225  0E95  0836               	movf	??_Save_Write_time,w
  7226  0E96  00A6               	movwf	Save_Write_word@data
  7227  0E97  0837               	movf	??_Save_Write_time+1,w
  7228  0E98  00A7               	movwf	Save_Write_word@data+1
  7229  0E99  3186  2689  318E   	fcall	_Save_Write_word
  7230                           
  7231                           ;save.c: 281: Save_Write_word( rtc_tm.hours);
  7232  0E9C  0022               	movlb	2	; select bank2
  7233  0E9D  0862               	movf	(_rtc_tm^(0+256)+2),w
  7234  0E9E  0020               	movlb	0	; select bank0
  7235  0E9F  00B6               	movwf	??_Save_Write_time
  7236  0EA0  01B7               	clrf	??_Save_Write_time+1
  7237  0EA1  0836               	movf	??_Save_Write_time,w
  7238  0EA2  00A6               	movwf	Save_Write_word@data
  7239  0EA3  0837               	movf	??_Save_Write_time+1,w
  7240  0EA4  00A7               	movwf	Save_Write_word@data+1
  7241  0EA5  3186  2689  318E   	fcall	_Save_Write_word
  7242                           
  7243                           ;save.c: 282: Save_Write_word( rtc_tm.minutes);
  7244  0EA8  0022               	movlb	2	; select bank2
  7245  0EA9  0861               	movf	(_rtc_tm^(0+256)+1),w
  7246  0EAA  0020               	movlb	0	; select bank0
  7247  0EAB  00B6               	movwf	??_Save_Write_time
  7248  0EAC  01B7               	clrf	??_Save_Write_time+1
  7249  0EAD  0836               	movf	??_Save_Write_time,w
  7250  0EAE  00A6               	movwf	Save_Write_word@data
  7251  0EAF  0837               	movf	??_Save_Write_time+1,w
  7252  0EB0  00A7               	movwf	Save_Write_word@data+1
  7253  0EB1  3186  2689  318E   	fcall	_Save_Write_word
  7254                           
  7255                           ;save.c: 283: Save_Write_word( rtc_tm.seconds);
  7256  0EB4  0022               	movlb	2	; select bank2
  7257  0EB5  0860               	movf	_rtc_tm^(0+256),w
  7258  0EB6  0020               	movlb	0	; select bank0
  7259  0EB7  00B6               	movwf	??_Save_Write_time
  7260  0EB8  01B7               	clrf	??_Save_Write_time+1
  7261  0EB9  0836               	movf	??_Save_Write_time,w
  7262  0EBA  00A6               	movwf	Save_Write_word@data
  7263  0EBB  0837               	movf	??_Save_Write_time+1,w
  7264  0EBC  00A7               	movwf	Save_Write_word@data+1
  7265  0EBD  3186  2689  318E   	fcall	_Save_Write_word
  7266                           
  7267                           ;save.c: 284: Save_Write_word( rtc_tm.wday);
  7268  0EC0  0022               	movlb	2	; select bank2
  7269  0EC1  0863               	movf	(_rtc_tm^(0+256)+3),w
  7270  0EC2  0020               	movlb	0	; select bank0
  7271  0EC3  00B6               	movwf	??_Save_Write_time
  7272  0EC4  01B7               	clrf	??_Save_Write_time+1
  7273  0EC5  0836               	movf	??_Save_Write_time,w
  7274  0EC6  00A6               	movwf	Save_Write_word@data
  7275  0EC7  0837               	movf	??_Save_Write_time+1,w
  7276  0EC8  00A7               	movwf	Save_Write_word@data+1
  7277  0EC9  3186  2689  318E   	fcall	_Save_Write_word
  7278                           
  7279                           ;save.c: 285: Save_Write_word( rtc_tm.wday);
  7280  0ECC  0022               	movlb	2	; select bank2
  7281  0ECD  0863               	movf	(_rtc_tm^(0+256)+3),w
  7282  0ECE  0020               	movlb	0	; select bank0
  7283  0ECF  00B6               	movwf	??_Save_Write_time
  7284  0ED0  01B7               	clrf	??_Save_Write_time+1
  7285  0ED1  0836               	movf	??_Save_Write_time,w
  7286  0ED2  00A6               	movwf	Save_Write_word@data
  7287  0ED3  0837               	movf	??_Save_Write_time+1,w
  7288  0ED4  00A7               	movwf	Save_Write_word@data+1
  7289  0ED5  3186  2689         	fcall	_Save_Write_word
  7290  0ED7  0008               	return
  7291  0ED8                     __end_of_Save_Write_time:	
  7292                           
  7293                           	psect	text23
  7294  0689                     __ptext23:	
  7295 ;; *************** function _Save_Write_word *****************
  7296 ;; Defined at:
  7297 ;;		line 217 in file "mcc_generated_files/save.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;  data            2    6[BANK0 ] unsigned int 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;		None
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      void 
  7304 ;; Registers used:
  7305 ;;		wreg, status,2, status,0, pclath, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7311 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;Total ram usage:        6 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    4
  7318 ;; This function calls:
  7319 ;;		_FLASH_EraseBlock
  7320 ;;		_FLASH_ReadWord
  7321 ;;		_FLASH_WriteWord
  7322 ;; This function is called by:
  7323 ;;		_tc_temperature_trans
  7324 ;;		_Write_Flash_head
  7325 ;;		_Write_Flash_finish
  7326 ;;		_Save_process
  7327 ;;		_Save_Write_time
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           
  7332                           ;psect for function _Save_Write_word
  7333  0689                     _Save_Write_word:	
  7334                           
  7335                           ;save.c: 219: if( Cur_Save_Index % 32 == 0 || Cur_Save_Index % 32 == 16 )
  7336                           
  7337                           ;incstack = 0
  7338                           ; Regs used in _Save_Write_word: [wreg+status,2+status,0+pclath+cstack]
  7339  0689  301F               	movlw	31
  7340  068A  0020               	movlb	0	; select bank0
  7341  068B  0565               	andwf	_Cur_Save_Index,w
  7342  068C  00A8               	movwf	??_Save_Write_word
  7343  068D  3000               	movlw	0
  7344  068E  0566               	andwf	_Cur_Save_Index+1,w
  7345  068F  00A9               	movwf	??_Save_Write_word+1
  7346  0690  0828               	movf	??_Save_Write_word,w
  7347  0691  0429               	iorwf	??_Save_Write_word+1,w
  7348  0692  1903               	btfsc	3,2
  7349  0693  2E9F               	goto	l5371
  7350  0694  301F               	movlw	31
  7351  0695  0565               	andwf	_Cur_Save_Index,w
  7352  0696  00A8               	movwf	??_Save_Write_word
  7353  0697  3000               	movlw	0
  7354  0698  0566               	andwf	_Cur_Save_Index+1,w
  7355  0699  00A9               	movwf	??_Save_Write_word+1
  7356  069A  3010               	movlw	16
  7357  069B  0628               	xorwf	??_Save_Write_word,w
  7358  069C  0429               	iorwf	??_Save_Write_word+1,w
  7359  069D  1D03               	btfss	3,2
  7360  069E  2F21               	goto	l5395
  7361  069F                     l5371:	
  7362                           
  7363                           ;save.c: 220: {
  7364                           ;save.c: 221: if(Cur_Save_Index == 0x3fff - 32)
  7365  069F  30DF               	movlw	223
  7366  06A0  0665               	xorwf	_Cur_Save_Index,w
  7367  06A1  303F               	movlw	63
  7368  06A2  1903               	skipnz
  7369  06A3  0666               	xorwf	_Cur_Save_Index+1,w
  7370  06A4  1D03               	btfss	3,2
  7371  06A5  2ED4               	goto	l5383
  7372                           
  7373                           ;save.c: 222: {
  7374                           ;save.c: 223: if( (Cur_Save_Index_Bak - 0x2000 >32) )
  7375  06A6  0022               	movlb	2	; select bank2
  7376  06A7  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  7377  06A8  3E00               	addlw	0
  7378  06A9  0020               	movlb	0	; select bank0
  7379  06AA  00A8               	movwf	??_Save_Write_word
  7380  06AB  30E0               	movlw	224
  7381  06AC  0022               	movlb	2	; select bank2
  7382  06AD  3D2F               	addwfc	(_Cur_Save_Index_Bak+1)^(0+256),w
  7383  06AE  0020               	movlb	0	; select bank0
  7384  06AF  00A9               	movwf	??_Save_Write_word+1
  7385  06B0  3000               	movlw	0
  7386  06B1  0229               	subwf	??_Save_Write_word+1,w
  7387  06B2  3021               	movlw	33
  7388  06B3  1903               	skipnz
  7389  06B4  0228               	subwf	??_Save_Write_word,w
  7390  06B5  1C03               	skipc
  7391  06B6  2F21               	goto	l5395
  7392                           
  7393                           ;save.c: 224: {
  7394                           ;save.c: 225: if(Cur_Save_Index % 32 == 0)
  7395  06B7  301F               	movlw	31
  7396  06B8  0565               	andwf	_Cur_Save_Index,w
  7397  06B9  00A8               	movwf	??_Save_Write_word
  7398  06BA  3000               	movlw	0
  7399  06BB  0566               	andwf	_Cur_Save_Index+1,w
  7400  06BC  00A9               	movwf	??_Save_Write_word+1
  7401  06BD  0828               	movf	??_Save_Write_word,w
  7402  06BE  0429               	iorwf	??_Save_Write_word+1,w
  7403  06BF  1903               	btfsc	3,2
  7404  06C0  2ED0               	goto	L12
  7405                           
  7406                           ;save.c: 229: else
  7407                           ;save.c: 230: {
  7408                           ;save.c: 231: if( FLASH_ReadWord (0x2000 + 16 ) != 0x3fff)
  7409                           
  7410                           ;save.c: 228: }
  7411                           
  7412                           ;save.c: 226: {
  7413                           ;save.c: 227: FLASH_EraseBlock(0x2000);
  7414  06C1  3010               	movlw	16
  7415  06C2  0020               	movlb	0	; select bank0
  7416  06C3  00A1               	movwf	FLASH_ReadWord@flashAddr
  7417  06C4  3020               	movlw	32
  7418  06C5  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  7419  06C6  3195  25C3  3186   	fcall	_FLASH_ReadWord
  7420  06C9  0020               	movlb	0	; select bank0
  7421  06CA  0A21               	incf	?_FLASH_ReadWord,w
  7422  06CB  303F               	movlw	63
  7423  06CC  1903               	skipnz
  7424  06CD  0622               	xorwf	?_FLASH_ReadWord+1,w
  7425  06CE  1903               	btfsc	3,2
  7426  06CF  2F21               	goto	l5395
  7427  06D0                     L12:	
  7428                           
  7429                           ;save.c: 232: {
  7430                           ;save.c: 233: FLASH_EraseBlock(0x2000);
  7431  06D0  3000               	movlw	0
  7432  06D1  00A1               	movwf	FLASH_EraseBlock@startAddr
  7433  06D2  3020               	movlw	32
  7434  06D3  2F1D               	goto	L10
  7435  06D4                     l5383:	
  7436                           ;save.c: 234: }
  7437                           ;save.c: 235: }
  7438                           ;save.c: 236: }
  7439                           ;save.c: 237: }
  7440                           
  7441                           
  7442                           ;save.c: 238: else
  7443                           ;save.c: 239: {
  7444                           ;save.c: 240: if( (Cur_Save_Index_Bak < Cur_Save_Index) ||(Cur_Save_Index_Bak - Cur_Save
      +                          _Index > 64) )
  7445  06D4  0020               	movlb	0	; select bank0
  7446  06D5  0866               	movf	_Cur_Save_Index+1,w
  7447  06D6  0022               	movlb	2	; select bank2
  7448  06D7  022F               	subwf	(_Cur_Save_Index_Bak+1)^(0+256),w
  7449  06D8  1D03               	skipz
  7450  06D9  2EDE               	goto	u4625
  7451  06DA  0020               	movlb	0	; select bank0
  7452  06DB  0865               	movf	_Cur_Save_Index,w
  7453  06DC  0022               	movlb	2	; select bank2
  7454  06DD  022E               	subwf	_Cur_Save_Index_Bak^(0+256),w
  7455  06DE                     u4625:	
  7456  06DE  1C03               	skipc
  7457  06DF  2EF9               	goto	l5387
  7458  06E0  0020               	movlb	0	; select bank0
  7459  06E1  0965               	comf	_Cur_Save_Index,w
  7460  06E2  00A8               	movwf	??_Save_Write_word
  7461  06E3  0966               	comf	_Cur_Save_Index+1,w
  7462  06E4  00A9               	movwf	??_Save_Write_word+1
  7463  06E5  0AA8               	incf	??_Save_Write_word,f
  7464  06E6  1903               	skipnz
  7465  06E7  0AA9               	incf	??_Save_Write_word+1,f
  7466  06E8  0022               	movlb	2	; select bank2
  7467  06E9  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  7468  06EA  0020               	movlb	0	; select bank0
  7469  06EB  0728               	addwf	??_Save_Write_word,w
  7470  06EC  00AA               	movwf	??_Save_Write_word+2
  7471  06ED  0022               	movlb	2	; select bank2
  7472  06EE  082F               	movf	(_Cur_Save_Index_Bak+1)^(0+256),w
  7473  06EF  0020               	movlb	0	; select bank0
  7474  06F0  3D29               	addwfc	??_Save_Write_word+1,w
  7475  06F1  00AB               	movwf	??_Save_Write_word+3
  7476  06F2  3000               	movlw	0
  7477  06F3  022B               	subwf	??_Save_Write_word+3,w
  7478  06F4  3041               	movlw	65
  7479  06F5  1903               	skipnz
  7480  06F6  022A               	subwf	??_Save_Write_word+2,w
  7481  06F7  1C03               	skipc
  7482  06F8  2F21               	goto	l5395
  7483  06F9                     l5387:	
  7484                           
  7485                           ;save.c: 241: {
  7486                           ;save.c: 242: if(Cur_Save_Index % 32 == 0)
  7487  06F9  301F               	movlw	31
  7488  06FA  0020               	movlb	0	; select bank0
  7489  06FB  0565               	andwf	_Cur_Save_Index,w
  7490  06FC  00A8               	movwf	??_Save_Write_word
  7491  06FD  3000               	movlw	0
  7492  06FE  0566               	andwf	_Cur_Save_Index+1,w
  7493  06FF  00A9               	movwf	??_Save_Write_word+1
  7494  0700  0828               	movf	??_Save_Write_word,w
  7495  0701  0429               	iorwf	??_Save_Write_word+1,w
  7496  0702  1D03               	btfss	3,2
  7497  0703  2F07               	goto	l5391
  7498                           
  7499                           ;save.c: 243: {
  7500                           ;save.c: 244: FLASH_EraseBlock(Cur_Save_Index+32);
  7501  0704  0865               	movf	_Cur_Save_Index,w
  7502  0705  3E20               	addlw	32
  7503  0706  2F1A               	goto	L13
  7504  0707                     l5391:	
  7505                           ;save.c: 245: }
  7506                           
  7507                           
  7508                           ;save.c: 246: else
  7509                           ;save.c: 247: {
  7510                           ;save.c: 248: if( FLASH_ReadWord (Cur_Save_Index + 32) != 0x3fff)
  7511  0707  0020               	movlb	0	; select bank0
  7512  0708  0865               	movf	_Cur_Save_Index,w
  7513  0709  3E20               	addlw	32
  7514  070A  00A1               	movwf	FLASH_ReadWord@flashAddr
  7515  070B  3000               	movlw	0
  7516  070C  3D66               	addwfc	_Cur_Save_Index+1,w
  7517  070D  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  7518  070E  3195  25C3  3186   	fcall	_FLASH_ReadWord
  7519  0711  0020               	movlb	0	; select bank0
  7520  0712  0A21               	incf	?_FLASH_ReadWord,w
  7521  0713  303F               	movlw	63
  7522  0714  1903               	skipnz
  7523  0715  0622               	xorwf	?_FLASH_ReadWord+1,w
  7524  0716  1903               	btfsc	3,2
  7525  0717  2F21               	goto	l5395
  7526                           
  7527                           ;save.c: 249: {
  7528                           ;save.c: 250: FLASH_EraseBlock(Cur_Save_Index + 16);
  7529  0718  0865               	movf	_Cur_Save_Index,w
  7530  0719  3E10               	addlw	16
  7531  071A                     L13:	
  7532  071A  00A1               	movwf	FLASH_EraseBlock@startAddr
  7533  071B  3000               	movlw	0
  7534  071C  3D66               	addwfc	_Cur_Save_Index+1,w
  7535  071D                     L10:	
  7536  071D  00A2               	movwf	FLASH_EraseBlock@startAddr+1
  7537  071E  3196  2623  3186   	fcall	_FLASH_EraseBlock
  7538  0721                     l5395:	
  7539                           
  7540                           ;save.c: 251: }
  7541                           ;save.c: 252: }
  7542                           ;save.c: 253: }
  7543                           ;save.c: 254: }
  7544                           ;save.c: 255: }
  7545                           ;save.c: 257: if( (data & 0x3fff) == 0x3fff)
  7546  0721  30FF               	movlw	255
  7547  0722  0020               	movlb	0	; select bank0
  7548  0723  0526               	andwf	Save_Write_word@data,w
  7549  0724  00A8               	movwf	??_Save_Write_word
  7550  0725  303F               	movlw	63
  7551  0726  0527               	andwf	Save_Write_word@data+1,w
  7552  0727  00A9               	movwf	??_Save_Write_word+1
  7553  0728  0A28               	incf	??_Save_Write_word,w
  7554  0729  303F               	movlw	63
  7555  072A  1903               	skipnz
  7556  072B  0629               	xorwf	??_Save_Write_word+1,w
  7557  072C  1D03               	btfss	3,2
  7558  072D  2F37               	goto	l5399
  7559                           
  7560                           ;save.c: 258: FLASH_WriteWord(Cur_Save_Index, 0x3ffe);
  7561  072E  0866               	movf	_Cur_Save_Index+1,w
  7562  072F  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7563  0730  0865               	movf	_Cur_Save_Index,w
  7564  0731  00A1               	movwf	FLASH_WriteWord@flashAddr
  7565  0732  30FE               	movlw	254
  7566  0733  00A3               	movwf	FLASH_WriteWord@word
  7567  0734  303F               	movlw	63
  7568  0735  00A4               	movwf	FLASH_WriteWord@word+1
  7569  0736  2F40               	goto	L11
  7570  0737                     l5399:	
  7571                           
  7572                           ;save.c: 259: else
  7573                           ;save.c: 260: FLASH_WriteWord(Cur_Save_Index, data);
  7574  0737  0020               	movlb	0	; select bank0
  7575  0738  0866               	movf	_Cur_Save_Index+1,w
  7576  0739  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7577  073A  0865               	movf	_Cur_Save_Index,w
  7578  073B  00A1               	movwf	FLASH_WriteWord@flashAddr
  7579  073C  0827               	movf	Save_Write_word@data+1,w
  7580  073D  00A4               	movwf	FLASH_WriteWord@word+1
  7581  073E  0826               	movf	Save_Write_word@data,w
  7582  073F  00A3               	movwf	FLASH_WriteWord@word
  7583  0740                     L11:	
  7584  0740  3196  26ED  3186   	fcall	_FLASH_WriteWord
  7585                           
  7586                           ;save.c: 262: if(Cur_Save_Index == 0x3fff ) Cur_Save_Index = 0x2000 ;
  7587  0743  0020               	movlb	0	; select bank0
  7588  0744  0A65               	incf	_Cur_Save_Index,w
  7589  0745  303F               	movlw	63
  7590  0746  1903               	skipnz
  7591  0747  0666               	xorwf	_Cur_Save_Index+1,w
  7592  0748  1D03               	btfss	3,2
  7593  0749  2F4F               	goto	l5405
  7594  074A  3000               	movlw	0
  7595  074B  00E5               	movwf	_Cur_Save_Index
  7596  074C  3020               	movlw	32
  7597  074D  00E6               	movwf	_Cur_Save_Index+1
  7598  074E  0008               	return
  7599  074F                     l5405:	
  7600                           
  7601                           ;save.c: 263: else Cur_Save_Index++;
  7602  074F  3001               	movlw	1
  7603  0750  07E5               	addwf	_Cur_Save_Index,f
  7604  0751  3000               	movlw	0
  7605  0752  3DE6               	addwfc	_Cur_Save_Index+1,f
  7606  0753  0008               	return
  7607  0754                     __end_of_Save_Write_word:	
  7608                           
  7609                           	psect	text24
  7610  16ED                     __ptext24:	
  7611 ;; *************** function _FLASH_WriteWord *****************
  7612 ;; Defined at:
  7613 ;;		line 93 in file "mcc_generated_files/memory.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  flashAddr       2    1[BANK0 ] unsigned int 
  7616 ;;  word            2    3[BANK0 ] unsigned int 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  GIEBitValue     1    5[BANK0 ] unsigned char 
  7619 ;; Return value:  Size  Location     Type
  7620 ;;                  1    wreg      void 
  7621 ;; Registers used:
  7622 ;;		wreg, status,2, status,0
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7628 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;Total ram usage:        5 bytes
  7633 ;; Hardware stack levels used:    1
  7634 ;; Hardware stack levels required when called:    3
  7635 ;; This function calls:
  7636 ;;		Nothing
  7637 ;; This function is called by:
  7638 ;;		_Save_Write_word
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           
  7643                           ;psect for function _FLASH_WriteWord
  7644  16ED                     _FLASH_WriteWord:	
  7645                           
  7646                           ;memory.c: 95: uint8_t GIEBitValue = INTCONbits.GIE;
  7647                           
  7648                           ;incstack = 0
  7649                           ; Regs used in _FLASH_WriteWord: [wreg+status,2+status,0]
  7650  16ED  3000               	movlw	0
  7651  16EE  1B8B               	btfsc	11,7	;volatile
  7652  16EF  3001               	movlw	1
  7653  16F0  0020               	movlb	0	; select bank0
  7654  16F1  00A5               	movwf	FLASH_WriteWord@GIEBitValue
  7655                           
  7656                           ;memory.c: 98: INTCONbits.GIE = 0;
  7657  16F2  138B               	bcf	11,7	;volatile
  7658                           
  7659                           ;memory.c: 102: PMCON1bits.CFGS = 0;
  7660  16F3  0023               	movlb	3	; select bank3
  7661  16F4  1315               	bcf	21,6	;volatile
  7662                           
  7663                           ;memory.c: 103: PMCON1bits.WREN = 1;
  7664  16F5  1515               	bsf	21,2	;volatile
  7665                           
  7666                           ;memory.c: 104: PMCON1bits.LWLO = 1;
  7667  16F6  1695               	bsf	21,5	;volatile
  7668                           
  7669                           ;memory.c: 107: PMADRL = (flashAddr & 0xFF);
  7670  16F7  0020               	movlb	0	; select bank0
  7671  16F8  0821               	movf	FLASH_WriteWord@flashAddr,w
  7672  16F9  0023               	movlb	3	; select bank3
  7673  16FA  0091               	movwf	17	;volatile
  7674                           
  7675                           ;memory.c: 109: PMADRH = ((flashAddr & 0xFF00) >> 8);
  7676  16FB  0020               	movlb	0	; select bank0
  7677  16FC  0822               	movf	FLASH_WriteWord@flashAddr+1,w
  7678  16FD  0023               	movlb	3	; select bank3
  7679  16FE  0092               	movwf	18	;volatile
  7680                           
  7681                           ;memory.c: 112: PMDATL = word;
  7682  16FF  0020               	movlb	0	; select bank0
  7683  1700  0823               	movf	FLASH_WriteWord@word,w
  7684  1701  0023               	movlb	3	; select bank3
  7685  1702  0093               	movwf	19	;volatile
  7686                           
  7687                           ;memory.c: 113: PMDATH = ((word & 0xFF00) >> 8);
  7688  1703  0020               	movlb	0	; select bank0
  7689  1704  0824               	movf	FLASH_WriteWord@word+1,w
  7690  1705  0023               	movlb	3	; select bank3
  7691  1706  0094               	movwf	20	;volatile
  7692                           
  7693                           ;memory.c: 116: PMCON1bits.LWLO = 0;
  7694  1707  1295               	bcf	21,5	;volatile
  7695                           
  7696                           ;memory.c: 118: PMCON2 = 0x55;
  7697  1708  3055               	movlw	85
  7698  1709  0096               	movwf	22	;volsfr
  7699                           
  7700                           ;memory.c: 119: PMCON2 = 0xAA;
  7701  170A  30AA               	movlw	170
  7702  170B  0096               	movwf	22	;volsfr
  7703                           
  7704                           ;memory.c: 120: PMCON1bits.WR = 1;
  7705  170C  1495               	bsf	21,1	;volatile
  7706                           
  7707                           ;memory.c: 121: __nop();
  7708  170D  0000               	nop
  7709                           
  7710                           ;memory.c: 122: __nop();
  7711  170E  0000               	nop
  7712                           
  7713                           ;memory.c: 124: PMCON1bits.WREN = 0;
  7714  170F  0023               	movlb	3	; select bank3
  7715  1710  1115               	bcf	21,2	;volatile
  7716                           
  7717                           ;memory.c: 125: INTCONbits.GIE = GIEBitValue;
  7718  1711  0020               	movlb	0	; select bank0
  7719  1712  0C25               	rrf	FLASH_WriteWord@GIEBitValue,w
  7720  1713  1C03               	skipc
  7721  1714  138B               	bcf	11,7	;volatile
  7722  1715  1803               	skipnc
  7723  1716  178B               	bsf	11,7	;volatile
  7724  1717  0008               	return
  7725  1718                     __end_of_FLASH_WriteWord:	
  7726                           
  7727                           	psect	text25
  7728  1623                     __ptext25:	
  7729 ;; *************** function _FLASH_EraseBlock *****************
  7730 ;; Defined at:
  7731 ;;		line 178 in file "mcc_generated_files/memory.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;  startAddr       2    1[BANK0 ] unsigned int 
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7736 ;; Return value:  Size  Location     Type
  7737 ;;                  1    wreg      void 
  7738 ;; Registers used:
  7739 ;;		wreg, status,2, status,0
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;Total ram usage:        3 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; Hardware stack levels required when called:    3
  7752 ;; This function calls:
  7753 ;;		Nothing
  7754 ;; This function is called by:
  7755 ;;		_Key_Process
  7756 ;;		_Save_Write_word
  7757 ;;		_FLASH_WriteBlock
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           
  7762                           ;psect for function _FLASH_EraseBlock
  7763  1623                     _FLASH_EraseBlock:	
  7764                           
  7765                           ;memory.c: 179: uint8_t GIEBitValue = INTCONbits.GIE;
  7766                           
  7767                           ;incstack = 0
  7768                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  7769  1623  3000               	movlw	0
  7770  1624  1B8B               	btfsc	11,7	;volatile
  7771  1625  3001               	movlw	1
  7772  1626  0020               	movlb	0	; select bank0
  7773  1627  00A3               	movwf	FLASH_EraseBlock@GIEBitValue
  7774                           
  7775                           ;memory.c: 182: INTCONbits.GIE = 0;
  7776  1628  138B               	bcf	11,7	;volatile
  7777                           
  7778                           ;memory.c: 184: PMADRL = (startAddr & 0xFF);
  7779  1629  0821               	movf	FLASH_EraseBlock@startAddr,w
  7780  162A  0023               	movlb	3	; select bank3
  7781  162B  0091               	movwf	17	;volatile
  7782                           
  7783                           ;memory.c: 186: PMADRH = ((startAddr & 0xFF00) >> 8);
  7784  162C  0020               	movlb	0	; select bank0
  7785  162D  0822               	movf	FLASH_EraseBlock@startAddr+1,w
  7786  162E  0023               	movlb	3	; select bank3
  7787  162F  0092               	movwf	18	;volatile
  7788                           
  7789                           ;memory.c: 189: PMCON1bits.CFGS = 0;
  7790  1630  1315               	bcf	21,6	;volatile
  7791                           
  7792                           ;memory.c: 190: PMCON1bits.FREE = 1;
  7793  1631  1615               	bsf	21,4	;volatile
  7794                           
  7795                           ;memory.c: 191: PMCON1bits.WREN = 1;
  7796  1632  1515               	bsf	21,2	;volatile
  7797                           
  7798                           ;memory.c: 194: PMCON2 = 0x55;
  7799  1633  3055               	movlw	85
  7800  1634  0096               	movwf	22	;volsfr
  7801                           
  7802                           ;memory.c: 195: PMCON2 = 0xAA;
  7803  1635  30AA               	movlw	170
  7804  1636  0096               	movwf	22	;volsfr
  7805                           
  7806                           ;memory.c: 196: PMCON1bits.WR = 1;
  7807  1637  1495               	bsf	21,1	;volatile
  7808                           
  7809                           ;memory.c: 197: __nop();
  7810  1638  0000               	nop
  7811                           
  7812                           ;memory.c: 198: __nop();
  7813  1639  0000               	nop
  7814                           
  7815                           ;memory.c: 200: PMCON1bits.WREN = 0;
  7816  163A  0023               	movlb	3	; select bank3
  7817  163B  1115               	bcf	21,2	;volatile
  7818                           
  7819                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  7820  163C  0020               	movlb	0	; select bank0
  7821  163D  0C23               	rrf	FLASH_EraseBlock@GIEBitValue,w
  7822  163E  1C03               	skipc
  7823  163F  138B               	bcf	11,7	;volatile
  7824  1640  1803               	skipnc
  7825  1641  178B               	bsf	11,7	;volatile
  7826  1642  0008               	return
  7827  1643                     __end_of_FLASH_EraseBlock:	
  7828                           
  7829                           	psect	text26
  7830  1457                     __ptext26:	
  7831 ;; *************** function _maxim_clear_fault_status *****************
  7832 ;; Defined at:
  7833 ;;		line 155 in file "mcc_generated_files/max31856.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;		None
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;		None
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      void 
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0, pclath, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;Total ram usage:        1 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    5
  7854 ;; This function calls:
  7855 ;;		_maxim_31856_read_register
  7856 ;;		_maxim_31856_write_register
  7857 ;; This function is called by:
  7858 ;;		_temperature_display
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           
  7863                           ;psect for function _maxim_clear_fault_status
  7864  1457                     _maxim_clear_fault_status:	
  7865                           
  7866                           ;max31856.c: 157: uch_cr0= maxim_31856_read_register(0x00);
  7867                           
  7868                           ;incstack = 0
  7869                           ; Regs used in _maxim_clear_fault_status: [wreg+status,2+status,0+pclath+cstack]
  7870  1457  3000               	movlw	0
  7871  1458  3194  247F  3194   	fcall	_maxim_31856_read_register
  7872  145B  0020               	movlb	0	; select bank0
  7873  145C  00A5               	movwf	??_maxim_clear_fault_status
  7874  145D  0825               	movf	??_maxim_clear_fault_status,w
  7875  145E  0021               	movlb	1	; select bank1
  7876  145F  00EF               	movwf	_uch_cr0^(0+128)
  7877                           
  7878                           ;max31856.c: 158: uch_cr0|= (uint8_t) 0x02 ;
  7879  1460  14EF               	bsf	_uch_cr0^(0+128),1
  7880                           
  7881                           ;max31856.c: 159: maxim_31856_write_register(0x80, uch_cr0);
  7882  1461  086F               	movf	_uch_cr0^(0+128),w
  7883  1462  0020               	movlb	0	; select bank0
  7884  1463  00A5               	movwf	??_maxim_clear_fault_status
  7885  1464  0825               	movf	??_maxim_clear_fault_status,w
  7886  1465  00A2               	movwf	maxim_31856_write_register@uch_register_value
  7887  1466  3080               	movlw	128
  7888  1467  3193  23F4         	fcall	_maxim_31856_write_register
  7889  1469  0008               	return
  7890  146A                     __end_of_maxim_clear_fault_status:	
  7891                           
  7892                           	psect	text27
  7893  1718                     __ptext27:	
  7894 ;; *************** function _err_Display *****************
  7895 ;; Defined at:
  7896 ;;		line 153 in file "mcc_generated_files/ht1621.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;		None
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;  num             4   12[BANK0 ] unsigned char [4]
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      void 
  7903 ;; Registers used:
  7904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;Total ram usage:        5 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    5
  7917 ;; This function calls:
  7918 ;;		_WriteAll_1621
  7919 ;; This function is called by:
  7920 ;;		_temperature_display
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           
  7925                           ;psect for function _err_Display
  7926  1718                     _err_Display:	
  7927                           
  7928                           ;ht1621.c: 155: unsigned char num[4]={0};
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _err_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7932  1718  0022               	movlb	2	; select bank2
  7933  1719  0827               	movf	(err_Display@F2141+3)^(0+256),w
  7934  171A  0020               	movlb	0	; select bank0
  7935  171B  00AF               	movwf	err_Display@num+3
  7936  171C  0022               	movlb	2	; select bank2
  7937  171D  0826               	movf	(err_Display@F2141+2)^(0+256),w
  7938  171E  0020               	movlb	0	; select bank0
  7939  171F  00AE               	movwf	err_Display@num+2
  7940  1720  0022               	movlb	2	; select bank2
  7941  1721  0825               	movf	(err_Display@F2141+1)^(0+256),w
  7942  1722  0020               	movlb	0	; select bank0
  7943  1723  00AD               	movwf	err_Display@num+1
  7944  1724  0022               	movlb	2	; select bank2
  7945  1725  0824               	movf	err_Display@F2141^(0+256),w
  7946  1726  0020               	movlb	0	; select bank0
  7947  1727  00AC               	movwf	err_Display@num
  7948                           
  7949                           ;ht1621.c: 156: num[1] = Dis_TAB[0x10];
  7950  1728  3010               	movlw	low ((_Dis_TAB+16)| (0+32768))
  7951  1729  0084               	movwf	4
  7952  172A  3098               	movlw	high ((_Dis_TAB+16)| (0+32768))
  7953  172B  0085               	movwf	5
  7954  172C  0800               	movf	0,w	;code access
  7955  172D  00AB               	movwf	??_err_Display
  7956  172E  082B               	movf	??_err_Display,w
  7957  172F  00AD               	movwf	err_Display@num+1
  7958                           
  7959                           ;ht1621.c: 157: num[2] = Dis_TAB[0x0c];
  7960  1730  300C               	movlw	low ((_Dis_TAB+12)| (0+32768))
  7961  1731  0084               	movwf	4
  7962  1732  3098               	movlw	high ((_Dis_TAB+12)| (0+32768))
  7963  1733  0085               	movwf	5
  7964  1734  0800               	movf	0,w	;code access
  7965  1735  00AB               	movwf	??_err_Display
  7966  1736  082B               	movf	??_err_Display,w
  7967  1737  00AE               	movwf	err_Display@num+2
  7968                           
  7969                           ;ht1621.c: 158: WriteAll_1621(0, num, 4);
  7970  1738  302C               	movlw	low err_Display@num
  7971  1739  00A5               	movwf	WriteAll_1621@p
  7972  173A  3000               	movlw	high err_Display@num
  7973  173B  00A6               	movwf	WriteAll_1621@p+1
  7974  173C  3004               	movlw	4
  7975  173D  00AB               	movwf	??_err_Display
  7976  173E  082B               	movf	??_err_Display,w
  7977  173F  00A7               	movwf	WriteAll_1621@cnt
  7978  1740  3000               	movlw	0
  7979  1741  3188  2015         	fcall	_WriteAll_1621
  7980  1743  0008               	return
  7981  1744                     __end_of_err_Display:	
  7982                           
  7983                           	psect	text28
  7984  05B8                     __ptext28:	
  7985 ;; *************** function _Tc_Display *****************
  7986 ;; Defined at:
  7987 ;;		line 110 in file "mcc_generated_files/ht1621.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;		None
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;  data            2   17[BANK0 ] unsigned int 
  7992 ;;  count           1   16[BANK0 ] unsigned char 
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  1    wreg      void 
  7995 ;; Registers used:
  7996 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;Total ram usage:        4 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    5
  8009 ;; This function calls:
  8010 ;;		_WriteAll_1621
  8011 ;;		___lwdiv
  8012 ;;		___lwmod
  8013 ;;		_memset
  8014 ;; This function is called by:
  8015 ;;		_temperature_display
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           
  8020                           ;psect for function _Tc_Display
  8021  05B8                     _Tc_Display:	
  8022                           
  8023                           ;ht1621.c: 112: unsigned char count = 0;
  8024                           
  8025                           ;incstack = 0
  8026                           ; Regs used in _Tc_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8027  05B8  0020               	movlb	0	; select bank0
  8028  05B9  01B0               	clrf	Tc_Display@count
  8029                           
  8030                           ;ht1621.c: 113: unsigned int data = temperature_int;
  8031  05BA  0022               	movlb	2	; select bank2
  8032  05BB  0833               	movf	(_temperature_int+1)^(0+256),w
  8033  05BC  0020               	movlb	0	; select bank0
  8034  05BD  00B2               	movwf	Tc_Display@data+1
  8035  05BE  0022               	movlb	2	; select bank2
  8036  05BF  0832               	movf	_temperature_int^(0+256),w
  8037  05C0  0020               	movlb	0	; select bank0
  8038  05C1  00B1               	movwf	Tc_Display@data
  8039                           
  8040                           ;ht1621.c: 114: memset(display_buff,0,4);
  8041  05C2  3000               	movlw	0
  8042  05C3  00A1               	movwf	memset@c
  8043  05C4  00A2               	movwf	memset@c+1
  8044  05C5  3004               	movlw	4
  8045  05C6  00A3               	movwf	memset@n
  8046  05C7  3000               	movlw	0
  8047  05C8  00A4               	movwf	memset@n+1
  8048  05C9  3067               	movlw	(low (_display_buff| (0+256)))& (0+255)
  8049  05CA  3194  24F8  3185   	fcall	_memset
  8050  05CD                     l5907:	
  8051                           ;ht1621.c: 115: while(data)
  8052                           
  8053  05CD  0020               	movlb	0	; select bank0
  8054  05CE  0831               	movf	Tc_Display@data,w
  8055  05CF  0432               	iorwf	Tc_Display@data+1,w
  8056  05D0  1903               	btfsc	3,2
  8057  05D1  2E55               	goto	l5915
  8058                           
  8059                           ;ht1621.c: 116: {
  8060                           ;ht1621.c: 117: count++;
  8061  05D2  3001               	movlw	1
  8062  05D3  0020               	movlb	0	; select bank0
  8063  05D4  00AF               	movwf	??_Tc_Display
  8064  05D5  082F               	movf	??_Tc_Display,w
  8065  05D6  07B0               	addwf	Tc_Display@count,f
  8066                           
  8067                           ;ht1621.c: 118: data /=10;
  8068  05D7  300A               	movlw	10
  8069  05D8  00A7               	movwf	___lwdiv@divisor
  8070  05D9  3000               	movlw	0
  8071  05DA  00A8               	movwf	___lwdiv@divisor+1
  8072  05DB  0832               	movf	Tc_Display@data+1,w
  8073  05DC  00AA               	movwf	___lwdiv@dividend+1
  8074  05DD  0831               	movf	Tc_Display@data,w
  8075  05DE  00A9               	movwf	___lwdiv@dividend
  8076  05DF  3188  204A  3185   	fcall	___lwdiv
  8077  05E2  0020               	movlb	0	; select bank0
  8078  05E3  0828               	movf	?___lwdiv+1,w
  8079  05E4  00B2               	movwf	Tc_Display@data+1
  8080  05E5  0827               	movf	?___lwdiv,w
  8081  05E6  00B1               	movwf	Tc_Display@data
  8082  05E7  2DCD               	goto	l5907
  8083  05E8                     l5909:	
  8084                           ;ht1621.c: 121: {
  8085                           ;ht1621.c: 122: case 3:display_buff[0] = Dis_TAB[temperature_int/100];
  8086                           
  8087                           ;ht1621.c: 119: }
  8088                           ;ht1621.c: 120: switch(count)
  8089                           
  8090  05E8  3064               	movlw	100
  8091  05E9  00A7               	movwf	___lwdiv@divisor
  8092  05EA  3000               	movlw	0
  8093  05EB  00A8               	movwf	___lwdiv@divisor+1
  8094  05EC  0022               	movlb	2	; select bank2
  8095  05ED  0833               	movf	(_temperature_int+1)^(0+256),w
  8096  05EE  0020               	movlb	0	; select bank0
  8097  05EF  00AA               	movwf	___lwdiv@dividend+1
  8098  05F0  0022               	movlb	2	; select bank2
  8099  05F1  0832               	movf	_temperature_int^(0+256),w
  8100  05F2  0020               	movlb	0	; select bank0
  8101  05F3  00A9               	movwf	___lwdiv@dividend
  8102  05F4  3188  204A  3185   	fcall	___lwdiv
  8103  05F7  0020               	movlb	0	; select bank0
  8104  05F8  0828               	movf	?___lwdiv+1,w
  8105  05F9  0085               	movwf	5
  8106  05FA  0827               	movf	?___lwdiv,w
  8107  05FB  0084               	movwf	4
  8108  05FC  3000               	movlw	low (_Dis_TAB| (0+32768))
  8109  05FD  0784               	addwf	4,f
  8110  05FE  3098               	movlw	high (_Dis_TAB| (0+32768))
  8111  05FF  3D85               	addwfc	5,f
  8112  0600  0800               	movf	0,w	;code access
  8113  0601  00AF               	movwf	??_Tc_Display
  8114  0602  082F               	movf	??_Tc_Display,w
  8115  0603  0022               	movlb	2	; select bank2
  8116  0604  00E7               	movwf	_display_buff^(0+256)
  8117  0605                     l798:	
  8118                           ;ht1621.c: 123: case 2:display_buff[1] = Dis_TAB[temperature_int%100/10];
  8119                           
  8120  0605  300A               	movlw	10
  8121  0606  0020               	movlb	0	; select bank0
  8122  0607  00A7               	movwf	___lwdiv@divisor
  8123  0608  3000               	movlw	0
  8124  0609  00A8               	movwf	___lwdiv@divisor+1
  8125  060A  0022               	movlb	2	; select bank2
  8126  060B  0833               	movf	(_temperature_int+1)^(0+256),w
  8127  060C  0020               	movlb	0	; select bank0
  8128  060D  00A4               	movwf	___lwmod@dividend+1
  8129  060E  0022               	movlb	2	; select bank2
  8130  060F  0832               	movf	_temperature_int^(0+256),w
  8131  0610  0020               	movlb	0	; select bank0
  8132  0611  00A3               	movwf	___lwmod@dividend
  8133  0612  3064               	movlw	100
  8134  0613  00A1               	movwf	___lwmod@divisor
  8135  0614  3000               	movlw	0
  8136  0615  00A2               	movwf	___lwmod@divisor+1
  8137  0616  3197  2744  3185   	fcall	___lwmod
  8138  0619  0020               	movlb	0	; select bank0
  8139  061A  0822               	movf	?___lwmod+1,w
  8140  061B  00AA               	movwf	___lwdiv@dividend+1
  8141  061C  0821               	movf	?___lwmod,w
  8142  061D  00A9               	movwf	___lwdiv@dividend
  8143  061E  3188  204A  3185   	fcall	___lwdiv
  8144  0621  0020               	movlb	0	; select bank0
  8145  0622  0828               	movf	?___lwdiv+1,w
  8146  0623  0085               	movwf	5
  8147  0624  0827               	movf	?___lwdiv,w
  8148  0625  0084               	movwf	4
  8149  0626  3000               	movlw	low (_Dis_TAB| (0+32768))
  8150  0627  0784               	addwf	4,f
  8151  0628  3098               	movlw	high (_Dis_TAB| (0+32768))
  8152  0629  3D85               	addwfc	5,f
  8153  062A  0800               	movf	0,w	;code access
  8154  062B  00AF               	movwf	??_Tc_Display
  8155  062C  082F               	movf	??_Tc_Display,w
  8156  062D  0022               	movlb	2	; select bank2
  8157  062E  00E8               	movwf	(_display_buff^(0+256)+1)
  8158  062F                     l799:	
  8159                           ;ht1621.c: 124: case 1:display_buff[2] = Dis_TAB[temperature_int%10]; break;
  8160                           
  8161  062F  300A               	movlw	10
  8162  0630  0020               	movlb	0	; select bank0
  8163  0631  00A1               	movwf	___lwmod@divisor
  8164  0632  3000               	movlw	0
  8165  0633  00A2               	movwf	___lwmod@divisor+1
  8166  0634  0022               	movlb	2	; select bank2
  8167  0635  0833               	movf	(_temperature_int+1)^(0+256),w
  8168  0636  0020               	movlb	0	; select bank0
  8169  0637  00A4               	movwf	___lwmod@dividend+1
  8170  0638  0022               	movlb	2	; select bank2
  8171  0639  0832               	movf	_temperature_int^(0+256),w
  8172  063A  0020               	movlb	0	; select bank0
  8173  063B  00A3               	movwf	___lwmod@dividend
  8174  063C  3197  2744  3185   	fcall	___lwmod
  8175  063F  0020               	movlb	0	; select bank0
  8176  0640  0822               	movf	?___lwmod+1,w
  8177  0641  0085               	movwf	5
  8178  0642  0821               	movf	?___lwmod,w
  8179  0643  0084               	movwf	4
  8180  0644  3000               	movlw	low (_Dis_TAB| (0+32768))
  8181  0645  0784               	addwf	4,f
  8182  0646  3098               	movlw	high (_Dis_TAB| (0+32768))
  8183  0647  3D85               	addwfc	5,f
  8184  0648  0800               	movf	0,w	;code access
  8185  0649  2E50               	goto	L14
  8186  064A                     l5911:	
  8187                           ;ht1621.c: 125: case 0:display_buff[2] = Dis_TAB[0];
  8188                           
  8189  064A  3000               	movlw	low (_Dis_TAB| (0+32768))
  8190  064B  0084               	movwf	4
  8191  064C  3098               	movlw	high (_Dis_TAB| (0+32768))
  8192  064D  0085               	movwf	5
  8193  064E  0800               	movf	0,w	;code access
  8194  064F  0020               	movlb	0	; select bank0
  8195  0650                     L14:	
  8196  0650  00AF               	movwf	??_Tc_Display
  8197  0651  082F               	movf	??_Tc_Display,w
  8198  0652  0022               	movlb	2	; select bank2
  8199  0653  00E9               	movwf	(_display_buff^(0+256)+2)
  8200                           
  8201                           ;ht1621.c: 127: }
  8202                           
  8203                           ;ht1621.c: 126: default:break;
  8204  0654  2E64               	goto	l5917
  8205  0655                     l5915:	
  8206  0655  0020               	movlb	0	; select bank0
  8207  0656  0830               	movf	Tc_Display@count,w
  8208                           
  8209                           ; Switch size 1, requested type "space"
  8210                           ; Number of cases is 4, Range of values is 0 to 3
  8211                           ; switch strategies available:
  8212                           ; Name         Instructions Cycles
  8213                           ; simple_byte           13     7 (average)
  8214                           ; direct_byte           14     6 (fixed)
  8215                           ; jumptable            260     6 (fixed)
  8216                           ;	Chosen strategy is simple_byte
  8217  0657  3A00               	xorlw	0	; case 0
  8218  0658  1903               	skipnz
  8219  0659  2E4A               	goto	l5911
  8220  065A  3A01               	xorlw	1	; case 1
  8221  065B  1903               	skipnz
  8222  065C  2E2F               	goto	l799
  8223  065D  3A03               	xorlw	3	; case 2
  8224  065E  1903               	skipnz
  8225  065F  2E05               	goto	l798
  8226  0660  3A01               	xorlw	1	; case 3
  8227  0661  1903               	skipnz
  8228  0662  2DE8               	goto	l5909
  8229  0663  2E64               	goto	l5917
  8230  0664                     l5917:	
  8231                           
  8232                           ;ht1621.c: 128: if(temperature_sign == 1) display_buff[0]=0x20;
  8233  0664  0022               	movlb	2	; select bank2
  8234  0665  0340               	decf	_temperature_sign^(0+256),w
  8235  0666  1D03               	btfss	3,2
  8236  0667  2E6E               	goto	l5921
  8237  0668  3020               	movlw	32
  8238  0669  0020               	movlb	0	; select bank0
  8239  066A  00AF               	movwf	??_Tc_Display
  8240  066B  082F               	movf	??_Tc_Display,w
  8241  066C  0022               	movlb	2	; select bank2
  8242  066D  00E7               	movwf	_display_buff^(0+256)
  8243  066E                     l5921:	
  8244                           
  8245                           ;ht1621.c: 129: display_buff[3] = Dis_TAB[temperature_decimal] | 0x08;
  8246  066E  0020               	movlb	0	; select bank0
  8247  066F  0869               	movf	_temperature_decimal,w
  8248  0670  3E00               	addlw	low (_Dis_TAB| (0+32768))
  8249  0671  0084               	movwf	4
  8250  0672  3098               	movlw	high (_Dis_TAB| (0+32768))
  8251  0673  1803               	skipnc
  8252  0674  3E01               	addlw	1
  8253  0675  0085               	movwf	5
  8254  0676  0800               	movf	0,w	;code access
  8255  0677  3808               	iorlw	8
  8256  0678  00AF               	movwf	??_Tc_Display
  8257  0679  082F               	movf	??_Tc_Display,w
  8258  067A  0022               	movlb	2	; select bank2
  8259  067B  00EA               	movwf	(_display_buff^(0+256)+3)
  8260                           
  8261                           ;ht1621.c: 130: WriteAll_1621(0,display_buff,4);
  8262  067C  3067               	movlw	low _display_buff
  8263  067D  0020               	movlb	0	; select bank0
  8264  067E  00A5               	movwf	WriteAll_1621@p
  8265  067F  3001               	movlw	high _display_buff
  8266  0680  00A6               	movwf	WriteAll_1621@p+1
  8267  0681  3004               	movlw	4
  8268  0682  00AF               	movwf	??_Tc_Display
  8269  0683  082F               	movf	??_Tc_Display,w
  8270  0684  00A7               	movwf	WriteAll_1621@cnt
  8271  0685  3000               	movlw	0
  8272  0686  3188  2015         	fcall	_WriteAll_1621
  8273  0688  0008               	return
  8274  0689                     __end_of_Tc_Display:	
  8275                           
  8276                           	psect	text29
  8277  14F8                     __ptext29:	
  8278 ;; *************** function _memset *****************
  8279 ;; Defined at:
  8280 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;  p1              1    wreg     PTR void 
  8283 ;;		 -> display_buff(4), 
  8284 ;;  c               2    1[BANK0 ] int 
  8285 ;;  n               2    3[BANK0 ] unsigned int 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  p1              1    6[BANK0 ] PTR void 
  8288 ;;		 -> display_buff(4), 
  8289 ;;  p               1    7[BANK0 ] PTR unsigned char 
  8290 ;;		 -> display_buff(4), 
  8291 ;; Return value:  Size  Location     Type
  8292 ;;                  1    wreg      PTR void 
  8293 ;; Registers used:
  8294 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8295 ;; Tracked objects:
  8296 ;;		On entry : 0/0
  8297 ;;		On exit  : 0/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8300 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;Total ram usage:        7 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; Hardware stack levels required when called:    3
  8307 ;; This function calls:
  8308 ;;		Nothing
  8309 ;; This function is called by:
  8310 ;;		_Tc_Display
  8311 ;; This function uses a non-reentrant model
  8312 ;;
  8313                           
  8314                           
  8315                           ;psect for function _memset
  8316  14F8                     _memset:	
  8317                           
  8318                           ;incstack = 0
  8319                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8320                           ;memset@p1 stored from wreg
  8321  14F8  0020               	movlb	0	; select bank0
  8322  14F9  00A6               	movwf	memset@p1
  8323  14FA  0826               	movf	memset@p1,w
  8324  14FB  00A5               	movwf	??_memset
  8325  14FC  0825               	movf	??_memset,w
  8326  14FD  00A7               	movwf	memset@p
  8327  14FE                     l5597:	
  8328  14FE  3001               	movlw	1
  8329  14FF  02A3               	subwf	memset@n,f
  8330  1500  3000               	movlw	0
  8331  1501  3BA4               	subwfb	memset@n+1,f
  8332  1502  0A23               	incf	memset@n,w
  8333  1503  1903               	btfsc	3,2
  8334  1504  0A24               	incf	memset@n+1,w
  8335  1505  1903               	btfsc	3,2
  8336  1506  0008               	return
  8337  1507  0821               	movf	memset@c,w
  8338  1508  00A5               	movwf	??_memset
  8339  1509  0827               	movf	memset@p,w
  8340  150A  0086               	movwf	6
  8341  150B  3001               	movlw	1	; select bank2/3
  8342  150C  0087               	movwf	7
  8343  150D  0825               	movf	??_memset,w
  8344  150E  0081               	movwf	1
  8345  150F  3001               	movlw	1
  8346  1510  00A5               	movwf	??_memset
  8347  1511  0825               	movf	??_memset,w
  8348  1512  07A7               	addwf	memset@p,f
  8349  1513  2CFE               	goto	l5597
  8350  1514                     __end_of_memset:	
  8351                           ;	Return value of _memset is never used
  8352                           
  8353                           
  8354                           	psect	text30
  8355  1744                     __ptext30:	
  8356 ;; *************** function ___lwmod *****************
  8357 ;; Defined at:
  8358 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  divisor         2    1[BANK0 ] unsigned int 
  8361 ;;  dividend        2    3[BANK0 ] unsigned int 
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  counter         1    6[BANK0 ] unsigned char 
  8364 ;; Return value:  Size  Location     Type
  8365 ;;                  2    1[BANK0 ] unsigned int 
  8366 ;; Registers used:
  8367 ;;		wreg, status,2, status,0
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8373 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8377 ;;Total ram usage:        6 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; Hardware stack levels required when called:    3
  8380 ;; This function calls:
  8381 ;;		Nothing
  8382 ;; This function is called by:
  8383 ;;		_Tc_Display
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           
  8388                           ;psect for function ___lwmod
  8389  1744                     ___lwmod:	
  8390                           
  8391                           ;incstack = 0
  8392                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8393  1744  0020               	movlb	0	; select bank0
  8394  1745  0821               	movf	___lwmod@divisor,w
  8395  1746  0422               	iorwf	___lwmod@divisor+1,w
  8396  1747  1903               	btfsc	3,2
  8397  1748  2F6C               	goto	l5725
  8398  1749  01A6               	clrf	___lwmod@counter
  8399  174A  0AA6               	incf	___lwmod@counter,f
  8400  174B                     l5715:	
  8401  174B  1BA2               	btfsc	___lwmod@divisor+1,7
  8402  174C  2F57               	goto	l5717
  8403  174D  3001               	movlw	1
  8404  174E                     u5205:	
  8405  174E  35A1               	lslf	___lwmod@divisor,f
  8406  174F  0DA2               	rlf	___lwmod@divisor+1,f
  8407  1750  0B89               	decfsz	9,f
  8408  1751  2F4E               	goto	u5205
  8409  1752  3001               	movlw	1
  8410  1753  00A5               	movwf	??___lwmod
  8411  1754  0825               	movf	??___lwmod,w
  8412  1755  07A6               	addwf	___lwmod@counter,f
  8413  1756  2F4B               	goto	l5715
  8414  1757                     l5717:	
  8415  1757  0822               	movf	___lwmod@divisor+1,w
  8416  1758  0224               	subwf	___lwmod@dividend+1,w
  8417  1759  1D03               	skipz
  8418  175A  2F5D               	goto	u5225
  8419  175B  0821               	movf	___lwmod@divisor,w
  8420  175C  0223               	subwf	___lwmod@dividend,w
  8421  175D                     u5225:	
  8422  175D  1C03               	skipc
  8423  175E  2F63               	goto	l5721
  8424  175F  0821               	movf	___lwmod@divisor,w
  8425  1760  02A3               	subwf	___lwmod@dividend,f
  8426  1761  0822               	movf	___lwmod@divisor+1,w
  8427  1762  3BA4               	subwfb	___lwmod@dividend+1,f
  8428  1763                     l5721:	
  8429  1763  3001               	movlw	1
  8430  1764                     u5235:	
  8431  1764  36A2               	lsrf	___lwmod@divisor+1,f
  8432  1765  0CA1               	rrf	___lwmod@divisor,f
  8433  1766  0B89               	decfsz	9,f
  8434  1767  2F64               	goto	u5235
  8435  1768  3001               	movlw	1
  8436  1769  02A6               	subwf	___lwmod@counter,f
  8437  176A  1D03               	btfss	3,2
  8438  176B  2F57               	goto	l5717
  8439  176C                     l5725:	
  8440  176C  0824               	movf	___lwmod@dividend+1,w
  8441  176D  00A2               	movwf	?___lwmod+1
  8442  176E  0823               	movf	___lwmod@dividend,w
  8443  176F  00A1               	movwf	?___lwmod
  8444  1770  0008               	return
  8445  1771                     __end_of___lwmod:	
  8446                           
  8447                           	psect	text31
  8448  084A                     __ptext31:	
  8449 ;; *************** function ___lwdiv *****************
  8450 ;; Defined at:
  8451 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  divisor         2    7[BANK0 ] unsigned int 
  8454 ;;  dividend        2    9[BANK0 ] unsigned int 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  quotient        2   13[BANK0 ] unsigned int 
  8457 ;;  counter         1   12[BANK0 ] unsigned char 
  8458 ;; Return value:  Size  Location     Type
  8459 ;;                  2    7[BANK0 ] unsigned int 
  8460 ;; Registers used:
  8461 ;;		wreg, status,2, status,0
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8467 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;Total ram usage:        8 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; Hardware stack levels required when called:    3
  8474 ;; This function calls:
  8475 ;;		Nothing
  8476 ;; This function is called by:
  8477 ;;		_Tc_Display
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           
  8482                           ;psect for function ___lwdiv
  8483  084A                     ___lwdiv:	
  8484                           
  8485                           ;incstack = 0
  8486                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8487  084A  0020               	movlb	0	; select bank0
  8488  084B  01AD               	clrf	___lwdiv@quotient
  8489  084C  01AE               	clrf	___lwdiv@quotient+1
  8490  084D  0827               	movf	___lwdiv@divisor,w
  8491  084E  0428               	iorwf	___lwdiv@divisor+1,w
  8492  084F  1903               	btfsc	3,2
  8493  0850  287A               	goto	l5703
  8494  0851  01AC               	clrf	___lwdiv@counter
  8495  0852  0AAC               	incf	___lwdiv@counter,f
  8496  0853                     l5691:	
  8497  0853  1BA8               	btfsc	___lwdiv@divisor+1,7
  8498  0854  285F               	goto	l5693
  8499  0855  3001               	movlw	1
  8500  0856                     u5135:	
  8501  0856  35A7               	lslf	___lwdiv@divisor,f
  8502  0857  0DA8               	rlf	___lwdiv@divisor+1,f
  8503  0858  0B89               	decfsz	9,f
  8504  0859  2856               	goto	u5135
  8505  085A  3001               	movlw	1
  8506  085B  00AB               	movwf	??___lwdiv
  8507  085C  082B               	movf	??___lwdiv,w
  8508  085D  07AC               	addwf	___lwdiv@counter,f
  8509  085E  2853               	goto	l5691
  8510  085F                     l5693:	
  8511  085F  3001               	movlw	1
  8512  0860                     u5155:	
  8513  0860  35AD               	lslf	___lwdiv@quotient,f
  8514  0861  0DAE               	rlf	___lwdiv@quotient+1,f
  8515  0862  0B89               	decfsz	9,f
  8516  0863  2860               	goto	u5155
  8517  0864  0828               	movf	___lwdiv@divisor+1,w
  8518  0865  022A               	subwf	___lwdiv@dividend+1,w
  8519  0866  1D03               	skipz
  8520  0867  286A               	goto	u5165
  8521  0868  0827               	movf	___lwdiv@divisor,w
  8522  0869  0229               	subwf	___lwdiv@dividend,w
  8523  086A                     u5165:	
  8524  086A  1C03               	skipc
  8525  086B  2871               	goto	l5699
  8526  086C  0827               	movf	___lwdiv@divisor,w
  8527  086D  02A9               	subwf	___lwdiv@dividend,f
  8528  086E  0828               	movf	___lwdiv@divisor+1,w
  8529  086F  3BAA               	subwfb	___lwdiv@dividend+1,f
  8530  0870  142D               	bsf	___lwdiv@quotient,0
  8531  0871                     l5699:	
  8532  0871  3001               	movlw	1
  8533  0872                     u5175:	
  8534  0872  36A8               	lsrf	___lwdiv@divisor+1,f
  8535  0873  0CA7               	rrf	___lwdiv@divisor,f
  8536  0874  0B89               	decfsz	9,f
  8537  0875  2872               	goto	u5175
  8538  0876  3001               	movlw	1
  8539  0877  02AC               	subwf	___lwdiv@counter,f
  8540  0878  1D03               	btfss	3,2
  8541  0879  285F               	goto	l5693
  8542  087A                     l5703:	
  8543  087A  082E               	movf	___lwdiv@quotient+1,w
  8544  087B  00A8               	movwf	?___lwdiv+1
  8545  087C  082D               	movf	___lwdiv@quotient,w
  8546  087D  00A7               	movwf	?___lwdiv
  8547  087E  0008               	return
  8548  087F                     __end_of___lwdiv:	
  8549                           
  8550                           	psect	text32
  8551  09B1                     __ptext32:	
  8552 ;; *************** function _one_temperature_trans *****************
  8553 ;; Defined at:
  8554 ;;		line 286 in file "mcc_generated_files/max31856.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;		None
  8557 ;; Auto vars:     Size  Location     Type
  8558 ;;		None
  8559 ;; Return value:  Size  Location     Type
  8560 ;;                  1    wreg      void 
  8561 ;; Registers used:
  8562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8563 ;; Tracked objects:
  8564 ;;		On entry : 0/0
  8565 ;;		On exit  : 0/0
  8566 ;;		Unchanged: 0/0
  8567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;Total ram usage:        2 bytes
  8573 ;; Hardware stack levels used:    1
  8574 ;; Hardware stack levels required when called:    6
  8575 ;; This function calls:
  8576 ;;		_maxim_31856_read_nregisters
  8577 ;;		_maxim_start_conversion
  8578 ;; This function is called by:
  8579 ;;		_temperature_process
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function _one_temperature_trans
  8585  09B1                     _one_temperature_trans:	
  8586                           
  8587                           ;max31856.c: 288: maxim_start_conversion((uint8_t) 0x40);
  8588                           
  8589                           ;incstack = 0
  8590                           ; Regs used in _one_temperature_trans: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8591  09B1  3040               	movlw	64
  8592  09B2  3196  2603  3189   	fcall	_maxim_start_conversion
  8593                           
  8594                           ;max31856.c: 290: MAX31856Sec = 0;
  8595  09B5  0022               	movlb	2	; select bank2
  8596  09B6  01B9               	clrf	_MAX31856Sec^(0+256)
  8597                           
  8598                           ;max31856.c: 291: while( !(RB3 == 0 || MAX31856Sec > 30) ) asm("clrwdt");
  8599  09B7  29B9               	goto	l655
  8600  09B8                     l656:	
  8601  09B8  0064               	clrwdt	;# 
  8602  09B9                     l655:	
  8603  09B9  0020               	movlb	0	; select bank0
  8604  09BA  1D8D               	btfss	13,3	;volatile
  8605  09BB  29C1               	goto	l6007
  8606  09BC  301F               	movlw	31
  8607  09BD  0022               	movlb	2	; select bank2
  8608  09BE  0239               	subwf	_MAX31856Sec^(0+256),w
  8609  09BF  1C03               	skipc
  8610  09C0  29B8               	goto	l656
  8611  09C1                     l6007:	
  8612                           
  8613                           ;max31856.c: 292: if( MAX31856Sec > 30)
  8614  09C1  301F               	movlw	31
  8615  09C2  0022               	movlb	2	; select bank2
  8616  09C3  0239               	subwf	_MAX31856Sec^(0+256),w
  8617  09C4  1C03               	skipc
  8618  09C5  29C9               	goto	l6011
  8619                           
  8620                           ;max31856.c: 293: {
  8621                           ;max31856.c: 294: uch_sr = 0x01;
  8622  09C6  01C9               	clrf	_uch_sr^(0+256)
  8623  09C7  0AC9               	incf	_uch_sr^(0+256),f
  8624                           
  8625                           ;max31856.c: 295: }
  8626  09C8  0008               	return
  8627  09C9                     l6011:	
  8628                           
  8629                           ;max31856.c: 322: else
  8630                           ;max31856.c: 323: {
  8631                           ;max31856.c: 324: maxim_31856_read_nregisters(0x0A, uch_reg,6);
  8632  09C9  304A               	movlw	(low (_uch_reg| (0+256)))& (0+255)
  8633  09CA  0020               	movlb	0	; select bank0
  8634  09CB  00AE               	movwf	??_one_temperature_trans
  8635  09CC  082E               	movf	??_one_temperature_trans,w
  8636  09CD  00A9               	movwf	maxim_31856_read_nregisters@uch_buff
  8637  09CE  3006               	movlw	6
  8638  09CF  00AF               	movwf	??_one_temperature_trans+1
  8639  09D0  082F               	movf	??_one_temperature_trans+1,w
  8640  09D1  00AA               	movwf	maxim_31856_read_nregisters@uch_nBytes
  8641  09D2  300A               	movlw	10
  8642  09D3  3194  24AC         	fcall	_maxim_31856_read_nregisters
  8643                           
  8644                           ;max31856.c: 325: uch_cjth=uch_reg[0];uch_cjtl=uch_reg[1];
  8645  09D5  0022               	movlb	2	; select bank2
  8646  09D6  084A               	movf	_uch_reg^(0+256),w
  8647  09D7  0020               	movlb	0	; select bank0
  8648  09D8  00AE               	movwf	??_one_temperature_trans
  8649  09D9  082E               	movf	??_one_temperature_trans,w
  8650  09DA  0022               	movlb	2	; select bank2
  8651  09DB  00C2               	movwf	_uch_cjth^(0+256)
  8652  09DC  084B               	movf	(_uch_reg^(0+256)+1),w
  8653  09DD  0020               	movlb	0	; select bank0
  8654  09DE  00AE               	movwf	??_one_temperature_trans
  8655  09DF  082E               	movf	??_one_temperature_trans,w
  8656  09E0  0022               	movlb	2	; select bank2
  8657  09E1  00C3               	movwf	_uch_cjtl^(0+256)
  8658                           
  8659                           ;max31856.c: 326: uch_ltcbh=uch_reg[2];uch_ltcbm=uch_reg[3];uch_ltcbl=uch_reg[4];
  8660  09E2  084C               	movf	(_uch_reg^(0+256)+2),w
  8661  09E3  0020               	movlb	0	; select bank0
  8662  09E4  00AE               	movwf	??_one_temperature_trans
  8663  09E5  082E               	movf	??_one_temperature_trans,w
  8664  09E6  0022               	movlb	2	; select bank2
  8665  09E7  00C5               	movwf	_uch_ltcbh^(0+256)
  8666  09E8  084D               	movf	(_uch_reg^(0+256)+3),w
  8667  09E9  0020               	movlb	0	; select bank0
  8668  09EA  00AE               	movwf	??_one_temperature_trans
  8669  09EB  082E               	movf	??_one_temperature_trans,w
  8670  09EC  0022               	movlb	2	; select bank2
  8671  09ED  00C7               	movwf	_uch_ltcbm^(0+256)
  8672  09EE  084E               	movf	(_uch_reg^(0+256)+4),w
  8673  09EF  0020               	movlb	0	; select bank0
  8674  09F0  00AE               	movwf	??_one_temperature_trans
  8675  09F1  082E               	movf	??_one_temperature_trans,w
  8676  09F2  0022               	movlb	2	; select bank2
  8677  09F3  00C6               	movwf	_uch_ltcbl^(0+256)
  8678                           
  8679                           ;max31856.c: 327: uch_sr=uch_reg[5];
  8680  09F4  084F               	movf	(_uch_reg^(0+256)+5),w
  8681  09F5  0020               	movlb	0	; select bank0
  8682  09F6  00AE               	movwf	??_one_temperature_trans
  8683  09F7  082E               	movf	??_one_temperature_trans,w
  8684  09F8  0022               	movlb	2	; select bank2
  8685  09F9  00C9               	movwf	_uch_sr^(0+256)
  8686  09FA  0008               	return
  8687  09FB                     __end_of_one_temperature_trans:	
  8688                           
  8689                           	psect	text33
  8690  1603                     __ptext33:	
  8691 ;; *************** function _maxim_start_conversion *****************
  8692 ;; Defined at:
  8693 ;;		line 114 in file "mcc_generated_files/max31856.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;  uch_conversi    1    wreg     unsigned char 
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  uch_conversi    1    6[BANK0 ] unsigned char 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  1    wreg      void 
  8700 ;; Registers used:
  8701 ;;		wreg, status,2, status,0, pclath, cstack
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;Total ram usage:        2 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    5
  8714 ;; This function calls:
  8715 ;;		_maxim_31856_read_register
  8716 ;;		_maxim_31856_write_register
  8717 ;; This function is called by:
  8718 ;;		_one_temperature_trans
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function _maxim_start_conversion
  8724  1603                     _maxim_start_conversion:	
  8725                           
  8726                           ;incstack = 0
  8727                           ; Regs used in _maxim_start_conversion: [wreg+status,2+status,0+pclath+cstack]
  8728                           ;maxim_start_conversion@uch_conversion_mode stored from wreg
  8729  1603  0020               	movlb	0	; select bank0
  8730  1604  00A6               	movwf	maxim_start_conversion@uch_conversion_mode
  8731                           
  8732                           ;max31856.c: 116: uch_cr0=maxim_31856_read_register(0x00);
  8733  1605  3000               	movlw	0
  8734  1606  3194  247F  3196   	fcall	_maxim_31856_read_register
  8735  1609  0020               	movlb	0	; select bank0
  8736  160A  00A5               	movwf	??_maxim_start_conversion
  8737  160B  0825               	movf	??_maxim_start_conversion,w
  8738  160C  0021               	movlb	1	; select bank1
  8739  160D  00EF               	movwf	_uch_cr0^(0+128)
  8740                           
  8741                           ;max31856.c: 117: uch_cr0&=(uint8_t) 0x3F;
  8742  160E  303F               	movlw	63
  8743  160F  0020               	movlb	0	; select bank0
  8744  1610  00A5               	movwf	??_maxim_start_conversion
  8745  1611  0825               	movf	??_maxim_start_conversion,w
  8746  1612  0021               	movlb	1	; select bank1
  8747  1613  05EF               	andwf	_uch_cr0^(0+128),f
  8748                           
  8749                           ;max31856.c: 118: uch_cr0|=uch_conversion_mode;
  8750  1614  0020               	movlb	0	; select bank0
  8751  1615  0826               	movf	maxim_start_conversion@uch_conversion_mode,w
  8752  1616  00A5               	movwf	??_maxim_start_conversion
  8753  1617  0825               	movf	??_maxim_start_conversion,w
  8754  1618  0021               	movlb	1	; select bank1
  8755  1619  04EF               	iorwf	_uch_cr0^(0+128),f
  8756                           
  8757                           ;max31856.c: 119: maxim_31856_write_register(0x80, uch_cr0);
  8758  161A  086F               	movf	_uch_cr0^(0+128),w
  8759  161B  0020               	movlb	0	; select bank0
  8760  161C  00A5               	movwf	??_maxim_start_conversion
  8761  161D  0825               	movf	??_maxim_start_conversion,w
  8762  161E  00A2               	movwf	maxim_31856_write_register@uch_register_value
  8763  161F  3080               	movlw	128
  8764  1620  3193  23F4         	fcall	_maxim_31856_write_register
  8765  1622  0008               	return
  8766  1623                     __end_of_maxim_start_conversion:	
  8767                           
  8768                           	psect	text34
  8769  13F4                     __ptext34:	
  8770 ;; *************** function _maxim_31856_write_register *****************
  8771 ;; Defined at:
  8772 ;;		line 20 in file "mcc_generated_files/max31856.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;  uch_register    1    wreg     unsigned char 
  8775 ;;  uch_register    1    2[BANK0 ] unsigned char 
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0, pclath, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8787 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;Total ram usage:        2 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    4
  8794 ;; This function calls:
  8795 ;;		_SPI_Exchange8bit
  8796 ;; This function is called by:
  8797 ;;		_maxim_start_conversion
  8798 ;;		_maxim_clear_fault_status
  8799 ;;		_temperature_display
  8800 ;;		_maxim_31856_init
  8801 ;;		_maxim_stop_conversion
  8802 ;;		_maxim_disable_oc_fault_detection
  8803 ;;		_maxim_set_oc_fault_detection
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _maxim_31856_write_register
  8809  13F4                     _maxim_31856_write_register:	
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in _maxim_31856_write_register: [wreg+status,2+status,0+pclath+cstack]
  8813                           ;maxim_31856_write_register@uch_register_address stored from wreg
  8814  13F4  0020               	movlb	0	; select bank0
  8815  13F5  00A3               	movwf	maxim_31856_write_register@uch_register_address
  8816                           
  8817                           ;max31856.c: 22: do { LATA5 = 0; } while(0);
  8818  13F6  0022               	movlb	2	; select bank2
  8819  13F7  128C               	bcf	12,5	;volatile
  8820                           
  8821                           ;max31856.c: 23: SPI_Exchange8bit(uch_register_address);
  8822  13F8  0020               	movlb	0	; select bank0
  8823  13F9  0823               	movf	maxim_31856_write_register@uch_register_address,w
  8824  13FA  3193  23D8  3193   	fcall	_SPI_Exchange8bit
  8825                           
  8826                           ;max31856.c: 24: SPI_Exchange8bit(uch_register_value);
  8827  13FD  0020               	movlb	0	; select bank0
  8828  13FE  0822               	movf	maxim_31856_write_register@uch_register_value,w
  8829  13FF  3193  23D8         	fcall	_SPI_Exchange8bit
  8830                           
  8831                           ;max31856.c: 25: do { LATA5 = 1; } while(0);
  8832  1401  0022               	movlb	2	; select bank2
  8833  1402  168C               	bsf	12,5	;volatile
  8834  1403  0008               	return
  8835  1404                     __end_of_maxim_31856_write_register:	
  8836                           
  8837                           	psect	text35
  8838  147F                     __ptext35:	
  8839 ;; *************** function _maxim_31856_read_register *****************
  8840 ;; Defined at:
  8841 ;;		line 34 in file "mcc_generated_files/max31856.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;  uch_register    1    wreg     unsigned char 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8846 ;;  uch_register    1    4[BANK0 ] unsigned char 
  8847 ;; Return value:  Size  Location     Type
  8848 ;;                  1    wreg      unsigned char 
  8849 ;; Registers used:
  8850 ;;		wreg, status,2, status,0, pclath, cstack
  8851 ;; Tracked objects:
  8852 ;;		On entry : 0/0
  8853 ;;		On exit  : 0/0
  8854 ;;		Unchanged: 0/0
  8855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;Total ram usage:        3 bytes
  8861 ;; Hardware stack levels used:    1
  8862 ;; Hardware stack levels required when called:    4
  8863 ;; This function calls:
  8864 ;;		_SPI_Exchange8bit
  8865 ;; This function is called by:
  8866 ;;		_maxim_start_conversion
  8867 ;;		_maxim_clear_fault_status
  8868 ;;		_maxim_stop_conversion
  8869 ;;		_maxim_disable_oc_fault_detection
  8870 ;;		_maxim_set_oc_fault_detection
  8871 ;; This function uses a non-reentrant model
  8872 ;;
  8873                           
  8874                           
  8875                           ;psect for function _maxim_31856_read_register
  8876  147F                     _maxim_31856_read_register:	
  8877                           
  8878                           ;incstack = 0
  8879                           ; Regs used in _maxim_31856_read_register: [wreg+status,2+status,0+pclath+cstack]
  8880                           ;maxim_31856_read_register@uch_register_address stored from wreg
  8881  147F  0020               	movlb	0	; select bank0
  8882  1480  00A3               	movwf	maxim_31856_read_register@uch_register_address
  8883                           
  8884                           ;max31856.c: 36: uint8_t uch_register_data;
  8885                           ;max31856.c: 37: do { LATA5 = 0; } while(0);
  8886  1481  0022               	movlb	2	; select bank2
  8887  1482  128C               	bcf	12,5	;volatile
  8888                           
  8889                           ;max31856.c: 38: SPI_Exchange8bit(uch_register_address);
  8890  1483  0020               	movlb	0	; select bank0
  8891  1484  0823               	movf	maxim_31856_read_register@uch_register_address,w
  8892  1485  3193  23D8  3194   	fcall	_SPI_Exchange8bit
  8893                           
  8894                           ;max31856.c: 39: uch_register_data=SPI_Exchange8bit(0xff);
  8895  1488  30FF               	movlw	255
  8896  1489  3193  23D8         	fcall	_SPI_Exchange8bit
  8897  148B  0020               	movlb	0	; select bank0
  8898  148C  00A2               	movwf	??_maxim_31856_read_register
  8899  148D  0822               	movf	??_maxim_31856_read_register,w
  8900  148E  00A4               	movwf	maxim_31856_read_register@uch_register_data
  8901                           
  8902                           ;max31856.c: 40: do { LATA5 = 1; } while(0);
  8903  148F  0022               	movlb	2	; select bank2
  8904  1490  168C               	bsf	12,5	;volatile
  8905                           
  8906                           ;max31856.c: 41: return (uch_register_data);
  8907  1491  0020               	movlb	0	; select bank0
  8908  1492  0824               	movf	maxim_31856_read_register@uch_register_data,w
  8909  1493  0008               	return
  8910  1494                     __end_of_maxim_31856_read_register:	
  8911                           
  8912                           	psect	text36
  8913  14AC                     __ptext36:	
  8914 ;; *************** function _maxim_31856_read_nregisters *****************
  8915 ;; Defined at:
  8916 ;;		line 50 in file "mcc_generated_files/max31856.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  uch_register    1    wreg     unsigned char 
  8919 ;;  uch_buff        1    9[BANK0 ] PTR unsigned char 
  8920 ;;		 -> uch_reg(8), 
  8921 ;;  uch_nBytes      1   10[BANK0 ] unsigned char 
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  uch_register    1   13[BANK0 ] unsigned char 
  8924 ;; Return value:  Size  Location     Type
  8925 ;;                  1    wreg      void 
  8926 ;; Registers used:
  8927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8933 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;Total ram usage:        5 bytes
  8938 ;; Hardware stack levels used:    1
  8939 ;; Hardware stack levels required when called:    5
  8940 ;; This function calls:
  8941 ;;		_SPI_Exchange8bit
  8942 ;;		_SPI_Exchange8bitBuffer
  8943 ;; This function is called by:
  8944 ;;		_one_temperature_trans
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           
  8949                           ;psect for function _maxim_31856_read_nregisters
  8950  14AC                     _maxim_31856_read_nregisters:	
  8951                           
  8952                           ;incstack = 0
  8953                           ; Regs used in _maxim_31856_read_nregisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8954                           ;maxim_31856_read_nregisters@uch_register_address stored from wreg
  8955  14AC  0020               	movlb	0	; select bank0
  8956  14AD  00AD               	movwf	maxim_31856_read_nregisters@uch_register_address
  8957                           
  8958                           ;max31856.c: 52: do { LATA5 = 0; } while(0);
  8959  14AE  0022               	movlb	2	; select bank2
  8960  14AF  128C               	bcf	12,5	;volatile
  8961                           
  8962                           ;max31856.c: 53: SPI_Exchange8bit(uch_register_address);
  8963  14B0  0020               	movlb	0	; select bank0
  8964  14B1  082D               	movf	maxim_31856_read_nregisters@uch_register_address,w
  8965  14B2  3193  23D8  3194   	fcall	_SPI_Exchange8bit
  8966                           
  8967                           ;max31856.c: 54: SPI_Exchange8bitBuffer((0), uch_nBytes, uch_buff);
  8968  14B5  0020               	movlb	0	; select bank0
  8969  14B6  082A               	movf	maxim_31856_read_nregisters@uch_nBytes,w
  8970  14B7  00AB               	movwf	??_maxim_31856_read_nregisters
  8971  14B8  082B               	movf	??_maxim_31856_read_nregisters,w
  8972  14B9  00A2               	movwf	SPI_Exchange8bitBuffer@bufLen
  8973  14BA  0829               	movf	maxim_31856_read_nregisters@uch_buff,w
  8974  14BB  00AC               	movwf	??_maxim_31856_read_nregisters+1
  8975  14BC  082C               	movf	??_maxim_31856_read_nregisters+1,w
  8976  14BD  00A3               	movwf	SPI_Exchange8bitBuffer@dataOut
  8977  14BE  3000               	movlw	0
  8978  14BF  318A  229A         	fcall	_SPI_Exchange8bitBuffer
  8979                           
  8980                           ;max31856.c: 55: do { LATA5 = 1; } while(0);
  8981  14C1  0022               	movlb	2	; select bank2
  8982  14C2  168C               	bsf	12,5	;volatile
  8983  14C3  0008               	return
  8984  14C4                     __end_of_maxim_31856_read_nregisters:	
  8985                           
  8986                           	psect	text37
  8987  0A9A                     __ptext37:	
  8988 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8989 ;; Defined at:
  8990 ;;		line 89 in file "mcc_generated_files/spi.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;  dataIn          1    wreg     PTR unsigned char 
  8993 ;;		 -> NULL(0), 
  8994 ;;  bufLen          1    2[BANK0 ] unsigned char 
  8995 ;;  dataOut         1    3[BANK0 ] PTR unsigned char 
  8996 ;;		 -> uch_reg(8), 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  dataIn          1    7[BANK0 ] PTR unsigned char 
  8999 ;;		 -> NULL(0), 
  9000 ;;  bytesWritten    1    8[BANK0 ] unsigned char 
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  1    wreg      unsigned char 
  9003 ;; Registers used:
  9004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9010 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;Total ram usage:        7 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; Hardware stack levels required when called:    4
  9017 ;; This function calls:
  9018 ;;		_SPI_Exchange8bit
  9019 ;; This function is called by:
  9020 ;;		_maxim_31856_read_nregisters
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           
  9025                           ;psect for function _SPI_Exchange8bitBuffer
  9026  0A9A                     _SPI_Exchange8bitBuffer:	
  9027                           
  9028                           ;incstack = 0
  9029                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9030                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  9031  0A9A  0020               	movlb	0	; select bank0
  9032  0A9B  00A7               	movwf	SPI_Exchange8bitBuffer@dataIn
  9033                           
  9034                           ;spi.c: 90: uint8_t bytesWritten = 0;
  9035  0A9C  01A8               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  9036                           
  9037                           ;spi.c: 92: if (bufLen != 0) {
  9038  0A9D  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9039  0A9E  1903               	btfsc	3,2
  9040  0A9F  0008               	return
  9041                           
  9042                           ;spi.c: 93: if (dataIn != (0)) {
  9043  0AA0  0827               	movf	SPI_Exchange8bitBuffer@dataIn,w
  9044  0AA1  1D03               	btfss	3,2
  9045  0AA2  2ACD               	goto	l5497
  9046  0AA3  2AD2               	goto	l5499
  9047  0AA4                     l5489:	
  9048                           ;spi.c: 94: while (bytesWritten < bufLen) {
  9049                           
  9050                           
  9051                           ;spi.c: 95: if (dataOut == (0)) {
  9052  0AA4  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9053  0AA5  1D03               	btfss	3,2
  9054  0AA6  2AB2               	goto	l5493
  9055                           
  9056                           ;spi.c: 96: SPI_Exchange8bit(dataIn[bytesWritten]);
  9057  0AA7  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9058  0AA8  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9059  0AA9  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9060  0AAA  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9061  0AAB  0086               	movwf	6
  9062  0AAC  0187               	clrf	7
  9063  0AAD  0801               	movf	1,w
  9064  0AAE  3193  23D8  318A   	fcall	_SPI_Exchange8bit
  9065                           
  9066                           ;spi.c: 97: } else {
  9067  0AB1  2AC8               	goto	l5495
  9068  0AB2                     l5493:	
  9069                           
  9070                           ;spi.c: 98: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  9071  0AB2  0020               	movlb	0	; select bank0
  9072  0AB3  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9073  0AB4  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9074  0AB5  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9075  0AB6  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9076  0AB7  0086               	movwf	6
  9077  0AB8  0187               	clrf	7
  9078  0AB9  0801               	movf	1,w
  9079  0ABA  3193  23D8  318A   	fcall	_SPI_Exchange8bit
  9080  0ABD  0020               	movlb	0	; select bank0
  9081  0ABE  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  9082  0ABF  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9083  0AC0  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9084  0AC1  00A6               	movwf	??_SPI_Exchange8bitBuffer+2
  9085  0AC2  0826               	movf	??_SPI_Exchange8bitBuffer+2,w
  9086  0AC3  0086               	movwf	6
  9087  0AC4  3001               	movlw	1	; select bank2/3
  9088  0AC5  0087               	movwf	7
  9089  0AC6  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  9090  0AC7  0081               	movwf	1
  9091  0AC8                     l5495:	
  9092                           
  9093                           ;spi.c: 99: }
  9094                           ;spi.c: 101: bytesWritten++;
  9095  0AC8  3001               	movlw	1
  9096  0AC9  0020               	movlb	0	; select bank0
  9097  0ACA  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9098  0ACB  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9099  0ACC  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9100  0ACD                     l5497:	
  9101  0ACD  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9102  0ACE  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9103  0ACF  1803               	btfsc	3,0
  9104  0AD0  0008               	return
  9105  0AD1  2AA4               	goto	l5489
  9106  0AD2                     l5499:	
  9107                           ;spi.c: 102: }
  9108                           ;spi.c: 103: } else {
  9109                           
  9110                           
  9111                           ;spi.c: 104: if (dataOut != (0)) {
  9112  0AD2  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9113  0AD3  1903               	btfsc	3,2
  9114  0AD4  0008               	return
  9115  0AD5                     l5507:	
  9116  0AD5  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9117  0AD6  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9118  0AD7  1803               	btfsc	3,0
  9119  0AD8  0008               	return
  9120                           
  9121                           ;spi.c: 106: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  9122                           
  9123                           ;spi.c: 105: while (bytesWritten < bufLen) {
  9124  0AD9  3000               	movlw	0
  9125  0ADA  3193  23D8  318A   	fcall	_SPI_Exchange8bit
  9126  0ADD  0020               	movlb	0	; select bank0
  9127  0ADE  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9128  0ADF  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9129  0AE0  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9130  0AE1  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  9131  0AE2  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  9132  0AE3  0086               	movwf	6
  9133  0AE4  3001               	movlw	1	; select bank2/3
  9134  0AE5  0087               	movwf	7
  9135  0AE6  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9136  0AE7  0081               	movwf	1
  9137                           
  9138                           ;spi.c: 108: bytesWritten++;
  9139  0AE8  3001               	movlw	1
  9140  0AE9  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9141  0AEA  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9142  0AEB  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9143  0AEC  2AD5               	goto	l5507
  9144  0AED                     __end_of_SPI_Exchange8bitBuffer:	
  9145                           ;spi.c: 109: }
  9146                           ;spi.c: 110: }
  9147                           ;spi.c: 111: }
  9148                           ;spi.c: 112: }
  9149                           ;spi.c: 114: return bytesWritten;
  9150                           ;	Return value of _SPI_Exchange8bitBuffer is never used
  9151                           
  9152                           
  9153                           	psect	text38
  9154  13D8                     __ptext38:	
  9155 ;; *************** function _SPI_Exchange8bit *****************
  9156 ;; Defined at:
  9157 ;;		line 77 in file "mcc_generated_files/spi.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;  data            1    wreg     unsigned char 
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;  data            1    1[BANK0 ] unsigned char 
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  1    wreg      unsigned char 
  9164 ;; Registers used:
  9165 ;;		wreg
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;Total ram usage:        1 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    3
  9178 ;; This function calls:
  9179 ;;		Nothing
  9180 ;; This function is called by:
  9181 ;;		_SPI_Exchange8bitBuffer
  9182 ;;		_maxim_31856_write_register
  9183 ;;		_maxim_31856_read_register
  9184 ;;		_maxim_31856_read_nregisters
  9185 ;; This function uses a non-reentrant model
  9186 ;;
  9187                           
  9188                           
  9189                           ;psect for function _SPI_Exchange8bit
  9190  13D8                     _SPI_Exchange8bit:	
  9191                           
  9192                           ;incstack = 0
  9193                           ; Regs used in _SPI_Exchange8bit: [wreg]
  9194                           ;SPI_Exchange8bit@data stored from wreg
  9195  13D8  0020               	movlb	0	; select bank0
  9196  13D9  00A1               	movwf	SPI_Exchange8bit@data
  9197                           
  9198                           ;spi.c: 79: SSP1CON1bits.WCOL = 0;
  9199  13DA  0024               	movlb	4	; select bank4
  9200  13DB  1395               	bcf	21,7	;volatile
  9201                           
  9202                           ;spi.c: 81: SSPBUF = data;
  9203  13DC  0020               	movlb	0	; select bank0
  9204  13DD  0821               	movf	SPI_Exchange8bit@data,w
  9205  13DE  0024               	movlb	4	; select bank4
  9206  13DF  0091               	movwf	17	;volatile
  9207  13E0                     l71:	
  9208                           ;spi.c: 83: while (SSP1STATbits.BF == 0x0) {
  9209                           
  9210  13E0  1C14               	btfss	20,0	;volatile
  9211  13E1  2BE0               	goto	l71
  9212                           
  9213                           ;spi.c: 84: }
  9214                           ;spi.c: 86: return (SSPBUF);
  9215  13E2  0811               	movf	17,w	;volatile
  9216  13E3  0008               	return
  9217  13E4                     __end_of_SPI_Exchange8bit:	
  9218                           
  9219                           	psect	text39
  9220  17CF                     __ptext39:	
  9221 ;; *************** function _Two_Display *****************
  9222 ;; Defined at:
  9223 ;;		line 139 in file "mcc_generated_files/ht1621.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  number          1    wreg     unsigned char 
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;  number          1   16[BANK0 ] unsigned char 
  9228 ;;  num             4   12[BANK0 ] unsigned char [4]
  9229 ;; Return value:  Size  Location     Type
  9230 ;;                  1    wreg      void 
  9231 ;; Registers used:
  9232 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;Total ram usage:        6 bytes
  9243 ;; Hardware stack levels used:    1
  9244 ;; Hardware stack levels required when called:    5
  9245 ;; This function calls:
  9246 ;;		_WriteAll_1621
  9247 ;; This function is called by:
  9248 ;;		_temperature_process
  9249 ;; This function uses a non-reentrant model
  9250 ;;
  9251                           
  9252                           
  9253                           ;psect for function _Two_Display
  9254  17CF                     _Two_Display:	
  9255                           
  9256                           ;incstack = 0
  9257                           ; Regs used in _Two_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9258                           ;Two_Display@number stored from wreg
  9259  17CF  0020               	movlb	0	; select bank0
  9260  17D0  00B0               	movwf	Two_Display@number
  9261                           
  9262                           ;ht1621.c: 141: unsigned char num[4]={0};
  9263  17D1  0022               	movlb	2	; select bank2
  9264  17D2  0823               	movf	(Two_Display@F2138+3)^(0+256),w
  9265  17D3  0020               	movlb	0	; select bank0
  9266  17D4  00AF               	movwf	Two_Display@num+3
  9267  17D5  0022               	movlb	2	; select bank2
  9268  17D6  0822               	movf	(Two_Display@F2138+2)^(0+256),w
  9269  17D7  0020               	movlb	0	; select bank0
  9270  17D8  00AE               	movwf	Two_Display@num+2
  9271  17D9  0022               	movlb	2	; select bank2
  9272  17DA  0821               	movf	(Two_Display@F2138+1)^(0+256),w
  9273  17DB  0020               	movlb	0	; select bank0
  9274  17DC  00AD               	movwf	Two_Display@num+1
  9275  17DD  0022               	movlb	2	; select bank2
  9276  17DE  0820               	movf	Two_Display@F2138^(0+256),w
  9277  17DF  0020               	movlb	0	; select bank0
  9278  17E0  00AC               	movwf	Two_Display@num
  9279                           
  9280                           ;ht1621.c: 142: num[1] = Dis_TAB[0];
  9281  17E1  3000               	movlw	low (_Dis_TAB| (0+32768))
  9282  17E2  0084               	movwf	4
  9283  17E3  3098               	movlw	high (_Dis_TAB| (0+32768))
  9284  17E4  0085               	movwf	5
  9285  17E5  0800               	movf	0,w	;code access
  9286  17E6  00AB               	movwf	??_Two_Display
  9287  17E7  082B               	movf	??_Two_Display,w
  9288  17E8  00AD               	movwf	Two_Display@num+1
  9289                           
  9290                           ;ht1621.c: 143: num[2] = Dis_TAB[number];
  9291  17E9  0830               	movf	Two_Display@number,w
  9292  17EA  3E00               	addlw	low (_Dis_TAB| (0+32768))
  9293  17EB  0084               	movwf	4
  9294  17EC  3098               	movlw	high (_Dis_TAB| (0+32768))
  9295  17ED  1803               	skipnc
  9296  17EE  3E01               	addlw	1
  9297  17EF  0085               	movwf	5
  9298  17F0  0800               	movf	0,w	;code access
  9299  17F1  00AB               	movwf	??_Two_Display
  9300  17F2  082B               	movf	??_Two_Display,w
  9301  17F3  00AE               	movwf	Two_Display@num+2
  9302                           
  9303                           ;ht1621.c: 144: WriteAll_1621(0, num, 4);
  9304  17F4  302C               	movlw	low Two_Display@num
  9305  17F5  00A5               	movwf	WriteAll_1621@p
  9306  17F6  3000               	movlw	high Two_Display@num
  9307  17F7  00A6               	movwf	WriteAll_1621@p+1
  9308  17F8  3004               	movlw	4
  9309  17F9  00AB               	movwf	??_Two_Display
  9310  17FA  082B               	movf	??_Two_Display,w
  9311  17FB  00A7               	movwf	WriteAll_1621@cnt
  9312  17FC  3000               	movlw	0
  9313  17FD  3188  2015         	fcall	_WriteAll_1621
  9314  17FF  0008               	return
  9315  1800                     __end_of_Two_Display:	
  9316                           
  9317                           	psect	text40
  9318  0815                     __ptext40:	
  9319 ;; *************** function _WriteAll_1621 *****************
  9320 ;; Defined at:
  9321 ;;		line 91 in file "mcc_generated_files/ht1621.c"
  9322 ;; Parameters:    Size  Location     Type
  9323 ;;  addr            1    wreg     unsigned char 
  9324 ;;  p               2    5[BANK0 ] PTR unsigned char 
  9325 ;;		 -> time_Display@num(4), err_Display@num(4), Two_Display@num(4), display_buff(4), 
  9326 ;;		 -> Dis_TAB(21), 
  9327 ;;  cnt             1    7[BANK0 ] unsigned char 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  addr            1    9[BANK0 ] unsigned char 
  9330 ;;  i               1   10[BANK0 ] unsigned char 
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  1    wreg      void 
  9333 ;; Registers used:
  9334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9340 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;Total ram usage:        6 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    4
  9347 ;; This function calls:
  9348 ;;		_SendBit_1621
  9349 ;;		_SendDataBit_1621
  9350 ;; This function is called by:
  9351 ;;		_main
  9352 ;;		_Tc_Display
  9353 ;;		_Two_Display
  9354 ;;		_err_Display
  9355 ;;		_time_Display
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           
  9360                           ;psect for function _WriteAll_1621
  9361  0815                     _WriteAll_1621:	
  9362                           
  9363                           ;incstack = 0
  9364                           ; Regs used in _WriteAll_1621: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9365                           ;WriteAll_1621@addr stored from wreg
  9366  0815  0020               	movlb	0	; select bank0
  9367  0816  00A9               	movwf	WriteAll_1621@addr
  9368                           
  9369                           ;ht1621.c: 93: unsigned char i;
  9370                           ;ht1621.c: 94: do { LATC0 = 0; } while(0);
  9371  0817  0022               	movlb	2	; select bank2
  9372  0818  100E               	bcf	14,0	;volatile
  9373                           
  9374                           ;ht1621.c: 95: SendBit_1621(0xa0,3);
  9375  0819  3003               	movlw	3
  9376  081A  0020               	movlb	0	; select bank0
  9377  081B  00A8               	movwf	??_WriteAll_1621
  9378  081C  0828               	movf	??_WriteAll_1621,w
  9379  081D  00A1               	movwf	SendBit_1621@cnt
  9380  081E  30A0               	movlw	160
  9381  081F  3196  2643  3188   	fcall	_SendBit_1621
  9382                           
  9383                           ;ht1621.c: 96: SendBit_1621(addr,6);
  9384  0822  3006               	movlw	6
  9385  0823  0020               	movlb	0	; select bank0
  9386  0824  00A8               	movwf	??_WriteAll_1621
  9387  0825  0828               	movf	??_WriteAll_1621,w
  9388  0826  00A1               	movwf	SendBit_1621@cnt
  9389  0827  0829               	movf	WriteAll_1621@addr,w
  9390  0828  3196  2643  3188   	fcall	_SendBit_1621
  9391                           
  9392                           ;ht1621.c: 97: for(i =0; i <cnt; i ++,p++)
  9393  082B  0020               	movlb	0	; select bank0
  9394  082C  01AA               	clrf	WriteAll_1621@i
  9395  082D                     l5519:	
  9396  082D  0827               	movf	WriteAll_1621@cnt,w
  9397  082E  022A               	subwf	WriteAll_1621@i,w
  9398  082F  1803               	btfsc	3,0
  9399  0830  2847               	goto	l788
  9400                           
  9401                           ;ht1621.c: 98: {
  9402                           ;ht1621.c: 99: SendDataBit_1621(*p,8);
  9403  0831  3008               	movlw	8
  9404  0832  00A8               	movwf	??_WriteAll_1621
  9405  0833  0828               	movf	??_WriteAll_1621,w
  9406  0834  00A1               	movwf	SendDataBit_1621@cnt
  9407  0835  0825               	movf	WriteAll_1621@p,w
  9408  0836  0084               	movwf	4
  9409  0837  0826               	movf	WriteAll_1621@p+1,w
  9410  0838  0085               	movwf	5
  9411  0839  0800               	movf	0,w	;code access
  9412  083A  3196  2664  3188   	fcall	_SendDataBit_1621
  9413  083D  3001               	movlw	1
  9414  083E  0020               	movlb	0	; select bank0
  9415  083F  00A8               	movwf	??_WriteAll_1621
  9416  0840  0828               	movf	??_WriteAll_1621,w
  9417  0841  07AA               	addwf	WriteAll_1621@i,f
  9418  0842  3001               	movlw	1
  9419  0843  07A5               	addwf	WriteAll_1621@p,f
  9420  0844  3000               	movlw	0
  9421  0845  3DA6               	addwfc	WriteAll_1621@p+1,f
  9422  0846  282D               	goto	l5519
  9423  0847                     l788:	
  9424                           ;ht1621.c: 100: }
  9425                           ;ht1621.c: 101: do { LATC0 = 1; } while(0);
  9426                           
  9427  0847  0022               	movlb	2	; select bank2
  9428  0848  140E               	bsf	14,0	;volatile
  9429  0849  0008               	return
  9430  084A                     __end_of_WriteAll_1621:	
  9431                           
  9432                           	psect	text41
  9433  1664                     __ptext41:	
  9434 ;; *************** function _SendDataBit_1621 *****************
  9435 ;; Defined at:
  9436 ;;		line 42 in file "mcc_generated_files/ht1621.c"
  9437 ;; Parameters:    Size  Location     Type
  9438 ;;  data            1    wreg     unsigned char 
  9439 ;;  cnt             1    1[BANK0 ] unsigned char 
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;  data            1    3[BANK0 ] unsigned char 
  9442 ;;  i               1    4[BANK0 ] unsigned char 
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  1    wreg      void 
  9445 ;; Registers used:
  9446 ;;		wreg, status,2, status,0
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9452 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;Total ram usage:        4 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    3
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_WriteAll_1621
  9463 ;;		_Write_1621
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           
  9468                           ;psect for function _SendDataBit_1621
  9469  1664                     _SendDataBit_1621:	
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in _SendDataBit_1621: [wreg+status,2+status,0]
  9473                           ;SendDataBit_1621@data stored from wreg
  9474  1664  0020               	movlb	0	; select bank0
  9475  1665  00A3               	movwf	SendDataBit_1621@data
  9476                           
  9477                           ;ht1621.c: 44: unsigned char i;
  9478                           ;ht1621.c: 45: for(i =0; i <cnt; i ++)
  9479  1666  01A4               	clrf	SendDataBit_1621@i
  9480  1667                     l5441:	
  9481  1667  0821               	movf	SendDataBit_1621@cnt,w
  9482  1668  0224               	subwf	SendDataBit_1621@i,w
  9483  1669  1803               	btfsc	3,0
  9484  166A  0008               	return
  9485                           
  9486                           ;ht1621.c: 46: {
  9487                           ;ht1621.c: 47: if((data&0x01)==0) do { LATC2 = 0; } while(0);
  9488  166B  1823               	btfsc	SendDataBit_1621@data,0
  9489  166C  2E70               	goto	l759
  9490  166D  0022               	movlb	2	; select bank2
  9491  166E  110E               	bcf	14,2	;volatile
  9492  166F  2E72               	goto	l761
  9493  1670                     l759:	
  9494                           ;ht1621.c: 48: else do { LATC2 = 1; } while(0);
  9495                           
  9496  1670  0022               	movlb	2	; select bank2
  9497  1671  150E               	bsf	14,2	;volatile
  9498  1672                     l761:	
  9499                           ;ht1621.c: 49: do { LATC1 = 0; } while(0);
  9500                           
  9501  1672  108E               	bcf	14,1	;volatile
  9502                           
  9503                           ;ht1621.c: 50: _delay((unsigned long)((1)*(4000000/4000.0)));
  9504  1673  30F9               	movlw	249
  9505  1674  0020               	movlb	0	; select bank0
  9506  1675  00A2               	movwf	??_SendDataBit_1621
  9507  1676                     u6357:	
  9508  1676  0000               	nop
  9509  1677  0BA2               	decfsz	??_SendDataBit_1621,f
  9510  1678  2E76               	goto	u6357
  9511  1679  3200               	nop2	;nop
  9512  167A  0000               	nop
  9513                           
  9514                           ;ht1621.c: 51: do { LATC1 = 1; } while(0);
  9515  167B  0022               	movlb	2	; select bank2
  9516  167C  148E               	bsf	14,1	;volatile
  9517                           
  9518                           ;ht1621.c: 52: data>>=1;
  9519  167D  1003               	clrc
  9520  167E  0020               	movlb	0	; select bank0
  9521  167F  0CA3               	rrf	SendDataBit_1621@data,f
  9522  1680  3001               	movlw	1
  9523  1681  00A2               	movwf	??_SendDataBit_1621
  9524  1682  0822               	movf	??_SendDataBit_1621,w
  9525  1683  07A4               	addwf	SendDataBit_1621@i,f
  9526  1684  2E67               	goto	l5441
  9527  1685                     __end_of_SendDataBit_1621:	
  9528                           
  9529                           	psect	text42
  9530  13C6                     __ptext42:	
  9531 ;; *************** function _Set_start_flag *****************
  9532 ;; Defined at:
  9533 ;;		line 18 in file "mcc_generated_files/save.c"
  9534 ;; Parameters:    Size  Location     Type
  9535 ;;		None
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;		None
  9538 ;; Return value:  Size  Location     Type
  9539 ;;                  1    wreg      void 
  9540 ;; Registers used:
  9541 ;;		None
  9542 ;; Tracked objects:
  9543 ;;		On entry : 0/0
  9544 ;;		On exit  : 0/0
  9545 ;;		Unchanged: 0/0
  9546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;Total ram usage:        0 bytes
  9552 ;; Hardware stack levels used:    1
  9553 ;; Hardware stack levels required when called:    3
  9554 ;; This function calls:
  9555 ;;		Nothing
  9556 ;; This function is called by:
  9557 ;;		_Key_Process
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function _Set_start_flag
  9563  13C6                     _Set_start_flag:	
  9564                           
  9565                           ;save.c: 20: Record_flag = 1;
  9566                           
  9567                           ;incstack = 0
  9568                           ; Regs used in _Set_start_flag: []
  9569  13C6  0020               	movlb	0	; select bank0
  9570  13C7  01E7               	clrf	_Record_flag
  9571  13C8  0AE7               	incf	_Record_flag,f
  9572                           
  9573                           ;save.c: 21: do { LATA4 = 0; } while(0);
  9574  13C9  0022               	movlb	2	; select bank2
  9575  13CA  120C               	bcf	12,4	;volatile
  9576  13CB  0008               	return
  9577  13CC                     __end_of_Set_start_flag:	
  9578                           
  9579                           	psect	text43
  9580  13BC                     __ptext43:	
  9581 ;; *************** function _Set_finish_flag *****************
  9582 ;; Defined at:
  9583 ;;		line 30 in file "mcc_generated_files/save.c"
  9584 ;; Parameters:    Size  Location     Type
  9585 ;;		None
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;		None
  9588 ;; Return value:  Size  Location     Type
  9589 ;;                  1    wreg      void 
  9590 ;; Registers used:
  9591 ;;		status,2
  9592 ;; Tracked objects:
  9593 ;;		On entry : 0/0
  9594 ;;		On exit  : 0/0
  9595 ;;		Unchanged: 0/0
  9596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;Total ram usage:        0 bytes
  9602 ;; Hardware stack levels used:    1
  9603 ;; Hardware stack levels required when called:    3
  9604 ;; This function calls:
  9605 ;;		Nothing
  9606 ;; This function is called by:
  9607 ;;		_main
  9608 ;;		_Key_Process
  9609 ;; This function uses a non-reentrant model
  9610 ;;
  9611                           
  9612                           
  9613                           ;psect for function _Set_finish_flag
  9614  13BC                     _Set_finish_flag:	
  9615                           
  9616                           ;save.c: 32: Record_flag = 0;
  9617                           
  9618                           ;incstack = 0
  9619                           ; Regs used in _Set_finish_flag: [status,2]
  9620  13BC  0020               	movlb	0	; select bank0
  9621  13BD  01E7               	clrf	_Record_flag
  9622                           
  9623                           ;save.c: 33: do { LATA4 = 1; } while(0);
  9624  13BE  0022               	movlb	2	; select bank2
  9625  13BF  160C               	bsf	12,4	;volatile
  9626  13C0  0008               	return
  9627  13C1                     __end_of_Set_finish_flag:	
  9628                           
  9629                           	psect	text44
  9630  1494                     __ptext44:	
  9631 ;; *************** function _SendCmd_1621 *****************
  9632 ;; Defined at:
  9633 ;;		line 62 in file "mcc_generated_files/ht1621.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;  command         1    wreg     unsigned char 
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;  command         1    6[BANK0 ] unsigned char 
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  1    wreg      void 
  9640 ;; Registers used:
  9641 ;;		wreg, status,2, status,0, pclath, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;Total ram usage:        2 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    4
  9654 ;; This function calls:
  9655 ;;		_SendBit_1621
  9656 ;; This function is called by:
  9657 ;;		_main
  9658 ;;		_Key_Process
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           
  9663                           ;psect for function _SendCmd_1621
  9664  1494                     _SendCmd_1621:	
  9665                           
  9666                           ;incstack = 0
  9667                           ; Regs used in _SendCmd_1621: [wreg+status,2+status,0+pclath+cstack]
  9668                           ;SendCmd_1621@command stored from wreg
  9669  1494  0020               	movlb	0	; select bank0
  9670  1495  00A6               	movwf	SendCmd_1621@command
  9671                           
  9672                           ;ht1621.c: 64: do { LATC0 = 0; } while(0);
  9673  1496  0022               	movlb	2	; select bank2
  9674  1497  100E               	bcf	14,0	;volatile
  9675                           
  9676                           ;ht1621.c: 65: SendBit_1621(0x80,4);
  9677  1498  3004               	movlw	4
  9678  1499  0020               	movlb	0	; select bank0
  9679  149A  00A5               	movwf	??_SendCmd_1621
  9680  149B  0825               	movf	??_SendCmd_1621,w
  9681  149C  00A1               	movwf	SendBit_1621@cnt
  9682  149D  3080               	movlw	128
  9683  149E  3196  2643  3194   	fcall	_SendBit_1621
  9684                           
  9685                           ;ht1621.c: 66: SendBit_1621(command,8);
  9686  14A1  3008               	movlw	8
  9687  14A2  0020               	movlb	0	; select bank0
  9688  14A3  00A5               	movwf	??_SendCmd_1621
  9689  14A4  0825               	movf	??_SendCmd_1621,w
  9690  14A5  00A1               	movwf	SendBit_1621@cnt
  9691  14A6  0826               	movf	SendCmd_1621@command,w
  9692  14A7  3196  2643         	fcall	_SendBit_1621
  9693                           
  9694                           ;ht1621.c: 67: do { LATC0 = 1; } while(0);
  9695  14A9  0022               	movlb	2	; select bank2
  9696  14AA  140E               	bsf	14,0	;volatile
  9697  14AB  0008               	return
  9698  14AC                     __end_of_SendCmd_1621:	
  9699                           
  9700                           	psect	text45
  9701  1643                     __ptext45:	
  9702 ;; *************** function _SendBit_1621 *****************
  9703 ;; Defined at:
  9704 ;;		line 22 in file "mcc_generated_files/ht1621.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  data            1    wreg     unsigned char 
  9707 ;;  cnt             1    1[BANK0 ] unsigned char 
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;  data            1    3[BANK0 ] unsigned char 
  9710 ;;  i               1    4[BANK0 ] unsigned char 
  9711 ;; Return value:  Size  Location     Type
  9712 ;;                  1    wreg      void 
  9713 ;; Registers used:
  9714 ;;		wreg, status,2, status,0
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9720 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;Total ram usage:        4 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    3
  9727 ;; This function calls:
  9728 ;;		Nothing
  9729 ;; This function is called by:
  9730 ;;		_SendCmd_1621
  9731 ;;		_WriteAll_1621
  9732 ;;		_Write_1621
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           
  9737                           ;psect for function _SendBit_1621
  9738  1643                     _SendBit_1621:	
  9739                           
  9740                           ;incstack = 0
  9741                           ; Regs used in _SendBit_1621: [wreg+status,2+status,0]
  9742                           ;SendBit_1621@data stored from wreg
  9743  1643  0020               	movlb	0	; select bank0
  9744  1644  00A3               	movwf	SendBit_1621@data
  9745                           
  9746                           ;ht1621.c: 24: unsigned char i;
  9747                           ;ht1621.c: 25: for(i =0; i <cnt; i ++)
  9748  1645  01A4               	clrf	SendBit_1621@i
  9749  1646                     l5429:	
  9750  1646  0821               	movf	SendBit_1621@cnt,w
  9751  1647  0224               	subwf	SendBit_1621@i,w
  9752  1648  1803               	btfsc	3,0
  9753  1649  0008               	return
  9754                           
  9755                           ;ht1621.c: 26: {
  9756                           ;ht1621.c: 27: if((data&0x80)==0) do { LATC2 = 0; } while(0);
  9757  164A  1BA3               	btfsc	SendBit_1621@data,7
  9758  164B  2E4F               	goto	l743
  9759  164C  0022               	movlb	2	; select bank2
  9760  164D  110E               	bcf	14,2	;volatile
  9761  164E  2E51               	goto	l745
  9762  164F                     l743:	
  9763                           ;ht1621.c: 28: else do { LATC2 = 1; } while(0);
  9764                           
  9765  164F  0022               	movlb	2	; select bank2
  9766  1650  150E               	bsf	14,2	;volatile
  9767  1651                     l745:	
  9768                           ;ht1621.c: 29: do { LATC1 = 0; } while(0);
  9769                           
  9770  1651  108E               	bcf	14,1	;volatile
  9771                           
  9772                           ;ht1621.c: 30: _delay((unsigned long)((1)*(4000000/4000.0)));
  9773  1652  30F9               	movlw	249
  9774  1653  0020               	movlb	0	; select bank0
  9775  1654  00A2               	movwf	??_SendBit_1621
  9776  1655                     u6367:	
  9777  1655  0000               	nop
  9778  1656  0BA2               	decfsz	??_SendBit_1621,f
  9779  1657  2E55               	goto	u6367
  9780  1658  3200               	nop2	;nop
  9781  1659  0000               	nop
  9782                           
  9783                           ;ht1621.c: 31: do { LATC1 = 1; } while(0);
  9784  165A  0022               	movlb	2	; select bank2
  9785  165B  148E               	bsf	14,1	;volatile
  9786                           
  9787                           ;ht1621.c: 32: data<<=1;
  9788  165C  1003               	clrc
  9789  165D  0020               	movlb	0	; select bank0
  9790  165E  0DA3               	rlf	SendBit_1621@data,f
  9791  165F  3001               	movlw	1
  9792  1660  00A2               	movwf	??_SendBit_1621
  9793  1661  0822               	movf	??_SendBit_1621,w
  9794  1662  07A4               	addwf	SendBit_1621@i,f
  9795  1663  2E46               	goto	l5429
  9796  1664                     __end_of_SendBit_1621:	
  9797                           
  9798                           	psect	text46
  9799  16A7                     __ptext46:	
  9800 ;; *************** function _Key_Scan *****************
  9801 ;; Defined at:
  9802 ;;		line 20 in file "mcc_generated_files/key.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;		None
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;  Key_val         1    3[BANK0 ] unsigned char 
  9807 ;; Return value:  Size  Location     Type
  9808 ;;                  1    wreg      unsigned char 
  9809 ;; Registers used:
  9810 ;;		wreg
  9811 ;; Tracked objects:
  9812 ;;		On entry : 0/0
  9813 ;;		On exit  : 0/0
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;Total ram usage:        3 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; Hardware stack levels required when called:    3
  9823 ;; This function calls:
  9824 ;;		Nothing
  9825 ;; This function is called by:
  9826 ;;		_Key_Process
  9827 ;; This function uses a non-reentrant model
  9828 ;;
  9829                           
  9830                           
  9831                           ;psect for function _Key_Scan
  9832  16A7                     _Key_Scan:	
  9833                           
  9834                           ;key.c: 22: unsigned char Key_val=0xff;
  9835                           
  9836                           ;incstack = 0
  9837                           ; Regs used in _Key_Scan: [wreg]
  9838  16A7  30FF               	movlw	255
  9839  16A8  0020               	movlb	0	; select bank0
  9840  16A9  00A1               	movwf	??_Key_Scan
  9841  16AA  0821               	movf	??_Key_Scan,w
  9842  16AB  00A3               	movwf	Key_Scan@Key_val
  9843                           
  9844                           ;key.c: 23: if( RA7 == 0 || RB5 == 0 )
  9845  16AC  1F8C               	btfss	12,7	;volatile
  9846  16AD  2EB0               	goto	l6229
  9847  16AE  1A8D               	btfsc	13,5	;volatile
  9848  16AF  2EC8               	goto	l978
  9849  16B0                     l6229:	
  9850                           
  9851                           ;key.c: 24: {
  9852                           ;key.c: 25: _delay((unsigned long)((10)*(4000000/4000.0)));
  9853  16B0  300D               	movlw	13
  9854  16B1  00A2               	movwf	??_Key_Scan+1
  9855  16B2  30FB               	movlw	251
  9856  16B3  00A1               	movwf	??_Key_Scan
  9857  16B4                     u6377:	
  9858  16B4  0BA1               	decfsz	??_Key_Scan,f
  9859  16B5  2EB4               	goto	u6377
  9860  16B6  0BA2               	decfsz	??_Key_Scan+1,f
  9861  16B7  2EB4               	goto	u6377
  9862  16B8  3200               	nop2
  9863                           
  9864                           ;key.c: 26: if( RA7 == 0 || RB5 == 0)
  9865  16B9  0020               	movlb	0	; select bank0
  9866  16BA  1F8C               	btfss	12,7	;volatile
  9867  16BB  2EBE               	goto	l983
  9868  16BC  1A8D               	btfsc	13,5	;volatile
  9869  16BD  2EC8               	goto	l978
  9870  16BE                     l983:	
  9871                           
  9872                           ;key.c: 27: {
  9873                           ;key.c: 28: if(RB5 == 0 ) Key_val = 0x01;
  9874  16BE  1A8D               	btfsc	13,5	;volatile
  9875  16BF  2EC2               	goto	l984
  9876  16C0  01A3               	clrf	Key_Scan@Key_val
  9877  16C1  0AA3               	incf	Key_Scan@Key_val,f
  9878  16C2                     l984:	
  9879                           
  9880                           ;key.c: 29: if(RA7 == 0 ) Key_val = 0x02;
  9881  16C2  1B8C               	btfsc	12,7	;volatile
  9882  16C3  2EC8               	goto	l978
  9883  16C4  3002               	movlw	2
  9884  16C5  00A1               	movwf	??_Key_Scan
  9885  16C6  0821               	movf	??_Key_Scan,w
  9886  16C7  00A3               	movwf	Key_Scan@Key_val
  9887  16C8                     l978:	
  9888                           
  9889                           ;key.c: 30: }
  9890                           ;key.c: 31: }
  9891                           ;key.c: 32: return Key_val;
  9892  16C8  0823               	movf	Key_Scan@Key_val,w
  9893  16C9  0008               	return
  9894  16CA                     __end_of_Key_Scan:	
  9895                           
  9896                           	psect	text47
  9897  1434                     __ptext47:	
  9898 ;; *************** function _Com_Process *****************
  9899 ;; Defined at:
  9900 ;;		line 19 in file "mcc_generated_files/com.c"
  9901 ;; Parameters:    Size  Location     Type
  9902 ;;		None
  9903 ;; Auto vars:     Size  Location     Type
  9904 ;;		None
  9905 ;; Return value:  Size  Location     Type
  9906 ;;                  2  399[None  ] int 
  9907 ;; Registers used:
  9908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9909 ;; Tracked objects:
  9910 ;;		On entry : 0/0
  9911 ;;		On exit  : 0/0
  9912 ;;		Unchanged: 0/0
  9913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;Total ram usage:        0 bytes
  9919 ;; Hardware stack levels used:    1
  9920 ;; Hardware stack levels required when called:    7
  9921 ;; This function calls:
  9922 ;;		_Inf_to_Com
  9923 ;;		_Set_time_from_Com
  9924 ;; This function is called by:
  9925 ;;		_main
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _Com_Process
  9931  1434                     _Com_Process:	
  9932                           
  9933                           ;com.c: 21: if(Set_time_cmd_flag == 1)
  9934                           
  9935                           ;incstack = 0
  9936                           ; Regs used in _Com_Process: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9937  1434  0022               	movlb	2	; select bank2
  9938  1435  033A               	decf	_Set_time_cmd_flag^(0+256),w
  9939  1436  1D03               	btfss	3,2
  9940  1437  2C3D               	goto	l6449
  9941                           
  9942                           ;com.c: 22: {
  9943                           ;com.c: 23: Set_time_from_Com();
  9944  1438  3188  20F1  3194   	fcall	_Set_time_from_Com
  9945                           
  9946                           ;com.c: 24: Set_time_cmd_flag = 0;
  9947  143B  0022               	movlb	2	; select bank2
  9948  143C  01BA               	clrf	_Set_time_cmd_flag^(0+256)
  9949  143D                     l6449:	
  9950                           
  9951                           ;com.c: 25: }
  9952                           ;com.c: 26: if(Inf_cmd_flag == 1)
  9953  143D  0338               	decf	_Inf_cmd_flag^(0+256),w
  9954  143E  1D03               	btfss	3,2
  9955  143F  0008               	return
  9956                           
  9957                           ;com.c: 27: {
  9958                           ;com.c: 28: Inf_to_Com();
  9959  1440  3184  240A         	fcall	_Inf_to_Com
  9960                           
  9961                           ;com.c: 29: Inf_cmd_flag = 0;
  9962  1442  0022               	movlb	2	; select bank2
  9963  1443  01B8               	clrf	_Inf_cmd_flag^(0+256)
  9964  1444  0008               	return
  9965  1445                     __end_of_Com_Process:	
  9966                           
  9967                           	psect	text48
  9968  08F1                     __ptext48:	
  9969 ;; *************** function _Set_time_from_Com *****************
  9970 ;; Defined at:
  9971 ;;		line 39 in file "mcc_generated_files/com.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;		None
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;		None
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  1    wreg      void 
  9978 ;; Registers used:
  9979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;Total ram usage:        1 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    6
  9992 ;; This function calls:
  9993 ;;		_Bq32k_Rtc_Read_Time
  9994 ;;		_Bq32k_Rtc_Write_Time
  9995 ;;		_Read_time_to_Com
  9996 ;; This function is called by:
  9997 ;;		_Com_Process
  9998 ;; This function uses a non-reentrant model
  9999 ;;
 10000                           
 10001                           
 10002                           ;psect for function _Set_time_from_Com
 10003  08F1                     _Set_time_from_Com:	
 10004                           
 10005                           ;com.c: 41: rtc_tm.years = Usart_Rx_Buff[4];
 10006                           
 10007                           ;incstack = 0
 10008                           ; Regs used in _Set_time_from_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10009  08F1  0023               	movlb	3	; select bank3
 10010  08F2  0838               	movf	(_Usart_Rx_Buff^(0+384)+4),w
 10011  08F3  0020               	movlb	0	; select bank0
 10012  08F4  00BF               	movwf	??_Set_time_from_Com
 10013  08F5  083F               	movf	??_Set_time_from_Com,w
 10014  08F6  0022               	movlb	2	; select bank2
 10015  08F7  00E6               	movwf	(_rtc_tm^(0+256)+6)
 10016                           
 10017                           ;com.c: 42: rtc_tm.month= Usart_Rx_Buff[5];
 10018  08F8  0023               	movlb	3	; select bank3
 10019  08F9  0839               	movf	(_Usart_Rx_Buff^(0+384)+5),w
 10020  08FA  0020               	movlb	0	; select bank0
 10021  08FB  00BF               	movwf	??_Set_time_from_Com
 10022  08FC  083F               	movf	??_Set_time_from_Com,w
 10023  08FD  0022               	movlb	2	; select bank2
 10024  08FE  00E5               	movwf	(_rtc_tm^(0+256)+5)
 10025                           
 10026                           ;com.c: 43: rtc_tm.date= Usart_Rx_Buff[6];
 10027  08FF  0023               	movlb	3	; select bank3
 10028  0900  083A               	movf	(_Usart_Rx_Buff^(0+384)+6),w
 10029  0901  0020               	movlb	0	; select bank0
 10030  0902  00BF               	movwf	??_Set_time_from_Com
 10031  0903  083F               	movf	??_Set_time_from_Com,w
 10032  0904  0022               	movlb	2	; select bank2
 10033  0905  00E4               	movwf	(_rtc_tm^(0+256)+4)
 10034                           
 10035                           ;com.c: 44: rtc_tm.hours= Usart_Rx_Buff[7];
 10036  0906  0023               	movlb	3	; select bank3
 10037  0907  083B               	movf	(_Usart_Rx_Buff^(0+384)+7),w
 10038  0908  0020               	movlb	0	; select bank0
 10039  0909  00BF               	movwf	??_Set_time_from_Com
 10040  090A  083F               	movf	??_Set_time_from_Com,w
 10041  090B  0022               	movlb	2	; select bank2
 10042  090C  00E2               	movwf	(_rtc_tm^(0+256)+2)
 10043                           
 10044                           ;com.c: 45: rtc_tm.minutes= Usart_Rx_Buff[8];
 10045  090D  0023               	movlb	3	; select bank3
 10046  090E  083C               	movf	(_Usart_Rx_Buff^(0+384)+8),w
 10047  090F  0020               	movlb	0	; select bank0
 10048  0910  00BF               	movwf	??_Set_time_from_Com
 10049  0911  083F               	movf	??_Set_time_from_Com,w
 10050  0912  0022               	movlb	2	; select bank2
 10051  0913  00E1               	movwf	(_rtc_tm^(0+256)+1)
 10052                           
 10053                           ;com.c: 46: rtc_tm.seconds= Usart_Rx_Buff[9];
 10054  0914  0023               	movlb	3	; select bank3
 10055  0915  083D               	movf	(_Usart_Rx_Buff^(0+384)+9),w
 10056  0916  0020               	movlb	0	; select bank0
 10057  0917  00BF               	movwf	??_Set_time_from_Com
 10058  0918  083F               	movf	??_Set_time_from_Com,w
 10059  0919  0022               	movlb	2	; select bank2
 10060  091A  00E0               	movwf	_rtc_tm^(0+256)
 10061                           
 10062                           ;com.c: 47: rtc_tm.wday= Usart_Rx_Buff[10];
 10063  091B  0023               	movlb	3	; select bank3
 10064  091C  083E               	movf	(_Usart_Rx_Buff^(0+384)+10),w
 10065  091D  0020               	movlb	0	; select bank0
 10066  091E  00BF               	movwf	??_Set_time_from_Com
 10067  091F  083F               	movf	??_Set_time_from_Com,w
 10068  0920  0022               	movlb	2	; select bank2
 10069  0921  00E3               	movwf	(_rtc_tm^(0+256)+3)
 10070                           
 10071                           ;com.c: 48: Bq32k_Rtc_Write_Time(&rtc_tm);
 10072  0922  3060               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
 10073  0923  318B  2343  3188   	fcall	_Bq32k_Rtc_Write_Time
 10074                           
 10075                           ;com.c: 49: Bq32k_Rtc_Read_Time(&rtc_tm);
 10076  0926  3060               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
 10077  0927  318C  247C  3188   	fcall	_Bq32k_Rtc_Read_Time
 10078                           
 10079                           ;com.c: 50: Read_time_to_Com();
 10080  092A  318B  23AA         	fcall	_Read_time_to_Com
 10081  092C  0008               	return
 10082  092D                     __end_of_Set_time_from_Com:	
 10083                           
 10084                           	psect	text49
 10085  0BAA                     __ptext49:	
 10086 ;; *************** function _Read_time_to_Com *****************
 10087 ;; Defined at:
 10088 ;;		line 59 in file "mcc_generated_files/com.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;		None
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;  tmp_buf        16   12[BANK0 ] unsigned char [16]
 10093 ;;  crc_tmp         2   28[BANK0 ] unsigned int 
 10094 ;;  i               1   30[BANK0 ] unsigned char 
 10095 ;; Return value:  Size  Location     Type
 10096 ;;                  1    wreg      void 
 10097 ;; Registers used:
 10098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10099 ;; Tracked objects:
 10100 ;;		On entry : 0/0
 10101 ;;		On exit  : 0/0
 10102 ;;		Unchanged: 0/0
 10103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;Total ram usage:       20 bytes
 10109 ;; Hardware stack levels used:    1
 10110 ;; Hardware stack levels required when called:    4
 10111 ;; This function calls:
 10112 ;;		_CRC_cal
 10113 ;;		_EUSART_Write
 10114 ;; This function is called by:
 10115 ;;		_Set_time_from_Com
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           
 10120                           ;psect for function _Read_time_to_Com
 10121  0BAA                     _Read_time_to_Com:	
 10122                           
 10123                           ;com.c: 61: unsigned int crc_tmp=0;
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in _Read_time_to_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10127  0BAA  0020               	movlb	0	; select bank0
 10128  0BAB  01BC               	clrf	Read_time_to_Com@crc_tmp
 10129  0BAC  01BD               	clrf	Read_time_to_Com@crc_tmp+1
 10130                           
 10131                           ;com.c: 62: unsigned char tmp_buf[16];
 10132                           ;com.c: 63: unsigned char i;
 10133                           ;com.c: 64: tmp_buf[0] = 0xfe;
 10134  0BAD  30FE               	movlw	254
 10135  0BAE  00AB               	movwf	??_Read_time_to_Com
 10136  0BAF  082B               	movf	??_Read_time_to_Com,w
 10137  0BB0  00AC               	movwf	Read_time_to_Com@tmp_buf
 10138                           
 10139                           ;com.c: 65: tmp_buf[1] = 0xfe;
 10140  0BB1  30FE               	movlw	254
 10141  0BB2  00AB               	movwf	??_Read_time_to_Com
 10142  0BB3  082B               	movf	??_Read_time_to_Com,w
 10143  0BB4  00AD               	movwf	Read_time_to_Com@tmp_buf+1
 10144                           
 10145                           ;com.c: 66: tmp_buf[2] = 0X02;
 10146  0BB5  3002               	movlw	2
 10147  0BB6  00AB               	movwf	??_Read_time_to_Com
 10148  0BB7  082B               	movf	??_Read_time_to_Com,w
 10149  0BB8  00AE               	movwf	Read_time_to_Com@tmp_buf+2
 10150                           
 10151                           ;com.c: 67: tmp_buf[3] = 0x07;
 10152  0BB9  3007               	movlw	7
 10153  0BBA  00AB               	movwf	??_Read_time_to_Com
 10154  0BBB  082B               	movf	??_Read_time_to_Com,w
 10155  0BBC  00AF               	movwf	Read_time_to_Com@tmp_buf+3
 10156                           
 10157                           ;com.c: 68: tmp_buf[4] = rtc_tm.years;
 10158  0BBD  0022               	movlb	2	; select bank2
 10159  0BBE  0866               	movf	(_rtc_tm^(0+256)+6),w
 10160  0BBF  0020               	movlb	0	; select bank0
 10161  0BC0  00AB               	movwf	??_Read_time_to_Com
 10162  0BC1  082B               	movf	??_Read_time_to_Com,w
 10163  0BC2  00B0               	movwf	Read_time_to_Com@tmp_buf+4
 10164                           
 10165                           ;com.c: 69: tmp_buf[5] = rtc_tm.month;
 10166  0BC3  0022               	movlb	2	; select bank2
 10167  0BC4  0865               	movf	(_rtc_tm^(0+256)+5),w
 10168  0BC5  0020               	movlb	0	; select bank0
 10169  0BC6  00AB               	movwf	??_Read_time_to_Com
 10170  0BC7  082B               	movf	??_Read_time_to_Com,w
 10171  0BC8  00B1               	movwf	Read_time_to_Com@tmp_buf+5
 10172                           
 10173                           ;com.c: 70: tmp_buf[6] = rtc_tm.date;
 10174  0BC9  0022               	movlb	2	; select bank2
 10175  0BCA  0864               	movf	(_rtc_tm^(0+256)+4),w
 10176  0BCB  0020               	movlb	0	; select bank0
 10177  0BCC  00AB               	movwf	??_Read_time_to_Com
 10178  0BCD  082B               	movf	??_Read_time_to_Com,w
 10179  0BCE  00B2               	movwf	Read_time_to_Com@tmp_buf+6
 10180                           
 10181                           ;com.c: 71: tmp_buf[7] = rtc_tm.hours;
 10182  0BCF  0022               	movlb	2	; select bank2
 10183  0BD0  0862               	movf	(_rtc_tm^(0+256)+2),w
 10184  0BD1  0020               	movlb	0	; select bank0
 10185  0BD2  00AB               	movwf	??_Read_time_to_Com
 10186  0BD3  082B               	movf	??_Read_time_to_Com,w
 10187  0BD4  00B3               	movwf	Read_time_to_Com@tmp_buf+7
 10188                           
 10189                           ;com.c: 72: tmp_buf[8] = rtc_tm.minutes;
 10190  0BD5  0022               	movlb	2	; select bank2
 10191  0BD6  0861               	movf	(_rtc_tm^(0+256)+1),w
 10192  0BD7  0020               	movlb	0	; select bank0
 10193  0BD8  00AB               	movwf	??_Read_time_to_Com
 10194  0BD9  082B               	movf	??_Read_time_to_Com,w
 10195  0BDA  00B4               	movwf	Read_time_to_Com@tmp_buf+8
 10196                           
 10197                           ;com.c: 73: tmp_buf[9] = rtc_tm.seconds;
 10198  0BDB  0022               	movlb	2	; select bank2
 10199  0BDC  0860               	movf	_rtc_tm^(0+256),w
 10200  0BDD  0020               	movlb	0	; select bank0
 10201  0BDE  00AB               	movwf	??_Read_time_to_Com
 10202  0BDF  082B               	movf	??_Read_time_to_Com,w
 10203  0BE0  00B5               	movwf	Read_time_to_Com@tmp_buf+9
 10204                           
 10205                           ;com.c: 74: tmp_buf[10] = rtc_tm.wday;
 10206  0BE1  0022               	movlb	2	; select bank2
 10207  0BE2  0863               	movf	(_rtc_tm^(0+256)+3),w
 10208  0BE3  0020               	movlb	0	; select bank0
 10209  0BE4  00AB               	movwf	??_Read_time_to_Com
 10210  0BE5  082B               	movf	??_Read_time_to_Com,w
 10211  0BE6  00B6               	movwf	Read_time_to_Com@tmp_buf+10
 10212                           
 10213                           ;com.c: 75: crc_tmp = CRC_cal(tmp_buf,14);
 10214  0BE7  300E               	movlw	14
 10215  0BE8  00AB               	movwf	??_Read_time_to_Com
 10216  0BE9  082B               	movf	??_Read_time_to_Com,w
 10217  0BEA  00A1               	movwf	CRC_cal@frame_len
 10218  0BEB  302C               	movlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
 10219  0BEC  318D  255F  318B   	fcall	_CRC_cal
 10220  0BEF  0020               	movlb	0	; select bank0
 10221  0BF0  0822               	movf	?_CRC_cal+1,w
 10222  0BF1  00BD               	movwf	Read_time_to_Com@crc_tmp+1
 10223  0BF2  0821               	movf	?_CRC_cal,w
 10224  0BF3  00BC               	movwf	Read_time_to_Com@crc_tmp
 10225                           
 10226                           ;com.c: 76: tmp_buf[11] = crc_tmp & 0xff;
 10227  0BF4  083C               	movf	Read_time_to_Com@crc_tmp,w
 10228  0BF5  00AB               	movwf	??_Read_time_to_Com
 10229  0BF6  082B               	movf	??_Read_time_to_Com,w
 10230  0BF7  00B7               	movwf	Read_time_to_Com@tmp_buf+11
 10231                           
 10232                           ;com.c: 77: tmp_buf[12] = crc_tmp >>8;
 10233  0BF8  083D               	movf	Read_time_to_Com@crc_tmp+1,w
 10234  0BF9  00AB               	movwf	??_Read_time_to_Com
 10235  0BFA  082B               	movf	??_Read_time_to_Com,w
 10236  0BFB  00B8               	movwf	Read_time_to_Com@tmp_buf+12
 10237                           
 10238                           ;com.c: 78: tmp_buf[13] = 0xbb;
 10239  0BFC  30BB               	movlw	187
 10240  0BFD  00AB               	movwf	??_Read_time_to_Com
 10241  0BFE  082B               	movf	??_Read_time_to_Com,w
 10242  0BFF  00B9               	movwf	Read_time_to_Com@tmp_buf+13
 10243                           
 10244                           ;com.c: 79: for(i=0;i<14;i++)
 10245  0C00  01BE               	clrf	Read_time_to_Com@i
 10246  0C01                     L15:	
 10247  0C01  300E               	movlw	14
 10248  0C02  023E               	subwf	Read_time_to_Com@i,w
 10249  0C03  1803               	btfsc	3,0
 10250  0C04  0008               	return
 10251                           
 10252                           ;com.c: 80: {
 10253                           ;com.c: 81: EUSART_Write(tmp_buf[i]);
 10254  0C05  083E               	movf	Read_time_to_Com@i,w
 10255  0C06  3E2C               	addlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
 10256  0C07  0086               	movwf	6
 10257  0C08  0187               	clrf	7
 10258  0C09  0801               	movf	1,w
 10259  0C0A  3193  23E4  318B   	fcall	_EUSART_Write
 10260  0C0D  3001               	movlw	1
 10261  0C0E  0020               	movlb	0	; select bank0
 10262  0C0F  00AB               	movwf	??_Read_time_to_Com
 10263  0C10  082B               	movf	??_Read_time_to_Com,w
 10264  0C11  07BE               	addwf	Read_time_to_Com@i,f
 10265  0C12  2C01               	goto	L15
 10266  0C13                     __end_of_Read_time_to_Com:	
 10267                           
 10268                           	psect	text50
 10269  0B43                     __ptext50:	
 10270 ;; *************** function _Bq32k_Rtc_Write_Time *****************
 10271 ;; Defined at:
 10272 ;;		line 54 in file "mcc_generated_files/bq32k.c"
 10273 ;; Parameters:    Size  Location     Type
 10274 ;;  p               1    wreg     PTR struct bq32k_regs
 10275 ;;		 -> rtc_tm(7), 
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;  p               1   30[BANK0 ] PTR struct bq32k_regs
 10278 ;;		 -> rtc_tm(7), 
 10279 ;;  temp           10   20[BANK0 ] unsigned char [10]
 10280 ;; Return value:  Size  Location     Type
 10281 ;;                  1    wreg      void 
 10282 ;; Registers used:
 10283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;Total ram usage:       13 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    5
 10296 ;; This function calls:
 10297 ;;		_I2C_Send_Buffer
 10298 ;;		_bin2bcd
 10299 ;; This function is called by:
 10300 ;;		_Set_time_from_Com
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           
 10305                           ;psect for function _Bq32k_Rtc_Write_Time
 10306  0B43                     _Bq32k_Rtc_Write_Time:	
 10307                           
 10308                           ;incstack = 0
 10309                           ; Regs used in _Bq32k_Rtc_Write_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10310                           ;Bq32k_Rtc_Write_Time@p stored from wreg
 10311  0B43  0020               	movlb	0	; select bank0
 10312  0B44  00BE               	movwf	Bq32k_Rtc_Write_Time@p
 10313                           
 10314                           ;bq32k.c: 56: unsigned char temp[10] ;
 10315                           ;bq32k.c: 57: temp[0] = bin2bcd(p->seconds);
 10316  0B45  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10317  0B46  0086               	movwf	6
 10318  0B47  3001               	movlw	1	; select bank2/3
 10319  0B48  0087               	movwf	7
 10320  0B49  0801               	movf	1,w
 10321  0B4A  3197  2771  318B   	fcall	_bin2bcd
 10322  0B4D  0020               	movlb	0	; select bank0
 10323  0B4E  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10324  0B4F  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10325  0B50  00B4               	movwf	Bq32k_Rtc_Write_Time@temp
 10326                           
 10327                           ;bq32k.c: 58: temp[1] = bin2bcd(p->minutes);
 10328  0B51  0A3E               	incf	Bq32k_Rtc_Write_Time@p,w
 10329  0B52  0086               	movwf	6
 10330  0B53  3001               	movlw	1	; select bank2/3
 10331  0B54  0087               	movwf	7
 10332  0B55  0801               	movf	1,w
 10333  0B56  3197  2771  318B   	fcall	_bin2bcd
 10334  0B59  0020               	movlb	0	; select bank0
 10335  0B5A  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10336  0B5B  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10337  0B5C  00B5               	movwf	Bq32k_Rtc_Write_Time@temp+1
 10338                           
 10339                           ;bq32k.c: 59: temp[2] = bin2bcd(p->hours);
 10340  0B5D  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10341  0B5E  3E02               	addlw	2
 10342  0B5F  0086               	movwf	6
 10343  0B60  3001               	movlw	1	; select bank2/3
 10344  0B61  0087               	movwf	7
 10345  0B62  0801               	movf	1,w
 10346  0B63  3197  2771  318B   	fcall	_bin2bcd
 10347  0B66  0020               	movlb	0	; select bank0
 10348  0B67  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10349  0B68  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10350  0B69  00B6               	movwf	Bq32k_Rtc_Write_Time@temp+2
 10351                           
 10352                           ;bq32k.c: 60: temp[3] = bin2bcd(p->wday);
 10353  0B6A  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10354  0B6B  3E03               	addlw	3
 10355  0B6C  0086               	movwf	6
 10356  0B6D  3001               	movlw	1	; select bank2/3
 10357  0B6E  0087               	movwf	7
 10358  0B6F  0801               	movf	1,w
 10359  0B70  3197  2771  318B   	fcall	_bin2bcd
 10360  0B73  0020               	movlb	0	; select bank0
 10361  0B74  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10362  0B75  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10363  0B76  00B7               	movwf	Bq32k_Rtc_Write_Time@temp+3
 10364                           
 10365                           ;bq32k.c: 61: temp[4] = bin2bcd(p->date);
 10366  0B77  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10367  0B78  3E04               	addlw	4
 10368  0B79  0086               	movwf	6
 10369  0B7A  3001               	movlw	1	; select bank2/3
 10370  0B7B  0087               	movwf	7
 10371  0B7C  0801               	movf	1,w
 10372  0B7D  3197  2771  318B   	fcall	_bin2bcd
 10373  0B80  0020               	movlb	0	; select bank0
 10374  0B81  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10375  0B82  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10376  0B83  00B8               	movwf	Bq32k_Rtc_Write_Time@temp+4
 10377                           
 10378                           ;bq32k.c: 62: temp[5] = bin2bcd(p->month);
 10379  0B84  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10380  0B85  3E05               	addlw	5
 10381  0B86  0086               	movwf	6
 10382  0B87  3001               	movlw	1	; select bank2/3
 10383  0B88  0087               	movwf	7
 10384  0B89  0801               	movf	1,w
 10385  0B8A  3197  2771  318B   	fcall	_bin2bcd
 10386  0B8D  0020               	movlb	0	; select bank0
 10387  0B8E  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10388  0B8F  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10389  0B90  00B9               	movwf	Bq32k_Rtc_Write_Time@temp+5
 10390                           
 10391                           ;bq32k.c: 63: temp[6] = bin2bcd(p->years);
 10392  0B91  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10393  0B92  3E06               	addlw	6
 10394  0B93  0086               	movwf	6
 10395  0B94  3001               	movlw	1	; select bank2/3
 10396  0B95  0087               	movwf	7
 10397  0B96  0801               	movf	1,w
 10398  0B97  3197  2771  318B   	fcall	_bin2bcd
 10399  0B9A  0020               	movlb	0	; select bank0
 10400  0B9B  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10401  0B9C  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10402  0B9D  00BA               	movwf	Bq32k_Rtc_Write_Time@temp+6
 10403                           
 10404                           ;bq32k.c: 64: I2C_Send_Buffer( 0 , temp , 7);
 10405  0B9E  3034               	movlw	(low (Bq32k_Rtc_Write_Time@temp| 0))& (0+255)
 10406  0B9F  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10407  0BA0  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10408  0BA1  00A4               	movwf	I2C_Send_Buffer@buff
 10409  0BA2  3007               	movlw	7
 10410  0BA3  00B3               	movwf	??_Bq32k_Rtc_Write_Time+1
 10411  0BA4  0833               	movf	??_Bq32k_Rtc_Write_Time+1,w
 10412  0BA5  00A5               	movwf	I2C_Send_Buffer@Length
 10413  0BA6  3000               	movlw	0
 10414  0BA7  3188  20B6         	fcall	_I2C_Send_Buffer
 10415  0BA9  0008               	return
 10416  0BAA                     __end_of_Bq32k_Rtc_Write_Time:	
 10417                           
 10418                           	psect	text51
 10419  1771                     __ptext51:	
 10420 ;; *************** function _bin2bcd *****************
 10421 ;; Defined at:
 10422 ;;		line 84 in file "mcc_generated_files/bq32k.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;  val             1    wreg     unsigned char 
 10425 ;; Auto vars:     Size  Location     Type
 10426 ;;  val             1   17[BANK0 ] unsigned char 
 10427 ;; Return value:  Size  Location     Type
 10428 ;;                  1    wreg      unsigned char 
 10429 ;; Registers used:
 10430 ;;		wreg, status,2, status,0, pclath, cstack
 10431 ;; Tracked objects:
 10432 ;;		On entry : 0/0
 10433 ;;		On exit  : 0/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;Total ram usage:        8 bytes
 10441 ;; Hardware stack levels used:    1
 10442 ;; Hardware stack levels required when called:    4
 10443 ;; This function calls:
 10444 ;;		___awdiv
 10445 ;;		___awmod
 10446 ;; This function is called by:
 10447 ;;		_Bq32k_Rtc_Write_Time
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           
 10452                           ;psect for function _bin2bcd
 10453  1771                     _bin2bcd:	
 10454                           
 10455                           ;incstack = 0
 10456                           ; Regs used in _bin2bcd: [wreg+status,2+status,0+pclath+cstack]
 10457                           ;bin2bcd@val stored from wreg
 10458  1771  0020               	movlb	0	; select bank0
 10459  1772  00B1               	movwf	bin2bcd@val
 10460                           
 10461                           ;bq32k.c: 86: return ((val / 10) << 4) + val % 10;
 10462  1773  300A               	movlw	10
 10463  1774  00A1               	movwf	___awmod@divisor
 10464  1775  3000               	movlw	0
 10465  1776  00A2               	movwf	___awmod@divisor+1
 10466  1777  0831               	movf	bin2bcd@val,w
 10467  1778  00AA               	movwf	??_bin2bcd
 10468  1779  01AB               	clrf	??_bin2bcd+1
 10469  177A  082A               	movf	??_bin2bcd,w
 10470  177B  00A3               	movwf	___awmod@dividend
 10471  177C  082B               	movf	??_bin2bcd+1,w
 10472  177D  00A4               	movwf	___awmod@dividend+1
 10473  177E  3189  216B  3197   	fcall	___awmod
 10474  1781  0020               	movlb	0	; select bank0
 10475  1782  0821               	movf	?___awmod,w
 10476  1783  00AC               	movwf	??_bin2bcd+2
 10477  1784  0822               	movf	?___awmod+1,w
 10478  1785  00AD               	movwf	??_bin2bcd+3
 10479  1786  300A               	movlw	10
 10480  1787  00A1               	movwf	___awdiv@divisor
 10481  1788  3000               	movlw	0
 10482  1789  00A2               	movwf	___awdiv@divisor+1
 10483  178A  0831               	movf	bin2bcd@val,w
 10484  178B  00AE               	movwf	??_bin2bcd+4
 10485  178C  01AF               	clrf	??_bin2bcd+5
 10486  178D  082E               	movf	??_bin2bcd+4,w
 10487  178E  00A3               	movwf	___awdiv@dividend
 10488  178F  082F               	movf	??_bin2bcd+5,w
 10489  1790  00A4               	movwf	___awdiv@dividend+1
 10490  1791  318A  2248  3197   	fcall	___awdiv
 10491  1794  0020               	movlb	0	; select bank0
 10492  1795  0821               	movf	?___awdiv,w
 10493  1796  00B0               	movwf	??_bin2bcd+6
 10494  1797  3003               	movlw	3
 10495  1798                     u5645:	
 10496  1798  35B0               	lslf	??_bin2bcd+6,f
 10497  1799  3EFF               	addlw	-1
 10498  179A  1D03               	skipz
 10499  179B  2F98               	goto	u5645
 10500  179C  3530               	lslf	??_bin2bcd+6,w
 10501  179D  072C               	addwf	??_bin2bcd+2,w
 10502  179E  0008               	return
 10503  179F                     __end_of_bin2bcd:	
 10504                           
 10505                           	psect	text52
 10506  096B                     __ptext52:	
 10507 ;; *************** function ___awmod *****************
 10508 ;; Defined at:
 10509 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;  divisor         2    1[BANK0 ] int 
 10512 ;;  dividend        2    3[BANK0 ] int 
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;  sign            1    7[BANK0 ] unsigned char 
 10515 ;;  counter         1    6[BANK0 ] unsigned char 
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  2    1[BANK0 ] int 
 10518 ;; Registers used:
 10519 ;;		wreg, status,2, status,0
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10525 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;Total ram usage:        7 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:    3
 10532 ;; This function calls:
 10533 ;;		Nothing
 10534 ;; This function is called by:
 10535 ;;		_time_Display
 10536 ;;		_bin2bcd
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function ___awmod
 10542  096B                     ___awmod:	
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10546  096B  0020               	movlb	0	; select bank0
 10547  096C  01A7               	clrf	___awmod@sign
 10548  096D  1FA4               	btfss	___awmod@dividend+1,7
 10549  096E  2976               	goto	l5651
 10550  096F  09A3               	comf	___awmod@dividend,f
 10551  0970  09A4               	comf	___awmod@dividend+1,f
 10552  0971  0AA3               	incf	___awmod@dividend,f
 10553  0972  1903               	skipnz
 10554  0973  0AA4               	incf	___awmod@dividend+1,f
 10555  0974  01A7               	clrf	___awmod@sign
 10556  0975  0AA7               	incf	___awmod@sign,f
 10557  0976                     l5651:	
 10558  0976  1FA2               	btfss	___awmod@divisor+1,7
 10559  0977  297D               	goto	l5655
 10560  0978  09A1               	comf	___awmod@divisor,f
 10561  0979  09A2               	comf	___awmod@divisor+1,f
 10562  097A  0AA1               	incf	___awmod@divisor,f
 10563  097B  1903               	skipnz
 10564  097C  0AA2               	incf	___awmod@divisor+1,f
 10565  097D                     l5655:	
 10566  097D  0821               	movf	___awmod@divisor,w
 10567  097E  0422               	iorwf	___awmod@divisor+1,w
 10568  097F  1903               	btfsc	3,2
 10569  0980  29A4               	goto	l5673
 10570  0981  01A6               	clrf	___awmod@counter
 10571  0982  0AA6               	incf	___awmod@counter,f
 10572  0983                     l5663:	
 10573  0983  1BA2               	btfsc	___awmod@divisor+1,7
 10574  0984  298F               	goto	l5665
 10575  0985  3001               	movlw	1
 10576  0986                     u5065:	
 10577  0986  35A1               	lslf	___awmod@divisor,f
 10578  0987  0DA2               	rlf	___awmod@divisor+1,f
 10579  0988  0B89               	decfsz	9,f
 10580  0989  2986               	goto	u5065
 10581  098A  3001               	movlw	1
 10582  098B  00A5               	movwf	??___awmod
 10583  098C  0825               	movf	??___awmod,w
 10584  098D  07A6               	addwf	___awmod@counter,f
 10585  098E  2983               	goto	l5663
 10586  098F                     l5665:	
 10587  098F  0822               	movf	___awmod@divisor+1,w
 10588  0990  0224               	subwf	___awmod@dividend+1,w
 10589  0991  1D03               	skipz
 10590  0992  2995               	goto	u5085
 10591  0993  0821               	movf	___awmod@divisor,w
 10592  0994  0223               	subwf	___awmod@dividend,w
 10593  0995                     u5085:	
 10594  0995  1C03               	skipc
 10595  0996  299B               	goto	l5669
 10596  0997  0821               	movf	___awmod@divisor,w
 10597  0998  02A3               	subwf	___awmod@dividend,f
 10598  0999  0822               	movf	___awmod@divisor+1,w
 10599  099A  3BA4               	subwfb	___awmod@dividend+1,f
 10600  099B                     l5669:	
 10601  099B  3001               	movlw	1
 10602  099C                     u5095:	
 10603  099C  36A2               	lsrf	___awmod@divisor+1,f
 10604  099D  0CA1               	rrf	___awmod@divisor,f
 10605  099E  0B89               	decfsz	9,f
 10606  099F  299C               	goto	u5095
 10607  09A0  3001               	movlw	1
 10608  09A1  02A6               	subwf	___awmod@counter,f
 10609  09A2  1D03               	btfss	3,2
 10610  09A3  298F               	goto	l5665
 10611  09A4                     l5673:	
 10612  09A4  0827               	movf	___awmod@sign,w
 10613  09A5  1903               	btfsc	3,2
 10614  09A6  29AC               	goto	l5677
 10615  09A7  09A3               	comf	___awmod@dividend,f
 10616  09A8  09A4               	comf	___awmod@dividend+1,f
 10617  09A9  0AA3               	incf	___awmod@dividend,f
 10618  09AA  1903               	skipnz
 10619  09AB  0AA4               	incf	___awmod@dividend+1,f
 10620  09AC                     l5677:	
 10621  09AC  0824               	movf	___awmod@dividend+1,w
 10622  09AD  00A2               	movwf	?___awmod+1
 10623  09AE  0823               	movf	___awmod@dividend,w
 10624  09AF  00A1               	movwf	?___awmod
 10625  09B0  0008               	return
 10626  09B1                     __end_of___awmod:	
 10627                           
 10628                           	psect	text53
 10629  0A48                     __ptext53:	
 10630 ;; *************** function ___awdiv *****************
 10631 ;; Defined at:
 10632 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;  divisor         2    1[BANK0 ] int 
 10635 ;;  dividend        2    3[BANK0 ] int 
 10636 ;; Auto vars:     Size  Location     Type
 10637 ;;  quotient        2    8[BANK0 ] int 
 10638 ;;  sign            1    7[BANK0 ] unsigned char 
 10639 ;;  counter         1    6[BANK0 ] unsigned char 
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  2    1[BANK0 ] int 
 10642 ;; Registers used:
 10643 ;;		wreg, status,2, status,0
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10649 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;Total ram usage:        9 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    3
 10656 ;; This function calls:
 10657 ;;		Nothing
 10658 ;; This function is called by:
 10659 ;;		_time_Display
 10660 ;;		_bin2bcd
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           
 10665                           ;psect for function ___awdiv
 10666  0A48                     ___awdiv:	
 10667                           
 10668                           ;incstack = 0
 10669                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10670  0A48  0020               	movlb	0	; select bank0
 10671  0A49  01A7               	clrf	___awdiv@sign
 10672  0A4A  1FA2               	btfss	___awdiv@divisor+1,7
 10673  0A4B  2A53               	goto	l5607
 10674  0A4C  09A1               	comf	___awdiv@divisor,f
 10675  0A4D  09A2               	comf	___awdiv@divisor+1,f
 10676  0A4E  0AA1               	incf	___awdiv@divisor,f
 10677  0A4F  1903               	skipnz
 10678  0A50  0AA2               	incf	___awdiv@divisor+1,f
 10679  0A51  01A7               	clrf	___awdiv@sign
 10680  0A52  0AA7               	incf	___awdiv@sign,f
 10681  0A53                     l5607:	
 10682  0A53  1FA4               	btfss	___awdiv@dividend+1,7
 10683  0A54  2A5E               	goto	l5613
 10684  0A55  09A3               	comf	___awdiv@dividend,f
 10685  0A56  09A4               	comf	___awdiv@dividend+1,f
 10686  0A57  0AA3               	incf	___awdiv@dividend,f
 10687  0A58  1903               	skipnz
 10688  0A59  0AA4               	incf	___awdiv@dividend+1,f
 10689  0A5A  3001               	movlw	1
 10690  0A5B  00A5               	movwf	??___awdiv
 10691  0A5C  0825               	movf	??___awdiv,w
 10692  0A5D  06A7               	xorwf	___awdiv@sign,f
 10693  0A5E                     l5613:	
 10694  0A5E  01A8               	clrf	___awdiv@quotient
 10695  0A5F  01A9               	clrf	___awdiv@quotient+1
 10696  0A60  0821               	movf	___awdiv@divisor,w
 10697  0A61  0422               	iorwf	___awdiv@divisor+1,w
 10698  0A62  1903               	btfsc	3,2
 10699  0A63  2A8D               	goto	l5635
 10700  0A64  01A6               	clrf	___awdiv@counter
 10701  0A65  0AA6               	incf	___awdiv@counter,f
 10702  0A66                     l5623:	
 10703  0A66  1BA2               	btfsc	___awdiv@divisor+1,7
 10704  0A67  2A72               	goto	l5625
 10705  0A68  3001               	movlw	1
 10706  0A69                     u4965:	
 10707  0A69  35A1               	lslf	___awdiv@divisor,f
 10708  0A6A  0DA2               	rlf	___awdiv@divisor+1,f
 10709  0A6B  0B89               	decfsz	9,f
 10710  0A6C  2A69               	goto	u4965
 10711  0A6D  3001               	movlw	1
 10712  0A6E  00A5               	movwf	??___awdiv
 10713  0A6F  0825               	movf	??___awdiv,w
 10714  0A70  07A6               	addwf	___awdiv@counter,f
 10715  0A71  2A66               	goto	l5623
 10716  0A72                     l5625:	
 10717  0A72  3001               	movlw	1
 10718  0A73                     u4985:	
 10719  0A73  35A8               	lslf	___awdiv@quotient,f
 10720  0A74  0DA9               	rlf	___awdiv@quotient+1,f
 10721  0A75  0B89               	decfsz	9,f
 10722  0A76  2A73               	goto	u4985
 10723  0A77  0822               	movf	___awdiv@divisor+1,w
 10724  0A78  0224               	subwf	___awdiv@dividend+1,w
 10725  0A79  1D03               	skipz
 10726  0A7A  2A7D               	goto	u4995
 10727  0A7B  0821               	movf	___awdiv@divisor,w
 10728  0A7C  0223               	subwf	___awdiv@dividend,w
 10729  0A7D                     u4995:	
 10730  0A7D  1C03               	skipc
 10731  0A7E  2A84               	goto	l5631
 10732  0A7F  0821               	movf	___awdiv@divisor,w
 10733  0A80  02A3               	subwf	___awdiv@dividend,f
 10734  0A81  0822               	movf	___awdiv@divisor+1,w
 10735  0A82  3BA4               	subwfb	___awdiv@dividend+1,f
 10736  0A83  1428               	bsf	___awdiv@quotient,0
 10737  0A84                     l5631:	
 10738  0A84  3001               	movlw	1
 10739  0A85                     u5005:	
 10740  0A85  36A2               	lsrf	___awdiv@divisor+1,f
 10741  0A86  0CA1               	rrf	___awdiv@divisor,f
 10742  0A87  0B89               	decfsz	9,f
 10743  0A88  2A85               	goto	u5005
 10744  0A89  3001               	movlw	1
 10745  0A8A  02A6               	subwf	___awdiv@counter,f
 10746  0A8B  1D03               	btfss	3,2
 10747  0A8C  2A72               	goto	l5625
 10748  0A8D                     l5635:	
 10749  0A8D  0827               	movf	___awdiv@sign,w
 10750  0A8E  1903               	btfsc	3,2
 10751  0A8F  2A95               	goto	l5639
 10752  0A90  09A8               	comf	___awdiv@quotient,f
 10753  0A91  09A9               	comf	___awdiv@quotient+1,f
 10754  0A92  0AA8               	incf	___awdiv@quotient,f
 10755  0A93  1903               	skipnz
 10756  0A94  0AA9               	incf	___awdiv@quotient+1,f
 10757  0A95                     l5639:	
 10758  0A95  0829               	movf	___awdiv@quotient+1,w
 10759  0A96  00A2               	movwf	?___awdiv+1
 10760  0A97  0828               	movf	___awdiv@quotient,w
 10761  0A98  00A1               	movwf	?___awdiv
 10762  0A99  0008               	return
 10763  0A9A                     __end_of___awdiv:	
 10764                           
 10765                           	psect	text54
 10766  08B6                     __ptext54:	
 10767 ;; *************** function _I2C_Send_Buffer *****************
 10768 ;; Defined at:
 10769 ;;		line 173 in file "mcc_generated_files/i2c.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;  ADD             1    wreg     unsigned char 
 10772 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 10773 ;;		 -> Bq32k_Rtc_Write_Time@temp(10), Bq32k_Time_Init@temp(2), 
 10774 ;;  Length          1    5[BANK0 ] unsigned char 
 10775 ;; Auto vars:     Size  Location     Type
 10776 ;;  ADD             1    8[BANK0 ] unsigned char 
 10777 ;;  Flag            1   10[BANK0 ] unsigned char 
 10778 ;;  i               1    9[BANK0 ] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  1    wreg      unsigned char 
 10781 ;; Registers used:
 10782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10788 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;Total ram usage:        7 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    4
 10795 ;; This function calls:
 10796 ;;		_I2C_Send_Byte
 10797 ;;		_I2C_Start
 10798 ;;		_I2C_Stop
 10799 ;; This function is called by:
 10800 ;;		_Bq32k_Rtc_Write_Time
 10801 ;;		_Bq32k_Time_Init
 10802 ;; This function uses a non-reentrant model
 10803 ;;
 10804                           
 10805                           
 10806                           ;psect for function _I2C_Send_Buffer
 10807  08B6                     _I2C_Send_Buffer:	
 10808                           
 10809                           ;incstack = 0
 10810                           ; Regs used in _I2C_Send_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10811                           ;I2C_Send_Buffer@ADD stored from wreg
 10812  08B6  0020               	movlb	0	; select bank0
 10813  08B7  00A8               	movwf	I2C_Send_Buffer@ADD
 10814                           
 10815                           ;i2c.c: 175: unsigned char Flag=1;
 10816  08B8  01AA               	clrf	I2C_Send_Buffer@Flag
 10817  08B9  0AAA               	incf	I2C_Send_Buffer@Flag,f
 10818                           
 10819                           ;i2c.c: 176: unsigned char i;
 10820                           ;i2c.c: 178: I2C_Start();
 10821  08BA  3195  254C  3188   	fcall	_I2C_Start
 10822                           
 10823                           ;i2c.c: 180: Flag=I2C_Send_Byte(0XD0);
 10824  08BD  30D0               	movlw	208
 10825  08BE  318A  22ED  3188   	fcall	_I2C_Send_Byte
 10826  08C1  0020               	movlb	0	; select bank0
 10827  08C2  00A6               	movwf	??_I2C_Send_Buffer
 10828  08C3  0826               	movf	??_I2C_Send_Buffer,w
 10829  08C4  00AA               	movwf	I2C_Send_Buffer@Flag
 10830                           
 10831                           ;i2c.c: 181: if(Flag)
 10832  08C5  082A               	movf	I2C_Send_Buffer@Flag,w
 10833  08C6  1D03               	btfss	3,2
 10834  08C7  0008               	return
 10835                           
 10836                           ;i2c.c: 184: Flag=I2C_Send_Byte( ADD );
 10837                           
 10838                           ;i2c.c: 182: return 0x01;
 10839                           ;	Return value of _I2C_Send_Buffer is never used
 10840  08C8  0828               	movf	I2C_Send_Buffer@ADD,w
 10841  08C9  318A  22ED  3188   	fcall	_I2C_Send_Byte
 10842  08CC  0020               	movlb	0	; select bank0
 10843  08CD  00A6               	movwf	??_I2C_Send_Buffer
 10844  08CE  0826               	movf	??_I2C_Send_Buffer,w
 10845  08CF  00AA               	movwf	I2C_Send_Buffer@Flag
 10846                           
 10847                           ;i2c.c: 185: if(Flag)
 10848  08D0  082A               	movf	I2C_Send_Buffer@Flag,w
 10849  08D1  1D03               	btfss	3,2
 10850  08D2  0008               	return
 10851                           
 10852                           ;i2c.c: 188: for (i = 0; i<Length; i++)
 10853                           
 10854                           ;i2c.c: 186: return 0x01;
 10855                           ;	Return value of _I2C_Send_Buffer is never used
 10856  08D3  01A9               	clrf	I2C_Send_Buffer@i
 10857  08D4                     l5957:	
 10858  08D4  0825               	movf	I2C_Send_Buffer@Length,w
 10859  08D5  0229               	subwf	I2C_Send_Buffer@i,w
 10860  08D6  1803               	btfsc	3,0
 10861  08D7  28EE               	goto	l5959
 10862                           
 10863                           ;i2c.c: 189: {
 10864                           ;i2c.c: 190: Flag=I2C_Send_Byte(*(buff+i));
 10865  08D8  0829               	movf	I2C_Send_Buffer@i,w
 10866  08D9  0724               	addwf	I2C_Send_Buffer@buff,w
 10867  08DA  00A6               	movwf	??_I2C_Send_Buffer
 10868  08DB  0826               	movf	??_I2C_Send_Buffer,w
 10869  08DC  0086               	movwf	6
 10870  08DD  0187               	clrf	7
 10871  08DE  0801               	movf	1,w
 10872  08DF  318A  22ED  3188   	fcall	_I2C_Send_Byte
 10873  08E2  0020               	movlb	0	; select bank0
 10874  08E3  00A7               	movwf	??_I2C_Send_Buffer+1
 10875  08E4  0827               	movf	??_I2C_Send_Buffer+1,w
 10876  08E5  00AA               	movwf	I2C_Send_Buffer@Flag
 10877                           
 10878                           ;i2c.c: 191: if(Flag)
 10879  08E6  082A               	movf	I2C_Send_Buffer@Flag,w
 10880  08E7  1D03               	btfss	3,2
 10881  08E8  0008               	return
 10882                           
 10883                           ;i2c.c: 192: return 0x01;
 10884                           ;	Return value of _I2C_Send_Buffer is never used
 10885  08E9  3001               	movlw	1
 10886  08EA  00A6               	movwf	??_I2C_Send_Buffer
 10887  08EB  0826               	movf	??_I2C_Send_Buffer,w
 10888  08EC  07A9               	addwf	I2C_Send_Buffer@i,f
 10889  08ED  28D4               	goto	l5957
 10890  08EE                     l5959:	
 10891                           
 10892                           ;i2c.c: 193: }
 10893                           ;i2c.c: 194: I2C_Stop();
 10894  08EE  3195  2569         	fcall	_I2C_Stop
 10895  08F0  0008               	return
 10896  08F1                     __end_of_I2C_Send_Buffer:	
 10897                           ;i2c.c: 195: return 0x00;
 10898                           ;	Return value of _I2C_Send_Buffer is never used
 10899                           
 10900                           
 10901                           	psect	text55
 10902  0C7C                     __ptext55:	
 10903 ;; *************** function _Bq32k_Rtc_Read_Time *****************
 10904 ;; Defined at:
 10905 ;;		line 35 in file "mcc_generated_files/bq32k.c"
 10906 ;; Parameters:    Size  Location     Type
 10907 ;;  p               1    wreg     PTR struct bq32k_regs
 10908 ;;		 -> rtc_tm(7), 
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;  p               1   21[BANK0 ] PTR struct bq32k_regs
 10911 ;;		 -> rtc_tm(7), 
 10912 ;;  temp           10   11[BANK0 ] unsigned char [10]
 10913 ;; Return value:  Size  Location     Type
 10914 ;;                  1    wreg      void 
 10915 ;; Registers used:
 10916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10917 ;; Tracked objects:
 10918 ;;		On entry : 0/0
 10919 ;;		On exit  : 0/0
 10920 ;;		Unchanged: 0/0
 10921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10925 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;Total ram usage:       13 bytes
 10927 ;; Hardware stack levels used:    1
 10928 ;; Hardware stack levels required when called:    5
 10929 ;; This function calls:
 10930 ;;		_I2C_Read_Buffer
 10931 ;;		_bcd2bin
 10932 ;; This function is called by:
 10933 ;;		_time_Display
 10934 ;;		_Calculate_Time
 10935 ;;		_Save_Write_time
 10936 ;;		_Set_time_from_Com
 10937 ;; This function uses a non-reentrant model
 10938 ;;
 10939                           
 10940                           
 10941                           ;psect for function _Bq32k_Rtc_Read_Time
 10942  0C7C                     _Bq32k_Rtc_Read_Time:	
 10943                           
 10944                           ;incstack = 0
 10945                           ; Regs used in _Bq32k_Rtc_Read_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10946                           ;Bq32k_Rtc_Read_Time@p stored from wreg
 10947  0C7C  0020               	movlb	0	; select bank0
 10948  0C7D  00B5               	movwf	Bq32k_Rtc_Read_Time@p
 10949                           
 10950                           ;bq32k.c: 37: unsigned char temp[10] ;
 10951                           ;bq32k.c: 38: I2C_Read_Buffer( 0 , temp , 7);
 10952  0C7E  302B               	movlw	(low (Bq32k_Rtc_Read_Time@temp| 0))& (0+255)
 10953  0C7F  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10954  0C80  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10955  0C81  00A4               	movwf	I2C_Read_Buffer@buff
 10956  0C82  3007               	movlw	7
 10957  0C83  00AA               	movwf	??_Bq32k_Rtc_Read_Time+1
 10958  0C84  082A               	movf	??_Bq32k_Rtc_Read_Time+1,w
 10959  0C85  00A5               	movwf	I2C_Read_Buffer@Length
 10960  0C86  3000               	movlw	0
 10961  0C87  318C  24E7  318C   	fcall	_I2C_Read_Buffer
 10962                           
 10963                           ;bq32k.c: 39: p->seconds = bcd2bin(temp[0] & 0x7F);
 10964  0C8A  0020               	movlb	0	; select bank0
 10965  0C8B  082B               	movf	Bq32k_Rtc_Read_Time@temp,w
 10966  0C8C  397F               	andlw	127
 10967  0C8D  3194  246A  318C   	fcall	_bcd2bin
 10968  0C90  0020               	movlb	0	; select bank0
 10969  0C91  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10970  0C92  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10971  0C93  0086               	movwf	6
 10972  0C94  3001               	movlw	1	; select bank2/3
 10973  0C95  0087               	movwf	7
 10974  0C96  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10975  0C97  0081               	movwf	1
 10976                           
 10977                           ;bq32k.c: 40: p->minutes = bcd2bin(temp[1] & 0x7F);
 10978  0C98  082C               	movf	Bq32k_Rtc_Read_Time@temp+1,w
 10979  0C99  397F               	andlw	127
 10980  0C9A  3194  246A  318C   	fcall	_bcd2bin
 10981  0C9D  0020               	movlb	0	; select bank0
 10982  0C9E  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10983  0C9F  0A35               	incf	Bq32k_Rtc_Read_Time@p,w
 10984  0CA0  0086               	movwf	6
 10985  0CA1  3001               	movlw	1	; select bank2/3
 10986  0CA2  0087               	movwf	7
 10987  0CA3  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10988  0CA4  0081               	movwf	1
 10989                           
 10990                           ;bq32k.c: 41: p->hours = bcd2bin(temp[2] & 0x3F);
 10991  0CA5  082D               	movf	Bq32k_Rtc_Read_Time@temp+2,w
 10992  0CA6  393F               	andlw	63
 10993  0CA7  3194  246A  318C   	fcall	_bcd2bin
 10994  0CAA  0020               	movlb	0	; select bank0
 10995  0CAB  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10996  0CAC  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10997  0CAD  3E02               	addlw	2
 10998  0CAE  0086               	movwf	6
 10999  0CAF  3001               	movlw	1	; select bank2/3
 11000  0CB0  0087               	movwf	7
 11001  0CB1  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11002  0CB2  0081               	movwf	1
 11003                           
 11004                           ;bq32k.c: 42: p->wday = bcd2bin(temp[3]);
 11005  0CB3  082E               	movf	Bq32k_Rtc_Read_Time@temp+3,w
 11006  0CB4  3194  246A  318C   	fcall	_bcd2bin
 11007  0CB7  0020               	movlb	0	; select bank0
 11008  0CB8  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11009  0CB9  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11010  0CBA  3E03               	addlw	3
 11011  0CBB  0086               	movwf	6
 11012  0CBC  3001               	movlw	1	; select bank2/3
 11013  0CBD  0087               	movwf	7
 11014  0CBE  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11015  0CBF  0081               	movwf	1
 11016                           
 11017                           ;bq32k.c: 43: p->date = bcd2bin(temp[4]);
 11018  0CC0  082F               	movf	Bq32k_Rtc_Read_Time@temp+4,w
 11019  0CC1  3194  246A  318C   	fcall	_bcd2bin
 11020  0CC4  0020               	movlb	0	; select bank0
 11021  0CC5  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11022  0CC6  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11023  0CC7  3E04               	addlw	4
 11024  0CC8  0086               	movwf	6
 11025  0CC9  3001               	movlw	1	; select bank2/3
 11026  0CCA  0087               	movwf	7
 11027  0CCB  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11028  0CCC  0081               	movwf	1
 11029                           
 11030                           ;bq32k.c: 44: p->month = bcd2bin(temp[5]);
 11031  0CCD  0830               	movf	Bq32k_Rtc_Read_Time@temp+5,w
 11032  0CCE  3194  246A  318C   	fcall	_bcd2bin
 11033  0CD1  0020               	movlb	0	; select bank0
 11034  0CD2  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11035  0CD3  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11036  0CD4  3E05               	addlw	5
 11037  0CD5  0086               	movwf	6
 11038  0CD6  3001               	movlw	1	; select bank2/3
 11039  0CD7  0087               	movwf	7
 11040  0CD8  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11041  0CD9  0081               	movwf	1
 11042                           
 11043                           ;bq32k.c: 45: p->years= bcd2bin(temp[6]);
 11044  0CDA  0831               	movf	Bq32k_Rtc_Read_Time@temp+6,w
 11045  0CDB  3194  246A         	fcall	_bcd2bin
 11046  0CDD  0020               	movlb	0	; select bank0
 11047  0CDE  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11048  0CDF  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11049  0CE0  3E06               	addlw	6
 11050  0CE1  0086               	movwf	6
 11051  0CE2  3001               	movlw	1	; select bank2/3
 11052  0CE3  0087               	movwf	7
 11053  0CE4  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11054  0CE5  0081               	movwf	1
 11055  0CE6  0008               	return
 11056  0CE7                     __end_of_Bq32k_Rtc_Read_Time:	
 11057                           
 11058                           	psect	text56
 11059  146A                     __ptext56:	
 11060 ;; *************** function _bcd2bin *****************
 11061 ;; Defined at:
 11062 ;;		line 73 in file "mcc_generated_files/bq32k.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;  val             1    wreg     unsigned char 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;  val             1    8[BANK0 ] unsigned char 
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  1    wreg      unsigned char 
 11069 ;; Registers used:
 11070 ;;		wreg, status,2, status,0, pclath, cstack
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;Total ram usage:        4 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:    4
 11083 ;; This function calls:
 11084 ;;		___bmul
 11085 ;; This function is called by:
 11086 ;;		_Bq32k_Rtc_Read_Time
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090                           
 11091                           ;psect for function _bcd2bin
 11092  146A                     _bcd2bin:	
 11093                           
 11094                           ;incstack = 0
 11095                           ; Regs used in _bcd2bin: [wreg+status,2+status,0+pclath+cstack]
 11096                           ;bcd2bin@val stored from wreg
 11097  146A  0020               	movlb	0	; select bank0
 11098  146B  00A8               	movwf	bcd2bin@val
 11099                           
 11100                           ;bq32k.c: 75: return (val & 0x0f) + (val >> 4) * 10;
 11101  146C  300F               	movlw	15
 11102  146D  0528               	andwf	bcd2bin@val,w
 11103  146E  00A5               	movwf	??_bcd2bin
 11104  146F  300A               	movlw	10
 11105  1470  00A6               	movwf	??_bcd2bin+1
 11106  1471  0826               	movf	??_bcd2bin+1,w
 11107  1472  00A1               	movwf	___bmul@multiplicand
 11108  1473  0828               	movf	bcd2bin@val,w
 11109  1474  00A7               	movwf	??_bcd2bin+2
 11110  1475  3004               	movlw	4
 11111  1476                     u4555:	
 11112  1476  36A7               	lsrf	??_bcd2bin+2,f
 11113  1477  0B89               	decfsz	9,f
 11114  1478  2C76               	goto	u4555
 11115  1479  0827               	movf	??_bcd2bin+2,w
 11116  147A  3194  2445         	fcall	___bmul
 11117  147C  0020               	movlb	0	; select bank0
 11118  147D  0725               	addwf	??_bcd2bin,w
 11119  147E  0008               	return
 11120  147F                     __end_of_bcd2bin:	
 11121                           
 11122                           	psect	text57
 11123  1445                     __ptext57:	
 11124 ;; *************** function ___bmul *****************
 11125 ;; Defined at:
 11126 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  multiplier      1    wreg     unsigned char 
 11129 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  multiplier      1    4[BANK0 ] unsigned char 
 11132 ;;  product         1    3[BANK0 ] unsigned char 
 11133 ;; Return value:  Size  Location     Type
 11134 ;;                  1    wreg      unsigned char 
 11135 ;; Registers used:
 11136 ;;		wreg, status,2, status,0
 11137 ;; Tracked objects:
 11138 ;;		On entry : 0/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11142 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;Total ram usage:        4 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    3
 11149 ;; This function calls:
 11150 ;;		Nothing
 11151 ;; This function is called by:
 11152 ;;		_bcd2bin
 11153 ;; This function uses a non-reentrant model
 11154 ;;
 11155                           
 11156                           
 11157                           ;psect for function ___bmul
 11158  1445                     ___bmul:	
 11159                           
 11160                           ;incstack = 0
 11161                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11162                           ;___bmul@multiplier stored from wreg
 11163  1445  0020               	movlb	0	; select bank0
 11164  1446  00A4               	movwf	___bmul@multiplier
 11165  1447  01A3               	clrf	___bmul@product
 11166  1448                     l5215:	
 11167  1448  1C24               	btfss	___bmul@multiplier,0
 11168  1449  2C4E               	goto	l5219
 11169  144A  0821               	movf	___bmul@multiplicand,w
 11170  144B  00A2               	movwf	??___bmul
 11171  144C  0822               	movf	??___bmul,w
 11172  144D  07A3               	addwf	___bmul@product,f
 11173  144E                     l5219:	
 11174  144E  1003               	clrc
 11175  144F  0DA1               	rlf	___bmul@multiplicand,f
 11176  1450  1003               	clrc
 11177  1451  0CA4               	rrf	___bmul@multiplier,f
 11178  1452  0824               	movf	___bmul@multiplier,w
 11179  1453  1D03               	btfss	3,2
 11180  1454  2C48               	goto	l5215
 11181  1455  0823               	movf	___bmul@product,w
 11182  1456  0008               	return
 11183  1457                     __end_of___bmul:	
 11184                           
 11185                           	psect	text58
 11186  0CE7                     __ptext58:	
 11187 ;; *************** function _I2C_Read_Buffer *****************
 11188 ;; Defined at:
 11189 ;;		line 120 in file "mcc_generated_files/i2c.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;  ADD             1    wreg     unsigned char 
 11192 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 11193 ;;		 -> Bq32k_Rtc_Read_Time@temp(10), 
 11194 ;;  Length          1    5[BANK0 ] unsigned char 
 11195 ;; Auto vars:     Size  Location     Type
 11196 ;;  ADD             1    7[BANK0 ] unsigned char 
 11197 ;;  Flag            1    8[BANK0 ] unsigned char 
 11198 ;; Return value:  Size  Location     Type
 11199 ;;                  1    wreg      unsigned char 
 11200 ;; Registers used:
 11201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11202 ;; Tracked objects:
 11203 ;;		On entry : 0/0
 11204 ;;		On exit  : 0/0
 11205 ;;		Unchanged: 0/0
 11206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11207 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11208 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;Total ram usage:        5 bytes
 11212 ;; Hardware stack levels used:    1
 11213 ;; Hardware stack levels required when called:    4
 11214 ;; This function calls:
 11215 ;;		_I2C_Receive_Byte
 11216 ;;		_I2C_Send_Byte
 11217 ;;		_I2C_Start
 11218 ;;		_I2C_Stop
 11219 ;; This function is called by:
 11220 ;;		_Bq32k_Rtc_Read_Time
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           
 11225                           ;psect for function _I2C_Read_Buffer
 11226  0CE7                     _I2C_Read_Buffer:	
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in _I2C_Read_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11230                           ;I2C_Read_Buffer@ADD stored from wreg
 11231  0CE7  0020               	movlb	0	; select bank0
 11232  0CE8  00A7               	movwf	I2C_Read_Buffer@ADD
 11233                           
 11234                           ;i2c.c: 122: unsigned char Flag=1;
 11235  0CE9  01A8               	clrf	I2C_Read_Buffer@Flag
 11236  0CEA  0AA8               	incf	I2C_Read_Buffer@Flag,f
 11237                           
 11238                           ;i2c.c: 124: I2C_Start();
 11239  0CEB  3195  254C  318C   	fcall	_I2C_Start
 11240                           
 11241                           ;i2c.c: 126: Flag=I2C_Send_Byte(0XD0);
 11242  0CEE  30D0               	movlw	208
 11243  0CEF  318A  22ED  318C   	fcall	_I2C_Send_Byte
 11244  0CF2  0020               	movlb	0	; select bank0
 11245  0CF3  00A6               	movwf	??_I2C_Read_Buffer
 11246  0CF4  0826               	movf	??_I2C_Read_Buffer,w
 11247  0CF5  00A8               	movwf	I2C_Read_Buffer@Flag
 11248                           
 11249                           ;i2c.c: 127: if(Flag)
 11250  0CF6  0828               	movf	I2C_Read_Buffer@Flag,w
 11251  0CF7  1D03               	btfss	3,2
 11252  0CF8  0008               	return
 11253                           
 11254                           ;i2c.c: 130: Flag=I2C_Send_Byte(ADD);
 11255                           
 11256                           ;i2c.c: 128: return 0x01;
 11257                           ;	Return value of _I2C_Read_Buffer is never used
 11258  0CF9  0827               	movf	I2C_Read_Buffer@ADD,w
 11259  0CFA  318A  22ED  318C   	fcall	_I2C_Send_Byte
 11260  0CFD  0020               	movlb	0	; select bank0
 11261  0CFE  00A6               	movwf	??_I2C_Read_Buffer
 11262  0CFF  0826               	movf	??_I2C_Read_Buffer,w
 11263  0D00  00A8               	movwf	I2C_Read_Buffer@Flag
 11264                           
 11265                           ;i2c.c: 131: if(Flag)
 11266  0D01  0828               	movf	I2C_Read_Buffer@Flag,w
 11267  0D02  1D03               	btfss	3,2
 11268  0D03  0008               	return
 11269                           
 11270                           ;i2c.c: 134: I2C_Start();
 11271                           
 11272                           ;i2c.c: 132: return 0x01;
 11273                           ;	Return value of _I2C_Read_Buffer is never used
 11274  0D04  3195  254C  318C   	fcall	_I2C_Start
 11275                           
 11276                           ;i2c.c: 135: Flag=I2C_Send_Byte(0XD0+1);
 11277  0D07  30D1               	movlw	209
 11278  0D08  318A  22ED  318C   	fcall	_I2C_Send_Byte
 11279  0D0B  0020               	movlb	0	; select bank0
 11280  0D0C  00A6               	movwf	??_I2C_Read_Buffer
 11281  0D0D  0826               	movf	??_I2C_Read_Buffer,w
 11282  0D0E  00A8               	movwf	I2C_Read_Buffer@Flag
 11283                           
 11284                           ;i2c.c: 136: if(Flag)
 11285  0D0F  0828               	movf	I2C_Read_Buffer@Flag,w
 11286  0D10  1D03               	btfss	3,2
 11287  0D11  0008               	return
 11288  0D12                     l5343:	
 11289  0D12  3002               	movlw	2
 11290  0D13  0225               	subwf	I2C_Read_Buffer@Length,w
 11291  0D14  1C03               	btfss	3,0
 11292  0D15  2D3D               	goto	l5345
 11293                           
 11294                           ;i2c.c: 140: {
 11295                           ;i2c.c: 141: *buff = I2C_Receive_Byte();
 11296                           
 11297                           ;i2c.c: 139: while(Length>1)
 11298                           
 11299                           ;i2c.c: 137: return 0x01;
 11300                           ;	Return value of _I2C_Read_Buffer is never used
 11301  0D16  3197  279F  318C   	fcall	_I2C_Receive_Byte
 11302  0D19  0020               	movlb	0	; select bank0
 11303  0D1A  00A6               	movwf	??_I2C_Read_Buffer
 11304  0D1B  0824               	movf	I2C_Read_Buffer@buff,w
 11305  0D1C  0086               	movwf	6
 11306  0D1D  0187               	clrf	7
 11307  0D1E  0826               	movf	??_I2C_Read_Buffer,w
 11308  0D1F  0081               	movwf	1
 11309                           
 11310                           ;i2c.c: 143: do { LATB1 = 0; } while(0);
 11311  0D20  0022               	movlb	2	; select bank2
 11312  0D21  108D               	bcf	13,1	;volatile
 11313                           
 11314                           ;i2c.c: 144: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11315  0D22  3003               	movlw	3
 11316  0D23  0020               	movlb	0	; select bank0
 11317  0D24  00A6               	movwf	??_I2C_Read_Buffer
 11318  0D25                     u6387:	
 11319  0D25  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11320  0D26  2D25               	goto	u6387
 11321                           
 11322                           ;i2c.c: 145: do { LATB0 = 1; } while(0);
 11323  0D27  0022               	movlb	2	; select bank2
 11324  0D28  140D               	bsf	13,0	;volatile
 11325                           
 11326                           ;i2c.c: 146: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11327  0D29  3003               	movlw	3
 11328  0D2A  0020               	movlb	0	; select bank0
 11329  0D2B  00A6               	movwf	??_I2C_Read_Buffer
 11330  0D2C                     u6397:	
 11331  0D2C  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11332  0D2D  2D2C               	goto	u6397
 11333                           
 11334                           ;i2c.c: 147: do { LATB0 = 0; } while(0);
 11335  0D2E  0022               	movlb	2	; select bank2
 11336  0D2F  100D               	bcf	13,0	;volatile
 11337                           
 11338                           ;i2c.c: 148: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11339  0D30  3003               	movlw	3
 11340  0D31  0020               	movlb	0	; select bank0
 11341  0D32  00A6               	movwf	??_I2C_Read_Buffer
 11342  0D33                     u6407:	
 11343  0D33  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11344  0D34  2D33               	goto	u6407
 11345                           
 11346                           ;i2c.c: 150: buff++;
 11347  0D35  3001               	movlw	1
 11348  0D36  0020               	movlb	0	; select bank0
 11349  0D37  00A6               	movwf	??_I2C_Read_Buffer
 11350  0D38  0826               	movf	??_I2C_Read_Buffer,w
 11351  0D39  07A4               	addwf	I2C_Read_Buffer@buff,f
 11352                           
 11353                           ;i2c.c: 151: Length--;
 11354  0D3A  3001               	movlw	1
 11355  0D3B  02A5               	subwf	I2C_Read_Buffer@Length,f
 11356  0D3C  2D12               	goto	l5343
 11357  0D3D                     l5345:	
 11358                           
 11359                           ;i2c.c: 152: }
 11360                           ;i2c.c: 153: *buff = I2C_Receive_Byte();
 11361  0D3D  3197  279F  318C   	fcall	_I2C_Receive_Byte
 11362  0D40  0020               	movlb	0	; select bank0
 11363  0D41  00A6               	movwf	??_I2C_Read_Buffer
 11364  0D42  0824               	movf	I2C_Read_Buffer@buff,w
 11365  0D43  0086               	movwf	6
 11366  0D44  0187               	clrf	7
 11367  0D45  0826               	movf	??_I2C_Read_Buffer,w
 11368  0D46  0081               	movwf	1
 11369                           
 11370                           ;i2c.c: 155: do { LATB1 = 1; } while(0);
 11371  0D47  0022               	movlb	2	; select bank2
 11372  0D48  148D               	bsf	13,1	;volatile
 11373                           
 11374                           ;i2c.c: 156: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11375  0D49  3003               	movlw	3
 11376  0D4A  0020               	movlb	0	; select bank0
 11377  0D4B  00A6               	movwf	??_I2C_Read_Buffer
 11378  0D4C                     u6417:	
 11379  0D4C  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11380  0D4D  2D4C               	goto	u6417
 11381                           
 11382                           ;i2c.c: 157: do { LATB0 = 1; } while(0);
 11383  0D4E  0022               	movlb	2	; select bank2
 11384  0D4F  140D               	bsf	13,0	;volatile
 11385                           
 11386                           ;i2c.c: 158: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11387  0D50  3003               	movlw	3
 11388  0D51  0020               	movlb	0	; select bank0
 11389  0D52  00A6               	movwf	??_I2C_Read_Buffer
 11390  0D53                     u6427:	
 11391  0D53  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11392  0D54  2D53               	goto	u6427
 11393                           
 11394                           ;i2c.c: 159: do { LATB0 = 0; } while(0);
 11395  0D55  0022               	movlb	2	; select bank2
 11396  0D56  100D               	bcf	13,0	;volatile
 11397                           
 11398                           ;i2c.c: 160: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11399  0D57  3003               	movlw	3
 11400  0D58  0020               	movlb	0	; select bank0
 11401  0D59  00A6               	movwf	??_I2C_Read_Buffer
 11402  0D5A                     u6437:	
 11403  0D5A  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11404  0D5B  2D5A               	goto	u6437
 11405                           
 11406                           ;i2c.c: 162: I2C_Stop();
 11407  0D5C  3195  2569         	fcall	_I2C_Stop
 11408  0D5E  0008               	return
 11409  0D5F                     __end_of_I2C_Read_Buffer:	
 11410                           ;i2c.c: 164: return 0x00;
 11411                           ;	Return value of _I2C_Read_Buffer is never used
 11412                           
 11413                           
 11414                           	psect	text59
 11415  1569                     __ptext59:	
 11416 ;; *************** function _I2C_Stop *****************
 11417 ;; Defined at:
 11418 ;;		line 102 in file "mcc_generated_files/i2c.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;		None
 11421 ;; Auto vars:     Size  Location     Type
 11422 ;;		None
 11423 ;; Return value:  Size  Location     Type
 11424 ;;                  1    wreg      void 
 11425 ;; Registers used:
 11426 ;;		wreg
 11427 ;; Tracked objects:
 11428 ;;		On entry : 0/0
 11429 ;;		On exit  : 0/0
 11430 ;;		Unchanged: 0/0
 11431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;Total ram usage:        1 bytes
 11437 ;; Hardware stack levels used:    1
 11438 ;; Hardware stack levels required when called:    3
 11439 ;; This function calls:
 11440 ;;		Nothing
 11441 ;; This function is called by:
 11442 ;;		_I2C_Read_Buffer
 11443 ;;		_I2C_Send_Buffer
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           
 11448                           ;psect for function _I2C_Stop
 11449  1569                     _I2C_Stop:	
 11450                           
 11451                           ;incstack = 0
 11452                           ; Regs used in _I2C_Stop: [wreg]
 11453                           ;i2c.c: 104: do { LATB0 = 0; } while(0);
 11454  1569  0022               	movlb	2	; select bank2
 11455  156A  100D               	bcf	13,0	;volatile
 11456                           
 11457                           ;i2c.c: 105: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11458  156B  3003               	movlw	3
 11459  156C  0020               	movlb	0	; select bank0
 11460  156D  00A1               	movwf	??_I2C_Stop
 11461  156E                     u6447:	
 11462  156E  0BA1               	decfsz	??_I2C_Stop,f
 11463  156F  2D6E               	goto	u6447
 11464                           
 11465                           ;i2c.c: 106: do { LATB1 = 0; } while(0);
 11466  1570  0022               	movlb	2	; select bank2
 11467  1571  108D               	bcf	13,1	;volatile
 11468                           
 11469                           ;i2c.c: 107: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11470  1572  3003               	movlw	3
 11471  1573  0020               	movlb	0	; select bank0
 11472  1574  00A1               	movwf	??_I2C_Stop
 11473  1575                     u6457:	
 11474  1575  0BA1               	decfsz	??_I2C_Stop,f
 11475  1576  2D75               	goto	u6457
 11476                           
 11477                           ;i2c.c: 108: do { LATB0 = 1; } while(0);
 11478  1577  0022               	movlb	2	; select bank2
 11479  1578  140D               	bsf	13,0	;volatile
 11480                           
 11481                           ;i2c.c: 109: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11482  1579  3003               	movlw	3
 11483  157A  0020               	movlb	0	; select bank0
 11484  157B  00A1               	movwf	??_I2C_Stop
 11485  157C                     u6467:	
 11486  157C  0BA1               	decfsz	??_I2C_Stop,f
 11487  157D  2D7C               	goto	u6467
 11488                           
 11489                           ;i2c.c: 110: do { LATB1 = 1; } while(0);
 11490  157E  0022               	movlb	2	; select bank2
 11491  157F  148D               	bsf	13,1	;volatile
 11492                           
 11493                           ;i2c.c: 111: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11494  1580  3003               	movlw	3
 11495  1581  0020               	movlb	0	; select bank0
 11496  1582  00A1               	movwf	??_I2C_Stop
 11497  1583                     u6477:	
 11498  1583  0BA1               	decfsz	??_I2C_Stop,f
 11499  1584  2D83               	goto	u6477
 11500  1585  0008               	return
 11501  1586                     __end_of_I2C_Stop:	
 11502                           
 11503                           	psect	text60
 11504  154C                     __ptext60:	
 11505 ;; *************** function _I2C_Start *****************
 11506 ;; Defined at:
 11507 ;;		line 16 in file "mcc_generated_files/i2c.c"
 11508 ;; Parameters:    Size  Location     Type
 11509 ;;		None
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;		None
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  1    wreg      void 
 11514 ;; Registers used:
 11515 ;;		wreg
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;Total ram usage:        1 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:    3
 11528 ;; This function calls:
 11529 ;;		Nothing
 11530 ;; This function is called by:
 11531 ;;		_I2C_Read_Buffer
 11532 ;;		_I2C_Send_Buffer
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           
 11537                           ;psect for function _I2C_Start
 11538  154C                     _I2C_Start:	
 11539                           
 11540                           ;incstack = 0
 11541                           ; Regs used in _I2C_Start: [wreg]
 11542                           ;i2c.c: 18: do { LATB1 = 1; } while(0);
 11543  154C  0022               	movlb	2	; select bank2
 11544  154D  148D               	bsf	13,1	;volatile
 11545                           
 11546                           ;i2c.c: 19: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11547  154E  3003               	movlw	3
 11548  154F  0020               	movlb	0	; select bank0
 11549  1550  00A1               	movwf	??_I2C_Start
 11550  1551                     u6487:	
 11551  1551  0BA1               	decfsz	??_I2C_Start,f
 11552  1552  2D51               	goto	u6487
 11553                           
 11554                           ;i2c.c: 20: do { LATB0 = 1; } while(0);
 11555  1553  0022               	movlb	2	; select bank2
 11556  1554  140D               	bsf	13,0	;volatile
 11557                           
 11558                           ;i2c.c: 21: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11559  1555  3003               	movlw	3
 11560  1556  0020               	movlb	0	; select bank0
 11561  1557  00A1               	movwf	??_I2C_Start
 11562  1558                     u6497:	
 11563  1558  0BA1               	decfsz	??_I2C_Start,f
 11564  1559  2D58               	goto	u6497
 11565                           
 11566                           ;i2c.c: 22: do { LATB1 = 0; } while(0);
 11567  155A  0022               	movlb	2	; select bank2
 11568  155B  108D               	bcf	13,1	;volatile
 11569                           
 11570                           ;i2c.c: 23: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11571  155C  3003               	movlw	3
 11572  155D  0020               	movlb	0	; select bank0
 11573  155E  00A1               	movwf	??_I2C_Start
 11574  155F                     u6507:	
 11575  155F  0BA1               	decfsz	??_I2C_Start,f
 11576  1560  2D5F               	goto	u6507
 11577                           
 11578                           ;i2c.c: 24: do { LATB0 = 0; } while(0);
 11579  1561  0022               	movlb	2	; select bank2
 11580  1562  100D               	bcf	13,0	;volatile
 11581                           
 11582                           ;i2c.c: 25: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11583  1563  3003               	movlw	3
 11584  1564  0020               	movlb	0	; select bank0
 11585  1565  00A1               	movwf	??_I2C_Start
 11586  1566                     u6517:	
 11587  1566  0BA1               	decfsz	??_I2C_Start,f
 11588  1567  2D66               	goto	u6517
 11589  1568  0008               	return
 11590  1569                     __end_of_I2C_Start:	
 11591                           
 11592                           	psect	text61
 11593  0AED                     __ptext61:	
 11594 ;; *************** function _I2C_Send_Byte *****************
 11595 ;; Defined at:
 11596 ;;		line 34 in file "mcc_generated_files/i2c.c"
 11597 ;; Parameters:    Size  Location     Type
 11598 ;;  Data            1    wreg     unsigned char 
 11599 ;; Auto vars:     Size  Location     Type
 11600 ;;  Data            1    2[BANK0 ] unsigned char 
 11601 ;;  i               1    3[BANK0 ] unsigned char 
 11602 ;; Return value:  Size  Location     Type
 11603 ;;                  1    wreg      unsigned char 
 11604 ;; Registers used:
 11605 ;;		wreg, status,2, status,0
 11606 ;; Tracked objects:
 11607 ;;		On entry : 0/0
 11608 ;;		On exit  : 0/0
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11612 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;Total ram usage:        3 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; Hardware stack levels required when called:    3
 11618 ;; This function calls:
 11619 ;;		Nothing
 11620 ;; This function is called by:
 11621 ;;		_I2C_Read_Buffer
 11622 ;;		_I2C_Send_Buffer
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           
 11627                           ;psect for function _I2C_Send_Byte
 11628  0AED                     _I2C_Send_Byte:	
 11629                           
 11630                           ;incstack = 0
 11631                           ; Regs used in _I2C_Send_Byte: [wreg+status,2+status,0]
 11632                           ;I2C_Send_Byte@Data stored from wreg
 11633  0AED  0020               	movlb	0	; select bank0
 11634  0AEE  00A2               	movwf	I2C_Send_Byte@Data
 11635                           
 11636                           ;i2c.c: 36: unsigned char i;
 11637                           ;i2c.c: 37: for(i=0;i<8;i++)
 11638  0AEF  01A3               	clrf	I2C_Send_Byte@i
 11639  0AF0  3008               	movlw	8
 11640  0AF1  0223               	subwf	I2C_Send_Byte@i,w
 11641  0AF2  1803               	btfsc	3,0
 11642  0AF3  2B1A               	goto	l855
 11643  0AF4                     l843:	
 11644                           
 11645                           ;i2c.c: 38: {
 11646                           ;i2c.c: 39: if(Data&0x80)
 11647  0AF4  1FA2               	btfss	I2C_Send_Byte@Data,7
 11648  0AF5  2AF9               	goto	l849
 11649                           
 11650                           ;i2c.c: 40: do { LATB1 = 1; } while(0);
 11651  0AF6  0022               	movlb	2	; select bank2
 11652  0AF7  148D               	bsf	13,1	;volatile
 11653  0AF8  2AFB               	goto	l5151
 11654  0AF9                     l849:	
 11655                           ;i2c.c: 41: else
 11656                           ;i2c.c: 42: do { LATB1 = 0; } while(0);
 11657                           
 11658  0AF9  0022               	movlb	2	; select bank2
 11659  0AFA  108D               	bcf	13,1	;volatile
 11660  0AFB                     l5151:	
 11661                           
 11662                           ;i2c.c: 43: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11663  0AFB  3003               	movlw	3
 11664  0AFC  0020               	movlb	0	; select bank0
 11665  0AFD  00A1               	movwf	??_I2C_Send_Byte
 11666  0AFE                     u6527:	
 11667  0AFE  0BA1               	decfsz	??_I2C_Send_Byte,f
 11668  0AFF  2AFE               	goto	u6527
 11669                           
 11670                           ;i2c.c: 44: do { LATB0 = 1; } while(0);
 11671  0B00  0022               	movlb	2	; select bank2
 11672  0B01  140D               	bsf	13,0	;volatile
 11673                           
 11674                           ;i2c.c: 45: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11675  0B02  3003               	movlw	3
 11676  0B03  0020               	movlb	0	; select bank0
 11677  0B04  00A1               	movwf	??_I2C_Send_Byte
 11678  0B05                     u6537:	
 11679  0B05  0BA1               	decfsz	??_I2C_Send_Byte,f
 11680  0B06  2B05               	goto	u6537
 11681                           
 11682                           ;i2c.c: 46: Data<<=1;
 11683  0B07  1003               	clrc
 11684  0B08  0020               	movlb	0	; select bank0
 11685  0B09  0DA2               	rlf	I2C_Send_Byte@Data,f
 11686                           
 11687                           ;i2c.c: 47: do { LATB0 = 0; } while(0);
 11688  0B0A  0022               	movlb	2	; select bank2
 11689  0B0B  100D               	bcf	13,0	;volatile
 11690                           
 11691                           ;i2c.c: 48: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11692  0B0C  3003               	movlw	3
 11693  0B0D  0020               	movlb	0	; select bank0
 11694  0B0E  00A1               	movwf	??_I2C_Send_Byte
 11695  0B0F                     u6547:	
 11696  0B0F  0BA1               	decfsz	??_I2C_Send_Byte,f
 11697  0B10  2B0F               	goto	u6547
 11698  0B11  3001               	movlw	1
 11699  0B12  0020               	movlb	0	; select bank0
 11700  0B13  00A1               	movwf	??_I2C_Send_Byte
 11701  0B14  0821               	movf	??_I2C_Send_Byte,w
 11702  0B15  07A3               	addwf	I2C_Send_Byte@i,f
 11703  0B16  3008               	movlw	8
 11704  0B17  0223               	subwf	I2C_Send_Byte@i,w
 11705  0B18  1C03               	skipc
 11706  0B19  2AF4               	goto	l843
 11707  0B1A                     l855:	
 11708                           ;i2c.c: 49: }
 11709                           ;i2c.c: 50: do { LATB1 = 1; } while(0);
 11710                           
 11711  0B1A  0022               	movlb	2	; select bank2
 11712  0B1B  148D               	bsf	13,1	;volatile
 11713                           
 11714                           ;i2c.c: 51: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11715  0B1C  3003               	movlw	3
 11716  0B1D  0020               	movlb	0	; select bank0
 11717  0B1E  00A1               	movwf	??_I2C_Send_Byte
 11718  0B1F                     u6557:	
 11719  0B1F  0BA1               	decfsz	??_I2C_Send_Byte,f
 11720  0B20  2B1F               	goto	u6557
 11721                           
 11722                           ;i2c.c: 52: do { LATB0 = 1; } while(0);
 11723  0B21  0022               	movlb	2	; select bank2
 11724  0B22  140D               	bsf	13,0	;volatile
 11725                           
 11726                           ;i2c.c: 53: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11727  0B23  3003               	movlw	3
 11728  0B24  0020               	movlb	0	; select bank0
 11729  0B25  00A1               	movwf	??_I2C_Send_Byte
 11730  0B26                     u6567:	
 11731  0B26  0BA1               	decfsz	??_I2C_Send_Byte,f
 11732  0B27  2B26               	goto	u6567
 11733                           
 11734                           ;i2c.c: 54: do { TRISB1 = 1; } while(0);
 11735  0B28  0021               	movlb	1	; select bank1
 11736  0B29  148D               	bsf	13,1	;volatile
 11737                           
 11738                           ;i2c.c: 55: if(RB1)
 11739  0B2A  0020               	movlb	0	; select bank0
 11740  0B2B  1C8D               	btfss	13,1	;volatile
 11741  0B2C  2B31               	goto	l865
 11742                           
 11743                           ;i2c.c: 56: {
 11744                           ;i2c.c: 57: do { TRISB1 = 0; } while(0);
 11745  0B2D  0021               	movlb	1	; select bank1
 11746  0B2E  108D               	bcf	13,1	;volatile
 11747                           
 11748                           ;i2c.c: 58: return 0x01;
 11749  0B2F  3001               	movlw	1
 11750  0B30  0008               	return
 11751  0B31                     l865:	
 11752                           ;i2c.c: 59: }
 11753                           ;i2c.c: 60: do { TRISB1 = 0; } while(0);
 11754                           
 11755  0B31  0021               	movlb	1	; select bank1
 11756  0B32  108D               	bcf	13,1	;volatile
 11757                           
 11758                           ;i2c.c: 61: do { LATB0 = 0; } while(0);
 11759  0B33  0022               	movlb	2	; select bank2
 11760  0B34  100D               	bcf	13,0	;volatile
 11761                           
 11762                           ;i2c.c: 62: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11763  0B35  3003               	movlw	3
 11764  0B36  0020               	movlb	0	; select bank0
 11765  0B37  00A1               	movwf	??_I2C_Send_Byte
 11766  0B38                     u6577:	
 11767  0B38  0BA1               	decfsz	??_I2C_Send_Byte,f
 11768  0B39  2B38               	goto	u6577
 11769                           
 11770                           ;i2c.c: 63: do { LATB1 = 0; } while(0);
 11771  0B3A  0022               	movlb	2	; select bank2
 11772  0B3B  108D               	bcf	13,1	;volatile
 11773                           
 11774                           ;i2c.c: 64: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11775  0B3C  3003               	movlw	3
 11776  0B3D  0020               	movlb	0	; select bank0
 11777  0B3E  00A1               	movwf	??_I2C_Send_Byte
 11778  0B3F                     u6587:	
 11779  0B3F  0BA1               	decfsz	??_I2C_Send_Byte,f
 11780  0B40  2B3F               	goto	u6587
 11781                           
 11782                           ;i2c.c: 65: return 0x00;
 11783  0B41  3000               	movlw	0
 11784  0B42  0008               	return
 11785  0B43                     __end_of_I2C_Send_Byte:	
 11786                           
 11787                           	psect	text62
 11788  179F                     __ptext62:	
 11789 ;; *************** function _I2C_Receive_Byte *****************
 11790 ;; Defined at:
 11791 ;;		line 74 in file "mcc_generated_files/i2c.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;		None
 11794 ;; Auto vars:     Size  Location     Type
 11795 ;;  i               1    3[BANK0 ] unsigned char 
 11796 ;;  Data            1    2[BANK0 ] unsigned char 
 11797 ;; Return value:  Size  Location     Type
 11798 ;;                  1    wreg      unsigned char 
 11799 ;; Registers used:
 11800 ;;		wreg, status,2, status,0
 11801 ;; Tracked objects:
 11802 ;;		On entry : 0/0
 11803 ;;		On exit  : 0/0
 11804 ;;		Unchanged: 0/0
 11805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;Total ram usage:        3 bytes
 11811 ;; Hardware stack levels used:    1
 11812 ;; Hardware stack levels required when called:    3
 11813 ;; This function calls:
 11814 ;;		Nothing
 11815 ;; This function is called by:
 11816 ;;		_I2C_Read_Buffer
 11817 ;; This function uses a non-reentrant model
 11818 ;;
 11819                           
 11820                           
 11821                           ;psect for function _I2C_Receive_Byte
 11822  179F                     _I2C_Receive_Byte:	
 11823                           
 11824                           ;i2c.c: 76: unsigned char i,Data=0;
 11825                           
 11826                           ;incstack = 0
 11827                           ; Regs used in _I2C_Receive_Byte: [wreg+status,2+status,0]
 11828  179F  0020               	movlb	0	; select bank0
 11829  17A0  01A2               	clrf	I2C_Receive_Byte@Data
 11830                           
 11831                           ;i2c.c: 77: do { LATB1 = 1; } while(0);
 11832  17A1  0022               	movlb	2	; select bank2
 11833  17A2  148D               	bsf	13,1	;volatile
 11834                           
 11835                           ;i2c.c: 78: for(i=0;i<8;i++)
 11836  17A3  0020               	movlb	0	; select bank0
 11837  17A4  01A3               	clrf	I2C_Receive_Byte@i
 11838  17A5  3008               	movlw	8
 11839  17A6  0223               	subwf	I2C_Receive_Byte@i,w
 11840  17A7  1803               	btfsc	3,0
 11841  17A8  2FCD               	goto	l5201
 11842                           
 11843                           ;i2c.c: 79: {
 11844                           ;i2c.c: 80: Data <<= 1;
 11845  17A9  1003               	clrc
 11846  17AA                     L16:	
 11847  17AA  0DA2               	rlf	I2C_Receive_Byte@Data,f
 11848                           
 11849                           ;i2c.c: 81: do { LATB0 = 1; } while(0);
 11850  17AB  0022               	movlb	2	; select bank2
 11851  17AC  140D               	bsf	13,0	;volatile
 11852                           
 11853                           ;i2c.c: 82: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11854  17AD  3003               	movlw	3
 11855  17AE  0020               	movlb	0	; select bank0
 11856  17AF  00A1               	movwf	??_I2C_Receive_Byte
 11857  17B0                     u6597:	
 11858  17B0  0BA1               	decfsz	??_I2C_Receive_Byte,f
 11859  17B1  2FB0               	goto	u6597
 11860                           
 11861                           ;i2c.c: 83: do { TRISB1 = 1; } while(0);
 11862  17B2  0021               	movlb	1	; select bank1
 11863  17B3  148D               	bsf	13,1	;volatile
 11864                           
 11865                           ;i2c.c: 84: if(RB1)
 11866  17B4  0020               	movlb	0	; select bank0
 11867  17B5  1C8D               	btfss	13,1	;volatile
 11868  17B6  2FBB               	goto	l884
 11869                           
 11870                           ;i2c.c: 85: {
 11871                           ;i2c.c: 86: do { TRISB1 = 0; } while(0);
 11872  17B7  0021               	movlb	1	; select bank1
 11873  17B8  108D               	bcf	13,1	;volatile
 11874                           
 11875                           ;i2c.c: 87: Data |= 0x01;
 11876  17B9  0020               	movlb	0	; select bank0
 11877  17BA  1422               	bsf	I2C_Receive_Byte@Data,0
 11878  17BB                     l884:	
 11879                           ;i2c.c: 88: }
 11880                           ;i2c.c: 89: do { TRISB1 = 0; } while(0);
 11881                           
 11882  17BB  0021               	movlb	1	; select bank1
 11883  17BC  108D               	bcf	13,1	;volatile
 11884                           
 11885                           ;i2c.c: 90: do { LATB0 = 0; } while(0);
 11886  17BD  0022               	movlb	2	; select bank2
 11887  17BE  100D               	bcf	13,0	;volatile
 11888                           
 11889                           ;i2c.c: 91: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11890  17BF  3003               	movlw	3
 11891  17C0  0020               	movlb	0	; select bank0
 11892  17C1  00A1               	movwf	??_I2C_Receive_Byte
 11893  17C2                     u6607:	
 11894  17C2  0BA1               	decfsz	??_I2C_Receive_Byte,f
 11895  17C3  2FC2               	goto	u6607
 11896  17C4  3001               	movlw	1
 11897  17C5  0020               	movlb	0	; select bank0
 11898  17C6  00A1               	movwf	??_I2C_Receive_Byte
 11899  17C7  0821               	movf	??_I2C_Receive_Byte,w
 11900  17C8  07A3               	addwf	I2C_Receive_Byte@i,f
 11901  17C9  3008               	movlw	8
 11902  17CA  0223               	subwf	I2C_Receive_Byte@i,w
 11903  17CB  1C03               	skipc
 11904  17CC  2FAA               	goto	L16
 11905  17CD                     l5201:	
 11906                           
 11907                           ;i2c.c: 92: }
 11908                           ;i2c.c: 93: return Data;
 11909  17CD  0822               	movf	I2C_Receive_Byte@Data,w
 11910  17CE  0008               	return
 11911  17CF                     __end_of_I2C_Receive_Byte:	
 11912                           
 11913                           	psect	text63
 11914  040A                     __ptext63:	
 11915 ;; *************** function _Inf_to_Com *****************
 11916 ;; Defined at:
 11917 ;;		line 91 in file "mcc_generated_files/com.c"
 11918 ;; Parameters:    Size  Location     Type
 11919 ;;		None
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;  tmp_buf        72    0[BANK1 ] unsigned char [72]
 11922 ;;  crc_tmp         2   74[BANK1 ] unsigned int 
 11923 ;;  add_tmp         2   72[BANK1 ] unsigned int 
 11924 ;;  count_tmp       1   77[BANK1 ] unsigned char 
 11925 ;;  i               1   76[BANK1 ] unsigned char 
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  1    wreg      void 
 11928 ;; Registers used:
 11929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Locals:         0       0      78       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;      Totals:         0       5      78       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;Total ram usage:       83 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:    5
 11942 ;; This function calls:
 11943 ;;		_CRC_cal
 11944 ;;		_EUSART_Write
 11945 ;;		_FLASH_readBlock
 11946 ;; This function is called by:
 11947 ;;		_Com_Process
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           
 11952                           ;psect for function _Inf_to_Com
 11953  040A                     _Inf_to_Com:	
 11954                           
 11955                           ;com.c: 93: unsigned int add_tmp=0;
 11956                           
 11957                           ;incstack = 0
 11958                           ; Regs used in _Inf_to_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11959  040A  0021               	movlb	1	; select bank1
 11960  040B  01E8               	clrf	Inf_to_Com@add_tmp^(0+128)
 11961  040C  01E9               	clrf	(Inf_to_Com@add_tmp+1)^(0+128)
 11962                           
 11963                           ;com.c: 94: unsigned char count_tmp = 0;
 11964  040D  01ED               	clrf	Inf_to_Com@count_tmp^(0+128)
 11965                           
 11966                           ;com.c: 95: unsigned int crc_tmp=0;
 11967  040E  01EA               	clrf	Inf_to_Com@crc_tmp^(0+128)
 11968  040F  01EB               	clrf	(Inf_to_Com@crc_tmp+1)^(0+128)
 11969                           
 11970                           ;com.c: 96: unsigned char tmp_buf[72];
 11971                           ;com.c: 97: unsigned char i=0;
 11972  0410  01EC               	clrf	Inf_to_Com@i^(0+128)
 11973                           
 11974                           ;com.c: 98: add_tmp = (Usart_Rx_Buff[4]<<8) | Usart_Rx_Buff[5];
 11975  0411  0023               	movlb	3	; select bank3
 11976  0412  0839               	movf	(_Usart_Rx_Buff^(0+384)+5),w
 11977  0413  0020               	movlb	0	; select bank0
 11978  0414  00AB               	movwf	??_Inf_to_Com
 11979  0415  01AC               	clrf	??_Inf_to_Com+1
 11980  0416  0023               	movlb	3	; select bank3
 11981  0417  0838               	movf	(_Usart_Rx_Buff^(0+384)+4),w
 11982  0418  0020               	movlb	0	; select bank0
 11983  0419  00AD               	movwf	??_Inf_to_Com+2
 11984  041A  01AE               	clrf	??_Inf_to_Com+3
 11985  041B  082D               	movf	??_Inf_to_Com+2,w
 11986  041C  00AE               	movwf	??_Inf_to_Com+3
 11987  041D  01AD               	clrf	??_Inf_to_Com+2
 11988  041E  082B               	movf	??_Inf_to_Com,w
 11989  041F  042D               	iorwf	??_Inf_to_Com+2,w
 11990  0420  0021               	movlb	1	; select bank1
 11991  0421  00E8               	movwf	Inf_to_Com@add_tmp^(0+128)
 11992  0422  0020               	movlb	0	; select bank0
 11993  0423  082C               	movf	??_Inf_to_Com+1,w
 11994  0424  042E               	iorwf	??_Inf_to_Com+3,w
 11995  0425  0021               	movlb	1	; select bank1
 11996  0426  00E9               	movwf	(Inf_to_Com@add_tmp+1)^(0+128)
 11997                           
 11998                           ;com.c: 99: count_tmp = Usart_Rx_Buff[6];
 11999  0427  0023               	movlb	3	; select bank3
 12000  0428  083A               	movf	(_Usart_Rx_Buff^(0+384)+6),w
 12001  0429  0020               	movlb	0	; select bank0
 12002  042A  00AB               	movwf	??_Inf_to_Com
 12003  042B  082B               	movf	??_Inf_to_Com,w
 12004  042C  0021               	movlb	1	; select bank1
 12005  042D  00ED               	movwf	Inf_to_Com@count_tmp^(0+128)
 12006                           
 12007                           ;com.c: 100: FLASH_readBlock(Flash_buff, add_tmp, count_tmp);
 12008  042E  0869               	movf	(Inf_to_Com@add_tmp+1)^(0+128),w
 12009  042F  0020               	movlb	0	; select bank0
 12010  0430  00A5               	movwf	FLASH_readBlock@address+1
 12011  0431  0021               	movlb	1	; select bank1
 12012  0432  0868               	movf	Inf_to_Com@add_tmp^(0+128),w
 12013  0433  0020               	movlb	0	; select bank0
 12014  0434  00A4               	movwf	FLASH_readBlock@address
 12015  0435  0021               	movlb	1	; select bank1
 12016  0436  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12017  0437  0020               	movlb	0	; select bank0
 12018  0438  00AB               	movwf	??_Inf_to_Com
 12019  0439  082B               	movf	??_Inf_to_Com,w
 12020  043A  00A6               	movwf	FLASH_readBlock@count
 12021  043B  3020               	movlw	(low (_Flash_buff| (0+512)))& (0+255)
 12022  043C  3195  25E3  3184   	fcall	_FLASH_readBlock
 12023                           
 12024                           ;com.c: 101: tmp_buf[0] = 0xfe;
 12025  043F  30FE               	movlw	254
 12026  0440  0020               	movlb	0	; select bank0
 12027  0441  00AB               	movwf	??_Inf_to_Com
 12028  0442  082B               	movf	??_Inf_to_Com,w
 12029  0443  0021               	movlb	1	; select bank1
 12030  0444  00A0               	movwf	Inf_to_Com@tmp_buf^(0+128)
 12031                           
 12032                           ;com.c: 102: tmp_buf[1] = 0xfe;
 12033  0445  30FE               	movlw	254
 12034  0446  0020               	movlb	0	; select bank0
 12035  0447  00AB               	movwf	??_Inf_to_Com
 12036  0448  082B               	movf	??_Inf_to_Com,w
 12037  0449  0021               	movlb	1	; select bank1
 12038  044A  00A1               	movwf	(Inf_to_Com@tmp_buf^(0+128)+1)
 12039                           
 12040                           ;com.c: 103: tmp_buf[2] = 0x01;
 12041  044B  01A2               	clrf	(Inf_to_Com@tmp_buf^(0+128)+2)
 12042  044C  0AA2               	incf	(Inf_to_Com@tmp_buf^(0+128)+2),f
 12043                           
 12044                           ;com.c: 104: tmp_buf[3] = count_tmp;
 12045  044D  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12046  044E  0020               	movlb	0	; select bank0
 12047  044F  00AB               	movwf	??_Inf_to_Com
 12048  0450  082B               	movf	??_Inf_to_Com,w
 12049  0451  0021               	movlb	1	; select bank1
 12050  0452  00A3               	movwf	(Inf_to_Com@tmp_buf^(0+128)+3)
 12051                           
 12052                           ;com.c: 105: for(i=0;i<count_tmp;i++)
 12053  0453  01EC               	clrf	Inf_to_Com@i^(0+128)
 12054  0454                     l6291:	
 12055  0454  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12056  0455  026C               	subwf	Inf_to_Com@i^(0+128),w
 12057  0456  1803               	btfsc	3,0
 12058  0457  2C85               	goto	l6293
 12059                           
 12060                           ;com.c: 106: {
 12061                           ;com.c: 107: tmp_buf[4+i*2] = Flash_buff[i] >> 8 ;
 12062  0458  356C               	lslf	Inf_to_Com@i^(0+128),w
 12063  0459  3E20               	addlw	(low (_Flash_buff| (0+512)))& (0+255)
 12064  045A  0086               	movwf	6
 12065  045B  3002               	movlw	2	; select bank4/5
 12066  045C  0087               	movwf	7
 12067  045D  3F40               	moviw [0]fsr1
 12068  045E  0020               	movlb	0	; select bank0
 12069  045F  00AB               	movwf	??_Inf_to_Com
 12070  0460  3F41               	moviw [1]fsr1
 12071  0461  00AC               	movwf	??_Inf_to_Com+1
 12072  0462  082C               	movf	??_Inf_to_Com+1,w
 12073  0463  00AD               	movwf	??_Inf_to_Com+2
 12074  0464  0021               	movlb	1	; select bank1
 12075  0465  356C               	lslf	Inf_to_Com@i^(0+128),w
 12076  0466  3E04               	addlw	4
 12077  0467  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12078  0468  0086               	movwf	6
 12079  0469  0187               	clrf	7
 12080  046A  0020               	movlb	0	; select bank0
 12081  046B  082D               	movf	??_Inf_to_Com+2,w
 12082  046C  0081               	movwf	1
 12083                           
 12084                           ;com.c: 108: tmp_buf[5+i*2] = Flash_buff[i] & 0xff ;
 12085  046D  0021               	movlb	1	; select bank1
 12086  046E  356C               	lslf	Inf_to_Com@i^(0+128),w
 12087  046F  3E20               	addlw	(low (_Flash_buff| (0+512)))& (0+255)
 12088  0470  0086               	movwf	6
 12089  0471  3002               	movlw	2	; select bank4/5
 12090  0472  0087               	movwf	7
 12091  0473  0801               	movf	1,w
 12092  0474  0020               	movlb	0	; select bank0
 12093  0475  00AB               	movwf	??_Inf_to_Com
 12094  0476  0021               	movlb	1	; select bank1
 12095  0477  356C               	lslf	Inf_to_Com@i^(0+128),w
 12096  0478  3E05               	addlw	5
 12097  0479  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12098  047A  0086               	movwf	6
 12099  047B  0187               	clrf	7
 12100  047C  0020               	movlb	0	; select bank0
 12101  047D  082B               	movf	??_Inf_to_Com,w
 12102  047E  0081               	movwf	1
 12103  047F  3001               	movlw	1
 12104  0480  00AB               	movwf	??_Inf_to_Com
 12105  0481  082B               	movf	??_Inf_to_Com,w
 12106  0482  0021               	movlb	1	; select bank1
 12107  0483  07EC               	addwf	Inf_to_Com@i^(0+128),f
 12108  0484  2C54               	goto	l6291
 12109  0485                     l6293:	
 12110                           
 12111                           ;com.c: 109: }
 12112                           ;com.c: 110: crc_tmp = CRC_cal(tmp_buf,count_tmp+7);
 12113  0485  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12114  0486  3E07               	addlw	7
 12115  0487  0020               	movlb	0	; select bank0
 12116  0488  00AB               	movwf	??_Inf_to_Com
 12117  0489  082B               	movf	??_Inf_to_Com,w
 12118  048A  00A1               	movwf	CRC_cal@frame_len
 12119  048B  30A0               	movlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12120  048C  318D  255F  3184   	fcall	_CRC_cal
 12121  048F  0020               	movlb	0	; select bank0
 12122  0490  0822               	movf	?_CRC_cal+1,w
 12123  0491  0021               	movlb	1	; select bank1
 12124  0492  00EB               	movwf	(Inf_to_Com@crc_tmp+1)^(0+128)
 12125  0493  0020               	movlb	0	; select bank0
 12126  0494  0821               	movf	?_CRC_cal,w
 12127  0495  0021               	movlb	1	; select bank1
 12128  0496  00EA               	movwf	Inf_to_Com@crc_tmp^(0+128)
 12129                           
 12130                           ;com.c: 111: tmp_buf[count_tmp*2 + 4] = crc_tmp & 0xff;
 12131  0497  086A               	movf	Inf_to_Com@crc_tmp^(0+128),w
 12132  0498  0020               	movlb	0	; select bank0
 12133  0499  00AB               	movwf	??_Inf_to_Com
 12134  049A  0021               	movlb	1	; select bank1
 12135  049B  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 12136  049C  3E04               	addlw	4
 12137  049D  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12138  049E  0086               	movwf	6
 12139  049F  0187               	clrf	7
 12140  04A0  0020               	movlb	0	; select bank0
 12141  04A1  082B               	movf	??_Inf_to_Com,w
 12142  04A2  0081               	movwf	1
 12143                           
 12144                           ;com.c: 112: tmp_buf[count_tmp*2 + 5] = crc_tmp >>8;
 12145  04A3  0021               	movlb	1	; select bank1
 12146  04A4  086B               	movf	(Inf_to_Com@crc_tmp+1)^(0+128),w
 12147  04A5  0020               	movlb	0	; select bank0
 12148  04A6  00AB               	movwf	??_Inf_to_Com
 12149  04A7  0021               	movlb	1	; select bank1
 12150  04A8  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 12151  04A9  3E05               	addlw	5
 12152  04AA  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12153  04AB  0086               	movwf	6
 12154  04AC  0187               	clrf	7
 12155  04AD  0020               	movlb	0	; select bank0
 12156  04AE  082B               	movf	??_Inf_to_Com,w
 12157  04AF  0081               	movwf	1
 12158                           
 12159                           ;com.c: 113: tmp_buf[count_tmp*2 + 6] = 0xbb;
 12160  04B0  30BB               	movlw	187
 12161  04B1  00AB               	movwf	??_Inf_to_Com
 12162  04B2  0021               	movlb	1	; select bank1
 12163  04B3  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 12164  04B4  3E06               	addlw	6
 12165  04B5  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12166  04B6  0086               	movwf	6
 12167  04B7  0187               	clrf	7
 12168  04B8  0020               	movlb	0	; select bank0
 12169  04B9  082B               	movf	??_Inf_to_Com,w
 12170  04BA  0081               	movwf	1
 12171                           
 12172                           ;com.c: 114: for(i=0;i<(count_tmp*2+7);i++)
 12173  04BB  0021               	movlb	1	; select bank1
 12174  04BC  01EC               	clrf	Inf_to_Com@i^(0+128)
 12175  04BD                     l6307:	
 12176  04BD  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12177  04BE  0020               	movlb	0	; select bank0
 12178  04BF  00AB               	movwf	??_Inf_to_Com
 12179  04C0  01AC               	clrf	??_Inf_to_Com+1
 12180  04C1  35AB               	lslf	??_Inf_to_Com,f
 12181  04C2  0DAC               	rlf	??_Inf_to_Com+1,f
 12182  04C3  082B               	movf	??_Inf_to_Com,w
 12183  04C4  3E07               	addlw	7
 12184  04C5  00AD               	movwf	??_Inf_to_Com+2
 12185  04C6  3000               	movlw	0
 12186  04C7  3D2C               	addwfc	??_Inf_to_Com+1,w
 12187  04C8  00AE               	movwf	??_Inf_to_Com+3
 12188  04C9  082E               	movf	??_Inf_to_Com+3,w
 12189  04CA  3A80               	xorlw	128
 12190  04CB  3C80               	sublw	128
 12191  04CC  1D03               	skipz
 12192  04CD  2CD1               	goto	u5895
 12193  04CE  082D               	movf	??_Inf_to_Com+2,w
 12194  04CF  0021               	movlb	1	; select bank1
 12195  04D0  026C               	subwf	Inf_to_Com@i^(0+128),w
 12196  04D1                     u5895:	
 12197  04D1  1803               	btfsc	3,0
 12198  04D2  0008               	return
 12199                           
 12200                           ;com.c: 115: {
 12201                           ;com.c: 116: EUSART_Write(tmp_buf[i]);
 12202  04D3  0021               	movlb	1	; select bank1
 12203  04D4  086C               	movf	Inf_to_Com@i^(0+128),w
 12204  04D5  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12205  04D6  0086               	movwf	6
 12206  04D7  0187               	clrf	7
 12207  04D8  0801               	movf	1,w
 12208  04D9  3193  23E4  3184   	fcall	_EUSART_Write
 12209  04DC  3001               	movlw	1
 12210  04DD  0020               	movlb	0	; select bank0
 12211  04DE  00AB               	movwf	??_Inf_to_Com
 12212  04DF  082B               	movf	??_Inf_to_Com,w
 12213  04E0  0021               	movlb	1	; select bank1
 12214  04E1  07EC               	addwf	Inf_to_Com@i^(0+128),f
 12215  04E2  2CBD               	goto	l6307
 12216  04E3                     __end_of_Inf_to_Com:	
 12217                           
 12218                           	psect	text64
 12219  15E3                     __ptext64:	
 12220 ;; *************** function _FLASH_readBlock *****************
 12221 ;; Defined at:
 12222 ;;		line 204 in file "mcc_generated_files/memory.c"
 12223 ;; Parameters:    Size  Location     Type
 12224 ;;  buffer          1    wreg     PTR unsigned int 
 12225 ;;		 -> Flash_buff(64), 
 12226 ;;  address         2    4[BANK0 ] unsigned int 
 12227 ;;  count           1    6[BANK0 ] unsigned char 
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;  buffer          1    8[BANK0 ] PTR unsigned int 
 12230 ;;		 -> Flash_buff(64), 
 12231 ;; Return value:  Size  Location     Type
 12232 ;;                  1    wreg      void 
 12233 ;; Registers used:
 12234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12240 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;Total ram usage:        5 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    4
 12247 ;; This function calls:
 12248 ;;		_FLASH_ReadWord
 12249 ;; This function is called by:
 12250 ;;		_Inf_to_Com
 12251 ;; This function uses a non-reentrant model
 12252 ;;
 12253                           
 12254                           
 12255                           ;psect for function _FLASH_readBlock
 12256  15E3                     _FLASH_readBlock:	
 12257                           
 12258                           ;incstack = 0
 12259                           ; Regs used in _FLASH_readBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12260                           ;FLASH_readBlock@buffer stored from wreg
 12261  15E3  0020               	movlb	0	; select bank0
 12262  15E4  00A8               	movwf	FLASH_readBlock@buffer
 12263  15E5                     l5999:	
 12264                           ;memory.c: 206: while (count > 0)
 12265                           
 12266  15E5  0826               	movf	FLASH_readBlock@count,w
 12267  15E6  1903               	btfsc	3,2
 12268  15E7  0008               	return
 12269                           
 12270                           ;memory.c: 207: {
 12271                           ;memory.c: 208: *buffer++ = FLASH_ReadWord (address++);
 12272  15E8  0825               	movf	FLASH_readBlock@address+1,w
 12273  15E9  00A2               	movwf	FLASH_ReadWord@flashAddr+1
 12274  15EA  0824               	movf	FLASH_readBlock@address,w
 12275  15EB  00A1               	movwf	FLASH_ReadWord@flashAddr
 12276  15EC  3195  25C3  3195   	fcall	_FLASH_ReadWord
 12277  15EF  0020               	movlb	0	; select bank0
 12278  15F0  0828               	movf	FLASH_readBlock@buffer,w
 12279  15F1  0086               	movwf	6
 12280  15F2  3002               	movlw	2	; select bank4/5
 12281  15F3  0087               	movwf	7
 12282  15F4  0821               	movf	?_FLASH_ReadWord,w
 12283  15F5  3FC0               	movwi [0]fsr1
 12284  15F6  0822               	movf	?_FLASH_ReadWord+1,w
 12285  15F7  3FC1               	movwi [1]fsr1
 12286  15F8  3001               	movlw	1
 12287  15F9  07A4               	addwf	FLASH_readBlock@address,f
 12288  15FA  3000               	movlw	0
 12289  15FB  3DA5               	addwfc	FLASH_readBlock@address+1,f
 12290  15FC  3002               	movlw	2
 12291  15FD  00A7               	movwf	??_FLASH_readBlock
 12292  15FE  0827               	movf	??_FLASH_readBlock,w
 12293  15FF  07A8               	addwf	FLASH_readBlock@buffer,f
 12294                           
 12295                           ;memory.c: 209: count--;
 12296  1600  3001               	movlw	1
 12297  1601  02A6               	subwf	FLASH_readBlock@count,f
 12298  1602  2DE5               	goto	l5999
 12299  1603                     __end_of_FLASH_readBlock:	
 12300                           
 12301                           	psect	text65
 12302  15C3                     __ptext65:	
 12303 ;; *************** function _FLASH_ReadWord *****************
 12304 ;; Defined at:
 12305 ;;		line 58 in file "mcc_generated_files/memory.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;  flashAddr       2    1[BANK0 ] unsigned int 
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 12310 ;; Return value:  Size  Location     Type
 12311 ;;                  2    1[BANK0 ] unsigned int 
 12312 ;; Registers used:
 12313 ;;		wreg, status,2, status,0
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12319 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;Total ram usage:        3 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; Hardware stack levels required when called:    3
 12326 ;; This function calls:
 12327 ;;		Nothing
 12328 ;; This function is called by:
 12329 ;;		_FLASH_readBlock
 12330 ;;		_Serach_Flash_Head
 12331 ;;		_Save_Write_word
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           
 12336                           ;psect for function _FLASH_ReadWord
 12337  15C3                     _FLASH_ReadWord:	
 12338                           
 12339                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12340                           
 12341                           ;incstack = 0
 12342                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12343  15C3  3000               	movlw	0
 12344  15C4  1B8B               	btfsc	11,7	;volatile
 12345  15C5  3001               	movlw	1
 12346  15C6  0020               	movlb	0	; select bank0
 12347  15C7  00A3               	movwf	FLASH_ReadWord@GIEBitValue
 12348                           
 12349                           ;memory.c: 61: INTCONbits.GIE = 0;
 12350  15C8  138B               	bcf	11,7	;volatile
 12351                           
 12352                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12353  15C9  0821               	movf	FLASH_ReadWord@flashAddr,w
 12354  15CA  0023               	movlb	3	; select bank3
 12355  15CB  0091               	movwf	17	;volatile
 12356                           
 12357                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12358  15CC  0020               	movlb	0	; select bank0
 12359  15CD  0822               	movf	FLASH_ReadWord@flashAddr+1,w
 12360  15CE  0023               	movlb	3	; select bank3
 12361  15CF  0092               	movwf	18	;volatile
 12362                           
 12363                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12364  15D0  1315               	bcf	21,6	;volatile
 12365                           
 12366                           ;memory.c: 66: PMCON1bits.RD = 1;
 12367  15D1  1415               	bsf	21,0	;volatile
 12368                           
 12369                           ;memory.c: 67: __nop();
 12370  15D2  0000               	nop
 12371                           
 12372                           ;memory.c: 68: __nop();
 12373  15D3  0000               	nop
 12374                           
 12375                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12376  15D4  0020               	movlb	0	; select bank0
 12377  15D5  0C23               	rrf	FLASH_ReadWord@GIEBitValue,w
 12378  15D6  1C03               	skipc
 12379  15D7  138B               	bcf	11,7	;volatile
 12380  15D8  1803               	skipnc
 12381  15D9  178B               	bsf	11,7	;volatile
 12382                           
 12383                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12384  15DA  0023               	movlb	3	; select bank3
 12385  15DB  0814               	movf	20,w	;volatile
 12386  15DC  0020               	movlb	0	; select bank0
 12387  15DD  00A2               	movwf	?_FLASH_ReadWord+1
 12388  15DE  0023               	movlb	3	; select bank3
 12389  15DF  0813               	movf	19,w	;volatile
 12390  15E0  0020               	movlb	0	; select bank0
 12391  15E1  00A1               	movwf	?_FLASH_ReadWord
 12392  15E2  0008               	return
 12393  15E3                     __end_of_FLASH_ReadWord:	
 12394                           
 12395                           	psect	text66
 12396  13E4                     __ptext66:	
 12397 ;; *************** function _EUSART_Write *****************
 12398 ;; Defined at:
 12399 ;;		line 132 in file "mcc_generated_files/eusart.c"
 12400 ;; Parameters:    Size  Location     Type
 12401 ;;  txData          1    wreg     unsigned char 
 12402 ;; Auto vars:     Size  Location     Type
 12403 ;;  txData          1    1[BANK0 ] unsigned char 
 12404 ;; Return value:  Size  Location     Type
 12405 ;;                  1    wreg      void 
 12406 ;; Registers used:
 12407 ;;		wreg
 12408 ;; Tracked objects:
 12409 ;;		On entry : 0/0
 12410 ;;		On exit  : 0/0
 12411 ;;		Unchanged: 0/0
 12412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;Total ram usage:        1 bytes
 12418 ;; Hardware stack levels used:    1
 12419 ;; Hardware stack levels required when called:    3
 12420 ;; This function calls:
 12421 ;;		Nothing
 12422 ;; This function is called by:
 12423 ;;		_Read_time_to_Com
 12424 ;;		_Inf_to_Com
 12425 ;;		_EUSART_SendString
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           
 12430                           ;psect for function _EUSART_Write
 12431  13E4                     _EUSART_Write:	
 12432                           
 12433                           ;incstack = 0
 12434                           ; Regs used in _EUSART_Write: [wreg]
 12435                           ;EUSART_Write@txData stored from wreg
 12436  13E4  0020               	movlb	0	; select bank0
 12437  13E5  00A1               	movwf	EUSART_Write@txData
 12438                           
 12439                           ;eusart.c: 135: TXREG = txData;
 12440  13E6  0821               	movf	EUSART_Write@txData,w
 12441  13E7  0023               	movlb	3	; select bank3
 12442  13E8  009A               	movwf	26	;volatile
 12443                           
 12444                           ;eusart.c: 136: PIR1bits.TXIF = 0;
 12445  13E9  0020               	movlb	0	; select bank0
 12446  13EA  1211               	bcf	17,4	;volatile
 12447                           
 12448                           ;eusart.c: 137: __nop();
 12449  13EB  0000               	nop
 12450  13EC                     l173:	
 12451                           ;eusart.c: 138: while(!PIR1bits.TXIF)
 12452                           
 12453  13EC  0020               	movlb	0	; select bank0
 12454  13ED  1A11               	btfsc	17,4	;volatile
 12455  13EE  0008               	return
 12456                           
 12457                           ;eusart.c: 139: {__nop();__nop();__nop();__nop();}
 12458  13EF  0000               	nop
 12459  13F0  0000               	nop
 12460  13F1  0000               	nop
 12461  13F2  0000               	nop
 12462  13F3  2BEC               	goto	l173
 12463  13F4                     __end_of_EUSART_Write:	
 12464                           
 12465                           	psect	text67
 12466  0D5F                     __ptext67:	
 12467 ;; *************** function _CRC_cal *****************
 12468 ;; Defined at:
 12469 ;;		line 165 in file "mcc_generated_files/com.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;  rx_arr          1    wreg     PTR unsigned char 
 12472 ;;		 -> Inf_to_Com@tmp_buf(72), Read_time_to_Com@tmp_buf(16), 
 12473 ;;  frame_len       1    1[BANK0 ] unsigned char 
 12474 ;; Auto vars:     Size  Location     Type
 12475 ;;  rx_arr          1    7[BANK0 ] PTR unsigned char 
 12476 ;;		 -> Inf_to_Com@tmp_buf(72), Read_time_to_Com@tmp_buf(16), 
 12477 ;;  remainder       2    9[BANK0 ] unsigned int 
 12478 ;;  i               1    8[BANK0 ] unsigned char 
 12479 ;; Return value:  Size  Location     Type
 12480 ;;                  2    1[BANK0 ] unsigned int 
 12481 ;; Registers used:
 12482 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/0
 12485 ;;		On exit  : 0/0
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12488 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;Total ram usage:       10 bytes
 12493 ;; Hardware stack levels used:    1
 12494 ;; Hardware stack levels required when called:    3
 12495 ;; This function calls:
 12496 ;;		Nothing
 12497 ;; This function is called by:
 12498 ;;		_Read_time_to_Com
 12499 ;;		_Inf_to_Com
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           
 12504                           ;psect for function _CRC_cal
 12505  0D5F                     _CRC_cal:	
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in _CRC_cal: [wreg+fsr1l+fsr1h+status,2+status,0]
 12509                           ;CRC_cal@rx_arr stored from wreg
 12510  0D5F  0020               	movlb	0	; select bank0
 12511  0D60  00A7               	movwf	CRC_cal@rx_arr
 12512                           
 12513                           ;com.c: 167: unsigned char i = 0;
 12514  0D61  01A8               	clrf	CRC_cal@i
 12515                           
 12516                           ;com.c: 168: unsigned int remainder = 0;
 12517  0D62  01A9               	clrf	CRC_cal@remainder
 12518  0D63  01AA               	clrf	CRC_cal@remainder+1
 12519                           
 12520                           ;com.c: 170: for(i = 2; i < frame_len - 3; i++)
 12521  0D64  3002               	movlw	2
 12522  0D65  00A3               	movwf	??_CRC_cal
 12523  0D66  0823               	movf	??_CRC_cal,w
 12524  0D67  00A8               	movwf	CRC_cal@i
 12525  0D68                     l5983:	
 12526  0D68  0821               	movf	CRC_cal@frame_len,w
 12527  0D69  3EFD               	addlw	253
 12528  0D6A  00A3               	movwf	??_CRC_cal
 12529  0D6B  30FF               	movlw	255
 12530  0D6C  1803               	skipnc
 12531  0D6D  3000               	movlw	0
 12532  0D6E  00A4               	movwf	??_CRC_cal+1
 12533  0D6F  0824               	movf	??_CRC_cal+1,w
 12534  0D70  3A80               	xorlw	128
 12535  0D71  3C80               	sublw	128
 12536  0D72  1D03               	skipz
 12537  0D73  2D76               	goto	u5665
 12538  0D74  0823               	movf	??_CRC_cal,w
 12539  0D75  0228               	subwf	CRC_cal@i,w
 12540  0D76                     u5665:	
 12541  0D76  1803               	btfsc	3,0
 12542  0D77  2DD3               	goto	l5985
 12543                           
 12544                           ;com.c: 171: {
 12545                           ;com.c: 172: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 12546  0D78  0020               	movlb	0	; select bank0
 12547  0D79  0829               	movf	CRC_cal@remainder,w
 12548  0D7A  00A4               	movwf	??_CRC_cal+1
 12549  0D7B  01A3               	clrf	??_CRC_cal
 12550  0D7C  082A               	movf	CRC_cal@remainder+1,w
 12551  0D7D  00A6               	movwf	??_CRC_cal+3
 12552  0D7E  0829               	movf	CRC_cal@remainder,w
 12553  0D7F  00A5               	movwf	??_CRC_cal+2
 12554  0D80  0826               	movf	??_CRC_cal+3,w
 12555  0D81  00A5               	movwf	??_CRC_cal+2
 12556  0D82  01A6               	clrf	??_CRC_cal+3
 12557  0D83  0823               	movf	??_CRC_cal,w
 12558  0D84  0425               	iorwf	??_CRC_cal+2,w
 12559  0D85  00A9               	movwf	CRC_cal@remainder
 12560  0D86  0824               	movf	??_CRC_cal+1,w
 12561  0D87  0426               	iorwf	??_CRC_cal+3,w
 12562  0D88  00AA               	movwf	CRC_cal@remainder+1
 12563                           
 12564                           ;com.c: 173: remainder ^= rx_arr[i];
 12565  0D89  0828               	movf	CRC_cal@i,w
 12566  0D8A  0727               	addwf	CRC_cal@rx_arr,w
 12567  0D8B  00A3               	movwf	??_CRC_cal
 12568  0D8C  0823               	movf	??_CRC_cal,w
 12569  0D8D  0086               	movwf	6
 12570  0D8E  0187               	clrf	7
 12571  0D8F  0801               	movf	1,w
 12572  0D90  00A4               	movwf	??_CRC_cal+1
 12573  0D91  01A5               	clrf	??_CRC_cal+2
 12574  0D92  0824               	movf	??_CRC_cal+1,w
 12575  0D93  06A9               	xorwf	CRC_cal@remainder,f
 12576  0D94  0825               	movf	??_CRC_cal+2,w
 12577  0D95  06AA               	xorwf	CRC_cal@remainder+1,f
 12578                           
 12579                           ;com.c: 174: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 12580  0D96  082A               	movf	CRC_cal@remainder+1,w
 12581  0D97  00A4               	movwf	??_CRC_cal+1
 12582  0D98  0829               	movf	CRC_cal@remainder,w
 12583  0D99  00A3               	movwf	??_CRC_cal
 12584  0D9A  3004               	movlw	4
 12585  0D9B                     u5655:	
 12586  0D9B  36A4               	lsrf	??_CRC_cal+1,f
 12587  0D9C  0CA3               	rrf	??_CRC_cal,f
 12588  0D9D  0B89               	decfsz	9,f
 12589  0D9E  2D9B               	goto	u5655
 12590  0D9F  300F               	movlw	15
 12591  0DA0  0523               	andwf	??_CRC_cal,w
 12592  0DA1  00A5               	movwf	??_CRC_cal+2
 12593  0DA2  3000               	movlw	0
 12594  0DA3  0524               	andwf	??_CRC_cal+1,w
 12595  0DA4  00A6               	movwf	??_CRC_cal+3
 12596  0DA5  0825               	movf	??_CRC_cal+2,w
 12597  0DA6  06A9               	xorwf	CRC_cal@remainder,f
 12598  0DA7  0826               	movf	??_CRC_cal+3,w
 12599  0DA8  06AA               	xorwf	CRC_cal@remainder+1,f
 12600                           
 12601                           ;com.c: 175: remainder ^= (unsigned int)((remainder << 8) << 4);
 12602  0DA9  0829               	movf	CRC_cal@remainder,w
 12603  0DAA  00A4               	movwf	??_CRC_cal+1
 12604  0DAB  01A3               	clrf	??_CRC_cal
 12605  0DAC  0EA3               	swapf	??_CRC_cal,f
 12606  0DAD  0EA4               	swapf	??_CRC_cal+1,f
 12607  0DAE  30F0               	movlw	240
 12608  0DAF  05A4               	andwf	??_CRC_cal+1,f
 12609  0DB0  0823               	movf	??_CRC_cal,w
 12610  0DB1  390F               	andlw	15
 12611  0DB2  04A4               	iorwf	??_CRC_cal+1,f
 12612  0DB3  30F0               	movlw	240
 12613  0DB4  05A3               	andwf	??_CRC_cal,f
 12614  0DB5  0823               	movf	??_CRC_cal,w
 12615  0DB6  06A9               	xorwf	CRC_cal@remainder,f
 12616  0DB7  0824               	movf	??_CRC_cal+1,w
 12617  0DB8  06AA               	xorwf	CRC_cal@remainder+1,f
 12618                           
 12619                           ;com.c: 176: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 12620  0DB9  30FF               	movlw	255
 12621  0DBA  0529               	andwf	CRC_cal@remainder,w
 12622  0DBB  00A3               	movwf	??_CRC_cal
 12623  0DBC  3000               	movlw	0
 12624  0DBD  052A               	andwf	CRC_cal@remainder+1,w
 12625  0DBE  00A4               	movwf	??_CRC_cal+1
 12626  0DBF  0EA3               	swapf	??_CRC_cal,f
 12627  0DC0  0EA4               	swapf	??_CRC_cal+1,f
 12628  0DC1  30F0               	movlw	240
 12629  0DC2  05A4               	andwf	??_CRC_cal+1,f
 12630  0DC3  0823               	movf	??_CRC_cal,w
 12631  0DC4  390F               	andlw	15
 12632  0DC5  04A4               	iorwf	??_CRC_cal+1,f
 12633  0DC6  30F0               	movlw	240
 12634  0DC7  05A3               	andwf	??_CRC_cal,f
 12635  0DC8  35A3               	lslf	??_CRC_cal,f
 12636  0DC9  0DA4               	rlf	??_CRC_cal+1,f
 12637  0DCA  0823               	movf	??_CRC_cal,w
 12638  0DCB  06A9               	xorwf	CRC_cal@remainder,f
 12639  0DCC  0824               	movf	??_CRC_cal+1,w
 12640  0DCD  06AA               	xorwf	CRC_cal@remainder+1,f
 12641  0DCE  3001               	movlw	1
 12642  0DCF  00A3               	movwf	??_CRC_cal
 12643  0DD0  0823               	movf	??_CRC_cal,w
 12644  0DD1  07A8               	addwf	CRC_cal@i,f
 12645  0DD2  2D68               	goto	l5983
 12646  0DD3                     l5985:	
 12647                           
 12648                           ;com.c: 177: }
 12649                           ;com.c: 178: return remainder;
 12650  0DD3  0020               	movlb	0	; select bank0
 12651  0DD4  082A               	movf	CRC_cal@remainder+1,w
 12652  0DD5  00A2               	movwf	?_CRC_cal+1
 12653  0DD6  0829               	movf	CRC_cal@remainder,w
 12654  0DD7  00A1               	movwf	?_CRC_cal
 12655  0DD8  0008               	return
 12656  0DD9                     __end_of_CRC_cal:	
 12657                           
 12658                           	psect	intentry
 12659  0004                     __pintentry:	
 12660 ;; *************** function _INTERRUPT_InterruptManager *****************
 12661 ;; Defined at:
 12662 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;		None
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;		None
 12667 ;; Return value:  Size  Location     Type
 12668 ;;                  1    wreg      void 
 12669 ;; Registers used:
 12670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;Total ram usage:        1 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    2
 12683 ;; This function calls:
 12684 ;;		_EUSART_Receive_ISR
 12685 ;;		_EUSART_Transmit_ISR
 12686 ;;		_TMR0_ISR
 12687 ;; This function is called by:
 12688 ;;		Interrupt level 1
 12689 ;; This function uses a non-reentrant model
 12690 ;;
 12691                           
 12692  0004                     _INTERRUPT_InterruptManager:	
 12693                           
 12694                           ;incstack = 0
 12695                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12696  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12697  0005  3180               	pagesel	$
 12698  0006  0020               	movlb	0	; select bank0
 12699  0007  087F               	movf	127,w
 12700  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 12701                           
 12702                           ;interrupt_manager.c: 54: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 12703  0009  1A8B               	btfsc	11,5	;volatile
 12704  000A  1D0B               	btfss	11,2	;volatile
 12705  000B  2810               	goto	i1l351
 12706                           
 12707                           ;interrupt_manager.c: 55: TMR0_ISR();
 12708  000C  3194  24DD  3180   	fcall	_TMR0_ISR
 12709                           
 12710                           ;interrupt_manager.c: 56: } else if (PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1) {
 12711  000F  2822               	goto	i1l357
 12712  0010                     i1l351:	
 12713  0010  0021               	movlb	1	; select bank1
 12714  0011  1E91               	btfss	17,5	;volatile
 12715  0012  281A               	goto	i1l353
 12716  0013  0020               	movlb	0	; select bank0
 12717  0014  1E91               	btfss	17,5	;volatile
 12718  0015  281A               	goto	i1l353
 12719                           
 12720                           ;interrupt_manager.c: 57: EUSART_Receive_ISR();
 12721  0016  318D  25D9  3180   	fcall	_EUSART_Receive_ISR
 12722                           
 12723                           ;interrupt_manager.c: 58: } else if (PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1) {
 12724  0019  2822               	goto	i1l357
 12725  001A                     i1l353:	
 12726  001A  0021               	movlb	1	; select bank1
 12727  001B  1E11               	btfss	17,4	;volatile
 12728  001C  2822               	goto	i1l357
 12729  001D  0020               	movlb	0	; select bank0
 12730  001E  1E11               	btfss	17,4	;volatile
 12731  001F  2822               	goto	i1l357
 12732                           
 12733                           ;interrupt_manager.c: 59: EUSART_Transmit_ISR();
 12734  0020  3195  2586         	fcall	_EUSART_Transmit_ISR
 12735  0022                     i1l357:	
 12736                           ;interrupt_manager.c: 60: } else {
 12737                           
 12738  0022  0020               	movlb	0	; select bank0
 12739  0023  0820               	movf	??_INTERRUPT_InterruptManager,w
 12740  0024  00FF               	movwf	127
 12741  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12742  0026  0009               	retfie
 12743  0027                     __end_of_INTERRUPT_InterruptManager:	
 12744                           
 12745                           	psect	text69
 12746  14DD                     __ptext69:	
 12747 ;; *************** function _TMR0_ISR *****************
 12748 ;; Defined at:
 12749 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;		None
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;		None
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      void 
 12756 ;; Registers used:
 12757 ;;		wreg, status,2, status,0, pclath, cstack
 12758 ;; Tracked objects:
 12759 ;;		On entry : 0/0
 12760 ;;		On exit  : 0/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;Total ram usage:        1 bytes
 12768 ;; Hardware stack levels used:    1
 12769 ;; Hardware stack levels required when called:    1
 12770 ;; This function calls:
 12771 ;;		_TMR0_CallBack
 12772 ;; This function is called by:
 12773 ;;		_INTERRUPT_InterruptManager
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           
 12778                           ;psect for function _TMR0_ISR
 12779  14DD                     _TMR0_ISR:	
 12780                           
 12781                           ;tmr0.c: 104: static volatile unsigned int CountCallBack = 0;
 12782                           ;tmr0.c: 107: INTCONbits.TMR0IF = 0;
 12783                           
 12784                           ;incstack = 0
 12785                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 12786  14DD  110B               	bcf	11,2	;volatile
 12787                           
 12788                           ;tmr0.c: 109: TMR0 = timer0ReloadVal;
 12789  14DE  0022               	movlb	2	; select bank2
 12790  14DF  086D               	movf	_timer0ReloadVal^(0+256),w	;volatile
 12791  14E0  0020               	movlb	0	; select bank0
 12792  14E1  0095               	movwf	21	;volatile
 12793                           
 12794                           ;tmr0.c: 111: MAX31856Sec++;
 12795  14E2  3001               	movlw	1
 12796  14E3  00F1               	movwf	??_TMR0_ISR
 12797  14E4  0871               	movf	??_TMR0_ISR,w
 12798  14E5  0022               	movlb	2	; select bank2
 12799  14E6  07B9               	addwf	_MAX31856Sec^(0+256),f
 12800                           
 12801                           ;tmr0.c: 114: if (++CountCallBack >= 100) {
 12802  14E7  3001               	movlw	1
 12803  14E8  07A8               	addwf	TMR0_ISR@CountCallBack^(0+256),f	;volatile
 12804  14E9  3000               	movlw	0
 12805  14EA  3DA9               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+256),f	;volatile
 12806  14EB  3000               	movlw	0
 12807  14EC  0229               	subwf	(TMR0_ISR@CountCallBack+1)^(0+256),w	;volatile
 12808  14ED  3064               	movlw	100
 12809  14EE  1903               	skipnz
 12810  14EF  0228               	subwf	TMR0_ISR@CountCallBack^(0+256),w	;volatile
 12811  14F0  1C03               	skipc
 12812  14F1  0008               	return
 12813                           
 12814                           ;tmr0.c: 116: TMR0_CallBack();
 12815  14F2  3194  24C4         	fcall	_TMR0_CallBack
 12816                           
 12817                           ;tmr0.c: 119: CountCallBack = 0;
 12818  14F4  0022               	movlb	2	; select bank2
 12819  14F5  01A8               	clrf	TMR0_ISR@CountCallBack^(0+256)	;volatile
 12820  14F6  01A9               	clrf	(TMR0_ISR@CountCallBack+1)^(0+256)	;volatile
 12821  14F7  0008               	return
 12822  14F8                     __end_of_TMR0_ISR:	
 12823                           
 12824                           	psect	text70
 12825  14C4                     __ptext70:	
 12826 ;; *************** function _TMR0_CallBack *****************
 12827 ;; Defined at:
 12828 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;		None
 12831 ;; Auto vars:     Size  Location     Type
 12832 ;;		None
 12833 ;; Return value:  Size  Location     Type
 12834 ;;                  1    wreg      void 
 12835 ;; Registers used:
 12836 ;;		wreg, status,2, status,0
 12837 ;; Tracked objects:
 12838 ;;		On entry : 0/0
 12839 ;;		On exit  : 0/0
 12840 ;;		Unchanged: 0/0
 12841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12846 ;;Total ram usage:        1 bytes
 12847 ;; Hardware stack levels used:    1
 12848 ;; This function calls:
 12849 ;;		Nothing
 12850 ;; This function is called by:
 12851 ;;		_TMR0_ISR
 12852 ;; This function uses a non-reentrant model
 12853 ;;
 12854                           
 12855                           
 12856                           ;psect for function _TMR0_CallBack
 12857  14C4                     _TMR0_CallBack:	
 12858                           
 12859                           ;tmr0.c: 128: LongPressSec++;
 12860                           
 12861                           ;incstack = 0
 12862                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0]
 12863  14C4  3001               	movlw	1
 12864  14C5  00F0               	movwf	??_TMR0_CallBack
 12865  14C6  0870               	movf	??_TMR0_CallBack,w
 12866  14C7  0021               	movlb	1	; select bank1
 12867  14C8  07EE               	addwf	_LongPressSec^(0+128),f
 12868                           
 12869                           ;tmr0.c: 129: if(Usart_Run_Flag > 0)
 12870  14C9  0022               	movlb	2	; select bank2
 12871  14CA  086B               	movf	_Usart_Run_Flag^(0+256),w
 12872  14CB  1903               	btfsc	3,2
 12873  14CC  2CCF               	goto	i1l334
 12874                           
 12875                           ;tmr0.c: 130: {
 12876                           ;tmr0.c: 131: Usart_Run_Flag--;
 12877  14CD  3001               	movlw	1
 12878  14CE  02EB               	subwf	_Usart_Run_Flag^(0+256),f
 12879  14CF                     i1l334:	
 12880                           
 12881                           ;tmr0.c: 132: }
 12882                           ;tmr0.c: 134: if( Usart_Run_Flag == 0)
 12883  14CF  086B               	movf	_Usart_Run_Flag^(0+256),w
 12884  14D0  1D03               	btfss	3,2
 12885  14D1  0008               	return
 12886                           
 12887                           ;tmr0.c: 135: {
 12888                           ;tmr0.c: 136: SWDTEN = 0;
 12889  14D2  0021               	movlb	1	; select bank1
 12890  14D3  1017               	bcf	23,0	;volatile
 12891                           
 12892                           ;tmr0.c: 137: WDTPS0 = 1;
 12893  14D4  1497               	bsf	23,1	;volatile
 12894                           
 12895                           ;tmr0.c: 138: WDTPS1 = 0;
 12896  14D5  1117               	bcf	23,2	;volatile
 12897                           
 12898                           ;tmr0.c: 139: WDTPS2 = 0;
 12899  14D6  1197               	bcf	23,3	;volatile
 12900                           
 12901                           ;tmr0.c: 140: WDTPS3 = 1;
 12902  14D7  1617               	bsf	23,4	;volatile
 12903                           
 12904                           ;tmr0.c: 141: WDTPS4 = 0;
 12905  14D8  1297               	bcf	23,5	;volatile
 12906  14D9  0064               	clrwdt	;# 
 12907                           
 12908                           ;tmr0.c: 143: SWDTEN = 1;
 12909  14DA  0021               	movlb	1	; select bank1
 12910  14DB  1417               	bsf	23,0	;volatile
 12911  14DC  0008               	return
 12912  14DD                     __end_of_TMR0_CallBack:	
 12913                           
 12914                           	psect	text71
 12915  1586                     __ptext71:	
 12916 ;; *************** function _EUSART_Transmit_ISR *****************
 12917 ;; Defined at:
 12918 ;;		line 155 in file "mcc_generated_files/eusart.c"
 12919 ;; Parameters:    Size  Location     Type
 12920 ;;		None
 12921 ;; Auto vars:     Size  Location     Type
 12922 ;;		None
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  1    wreg      void 
 12925 ;; Registers used:
 12926 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;Total ram usage:        1 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; This function calls:
 12939 ;;		Nothing
 12940 ;; This function is called by:
 12941 ;;		_INTERRUPT_InterruptManager
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           
 12946                           ;psect for function _EUSART_Transmit_ISR
 12947  1586                     _EUSART_Transmit_ISR:	
 12948                           
 12949                           ;eusart.c: 158: if (sizeof (eusartTxBuffer) > eusartTxBufferRemaining) {
 12950                           
 12951                           ;incstack = 0
 12952                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12953  1586  3008               	movlw	8
 12954  1587  0022               	movlb	2	; select bank2
 12955  1588  026C               	subwf	_eusartTxBufferRemaining^(0+256),w	;volatile
 12956  1589  1803               	skipnc
 12957  158A  2DA1               	goto	i1l179
 12958                           
 12959                           ;eusart.c: 159: TXREG = eusartTxBuffer[eusartTxTail++];
 12960  158B  083F               	movf	_eusartTxTail^(0+256),w
 12961  158C  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12962  158D  0086               	movwf	6
 12963  158E  3001               	movlw	1	; select bank3/4
 12964  158F  0087               	movwf	7
 12965  1590  0801               	movf	1,w
 12966  1591  0023               	movlb	3	; select bank3
 12967  1592  009A               	movwf	26	;volatile
 12968  1593  3001               	movlw	1
 12969  1594  00F0               	movwf	??_EUSART_Transmit_ISR
 12970  1595  0870               	movf	??_EUSART_Transmit_ISR,w
 12971  1596  0022               	movlb	2	; select bank2
 12972  1597  07BF               	addwf	_eusartTxTail^(0+256),f
 12973                           
 12974                           ;eusart.c: 160: if (sizeof (eusartTxBuffer) <= eusartTxTail) {
 12975  1598  3008               	movlw	8
 12976  1599  023F               	subwf	_eusartTxTail^(0+256),w
 12977  159A  1803               	btfsc	3,0
 12978                           
 12979                           ;eusart.c: 161: eusartTxTail = 0;
 12980  159B  01BF               	clrf	_eusartTxTail^(0+256)
 12981                           
 12982                           ;eusart.c: 162: }
 12983                           ;eusart.c: 163: eusartTxBufferRemaining++;
 12984  159C  3001               	movlw	1
 12985  159D  00F0               	movwf	??_EUSART_Transmit_ISR
 12986  159E  0870               	movf	??_EUSART_Transmit_ISR,w
 12987  159F  07EC               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 12988                           
 12989                           ;eusart.c: 164: } else {
 12990  15A0  0008               	return
 12991  15A1                     i1l179:	
 12992                           
 12993                           ;eusart.c: 165: PIE1bits.TXIE = 0;
 12994  15A1  0021               	movlb	1	; select bank1
 12995  15A2  1211               	bcf	17,4	;volatile
 12996  15A3  0008               	return
 12997  15A4                     __end_of_EUSART_Transmit_ISR:	
 12998                           
 12999                           	psect	text72
 13000  0DD9                     __ptext72:	
 13001 ;; *************** function _EUSART_Receive_ISR *****************
 13002 ;; Defined at:
 13003 ;;		line 169 in file "mcc_generated_files/eusart.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;		None
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;  rx_tmp          1   13[COMMON] unsigned char 
 13008 ;; Return value:  Size  Location     Type
 13009 ;;                  1    wreg      void 
 13010 ;; Registers used:
 13011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13012 ;; Tracked objects:
 13013 ;;		On entry : 0/0
 13014 ;;		On exit  : 0/0
 13015 ;;		Unchanged: 0/0
 13016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;Total ram usage:        3 bytes
 13022 ;; Hardware stack levels used:    1
 13023 ;; Hardware stack levels required when called:    1
 13024 ;; This function calls:
 13025 ;;		_RxFrameCheck
 13026 ;; This function is called by:
 13027 ;;		_INTERRUPT_InterruptManager
 13028 ;; This function uses a non-reentrant model
 13029 ;;
 13030                           
 13031                           
 13032                           ;psect for function _EUSART_Receive_ISR
 13033  0DD9                     _EUSART_Receive_ISR:	
 13034                           
 13035                           ;eusart.c: 170: unsigned char rx_tmp;
 13036                           ;eusart.c: 171: if (1 == RCSTAbits.OERR) {
 13037                           
 13038                           ;incstack = 0
 13039                           ; Regs used in _EUSART_Receive_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13040  0DD9  0023               	movlb	3	; select bank3
 13041  0DDA  1C9D               	btfss	29,1	;volatile
 13042  0DDB  2DDE               	goto	i1l4671
 13043                           
 13044                           ;eusart.c: 174: RCSTAbits.CREN = 0;
 13045  0DDC  121D               	bcf	29,4	;volatile
 13046                           
 13047                           ;eusart.c: 175: RCSTAbits.CREN = 1;
 13048  0DDD  161D               	bsf	29,4	;volatile
 13049  0DDE                     i1l4671:	
 13050                           
 13051                           ;eusart.c: 176: }
 13052                           ;eusart.c: 177: rx_tmp = RCREG;
 13053  0DDE  0819               	movf	25,w	;volatile
 13054  0DDF  00FB               	movwf	??_EUSART_Receive_ISR
 13055  0DE0  087B               	movf	??_EUSART_Receive_ISR,w
 13056  0DE1  00FD               	movwf	EUSART_Receive_ISR@rx_tmp
 13057                           
 13058                           ;eusart.c: 178: Usart_Rx_Buff[Usart_Rx_Cnt] = rx_tmp ;
 13059  0DE2  087D               	movf	EUSART_Receive_ISR@rx_tmp,w
 13060  0DE3  00FB               	movwf	??_EUSART_Receive_ISR
 13061  0DE4  0020               	movlb	0	; select bank0
 13062  0DE5  0868               	movf	_Usart_Rx_Cnt,w
 13063  0DE6  3EB4               	addlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 13064  0DE7  0086               	movwf	6
 13065  0DE8  3001               	movlw	1	; select bank3/4
 13066  0DE9  0087               	movwf	7
 13067  0DEA  087B               	movf	??_EUSART_Receive_ISR,w
 13068  0DEB  0081               	movwf	1
 13069                           
 13070                           ;eusart.c: 179: Usart_Rx_Cnt++;
 13071  0DEC  3001               	movlw	1
 13072  0DED  00FB               	movwf	??_EUSART_Receive_ISR
 13073  0DEE  087B               	movf	??_EUSART_Receive_ISR,w
 13074  0DEF  07E8               	addwf	_Usart_Rx_Cnt,f
 13075                           
 13076                           ;eusart.c: 191: if( Usart_Rx_Cnt == 1)
 13077  0DF0  0368               	decf	_Usart_Rx_Cnt,w
 13078  0DF1  1D03               	btfss	3,2
 13079  0DF2  2E09               	goto	i1l4699
 13080                           
 13081                           ;eusart.c: 192: {
 13082                           ;eusart.c: 193: if( rx_tmp != 0xfe)
 13083  0DF3  30FE               	movlw	254
 13084  0DF4  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13085  0DF5  1903               	btfsc	3,2
 13086  0DF6  2DF9               	goto	i1l4683
 13087                           
 13088                           ;eusart.c: 194: {
 13089                           ;eusart.c: 195: Usart_Rx_Cnt = 0;
 13090  0DF7  01E8               	clrf	_Usart_Rx_Cnt
 13091                           
 13092                           ;eusart.c: 196: }
 13093  0DF8  0008               	return
 13094  0DF9                     i1l4683:	
 13095                           
 13096                           ;eusart.c: 197: else
 13097                           ;eusart.c: 198: {
 13098                           ;eusart.c: 199: Usart_Run_Flag = 10;
 13099  0DF9  300A               	movlw	10
 13100  0DFA  00FB               	movwf	??_EUSART_Receive_ISR
 13101  0DFB  087B               	movf	??_EUSART_Receive_ISR,w
 13102  0DFC  0022               	movlb	2	; select bank2
 13103  0DFD  00EB               	movwf	_Usart_Run_Flag^(0+256)
 13104                           
 13105                           ;eusart.c: 200: SWDTEN = 0;
 13106  0DFE  0021               	movlb	1	; select bank1
 13107  0DFF  1017               	bcf	23,0	;volatile
 13108                           
 13109                           ;eusart.c: 201: WDTPS0 = 0;
 13110  0E00  1097               	bcf	23,1	;volatile
 13111                           
 13112                           ;eusart.c: 202: WDTPS1 = 1;
 13113  0E01  1517               	bsf	23,2	;volatile
 13114                           
 13115                           ;eusart.c: 203: WDTPS2 = 1;
 13116  0E02  1597               	bsf	23,3	;volatile
 13117                           
 13118                           ;eusart.c: 204: WDTPS3 = 1;
 13119  0E03  1617               	bsf	23,4	;volatile
 13120                           
 13121                           ;eusart.c: 205: WDTPS4 = 0;
 13122  0E04  1297               	bcf	23,5	;volatile
 13123  0E05  0064               	clrwdt	;# 
 13124                           
 13125                           ;eusart.c: 207: SWDTEN = 1;
 13126  0E06  0021               	movlb	1	; select bank1
 13127  0E07  1417               	bsf	23,0	;volatile
 13128                           
 13129                           ;eusart.c: 208: }
 13130                           ;eusart.c: 209: }
 13131  0E08  0008               	return
 13132  0E09                     i1l4699:	
 13133                           
 13134                           ;eusart.c: 210: else if( Usart_Rx_Cnt == 2)
 13135  0E09  3002               	movlw	2
 13136  0E0A  0020               	movlb	0	; select bank0
 13137  0E0B  0668               	xorwf	_Usart_Rx_Cnt,w
 13138  0E0C  1D03               	btfss	3,2
 13139  0E0D  2E14               	goto	i1l4705
 13140                           
 13141                           ;eusart.c: 211: {
 13142                           ;eusart.c: 212: if( rx_tmp != 0xfe)
 13143  0E0E  30FE               	movlw	254
 13144  0E0F  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13145  0E10  1903               	btfsc	3,2
 13146  0E11  0008               	return
 13147                           
 13148                           ;eusart.c: 213: {
 13149                           ;eusart.c: 214: Usart_Rx_Cnt = 0;
 13150  0E12  01E8               	clrf	_Usart_Rx_Cnt
 13151                           
 13152                           ;eusart.c: 215: }
 13153                           ;eusart.c: 216: }
 13154  0E13  0008               	return
 13155  0E14                     i1l4705:	
 13156                           
 13157                           ;eusart.c: 217: else if( Usart_Rx_Cnt == 4)
 13158  0E14  3004               	movlw	4
 13159  0E15  0668               	xorwf	_Usart_Rx_Cnt,w
 13160  0E16  1D03               	btfss	3,2
 13161  0E17  2E1E               	goto	i1l4711
 13162                           
 13163                           ;eusart.c: 218: {
 13164                           ;eusart.c: 219: if( rx_tmp > 7)
 13165  0E18  3008               	movlw	8
 13166  0E19  027D               	subwf	EUSART_Receive_ISR@rx_tmp,w
 13167  0E1A  1C03               	skipc
 13168  0E1B  0008               	return
 13169                           
 13170                           ;eusart.c: 220: {
 13171                           ;eusart.c: 221: Usart_Rx_Cnt = 0;
 13172  0E1C  01E8               	clrf	_Usart_Rx_Cnt
 13173                           
 13174                           ;eusart.c: 222: }
 13175                           ;eusart.c: 223: }
 13176  0E1D  0008               	return
 13177  0E1E                     i1l4711:	
 13178                           
 13179                           ;eusart.c: 224: else if( Usart_Rx_Cnt > 14)
 13180  0E1E  300F               	movlw	15
 13181  0E1F  0268               	subwf	_Usart_Rx_Cnt,w
 13182  0E20  1C03               	skipc
 13183  0E21  2E24               	goto	i1l4715
 13184                           
 13185                           ;eusart.c: 225: {
 13186                           ;eusart.c: 226: Usart_Rx_Cnt = 0;
 13187  0E22  01E8               	clrf	_Usart_Rx_Cnt
 13188                           
 13189                           ;eusart.c: 227: }
 13190  0E23  0008               	return
 13191  0E24                     i1l4715:	
 13192                           
 13193                           ;eusart.c: 228: else if( (Usart_Rx_Cnt == (Usart_Rx_Buff[3]+7)) && ( rx_tmp == 0Xbb) )
 13194  0E24  0023               	movlb	3	; select bank3
 13195  0E25  0837               	movf	(_Usart_Rx_Buff^(0+384)+3),w
 13196  0E26  3E07               	addlw	7
 13197  0E27  00FB               	movwf	??_EUSART_Receive_ISR
 13198  0E28  3000               	movlw	0
 13199  0E29  1803               	skipnc
 13200  0E2A  3001               	movlw	1
 13201  0E2B  00FC               	movwf	??_EUSART_Receive_ISR+1
 13202  0E2C  0020               	movlb	0	; select bank0
 13203  0E2D  0868               	movf	_Usart_Rx_Cnt,w
 13204  0E2E  067B               	xorwf	??_EUSART_Receive_ISR,w
 13205  0E2F  047C               	iorwf	??_EUSART_Receive_ISR+1,w
 13206  0E30  1D03               	skipz
 13207  0E31  0008               	return
 13208  0E32  30BB               	movlw	187
 13209  0E33  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13210  0E34  1D03               	btfss	3,2
 13211  0E35  0008               	return
 13212                           
 13213                           ;eusart.c: 229: {
 13214                           ;eusart.c: 230: if(RxFrameCheck(Usart_Rx_Buff,Usart_Rx_Cnt))
 13215  0E36  0868               	movf	_Usart_Rx_Cnt,w
 13216  0E37  00FB               	movwf	??_EUSART_Receive_ISR
 13217  0E38  087B               	movf	??_EUSART_Receive_ISR,w
 13218  0E39  00F0               	movwf	RxFrameCheck@frame_len
 13219  0E3A  30B4               	movlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 13220  0E3B  3187  2754  318D   	fcall	_RxFrameCheck
 13221  0E3E  3A00               	xorlw	0
 13222  0E3F  1D03               	btfss	3,2
 13223  0E40  2E4A               	goto	i1l4725
 13224  0E41  2E53               	goto	i1l4727
 13225  0E42                     i1l201:	
 13226                           ;eusart.c: 233: {
 13227                           ;eusart.c: 234: case 0x01: Inf_cmd_flag = 1;
 13228                           
 13229                           ;eusart.c: 231: {
 13230                           ;eusart.c: 232: switch( Usart_Rx_Buff[2] )
 13231                           
 13232  0E42  0022               	movlb	2	; select bank2
 13233  0E43  01B8               	clrf	_Inf_cmd_flag^(0+256)
 13234  0E44  0AB8               	incf	_Inf_cmd_flag^(0+256),f
 13235                           
 13236                           ;eusart.c: 235: break;
 13237  0E45  2E53               	goto	i1l4727
 13238  0E46                     i1l203:	
 13239                           ;eusart.c: 236: case 0X02: Set_time_cmd_flag = 1;
 13240                           
 13241  0E46  0022               	movlb	2	; select bank2
 13242  0E47  01BA               	clrf	_Set_time_cmd_flag^(0+256)
 13243  0E48  0ABA               	incf	_Set_time_cmd_flag^(0+256),f
 13244                           
 13245                           ;eusart.c: 239: }
 13246                           
 13247                           ;eusart.c: 238: default:break;
 13248                           
 13249                           ;eusart.c: 237: break;
 13250  0E49  2E53               	goto	i1l4727
 13251  0E4A                     i1l4725:	
 13252  0E4A  0023               	movlb	3	; select bank3
 13253  0E4B  0836               	movf	(_Usart_Rx_Buff^(0+384)+2),w
 13254                           
 13255                           ; Switch size 1, requested type "space"
 13256                           ; Number of cases is 2, Range of values is 1 to 2
 13257                           ; switch strategies available:
 13258                           ; Name         Instructions Cycles
 13259                           ; simple_byte            7     4 (average)
 13260                           ; direct_byte           13     9 (fixed)
 13261                           ; jumptable            263     9 (fixed)
 13262                           ;	Chosen strategy is simple_byte
 13263  0E4C  3A01               	xorlw	1	; case 1
 13264  0E4D  1903               	skipnz
 13265  0E4E  2E42               	goto	i1l201
 13266  0E4F  3A03               	xorlw	3	; case 2
 13267  0E50  1903               	skipnz
 13268  0E51  2E46               	goto	i1l203
 13269  0E52  2E53               	goto	i1l4727
 13270  0E53                     i1l4727:	
 13271                           
 13272                           ;eusart.c: 240: }
 13273                           ;eusart.c: 241: Usart_Rx_Cnt = 0;
 13274  0E53  0020               	movlb	0	; select bank0
 13275  0E54  01E8               	clrf	_Usart_Rx_Cnt
 13276  0E55  0008               	return
 13277  0E56                     __end_of_EUSART_Receive_ISR:	
 13278                           
 13279                           	psect	text73
 13280  0754                     __ptext73:	
 13281 ;; *************** function _RxFrameCheck *****************
 13282 ;; Defined at:
 13283 ;;		line 126 in file "mcc_generated_files/com.c"
 13284 ;; Parameters:    Size  Location     Type
 13285 ;;  rx_arr          1    wreg     PTR unsigned char 
 13286 ;;		 -> Usart_Rx_Buff(32), 
 13287 ;;  frame_len       1    0[COMMON] unsigned char 
 13288 ;; Auto vars:     Size  Location     Type
 13289 ;;  rx_arr          1    8[COMMON] PTR unsigned char 
 13290 ;;		 -> Usart_Rx_Buff(32), 
 13291 ;;  remainder       2    9[COMMON] unsigned int 
 13292 ;;  tmp_crc         2    5[COMMON] unsigned int 
 13293 ;;  i               1    7[COMMON] unsigned char 
 13294 ;; Return value:  Size  Location     Type
 13295 ;;                  1    wreg      unsigned char 
 13296 ;; Registers used:
 13297 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13298 ;; Tracked objects:
 13299 ;;		On entry : 0/0
 13300 ;;		On exit  : 0/0
 13301 ;;		Unchanged: 0/0
 13302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13303 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;Total ram usage:       11 bytes
 13308 ;; Hardware stack levels used:    1
 13309 ;; This function calls:
 13310 ;;		Nothing
 13311 ;; This function is called by:
 13312 ;;		_EUSART_Receive_ISR
 13313 ;; This function uses a non-reentrant model
 13314 ;;
 13315                           
 13316                           
 13317                           ;psect for function _RxFrameCheck
 13318  0754                     _RxFrameCheck:	
 13319                           
 13320                           ;incstack = 0
 13321                           ; Regs used in _RxFrameCheck: [wreg+fsr1l+fsr1h+status,2+status,0]
 13322                           ;RxFrameCheck@rx_arr stored from wreg
 13323  0754  00F8               	movwf	RxFrameCheck@rx_arr
 13324                           
 13325                           ;com.c: 128: unsigned char i = 0;
 13326  0755  01F7               	clrf	RxFrameCheck@i
 13327                           
 13328                           ;com.c: 129: unsigned int remainder = 0;
 13329  0756  01F9               	clrf	RxFrameCheck@remainder
 13330  0757  01FA               	clrf	RxFrameCheck@remainder+1
 13331                           
 13332                           ;com.c: 130: unsigned int tmp_crc = 0;
 13333  0758  01F5               	clrf	RxFrameCheck@tmp_crc
 13334  0759  01F6               	clrf	RxFrameCheck@tmp_crc+1
 13335                           
 13336                           ;com.c: 132: for(i = 2; i < frame_len - 3; i++)
 13337  075A  3002               	movlw	2
 13338  075B  00F1               	movwf	??_RxFrameCheck
 13339  075C  0871               	movf	??_RxFrameCheck,w
 13340  075D  00F7               	movwf	RxFrameCheck@i
 13341  075E                     i1l4499:	
 13342  075E  0870               	movf	RxFrameCheck@frame_len,w
 13343  075F  3EFD               	addlw	253
 13344  0760  00F1               	movwf	??_RxFrameCheck
 13345  0761  30FF               	movlw	255
 13346  0762  1803               	skipnc
 13347  0763  3000               	movlw	0
 13348  0764  00F2               	movwf	??_RxFrameCheck+1
 13349  0765  0872               	movf	??_RxFrameCheck+1,w
 13350  0766  3A80               	xorlw	128
 13351  0767  3C80               	sublw	128
 13352  0768  1D03               	skipz
 13353  0769  2F6C               	goto	u359_25
 13354  076A  0871               	movf	??_RxFrameCheck,w
 13355  076B  0277               	subwf	RxFrameCheck@i,w
 13356  076C                     u359_25:	
 13357  076C  1803               	btfsc	3,0
 13358  076D  2FC9               	goto	i1l4501
 13359                           
 13360                           ;com.c: 133: {
 13361                           ;com.c: 134: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 13362  076E  0879               	movf	RxFrameCheck@remainder,w
 13363  076F  00F2               	movwf	??_RxFrameCheck+1
 13364  0770  01F1               	clrf	??_RxFrameCheck
 13365  0771  087A               	movf	RxFrameCheck@remainder+1,w
 13366  0772  00F4               	movwf	??_RxFrameCheck+3
 13367  0773  0879               	movf	RxFrameCheck@remainder,w
 13368  0774  00F3               	movwf	??_RxFrameCheck+2
 13369  0775  0874               	movf	??_RxFrameCheck+3,w
 13370  0776  00F3               	movwf	??_RxFrameCheck+2
 13371  0777  01F4               	clrf	??_RxFrameCheck+3
 13372  0778  0871               	movf	??_RxFrameCheck,w
 13373  0779  0473               	iorwf	??_RxFrameCheck+2,w
 13374  077A  00F9               	movwf	RxFrameCheck@remainder
 13375  077B  0872               	movf	??_RxFrameCheck+1,w
 13376  077C  0474               	iorwf	??_RxFrameCheck+3,w
 13377  077D  00FA               	movwf	RxFrameCheck@remainder+1
 13378                           
 13379                           ;com.c: 135: remainder ^= rx_arr[i];
 13380  077E  0877               	movf	RxFrameCheck@i,w
 13381  077F  0778               	addwf	RxFrameCheck@rx_arr,w
 13382  0780  00F1               	movwf	??_RxFrameCheck
 13383  0781  0871               	movf	??_RxFrameCheck,w
 13384  0782  0086               	movwf	6
 13385  0783  3001               	movlw	1	; select bank2/3
 13386  0784  0087               	movwf	7
 13387  0785  0801               	movf	1,w
 13388  0786  00F2               	movwf	??_RxFrameCheck+1
 13389  0787  01F3               	clrf	??_RxFrameCheck+2
 13390  0788  0872               	movf	??_RxFrameCheck+1,w
 13391  0789  06F9               	xorwf	RxFrameCheck@remainder,f
 13392  078A  0873               	movf	??_RxFrameCheck+2,w
 13393  078B  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13394                           
 13395                           ;com.c: 136: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 13396  078C  087A               	movf	RxFrameCheck@remainder+1,w
 13397  078D  00F2               	movwf	??_RxFrameCheck+1
 13398  078E  0879               	movf	RxFrameCheck@remainder,w
 13399  078F  00F1               	movwf	??_RxFrameCheck
 13400  0790  3004               	movlw	4
 13401  0791                     u358_25:	
 13402  0791  36F2               	lsrf	??_RxFrameCheck+1,f
 13403  0792  0CF1               	rrf	??_RxFrameCheck,f
 13404  0793  0B89               	decfsz	9,f
 13405  0794  2F91               	goto	u358_25
 13406  0795  300F               	movlw	15
 13407  0796  0571               	andwf	??_RxFrameCheck,w
 13408  0797  00F3               	movwf	??_RxFrameCheck+2
 13409  0798  3000               	movlw	0
 13410  0799  0572               	andwf	??_RxFrameCheck+1,w
 13411  079A  00F4               	movwf	??_RxFrameCheck+3
 13412  079B  0873               	movf	??_RxFrameCheck+2,w
 13413  079C  06F9               	xorwf	RxFrameCheck@remainder,f
 13414  079D  0874               	movf	??_RxFrameCheck+3,w
 13415  079E  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13416                           
 13417                           ;com.c: 137: remainder ^= (unsigned int)((remainder << 8) << 4);
 13418  079F  0879               	movf	RxFrameCheck@remainder,w
 13419  07A0  00F2               	movwf	??_RxFrameCheck+1
 13420  07A1  01F1               	clrf	??_RxFrameCheck
 13421  07A2  0EF1               	swapf	??_RxFrameCheck,f
 13422  07A3  0EF2               	swapf	??_RxFrameCheck+1,f
 13423  07A4  30F0               	movlw	240
 13424  07A5  05F2               	andwf	??_RxFrameCheck+1,f
 13425  07A6  0871               	movf	??_RxFrameCheck,w
 13426  07A7  390F               	andlw	15
 13427  07A8  04F2               	iorwf	??_RxFrameCheck+1,f
 13428  07A9  30F0               	movlw	240
 13429  07AA  05F1               	andwf	??_RxFrameCheck,f
 13430  07AB  0871               	movf	??_RxFrameCheck,w
 13431  07AC  06F9               	xorwf	RxFrameCheck@remainder,f
 13432  07AD  0872               	movf	??_RxFrameCheck+1,w
 13433  07AE  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13434                           
 13435                           ;com.c: 138: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 13436  07AF  30FF               	movlw	255
 13437  07B0  0579               	andwf	RxFrameCheck@remainder,w
 13438  07B1  00F1               	movwf	??_RxFrameCheck
 13439  07B2  3000               	movlw	0
 13440  07B3  057A               	andwf	RxFrameCheck@remainder+1,w
 13441  07B4  00F2               	movwf	??_RxFrameCheck+1
 13442  07B5  0EF1               	swapf	??_RxFrameCheck,f
 13443  07B6  0EF2               	swapf	??_RxFrameCheck+1,f
 13444  07B7  30F0               	movlw	240
 13445  07B8  05F2               	andwf	??_RxFrameCheck+1,f
 13446  07B9  0871               	movf	??_RxFrameCheck,w
 13447  07BA  390F               	andlw	15
 13448  07BB  04F2               	iorwf	??_RxFrameCheck+1,f
 13449  07BC  30F0               	movlw	240
 13450  07BD  05F1               	andwf	??_RxFrameCheck,f
 13451  07BE  35F1               	lslf	??_RxFrameCheck,f
 13452  07BF  0DF2               	rlf	??_RxFrameCheck+1,f
 13453  07C0  0871               	movf	??_RxFrameCheck,w
 13454  07C1  06F9               	xorwf	RxFrameCheck@remainder,f
 13455  07C2  0872               	movf	??_RxFrameCheck+1,w
 13456  07C3  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13457  07C4  3001               	movlw	1
 13458  07C5  00F1               	movwf	??_RxFrameCheck
 13459  07C6  0871               	movf	??_RxFrameCheck,w
 13460  07C7  07F7               	addwf	RxFrameCheck@i,f
 13461  07C8  2F5E               	goto	i1l4499
 13462  07C9                     i1l4501:	
 13463                           
 13464                           ;com.c: 139: }
 13465                           ;com.c: 141: tmp_crc = rx_arr[frame_len - 2];
 13466  07C9  0870               	movf	RxFrameCheck@frame_len,w
 13467  07CA  3EFE               	addlw	-2
 13468  07CB  0778               	addwf	RxFrameCheck@rx_arr,w
 13469  07CC  00F1               	movwf	??_RxFrameCheck
 13470  07CD  0871               	movf	??_RxFrameCheck,w
 13471  07CE  0086               	movwf	6
 13472  07CF  3001               	movlw	1	; select bank2/3
 13473  07D0  0087               	movwf	7
 13474  07D1  0801               	movf	1,w
 13475  07D2  00F2               	movwf	??_RxFrameCheck+1
 13476  07D3  01F3               	clrf	??_RxFrameCheck+2
 13477  07D4  0872               	movf	??_RxFrameCheck+1,w
 13478  07D5  00F5               	movwf	RxFrameCheck@tmp_crc
 13479  07D6  0873               	movf	??_RxFrameCheck+2,w
 13480  07D7  00F6               	movwf	RxFrameCheck@tmp_crc+1
 13481                           
 13482                           ;com.c: 142: tmp_crc<<=8;
 13483  07D8  3008               	movlw	8
 13484  07D9                     u360_25:	
 13485  07D9  35F5               	lslf	RxFrameCheck@tmp_crc,f
 13486  07DA  0DF6               	rlf	RxFrameCheck@tmp_crc+1,f
 13487  07DB  0B89               	decfsz	9,f
 13488  07DC  2FD9               	goto	u360_25
 13489                           
 13490                           ;com.c: 143: tmp_crc|=rx_arr[frame_len - 3];
 13491  07DD  0870               	movf	RxFrameCheck@frame_len,w
 13492  07DE  3EFD               	addlw	-3
 13493  07DF  0778               	addwf	RxFrameCheck@rx_arr,w
 13494  07E0  00F1               	movwf	??_RxFrameCheck
 13495  07E1  0871               	movf	??_RxFrameCheck,w
 13496  07E2  0086               	movwf	6
 13497  07E3  3001               	movlw	1	; select bank2/3
 13498  07E4  0087               	movwf	7
 13499  07E5  0801               	movf	1,w
 13500  07E6  00F2               	movwf	??_RxFrameCheck+1
 13501  07E7  01F3               	clrf	??_RxFrameCheck+2
 13502  07E8  0872               	movf	??_RxFrameCheck+1,w
 13503  07E9  04F5               	iorwf	RxFrameCheck@tmp_crc,f
 13504  07EA  0873               	movf	??_RxFrameCheck+2,w
 13505  07EB  04F6               	iorwf	RxFrameCheck@tmp_crc+1,f
 13506                           
 13507                           ;com.c: 149: if(remainder == tmp_crc)
 13508  07EC  0876               	movf	RxFrameCheck@tmp_crc+1,w
 13509  07ED  067A               	xorwf	RxFrameCheck@remainder+1,w
 13510  07EE  1D03               	skipz
 13511  07EF  2FF2               	goto	u361_25
 13512  07F0  0875               	movf	RxFrameCheck@tmp_crc,w
 13513  07F1  0679               	xorwf	RxFrameCheck@remainder,w
 13514  07F2                     u361_25:	
 13515  07F2  1D03               	skipz
 13516  07F3  2FF6               	goto	i1l4513
 13517                           
 13518                           ;com.c: 150: {
 13519                           ;com.c: 151: return 1;
 13520  07F4  3001               	movlw	1
 13521                           
 13522                           ;com.c: 152: }
 13523  07F5  0008               	return
 13524  07F6                     i1l4513:	
 13525                           
 13526                           ;com.c: 153: else
 13527                           ;com.c: 154: {
 13528                           ;com.c: 155: return 0;
 13529  07F6  3000               	movlw	0
 13530  07F7  0008               	return
 13531  07F8                     __end_of_RxFrameCheck:	
 13532  007E                     btemp	set	126	;btemp
 13533  007E                     int$flags	set	126
 13534  007E                     wtemp	set	126
 13535  007E                     wtemp0	set	126
 13536  0080                     wtemp1	set	128
 13537  0082                     wtemp2	set	130
 13538  0084                     wtemp3	set	132
 13539  0086                     wtemp4	set	134
 13540  0088                     wtemp5	set	136
 13541  007F                     wtemp6	set	127
 13542  007E                     ttemp	set	126
 13543  007E                     ttemp0	set	126
 13544  0081                     ttemp1	set	129
 13545  0084                     ttemp2	set	132
 13546  0087                     ttemp3	set	135
 13547  007F                     ttemp4	set	127
 13548  007E                     ltemp	set	126
 13549  007E                     ltemp0	set	126
 13550  0082                     ltemp1	set	130
 13551  0086                     ltemp2	set	134
 13552  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    21
    Data        2
    BSS         203
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     65      75
    BANK1            80     78      80
    BANK2            80      0      80
    BANK3            80      5      57
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 7
		 -> rtc_save_ch2(BANK2[7]), rtc_save_ch1(BANK2[7]), 

    memset@p1	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    memset@p	PTR unsigned char  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    CRC_cal@rx_arr	PTR unsigned char  size(1) Largest target is 72
		 -> Inf_to_Com@tmp_buf(BANK1[72]), Read_time_to_Com@tmp_buf(BANK0[16]), 

    RxFrameCheck@rx_arr	PTR unsigned char  size(1) Largest target is 32
		 -> Usart_Rx_Buff(BANK3[32]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    Bq32k_Rtc_Write_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    Bq32k_Rtc_Read_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    I2C_Send_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Write_Time@temp(BANK0[10]), Bq32k_Time_Init@temp(COMMON[2]), 

    I2C_Read_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Read_Time@temp(BANK0[10]), 

    sp__memset	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    WriteAll_1621@p	PTR unsigned char  size(2) Largest target is 21
		 -> time_Display@num(BANK0[4]), err_Display@num(BANK0[4]), Two_Display@num(BANK0[4]), display_buff(BANK2[4]), 
		 -> Dis_TAB(CODE[21]), 

    maxim_31856_read_nregisters@uch_buff	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK2[8]), 

    FLASH_readBlock@buffer	PTR unsigned int  size(1) Largest target is 64
		 -> Flash_buff(BANK4[64]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK2[8]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack
    _EUSART_Receive_ISR->_RxFrameCheck

Critical Paths under _main in BANK0

    _main->_Key_Process
    _Sleep_process->_Step_control
    _Save_process->_Calculate_Time
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize
    _temperature_process->_temperature_display
    _time_Display->_Bq32k_Rtc_Read_Time
    _temperature_display->_tc_temperature_trans
    _tc_temperature_trans->_Calculate_Time
    _Calculate_Time->_Save_Write_time
    _Write_Flash_head->_Save_Write_word
    _Write_Flash_finish->_Save_Write_word
    _Save_Write_time->_Bq32k_Rtc_Read_Time
    _Save_Write_word->_FLASH_WriteWord
    _maxim_clear_fault_status->_maxim_31856_read_register
    _err_Display->_WriteAll_1621
    _Tc_Display->___lwdiv
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_31856_read_nregisters
    _maxim_start_conversion->_maxim_31856_read_register
    _maxim_31856_write_register->_SPI_Exchange8bit
    _maxim_31856_read_register->_SPI_Exchange8bit
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _Two_Display->_WriteAll_1621
    _WriteAll_1621->_SendBit_1621
    _WriteAll_1621->_SendDataBit_1621
    _SendCmd_1621->_SendBit_1621
    _Com_Process->_Set_time_from_Com
    _Set_time_from_Com->_Bq32k_Rtc_Write_Time
    _Set_time_from_Com->_Read_time_to_Com
    _Read_time_to_Com->_CRC_cal
    _Bq32k_Rtc_Write_Time->_bin2bcd
    _bin2bcd->___awdiv
    _I2C_Send_Buffer->_I2C_Send_Byte
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _bcd2bin->___bmul
    _I2C_Read_Buffer->_I2C_Receive_Byte
    _I2C_Read_Buffer->_I2C_Send_Byte
    _Inf_to_Com->_CRC_cal
    _FLASH_readBlock->_FLASH_ReadWord

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _Com_Process->_Inf_to_Com

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  123965
                                             61 BANK0      4     4      0
                                              0 BANK3      5     5      0
                        _Com_Process
                        _Key_Process
                  _SYSTEM_Initialize
                       _Save_process
                       _SendCmd_1621
                  _Serach_Flash_Head
                    _Set_finish_flag
                      _Sleep_process
                      _WriteAll_1621
                 _Write_Flash_finish
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _Sleep_process                                        0     0      0       0
                       _Step_control
 ---------------------------------------------------------------------------------
 (2) _Step_control                                         1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serach_Flash_Head                                    6     6      0    4122
                                             12 BANK0      6     6      0
                     _FLASH_ReadWord
                 _Write_Flash_finish
 ---------------------------------------------------------------------------------
 (1) _Save_process                                         4     4      0   18332
                                             46 BANK0      4     4      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Key_Process                                          2     2      0   50377
                                             59 BANK0      2     2      0
                   _FLASH_EraseBlock
                           _Key_Scan
                    _Save_Write_time
                       _SendCmd_1621
                    _Set_finish_flag
                     _Set_start_flag
                 _Write_Flash_finish
                   _Write_Flash_head
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _temperature_process                                  0     0      0   37293
                        _Two_Display
              _one_temperature_trans
                _temperature_display
                       _time_Display
 ---------------------------------------------------------------------------------
 (2) _time_Display                                         7     7      0    5180
                                             22 BANK0      7     7      0
                _Bq32k_Rtc_Read_Time
                      _WriteAll_1621
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _temperature_display                                  1     1      0   27548
                                             58 BANK0      1     1      0
                         _Tc_Display
                        _err_Display
         _maxim_31856_write_register
           _maxim_clear_fault_status
               _tc_temperature_trans
 ---------------------------------------------------------------------------------
 (3) _tc_temperature_trans                                12    12      0   19111
                                             46 BANK0     12    12      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Calculate_Time                                      22    22      0   14828
                                             24 BANK0     22    22      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_time
                 _Write_Flash_finish
                   _Write_Flash_head
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1368
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_head                                     0     0      0    3415
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_finish                                   0     0      0    3415
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (5) _Save_Write_time                                      3     3      0    4916
                                             22 BANK0      2     2      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Save_Write_word                                      6     4      2    3415
                                              6 BANK0      6     4      2
                   _FLASH_EraseBlock
                     _FLASH_ReadWord
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteWord                                      5     1      4     466
                                              1 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     635
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _maxim_clear_fault_status                             1     1      0    1652
                                              5 BANK0      1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (3) _err_Display                                          5     5      0    1834
                                             11 BANK0      5     5      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _Tc_Display                                           4     4      0    3395
                                             15 BANK0      4     4      0
                      _WriteAll_1621
                            ___lwdiv
                            ___lwmod
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     324
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     540
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     703
                                              7 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _one_temperature_trans                                2     2      0    2700
                                             14 BANK0      2     2      0
        _maxim_31856_read_nregisters
             _maxim_start_conversion
 ---------------------------------------------------------------------------------
 (3) _maxim_start_conversion                               2     2      0    1683
                                              5 BANK0      2     2      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_write_register                           2     1      1    1556
                                              2 BANK0      2     1      1
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_read_register                            3     3      0      96
                                              2 BANK0      3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _maxim_31856_read_nregisters                          5     3      2    1017
                                              9 BANK0      5     3      2
                   _SPI_Exchange8bit
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     739
                                              2 BANK0      7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Two_Display                                          6     6      0    1865
                                             11 BANK0      6     6      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _WriteAll_1621                                        6     3      3    1723
                                              5 BANK0      6     3      3
                       _SendBit_1621
                   _SendDataBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendDataBit_1621                                     4     3      1     256
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Set_start_flag                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_finish_flag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendCmd_1621                                         2     2      0     595
                                              5 BANK0      2     2      0
                       _SendBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendBit_1621                                         4     3      1     564
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Key_Scan                                             3     3      0      40
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Com_Process                                          0     0      0    8096
                         _Inf_to_Com
                  _Set_time_from_Com
 ---------------------------------------------------------------------------------
 (2) _Set_time_from_Com                                    1     1      0    5857
                                             31 BANK0      1     1      0
                _Bq32k_Rtc_Read_Time
               _Bq32k_Rtc_Write_Time
                   _Read_time_to_Com
 ---------------------------------------------------------------------------------
 (3) _Read_time_to_Com                                    20    20      0    1307
                                             11 BANK0     20    20      0
                            _CRC_cal
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Write_Time                                13    13      0    3049
                                             18 BANK0     13    13      0
                    _I2C_Send_Buffer
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (4) _bin2bcd                                              8     8      0    1864
                                             10 BANK0      8     8      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     895
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     907
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _I2C_Send_Buffer                                      7     5      2     676
                                              4 BANK0      7     5      2
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Read_Time                                 13    13      0    1501
                                              9 BANK0     13    13      0
                    _I2C_Read_Buffer
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (4) _bcd2bin                                              4     4      0     275
                                              5 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     213
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Buffer                                      5     3      2     599
                                              4 BANK0      5     3      2
                   _I2C_Receive_Byte
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_Byte                                        3     3      0     102
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Receive_Byte                                     3     3      0     108
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Inf_to_Com                                          83    83      0    2239
                                             11 BANK0      5     5      0
                                              0 BANK1     78    78      0
                            _CRC_cal
                       _EUSART_Write
                    _FLASH_readBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_readBlock                                      5     2      3     693
                                              4 BANK0      5     2      3
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     404
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _CRC_cal                                             10     8      2     557
                                              1 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0     548
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            1     1      0       0
                                              1 COMMON     1     1      0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  3     3      0     548
                                             11 COMMON     3     3      0
                       _RxFrameCheck
 ---------------------------------------------------------------------------------
 (12) _RxFrameCheck                                       11    10      1     437
                                              0 COMMON    11    10      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Com_Process
     _Inf_to_Com
       _CRC_cal
       _EUSART_Write
       _FLASH_readBlock
         _FLASH_ReadWord
     _Set_time_from_Com
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Bq32k_Rtc_Write_Time
         _I2C_Send_Buffer
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bin2bcd
           ___awdiv
           ___awmod
       _Read_time_to_Com
         _CRC_cal
         _EUSART_Write
   _Key_Process
     _FLASH_EraseBlock
     _Key_Scan
     _Save_Write_time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_word
         _FLASH_EraseBlock
         _FLASH_ReadWord
         _FLASH_WriteWord
     _SendCmd_1621
       _SendBit_1621
     _Set_finish_flag
     _Set_start_flag
     _Write_Flash_finish
       _Save_Write_word
         _FLASH_EraseBlock
         _FLASH_ReadWord
         _FLASH_WriteWord
     _Write_Flash_head
       _Save_Write_word
         _FLASH_EraseBlock
         _FLASH_ReadWord
         _FLASH_WriteWord
     _temperature_process
       _Two_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _one_temperature_trans
         _maxim_31856_read_nregisters
           _SPI_Exchange8bit
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
         _maxim_start_conversion
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
       _temperature_display
         _Tc_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
           _memset
         _err_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
         _maxim_31856_write_register
           _SPI_Exchange8bit
         _maxim_clear_fault_status
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
         _tc_temperature_trans
           _Calculate_Time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_time
               _Bq32k_Rtc_Read_Time
                 _I2C_Read_Buffer
                   _I2C_Receive_Byte
                   _I2C_Send_Byte
                   _I2C_Start
                   _I2C_Stop
                 _bcd2bin
                   ___bmul
               _Save_Write_word
                 _FLASH_EraseBlock
                 _FLASH_ReadWord
                 _FLASH_WriteWord
             _Write_Flash_finish
               _Save_Write_word
                 _FLASH_EraseBlock
                 _FLASH_ReadWord
                 _FLASH_WriteWord
             _Write_Flash_head
               _Save_Write_word
                 _FLASH_EraseBlock
                 _FLASH_ReadWord
                 _FLASH_WriteWord
             ___wmul
           _Save_Write_word
             _FLASH_EraseBlock
             _FLASH_ReadWord
             _FLASH_WriteWord
       _time_Display
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___awdiv
         ___awmod
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR0_Initialize
   _Save_process
     _Calculate_Time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_time
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_ReadWord
           _FLASH_WriteWord
       _Write_Flash_finish
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_ReadWord
           _FLASH_WriteWord
       _Write_Flash_head
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_ReadWord
           _FLASH_WriteWord
       ___wmul
     _Save_Write_word
       _FLASH_EraseBlock
       _FLASH_ReadWord
       _FLASH_WriteWord
   _SendCmd_1621
     _SendBit_1621
   _Serach_Flash_Head
     _FLASH_ReadWord
     _Write_Flash_finish
       _Save_Write_word
         _FLASH_EraseBlock
         _FLASH_ReadWord
         _FLASH_WriteWord
   _Set_finish_flag
   _Sleep_process
     _Step_control
   _WriteAll_1621
     _SendBit_1621
     _SendDataBit_1621
   _Write_Flash_finish
     _Save_Write_word
       _FLASH_EraseBlock
       _FLASH_ReadWord
       _FLASH_WriteWord
   _temperature_process
     _Two_Display
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
     _one_temperature_trans
       _maxim_31856_read_nregisters
         _SPI_Exchange8bit
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _maxim_start_conversion
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
     _temperature_display
       _Tc_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         _memset
       _err_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _maxim_31856_write_register
         _SPI_Exchange8bit
       _maxim_clear_fault_status
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
       _tc_temperature_trans
         _Calculate_Time
           _Bq32k_Rtc_Read_Time
             _I2C_Read_Buffer
               _I2C_Receive_Byte
               _I2C_Send_Byte
               _I2C_Start
               _I2C_Stop
             _bcd2bin
               ___bmul
           _Save_Write_time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_word
               _FLASH_EraseBlock
               _FLASH_ReadWord
               _FLASH_WriteWord
           _Write_Flash_finish
             _Save_Write_word
               _FLASH_EraseBlock
               _FLASH_ReadWord
               _FLASH_WriteWord
           _Write_Flash_head
             _Save_Write_word
               _FLASH_EraseBlock
               _FLASH_ReadWord
               _FLASH_WriteWord
           ___wmul
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_ReadWord
           _FLASH_WriteWord
     _time_Display
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
       ___awdiv
       ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
     _RxFrameCheck
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     41      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4E      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      5      39      11       71.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     172      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     172      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Sep 08 09:17:26 2016

                        __end_of_I2C_Send_Buffer 08F1                                   _SPI_Initialize 13CC  
                     ?_maxim_31856_read_register 0070                                     _Usart_Rx_Cnt 0068  
  maxim_31856_read_register@uch_register_address 0023                                   ___bmul@product 0023  
                             __size_of_I2C_Start 001D                       FLASH_WriteWord@GIEBitValue 0025  
                                    __CFG_CP$OFF 0000                                ?_Write_Flash_head 0070  
                                  _Usart_Rx_Buff 01B4                                               l71 13E0  
                                   ___awdiv@sign 0027                          ?_SPI_Exchange8bitBuffer 0022  
                         __end_of_FVR_Initialize 13BC                              ___wmul@multiplicand 0023  
                               ?_Save_Write_time 0070                                 ?_Save_Write_word 0026  
                                _timer0ReloadVal 016D                               ??_Write_Flash_head 002C  
                           Bq32k_Rtc_Read_Time@p 0035                                              l173 13EC  
                                            l700 08B5                                              l630 01ED  
                                            l640 01CB                                              l490 0510  
                                            l651 025F                                              l643 0224  
                                            l628 0118                                              l646 022C  
                                            l494 0552                                              l743 164F  
                                            l655 09B9                                              l656 09B8  
                                            l648 0257                                              l496 0557  
                                            l488 050E                                              l745 1651  
                                            l761 1672                                              l843 0AF4  
                                            l855 0B1A                                              l759 1670  
                                            l865 0B31                                              l849 0AF9  
                                            l884 17BB                                              l788 0847  
                                            l798 0605                                              l983 16BE  
                                            l799 062F                                              l984 16C2  
                                            l978 16C8                                              l998 0EEF  
                                            _RB1 0069                                              _RB3 006B  
                                            _RB5 006D                                              _RA7 0067  
                                   ?_err_Display 0070                                     ___awmod@sign 0027  
                                 _Usart_Run_Flag 016B                               _Write_Flash_finish 1404  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000                                 ?_FLASH_WriteWord 0021  
                         _maxim_start_conversion 1603                              __end_of_Com_Process 1445  
                                __end_of_CRC_cal 0DD9                                     __CFG_LVP$OFF 0000  
                                           l1013 0F09                                             l1023 0F5A  
                                           l1007 0F04                                             l1130 0C32  
                                           l1027 0F69                                             l1134 0C66  
                                           l1305 151D                                             l1226 15B8  
                                           l5201 17CD                                             l6011 09C9  
                                           l5151 0AFB                                             l5215 1448  
                                           l6007 09C1                                             l6041 094E  
                                           l6033 093E                                             l5219 144E  
                                           l6211 089D                                             l5405 074F  
                                           l6045 0956                                             l6037 0946  
                                           l6213 08A0                                             l5343 0D12  
                                           l5345 0D3D                                             l5441 1667  
                                           l6217 08A3                                             l6307 04BD  
                                           l5507 0AD5                                             l5371 069F  
                                           l6403 0F5F                                             l5613 0A5E  
                                           l6229 16B0                                             l5429 1646  
                                           l6341 0A40                                             l6333 0A33  
                                           l6325 0A24                                             l5631 0A84  
                                           l5623 0A66                                             l5607 0A53  
                                           l5519 082D                                             l5703 087A  
                                           l5391 0707                                             l5383 06D4  
                                           l6343 0A42                                             l6247 16D7  
                                           l5625 0A72                                             l5721 1763  
                                           l6185 0880                                             l6425 0C48  
                                           l6249 16D8                                             l6291 0454  
                                           l5635 0A8D                                             l5651 0976  
                                           l5715 174B                                             l5387 06F9  
                                           l5395 0721                                             l5563 033F  
                                           l6363 0F0A                                             l6355 0EF0  
                                           l6293 0485                                             l5493 0AB2  
                                           l5717 1757                                             l5725 176C  
                                           l5469 1517                                             l5813 0132  
                                           l6197 088D                                             l6461 15C0  
                                           l5639 0A95                                             l5663 0983  
                                           l5655 097D                                             l5495 0AC8  
                                           l5911 064A                                             l5399 0737  
                                           l5567 0348                                             l5815 013B  
                                           l6199 0890                                             l6375 0F26  
                                           l6367 0F12                                             l6359 0EF8  
                                           l5665 098F                                             l5673 09A4  
                                           l6449 143D                                             l5489 0AA4  
                                           l5497 0ACD                                             l5921 066E  
                                           l5577 0357                                             l5761 0085  
                                           l6393 0F4B                                             l5499 0AD2  
                                           l5691 0853                                             l5915 0655  
                                           l5907 05CD                                             l5587 0408  
                                           l5843 0187                                             l5677 09AC  
                                           l5669 099B                                             l5693 085F  
                                           l5597 14FE                                             l5917 0664  
                                           l5909 05E8                                             l6397 0F52  
                                           l6573 0559                                             l5847 01A1  
                                           l5839 0177                                             l5791 00D4  
                                           l5865 01E5                                             l5699 0871  
                                           l5883 0235                                             l5795 00EE  
                                           l5787 00C4                                             l6587 0586  
                                           l6595 05B0                                             l5957 08D4  
                                           l5983 0D68                                             l5959 08EE  
                                           l5985 0DD3                                             l5999 15E5  
                            ?_Write_Flash_finish 0070                                             _LATA 010C  
                                           _LATB 010D                                             _LATC 010E  
                                           u5005 0A85                                             u5300 00A0  
                                           u5205 174E                                             u5135 0856  
                                           u5400 0152                                             u5065 0986  
                                           u5225 175D                                             u5410 0153  
                                           u5155 0860                                             u5235 1764  
                                           u5085 0995                                             u5165 086A  
                                           u5095 099C                                             u5175 0872  
                                           u4625 06DE                                             u6305 0590  
                                           u5290 009F                                             u4555 1476  
                                           u5355 00DD                                             u6407 0D33  
                                           u6417 0D4C                                             u5465 0190  
                                           u6507 155F                                             u6427 0D53  
                                           u6347 0501                                             u6517 1566  
                                           u6437 0D5A                                             u5645 1798  
                                           u6357 1676                                             u4765 151E  
                                           u5655 0D9B                                             u6607 17C2  
                                           u6527 0AFE                                             u6447 156E  
                                           u6367 1655                                             u4775 1523  
                                           u5665 0D76                                             u6537 0B05  
                                           u6457 1575                                             u6377 16B4  
                                           u6547 0B0F                                             u6467 157C  
                                           u6387 0D25                                             u6557 0B1F  
                                           u6477 1583                                             u6397 0D2C  
                                           u4965 0A69                                             u6567 0B26  
                                           u6487 1551                                             u6577 0B38  
                                           u6497 1558                                             u4985 0A73  
                                           u6587 0B3F                                             u4995 0A7D  
                                           u6597 17B0                                             u5895 04D1  
                                           _TMR0 0015                                             _WPUB 020D  
                                           _WPUE 0210                              RxFrameCheck@tmp_crc 0075  
                                   __CFG_WRT$OFF 0000                                    __CFG_FCMEN$ON 0000  
                        __size_of_Set_start_flag 0006                           __size_of_WriteAll_1621 0035  
                                  ??_Key_Process 005B                                             _main 04E3  
                                           fsr0h 0005                                             fsr1h 0007  
                                           fsr0l 0004                                             indf0 0000  
                                           indf1 0001                                             fsr1l 0006  
                                           btemp 007E                                 __end_of_I2C_Stop 1586  
                                  __CFG_BOREN$ON 0000                                      Inf_to_Com@i 00EC  
                                           ltemp 007E                              SendCmd_1621@command 0026  
                                           start 0027                                             ttemp 007E  
                                           wtemp 007E                                  __end_of_Dis_TAB 1815  
                              ?_Read_time_to_Com 0070                           __end_of_SPI_Initialize 13D2  
                               ?_I2C_Read_Buffer 0024                                ___bmul@multiplier 0024  
                                  __CFG_MCLRE$ON 0000                                     main@bat_data 01D7  
                             ??_Read_time_to_Com 002B                   __end_of_SPI_Exchange8bitBuffer 0AED  
                                time_Display@num 0039                             ??_Write_Flash_finish 002C  
                        __end_of_TMR0_Initialize 1434                                  ?_FVR_Initialize 0070  
                                  ?_EUSART_Write 0070                   __size_of_OSCILLATOR_Initialize 0005  
                  __end_of_OSCILLATOR_Initialize 13C6                                  __end_of_bcd2bin 147F  
                                          ?_main 0070                                  __end_of___awdiv 0A9A  
                                __end_of___awmod 09B1                                  ___awdiv@divisor 0021  
                                          _LATA0 0860                                            _LATA1 0861  
                                          _LATB0 0868                                            _LATA2 0862  
                                __end_of_bin2bcd 179F                                            _LATB1 0869  
                                          _LATA3 0863                                            _LATC0 0870  
                                          _LATA4 0864                                            _LATC1 0871  
                                          _LATA5 0865                                            _LATC2 0872  
                                          _LATA6 0866                                  __end_of___lwdiv 087F  
                                          i1l201 0E42                                            i1l203 0E46  
                                          i1l334 14CF                                            i1l351 0010  
                                          i1l353 001A                                  __end_of___lwmod 1771  
                                          i1l179 15A1                                            i1l357 0022  
                                ___awdiv@counter 0026                                            _RCREG 0199  
                                          _RCSTA 019D                                       _Flash_buff 0220  
                                          u473m0 0E65                                            u474m0 0E74  
                                          u491m0 0401                                            u488m0 0338  
                        ??_one_temperature_trans 002E                                ?_SendDataBit_1621 0021  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                 ?_FLASH_readBlock 0024  
                                          _TXREG 019A                                            _TXSTA 019E  
                               __end_of_TMR0_ISR 14F8                               ??_SendDataBit_1621 0022  
                   __end_of_tc_temperature_trans 0268                                            main@i 01D6  
                              __end_of_I2C_Start 1569                              _Bq32k_Rtc_Read_Time 0C7C  
                                Tc_Display@count 0030                                WriteAll_1621@addr 0029  
                                          ltemp0 007E                                            ltemp1 0082  
                                          ltemp2 0086                                            ltemp3 0080  
                                          ttemp0 007E                                            ttemp1 0081  
                                          ttemp2 0084                                            ttemp3 0087  
                                          ttemp4 007F                                            status 0003  
                                          wtemp0 007E                                            wtemp1 0080  
                                          wtemp2 0082                                            wtemp3 0084  
                                          wtemp4 0086                                            wtemp5 0088  
                                          wtemp6 007F                                       _Inf_to_Com 040A  
                         __size_of_I2C_Send_Byte 0056                                  _Cur_temperature 0130  
                                     _Tc_Display 05B8                                  ?_SPI_Initialize 0070  
                    __end_of_temperature_display 096B                                  __initialization 0029  
                            __end_of_Key_Process 0F6A                                 ?_I2C_Send_Buffer 0024  
                                   __end_of_main 05B8                            RxFrameCheck@frame_len 0070  
                                 WriteAll_1621@i 002A                                   WriteAll_1621@p 0025  
                               __end_of_Key_Scan 16CA                                    main@data_temp 01D4  
                                 ??_EUSART_Write 0021                             ?_Bq32k_Rtc_Read_Time 0070  
                    __end_of_temperature_process 08B6                            __end_of_Sleep_process 15C3  
                                 __CFG_LPBOR$OFF 0000     maxim_31856_write_register@uch_register_value 0022  
                    ?_INTERRUPT_InterruptManager 0070                                    _WriteAll_1621 0815  
                                         ??_main 005D                                      _Com_Process 1434  
 maxim_31856_write_register@uch_register_address 0023                               _Cur_Save_Index_Bak 012E  
                                      ??_CRC_cal 0023                          __size_of_FLASH_ReadWord 0020  
                        Bq32k_Rtc_Read_Time@temp 002B                                I2C_Receive_Byte@i 0023  
                                  CRC_cal@rx_arr 0027                         __end_of_SPI_Exchange8bit 13E4  
                          RxFrameCheck@remainder 0079                                           _ADCON0 009D  
                                         _ADCON1 009E                                           _ADRESH 009C  
                                         _ADRESL 009B                                 ___awdiv@dividend 0023  
                                         _APFCON 011D                                           _ANSELA 018C  
                                         _ANSELB 018D                                           _ANSELC 018E  
                                         i1l4501 07C9                                           i1l4513 07F6  
                                         i1l4711 0E1E                                           i1l4705 0E14  
                                         i1l4715 0E24                                           i1l4725 0E4A  
                                         i1l4727 0E53                                           i1l4671 0DDE  
                                         i1l4499 075E                                           i1l4683 0DF9  
                                         i1l4699 0E09                                           _FVRCON 0117  
                                         _PMADRH 0192                                           u360_25 07D9  
                                         _PMADRL 0191                                           u361_25 07F2  
                                         _PMDATH 0194                                           _PMDATL 0193  
                              _temperature_value 0061                                           _PMCON2 0196  
                      __size_of_FLASH_EraseBlock 0020                                           u358_25 0791  
                                         u359_25 076C                                           _OSCCON 0099  
                                         _SPBRGH 019C                                           _SPBRGL 019B  
                       _Cur_temperature_time_ch1 0136                         _Cur_temperature_time_ch2 0137  
                                         _WDTPS0 04B9                                           _WDTPS1 04BA  
                                         _WDTPS2 04BB                                           _WDTPS3 04BC  
                                         _WDTPS4 04BD                                           _TRISB1 0469  
                                         _TRISB3 046B                                           _SSPBUF 0211  
                                  ?_SendCmd_1621 0070                                           _SWDTEN 04B8  
                   __end_of_Bq32k_Rtc_Write_Time 0BAA                                    ?_SendBit_1621 0021  
                                 __CFG_PWRTE$OFF 0000                                 SendBit_1621@data 0023  
                                         ___bmul 1445                                        ??_bcd2bin 0025  
                                  RxFrameCheck@i 0077                                           ___wmul 1514  
                                      ??___awdiv 0025                                   __CFG_STVREN$ON 0000  
                                      ??___awmod 0025                            ??_Bq32k_Rtc_Read_Time 0029  
                                      ??_bin2bcd 002A                                        ??___lwdiv 002B  
                                      ??___lwmod 0025                              _EUSART_Transmit_ISR 1586  
                   ?_maxim_31856_read_nregisters 0029                              FLASH_WriteWord@word 0023  
                                 ?_WriteAll_1621 0025                                 ?_TMR0_Initialize 0070  
                                         _memset 14F8                                ?_I2C_Receive_Byte 0070  
                               ___awdiv@quotient 0028                                  ___awmod@divisor 0021  
                                         _uch_sr 0149                                  ___awmod@counter 0026  
                                         _rtc_tm 0160                                  _Set_finish_flag 13BC  
                                  _I2C_Send_Byte 0AED                               ??_I2C_Receive_Byte 0021  
                        FLASH_ReadWord@flashAddr 0021                                        ?_I2C_Stop 0070  
                   ??_maxim_31856_write_register 0023                            I2C_Read_Buffer@Length 0025  
                           __size_of_err_Display 002C                            __end_of_TMR0_CallBack 14DD  
                                     bcd2bin@val 0028                       ??_maxim_clear_fault_status 0025  
                           ?_EUSART_Transmit_ISR 0070                                   _Set_start_flag 13C6  
                              _SYSTEM_Initialize 0800                                   ??_SendCmd_1621 0025  
                        __end_of__initialization 0054                                   ??_SendBit_1621 0022  
                                    _Key_Process 0ED8                                      ?_Inf_to_Com 0070  
                             ?_SYSTEM_Initialize 0070                                 CRC_cal@frame_len 0021  
                                    ?_Tc_Display 0070                               Calculate_Time@temp 0042  
                            ___bmul@multiplicand 0021                                    ?_RxFrameCheck 0070  
                              time_Display@F2144 01B0             tc_temperature_trans@temperature_back 0052  
                                 __pcstackCOMMON 0070             tc_temperature_trans@temperature_temp 0058  
                                   __pidataBANK2 0002                              ??_SYSTEM_Initialize 0022  
                           _tc_temperature_trans 0058                                        ?_TMR0_ISR 0070  
                    ??_maxim_31856_read_register 0022              __size_of_maxim_31856_write_register 0010  
                                  ?_Save_process 0070                                   ?_I2C_Send_Byte 0070  
                  ??_maxim_31856_read_nregisters 002B                                 CRC_cal@remainder 0029  
                        ?_maxim_start_conversion 0070                                   _OPTION_REGbits 0095  
                          TMR0_ISR@CountCallBack 0128                                  _temperature_int 0132  
                                     ??_I2C_Stop 0021                                    ??_Two_Display 002B  
                               Two_Display@F2138 0120                             I2C_Receive_Byte@Data 0022  
                         __end_of_Set_start_flag 13CC                              I2C_Read_Buffer@Flag 0028  
                      __end_of_SYSTEM_Initialize 0815                        __size_of_Write_Flash_head 0010  
                          ??_EUSART_Transmit_ISR 0070                              I2C_Read_Buffer@buff 0024  
                                     __pbssBANK0 0061                                       __pbssBANK1 00EE  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                                     __pbssBANK4 0220                                        ?_Key_Scan 0070  
                           __end_of_EUSART_Write 13F4                                  __CFG_VCAPEN$OFF 0000  
                    __size_of_EUSART_Receive_ISR 007D                                       bin2bcd@val 0031  
                                 ??_RxFrameCheck 0071                                 ??_FVR_Initialize 0021  
                                     __pmaintext 04E3                                          ?___bmul 0021  
                        __end_of_Set_finish_flag 13C1                            ?_tc_temperature_trans 0070  
                                    _Record_flag 0067                                  ??_WriteAll_1621 0028  
                                        ?___wmul 0021                                       ??_TMR0_ISR 0071  
                                 ??_Save_process 004E                                       __pintentry 0004  
                                        _BAUDCON 019F                                          ?_memset 0021  
                 __end_of_maxim_start_conversion 1623                          __size_of_ADC_Initialize 0008  
                                 _FLASH_ReadWord 15C3                                    _eusartRxCount 013B  
                                        _CRC_cal 0D5F                        __size_of_Read_time_to_Com 0069  
                           _Bq32k_Rtc_Write_Time 0B43                              __size_of_Inf_to_Com 00D9  
                            __size_of_Tc_Display 00D1                   __size_of_one_temperature_trans 004A  
                  __end_of_one_temperature_trans 09FB                                          _OSCSTAT 009A  
                       __size_of_Save_Write_time 0082                                          _SSP1ADD 0212  
                       __size_of_Save_Write_word 00CB                        _maxim_31856_read_register 147F  
                                ?_Set_start_flag 0070             __size_of_maxim_31856_read_nregisters 0018  
                                     ??_Key_Scan 0021                                          _Dis_TAB 1800  
                               _FLASH_EraseBlock 1623                                 ??_SPI_Initialize 0021  
                       __size_of_FLASH_WriteWord 002B                          __size_of_Calculate_Time 01A2  
                            __end_of_Two_Display 1800                        __size_of_SendDataBit_1621 0021  
                                      _I2C_Start 154C  maxim_31856_read_nregisters@uch_register_address 002D  
                                      _CH1_state 0134                                        _CH2_state 0135  
                                        _bcd2bin 146A                                  __size_of___bmul 0012  
                                  ?_time_Display 0070                                          ___awdiv 0A48  
                                        ___awmod 096B                                  __size_of___wmul 001C  
                                        _bin2bcd 1771                                          ___lwdiv 084A  
                                        ___lwmod 1744                                  ??_I2C_Send_Byte 0021  
                    __size_of_Write_Flash_finish 0010                                I2C_Send_Byte@Data 0022  
                         __end_of_FLASH_ReadWord 15E3                                  __size_of_memset 001C  
                       __size_of_I2C_Read_Buffer 0078                                          __ptext1 15A4  
                                        __ptext2 16CA                                          __ptext3 09FB  
                                        __ptext4 0C13                                          __ptext5 0800  
                                        __ptext6 1424                                          __ptext7 13CC  
                                        __ptext8 1685                                          __ptext9 13C1  
                                   ?_Com_Process 0070                             __end_of_SendCmd_1621 14AC  
                        Read_time_to_Com@crc_tmp 003C                             SendDataBit_1621@data 0023  
                           __end_of_SendBit_1621 1664                            ?_Bq32k_Rtc_Write_Time 0070  
             __end_of_maxim_31856_write_register 1404                       _maxim_31856_write_register 13F4  
                          _OSCILLATOR_Initialize 13C1                                   I2C_Send_Byte@i 0023  
                               ___awmod@dividend 0023                                          _uch_cr0 00EF  
                                        _uch_cr1 0144                         ??_PIN_MANAGER_Initialize 0021  
                                        _uch_reg 014A                 __end_of_maxim_clear_fault_status 146A  
                              ?_SPI_Exchange8bit 0070                          Read_time_to_Com@tmp_buf 002C  
                          I2C_Send_Buffer@Length 0025                       __size_of_SYSTEM_Initialize 0015  
                                        clrloop0 13D3                             end_of_initialization 0054  
                             ??_SPI_Exchange8bit 0021                             SPI_Exchange8bit@data 0021  
                       __size_of_FLASH_readBlock 0020                             FLASH_readBlock@count 0026  
                                        memset@c 0021                                          memset@n 0023  
                                        memset@p 0027                                       ?_I2C_Start 0070  
                              _EUSART_Initialize 1530                                     _Inf_cmd_flag 0138  
                         ??_tc_temperature_trans 004E                               ?_EUSART_Initialize 0070  
                                 ??_time_Display 0036                                        _RCSTAbits 019D  
                               ?_Set_finish_flag 0070                            Serach_Flash_Head@data 002E  
                                   __pstringtext 1800                        FLASH_ReadWord@GIEBitValue 0023  
                                     _time_count 006A                                  ?_FLASH_ReadWord 0021  
                   __size_of_temperature_display 003E                              ??_EUSART_Initialize 0021  
                                  ?_Step_control 0070                                     _display_buff 0167  
                       __size_of_I2C_Send_Buffer 003B                                 __CFG_FOSC$INTOSC 0000  
                   __size_of_temperature_process 0037                             __end_of_RxFrameCheck 07F8  
                          __size_of_EUSART_Write 0010                                      _Two_Display 17CF  
                              __size_of_I2C_Stop 001D                                 _Write_Flash_head 1414  
                           __end_of_Save_process 0C7C                        __size_of_I2C_Receive_Byte 0030  
                           Key_Process@gKeyValue 005C                           __size_of_Sleep_process 001F  
                      __end_of_EUSART_Initialize 154C                              Calculate_Time@temp1 0046  
                            Calculate_Time@temp2 004A                         EUSART_Receive_ISR@rx_tmp 007D  
                              ??_Save_Write_time 0036                                     ?_Key_Process 0070  
                              ??_Save_Write_word 0028                                     ??_Inf_to_Com 002B  
                       ??_SPI_Exchange8bitBuffer 0024                                     ??_Tc_Display 002F  
                             RxFrameCheck@rx_arr 0078                      __end_of_Bq32k_Rtc_Read_Time 0CE7  
                              ??_FLASH_WriteWord 0025                     tc_temperature_trans@var_time 0056  
      maxim_start_conversion@uch_conversion_mode 0026                                   __end_of___bmul 1457  
                                 __end_of___wmul 1530                                     _EUSART_Write 13E4  
                              __size_of_TMR0_ISR 001B                                   _ADC_Initialize 07F8  
                         ??_Bq32k_Rtc_Write_Time 0032                                   ??_Step_control 0021  
                         ?_OSCILLATOR_Initialize 0070                                Read_time_to_Com@i 003E  
                                 __end_of_memset 1514                                   Tc_Display@data 0031  
                               WriteAll_1621@cnt 0027                                    ??_err_Display 002B  
                               _Read_time_to_Com 0BAA                              start_initialization 0029  
                             __end_of_Inf_to_Com 04E3                         __size_of_TMR0_Initialize 0010  
                             __end_of_Tc_Display 0689                  __size_of_PIN_MANAGER_Initialize 0022  
                              ??_I2C_Read_Buffer 0026                            Bq32k_Rtc_Write_Time@p 003E  
                                 Two_Display@num 002C                                   _Calculate_Time 0268  
                               _SendDataBit_1621 1664                                      ??_I2C_Start 0021  
                              __size_of_Key_Scan 0023                                 _temperature_sign 0140  
             __size_of_maxim_31856_read_register 0015                                ??_FLASH_readBlock 0027  
                                SendBit_1621@cnt 0021                                         ??___bmul 0022  
              __size_of_maxim_clear_fault_status 0013                        ?_maxim_clear_fault_status 0070  
                                       ??___wmul 0025                            __size_of_SendCmd_1621 0018  
                          __size_of_SendBit_1621 0021                              I2C_Send_Buffer@Flag 002A  
                         __size_of_TMR0_CallBack 0019                           __end_of_ADC_Initialize 0800  
                                    __pdataBANK2 016E                              I2C_Send_Buffer@buff 0024  
                                       ??_memset 0025                      FLASH_EraseBlock@GIEBitValue 0023  
                       __end_of_FLASH_EraseBlock 1643                                    _Sleep_process 15A4  
                                       ?_CRC_cal 0021                                 ??_Set_start_flag 0021  
                    __end_of_EUSART_Transmit_ISR 15A4                             __size_of_Com_Process 0011  
                                       CRC_cal@i 0028                                  _CH1_temperature 012A  
                            Inf_to_Com@count_tmp 00ED                                        ___latbits 0003  
                                  __pcstackBANK0 0020                                    __pcstackBANK1 00A0  
                                  __pcstackBANK3 01D4                         Bq32k_Rtc_Write_Time@temp 0034  
                           __end_of_time_Display 1000                    SPI_Exchange8bitBuffer@dataOut 0023  
                         __end_of_Calculate_Time 040A                                ??_I2C_Send_Buffer 0026  
                            __end_of_err_Display 1744                                Inf_to_Com@add_tmp 00E8  
                     __end_of_EUSART_Receive_ISR 0E56                       __size_of_EUSART_Initialize 001C  
                             I2C_Read_Buffer@ADD 0027                                     _LongPressSec 00EE  
                              Inf_to_Com@crc_tmp 00EA                                Two_Display@number 0030  
                                   _SendCmd_1621 1494                                     _SendBit_1621 1643  
                                      __pnvBANK2 016B                  __size_of_SPI_Exchange8bitBuffer 0053  
                               ___lwdiv@dividend 0029                           _PIN_MANAGER_Initialize 1685  
                                    _MAX31856Sec 0139                __end_of_maxim_31856_read_register 1494  
                                       ?_bcd2bin 0070                                Inf_to_Com@tmp_buf 00A0  
                                       ?___awdiv 0021                                         ?___awmod 0021  
            __end_of_maxim_31856_read_nregisters 14C4                      _maxim_31856_read_nregisters 14AC  
                                       ?_bin2bcd 0070                                         ?___lwdiv 0027  
                                       ?___lwmod 0021                                  ?_ADC_Initialize 0070  
                              SendDataBit_1621@i 0024                                     _eusartRxHead 013C  
                                   _eusartTxHead 013E                                   ?_Sleep_process 0070  
                          __end_of_WriteAll_1621 084A                                     _eusartRxTail 013D  
                                   _eusartTxTail 013F                     ??_INTERRUPT_InterruptManager 0020  
                          __size_of_RxFrameCheck 00A4                          _eusartTxBufferRemaining 016C  
                              _Set_time_cmd_flag 013A                      ?_maxim_31856_write_register 0022  
                                       _I2C_Stop 1569                            __size_of_Save_process 0069  
                                _CH2_temperature 012C                                 I2C_Send_Buffer@i 0029  
                               __CFG_WDTE$SWDTEN 0000                                 ___lwdiv@quotient 002D  
                                  _TMR0_CallBack 14C4                                  ?_Calculate_Time 0070  
                            _temperature_decimal 0069                            _one_temperature_trans 09B1  
                              _Set_time_from_Com 08F1                                 _I2C_Receive_Byte 179F  
                            SendDataBit_1621@cnt 0021                         FLASH_WriteWord@flashAddr 0021  
                                 err_Display@num 002C                                   _eusartRxBuffer 01A0  
          maxim_31856_read_nregisters@uch_nBytes 002A                              _temperature_display 092D  
                              ??_TMR0_Initialize 0021                                   _eusartTxBuffer 01A8  
                             ?_Set_time_from_Com 0070                                   ___wmul@product 0025  
                           __end_of_Step_control 16ED                                        clear_ram0 13D2  
                                       _PIE1bits 0091                                        _uch_ltcbh 0145  
                                      _uch_ltcbl 0146                                        _uch_ltcbm 0147  
                           __size_of_Key_Process 0092              __size_of_INTERRUPT_InterruptManager 0023  
                            _temperature_process 087F                                         _PIR1bits 0011  
                      FLASH_EraseBlock@startAddr 0021                                     _RxFrameCheck 0754  
                            ??_Set_time_from_Com 003F                                 ??_FLASH_ReadWord 0023  
                      __size_of_SPI_Exchange8bit 000C                       __end_of_Write_Flash_finish 1414  
                                       _SSP1CON1 0215                                         _TMR0_ISR 14DD  
                       __end_of_Write_Flash_head 1424                                         _SSP1STAT 0214  
                                   _Save_process 0C13                             ?_temperature_display 0070  
                          __end_of_I2C_Send_Byte 0B43                                       _ADCON0bits 009D  
                              ___wmul@multiplier 0021                          __size_of_FVR_Initialize 0004  
                         _SPI_Exchange8bitBuffer 0A9A                                   _Cur_Save_Index 0065  
                                    _err_Display 1718                              Save_Write_word@data 0026  
                           ?_temperature_process 0070                                 __size_of_CRC_cal 007A  
                                _Save_Write_time 0E56                                  _Save_Write_word 0689  
                                   ?_Two_Display 0070                        __end_of_Set_time_from_Com 092D  
                                 ?_TMR0_CallBack 0070                                  _FLASH_WriteWord 16ED  
                                       _Key_Scan 16A7              maxim_31856_read_nregisters@uch_buff 0029  
                         FLASH_readBlock@address 0024                                _Serach_Flash_Head 09FB  
                       __end_of_Read_time_to_Com 0C13                               ?_Serach_Flash_Head 0070  
                       ??_maxim_start_conversion 0025                               I2C_Send_Buffer@ADD 0028  
                                ??_Sleep_process 0022                    __size_of_tc_temperature_trans 0210  
                        __size_of_SPI_Initialize 0006                                 __size_of_bcd2bin 0015  
                        ??_OSCILLATOR_Initialize 0021                               Serach_Flash_Head@i 0030  
                               __size_of___awdiv 0052                            ??_temperature_display 005A  
                               __size_of___awmod 0046                                  _I2C_Read_Buffer 0CE7  
                               __size_of_bin2bcd 002E                                 __size_of___lwdiv 0035  
                               __size_of___lwmod 002D                              ??_Serach_Flash_Head 002C  
                   SPI_Exchange8bitBuffer@dataIn 0027                     SPI_Exchange8bitBuffer@bufLen 0022  
                               err_Display@F2141 0124                         __end_of_SendDataBit_1621 1685  
                       __size_of_Set_finish_flag 0005                            __size_of_time_Display 0096  
                          ??_temperature_process 005B                                  ___lwdiv@divisor 0027  
                                ___lwdiv@counter 002C                                         __ptext10 13B8  
                                       __ptext11 1530                                         __ptext20 1414  
                                       __ptext12 07F8                                         __ptext21 1404  
                                       __ptext13 0ED8                                         __ptext30 1744  
                                       __ptext22 0E56                                         __ptext14 087F  
                                       __ptext31 084A                                         __ptext23 0689  
                                       __ptext15 0F6A                                         __ptext40 0815  
                                       __ptext32 09B1                                         __ptext24 16ED  
                                       __ptext16 092D                                         __ptext41 1664  
                                       __ptext33 1603                                         __ptext25 1623  
                                       __ptext17 0058                                         __ptext50 0B43  
                                       __ptext42 13C6                                         __ptext34 13F4  
                                       __ptext26 1457                                         __ptext18 0268  
                                       __ptext51 1771                                         __ptext43 13BC  
                                       __ptext35 147F                                         __ptext27 1718  
                                       __ptext19 1514                                         __ptext60 154C  
                                       __ptext52 096B                                         __ptext44 1494  
                                       __ptext36 14AC                                         __ptext28 05B8  
                                       __ptext61 0AED                                         __ptext53 0A48  
                                       __ptext45 1643                                         __ptext37 0A9A  
                                       __ptext29 14F8                                         __ptext70 14C4  
                                       __ptext62 179F                                         __ptext54 08B6  
                                       __ptext46 16A7                                         __ptext38 13D8  
                                       __ptext71 1586                                         __ptext63 040A  
                                       __ptext55 0C7C                                         __ptext47 1434  
                                       __ptext39 17CF                                         __ptext72 0DD9  
                                       __ptext64 15E3                                         __ptext56 146A  
                                       __ptext48 08F1                                         __ptext73 0754  
                                       __ptext65 15C3                                         __ptext57 1445  
                                       __ptext49 0BAA                                         __ptext66 13E4  
                                       __ptext58 0CE7                                         __ptext67 0D5F  
                                       __ptext59 1569                                         __ptext69 14DD  
                         ?_one_temperature_trans 0070                                     _SSP1CON1bits 0215  
                                _FLASH_readBlock 15E3                        __end_of_Serach_Flash_Head 0A48  
                                  __size_of_main 00D5       maxim_31856_read_register@uch_register_data 0024  
                                       _uch_cjth 0142                                         _uch_cjtl 0143  
                                       _uch_mask 0148                             Save_process@var_time 0050  
                                       int$flags 007E                                     _time_Display 0F6A  
                                       _tmr_flag 0141               __end_of_INTERRUPT_InterruptManager 0027  
                     _INTERRUPT_InterruptManager 0004                     __size_of_Bq32k_Rtc_Read_Time 006B  
                                   _SSP1STATbits 0214                          __end_of_Save_Write_time 0ED8  
                        __end_of_Save_Write_word 0754                                  _I2C_Send_Buffer 08B6  
                              ?_FLASH_EraseBlock 0021                    __size_of_Bq32k_Rtc_Write_Time 0067  
                             ??_FLASH_EraseBlock 0023                                       _INTCONbits 000B  
                        __end_of_FLASH_WriteWord 1718                                  ??_TMR0_CallBack 0070  
                                     _FVRCONbits 0117                                  Key_Scan@Key_val 0023  
                          FLASH_readBlock@buffer 0028                                    SendBit_1621@i 0024  
                     __size_of_Set_time_from_Com 003C                                         memset@p1 0026  
                          __size_of_Step_control 0023                                         intlevel1 0000  
                                     _PMCON1bits 0195                                 ___lwmod@dividend 0023  
                        ?_PIN_MANAGER_Initialize 0070                                __CFG_CLKOUTEN$OFF 0000  
             SPI_Exchange8bitBuffer@bytesWritten 0028                                 ??_ADC_Initialize 0021  
                        __end_of_I2C_Read_Buffer 0D5F                                 _SPI_Exchange8bit 13D8  
                __size_of_maxim_start_conversion 0020                               _EUSART_Receive_ISR 0DD9  
                       __end_of_I2C_Receive_Byte 17CF                           Serach_Flash_Head@count 002D  
                                  ??_Com_Process 0040                                   _FVR_Initialize 13B8  
                                   _rtc_save_ch1 0152                                     _rtc_save_ch2 0159  
                                     _OPTION_REG 0095                              ?_EUSART_Receive_ISR 0070  
                                   _Step_control 16CA                          __end_of_FLASH_readBlock 1603  
                               ??_Calculate_Time 0038                                  ___lwmod@divisor 0021  
                                _TMR0_Initialize 1424                                  ___lwmod@counter 0026  
       tc_temperature_trans@temperature_absolute 0054                                ??_Set_finish_flag 0021  
                             EUSART_Write@txData 0021                             __size_of_Two_Display 0031  
                   __size_of_EUSART_Transmit_ISR 001E                   __end_of_PIN_MANAGER_Initialize 16A7  
                     __size_of_Serach_Flash_Head 004D                             ??_EUSART_Receive_ISR 007B  
                           Bq32k_Time_Init@F2033 016E                         _maxim_clear_fault_status 1457  
