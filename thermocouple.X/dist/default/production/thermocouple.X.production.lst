

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Aug 30 16:33:31 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	dabs	1,0x7E,2
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  0010                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0097                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009B                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009E                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  0116                     	;# 
   142  0117                     	;# 
   143  011D                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  018E                     	;# 
   147  0191                     	;# 
   148  0191                     	;# 
   149  0192                     	;# 
   150  0193                     	;# 
   151  0193                     	;# 
   152  0194                     	;# 
   153  0195                     	;# 
   154  0196                     	;# 
   155  0197                     	;# 
   156  0199                     	;# 
   157  019A                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019B                     	;# 
   162  019C                     	;# 
   163  019C                     	;# 
   164  019D                     	;# 
   165  019E                     	;# 
   166  019F                     	;# 
   167  020D                     	;# 
   168  0210                     	;# 
   169  0211                     	;# 
   170  0211                     	;# 
   171  0212                     	;# 
   172  0212                     	;# 
   173  0213                     	;# 
   174  0213                     	;# 
   175  0214                     	;# 
   176  0214                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0216                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0217                     	;# 
   184  0291                     	;# 
   185  0291                     	;# 
   186  0292                     	;# 
   187  0293                     	;# 
   188  0298                     	;# 
   189  0298                     	;# 
   190  0299                     	;# 
   191  029A                     	;# 
   192  0394                     	;# 
   193  0395                     	;# 
   194  0396                     	;# 
   195  0FE4                     	;# 
   196  0FE5                     	;# 
   197  0FE6                     	;# 
   198  0FE7                     	;# 
   199  0FE8                     	;# 
   200  0FE9                     	;# 
   201  0FEA                     	;# 
   202  0FEB                     	;# 
   203  0FED                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  000D                     	;# 
   220  000E                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0015                     	;# 
   225  0016                     	;# 
   226  0016                     	;# 
   227  0017                     	;# 
   228  0018                     	;# 
   229  0019                     	;# 
   230  001A                     	;# 
   231  001B                     	;# 
   232  001C                     	;# 
   233  008C                     	;# 
   234  008D                     	;# 
   235  008E                     	;# 
   236  0090                     	;# 
   237  0091                     	;# 
   238  0092                     	;# 
   239  0095                     	;# 
   240  0096                     	;# 
   241  0097                     	;# 
   242  0099                     	;# 
   243  009A                     	;# 
   244  009B                     	;# 
   245  009B                     	;# 
   246  009C                     	;# 
   247  009D                     	;# 
   248  009E                     	;# 
   249  010C                     	;# 
   250  010D                     	;# 
   251  010E                     	;# 
   252  0116                     	;# 
   253  0117                     	;# 
   254  011D                     	;# 
   255  018C                     	;# 
   256  018D                     	;# 
   257  018E                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0197                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019C                     	;# 
   274  019C                     	;# 
   275  019D                     	;# 
   276  019E                     	;# 
   277  019F                     	;# 
   278  020D                     	;# 
   279  0210                     	;# 
   280  0211                     	;# 
   281  0211                     	;# 
   282  0212                     	;# 
   283  0212                     	;# 
   284  0213                     	;# 
   285  0213                     	;# 
   286  0214                     	;# 
   287  0214                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0216                     	;# 
   292  0216                     	;# 
   293  0217                     	;# 
   294  0217                     	;# 
   295  0291                     	;# 
   296  0291                     	;# 
   297  0292                     	;# 
   298  0293                     	;# 
   299  0298                     	;# 
   300  0298                     	;# 
   301  0299                     	;# 
   302  029A                     	;# 
   303  0394                     	;# 
   304  0395                     	;# 
   305  0396                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000D                     	;# 
   331  000E                     	;# 
   332  0010                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0015                     	;# 
   336  0016                     	;# 
   337  0016                     	;# 
   338  0017                     	;# 
   339  0018                     	;# 
   340  0019                     	;# 
   341  001A                     	;# 
   342  001B                     	;# 
   343  001C                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  010C                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  0116                     	;# 
   364  0117                     	;# 
   365  011D                     	;# 
   366  018C                     	;# 
   367  018D                     	;# 
   368  018E                     	;# 
   369  0191                     	;# 
   370  0191                     	;# 
   371  0192                     	;# 
   372  0193                     	;# 
   373  0193                     	;# 
   374  0194                     	;# 
   375  0195                     	;# 
   376  0196                     	;# 
   377  0197                     	;# 
   378  0199                     	;# 
   379  019A                     	;# 
   380  019B                     	;# 
   381  019B                     	;# 
   382  019B                     	;# 
   383  019B                     	;# 
   384  019C                     	;# 
   385  019C                     	;# 
   386  019D                     	;# 
   387  019E                     	;# 
   388  019F                     	;# 
   389  020D                     	;# 
   390  0210                     	;# 
   391  0211                     	;# 
   392  0211                     	;# 
   393  0212                     	;# 
   394  0212                     	;# 
   395  0213                     	;# 
   396  0213                     	;# 
   397  0214                     	;# 
   398  0214                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0216                     	;# 
   403  0216                     	;# 
   404  0217                     	;# 
   405  0217                     	;# 
   406  0291                     	;# 
   407  0291                     	;# 
   408  0292                     	;# 
   409  0293                     	;# 
   410  0298                     	;# 
   411  0298                     	;# 
   412  0299                     	;# 
   413  029A                     	;# 
   414  0394                     	;# 
   415  0395                     	;# 
   416  0396                     	;# 
   417  0FE4                     	;# 
   418  0FE5                     	;# 
   419  0FE6                     	;# 
   420  0FE7                     	;# 
   421  0FE8                     	;# 
   422  0FE9                     	;# 
   423  0FEA                     	;# 
   424  0FEB                     	;# 
   425  0FED                     	;# 
   426  0FEE                     	;# 
   427  0FEF                     	;# 
   428  0000                     	;# 
   429  0001                     	;# 
   430  0002                     	;# 
   431  0003                     	;# 
   432  0004                     	;# 
   433  0005                     	;# 
   434  0006                     	;# 
   435  0007                     	;# 
   436  0008                     	;# 
   437  0009                     	;# 
   438  000A                     	;# 
   439  000B                     	;# 
   440  000C                     	;# 
   441  000D                     	;# 
   442  000E                     	;# 
   443  0010                     	;# 
   444  0011                     	;# 
   445  0012                     	;# 
   446  0015                     	;# 
   447  0016                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  008C                     	;# 
   456  008D                     	;# 
   457  008E                     	;# 
   458  0090                     	;# 
   459  0091                     	;# 
   460  0092                     	;# 
   461  0095                     	;# 
   462  0096                     	;# 
   463  0097                     	;# 
   464  0099                     	;# 
   465  009A                     	;# 
   466  009B                     	;# 
   467  009B                     	;# 
   468  009C                     	;# 
   469  009D                     	;# 
   470  009E                     	;# 
   471  010C                     	;# 
   472  010D                     	;# 
   473  010E                     	;# 
   474  0116                     	;# 
   475  0117                     	;# 
   476  011D                     	;# 
   477  018C                     	;# 
   478  018D                     	;# 
   479  018E                     	;# 
   480  0191                     	;# 
   481  0191                     	;# 
   482  0192                     	;# 
   483  0193                     	;# 
   484  0193                     	;# 
   485  0194                     	;# 
   486  0195                     	;# 
   487  0196                     	;# 
   488  0197                     	;# 
   489  0199                     	;# 
   490  019A                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019B                     	;# 
   495  019C                     	;# 
   496  019C                     	;# 
   497  019D                     	;# 
   498  019E                     	;# 
   499  019F                     	;# 
   500  020D                     	;# 
   501  0210                     	;# 
   502  0211                     	;# 
   503  0211                     	;# 
   504  0212                     	;# 
   505  0212                     	;# 
   506  0213                     	;# 
   507  0213                     	;# 
   508  0214                     	;# 
   509  0214                     	;# 
   510  0215                     	;# 
   511  0215                     	;# 
   512  0215                     	;# 
   513  0216                     	;# 
   514  0216                     	;# 
   515  0217                     	;# 
   516  0217                     	;# 
   517  0291                     	;# 
   518  0291                     	;# 
   519  0292                     	;# 
   520  0293                     	;# 
   521  0298                     	;# 
   522  0298                     	;# 
   523  0299                     	;# 
   524  029A                     	;# 
   525  0394                     	;# 
   526  0395                     	;# 
   527  0396                     	;# 
   528  0FE4                     	;# 
   529  0FE5                     	;# 
   530  0FE6                     	;# 
   531  0FE7                     	;# 
   532  0FE8                     	;# 
   533  0FE9                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEF                     	;# 
   539  0000                     	;# 
   540  0001                     	;# 
   541  0002                     	;# 
   542  0003                     	;# 
   543  0004                     	;# 
   544  0005                     	;# 
   545  0006                     	;# 
   546  0007                     	;# 
   547  0008                     	;# 
   548  0009                     	;# 
   549  000A                     	;# 
   550  000B                     	;# 
   551  000C                     	;# 
   552  000D                     	;# 
   553  000E                     	;# 
   554  0010                     	;# 
   555  0011                     	;# 
   556  0012                     	;# 
   557  0015                     	;# 
   558  0016                     	;# 
   559  0016                     	;# 
   560  0017                     	;# 
   561  0018                     	;# 
   562  0019                     	;# 
   563  001A                     	;# 
   564  001B                     	;# 
   565  001C                     	;# 
   566  008C                     	;# 
   567  008D                     	;# 
   568  008E                     	;# 
   569  0090                     	;# 
   570  0091                     	;# 
   571  0092                     	;# 
   572  0095                     	;# 
   573  0096                     	;# 
   574  0097                     	;# 
   575  0099                     	;# 
   576  009A                     	;# 
   577  009B                     	;# 
   578  009B                     	;# 
   579  009C                     	;# 
   580  009D                     	;# 
   581  009E                     	;# 
   582  010C                     	;# 
   583  010D                     	;# 
   584  010E                     	;# 
   585  0116                     	;# 
   586  0117                     	;# 
   587  011D                     	;# 
   588  018C                     	;# 
   589  018D                     	;# 
   590  018E                     	;# 
   591  0191                     	;# 
   592  0191                     	;# 
   593  0192                     	;# 
   594  0193                     	;# 
   595  0193                     	;# 
   596  0194                     	;# 
   597  0195                     	;# 
   598  0196                     	;# 
   599  0197                     	;# 
   600  0199                     	;# 
   601  019A                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019C                     	;# 
   607  019C                     	;# 
   608  019D                     	;# 
   609  019E                     	;# 
   610  019F                     	;# 
   611  020D                     	;# 
   612  0210                     	;# 
   613  0211                     	;# 
   614  0211                     	;# 
   615  0212                     	;# 
   616  0212                     	;# 
   617  0213                     	;# 
   618  0213                     	;# 
   619  0214                     	;# 
   620  0214                     	;# 
   621  0215                     	;# 
   622  0215                     	;# 
   623  0215                     	;# 
   624  0216                     	;# 
   625  0216                     	;# 
   626  0217                     	;# 
   627  0217                     	;# 
   628  0291                     	;# 
   629  0291                     	;# 
   630  0292                     	;# 
   631  0293                     	;# 
   632  0298                     	;# 
   633  0298                     	;# 
   634  0299                     	;# 
   635  029A                     	;# 
   636  0394                     	;# 
   637  0395                     	;# 
   638  0396                     	;# 
   639  0FE4                     	;# 
   640  0FE5                     	;# 
   641  0FE6                     	;# 
   642  0FE7                     	;# 
   643  0FE8                     	;# 
   644  0FE9                     	;# 
   645  0FEA                     	;# 
   646  0FEB                     	;# 
   647  0FED                     	;# 
   648  0FEE                     	;# 
   649  0FEF                     	;# 
   650  0000                     	;# 
   651  0001                     	;# 
   652  0002                     	;# 
   653  0003                     	;# 
   654  0004                     	;# 
   655  0005                     	;# 
   656  0006                     	;# 
   657  0007                     	;# 
   658  0008                     	;# 
   659  0009                     	;# 
   660  000A                     	;# 
   661  000B                     	;# 
   662  000C                     	;# 
   663  000D                     	;# 
   664  000E                     	;# 
   665  0010                     	;# 
   666  0011                     	;# 
   667  0012                     	;# 
   668  0015                     	;# 
   669  0016                     	;# 
   670  0016                     	;# 
   671  0017                     	;# 
   672  0018                     	;# 
   673  0019                     	;# 
   674  001A                     	;# 
   675  001B                     	;# 
   676  001C                     	;# 
   677  008C                     	;# 
   678  008D                     	;# 
   679  008E                     	;# 
   680  0090                     	;# 
   681  0091                     	;# 
   682  0092                     	;# 
   683  0095                     	;# 
   684  0096                     	;# 
   685  0097                     	;# 
   686  0099                     	;# 
   687  009A                     	;# 
   688  009B                     	;# 
   689  009B                     	;# 
   690  009C                     	;# 
   691  009D                     	;# 
   692  009E                     	;# 
   693  010C                     	;# 
   694  010D                     	;# 
   695  010E                     	;# 
   696  0116                     	;# 
   697  0117                     	;# 
   698  011D                     	;# 
   699  018C                     	;# 
   700  018D                     	;# 
   701  018E                     	;# 
   702  0191                     	;# 
   703  0191                     	;# 
   704  0192                     	;# 
   705  0193                     	;# 
   706  0193                     	;# 
   707  0194                     	;# 
   708  0195                     	;# 
   709  0196                     	;# 
   710  0197                     	;# 
   711  0199                     	;# 
   712  019A                     	;# 
   713  019B                     	;# 
   714  019B                     	;# 
   715  019B                     	;# 
   716  019B                     	;# 
   717  019C                     	;# 
   718  019C                     	;# 
   719  019D                     	;# 
   720  019E                     	;# 
   721  019F                     	;# 
   722  020D                     	;# 
   723  0210                     	;# 
   724  0211                     	;# 
   725  0211                     	;# 
   726  0212                     	;# 
   727  0212                     	;# 
   728  0213                     	;# 
   729  0213                     	;# 
   730  0214                     	;# 
   731  0214                     	;# 
   732  0215                     	;# 
   733  0215                     	;# 
   734  0215                     	;# 
   735  0216                     	;# 
   736  0216                     	;# 
   737  0217                     	;# 
   738  0217                     	;# 
   739  0291                     	;# 
   740  0291                     	;# 
   741  0292                     	;# 
   742  0293                     	;# 
   743  0298                     	;# 
   744  0298                     	;# 
   745  0299                     	;# 
   746  029A                     	;# 
   747  0394                     	;# 
   748  0395                     	;# 
   749  0396                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  0010                     	;# 
   777  0011                     	;# 
   778  0012                     	;# 
   779  0015                     	;# 
   780  0016                     	;# 
   781  0016                     	;# 
   782  0017                     	;# 
   783  0018                     	;# 
   784  0019                     	;# 
   785  001A                     	;# 
   786  001B                     	;# 
   787  001C                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  0090                     	;# 
   792  0091                     	;# 
   793  0092                     	;# 
   794  0095                     	;# 
   795  0096                     	;# 
   796  0097                     	;# 
   797  0099                     	;# 
   798  009A                     	;# 
   799  009B                     	;# 
   800  009B                     	;# 
   801  009C                     	;# 
   802  009D                     	;# 
   803  009E                     	;# 
   804  010C                     	;# 
   805  010D                     	;# 
   806  010E                     	;# 
   807  0116                     	;# 
   808  0117                     	;# 
   809  011D                     	;# 
   810  018C                     	;# 
   811  018D                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0197                     	;# 
   822  0199                     	;# 
   823  019A                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019C                     	;# 
   829  019C                     	;# 
   830  019D                     	;# 
   831  019E                     	;# 
   832  019F                     	;# 
   833  020D                     	;# 
   834  0210                     	;# 
   835  0211                     	;# 
   836  0211                     	;# 
   837  0212                     	;# 
   838  0212                     	;# 
   839  0213                     	;# 
   840  0213                     	;# 
   841  0214                     	;# 
   842  0214                     	;# 
   843  0215                     	;# 
   844  0215                     	;# 
   845  0215                     	;# 
   846  0216                     	;# 
   847  0216                     	;# 
   848  0217                     	;# 
   849  0217                     	;# 
   850  0291                     	;# 
   851  0291                     	;# 
   852  0292                     	;# 
   853  0293                     	;# 
   854  0298                     	;# 
   855  0298                     	;# 
   856  0299                     	;# 
   857  029A                     	;# 
   858  0394                     	;# 
   859  0395                     	;# 
   860  0396                     	;# 
   861  0FE4                     	;# 
   862  0FE5                     	;# 
   863  0FE6                     	;# 
   864  0FE7                     	;# 
   865  0FE8                     	;# 
   866  0FE9                     	;# 
   867  0FEA                     	;# 
   868  0FEB                     	;# 
   869  0FED                     	;# 
   870  0FEE                     	;# 
   871  0FEF                     	;# 
   872  0000                     	;# 
   873  0001                     	;# 
   874  0002                     	;# 
   875  0003                     	;# 
   876  0004                     	;# 
   877  0005                     	;# 
   878  0006                     	;# 
   879  0007                     	;# 
   880  0008                     	;# 
   881  0009                     	;# 
   882  000A                     	;# 
   883  000B                     	;# 
   884  000C                     	;# 
   885  000D                     	;# 
   886  000E                     	;# 
   887  0010                     	;# 
   888  0011                     	;# 
   889  0012                     	;# 
   890  0015                     	;# 
   891  0016                     	;# 
   892  0016                     	;# 
   893  0017                     	;# 
   894  0018                     	;# 
   895  0019                     	;# 
   896  001A                     	;# 
   897  001B                     	;# 
   898  001C                     	;# 
   899  008C                     	;# 
   900  008D                     	;# 
   901  008E                     	;# 
   902  0090                     	;# 
   903  0091                     	;# 
   904  0092                     	;# 
   905  0095                     	;# 
   906  0096                     	;# 
   907  0097                     	;# 
   908  0099                     	;# 
   909  009A                     	;# 
   910  009B                     	;# 
   911  009B                     	;# 
   912  009C                     	;# 
   913  009D                     	;# 
   914  009E                     	;# 
   915  010C                     	;# 
   916  010D                     	;# 
   917  010E                     	;# 
   918  0116                     	;# 
   919  0117                     	;# 
   920  011D                     	;# 
   921  018C                     	;# 
   922  018D                     	;# 
   923  018E                     	;# 
   924  0191                     	;# 
   925  0191                     	;# 
   926  0192                     	;# 
   927  0193                     	;# 
   928  0193                     	;# 
   929  0194                     	;# 
   930  0195                     	;# 
   931  0196                     	;# 
   932  0197                     	;# 
   933  0199                     	;# 
   934  019A                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019B                     	;# 
   939  019C                     	;# 
   940  019C                     	;# 
   941  019D                     	;# 
   942  019E                     	;# 
   943  019F                     	;# 
   944  020D                     	;# 
   945  0210                     	;# 
   946  0211                     	;# 
   947  0211                     	;# 
   948  0212                     	;# 
   949  0212                     	;# 
   950  0213                     	;# 
   951  0213                     	;# 
   952  0214                     	;# 
   953  0214                     	;# 
   954  0215                     	;# 
   955  0215                     	;# 
   956  0215                     	;# 
   957  0216                     	;# 
   958  0216                     	;# 
   959  0217                     	;# 
   960  0217                     	;# 
   961  0291                     	;# 
   962  0291                     	;# 
   963  0292                     	;# 
   964  0293                     	;# 
   965  0298                     	;# 
   966  0298                     	;# 
   967  0299                     	;# 
   968  029A                     	;# 
   969  0394                     	;# 
   970  0395                     	;# 
   971  0396                     	;# 
   972  0FE4                     	;# 
   973  0FE5                     	;# 
   974  0FE6                     	;# 
   975  0FE7                     	;# 
   976  0FE8                     	;# 
   977  0FE9                     	;# 
   978  0FEA                     	;# 
   979  0FEB                     	;# 
   980  0FED                     	;# 
   981  0FEE                     	;# 
   982  0FEF                     	;# 
   983  0000                     	;# 
   984  0001                     	;# 
   985  0002                     	;# 
   986  0003                     	;# 
   987  0004                     	;# 
   988  0005                     	;# 
   989  0006                     	;# 
   990  0007                     	;# 
   991  0008                     	;# 
   992  0009                     	;# 
   993  000A                     	;# 
   994  000B                     	;# 
   995  000C                     	;# 
   996  000D                     	;# 
   997  000E                     	;# 
   998  0010                     	;# 
   999  0011                     	;# 
  1000  0012                     	;# 
  1001  0015                     	;# 
  1002  0016                     	;# 
  1003  0016                     	;# 
  1004  0017                     	;# 
  1005  0018                     	;# 
  1006  0019                     	;# 
  1007  001A                     	;# 
  1008  001B                     	;# 
  1009  001C                     	;# 
  1010  008C                     	;# 
  1011  008D                     	;# 
  1012  008E                     	;# 
  1013  0090                     	;# 
  1014  0091                     	;# 
  1015  0092                     	;# 
  1016  0095                     	;# 
  1017  0096                     	;# 
  1018  0097                     	;# 
  1019  0099                     	;# 
  1020  009A                     	;# 
  1021  009B                     	;# 
  1022  009B                     	;# 
  1023  009C                     	;# 
  1024  009D                     	;# 
  1025  009E                     	;# 
  1026  010C                     	;# 
  1027  010D                     	;# 
  1028  010E                     	;# 
  1029  0116                     	;# 
  1030  0117                     	;# 
  1031  011D                     	;# 
  1032  018C                     	;# 
  1033  018D                     	;# 
  1034  018E                     	;# 
  1035  0191                     	;# 
  1036  0191                     	;# 
  1037  0192                     	;# 
  1038  0193                     	;# 
  1039  0193                     	;# 
  1040  0194                     	;# 
  1041  0195                     	;# 
  1042  0196                     	;# 
  1043  0197                     	;# 
  1044  0199                     	;# 
  1045  019A                     	;# 
  1046  019B                     	;# 
  1047  019B                     	;# 
  1048  019B                     	;# 
  1049  019B                     	;# 
  1050  019C                     	;# 
  1051  019C                     	;# 
  1052  019D                     	;# 
  1053  019E                     	;# 
  1054  019F                     	;# 
  1055  020D                     	;# 
  1056  0210                     	;# 
  1057  0211                     	;# 
  1058  0211                     	;# 
  1059  0212                     	;# 
  1060  0212                     	;# 
  1061  0213                     	;# 
  1062  0213                     	;# 
  1063  0214                     	;# 
  1064  0214                     	;# 
  1065  0215                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0216                     	;# 
  1069  0216                     	;# 
  1070  0217                     	;# 
  1071  0217                     	;# 
  1072  0291                     	;# 
  1073  0291                     	;# 
  1074  0292                     	;# 
  1075  0293                     	;# 
  1076  0298                     	;# 
  1077  0298                     	;# 
  1078  0299                     	;# 
  1079  029A                     	;# 
  1080  0394                     	;# 
  1081  0395                     	;# 
  1082  0396                     	;# 
  1083  0FE4                     	;# 
  1084  0FE5                     	;# 
  1085  0FE6                     	;# 
  1086  0FE7                     	;# 
  1087  0FE8                     	;# 
  1088  0FE9                     	;# 
  1089  0FEA                     	;# 
  1090  0FEB                     	;# 
  1091  0FED                     	;# 
  1092  0FEE                     	;# 
  1093  0FEF                     	;# 
  1094  0000                     	;# 
  1095  0001                     	;# 
  1096  0002                     	;# 
  1097  0003                     	;# 
  1098  0004                     	;# 
  1099  0005                     	;# 
  1100  0006                     	;# 
  1101  0007                     	;# 
  1102  0008                     	;# 
  1103  0009                     	;# 
  1104  000A                     	;# 
  1105  000B                     	;# 
  1106  000C                     	;# 
  1107  000D                     	;# 
  1108  000E                     	;# 
  1109  0010                     	;# 
  1110  0011                     	;# 
  1111  0012                     	;# 
  1112  0015                     	;# 
  1113  0016                     	;# 
  1114  0016                     	;# 
  1115  0017                     	;# 
  1116  0018                     	;# 
  1117  0019                     	;# 
  1118  001A                     	;# 
  1119  001B                     	;# 
  1120  001C                     	;# 
  1121  008C                     	;# 
  1122  008D                     	;# 
  1123  008E                     	;# 
  1124  0090                     	;# 
  1125  0091                     	;# 
  1126  0092                     	;# 
  1127  0095                     	;# 
  1128  0096                     	;# 
  1129  0097                     	;# 
  1130  0099                     	;# 
  1131  009A                     	;# 
  1132  009B                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  010C                     	;# 
  1138  010D                     	;# 
  1139  010E                     	;# 
  1140  0116                     	;# 
  1141  0117                     	;# 
  1142  011D                     	;# 
  1143  018C                     	;# 
  1144  018D                     	;# 
  1145  018E                     	;# 
  1146  0191                     	;# 
  1147  0191                     	;# 
  1148  0192                     	;# 
  1149  0193                     	;# 
  1150  0193                     	;# 
  1151  0194                     	;# 
  1152  0195                     	;# 
  1153  0196                     	;# 
  1154  0197                     	;# 
  1155  0199                     	;# 
  1156  019A                     	;# 
  1157  019B                     	;# 
  1158  019B                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019C                     	;# 
  1162  019C                     	;# 
  1163  019D                     	;# 
  1164  019E                     	;# 
  1165  019F                     	;# 
  1166  020D                     	;# 
  1167  0210                     	;# 
  1168  0211                     	;# 
  1169  0211                     	;# 
  1170  0212                     	;# 
  1171  0212                     	;# 
  1172  0213                     	;# 
  1173  0213                     	;# 
  1174  0214                     	;# 
  1175  0214                     	;# 
  1176  0215                     	;# 
  1177  0215                     	;# 
  1178  0215                     	;# 
  1179  0216                     	;# 
  1180  0216                     	;# 
  1181  0217                     	;# 
  1182  0217                     	;# 
  1183  0291                     	;# 
  1184  0291                     	;# 
  1185  0292                     	;# 
  1186  0293                     	;# 
  1187  0298                     	;# 
  1188  0298                     	;# 
  1189  0299                     	;# 
  1190  029A                     	;# 
  1191  0394                     	;# 
  1192  0395                     	;# 
  1193  0396                     	;# 
  1194  0FE4                     	;# 
  1195  0FE5                     	;# 
  1196  0FE6                     	;# 
  1197  0FE7                     	;# 
  1198  0FE8                     	;# 
  1199  0FE9                     	;# 
  1200  0FEA                     	;# 
  1201  0FEB                     	;# 
  1202  0FED                     	;# 
  1203  0FEE                     	;# 
  1204  0FEF                     	;# 
  1205  0000                     	;# 
  1206  0001                     	;# 
  1207  0002                     	;# 
  1208  0003                     	;# 
  1209  0004                     	;# 
  1210  0005                     	;# 
  1211  0006                     	;# 
  1212  0007                     	;# 
  1213  0008                     	;# 
  1214  0009                     	;# 
  1215  000A                     	;# 
  1216  000B                     	;# 
  1217  000C                     	;# 
  1218  000D                     	;# 
  1219  000E                     	;# 
  1220  0010                     	;# 
  1221  0011                     	;# 
  1222  0012                     	;# 
  1223  0015                     	;# 
  1224  0016                     	;# 
  1225  0016                     	;# 
  1226  0017                     	;# 
  1227  0018                     	;# 
  1228  0019                     	;# 
  1229  001A                     	;# 
  1230  001B                     	;# 
  1231  001C                     	;# 
  1232  008C                     	;# 
  1233  008D                     	;# 
  1234  008E                     	;# 
  1235  0090                     	;# 
  1236  0091                     	;# 
  1237  0092                     	;# 
  1238  0095                     	;# 
  1239  0096                     	;# 
  1240  0097                     	;# 
  1241  0099                     	;# 
  1242  009A                     	;# 
  1243  009B                     	;# 
  1244  009B                     	;# 
  1245  009C                     	;# 
  1246  009D                     	;# 
  1247  009E                     	;# 
  1248  010C                     	;# 
  1249  010D                     	;# 
  1250  010E                     	;# 
  1251  0116                     	;# 
  1252  0117                     	;# 
  1253  011D                     	;# 
  1254  018C                     	;# 
  1255  018D                     	;# 
  1256  018E                     	;# 
  1257  0191                     	;# 
  1258  0191                     	;# 
  1259  0192                     	;# 
  1260  0193                     	;# 
  1261  0193                     	;# 
  1262  0194                     	;# 
  1263  0195                     	;# 
  1264  0196                     	;# 
  1265  0197                     	;# 
  1266  0199                     	;# 
  1267  019A                     	;# 
  1268  019B                     	;# 
  1269  019B                     	;# 
  1270  019B                     	;# 
  1271  019B                     	;# 
  1272  019C                     	;# 
  1273  019C                     	;# 
  1274  019D                     	;# 
  1275  019E                     	;# 
  1276  019F                     	;# 
  1277  020D                     	;# 
  1278  0210                     	;# 
  1279  0211                     	;# 
  1280  0211                     	;# 
  1281  0212                     	;# 
  1282  0212                     	;# 
  1283  0213                     	;# 
  1284  0213                     	;# 
  1285  0214                     	;# 
  1286  0214                     	;# 
  1287  0215                     	;# 
  1288  0215                     	;# 
  1289  0215                     	;# 
  1290  0216                     	;# 
  1291  0216                     	;# 
  1292  0217                     	;# 
  1293  0217                     	;# 
  1294  0291                     	;# 
  1295  0291                     	;# 
  1296  0292                     	;# 
  1297  0293                     	;# 
  1298  0298                     	;# 
  1299  0298                     	;# 
  1300  0299                     	;# 
  1301  029A                     	;# 
  1302  0394                     	;# 
  1303  0395                     	;# 
  1304  0396                     	;# 
  1305  0FE4                     	;# 
  1306  0FE5                     	;# 
  1307  0FE6                     	;# 
  1308  0FE7                     	;# 
  1309  0FE8                     	;# 
  1310  0FE9                     	;# 
  1311  0FEA                     	;# 
  1312  0FEB                     	;# 
  1313  0FED                     	;# 
  1314  0FEE                     	;# 
  1315  0FEF                     	;# 
  1316  0000                     	;# 
  1317  0001                     	;# 
  1318  0002                     	;# 
  1319  0003                     	;# 
  1320  0004                     	;# 
  1321  0005                     	;# 
  1322  0006                     	;# 
  1323  0007                     	;# 
  1324  0008                     	;# 
  1325  0009                     	;# 
  1326  000A                     	;# 
  1327  000B                     	;# 
  1328  000C                     	;# 
  1329  000D                     	;# 
  1330  000E                     	;# 
  1331  0010                     	;# 
  1332  0011                     	;# 
  1333  0012                     	;# 
  1334  0015                     	;# 
  1335  0016                     	;# 
  1336  0016                     	;# 
  1337  0017                     	;# 
  1338  0018                     	;# 
  1339  0019                     	;# 
  1340  001A                     	;# 
  1341  001B                     	;# 
  1342  001C                     	;# 
  1343  008C                     	;# 
  1344  008D                     	;# 
  1345  008E                     	;# 
  1346  0090                     	;# 
  1347  0091                     	;# 
  1348  0092                     	;# 
  1349  0095                     	;# 
  1350  0096                     	;# 
  1351  0097                     	;# 
  1352  0099                     	;# 
  1353  009A                     	;# 
  1354  009B                     	;# 
  1355  009B                     	;# 
  1356  009C                     	;# 
  1357  009D                     	;# 
  1358  009E                     	;# 
  1359  010C                     	;# 
  1360  010D                     	;# 
  1361  010E                     	;# 
  1362  0116                     	;# 
  1363  0117                     	;# 
  1364  011D                     	;# 
  1365  018C                     	;# 
  1366  018D                     	;# 
  1367  018E                     	;# 
  1368  0191                     	;# 
  1369  0191                     	;# 
  1370  0192                     	;# 
  1371  0193                     	;# 
  1372  0193                     	;# 
  1373  0194                     	;# 
  1374  0195                     	;# 
  1375  0196                     	;# 
  1376  0197                     	;# 
  1377  0199                     	;# 
  1378  019A                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019C                     	;# 
  1384  019C                     	;# 
  1385  019D                     	;# 
  1386  019E                     	;# 
  1387  019F                     	;# 
  1388  020D                     	;# 
  1389  0210                     	;# 
  1390  0211                     	;# 
  1391  0211                     	;# 
  1392  0212                     	;# 
  1393  0212                     	;# 
  1394  0213                     	;# 
  1395  0213                     	;# 
  1396  0214                     	;# 
  1397  0214                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0215                     	;# 
  1401  0216                     	;# 
  1402  0216                     	;# 
  1403  0217                     	;# 
  1404  0217                     	;# 
  1405  0291                     	;# 
  1406  0291                     	;# 
  1407  0292                     	;# 
  1408  0293                     	;# 
  1409  0298                     	;# 
  1410  0298                     	;# 
  1411  0299                     	;# 
  1412  029A                     	;# 
  1413  0394                     	;# 
  1414  0395                     	;# 
  1415  0396                     	;# 
  1416  0FE4                     	;# 
  1417  0FE5                     	;# 
  1418  0FE6                     	;# 
  1419  0FE7                     	;# 
  1420  0FE8                     	;# 
  1421  0FE9                     	;# 
  1422  0FEA                     	;# 
  1423  0FEB                     	;# 
  1424  0FED                     	;# 
  1425  0FEE                     	;# 
  1426  0FEF                     	;# 
  1427  0000                     	;# 
  1428  0001                     	;# 
  1429  0002                     	;# 
  1430  0003                     	;# 
  1431  0004                     	;# 
  1432  0005                     	;# 
  1433  0006                     	;# 
  1434  0007                     	;# 
  1435  0008                     	;# 
  1436  0009                     	;# 
  1437  000A                     	;# 
  1438  000B                     	;# 
  1439  000C                     	;# 
  1440  000D                     	;# 
  1441  000E                     	;# 
  1442  0010                     	;# 
  1443  0011                     	;# 
  1444  0012                     	;# 
  1445  0015                     	;# 
  1446  0016                     	;# 
  1447  0016                     	;# 
  1448  0017                     	;# 
  1449  0018                     	;# 
  1450  0019                     	;# 
  1451  001A                     	;# 
  1452  001B                     	;# 
  1453  001C                     	;# 
  1454  008C                     	;# 
  1455  008D                     	;# 
  1456  008E                     	;# 
  1457  0090                     	;# 
  1458  0091                     	;# 
  1459  0092                     	;# 
  1460  0095                     	;# 
  1461  0096                     	;# 
  1462  0097                     	;# 
  1463  0099                     	;# 
  1464  009A                     	;# 
  1465  009B                     	;# 
  1466  009B                     	;# 
  1467  009C                     	;# 
  1468  009D                     	;# 
  1469  009E                     	;# 
  1470  010C                     	;# 
  1471  010D                     	;# 
  1472  010E                     	;# 
  1473  0116                     	;# 
  1474  0117                     	;# 
  1475  011D                     	;# 
  1476  018C                     	;# 
  1477  018D                     	;# 
  1478  018E                     	;# 
  1479  0191                     	;# 
  1480  0191                     	;# 
  1481  0192                     	;# 
  1482  0193                     	;# 
  1483  0193                     	;# 
  1484  0194                     	;# 
  1485  0195                     	;# 
  1486  0196                     	;# 
  1487  0197                     	;# 
  1488  0199                     	;# 
  1489  019A                     	;# 
  1490  019B                     	;# 
  1491  019B                     	;# 
  1492  019B                     	;# 
  1493  019B                     	;# 
  1494  019C                     	;# 
  1495  019C                     	;# 
  1496  019D                     	;# 
  1497  019E                     	;# 
  1498  019F                     	;# 
  1499  020D                     	;# 
  1500  0210                     	;# 
  1501  0211                     	;# 
  1502  0211                     	;# 
  1503  0212                     	;# 
  1504  0212                     	;# 
  1505  0213                     	;# 
  1506  0213                     	;# 
  1507  0214                     	;# 
  1508  0214                     	;# 
  1509  0215                     	;# 
  1510  0215                     	;# 
  1511  0215                     	;# 
  1512  0216                     	;# 
  1513  0216                     	;# 
  1514  0217                     	;# 
  1515  0217                     	;# 
  1516  0291                     	;# 
  1517  0291                     	;# 
  1518  0292                     	;# 
  1519  0293                     	;# 
  1520  0298                     	;# 
  1521  0298                     	;# 
  1522  0299                     	;# 
  1523  029A                     	;# 
  1524  0394                     	;# 
  1525  0395                     	;# 
  1526  0396                     	;# 
  1527  0FE4                     	;# 
  1528  0FE5                     	;# 
  1529  0FE6                     	;# 
  1530  0FE7                     	;# 
  1531  0FE8                     	;# 
  1532  0FE9                     	;# 
  1533  0FEA                     	;# 
  1534  0FEB                     	;# 
  1535  0FED                     	;# 
  1536  0FEE                     	;# 
  1537  0FEF                     	;# 
  1538  0000                     	;# 
  1539  0001                     	;# 
  1540  0002                     	;# 
  1541  0003                     	;# 
  1542  0004                     	;# 
  1543  0005                     	;# 
  1544  0006                     	;# 
  1545  0007                     	;# 
  1546  0008                     	;# 
  1547  0009                     	;# 
  1548  000A                     	;# 
  1549  000B                     	;# 
  1550  000C                     	;# 
  1551  000D                     	;# 
  1552  000E                     	;# 
  1553  0010                     	;# 
  1554  0011                     	;# 
  1555  0012                     	;# 
  1556  0015                     	;# 
  1557  0016                     	;# 
  1558  0016                     	;# 
  1559  0017                     	;# 
  1560  0018                     	;# 
  1561  0019                     	;# 
  1562  001A                     	;# 
  1563  001B                     	;# 
  1564  001C                     	;# 
  1565  008C                     	;# 
  1566  008D                     	;# 
  1567  008E                     	;# 
  1568  0090                     	;# 
  1569  0091                     	;# 
  1570  0092                     	;# 
  1571  0095                     	;# 
  1572  0096                     	;# 
  1573  0097                     	;# 
  1574  0099                     	;# 
  1575  009A                     	;# 
  1576  009B                     	;# 
  1577  009B                     	;# 
  1578  009C                     	;# 
  1579  009D                     	;# 
  1580  009E                     	;# 
  1581  010C                     	;# 
  1582  010D                     	;# 
  1583  010E                     	;# 
  1584  0116                     	;# 
  1585  0117                     	;# 
  1586  011D                     	;# 
  1587  018C                     	;# 
  1588  018D                     	;# 
  1589  018E                     	;# 
  1590  0191                     	;# 
  1591  0191                     	;# 
  1592  0192                     	;# 
  1593  0193                     	;# 
  1594  0193                     	;# 
  1595  0194                     	;# 
  1596  0195                     	;# 
  1597  0196                     	;# 
  1598  0197                     	;# 
  1599  0199                     	;# 
  1600  019A                     	;# 
  1601  019B                     	;# 
  1602  019B                     	;# 
  1603  019B                     	;# 
  1604  019B                     	;# 
  1605  019C                     	;# 
  1606  019C                     	;# 
  1607  019D                     	;# 
  1608  019E                     	;# 
  1609  019F                     	;# 
  1610  020D                     	;# 
  1611  0210                     	;# 
  1612  0211                     	;# 
  1613  0211                     	;# 
  1614  0212                     	;# 
  1615  0212                     	;# 
  1616  0213                     	;# 
  1617  0213                     	;# 
  1618  0214                     	;# 
  1619  0214                     	;# 
  1620  0215                     	;# 
  1621  0215                     	;# 
  1622  0215                     	;# 
  1623  0216                     	;# 
  1624  0216                     	;# 
  1625  0217                     	;# 
  1626  0217                     	;# 
  1627  0291                     	;# 
  1628  0291                     	;# 
  1629  0292                     	;# 
  1630  0293                     	;# 
  1631  0298                     	;# 
  1632  0298                     	;# 
  1633  0299                     	;# 
  1634  029A                     	;# 
  1635  0394                     	;# 
  1636  0395                     	;# 
  1637  0396                     	;# 
  1638  0FE4                     	;# 
  1639  0FE5                     	;# 
  1640  0FE6                     	;# 
  1641  0FE7                     	;# 
  1642  0FE8                     	;# 
  1643  0FE9                     	;# 
  1644  0FEA                     	;# 
  1645  0FEB                     	;# 
  1646  0FED                     	;# 
  1647  0FEE                     	;# 
  1648  0FEF                     	;# 
  1649  0000                     	;# 
  1650  0001                     	;# 
  1651  0002                     	;# 
  1652  0003                     	;# 
  1653  0004                     	;# 
  1654  0005                     	;# 
  1655  0006                     	;# 
  1656  0007                     	;# 
  1657  0008                     	;# 
  1658  0009                     	;# 
  1659  000A                     	;# 
  1660  000B                     	;# 
  1661  000C                     	;# 
  1662  000D                     	;# 
  1663  000E                     	;# 
  1664  0010                     	;# 
  1665  0011                     	;# 
  1666  0012                     	;# 
  1667  0015                     	;# 
  1668  0016                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  0019                     	;# 
  1673  001A                     	;# 
  1674  001B                     	;# 
  1675  001C                     	;# 
  1676  008C                     	;# 
  1677  008D                     	;# 
  1678  008E                     	;# 
  1679  0090                     	;# 
  1680  0091                     	;# 
  1681  0092                     	;# 
  1682  0095                     	;# 
  1683  0096                     	;# 
  1684  0097                     	;# 
  1685  0099                     	;# 
  1686  009A                     	;# 
  1687  009B                     	;# 
  1688  009B                     	;# 
  1689  009C                     	;# 
  1690  009D                     	;# 
  1691  009E                     	;# 
  1692  010C                     	;# 
  1693  010D                     	;# 
  1694  010E                     	;# 
  1695  0116                     	;# 
  1696  0117                     	;# 
  1697  011D                     	;# 
  1698  018C                     	;# 
  1699  018D                     	;# 
  1700  018E                     	;# 
  1701  0191                     	;# 
  1702  0191                     	;# 
  1703  0192                     	;# 
  1704  0193                     	;# 
  1705  0193                     	;# 
  1706  0194                     	;# 
  1707  0195                     	;# 
  1708  0196                     	;# 
  1709  0197                     	;# 
  1710  0199                     	;# 
  1711  019A                     	;# 
  1712  019B                     	;# 
  1713  019B                     	;# 
  1714  019B                     	;# 
  1715  019B                     	;# 
  1716  019C                     	;# 
  1717  019C                     	;# 
  1718  019D                     	;# 
  1719  019E                     	;# 
  1720  019F                     	;# 
  1721  020D                     	;# 
  1722  0210                     	;# 
  1723  0211                     	;# 
  1724  0211                     	;# 
  1725  0212                     	;# 
  1726  0212                     	;# 
  1727  0213                     	;# 
  1728  0213                     	;# 
  1729  0214                     	;# 
  1730  0214                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0216                     	;# 
  1735  0216                     	;# 
  1736  0217                     	;# 
  1737  0217                     	;# 
  1738  0291                     	;# 
  1739  0291                     	;# 
  1740  0292                     	;# 
  1741  0293                     	;# 
  1742  0298                     	;# 
  1743  0298                     	;# 
  1744  0299                     	;# 
  1745  029A                     	;# 
  1746  0394                     	;# 
  1747  0395                     	;# 
  1748  0396                     	;# 
  1749  0FE4                     	;# 
  1750  0FE5                     	;# 
  1751  0FE6                     	;# 
  1752  0FE7                     	;# 
  1753  0FE8                     	;# 
  1754  0FE9                     	;# 
  1755  0FEA                     	;# 
  1756  0FEB                     	;# 
  1757  0FED                     	;# 
  1758  0FEE                     	;# 
  1759  0FEF                     	;# 
  1760  0000                     	;# 
  1761  0001                     	;# 
  1762  0002                     	;# 
  1763  0003                     	;# 
  1764  0004                     	;# 
  1765  0005                     	;# 
  1766  0006                     	;# 
  1767  0007                     	;# 
  1768  0008                     	;# 
  1769  0009                     	;# 
  1770  000A                     	;# 
  1771  000B                     	;# 
  1772  000C                     	;# 
  1773  000D                     	;# 
  1774  000E                     	;# 
  1775  0010                     	;# 
  1776  0011                     	;# 
  1777  0012                     	;# 
  1778  0015                     	;# 
  1779  0016                     	;# 
  1780  0016                     	;# 
  1781  0017                     	;# 
  1782  0018                     	;# 
  1783  0019                     	;# 
  1784  001A                     	;# 
  1785  001B                     	;# 
  1786  001C                     	;# 
  1787  008C                     	;# 
  1788  008D                     	;# 
  1789  008E                     	;# 
  1790  0090                     	;# 
  1791  0091                     	;# 
  1792  0092                     	;# 
  1793  0095                     	;# 
  1794  0096                     	;# 
  1795  0097                     	;# 
  1796  0099                     	;# 
  1797  009A                     	;# 
  1798  009B                     	;# 
  1799  009B                     	;# 
  1800  009C                     	;# 
  1801  009D                     	;# 
  1802  009E                     	;# 
  1803  010C                     	;# 
  1804  010D                     	;# 
  1805  010E                     	;# 
  1806  0116                     	;# 
  1807  0117                     	;# 
  1808  011D                     	;# 
  1809  018C                     	;# 
  1810  018D                     	;# 
  1811  018E                     	;# 
  1812  0191                     	;# 
  1813  0191                     	;# 
  1814  0192                     	;# 
  1815  0193                     	;# 
  1816  0193                     	;# 
  1817  0194                     	;# 
  1818  0195                     	;# 
  1819  0196                     	;# 
  1820  0197                     	;# 
  1821  0199                     	;# 
  1822  019A                     	;# 
  1823  019B                     	;# 
  1824  019B                     	;# 
  1825  019B                     	;# 
  1826  019B                     	;# 
  1827  019C                     	;# 
  1828  019C                     	;# 
  1829  019D                     	;# 
  1830  019E                     	;# 
  1831  019F                     	;# 
  1832  020D                     	;# 
  1833  0210                     	;# 
  1834  0211                     	;# 
  1835  0211                     	;# 
  1836  0212                     	;# 
  1837  0212                     	;# 
  1838  0213                     	;# 
  1839  0213                     	;# 
  1840  0214                     	;# 
  1841  0214                     	;# 
  1842  0215                     	;# 
  1843  0215                     	;# 
  1844  0215                     	;# 
  1845  0216                     	;# 
  1846  0216                     	;# 
  1847  0217                     	;# 
  1848  0217                     	;# 
  1849  0291                     	;# 
  1850  0291                     	;# 
  1851  0292                     	;# 
  1852  0293                     	;# 
  1853  0298                     	;# 
  1854  0298                     	;# 
  1855  0299                     	;# 
  1856  029A                     	;# 
  1857  0394                     	;# 
  1858  0395                     	;# 
  1859  0396                     	;# 
  1860  0FE4                     	;# 
  1861  0FE5                     	;# 
  1862  0FE6                     	;# 
  1863  0FE7                     	;# 
  1864  0FE8                     	;# 
  1865  0FE9                     	;# 
  1866  0FEA                     	;# 
  1867  0FEB                     	;# 
  1868  0FED                     	;# 
  1869  0FEE                     	;# 
  1870  0FEF                     	;# 
  1871  0000                     	;# 
  1872  0001                     	;# 
  1873  0002                     	;# 
  1874  0003                     	;# 
  1875  0004                     	;# 
  1876  0005                     	;# 
  1877  0006                     	;# 
  1878  0007                     	;# 
  1879  0008                     	;# 
  1880  0009                     	;# 
  1881  000A                     	;# 
  1882  000B                     	;# 
  1883  000C                     	;# 
  1884  000D                     	;# 
  1885  000E                     	;# 
  1886  0010                     	;# 
  1887  0011                     	;# 
  1888  0012                     	;# 
  1889  0015                     	;# 
  1890  0016                     	;# 
  1891  0016                     	;# 
  1892  0017                     	;# 
  1893  0018                     	;# 
  1894  0019                     	;# 
  1895  001A                     	;# 
  1896  001B                     	;# 
  1897  001C                     	;# 
  1898  008C                     	;# 
  1899  008D                     	;# 
  1900  008E                     	;# 
  1901  0090                     	;# 
  1902  0091                     	;# 
  1903  0092                     	;# 
  1904  0095                     	;# 
  1905  0096                     	;# 
  1906  0097                     	;# 
  1907  0099                     	;# 
  1908  009A                     	;# 
  1909  009B                     	;# 
  1910  009B                     	;# 
  1911  009C                     	;# 
  1912  009D                     	;# 
  1913  009E                     	;# 
  1914  010C                     	;# 
  1915  010D                     	;# 
  1916  010E                     	;# 
  1917  0116                     	;# 
  1918  0117                     	;# 
  1919  011D                     	;# 
  1920  018C                     	;# 
  1921  018D                     	;# 
  1922  018E                     	;# 
  1923  0191                     	;# 
  1924  0191                     	;# 
  1925  0192                     	;# 
  1926  0193                     	;# 
  1927  0193                     	;# 
  1928  0194                     	;# 
  1929  0195                     	;# 
  1930  0196                     	;# 
  1931  0197                     	;# 
  1932  0199                     	;# 
  1933  019A                     	;# 
  1934  019B                     	;# 
  1935  019B                     	;# 
  1936  019B                     	;# 
  1937  019B                     	;# 
  1938  019C                     	;# 
  1939  019C                     	;# 
  1940  019D                     	;# 
  1941  019E                     	;# 
  1942  019F                     	;# 
  1943  020D                     	;# 
  1944  0210                     	;# 
  1945  0211                     	;# 
  1946  0211                     	;# 
  1947  0212                     	;# 
  1948  0212                     	;# 
  1949  0213                     	;# 
  1950  0213                     	;# 
  1951  0214                     	;# 
  1952  0214                     	;# 
  1953  0215                     	;# 
  1954  0215                     	;# 
  1955  0215                     	;# 
  1956  0216                     	;# 
  1957  0216                     	;# 
  1958  0217                     	;# 
  1959  0217                     	;# 
  1960  0291                     	;# 
  1961  0291                     	;# 
  1962  0292                     	;# 
  1963  0293                     	;# 
  1964  0298                     	;# 
  1965  0298                     	;# 
  1966  0299                     	;# 
  1967  029A                     	;# 
  1968  0394                     	;# 
  1969  0395                     	;# 
  1970  0396                     	;# 
  1971  0FE4                     	;# 
  1972  0FE5                     	;# 
  1973  0FE6                     	;# 
  1974  0FE7                     	;# 
  1975  0FE8                     	;# 
  1976  0FE9                     	;# 
  1977  0FEA                     	;# 
  1978  0FEB                     	;# 
  1979  0FED                     	;# 
  1980  0FEE                     	;# 
  1981  0FEF                     	;# 
  1982  0000                     	;# 
  1983  0001                     	;# 
  1984  0002                     	;# 
  1985  0003                     	;# 
  1986  0004                     	;# 
  1987  0005                     	;# 
  1988  0006                     	;# 
  1989  0007                     	;# 
  1990  0008                     	;# 
  1991  0009                     	;# 
  1992  000A                     	;# 
  1993  000B                     	;# 
  1994  000C                     	;# 
  1995  000D                     	;# 
  1996  000E                     	;# 
  1997  0010                     	;# 
  1998  0011                     	;# 
  1999  0012                     	;# 
  2000  0015                     	;# 
  2001  0016                     	;# 
  2002  0016                     	;# 
  2003  0017                     	;# 
  2004  0018                     	;# 
  2005  0019                     	;# 
  2006  001A                     	;# 
  2007  001B                     	;# 
  2008  001C                     	;# 
  2009  008C                     	;# 
  2010  008D                     	;# 
  2011  008E                     	;# 
  2012  0090                     	;# 
  2013  0091                     	;# 
  2014  0092                     	;# 
  2015  0095                     	;# 
  2016  0096                     	;# 
  2017  0097                     	;# 
  2018  0099                     	;# 
  2019  009A                     	;# 
  2020  009B                     	;# 
  2021  009B                     	;# 
  2022  009C                     	;# 
  2023  009D                     	;# 
  2024  009E                     	;# 
  2025  010C                     	;# 
  2026  010D                     	;# 
  2027  010E                     	;# 
  2028  0116                     	;# 
  2029  0117                     	;# 
  2030  011D                     	;# 
  2031  018C                     	;# 
  2032  018D                     	;# 
  2033  018E                     	;# 
  2034  0191                     	;# 
  2035  0191                     	;# 
  2036  0192                     	;# 
  2037  0193                     	;# 
  2038  0193                     	;# 
  2039  0194                     	;# 
  2040  0195                     	;# 
  2041  0196                     	;# 
  2042  0197                     	;# 
  2043  0199                     	;# 
  2044  019A                     	;# 
  2045  019B                     	;# 
  2046  019B                     	;# 
  2047  019B                     	;# 
  2048  019B                     	;# 
  2049  019C                     	;# 
  2050  019C                     	;# 
  2051  019D                     	;# 
  2052  019E                     	;# 
  2053  019F                     	;# 
  2054  020D                     	;# 
  2055  0210                     	;# 
  2056  0211                     	;# 
  2057  0211                     	;# 
  2058  0212                     	;# 
  2059  0212                     	;# 
  2060  0213                     	;# 
  2061  0213                     	;# 
  2062  0214                     	;# 
  2063  0214                     	;# 
  2064  0215                     	;# 
  2065  0215                     	;# 
  2066  0215                     	;# 
  2067  0216                     	;# 
  2068  0216                     	;# 
  2069  0217                     	;# 
  2070  0217                     	;# 
  2071  0291                     	;# 
  2072  0291                     	;# 
  2073  0292                     	;# 
  2074  0293                     	;# 
  2075  0298                     	;# 
  2076  0298                     	;# 
  2077  0299                     	;# 
  2078  029A                     	;# 
  2079  0394                     	;# 
  2080  0395                     	;# 
  2081  0396                     	;# 
  2082  0FE4                     	;# 
  2083  0FE5                     	;# 
  2084  0FE6                     	;# 
  2085  0FE7                     	;# 
  2086  0FE8                     	;# 
  2087  0FE9                     	;# 
  2088  0FEA                     	;# 
  2089  0FEB                     	;# 
  2090  0FED                     	;# 
  2091  0FEE                     	;# 
  2092  0FEF                     	;# 
  2093  0000                     	;# 
  2094  0001                     	;# 
  2095  0002                     	;# 
  2096  0003                     	;# 
  2097  0004                     	;# 
  2098  0005                     	;# 
  2099  0006                     	;# 
  2100  0007                     	;# 
  2101  0008                     	;# 
  2102  0009                     	;# 
  2103  000A                     	;# 
  2104  000B                     	;# 
  2105  000C                     	;# 
  2106  000D                     	;# 
  2107  000E                     	;# 
  2108  0010                     	;# 
  2109  0011                     	;# 
  2110  0012                     	;# 
  2111  0015                     	;# 
  2112  0016                     	;# 
  2113  0016                     	;# 
  2114  0017                     	;# 
  2115  0018                     	;# 
  2116  0019                     	;# 
  2117  001A                     	;# 
  2118  001B                     	;# 
  2119  001C                     	;# 
  2120  008C                     	;# 
  2121  008D                     	;# 
  2122  008E                     	;# 
  2123  0090                     	;# 
  2124  0091                     	;# 
  2125  0092                     	;# 
  2126  0095                     	;# 
  2127  0096                     	;# 
  2128  0097                     	;# 
  2129  0099                     	;# 
  2130  009A                     	;# 
  2131  009B                     	;# 
  2132  009B                     	;# 
  2133  009C                     	;# 
  2134  009D                     	;# 
  2135  009E                     	;# 
  2136  010C                     	;# 
  2137  010D                     	;# 
  2138  010E                     	;# 
  2139  0116                     	;# 
  2140  0117                     	;# 
  2141  011D                     	;# 
  2142  018C                     	;# 
  2143  018D                     	;# 
  2144  018E                     	;# 
  2145  0191                     	;# 
  2146  0191                     	;# 
  2147  0192                     	;# 
  2148  0193                     	;# 
  2149  0193                     	;# 
  2150  0194                     	;# 
  2151  0195                     	;# 
  2152  0196                     	;# 
  2153  0197                     	;# 
  2154  0199                     	;# 
  2155  019A                     	;# 
  2156  019B                     	;# 
  2157  019B                     	;# 
  2158  019B                     	;# 
  2159  019B                     	;# 
  2160  019C                     	;# 
  2161  019C                     	;# 
  2162  019D                     	;# 
  2163  019E                     	;# 
  2164  019F                     	;# 
  2165  020D                     	;# 
  2166  0210                     	;# 
  2167  0211                     	;# 
  2168  0211                     	;# 
  2169  0212                     	;# 
  2170  0212                     	;# 
  2171  0213                     	;# 
  2172  0213                     	;# 
  2173  0214                     	;# 
  2174  0214                     	;# 
  2175  0215                     	;# 
  2176  0215                     	;# 
  2177  0215                     	;# 
  2178  0216                     	;# 
  2179  0216                     	;# 
  2180  0217                     	;# 
  2181  0217                     	;# 
  2182  0291                     	;# 
  2183  0291                     	;# 
  2184  0292                     	;# 
  2185  0293                     	;# 
  2186  0298                     	;# 
  2187  0298                     	;# 
  2188  0299                     	;# 
  2189  029A                     	;# 
  2190  0394                     	;# 
  2191  0395                     	;# 
  2192  0396                     	;# 
  2193  0FE4                     	;# 
  2194  0FE5                     	;# 
  2195  0FE6                     	;# 
  2196  0FE7                     	;# 
  2197  0FE8                     	;# 
  2198  0FE9                     	;# 
  2199  0FEA                     	;# 
  2200  0FEB                     	;# 
  2201  0FED                     	;# 
  2202  0FEE                     	;# 
  2203  0FEF                     	;# 
  2204                           
  2205                           	psect	idataBANK2
  2206  0002                     __pidataBANK2:	
  2207                           
  2208                           ;initializer for Bq32k_Time_Init@F2033
  2209  0002  34B0               	retlw	176
  2210  0003  34E5               	retlw	229
  2211                           
  2212                           	psect	stringtext
  2213  1800                     __pstringtext:	
  2214  1800                     _Dis_TAB:	
  2215  1800  34D7               	retlw	215
  2216  1801  3450               	retlw	80
  2217  1802  34B5               	retlw	181
  2218  1803  34F1               	retlw	241
  2219  1804  3472               	retlw	114
  2220  1805  34E3               	retlw	227
  2221  1806  34E7               	retlw	231
  2222  1807  3451               	retlw	81
  2223  1808  34F7               	retlw	247
  2224  1809  34F3               	retlw	243
  2225  180A  3477               	retlw	119
  2226  180B  34E6               	retlw	230
  2227  180C  3487               	retlw	135
  2228  180D  34F4               	retlw	244
  2229  180E  34A7               	retlw	167
  2230  180F  3427               	retlw	39
  2231  1810  3457               	retlw	87
  2232  1811  3420               	retlw	32
  2233  1812  3420               	retlw	32
  2234  1813  3420               	retlw	32
  2235  1814  3420               	retlw	32
  2236  1815                     __end_of_Dis_TAB:	
  2237                           
  2238                           	psect	nvBANK2
  2239  016C                     __pnvBANK2:	
  2240  016C                     _eusartTxBufferRemaining:	
  2241  016C                     	ds	1
  2242  016D                     _timer0ReloadVal:	
  2243  016D                     	ds	1
  2244  000B                     _INTCONbits	set	11
  2245  0011                     _PIR1bits	set	17
  2246  0015                     _TMR0	set	21
  2247  0067                     _RA7	set	103
  2248  0069                     _RB1	set	105
  2249  006B                     _RB3	set	107
  2250  006D                     _RB5	set	109
  2251  009D                     _ADCON0	set	157
  2252  009D                     _ADCON0bits	set	157
  2253  009E                     _ADCON1	set	158
  2254  009C                     _ADRESH	set	156
  2255  009B                     _ADRESL	set	155
  2256  0095                     _OPTION_REG	set	149
  2257  0095                     _OPTION_REGbits	set	149
  2258  0099                     _OSCCON	set	153
  2259  009A                     _OSCSTAT	set	154
  2260  0091                     _PIE1bits	set	145
  2261  008C                     _TRISA	set	140
  2262  008D                     _TRISB	set	141
  2263  008E                     _TRISC	set	142
  2264  04B8                     _SWDTEN	set	1208
  2265  0469                     _TRISB1	set	1129
  2266  046B                     _TRISB3	set	1131
  2267  04B9                     _WDTPS0	set	1209
  2268  04BA                     _WDTPS1	set	1210
  2269  04BB                     _WDTPS2	set	1211
  2270  04BC                     _WDTPS3	set	1212
  2271  04BD                     _WDTPS4	set	1213
  2272  011D                     _APFCON	set	285
  2273  0117                     _FVRCON	set	279
  2274  0117                     _FVRCONbits	set	279
  2275  010C                     _LATA	set	268
  2276  010D                     _LATB	set	269
  2277  010E                     _LATC	set	270
  2278  0860                     _LATA0	set	2144
  2279  0861                     _LATA1	set	2145
  2280  0862                     _LATA2	set	2146
  2281  0863                     _LATA3	set	2147
  2282  0864                     _LATA4	set	2148
  2283  0865                     _LATA5	set	2149
  2284  0866                     _LATA6	set	2150
  2285  0868                     _LATB0	set	2152
  2286  0869                     _LATB1	set	2153
  2287  0870                     _LATC0	set	2160
  2288  0871                     _LATC1	set	2161
  2289  0872                     _LATC2	set	2162
  2290  018C                     _ANSELA	set	396
  2291  018D                     _ANSELB	set	397
  2292  018E                     _ANSELC	set	398
  2293  019F                     _BAUDCON	set	415
  2294  0192                     _PMADRH	set	402
  2295  0191                     _PMADRL	set	401
  2296  0195                     _PMCON1bits	set	405
  2297  0196                     _PMCON2	set	406
  2298  0194                     _PMDATH	set	404
  2299  0193                     _PMDATL	set	403
  2300  0199                     _RCREG	set	409
  2301  019D                     _RCSTA	set	413
  2302  019D                     _RCSTAbits	set	413
  2303  019C                     _SPBRGH	set	412
  2304  019B                     _SPBRGL	set	411
  2305  019A                     _TXREG	set	410
  2306  019E                     _TXSTA	set	414
  2307  0212                     _SSP1ADD	set	530
  2308  0215                     _SSP1CON1	set	533
  2309  0215                     _SSP1CON1bits	set	533
  2310  0214                     _SSP1STAT	set	532
  2311  0214                     _SSP1STATbits	set	532
  2312  0211                     _SSPBUF	set	529
  2313  020D                     _WPUB	set	525
  2314  0210                     _WPUE	set	528
  2315                           
  2316                           ; #config settings
  2317  0000                     
  2318                           	psect	cinit
  2319  0029                     start_initialization:	
  2320  0029                     __initialization:	
  2321                           
  2322                           ; Clear objects allocated to BANK0
  2323  0029  01E5               	clrf	__pbssBANK0& (0+127)
  2324  002A  01E6               	clrf	(__pbssBANK0+1)& (0+127)
  2325  002B  01E7               	clrf	(__pbssBANK0+2)& (0+127)
  2326  002C  01E8               	clrf	(__pbssBANK0+3)& (0+127)
  2327  002D  01E9               	clrf	(__pbssBANK0+4)& (0+127)
  2328  002E  01EA               	clrf	(__pbssBANK0+5)& (0+127)
  2329                           
  2330                           ; Clear objects allocated to BANK1
  2331  002F  0021               	movlb	1	; select bank1
  2332  0030  01EE               	clrf	__pbssBANK1& (0+127)
  2333  0031  01EF               	clrf	(__pbssBANK1+1)& (0+127)
  2334                           
  2335                           ; Clear objects allocated to BANK2
  2336  0032  3020               	movlw	low __pbssBANK2
  2337  0033  0084               	movwf	4
  2338  0034  3001               	movlw	high __pbssBANK2
  2339  0035  0085               	movwf	5
  2340  0036  304C               	movlw	76
  2341  0037  3193  233A  3180   	fcall	clear_ram0
  2342                           
  2343                           ; Clear objects allocated to BANK3
  2344  003A  30A0               	movlw	low __pbssBANK3
  2345  003B  0084               	movwf	4
  2346  003C  3001               	movlw	high __pbssBANK3
  2347  003D  0085               	movwf	5
  2348  003E  3038               	movlw	56
  2349  003F  3193  233A  3180   	fcall	clear_ram0
  2350                           
  2351                           ; Clear objects allocated to BANK4
  2352  0042  3020               	movlw	low __pbssBANK4
  2353  0043  0084               	movwf	4
  2354  0044  3002               	movlw	high __pbssBANK4
  2355  0045  0085               	movwf	5
  2356  0046  3040               	movlw	64
  2357  0047  3193  233A  3180   	fcall	clear_ram0
  2358                           
  2359                           ; Initialize objects allocated to BANK2
  2360  004A  0022               	movlb	2	; select bank2
  2361  004B  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  2362  004E  00EE               	movwf	__pdataBANK2& (0+127)
  2363  004F  3180  2003         	fcall	__pidataBANK2+1	;fetch initializer
  2364  0051  00EF               	movwf	(__pdataBANK2+1)& (0+127)
  2365  0052                     end_of_initialization:	
  2366                           ;End of C runtime variable initialization code
  2367                           
  2368  0052                     __end_of__initialization:	
  2369  0052  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2370  0053  0020               	movlb	0
  2371  0054  3184  2C07         	ljmp	_main	;jump to C main() function
  2372                           
  2373                           	psect	bssBANK0
  2374  0065                     __pbssBANK0:	
  2375  0065                     _Cur_Save_Index:	
  2376  0065                     	ds	2
  2377  0067                     _Record_flag:	
  2378  0067                     	ds	1
  2379  0068                     _Usart_Rx_Cnt:	
  2380  0068                     	ds	1
  2381  0069                     _temperature_decimal:	
  2382  0069                     	ds	1
  2383  006A                     _time_count:	
  2384  006A                     	ds	1
  2385                           
  2386                           	psect	bssBANK1
  2387  00EE                     __pbssBANK1:	
  2388  00EE                     _LongPressSec:	
  2389  00EE                     	ds	1
  2390  00EF                     _uch_cr0:	
  2391  00EF                     	ds	1
  2392                           
  2393                           	psect	bssBANK2
  2394  0120                     __pbssBANK2:	
  2395  0120                     Two_Display@F2138:	
  2396  0120                     	ds	4
  2397  0124                     _temperature_value:	
  2398  0124                     	ds	4
  2399  0128                     TMR0_ISR@CountCallBack:	
  2400  0128                     	ds	2
  2401  012A                     _CH1_temperature:	
  2402  012A                     	ds	2
  2403  012C                     _CH2_temperature:	
  2404  012C                     	ds	2
  2405  012E                     _Cur_Save_Index_Bak:	
  2406  012E                     	ds	2
  2407  0130                     _Cur_temperature:	
  2408  0130                     	ds	2
  2409  0132                     _temperature_int:	
  2410  0132                     	ds	2
  2411  0134                     _CH1_state:	
  2412  0134                     	ds	1
  2413  0135                     _CH2_state:	
  2414  0135                     	ds	1
  2415  0136                     _Cur_temperature_time_ch1:	
  2416  0136                     	ds	1
  2417  0137                     _Cur_temperature_time_ch2:	
  2418  0137                     	ds	1
  2419  0138                     _Inf_cmd_flag:	
  2420  0138                     	ds	1
  2421  0139                     _MAX31856Sec:	
  2422  0139                     	ds	1
  2423  013A                     _Set_time_cmd_flag:	
  2424  013A                     	ds	1
  2425  013B                     _Usart_Run_Flag:	
  2426  013B                     	ds	1
  2427  013C                     _eusartRxCount:	
  2428  013C                     	ds	1
  2429  013D                     _eusartRxHead:	
  2430  013D                     	ds	1
  2431  013E                     _eusartRxTail:	
  2432  013E                     	ds	1
  2433  013F                     _eusartTxHead:	
  2434  013F                     	ds	1
  2435  0140                     _eusartTxTail:	
  2436  0140                     	ds	1
  2437  0141                     _temperature_sign:	
  2438  0141                     	ds	1
  2439  0142                     _tmr_flag:	
  2440  0142                     	ds	1
  2441  0143                     _uch_cjth:	
  2442  0143                     	ds	1
  2443  0144                     _uch_cjtl:	
  2444  0144                     	ds	1
  2445  0145                     _uch_cr1:	
  2446  0145                     	ds	1
  2447  0146                     _uch_ltcbh:	
  2448  0146                     	ds	1
  2449  0147                     _uch_ltcbl:	
  2450  0147                     	ds	1
  2451  0148                     _uch_ltcbm:	
  2452  0148                     	ds	1
  2453  0149                     _uch_mask:	
  2454  0149                     	ds	1
  2455  014A                     _uch_sr:	
  2456  014A                     	ds	1
  2457  014B                     _uch_reg:	
  2458  014B                     	ds	8
  2459  0153                     _rtc_save_ch1:	
  2460  0153                     	ds	7
  2461  015A                     _rtc_save_ch2:	
  2462  015A                     	ds	7
  2463  0161                     _rtc_tm:	
  2464  0161                     	ds	7
  2465  0168                     _display_buff:	
  2466  0168                     	ds	4
  2467                           
  2468                           	psect	dataBANK2
  2469  016E                     __pdataBANK2:	
  2470  016E                     Bq32k_Time_Init@F2033:	
  2471  016E                     	ds	2
  2472                           
  2473                           	psect	bssBANK3
  2474  01A0                     __pbssBANK3:	
  2475  01A0                     _eusartRxBuffer:	
  2476  01A0                     	ds	8
  2477  01A8                     _eusartTxBuffer:	
  2478  01A8                     	ds	8
  2479  01B0                     err_Display@F2141:	
  2480  01B0                     	ds	4
  2481  01B4                     time_Display@F2144:	
  2482  01B4                     	ds	4
  2483  01B8                     _Usart_Rx_Buff:	
  2484  01B8                     	ds	32
  2485                           
  2486                           	psect	bssBANK4
  2487  0220                     __pbssBANK4:	
  2488  0220                     _Flash_buff:	
  2489  0220                     	ds	64
  2490                           
  2491                           	psect	clrtext
  2492  133A                     clear_ram0:	
  2493                           ;	Called with FSR0 containing the base address, and
  2494                           ;	WREG with the size to clear
  2495                           
  2496  133A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2497  133B                     clrloop0:	
  2498  133B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2499  133C  3101               	addfsr 0,1
  2500  133D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2501  133E  2B3B               	goto	clrloop0	;have we reached the end yet?
  2502  133F  3400               	retlw	0	;all done for this memory range, return
  2503                           
  2504                           	psect	cstackBANK3
  2505  01D8                     __pcstackBANK3:	
  2506  01D8                     main@data_temp:	
  2507                           
  2508                           ; 2 bytes @ 0x0
  2509  01D8                     	ds	2
  2510  01DA                     main@i:	
  2511                           
  2512                           ; 1 bytes @ 0x2
  2513  01DA                     	ds	1
  2514  01DB                     main@bat_data:	
  2515                           
  2516                           ; 2 bytes @ 0x3
  2517  01DB                     	ds	2
  2518                           
  2519                           	psect	cstackBANK1
  2520  00A0                     __pcstackBANK1:	
  2521  00A0                     Inf_to_Com@tmp_buf:	
  2522                           
  2523                           ; 72 bytes @ 0x0
  2524  00A0                     	ds	72
  2525  00E8                     Inf_to_Com@add_tmp:	
  2526                           
  2527                           ; 2 bytes @ 0x48
  2528  00E8                     	ds	2
  2529  00EA                     Inf_to_Com@crc_tmp:	
  2530                           
  2531                           ; 2 bytes @ 0x4A
  2532  00EA                     	ds	2
  2533  00EC                     Inf_to_Com@i:	
  2534                           
  2535                           ; 1 bytes @ 0x4C
  2536  00EC                     	ds	1
  2537  00ED                     Inf_to_Com@count_tmp:	
  2538                           
  2539                           ; 1 bytes @ 0x4D
  2540  00ED                     	ds	1
  2541                           
  2542                           	psect	cstackCOMMON
  2543  0070                     __pcstackCOMMON:	
  2544  0070                     ?_OSCILLATOR_Initialize:	
  2545  0070                     ?_SPI_Initialize:	
  2546                           ; 1 bytes @ 0x0
  2547                           
  2548  0070                     ?_EUSART_Initialize:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0070                     ?_ADC_Initialize:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0070                     ?_FVR_Initialize:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0070                     ?_TMR0_Initialize:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560  0070                     ?_RxFrameCheck:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563  0070                     ?_TMR0_CallBack:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566  0070                     ??_TMR0_CallBack:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569  0070                     ?_SendCmd_1621:	
  2570                           ; 1 bytes @ 0x0
  2571                           
  2572  0070                     ?_Serach_Flash_Head:	
  2573                           ; 1 bytes @ 0x0
  2574                           
  2575  0070                     ?_temperature_process:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578  0070                     ?_Key_Process:	
  2579                           ; 1 bytes @ 0x0
  2580                           
  2581  0070                     ?_Save_process:	
  2582                           ; 1 bytes @ 0x0
  2583                           
  2584  0070                     ?_Set_finish_flag:	
  2585                           ; 1 bytes @ 0x0
  2586                           
  2587  0070                     ?_Write_Flash_finish:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590  0070                     ?_Sleep_process:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593  0070                     ?_Calculate_Time:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596  0070                     ?_Tc_Display:	
  2597                           ; 1 bytes @ 0x0
  2598                           
  2599  0070                     ?_err_Display:	
  2600                           ; 1 bytes @ 0x0
  2601                           
  2602  0070                     ?_Two_Display:	
  2603                           ; 1 bytes @ 0x0
  2604                           
  2605  0070                     ?_time_Display:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608  0070                     ?_Bq32k_Rtc_Read_Time:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611  0070                     ?_Set_start_flag:	
  2612                           ; 1 bytes @ 0x0
  2613                           
  2614  0070                     ?_Write_Flash_head:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617  0070                     ?_Save_Write_time:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620  0070                     ?_bcd2bin:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623  0070                     ?_bin2bcd:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0070                     ?_Step_control:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0070                     ?_Set_time_from_Com:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0070                     ?_Inf_to_Com:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0070                     ?_Read_time_to_Com:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0070                     ?_PIN_MANAGER_Initialize:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0070                     ?_SYSTEM_Initialize:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644  0070                     ?_SPI_Exchange8bit:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647  0070                     ?_EUSART_Write:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650  0070                     ?_EUSART_Transmit_ISR:	
  2651                           ; 1 bytes @ 0x0
  2652                           
  2653  0070                     ??_EUSART_Transmit_ISR:	
  2654                           ; 1 bytes @ 0x0
  2655                           
  2656  0070                     ?_EUSART_Receive_ISR:	
  2657                           ; 1 bytes @ 0x0
  2658                           
  2659  0070                     ?_TMR0_ISR:	
  2660                           ; 1 bytes @ 0x0
  2661                           
  2662  0070                     ?_INTERRUPT_InterruptManager:	
  2663                           ; 1 bytes @ 0x0
  2664                           
  2665  0070                     ?_main:	
  2666                           ; 1 bytes @ 0x0
  2667                           
  2668  0070                     ?_maxim_31856_read_register:	
  2669                           ; 1 bytes @ 0x0
  2670                           
  2671  0070                     ?_maxim_start_conversion:	
  2672                           ; 1 bytes @ 0x0
  2673                           
  2674  0070                     ?_maxim_clear_fault_status:	
  2675                           ; 1 bytes @ 0x0
  2676                           
  2677  0070                     ?_tc_temperature_trans:	
  2678                           ; 1 bytes @ 0x0
  2679                           
  2680  0070                     ?_one_temperature_trans:	
  2681                           ; 1 bytes @ 0x0
  2682                           
  2683  0070                     ?_temperature_display:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686  0070                     ?_I2C_Start:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689  0070                     ?_I2C_Send_Byte:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692  0070                     ?_I2C_Receive_Byte:	
  2693                           ; 1 bytes @ 0x0
  2694                           
  2695  0070                     ?_I2C_Stop:	
  2696                           ; 1 bytes @ 0x0
  2697                           
  2698  0070                     ?_Key_Scan:	
  2699                           ; 1 bytes @ 0x0
  2700                           
  2701  0070                     ?_Bq32k_Rtc_Write_Time:	
  2702                           ; 1 bytes @ 0x0
  2703                           
  2704  0070                     ?_Com_Process:	
  2705                           ; 1 bytes @ 0x0
  2706                           
  2707  0070                     RxFrameCheck@frame_len:	
  2708                           ; 2 bytes @ 0x0
  2709                           
  2710                           
  2711                           ; 1 bytes @ 0x0
  2712  0070                     	ds	1
  2713  0071                     ??_RxFrameCheck:	
  2714  0071                     ??_TMR0_ISR:	
  2715                           ; 1 bytes @ 0x1
  2716                           
  2717                           
  2718                           ; 1 bytes @ 0x1
  2719  0071                     	ds	4
  2720  0075                     RxFrameCheck@tmp_crc:	
  2721                           
  2722                           ; 2 bytes @ 0x5
  2723  0075                     	ds	2
  2724  0077                     RxFrameCheck@i:	
  2725                           
  2726                           ; 1 bytes @ 0x7
  2727  0077                     	ds	1
  2728  0078                     RxFrameCheck@rx_arr:	
  2729                           
  2730                           ; 1 bytes @ 0x8
  2731  0078                     	ds	1
  2732  0079                     RxFrameCheck@remainder:	
  2733                           
  2734                           ; 2 bytes @ 0x9
  2735  0079                     	ds	2
  2736  007B                     ??_EUSART_Receive_ISR:	
  2737                           
  2738                           ; 1 bytes @ 0xB
  2739  007B                     	ds	2
  2740  007D                     EUSART_Receive_ISR@rx_tmp:	
  2741                           
  2742                           ; 1 bytes @ 0xD
  2743  007D                     	ds	1
  2744                           
  2745                           	psect	cstackBANK0
  2746  0020                     __pcstackBANK0:	
  2747  0020                     ??_INTERRUPT_InterruptManager:	
  2748                           
  2749                           ; 1 bytes @ 0x0
  2750  0020                     	ds	1
  2751  0021                     ??_OSCILLATOR_Initialize:	
  2752  0021                     ??_SPI_Initialize:	
  2753                           ; 1 bytes @ 0x1
  2754                           
  2755  0021                     ??_EUSART_Initialize:	
  2756                           ; 1 bytes @ 0x1
  2757                           
  2758  0021                     ??_ADC_Initialize:	
  2759                           ; 1 bytes @ 0x1
  2760                           
  2761  0021                     ??_FVR_Initialize:	
  2762                           ; 1 bytes @ 0x1
  2763                           
  2764  0021                     ??_TMR0_Initialize:	
  2765                           ; 1 bytes @ 0x1
  2766                           
  2767  0021                     ?_FLASH_EraseBlock:	
  2768                           ; 1 bytes @ 0x1
  2769                           
  2770  0021                     ??_Set_finish_flag:	
  2771                           ; 1 bytes @ 0x1
  2772                           
  2773  0021                     ?_memset:	
  2774                           ; 1 bytes @ 0x1
  2775                           
  2776  0021                     ??_Set_start_flag:	
  2777                           ; 1 bytes @ 0x1
  2778                           
  2779  0021                     ??_Step_control:	
  2780                           ; 1 bytes @ 0x1
  2781                           
  2782  0021                     ??_PIN_MANAGER_Initialize:	
  2783                           ; 1 bytes @ 0x1
  2784                           
  2785  0021                     ??_SPI_Exchange8bit:	
  2786                           ; 1 bytes @ 0x1
  2787                           
  2788  0021                     ??_EUSART_Write:	
  2789                           ; 1 bytes @ 0x1
  2790                           
  2791  0021                     ?_FLASH_WriteWord:	
  2792                           ; 1 bytes @ 0x1
  2793                           
  2794  0021                     ?_SendBit_1621:	
  2795                           ; 1 bytes @ 0x1
  2796                           
  2797  0021                     ?_SendDataBit_1621:	
  2798                           ; 1 bytes @ 0x1
  2799                           
  2800  0021                     ??_I2C_Start:	
  2801                           ; 1 bytes @ 0x1
  2802                           
  2803  0021                     ??_I2C_Send_Byte:	
  2804                           ; 1 bytes @ 0x1
  2805                           
  2806  0021                     ??_I2C_Receive_Byte:	
  2807                           ; 1 bytes @ 0x1
  2808                           
  2809  0021                     ??_I2C_Stop:	
  2810                           ; 1 bytes @ 0x1
  2811                           
  2812  0021                     ??_Key_Scan:	
  2813                           ; 1 bytes @ 0x1
  2814                           
  2815  0021                     ?___bmul:	
  2816                           ; 1 bytes @ 0x1
  2817                           
  2818  0021                     ?_CRC_cal:	
  2819                           ; 1 bytes @ 0x1
  2820                           
  2821  0021                     ?_FLASH_ReadWord:	
  2822                           ; 2 bytes @ 0x1
  2823                           
  2824  0021                     ?_ADC_GetConversion:	
  2825                           ; 2 bytes @ 0x1
  2826                           
  2827  0021                     ?___wmul:	
  2828                           ; 2 bytes @ 0x1
  2829                           
  2830  0021                     ?___awdiv:	
  2831                           ; 2 bytes @ 0x1
  2832                           
  2833  0021                     ?___awmod:	
  2834                           ; 2 bytes @ 0x1
  2835                           
  2836  0021                     ?___lwmod:	
  2837                           ; 2 bytes @ 0x1
  2838                           
  2839  0021                     SPI_Exchange8bit@data:	
  2840                           ; 2 bytes @ 0x1
  2841                           
  2842  0021                     EUSART_Write@txData:	
  2843                           ; 1 bytes @ 0x1
  2844                           
  2845  0021                     SendBit_1621@cnt:	
  2846                           ; 1 bytes @ 0x1
  2847                           
  2848  0021                     SendDataBit_1621@cnt:	
  2849                           ; 1 bytes @ 0x1
  2850                           
  2851  0021                     CRC_cal@frame_len:	
  2852                           ; 1 bytes @ 0x1
  2853                           
  2854  0021                     ___bmul@multiplicand:	
  2855                           ; 1 bytes @ 0x1
  2856                           
  2857  0021                     FLASH_ReadWord@flashAddr:	
  2858                           ; 1 bytes @ 0x1
  2859                           
  2860  0021                     FLASH_WriteWord@flashAddr:	
  2861                           ; 2 bytes @ 0x1
  2862                           
  2863  0021                     FLASH_EraseBlock@startAddr:	
  2864                           ; 2 bytes @ 0x1
  2865                           
  2866  0021                     ___wmul@multiplier:	
  2867                           ; 2 bytes @ 0x1
  2868                           
  2869  0021                     ___awdiv@divisor:	
  2870                           ; 2 bytes @ 0x1
  2871                           
  2872  0021                     ___awmod@divisor:	
  2873                           ; 2 bytes @ 0x1
  2874                           
  2875  0021                     ___lwmod@divisor:	
  2876                           ; 2 bytes @ 0x1
  2877                           
  2878  0021                     memset@c:	
  2879                           ; 2 bytes @ 0x1
  2880                           
  2881                           
  2882                           ; 2 bytes @ 0x1
  2883  0021                     	ds	1
  2884  0022                     ??_Sleep_process:	
  2885  0022                     ??_SYSTEM_Initialize:	
  2886                           ; 1 bytes @ 0x2
  2887                           
  2888  0022                     ?_SPI_Exchange8bitBuffer:	
  2889                           ; 1 bytes @ 0x2
  2890                           
  2891  0022                     ?_maxim_31856_write_register:	
  2892                           ; 1 bytes @ 0x2
  2893                           
  2894  0022                     ??_maxim_31856_read_register:	
  2895                           ; 1 bytes @ 0x2
  2896                           
  2897  0022                     ??_SendBit_1621:	
  2898                           ; 1 bytes @ 0x2
  2899                           
  2900  0022                     ??_SendDataBit_1621:	
  2901                           ; 1 bytes @ 0x2
  2902                           
  2903  0022                     ??___bmul:	
  2904                           ; 1 bytes @ 0x2
  2905                           
  2906  0022                     SPI_Exchange8bitBuffer@bufLen:	
  2907                           ; 1 bytes @ 0x2
  2908                           
  2909  0022                     maxim_31856_write_register@uch_register_value:	
  2910                           ; 1 bytes @ 0x2
  2911                           
  2912  0022                     I2C_Send_Byte@Data:	
  2913                           ; 1 bytes @ 0x2
  2914                           
  2915  0022                     I2C_Receive_Byte@Data:	
  2916                           ; 1 bytes @ 0x2
  2917                           
  2918                           
  2919                           ; 1 bytes @ 0x2
  2920  0022                     	ds	1
  2921  0023                     ??_FLASH_EraseBlock:	
  2922  0023                     ??_CRC_cal:	
  2923                           ; 1 bytes @ 0x3
  2924                           
  2925  0023                     ??_FLASH_ReadWord:	
  2926                           ; 1 bytes @ 0x3
  2927                           
  2928  0023                     ??_ADC_GetConversion:	
  2929                           ; 1 bytes @ 0x3
  2930                           
  2931  0023                     ??_maxim_31856_write_register:	
  2932                           ; 1 bytes @ 0x3
  2933                           
  2934  0023                     SPI_Exchange8bitBuffer@dataOut:	
  2935                           ; 1 bytes @ 0x3
  2936                           
  2937  0023                     FLASH_ReadWord@GIEBitValue:	
  2938                           ; 1 bytes @ 0x3
  2939                           
  2940  0023                     FLASH_EraseBlock@GIEBitValue:	
  2941                           ; 1 bytes @ 0x3
  2942                           
  2943  0023                     maxim_31856_write_register@uch_register_address:	
  2944                           ; 1 bytes @ 0x3
  2945                           
  2946  0023                     maxim_31856_read_register@uch_register_address:	
  2947                           ; 1 bytes @ 0x3
  2948                           
  2949  0023                     SendBit_1621@data:	
  2950                           ; 1 bytes @ 0x3
  2951                           
  2952  0023                     SendDataBit_1621@data:	
  2953                           ; 1 bytes @ 0x3
  2954                           
  2955  0023                     I2C_Send_Byte@i:	
  2956                           ; 1 bytes @ 0x3
  2957                           
  2958  0023                     I2C_Receive_Byte@i:	
  2959                           ; 1 bytes @ 0x3
  2960                           
  2961  0023                     Key_Scan@Key_val:	
  2962                           ; 1 bytes @ 0x3
  2963                           
  2964  0023                     ___bmul@product:	
  2965                           ; 1 bytes @ 0x3
  2966                           
  2967  0023                     FLASH_WriteWord@word:	
  2968                           ; 1 bytes @ 0x3
  2969                           
  2970  0023                     ___wmul@multiplicand:	
  2971                           ; 2 bytes @ 0x3
  2972                           
  2973  0023                     ___awdiv@dividend:	
  2974                           ; 2 bytes @ 0x3
  2975                           
  2976  0023                     ___awmod@dividend:	
  2977                           ; 2 bytes @ 0x3
  2978                           
  2979  0023                     ___lwmod@dividend:	
  2980                           ; 2 bytes @ 0x3
  2981                           
  2982  0023                     memset@n:	
  2983                           ; 2 bytes @ 0x3
  2984                           
  2985                           
  2986                           ; 2 bytes @ 0x3
  2987  0023                     	ds	1
  2988  0024                     ??_SPI_Exchange8bitBuffer:	
  2989  0024                     ?_FLASH_readBlock:	
  2990                           ; 1 bytes @ 0x4
  2991                           
  2992  0024                     ?_I2C_Read_Buffer:	
  2993                           ; 1 bytes @ 0x4
  2994                           
  2995  0024                     ?_I2C_Send_Buffer:	
  2996                           ; 1 bytes @ 0x4
  2997                           
  2998  0024                     ADC_GetConversion@channel:	
  2999                           ; 1 bytes @ 0x4
  3000                           
  3001  0024                     maxim_31856_read_register@uch_register_data:	
  3002                           ; 1 bytes @ 0x4
  3003                           
  3004  0024                     SendBit_1621@i:	
  3005                           ; 1 bytes @ 0x4
  3006                           
  3007  0024                     SendDataBit_1621@i:	
  3008                           ; 1 bytes @ 0x4
  3009                           
  3010  0024                     I2C_Read_Buffer@buff:	
  3011                           ; 1 bytes @ 0x4
  3012                           
  3013  0024                     I2C_Send_Buffer@buff:	
  3014                           ; 1 bytes @ 0x4
  3015                           
  3016  0024                     ___bmul@multiplier:	
  3017                           ; 1 bytes @ 0x4
  3018                           
  3019  0024                     FLASH_readBlock@address:	
  3020                           ; 1 bytes @ 0x4
  3021                           
  3022                           
  3023                           ; 2 bytes @ 0x4
  3024  0024                     	ds	1
  3025  0025                     ??_SendCmd_1621:	
  3026  0025                     ?_WriteAll_1621:	
  3027                           ; 1 bytes @ 0x5
  3028                           
  3029  0025                     ??_memset:	
  3030                           ; 1 bytes @ 0x5
  3031                           
  3032  0025                     ??_bcd2bin:	
  3033                           ; 1 bytes @ 0x5
  3034                           
  3035  0025                     ??_FLASH_WriteWord:	
  3036                           ; 1 bytes @ 0x5
  3037                           
  3038  0025                     ??_maxim_start_conversion:	
  3039                           ; 1 bytes @ 0x5
  3040                           
  3041  0025                     ??_maxim_clear_fault_status:	
  3042                           ; 1 bytes @ 0x5
  3043                           
  3044  0025                     ??___wmul:	
  3045                           ; 1 bytes @ 0x5
  3046                           
  3047  0025                     ??___awdiv:	
  3048                           ; 1 bytes @ 0x5
  3049                           
  3050  0025                     ??___awmod:	
  3051                           ; 1 bytes @ 0x5
  3052                           
  3053  0025                     ??___lwmod:	
  3054                           ; 1 bytes @ 0x5
  3055                           
  3056  0025                     FLASH_WriteWord@GIEBitValue:	
  3057                           ; 1 bytes @ 0x5
  3058                           
  3059  0025                     I2C_Read_Buffer@Length:	
  3060                           ; 1 bytes @ 0x5
  3061                           
  3062  0025                     I2C_Send_Buffer@Length:	
  3063                           ; 1 bytes @ 0x5
  3064                           
  3065  0025                     WriteAll_1621@p:	
  3066                           ; 1 bytes @ 0x5
  3067                           
  3068  0025                     ___wmul@product:	
  3069                           ; 2 bytes @ 0x5
  3070                           
  3071                           
  3072                           ; 2 bytes @ 0x5
  3073  0025                     	ds	1
  3074  0026                     ??_Serach_Flash_Head:	
  3075  0026                     ??_Write_Flash_finish:	
  3076                           ; 1 bytes @ 0x6
  3077                           
  3078  0026                     ?_Save_Write_word:	
  3079                           ; 1 bytes @ 0x6
  3080                           
  3081  0026                     ??_Write_Flash_head:	
  3082                           ; 1 bytes @ 0x6
  3083                           
  3084  0026                     ??_I2C_Read_Buffer:	
  3085                           ; 1 bytes @ 0x6
  3086                           
  3087  0026                     ??_I2C_Send_Buffer:	
  3088                           ; 1 bytes @ 0x6
  3089                           
  3090  0026                     FLASH_readBlock@count:	
  3091                           ; 1 bytes @ 0x6
  3092                           
  3093  0026                     maxim_start_conversion@uch_conversion_mode:	
  3094                           ; 1 bytes @ 0x6
  3095                           
  3096  0026                     SendCmd_1621@command:	
  3097                           ; 1 bytes @ 0x6
  3098                           
  3099  0026                     ___awdiv@counter:	
  3100                           ; 1 bytes @ 0x6
  3101                           
  3102  0026                     ___awmod@counter:	
  3103                           ; 1 bytes @ 0x6
  3104                           
  3105  0026                     ___lwmod@counter:	
  3106                           ; 1 bytes @ 0x6
  3107                           
  3108  0026                     memset@p1:	
  3109                           ; 1 bytes @ 0x6
  3110                           
  3111  0026                     Save_Write_word@data:	
  3112                           ; 1 bytes @ 0x6
  3113                           
  3114                           
  3115                           ; 2 bytes @ 0x6
  3116  0026                     	ds	1
  3117  0027                     ??_FLASH_readBlock:	
  3118  0027                     ?___lwdiv:	
  3119                           ; 1 bytes @ 0x7
  3120                           
  3121  0027                     SPI_Exchange8bitBuffer@dataIn:	
  3122                           ; 2 bytes @ 0x7
  3123                           
  3124  0027                     WriteAll_1621@cnt:	
  3125                           ; 1 bytes @ 0x7
  3126                           
  3127  0027                     I2C_Read_Buffer@ADD:	
  3128                           ; 1 bytes @ 0x7
  3129                           
  3130  0027                     Serach_Flash_Head@count:	
  3131                           ; 1 bytes @ 0x7
  3132                           
  3133  0027                     CRC_cal@rx_arr:	
  3134                           ; 1 bytes @ 0x7
  3135                           
  3136  0027                     ___awdiv@sign:	
  3137                           ; 1 bytes @ 0x7
  3138                           
  3139  0027                     ___awmod@sign:	
  3140                           ; 1 bytes @ 0x7
  3141                           
  3142  0027                     memset@p:	
  3143                           ; 1 bytes @ 0x7
  3144                           
  3145  0027                     ___lwdiv@divisor:	
  3146                           ; 1 bytes @ 0x7
  3147                           
  3148                           
  3149                           ; 2 bytes @ 0x7
  3150  0027                     	ds	1
  3151  0028                     ??_WriteAll_1621:	
  3152  0028                     ??_Save_Write_word:	
  3153                           ; 1 bytes @ 0x8
  3154                           
  3155  0028                     SPI_Exchange8bitBuffer@bytesWritten:	
  3156                           ; 1 bytes @ 0x8
  3157                           
  3158  0028                     FLASH_readBlock@buffer:	
  3159                           ; 1 bytes @ 0x8
  3160                           
  3161  0028                     I2C_Read_Buffer@Flag:	
  3162                           ; 1 bytes @ 0x8
  3163                           
  3164  0028                     I2C_Send_Buffer@ADD:	
  3165                           ; 1 bytes @ 0x8
  3166                           
  3167  0028                     bcd2bin@val:	
  3168                           ; 1 bytes @ 0x8
  3169                           
  3170  0028                     CRC_cal@i:	
  3171                           ; 1 bytes @ 0x8
  3172                           
  3173  0028                     Serach_Flash_Head@data:	
  3174                           ; 1 bytes @ 0x8
  3175                           
  3176  0028                     ___awdiv@quotient:	
  3177                           ; 2 bytes @ 0x8
  3178                           
  3179                           
  3180                           ; 2 bytes @ 0x8
  3181  0028                     	ds	1
  3182  0029                     ??_Bq32k_Rtc_Read_Time:	
  3183  0029                     ?_maxim_31856_read_nregisters:	
  3184                           ; 1 bytes @ 0x9
  3185                           
  3186  0029                     maxim_31856_read_nregisters@uch_buff:	
  3187                           ; 1 bytes @ 0x9
  3188                           
  3189  0029                     WriteAll_1621@addr:	
  3190                           ; 1 bytes @ 0x9
  3191                           
  3192  0029                     I2C_Send_Buffer@i:	
  3193                           ; 1 bytes @ 0x9
  3194                           
  3195  0029                     CRC_cal@remainder:	
  3196                           ; 1 bytes @ 0x9
  3197                           
  3198  0029                     ___lwdiv@dividend:	
  3199                           ; 2 bytes @ 0x9
  3200                           
  3201                           
  3202                           ; 2 bytes @ 0x9
  3203  0029                     	ds	1
  3204  002A                     ??_bin2bcd:	
  3205  002A                     maxim_31856_read_nregisters@uch_nBytes:	
  3206                           ; 1 bytes @ 0xA
  3207                           
  3208  002A                     WriteAll_1621@i:	
  3209                           ; 1 bytes @ 0xA
  3210                           
  3211  002A                     I2C_Send_Buffer@Flag:	
  3212                           ; 1 bytes @ 0xA
  3213                           
  3214  002A                     Serach_Flash_Head@i:	
  3215                           ; 1 bytes @ 0xA
  3216                           
  3217                           
  3218                           ; 2 bytes @ 0xA
  3219  002A                     	ds	1
  3220  002B                     ??_err_Display:	
  3221  002B                     ??_Two_Display:	
  3222                           ; 1 bytes @ 0xB
  3223                           
  3224  002B                     ??_Inf_to_Com:	
  3225                           ; 1 bytes @ 0xB
  3226                           
  3227  002B                     ??_Read_time_to_Com:	
  3228                           ; 1 bytes @ 0xB
  3229                           
  3230  002B                     ??_maxim_31856_read_nregisters:	
  3231                           ; 1 bytes @ 0xB
  3232                           
  3233  002B                     ??___lwdiv:	
  3234                           ; 1 bytes @ 0xB
  3235                           
  3236  002B                     Bq32k_Rtc_Read_Time@temp:	
  3237                           ; 1 bytes @ 0xB
  3238                           
  3239                           
  3240                           ; 10 bytes @ 0xB
  3241  002B                     	ds	1
  3242  002C                     ___lwdiv@counter:	
  3243  002C                     Two_Display@num:	
  3244                           ; 1 bytes @ 0xC
  3245                           
  3246  002C                     err_Display@num:	
  3247                           ; 4 bytes @ 0xC
  3248                           
  3249  002C                     Read_time_to_Com@tmp_buf:	
  3250                           ; 4 bytes @ 0xC
  3251                           
  3252                           
  3253                           ; 16 bytes @ 0xC
  3254  002C                     	ds	1
  3255  002D                     maxim_31856_read_nregisters@uch_register_address:	
  3256  002D                     ___lwdiv@quotient:	
  3257                           ; 1 bytes @ 0xD
  3258                           
  3259                           
  3260                           ; 2 bytes @ 0xD
  3261  002D                     	ds	1
  3262  002E                     ??_one_temperature_trans:	
  3263                           
  3264                           ; 1 bytes @ 0xE
  3265  002E                     	ds	1
  3266  002F                     ??_Tc_Display:	
  3267                           
  3268                           ; 1 bytes @ 0xF
  3269  002F                     	ds	1
  3270  0030                     Tc_Display@count:	
  3271  0030                     Two_Display@number:	
  3272                           ; 1 bytes @ 0x10
  3273                           
  3274                           
  3275                           ; 1 bytes @ 0x10
  3276  0030                     	ds	1
  3277  0031                     bin2bcd@val:	
  3278  0031                     Tc_Display@data:	
  3279                           ; 1 bytes @ 0x11
  3280                           
  3281                           
  3282                           ; 2 bytes @ 0x11
  3283  0031                     	ds	1
  3284  0032                     ??_Bq32k_Rtc_Write_Time:	
  3285                           
  3286                           ; 1 bytes @ 0x12
  3287  0032                     	ds	2
  3288  0034                     Bq32k_Rtc_Write_Time@temp:	
  3289                           
  3290                           ; 10 bytes @ 0x14
  3291  0034                     	ds	1
  3292  0035                     Bq32k_Rtc_Read_Time@p:	
  3293                           
  3294                           ; 1 bytes @ 0x15
  3295  0035                     	ds	1
  3296  0036                     ??_time_Display:	
  3297  0036                     ??_Save_Write_time:	
  3298                           ; 1 bytes @ 0x16
  3299                           
  3300                           
  3301                           ; 1 bytes @ 0x16
  3302  0036                     	ds	2
  3303  0038                     ??_Calculate_Time:	
  3304                           
  3305                           ; 1 bytes @ 0x18
  3306  0038                     	ds	1
  3307  0039                     time_Display@num:	
  3308                           
  3309                           ; 4 bytes @ 0x19
  3310  0039                     	ds	3
  3311  003C                     Read_time_to_Com@crc_tmp:	
  3312                           
  3313                           ; 2 bytes @ 0x1C
  3314  003C                     	ds	2
  3315  003E                     Bq32k_Rtc_Write_Time@p:	
  3316  003E                     Read_time_to_Com@i:	
  3317                           ; 1 bytes @ 0x1E
  3318                           
  3319                           
  3320                           ; 1 bytes @ 0x1E
  3321  003E                     	ds	1
  3322  003F                     ??_Set_time_from_Com:	
  3323                           
  3324                           ; 1 bytes @ 0x1F
  3325  003F                     	ds	1
  3326  0040                     ??_Com_Process:	
  3327                           
  3328                           ; 1 bytes @ 0x20
  3329  0040                     	ds	2
  3330  0042                     Calculate_Time@temp:	
  3331                           
  3332                           ; 4 bytes @ 0x22
  3333  0042                     	ds	4
  3334  0046                     Calculate_Time@temp1:	
  3335                           
  3336                           ; 4 bytes @ 0x26
  3337  0046                     	ds	4
  3338  004A                     Calculate_Time@temp2:	
  3339                           
  3340                           ; 4 bytes @ 0x2A
  3341  004A                     	ds	4
  3342  004E                     ??_Save_process:	
  3343  004E                     ??_tc_temperature_trans:	
  3344                           ; 1 bytes @ 0x2E
  3345                           
  3346                           
  3347                           ; 1 bytes @ 0x2E
  3348  004E                     	ds	2
  3349  0050                     Save_process@var_time:	
  3350                           
  3351                           ; 2 bytes @ 0x30
  3352  0050                     	ds	2
  3353  0052                     tc_temperature_trans@temperature_back:	
  3354                           
  3355                           ; 2 bytes @ 0x32
  3356  0052                     	ds	2
  3357  0054                     tc_temperature_trans@temperature_absolute:	
  3358                           
  3359                           ; 2 bytes @ 0x34
  3360  0054                     	ds	2
  3361  0056                     tc_temperature_trans@var_time:	
  3362                           
  3363                           ; 2 bytes @ 0x36
  3364  0056                     	ds	2
  3365  0058                     tc_temperature_trans@temperature_temp:	
  3366                           
  3367                           ; 2 bytes @ 0x38
  3368  0058                     	ds	2
  3369  005A                     ??_temperature_display:	
  3370                           
  3371                           ; 1 bytes @ 0x3A
  3372  005A                     	ds	1
  3373  005B                     ??_temperature_process:	
  3374  005B                     ??_Key_Process:	
  3375                           ; 1 bytes @ 0x3B
  3376                           
  3377                           
  3378                           ; 1 bytes @ 0x3B
  3379  005B                     	ds	1
  3380  005C                     Key_Process@data_temp:	
  3381                           
  3382                           ; 2 bytes @ 0x3C
  3383  005C                     	ds	2
  3384  005E                     Key_Process@gKeyValue:	
  3385                           
  3386                           ; 1 bytes @ 0x3E
  3387  005E                     	ds	1
  3388  005F                     Key_Process@i:	
  3389                           
  3390                           ; 2 bytes @ 0x3F
  3391  005F                     	ds	2
  3392  0061                     ??_main:	
  3393                           
  3394                           ; 1 bytes @ 0x41
  3395  0061                     	ds	4
  3396                           
  3397                           	psect	maintext
  3398  0407                     __pmaintext:	
  3399 ;;
  3400 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3401 ;;
  3402 ;; *************** function _main *****************
  3403 ;; Defined at:
  3404 ;;		line 67 in file "main.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;		None
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  bat_data        2    3[BANK3 ] unsigned int 
  3409 ;;  data_temp       2    0[BANK3 ] unsigned int 
  3410 ;;  i               1    2[BANK3 ] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : B1F/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3421 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  3422 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3423 ;;      Totals:         0       4       0       0       5       0       0       0       0       0       0       0       
      +0       0
  3424 ;;Total ram usage:        9 bytes
  3425 ;; Hardware stack levels required when called:   12
  3426 ;; This function calls:
  3427 ;;		_ADC_GetConversion
  3428 ;;		_Com_Process
  3429 ;;		_Key_Process
  3430 ;;		_SYSTEM_Initialize
  3431 ;;		_Save_process
  3432 ;;		_SendCmd_1621
  3433 ;;		_Serach_Flash_Head
  3434 ;;		_Set_finish_flag
  3435 ;;		_Sleep_process
  3436 ;;		_WriteAll_1621
  3437 ;;		_Write_Flash_finish
  3438 ;;		_temperature_process
  3439 ;; This function is called by:
  3440 ;;		Startup code after reset
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           
  3445                           ;psect for function _main
  3446  0407                     _main:	
  3447                           
  3448                           ;main.c: 69: unsigned char i=0;
  3449                           
  3450                           ;incstack = 0
  3451                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3452  0407  0023               	movlb	3	; select bank3
  3453  0408  01DA               	clrf	main@i^(0+384)
  3454                           
  3455                           ;main.c: 71: unsigned int bat_data = 0;
  3456  0409  01DB               	clrf	main@bat_data^(0+384)
  3457  040A  01DC               	clrf	(main@bat_data+1)^(0+384)
  3458                           
  3459                           ;main.c: 72: unsigned int data_temp = 0;
  3460  040B  01D8               	clrf	main@data_temp^(0+384)
  3461  040C  01D9               	clrf	(main@data_temp+1)^(0+384)
  3462                           
  3463                           ;main.c: 73: SWDTEN = 0;
  3464  040D  0021               	movlb	1	; select bank1
  3465  040E  1017               	bcf	23,0	;volatile
  3466                           
  3467                           ;main.c: 74: WDTPS0 = 1;
  3468  040F  1497               	bsf	23,1	;volatile
  3469                           
  3470                           ;main.c: 75: WDTPS1 = 0;
  3471  0410  1117               	bcf	23,2	;volatile
  3472                           
  3473                           ;main.c: 76: WDTPS2 = 0;
  3474  0411  1197               	bcf	23,3	;volatile
  3475                           
  3476                           ;main.c: 77: WDTPS3 = 1;
  3477  0412  1617               	bsf	23,4	;volatile
  3478                           
  3479                           ;main.c: 78: WDTPS4 = 0;
  3480  0413  1297               	bcf	23,5	;volatile
  3481  0414  0064               	clrwdt	;# 
  3482                           
  3483                           ;main.c: 81: SYSTEM_Initialize();
  3484  0415  3193  23F5  3184   	fcall	_SYSTEM_Initialize
  3485                           
  3486                           ;main.c: 84: _delay((unsigned long)((3000)*(4000000/4000.0)));
  3487  0418  3010               	movlw	16
  3488  0419  0020               	movlb	0	; select bank0
  3489  041A  00E3               	movwf	??_main+2
  3490  041B  3039               	movlw	57
  3491  041C  00E2               	movwf	??_main+1
  3492  041D  301B               	movlw	27
  3493  041E  00E1               	movwf	??_main
  3494  041F                     u6517:	
  3495  041F  0BE1               	decfsz	??_main,f
  3496  0420  2C1F               	goto	u6517
  3497  0421  0BE2               	decfsz	??_main+1,f
  3498  0422  2C1F               	goto	u6517
  3499  0423  0BE3               	decfsz	??_main+2,f
  3500  0424  2C1F               	goto	u6517
  3501  0425  3200               	nop2
  3502                           
  3503                           ;main.c: 85: if(RB5 == 0 ) do { LATA2 = 1; } while(0);
  3504  0426  0020               	movlb	0	; select bank0
  3505  0427  1A8D               	btfsc	13,5	;volatile
  3506  0428  2C2C               	goto	l469
  3507  0429  0022               	movlb	2	; select bank2
  3508  042A  150C               	bsf	12,2	;volatile
  3509  042B  2C2E               	goto	l471
  3510  042C                     l469:	
  3511                           ;main.c: 86: else do { LATA2 = 0; } while(0);
  3512                           
  3513  042C  0022               	movlb	2	; select bank2
  3514  042D  110C               	bcf	12,2	;volatile
  3515  042E                     l471:	
  3516                           ;main.c: 87: do { LATA3 = 0; } while(0);
  3517                           
  3518  042E  118C               	bcf	12,3	;volatile
  3519                           
  3520                           ;main.c: 90: bat_data = 0;
  3521  042F  0023               	movlb	3	; select bank3
  3522  0430  01DB               	clrf	main@bat_data^(0+384)
  3523  0431  01DC               	clrf	(main@bat_data+1)^(0+384)
  3524                           
  3525                           ;main.c: 91: for(i=0;i<16;i++)
  3526  0432  01DA               	clrf	main@i^(0+384)
  3527  0433  3010               	movlw	16
  3528  0434  025A               	subwf	main@i^(0+384),w
  3529  0435  1803               	btfsc	3,0
  3530  0436  2C50               	goto	l6692
  3531  0437                     l6686:	
  3532                           
  3533                           ;main.c: 92: {
  3534                           ;main.c: 93: bat_data = bat_data + ADC_GetConversion(ADC);
  3535  0437  300B               	movlw	11
  3536  0438  3194  24E6  3184   	fcall	_ADC_GetConversion
  3537  043B  0023               	movlb	3	; select bank3
  3538  043C  085B               	movf	main@bat_data^(0+384),w
  3539  043D  0020               	movlb	0	; select bank0
  3540  043E  0721               	addwf	?_ADC_GetConversion,w
  3541  043F  0023               	movlb	3	; select bank3
  3542  0440  00DB               	movwf	main@bat_data^(0+384)
  3543  0441  085C               	movf	(main@bat_data+1)^(0+384),w
  3544  0442  0020               	movlb	0	; select bank0
  3545  0443  3D22               	addwfc	?_ADC_GetConversion+1,w
  3546  0444  0023               	movlb	3	; select bank3
  3547  0445  00DC               	movwf	(main@bat_data+1)^(0+384)
  3548  0446  3001               	movlw	1
  3549  0447  0020               	movlb	0	; select bank0
  3550  0448  00E1               	movwf	??_main
  3551  0449  0861               	movf	??_main,w
  3552  044A  0023               	movlb	3	; select bank3
  3553  044B  07DA               	addwf	main@i^(0+384),f
  3554  044C  3010               	movlw	16
  3555  044D  025A               	subwf	main@i^(0+384),w
  3556  044E  1C03               	skipc
  3557  044F  2C37               	goto	l6686
  3558  0450                     l6692:	
  3559                           
  3560                           ;main.c: 94: }
  3561                           ;main.c: 95: bat_data = bat_data>>4;
  3562  0450  0E5B               	swapf	main@bat_data^(0+384),w
  3563  0451  390F               	andlw	15
  3564  0452  00DB               	movwf	main@bat_data^(0+384)
  3565  0453  0E5C               	swapf	(main@bat_data+1)^(0+384),w
  3566  0454  39F0               	andlw	240
  3567  0455  04DB               	iorwf	main@bat_data^(0+384),f
  3568  0456  0E5C               	swapf	(main@bat_data+1)^(0+384),w
  3569  0457  390F               	andlw	15
  3570  0458  00DC               	movwf	(main@bat_data^(0+384)+1)
  3571                           
  3572                           ;main.c: 96: if( bat_data < 800)
  3573  0459  3003               	movlw	3
  3574  045A  025C               	subwf	(main@bat_data+1)^(0+384),w
  3575  045B  3020               	movlw	32
  3576  045C  1903               	skipnz
  3577  045D  025B               	subwf	main@bat_data^(0+384),w
  3578  045E  1803               	skipnc
  3579  045F  2C64               	goto	l6696
  3580                           
  3581                           ;main.c: 97: {
  3582                           ;main.c: 98: do { LATA2 = 0; } while(0);
  3583  0460  0022               	movlb	2	; select bank2
  3584  0461  110C               	bcf	12,2	;volatile
  3585  0462                     l478:	
  3586                           ;main.c: 99: while(1)asm("clrwdt");
  3587                           
  3588  0462  0064               	clrwdt	;# 
  3589  0463  2C62               	goto	l478
  3590  0464                     l6696:	
  3591                           
  3592                           ;main.c: 100: }
  3593                           ;main.c: 101: i = 0 ;
  3594  0464  0023               	movlb	3	; select bank3
  3595  0465  01DA               	clrf	main@i^(0+384)
  3596                           
  3597                           ;main.c: 102: bat_data = 0 ;
  3598  0466  01DB               	clrf	main@bat_data^(0+384)
  3599  0467  01DC               	clrf	(main@bat_data+1)^(0+384)
  3600                           
  3601                           ;main.c: 106: do { TRISB3 = 1; } while(0);
  3602  0468  0021               	movlb	1	; select bank1
  3603  0469  158D               	bsf	13,3	;volatile
  3604                           
  3605                           ;main.c: 108: SendCmd_1621(0x52);
  3606  046A  3052               	movlw	82
  3607  046B  3194  240A  3184   	fcall	_SendCmd_1621
  3608                           
  3609                           ;main.c: 109: SendCmd_1621(0X28);
  3610  046E  3028               	movlw	40
  3611  046F  3194  240A  3184   	fcall	_SendCmd_1621
  3612                           
  3613                           ;main.c: 110: SendCmd_1621(0x02);
  3614  0472  3002               	movlw	2
  3615  0473  3194  240A  3184   	fcall	_SendCmd_1621
  3616                           
  3617                           ;main.c: 111: SendCmd_1621(0x06);
  3618  0476  3006               	movlw	6
  3619  0477  3194  240A  3184   	fcall	_SendCmd_1621
  3620                           
  3621                           ;main.c: 113: WriteAll_1621(0,Dis_TAB+17,4);
  3622  047A  3011               	movlw	low ((_Dis_TAB| (0+32768)+17))
  3623  047B  0020               	movlb	0	; select bank0
  3624  047C  00A5               	movwf	WriteAll_1621@p
  3625  047D  3098               	movlw	high ((_Dis_TAB| (0+32768)+17))
  3626  047E  00A6               	movwf	WriteAll_1621@p+1
  3627  047F  3004               	movlw	4
  3628  0480  00E1               	movwf	??_main
  3629  0481  0861               	movf	??_main,w
  3630  0482  00A7               	movwf	WriteAll_1621@cnt
  3631  0483  3000               	movlw	0
  3632  0484  3197  2760  3184   	fcall	_WriteAll_1621
  3633                           
  3634                           ;main.c: 115: time_count = 0;
  3635  0487  0020               	movlb	0	; select bank0
  3636  0488  01EA               	clrf	_time_count
  3637                           
  3638                           ;main.c: 116: Record_flag = 0;
  3639  0489  01E7               	clrf	_Record_flag
  3640                           
  3641                           ;main.c: 117: Cur_temperature_time_ch1 = 0;
  3642  048A  0022               	movlb	2	; select bank2
  3643  048B  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  3644                           
  3645                           ;main.c: 118: Cur_temperature_time_ch2 = 0;
  3646  048C  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  3647                           
  3648                           ;main.c: 119: CH1_temperature = 0;
  3649  048D  01AA               	clrf	_CH1_temperature^(0+256)
  3650  048E  01AB               	clrf	(_CH1_temperature+1)^(0+256)
  3651                           
  3652                           ;main.c: 120: CH2_temperature = 0;
  3653  048F  01AC               	clrf	_CH2_temperature^(0+256)
  3654  0490  01AD               	clrf	(_CH2_temperature+1)^(0+256)
  3655                           
  3656                           ;main.c: 121: CH1_state = 0;
  3657  0491  01B4               	clrf	_CH1_state^(0+256)
  3658                           
  3659                           ;main.c: 122: CH2_state = 0;
  3660  0492  01B5               	clrf	_CH2_state^(0+256)
  3661                           
  3662                           ;main.c: 123: Usart_Rx_Cnt = 0;
  3663  0493  0020               	movlb	0	; select bank0
  3664  0494  01E8               	clrf	_Usart_Rx_Cnt
  3665                           
  3666                           ;main.c: 124: Set_time_cmd_flag = 0;
  3667  0495  0022               	movlb	2	; select bank2
  3668  0496  01BA               	clrf	_Set_time_cmd_flag^(0+256)
  3669                           
  3670                           ;main.c: 125: Usart_Run_Flag = 0;
  3671  0497  01BB               	clrf	_Usart_Run_Flag^(0+256)
  3672                           
  3673                           ;main.c: 126: Inf_cmd_flag = 0;
  3674  0498  01B8               	clrf	_Inf_cmd_flag^(0+256)
  3675                           
  3676                           ;main.c: 127: Cur_Save_Index_Bak = 0;
  3677  0499  01AE               	clrf	_Cur_Save_Index_Bak^(0+256)
  3678  049A  01AF               	clrf	(_Cur_Save_Index_Bak+1)^(0+256)
  3679                           
  3680                           ;main.c: 128: bat_data = 0;
  3681  049B  0023               	movlb	3	; select bank3
  3682  049C  01DB               	clrf	main@bat_data^(0+384)
  3683  049D  01DC               	clrf	(main@bat_data+1)^(0+384)
  3684                           
  3685                           ;main.c: 129: Cur_Save_Index = 0x2000;
  3686  049E  3000               	movlw	0
  3687  049F  0020               	movlb	0	; select bank0
  3688  04A0  00E5               	movwf	_Cur_Save_Index
  3689  04A1  3020               	movlw	32
  3690  04A2  00E6               	movwf	_Cur_Save_Index+1
  3691                           
  3692                           ;main.c: 130: Serach_Flash_Head();
  3693  04A3  3189  21CD  3184   	fcall	_Serach_Flash_Head
  3694  04A6  0064               	clrwdt	;# 
  3695                           
  3696                           ;main.c: 133: SWDTEN = 1;
  3697  04A7  0021               	movlb	1	; select bank1
  3698  04A8  1417               	bsf	23,0	;volatile
  3699                           
  3700                           ;main.c: 159: (INTCONbits.GIE = 1);
  3701  04A9  178B               	bsf	11,7	;volatile
  3702                           
  3703                           ;main.c: 162: (INTCONbits.PEIE = 1);
  3704  04AA  170B               	bsf	11,6	;volatile
  3705  04AB                     l6748:	
  3706                           ;main.c: 170: while (1)
  3707                           
  3708                           
  3709                           ;main.c: 171: {
  3710                           ;main.c: 176: bat_data = bat_data + ADC_GetConversion(ADC);
  3711  04AB  300B               	movlw	11
  3712  04AC  3194  24E6  3184   	fcall	_ADC_GetConversion
  3713  04AF  0023               	movlb	3	; select bank3
  3714  04B0  085B               	movf	main@bat_data^(0+384),w
  3715  04B1  0020               	movlb	0	; select bank0
  3716  04B2  0721               	addwf	?_ADC_GetConversion,w
  3717  04B3  0023               	movlb	3	; select bank3
  3718  04B4  00DB               	movwf	main@bat_data^(0+384)
  3719  04B5  085C               	movf	(main@bat_data+1)^(0+384),w
  3720  04B6  0020               	movlb	0	; select bank0
  3721  04B7  3D22               	addwfc	?_ADC_GetConversion+1,w
  3722  04B8  0023               	movlb	3	; select bank3
  3723  04B9  00DC               	movwf	(main@bat_data+1)^(0+384)
  3724                           
  3725                           ;main.c: 177: i++;
  3726  04BA  3001               	movlw	1
  3727  04BB  0020               	movlb	0	; select bank0
  3728  04BC  00E1               	movwf	??_main
  3729  04BD  0861               	movf	??_main,w
  3730  04BE  0023               	movlb	3	; select bank3
  3731  04BF  07DA               	addwf	main@i^(0+384),f
  3732                           
  3733                           ;main.c: 178: if(i == 16)
  3734  04C0  3010               	movlw	16
  3735  04C1  065A               	xorwf	main@i^(0+384),w
  3736  04C2  1D03               	btfss	3,2
  3737  04C3  2CDC               	goto	l6762
  3738                           
  3739                           ;main.c: 179: {
  3740                           ;main.c: 180: i = 0;
  3741  04C4  01DA               	clrf	main@i^(0+384)
  3742                           
  3743                           ;main.c: 181: bat_data = bat_data>>4;
  3744  04C5  0E5B               	swapf	main@bat_data^(0+384),w
  3745  04C6  390F               	andlw	15
  3746  04C7  00DB               	movwf	main@bat_data^(0+384)
  3747  04C8  0E5C               	swapf	(main@bat_data+1)^(0+384),w
  3748  04C9  39F0               	andlw	240
  3749  04CA  04DB               	iorwf	main@bat_data^(0+384),f
  3750  04CB  0E5C               	swapf	(main@bat_data+1)^(0+384),w
  3751  04CC  390F               	andlw	15
  3752  04CD  00DC               	movwf	(main@bat_data^(0+384)+1)
  3753                           
  3754                           ;main.c: 182: if( bat_data < 800)
  3755  04CE  3003               	movlw	3
  3756  04CF  025C               	subwf	(main@bat_data+1)^(0+384),w
  3757  04D0  3020               	movlw	32
  3758  04D1  1903               	skipnz
  3759  04D2  025B               	subwf	main@bat_data^(0+384),w
  3760  04D3  1803               	skipnc
  3761  04D4  2CD9               	goto	l6760
  3762                           
  3763                           ;main.c: 183: {
  3764                           ;main.c: 184: do { LATA2 = 0; } while(0);
  3765  04D5  0022               	movlb	2	; select bank2
  3766  04D6  110C               	bcf	12,2	;volatile
  3767  04D7                     l488:	
  3768                           ;main.c: 185: while(1)asm("clrwdt");
  3769                           
  3770  04D7  0064               	clrwdt	;# 
  3771  04D8  2CD7               	goto	l488
  3772  04D9                     l6760:	
  3773                           
  3774                           ;main.c: 186: }
  3775                           ;main.c: 187: bat_data = 0;
  3776  04D9  0023               	movlb	3	; select bank3
  3777  04DA  01DB               	clrf	main@bat_data^(0+384)
  3778  04DB  01DC               	clrf	(main@bat_data+1)^(0+384)
  3779  04DC                     l6762:	
  3780                           
  3781                           ;main.c: 188: }
  3782                           ;main.c: 193: temperature_process();
  3783  04DC  3188  2051  3184   	fcall	_temperature_process
  3784                           
  3785                           ;main.c: 194: Key_Process();
  3786  04DF  3186  26E5  3184   	fcall	_Key_Process
  3787                           
  3788                           ;main.c: 195: Save_process();
  3789  04E2  318B  238F  3184   	fcall	_Save_process
  3790                           
  3791                           ;main.c: 196: Com_Process();
  3792  04E5  3193  2395  3184   	fcall	_Com_Process
  3793                           
  3794                           ;main.c: 197: if(Record_flag == 1)
  3795  04E8  0020               	movlb	0	; select bank0
  3796  04E9  0367               	decf	_Record_flag,w
  3797  04EA  1D03               	btfss	3,2
  3798  04EB  2D33               	goto	l6788
  3799                           
  3800                           ;main.c: 198: {
  3801                           ;main.c: 199: if( (Cur_Save_Index_Bak - 0x2000 < 16) )
  3802  04EC  0022               	movlb	2	; select bank2
  3803  04ED  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  3804  04EE  3E00               	addlw	0
  3805  04EF  0020               	movlb	0	; select bank0
  3806  04F0  00E1               	movwf	??_main
  3807  04F1  30E0               	movlw	224
  3808  04F2  0022               	movlb	2	; select bank2
  3809  04F3  3D2F               	addwfc	(_Cur_Save_Index_Bak+1)^(0+256),w
  3810  04F4  0020               	movlb	0	; select bank0
  3811  04F5  00E2               	movwf	??_main+1
  3812  04F6  3000               	movlw	0
  3813  04F7  0262               	subwf	??_main+1,w
  3814  04F8  3010               	movlw	16
  3815  04F9  1903               	skipnz
  3816  04FA  0261               	subwf	??_main,w
  3817  04FB  1803               	skipnc
  3818  04FC  2D09               	goto	l6780
  3819                           
  3820                           ;main.c: 200: {
  3821                           ;main.c: 201: if( 16384 - Cur_Save_Index <16 )
  3822  04FD  0965               	comf	_Cur_Save_Index,w
  3823  04FE  00E1               	movwf	??_main
  3824  04FF  0966               	comf	_Cur_Save_Index+1,w
  3825  0500  00E2               	movwf	??_main+1
  3826  0501  0AE1               	incf	??_main,f
  3827  0502  1903               	skipnz
  3828  0503  0AE2               	incf	??_main+1,f
  3829  0504  0861               	movf	??_main,w
  3830  0505  3E00               	addlw	0
  3831  0506  00E3               	movwf	??_main+2
  3832  0507  3040               	movlw	64
  3833  0508  2D24               	goto	L1
  3834  0509                     l6780:	
  3835                           ;main.c: 205: }
  3836                           ;main.c: 206: }
  3837                           
  3838                           ;main.c: 204: Write_Flash_finish();
  3839                           
  3840                           ;main.c: 202: {
  3841                           ;main.c: 203: Set_finish_flag();
  3842                           
  3843                           
  3844                           ;main.c: 207: else
  3845                           ;main.c: 208: {
  3846                           ;main.c: 209: if( (Cur_Save_Index_Bak > Cur_Save_Index) && (Cur_Save_Index_Bak - Cur_Sav
      +                          e_Index < 16) )
  3847  0509  0022               	movlb	2	; select bank2
  3848  050A  082F               	movf	(_Cur_Save_Index_Bak+1)^(0+256),w
  3849  050B  0020               	movlb	0	; select bank0
  3850  050C  0266               	subwf	_Cur_Save_Index+1,w
  3851  050D  1D03               	skipz
  3852  050E  2D13               	goto	u6475
  3853  050F  0022               	movlb	2	; select bank2
  3854  0510  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  3855  0511  0020               	movlb	0	; select bank0
  3856  0512  0265               	subwf	_Cur_Save_Index,w
  3857  0513                     u6475:	
  3858  0513  1803               	skipnc
  3859  0514  2D33               	goto	l6788
  3860  0515  0965               	comf	_Cur_Save_Index,w
  3861  0516  00E1               	movwf	??_main
  3862  0517  0966               	comf	_Cur_Save_Index+1,w
  3863  0518  00E2               	movwf	??_main+1
  3864  0519  0AE1               	incf	??_main,f
  3865  051A  1903               	skipnz
  3866  051B  0AE2               	incf	??_main+1,f
  3867  051C  0022               	movlb	2	; select bank2
  3868  051D  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  3869  051E  0020               	movlb	0	; select bank0
  3870  051F  0761               	addwf	??_main,w
  3871  0520  00E3               	movwf	??_main+2
  3872  0521  0022               	movlb	2	; select bank2
  3873  0522  082F               	movf	(_Cur_Save_Index_Bak+1)^(0+256),w
  3874  0523  0020               	movlb	0	; select bank0
  3875  0524                     L1:	
  3876  0524  3D62               	addwfc	??_main+1,w
  3877  0525  00E4               	movwf	??_main+3
  3878  0526  3000               	movlw	0
  3879  0527  0264               	subwf	??_main+3,w
  3880  0528  3010               	movlw	16
  3881  0529  1903               	skipnz
  3882  052A  0263               	subwf	??_main+2,w
  3883  052B  1803               	skipnc
  3884  052C  2D33               	goto	l6788
  3885                           
  3886                           ;main.c: 210: {
  3887                           ;main.c: 211: Set_finish_flag();
  3888  052D  3193  2324  3184   	fcall	_Set_finish_flag
  3889                           
  3890                           ;main.c: 212: Write_Flash_finish();
  3891  0530  3197  27CA  3184   	fcall	_Write_Flash_finish
  3892  0533                     l6788:	
  3893                           
  3894                           ;main.c: 213: }
  3895                           ;main.c: 214: }
  3896                           ;main.c: 215: }
  3897                           ;main.c: 218: if(Usart_Run_Flag == 0)
  3898  0533  0022               	movlb	2	; select bank2
  3899  0534  083B               	movf	_Usart_Run_Flag^(0+256),w
  3900  0535  1D03               	btfss	3,2
  3901  0536  2CAB               	goto	l6748
  3902                           
  3903                           ;main.c: 219: {
  3904                           ;main.c: 220: Sleep_process();
  3905  0537  3195  2504  3184   	fcall	_Sleep_process
  3906  053A  2CAB               	goto	l6748
  3907  053B                     __end_of_main:	
  3908                           
  3909                           	psect	text1
  3910  1504                     __ptext1:	
  3911 ;; *************** function _Sleep_process *****************
  3912 ;; Defined at:
  3913 ;;		line 17 in file "mcc_generated_files/power.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      void 
  3920 ;; Registers used:
  3921 ;;		wreg, status,2, status,0, pclath, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3931 ;;Total ram usage:        0 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    4
  3934 ;; This function calls:
  3935 ;;		_Step_control
  3936 ;; This function is called by:
  3937 ;;		_main
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function _Sleep_process
  3943  1504                     _Sleep_process:	
  3944                           
  3945                           ;incstack = 0
  3946                           ; Regs used in _Sleep_process: [wreg+status,2+status,0+pclath+cstack]
  3947                           ;power.c: 19: do { LATA3 = 1; } while(0);
  3948  1504  0022               	movlb	2	; select bank2
  3949  1505  158C               	bsf	12,3	;volatile
  3950                           
  3951                           ;power.c: 20: do { LATA4 = 1; } while(0);
  3952  1506  160C               	bsf	12,4	;volatile
  3953                           
  3954                           ;power.c: 21: do { LATA0 = 1; } while(0);
  3955  1507  140C               	bsf	12,0	;volatile
  3956                           
  3957                           ;power.c: 22: do { LATA1 = 1; } while(0);
  3958  1508  148C               	bsf	12,1	;volatile
  3959                           
  3960                           ;power.c: 26: do { LATC0 = 1; } while(0);
  3961  1509  140E               	bsf	14,0	;volatile
  3962                           
  3963                           ;power.c: 27: do { LATC2 = 1; } while(0);
  3964  150A  150E               	bsf	14,2	;volatile
  3965                           
  3966                           ;power.c: 28: do { LATA6 = 1; } while(0);
  3967  150B  170C               	bsf	12,6	;volatile
  3968                           
  3969                           ;power.c: 29: do { LATC1 = 1; } while(0);
  3970  150C  148E               	bsf	14,1	;volatile
  3971                           
  3972                           ;power.c: 30: do { LATB0 = 1; } while(0);
  3973  150D  140D               	bsf	13,0	;volatile
  3974                           
  3975                           ;power.c: 31: do { LATB1 = 1; } while(0);
  3976  150E  148D               	bsf	13,1	;volatile
  3977  150F  0063               	sleep	;# 
  3978                           
  3979                           ;power.c: 33: if( time_count == 0 || time_count == 2 )
  3980  1510  0020               	movlb	0	; select bank0
  3981  1511  086A               	movf	_time_count,w
  3982  1512  1903               	btfsc	3,2
  3983  1513  2D18               	goto	l1227
  3984  1514  3002               	movlw	2
  3985  1515  066A               	xorwf	_time_count,w
  3986  1516  1D03               	btfss	3,2
  3987  1517  2D20               	goto	l6608
  3988  1518                     l1227:	
  3989                           ;power.c: 34: {
  3990                           ;power.c: 35: do { LATA3 = 0; } while(0);
  3991                           
  3992  1518  0022               	movlb	2	; select bank2
  3993  1519  118C               	bcf	12,3	;volatile
  3994                           
  3995                           ;power.c: 36: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  3996  151A  0020               	movlb	0	; select bank0
  3997  151B  0367               	decf	_Record_flag,w
  3998  151C  1D03               	btfss	3,2
  3999  151D  2D20               	goto	l6608
  4000  151E  0022               	movlb	2	; select bank2
  4001  151F  120C               	bcf	12,4	;volatile
  4002  1520                     l6608:	
  4003                           
  4004                           ;power.c: 37: }
  4005                           ;power.c: 39: Step_control();
  4006  1520  3196  262A         	fcall	_Step_control
  4007  1522  0008               	return
  4008  1523                     __end_of_Sleep_process:	
  4009                           
  4010                           	psect	text2
  4011  162A                     __ptext2:	
  4012 ;; *************** function _Step_control *****************
  4013 ;; Defined at:
  4014 ;;		line 48 in file "mcc_generated_files/power.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;		None
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  1    wreg      void 
  4021 ;; Registers used:
  4022 ;;		wreg, status,2, status,0
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4032 ;;Total ram usage:        1 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    3
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_Sleep_process
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           
  4043                           ;psect for function _Step_control
  4044  162A                     _Step_control:	
  4045                           
  4046                           ;power.c: 50: time_count++;
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in _Step_control: [wreg+status,2+status,0]
  4050  162A  3001               	movlw	1
  4051  162B  0020               	movlb	0	; select bank0
  4052  162C  00A1               	movwf	??_Step_control
  4053  162D  0821               	movf	??_Step_control,w
  4054  162E  07EA               	addwf	_time_count,f
  4055                           
  4056                           ;power.c: 51: if(time_count == 4 || time_count > 12) time_count = 0;
  4057  162F  3004               	movlw	4
  4058  1630  066A               	xorwf	_time_count,w
  4059  1631  1903               	btfsc	3,2
  4060  1632  2E37               	goto	l6372
  4061  1633  300D               	movlw	13
  4062  1634  026A               	subwf	_time_count,w
  4063  1635  1C03               	skipc
  4064  1636  2E38               	goto	l6374
  4065  1637                     l6372:	
  4066  1637  01EA               	clrf	_time_count
  4067  1638                     l6374:	
  4068                           
  4069                           ;power.c: 53: Cur_temperature_time_ch1++;
  4070  1638  3001               	movlw	1
  4071  1639  00A1               	movwf	??_Step_control
  4072  163A  0821               	movf	??_Step_control,w
  4073  163B  0022               	movlb	2	; select bank2
  4074  163C  07B6               	addwf	_Cur_temperature_time_ch1^(0+256),f
  4075                           
  4076                           ;power.c: 54: if(Cur_temperature_time_ch1 > 130)
  4077  163D  3083               	movlw	131
  4078  163E  0236               	subwf	_Cur_temperature_time_ch1^(0+256),w
  4079  163F  1803               	btfsc	3,0
  4080                           
  4081                           ;power.c: 55: {
  4082                           ;power.c: 56: Cur_temperature_time_ch1 = 0;
  4083  1640  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  4084                           
  4085                           ;power.c: 57: }
  4086                           ;power.c: 59: Cur_temperature_time_ch2++;
  4087  1641  3001               	movlw	1
  4088  1642  0020               	movlb	0	; select bank0
  4089  1643  00A1               	movwf	??_Step_control
  4090  1644  0821               	movf	??_Step_control,w
  4091  1645  0022               	movlb	2	; select bank2
  4092  1646  07B7               	addwf	_Cur_temperature_time_ch2^(0+256),f
  4093                           
  4094                           ;power.c: 60: if(Cur_temperature_time_ch2 > 130)
  4095  1647  3083               	movlw	131
  4096  1648  0237               	subwf	_Cur_temperature_time_ch2^(0+256),w
  4097  1649  1C03               	skipc
  4098  164A  0008               	return
  4099                           
  4100                           ;power.c: 61: {
  4101                           ;power.c: 62: Cur_temperature_time_ch2= 0;
  4102  164B  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  4103  164C  0008               	return
  4104  164D                     __end_of_Step_control:	
  4105                           
  4106                           	psect	text3
  4107  09CD                     __ptext3:	
  4108 ;; *************** function _Serach_Flash_Head *****************
  4109 ;; Defined at:
  4110 ;;		line 42 in file "mcc_generated_files/save.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;		None
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  i               2   10[BANK0 ] unsigned int 
  4115 ;;  data            2    8[BANK0 ] unsigned int 
  4116 ;;  count           1    7[BANK0 ] unsigned char 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      void 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2, status,0, pclath, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;Total ram usage:        6 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    5
  4133 ;; This function calls:
  4134 ;;		_FLASH_ReadWord
  4135 ;;		_Write_Flash_finish
  4136 ;; This function is called by:
  4137 ;;		_main
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           
  4142                           ;psect for function _Serach_Flash_Head
  4143  09CD                     _Serach_Flash_Head:	
  4144                           
  4145                           ;save.c: 44: unsigned int i=0;
  4146                           
  4147                           ;incstack = 0
  4148                           ; Regs used in _Serach_Flash_Head: [wreg+status,2+status,0+pclath+cstack]
  4149  09CD  0020               	movlb	0	; select bank0
  4150  09CE  01AA               	clrf	Serach_Flash_Head@i
  4151  09CF  01AB               	clrf	Serach_Flash_Head@i+1
  4152                           
  4153                           ;save.c: 45: unsigned int data=0;
  4154  09D0  01A8               	clrf	Serach_Flash_Head@data
  4155  09D1  01A9               	clrf	Serach_Flash_Head@data+1
  4156                           
  4157                           ;save.c: 46: unsigned char count =0;
  4158  09D2  01A7               	clrf	Serach_Flash_Head@count
  4159                           
  4160                           ;save.c: 47: for(i = 0x2000; i<16384;i++ )
  4161  09D3  3000               	movlw	0
  4162  09D4  00AA               	movwf	Serach_Flash_Head@i
  4163  09D5  3020               	movlw	32
  4164  09D6  00AB               	movwf	Serach_Flash_Head@i+1
  4165  09D7                     L2:	
  4166  09D7  3040               	movlw	64
  4167  09D8  022B               	subwf	Serach_Flash_Head@i+1,w
  4168  09D9  3000               	movlw	0
  4169  09DA  1903               	skipnz
  4170  09DB  022A               	subwf	Serach_Flash_Head@i,w
  4171  09DC  1803               	btfsc	3,0
  4172  09DD  0008               	return
  4173                           
  4174                           ;save.c: 48: {
  4175                           ;save.c: 49: data = FLASH_ReadWord(i);
  4176  09DE  082B               	movf	Serach_Flash_Head@i+1,w
  4177  09DF  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  4178  09E0  082A               	movf	Serach_Flash_Head@i,w
  4179  09E1  00A1               	movwf	FLASH_ReadWord@flashAddr
  4180  09E2  3195  2523  3189   	fcall	_FLASH_ReadWord
  4181  09E5  0020               	movlb	0	; select bank0
  4182  09E6  0822               	movf	?_FLASH_ReadWord+1,w
  4183  09E7  00A9               	movwf	Serach_Flash_Head@data+1
  4184  09E8  0821               	movf	?_FLASH_ReadWord,w
  4185  09E9  00A8               	movwf	Serach_Flash_Head@data
  4186                           
  4187                           ;save.c: 51: if( data == 0x1555 )
  4188  09EA  3055               	movlw	85
  4189  09EB  0628               	xorwf	Serach_Flash_Head@data,w
  4190  09EC  3015               	movlw	21
  4191  09ED  1903               	skipnz
  4192  09EE  0629               	xorwf	Serach_Flash_Head@data+1,w
  4193  09EF  1D03               	btfss	3,2
  4194  09F0  29F6               	goto	l6462
  4195                           
  4196                           ;save.c: 52: {
  4197                           ;save.c: 53: count++;
  4198  09F1  3001               	movlw	1
  4199  09F2  00A6               	movwf	??_Serach_Flash_Head
  4200  09F3  0826               	movf	??_Serach_Flash_Head,w
  4201  09F4  07A7               	addwf	Serach_Flash_Head@count,f
  4202                           
  4203                           ;save.c: 54: }
  4204  09F5  2A14               	goto	l6480
  4205  09F6                     l6462:	
  4206                           
  4207                           ;save.c: 55: else
  4208                           ;save.c: 56: {
  4209                           ;save.c: 57: if( data == 0x3fff && count >1 )
  4210  09F6  0A28               	incf	Serach_Flash_Head@data,w
  4211  09F7  303F               	movlw	63
  4212  09F8  1903               	skipnz
  4213  09F9  0629               	xorwf	Serach_Flash_Head@data+1,w
  4214  09FA  1D03               	btfss	3,2
  4215  09FB  2A05               	goto	l6470
  4216  09FC  3002               	movlw	2
  4217  09FD  0227               	subwf	Serach_Flash_Head@count,w
  4218  09FE  1C03               	skipc
  4219  09FF  2A05               	goto	l6470
  4220                           
  4221                           ;save.c: 58: {
  4222                           ;save.c: 59: Cur_Save_Index = i;
  4223  0A00  082B               	movf	Serach_Flash_Head@i+1,w
  4224  0A01  00E6               	movwf	_Cur_Save_Index+1
  4225  0A02  082A               	movf	Serach_Flash_Head@i,w
  4226  0A03  00E5               	movwf	_Cur_Save_Index
  4227                           
  4228                           ;save.c: 60: break;
  4229  0A04  0008               	return
  4230  0A05                     l6470:	
  4231                           ;save.c: 61: }
  4232                           
  4233                           
  4234                           ;save.c: 62: else if( data == 0x3fff )
  4235  0A05  0A28               	incf	Serach_Flash_Head@data,w
  4236  0A06  303F               	movlw	63
  4237  0A07  1903               	skipnz
  4238  0A08  0629               	xorwf	Serach_Flash_Head@data+1,w
  4239  0A09  1D03               	btfss	3,2
  4240  0A0A  2A12               	goto	l6478
  4241                           
  4242                           ;save.c: 63: {
  4243                           ;save.c: 64: Cur_Save_Index = i;
  4244  0A0B  082B               	movf	Serach_Flash_Head@i+1,w
  4245  0A0C  00E6               	movwf	_Cur_Save_Index+1
  4246  0A0D  082A               	movf	Serach_Flash_Head@i,w
  4247  0A0E  00E5               	movwf	_Cur_Save_Index
  4248                           
  4249                           ;save.c: 65: Write_Flash_finish();
  4250  0A0F  3197  27CA         	fcall	_Write_Flash_finish
  4251                           
  4252                           ;save.c: 66: break;
  4253  0A11  0008               	return
  4254  0A12                     l6478:	
  4255                           ;save.c: 67: }
  4256                           
  4257                           
  4258                           ;save.c: 68: else
  4259                           ;save.c: 69: {
  4260                           ;save.c: 70: count = 0;
  4261  0A12  0020               	movlb	0	; select bank0
  4262  0A13  01A7               	clrf	Serach_Flash_Head@count
  4263  0A14                     l6480:	
  4264  0A14  3001               	movlw	1
  4265  0A15  0020               	movlb	0	; select bank0
  4266  0A16  07AA               	addwf	Serach_Flash_Head@i,f
  4267  0A17  3000               	movlw	0
  4268  0A18  3DAB               	addwfc	Serach_Flash_Head@i+1,f
  4269  0A19  29D7               	goto	L2
  4270  0A1A                     __end_of_Serach_Flash_Head:	
  4271                           
  4272                           	psect	text4
  4273  0B8F                     __ptext4:	
  4274 ;; *************** function _Save_process *****************
  4275 ;; Defined at:
  4276 ;;		line 124 in file "mcc_generated_files/save.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  var_time        2   48[BANK0 ] unsigned int 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;Total ram usage:        4 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    8
  4297 ;; This function calls:
  4298 ;;		_Calculate_Time
  4299 ;;		_Save_Write_word
  4300 ;; This function is called by:
  4301 ;;		_main
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           
  4306                           ;psect for function _Save_process
  4307  0B8F                     _Save_process:	
  4308                           
  4309                           ;save.c: 126: unsigned int var_time=0;
  4310                           
  4311                           ;incstack = 0
  4312                           ; Regs used in _Save_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4313  0B8F  0020               	movlb	0	; select bank0
  4314  0B90  01D0               	clrf	Save_process@var_time
  4315  0B91  01D1               	clrf	Save_process@var_time+1
  4316                           
  4317                           ;save.c: 127: if( time_count == 1 && Record_flag == 1 )
  4318  0B92  036A               	decf	_time_count,w
  4319  0B93  1D03               	btfss	3,2
  4320  0B94  2BC4               	goto	l6572
  4321  0B95  0367               	decf	_Record_flag,w
  4322  0B96  1D03               	btfss	3,2
  4323  0B97  2BC4               	goto	l6572
  4324                           
  4325                           ;save.c: 128: {
  4326                           ;save.c: 129: if(Cur_temperature_time_ch1 > 120)
  4327  0B98  3079               	movlw	121
  4328  0B99  0022               	movlb	2	; select bank2
  4329  0B9A  0236               	subwf	_Cur_temperature_time_ch1^(0+256),w
  4330  0B9B  1C03               	skipc
  4331  0B9C  0008               	return
  4332                           
  4333                           ;save.c: 130: {
  4334                           ;save.c: 131: var_time = Calculate_Time();
  4335  0B9D  3182  2265  318B   	fcall	_Calculate_Time
  4336  0BA0  0020               	movlb	0	; select bank0
  4337  0BA1  00CE               	movwf	??_Save_process
  4338  0BA2  01CF               	clrf	??_Save_process+1
  4339  0BA3  084E               	movf	??_Save_process,w
  4340  0BA4  00D0               	movwf	Save_process@var_time
  4341  0BA5  084F               	movf	??_Save_process+1,w
  4342  0BA6  00D1               	movwf	Save_process@var_time+1
  4343                           
  4344                           ;save.c: 132: var_time |= 0x100;
  4345  0BA7  1451               	bsf	Save_process@var_time+1,0
  4346                           
  4347                           ;save.c: 133: if(CH1_state == 1) var_time |= 0x400;
  4348  0BA8  0022               	movlb	2	; select bank2
  4349  0BA9  0334               	decf	_CH1_state^(0+256),w
  4350  0BAA  1D03               	btfss	3,2
  4351  0BAB  2BAE               	goto	l1140
  4352  0BAC  0020               	movlb	0	; select bank0
  4353  0BAD  1551               	bsf	Save_process@var_time+1,2
  4354  0BAE                     l1140:	
  4355                           
  4356                           ;save.c: 134: var_time |= 0x1000;
  4357  0BAE  0020               	movlb	0	; select bank0
  4358  0BAF  1651               	bsf	Save_process@var_time+1,4
  4359                           
  4360                           ;save.c: 135: Save_Write_word(var_time);
  4361  0BB0  0851               	movf	Save_process@var_time+1,w
  4362  0BB1  00A7               	movwf	Save_Write_word@data+1
  4363  0BB2  0850               	movf	Save_process@var_time,w
  4364  0BB3  00A6               	movwf	Save_Write_word@data
  4365  0BB4  318E  263F  318B   	fcall	_Save_Write_word
  4366                           
  4367                           ;save.c: 136: Save_Write_word(CH1_temperature);
  4368  0BB7  0022               	movlb	2	; select bank2
  4369  0BB8  082B               	movf	(_CH1_temperature+1)^(0+256),w
  4370  0BB9  0020               	movlb	0	; select bank0
  4371  0BBA  00A7               	movwf	Save_Write_word@data+1
  4372  0BBB  0022               	movlb	2	; select bank2
  4373  0BBC  082A               	movf	_CH1_temperature^(0+256),w
  4374  0BBD  0020               	movlb	0	; select bank0
  4375  0BBE  00A6               	movwf	Save_Write_word@data
  4376  0BBF  318E  263F         	fcall	_Save_Write_word
  4377                           
  4378                           ;save.c: 138: Cur_temperature_time_ch1 = 0;
  4379  0BC1  0022               	movlb	2	; select bank2
  4380  0BC2  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  4381                           
  4382                           ;save.c: 139: }
  4383                           ;save.c: 140: }
  4384  0BC3  0008               	return
  4385  0BC4                     l6572:	
  4386                           
  4387                           ;save.c: 141: else if(time_count == 3 && Record_flag == 1)
  4388  0BC4  3003               	movlw	3
  4389  0BC5  0020               	movlb	0	; select bank0
  4390  0BC6  066A               	xorwf	_time_count,w
  4391  0BC7  1D03               	btfss	3,2
  4392  0BC8  0008               	return
  4393  0BC9  0367               	decf	_Record_flag,w
  4394  0BCA  1D03               	btfss	3,2
  4395  0BCB  0008               	return
  4396                           
  4397                           ;save.c: 142: {
  4398                           ;save.c: 143: if(Cur_temperature_time_ch2 > 120)
  4399  0BCC  3079               	movlw	121
  4400  0BCD  0022               	movlb	2	; select bank2
  4401  0BCE  0237               	subwf	_Cur_temperature_time_ch2^(0+256),w
  4402  0BCF  1C03               	skipc
  4403  0BD0  0008               	return
  4404                           
  4405                           ;save.c: 144: {
  4406                           ;save.c: 145: var_time = Calculate_Time();
  4407  0BD1  3182  2265  318B   	fcall	_Calculate_Time
  4408  0BD4  0020               	movlb	0	; select bank0
  4409  0BD5  00CE               	movwf	??_Save_process
  4410  0BD6  01CF               	clrf	??_Save_process+1
  4411  0BD7  084E               	movf	??_Save_process,w
  4412  0BD8  00D0               	movwf	Save_process@var_time
  4413  0BD9  084F               	movf	??_Save_process+1,w
  4414  0BDA  00D1               	movwf	Save_process@var_time+1
  4415                           
  4416                           ;save.c: 146: var_time |= 0x200;
  4417  0BDB  14D1               	bsf	Save_process@var_time+1,1
  4418                           
  4419                           ;save.c: 147: if(CH2_state == 1) var_time |= 0x800;
  4420  0BDC  0022               	movlb	2	; select bank2
  4421  0BDD  0335               	decf	_CH2_state^(0+256),w
  4422  0BDE  1D03               	btfss	3,2
  4423  0BDF  2BE2               	goto	l1144
  4424  0BE0  0020               	movlb	0	; select bank0
  4425  0BE1  15D1               	bsf	Save_process@var_time+1,3
  4426  0BE2                     l1144:	
  4427                           
  4428                           ;save.c: 148: var_time |= 0x1000;
  4429  0BE2  0020               	movlb	0	; select bank0
  4430  0BE3  1651               	bsf	Save_process@var_time+1,4
  4431                           
  4432                           ;save.c: 149: Save_Write_word(var_time);
  4433  0BE4  0851               	movf	Save_process@var_time+1,w
  4434  0BE5  00A7               	movwf	Save_Write_word@data+1
  4435  0BE6  0850               	movf	Save_process@var_time,w
  4436  0BE7  00A6               	movwf	Save_Write_word@data
  4437  0BE8  318E  263F  318B   	fcall	_Save_Write_word
  4438                           
  4439                           ;save.c: 150: Save_Write_word(CH2_temperature);
  4440  0BEB  0022               	movlb	2	; select bank2
  4441  0BEC  082D               	movf	(_CH2_temperature+1)^(0+256),w
  4442  0BED  0020               	movlb	0	; select bank0
  4443  0BEE  00A7               	movwf	Save_Write_word@data+1
  4444  0BEF  0022               	movlb	2	; select bank2
  4445  0BF0  082C               	movf	_CH2_temperature^(0+256),w
  4446  0BF1  0020               	movlb	0	; select bank0
  4447  0BF2  00A6               	movwf	Save_Write_word@data
  4448  0BF3  318E  263F         	fcall	_Save_Write_word
  4449                           
  4450                           ;save.c: 152: Cur_temperature_time_ch2 = 0;
  4451  0BF5  0022               	movlb	2	; select bank2
  4452  0BF6  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  4453  0BF7  0008               	return
  4454  0BF8                     __end_of_Save_process:	
  4455                           
  4456                           	psect	text5
  4457  13F5                     __ptext5:	
  4458 ;; *************** function _SYSTEM_Initialize *****************
  4459 ;; Defined at:
  4460 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2, status,0, pclath, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;Total ram usage:        0 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    4
  4481 ;; This function calls:
  4482 ;;		_ADC_Initialize
  4483 ;;		_EUSART_Initialize
  4484 ;;		_FVR_Initialize
  4485 ;;		_OSCILLATOR_Initialize
  4486 ;;		_PIN_MANAGER_Initialize
  4487 ;;		_SPI_Initialize
  4488 ;;		_TMR0_Initialize
  4489 ;; This function is called by:
  4490 ;;		_main
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _SYSTEM_Initialize
  4496  13F5                     _SYSTEM_Initialize:	
  4497                           
  4498                           ;mcc.c: 71: OSCILLATOR_Initialize();
  4499                           
  4500                           ;incstack = 0
  4501                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4502  13F5  3193  2329  3193   	fcall	_OSCILLATOR_Initialize
  4503                           
  4504                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  4505  13F8  3195  25E5  3193   	fcall	_PIN_MANAGER_Initialize
  4506                           
  4507                           ;mcc.c: 73: SPI_Initialize();
  4508  13FB  3193  2334  3193   	fcall	_SPI_Initialize
  4509                           
  4510                           ;mcc.c: 74: EUSART_Initialize();
  4511  13FE  3194  2472  3193   	fcall	_EUSART_Initialize
  4512                           
  4513                           ;mcc.c: 75: ADC_Initialize();
  4514  1401  3193  2340  3193   	fcall	_ADC_Initialize
  4515                           
  4516                           ;mcc.c: 76: FVR_Initialize();
  4517  1404  3193  2320  3193   	fcall	_FVR_Initialize
  4518                           
  4519                           ;mcc.c: 77: TMR0_Initialize();
  4520  1407  3193  2374         	fcall	_TMR0_Initialize
  4521  1409  0008               	return
  4522  140A                     __end_of_SYSTEM_Initialize:	
  4523                           
  4524                           	psect	text6
  4525  1374                     __ptext6:	
  4526 ;; *************** function _TMR0_Initialize *****************
  4527 ;; Defined at:
  4528 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      void 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;Total ram usage:        1 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    3
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_SYSTEM_Initialize
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           
  4557                           ;psect for function _TMR0_Initialize
  4558  1374                     _TMR0_Initialize:	
  4559                           
  4560                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4561                           
  4562                           ;incstack = 0
  4563                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4564  1374  0021               	movlb	1	; select bank1
  4565  1375  0815               	movf	21,w	;volatile
  4566  1376  39C0               	andlw	192
  4567  1377  3817               	iorlw	23
  4568  1378  0095               	movwf	21	;volatile
  4569                           
  4570                           ;tmr0.c: 73: TMR0 = 0xD9;
  4571  1379  30D9               	movlw	217
  4572  137A  0020               	movlb	0	; select bank0
  4573  137B  0095               	movwf	21	;volatile
  4574                           
  4575                           ;tmr0.c: 76: timer0ReloadVal = 217;
  4576  137C  30D9               	movlw	217
  4577  137D  00A1               	movwf	??_TMR0_Initialize
  4578  137E  0821               	movf	??_TMR0_Initialize,w
  4579  137F  0022               	movlb	2	; select bank2
  4580  1380  00ED               	movwf	_timer0ReloadVal^(0+256)	;volatile
  4581                           
  4582                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  4583  1381  110B               	bcf	11,2	;volatile
  4584                           
  4585                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  4586  1382  168B               	bsf	11,5	;volatile
  4587  1383  0008               	return
  4588  1384                     __end_of_TMR0_Initialize:	
  4589                           
  4590                           	psect	text7
  4591  1334                     __ptext7:	
  4592 ;; *************** function _SPI_Initialize *****************
  4593 ;; Defined at:
  4594 ;;		line 64 in file "mcc_generated_files/spi.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  1    wreg      void 
  4601 ;; Registers used:
  4602 ;;		wreg, status,2
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4612 ;;Total ram usage:        0 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    3
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_SYSTEM_Initialize
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           
  4623                           ;psect for function _SPI_Initialize
  4624  1334                     _SPI_Initialize:	
  4625                           
  4626                           ;spi.c: 68: SSP1STAT = 0x00;
  4627                           
  4628                           ;incstack = 0
  4629                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4630  1334  0024               	movlb	4	; select bank4
  4631  1335  0194               	clrf	20	;volatile
  4632                           
  4633                           ;spi.c: 71: SSP1CON1 = 0x30;
  4634  1336  3030               	movlw	48
  4635  1337  0095               	movwf	21	;volatile
  4636                           
  4637                           ;spi.c: 74: SSP1ADD = 0x00;
  4638  1338  0192               	clrf	18	;volatile
  4639  1339  0008               	return
  4640  133A                     __end_of_SPI_Initialize:	
  4641                           
  4642                           	psect	text8
  4643  15E5                     __ptext8:	
  4644 ;; *************** function _PIN_MANAGER_Initialize *****************
  4645 ;; Defined at:
  4646 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;		None
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;		None
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  1    wreg      void 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;Total ram usage:        0 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    3
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_SYSTEM_Initialize
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _PIN_MANAGER_Initialize
  4676  15E5                     _PIN_MANAGER_Initialize:	
  4677                           
  4678                           ;pin_manager.c: 51: LATA = 0x7B;
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4682  15E5  307B               	movlw	123
  4683  15E6  0022               	movlb	2	; select bank2
  4684  15E7  008C               	movwf	12	;volatile
  4685                           
  4686                           ;pin_manager.c: 52: TRISA = 0x80;
  4687  15E8  3080               	movlw	128
  4688  15E9  0021               	movlb	1	; select bank1
  4689  15EA  008C               	movwf	12	;volatile
  4690                           
  4691                           ;pin_manager.c: 53: ANSELA = 0x00;
  4692  15EB  0023               	movlb	3	; select bank3
  4693  15EC  018C               	clrf	12	;volatile
  4694                           
  4695                           ;pin_manager.c: 55: LATB = 0x00;
  4696  15ED  0022               	movlb	2	; select bank2
  4697  15EE  018D               	clrf	13	;volatile
  4698                           
  4699                           ;pin_manager.c: 56: TRISB = 0xFC;
  4700  15EF  30FC               	movlw	252
  4701  15F0  0021               	movlb	1	; select bank1
  4702  15F1  008D               	movwf	13	;volatile
  4703                           
  4704                           ;pin_manager.c: 57: ANSELB = 0x10;
  4705  15F2  3010               	movlw	16
  4706  15F3  0023               	movlb	3	; select bank3
  4707  15F4  008D               	movwf	13	;volatile
  4708                           
  4709                           ;pin_manager.c: 58: WPUB = 0x2C;
  4710  15F5  302C               	movlw	44
  4711  15F6  0024               	movlb	4	; select bank4
  4712  15F7  008D               	movwf	13	;volatile
  4713                           
  4714                           ;pin_manager.c: 60: LATC = 0x07;
  4715  15F8  3007               	movlw	7
  4716  15F9  0022               	movlb	2	; select bank2
  4717  15FA  008E               	movwf	14	;volatile
  4718                           
  4719                           ;pin_manager.c: 61: TRISC = 0xD0;
  4720  15FB  30D0               	movlw	208
  4721  15FC  0021               	movlb	1	; select bank1
  4722  15FD  008E               	movwf	14	;volatile
  4723                           
  4724                           ;pin_manager.c: 62: ANSELC = 0x00;
  4725  15FE  0023               	movlb	3	; select bank3
  4726  15FF  018E               	clrf	14	;volatile
  4727                           
  4728                           ;pin_manager.c: 64: WPUE = 0x00;
  4729  1600  0024               	movlb	4	; select bank4
  4730  1601  0190               	clrf	16	;volatile
  4731                           
  4732                           ;pin_manager.c: 66: OPTION_REGbits.nWPUEN = 0x00;
  4733  1602  0021               	movlb	1	; select bank1
  4734  1603  1395               	bcf	21,7	;volatile
  4735                           
  4736                           ;pin_manager.c: 68: APFCON = 0x00;
  4737  1604  0022               	movlb	2	; select bank2
  4738  1605  019D               	clrf	29	;volatile
  4739  1606  0008               	return
  4740  1607                     __end_of_PIN_MANAGER_Initialize:	
  4741                           
  4742                           	psect	text9
  4743  1329                     __ptext9:	
  4744 ;; *************** function _OSCILLATOR_Initialize *****************
  4745 ;; Defined at:
  4746 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;		None
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg, status,2
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;Total ram usage:        0 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:    3
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_SYSTEM_Initialize
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           
  4775                           ;psect for function _OSCILLATOR_Initialize
  4776  1329                     _OSCILLATOR_Initialize:	
  4777                           
  4778                           ;mcc.c: 82: OSCCON = 0x68;
  4779                           
  4780                           ;incstack = 0
  4781                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4782  1329  3068               	movlw	104
  4783  132A  0021               	movlb	1	; select bank1
  4784  132B  0099               	movwf	25	;volatile
  4785                           
  4786                           ;mcc.c: 84: OSCSTAT = 0x00;
  4787  132C  019A               	clrf	26	;volatile
  4788  132D  0008               	return
  4789  132E                     __end_of_OSCILLATOR_Initialize:	
  4790                           
  4791                           	psect	text10
  4792  1320                     __ptext10:	
  4793 ;; *************** function _FVR_Initialize *****************
  4794 ;; Defined at:
  4795 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		wreg
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;Total ram usage:        0 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    3
  4816 ;; This function calls:
  4817 ;;		Nothing
  4818 ;; This function is called by:
  4819 ;;		_SYSTEM_Initialize
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _FVR_Initialize
  4825  1320                     _FVR_Initialize:	
  4826                           
  4827                           ;fvr.c: 60: FVRCON = 0x82;
  4828                           
  4829                           ;incstack = 0
  4830                           ; Regs used in _FVR_Initialize: [wreg]
  4831  1320  3082               	movlw	130
  4832  1321  0022               	movlb	2	; select bank2
  4833  1322  0097               	movwf	23	;volatile
  4834  1323  0008               	return
  4835  1324                     __end_of_FVR_Initialize:	
  4836                           
  4837                           	psect	text11
  4838  1472                     __ptext11:	
  4839 ;; *************** function _EUSART_Initialize *****************
  4840 ;; Defined at:
  4841 ;;		line 78 in file "mcc_generated_files/eusart.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;		None
  4846 ;; Return value:  Size  Location     Type
  4847 ;;                  1    wreg      void 
  4848 ;; Registers used:
  4849 ;;		wreg, status,2
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4858 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;Total ram usage:        1 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    3
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_SYSTEM_Initialize
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           
  4870                           ;psect for function _EUSART_Initialize
  4871  1472                     _EUSART_Initialize:	
  4872                           
  4873                           ;eusart.c: 80: PIE1bits.RCIE = 0;
  4874                           
  4875                           ;incstack = 0
  4876                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4877  1472  0021               	movlb	1	; select bank1
  4878  1473  1291               	bcf	17,5	;volatile
  4879                           
  4880                           ;eusart.c: 81: PIE1bits.TXIE = 0;
  4881  1474  1211               	bcf	17,4	;volatile
  4882                           
  4883                           ;eusart.c: 86: BAUDCON = 0x48;
  4884  1475  3048               	movlw	72
  4885  1476  0023               	movlb	3	; select bank3
  4886  1477  009F               	movwf	31	;volatile
  4887                           
  4888                           ;eusart.c: 89: RCSTA = 0x90;
  4889  1478  3090               	movlw	144
  4890  1479  009D               	movwf	29	;volatile
  4891                           
  4892                           ;eusart.c: 92: TXSTA = 0x26;
  4893  147A  3026               	movlw	38
  4894  147B  009E               	movwf	30	;volatile
  4895                           
  4896                           ;eusart.c: 95: SPBRGL = 0x33;
  4897  147C  3033               	movlw	51
  4898  147D  009B               	movwf	27	;volatile
  4899                           
  4900                           ;eusart.c: 98: SPBRGH = 0x00;
  4901  147E  019C               	clrf	28	;volatile
  4902                           
  4903                           ;eusart.c: 102: eusartTxHead = 0;
  4904  147F  0022               	movlb	2	; select bank2
  4905  1480  01BF               	clrf	_eusartTxHead^(0+256)
  4906                           
  4907                           ;eusart.c: 103: eusartTxTail = 0;
  4908  1481  01C0               	clrf	_eusartTxTail^(0+256)
  4909                           
  4910                           ;eusart.c: 104: eusartTxBufferRemaining = sizeof (eusartTxBuffer);
  4911  1482  3008               	movlw	8
  4912  1483  0020               	movlb	0	; select bank0
  4913  1484  00A1               	movwf	??_EUSART_Initialize
  4914  1485  0821               	movf	??_EUSART_Initialize,w
  4915  1486  0022               	movlb	2	; select bank2
  4916  1487  00EC               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  4917                           
  4918                           ;eusart.c: 106: eusartRxHead = 0;
  4919  1488  01BD               	clrf	_eusartRxHead^(0+256)
  4920                           
  4921                           ;eusart.c: 107: eusartRxTail = 0;
  4922  1489  01BE               	clrf	_eusartRxTail^(0+256)
  4923                           
  4924                           ;eusart.c: 108: eusartRxCount = 0;
  4925  148A  01BC               	clrf	_eusartRxCount^(0+256)	;volatile
  4926                           
  4927                           ;eusart.c: 111: PIE1bits.RCIE = 1;
  4928  148B  0021               	movlb	1	; select bank1
  4929  148C  1691               	bsf	17,5	;volatile
  4930  148D  0008               	return
  4931  148E                     __end_of_EUSART_Initialize:	
  4932                           
  4933                           	psect	text12
  4934  1340                     __ptext12:	
  4935 ;; *************** function _ADC_Initialize *****************
  4936 ;; Defined at:
  4937 ;;		line 65 in file "mcc_generated_files/adc.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;		None
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, status,2
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;Total ram usage:        0 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    3
  4958 ;; This function calls:
  4959 ;;		Nothing
  4960 ;; This function is called by:
  4961 ;;		_SYSTEM_Initialize
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           
  4966                           ;psect for function _ADC_Initialize
  4967  1340                     _ADC_Initialize:	
  4968                           
  4969                           ;adc.c: 69: ADCON0 = 0x01;
  4970                           
  4971                           ;incstack = 0
  4972                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4973  1340  3001               	movlw	1
  4974  1341  0021               	movlb	1	; select bank1
  4975  1342  009D               	movwf	29	;volatile
  4976                           
  4977                           ;adc.c: 72: ADCON1 = 0xC3;
  4978  1343  30C3               	movlw	195
  4979  1344  009E               	movwf	30	;volatile
  4980                           
  4981                           ;adc.c: 75: ADRESL = 0x00;
  4982  1345  019B               	clrf	27	;volatile
  4983                           
  4984                           ;adc.c: 78: ADRESH = 0x00;
  4985  1346  019C               	clrf	28	;volatile
  4986  1347  0008               	return
  4987  1348                     __end_of_ADC_Initialize:	
  4988                           
  4989                           	psect	text13
  4990  06E5                     __ptext13:	
  4991 ;; *************** function _Key_Process *****************
  4992 ;; Defined at:
  4993 ;;		line 42 in file "mcc_generated_files/key.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;		None
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  i               2   63[BANK0 ] unsigned int 
  4998 ;;  data_temp       2   60[BANK0 ] unsigned int 
  4999 ;;  gKeyValue       1   62[BANK0 ] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;Total ram usage:        6 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:   11
  5016 ;; This function calls:
  5017 ;;		_EUSART_Write
  5018 ;;		_FLASH_EraseBlock
  5019 ;;		_FLASH_ReadWord
  5020 ;;		_Key_Scan
  5021 ;;		_Save_Write_time
  5022 ;;		_SendCmd_1621
  5023 ;;		_Set_finish_flag
  5024 ;;		_Set_start_flag
  5025 ;;		_Write_Flash_finish
  5026 ;;		_Write_Flash_head
  5027 ;;		_temperature_process
  5028 ;; This function is called by:
  5029 ;;		_main
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           
  5034                           ;psect for function _Key_Process
  5035  06E5                     _Key_Process:	
  5036                           
  5037                           ;key.c: 44: unsigned char gKeyValue=0;
  5038                           
  5039                           ;incstack = 0
  5040                           ; Regs used in _Key_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5041  06E5  0020               	movlb	0	; select bank0
  5042  06E6  01DE               	clrf	Key_Process@gKeyValue
  5043                           
  5044                           ;key.c: 46: unsigned int i;
  5045                           ;key.c: 47: unsigned int data_temp;
  5046                           ;key.c: 49: LongPressSec = 0;
  5047  06E7  0021               	movlb	1	; select bank1
  5048  06E8  01EE               	clrf	_LongPressSec^(0+128)
  5049                           
  5050                           ;key.c: 50: gKeyValue=Key_Scan();
  5051  06E9  3196  2607  3186   	fcall	_Key_Scan
  5052  06EC  0020               	movlb	0	; select bank0
  5053  06ED  00DB               	movwf	??_Key_Process
  5054  06EE  085B               	movf	??_Key_Process,w
  5055  06EF  00DE               	movwf	Key_Process@gKeyValue
  5056                           
  5057                           ;key.c: 51: if(gKeyValue)
  5058  06F0  085E               	movf	Key_Process@gKeyValue,w
  5059  06F1  1903               	btfsc	3,2
  5060  06F2  0008               	return
  5061                           
  5062                           ;key.c: 52: {
  5063                           ;key.c: 53: do { LATA3 = 0; } while(0);
  5064  06F3  0022               	movlb	2	; select bank2
  5065  06F4  118C               	bcf	12,3	;volatile
  5066                           
  5067                           ;key.c: 54: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  5068  06F5  0020               	movlb	0	; select bank0
  5069  06F6  0367               	decf	_Record_flag,w
  5070  06F7  1D03               	btfss	3,2
  5071  06F8  2F9E               	goto	l6550
  5072  06F9  0022               	movlb	2	; select bank2
  5073  06FA  120C               	bcf	12,4	;volatile
  5074                           
  5075                           ;key.c: 55: switch(gKeyValue)
  5076  06FB  2F9E               	goto	l6550
  5077  06FC                     l997:	
  5078                           ;key.c: 58: while( !(LongPressSec > 2 || RB5 == 1) ) asm("clrwdt");
  5079                           
  5080                           ;key.c: 56: {
  5081                           ;key.c: 57: case 0x01:
  5082                           
  5083  06FC  0064               	clrwdt	;# 
  5084  06FD                     l6492:	
  5085  06FD  3003               	movlw	3
  5086  06FE  0021               	movlb	1	; select bank1
  5087  06FF  026E               	subwf	_LongPressSec^(0+128),w
  5088  0700  1803               	skipnc
  5089  0701  2F05               	goto	l6496
  5090  0702  0020               	movlb	0	; select bank0
  5091  0703  1E8D               	btfss	13,5	;volatile
  5092  0704  2EFC               	goto	l997
  5093  0705                     l6496:	
  5094                           
  5095                           ;key.c: 59: if(LongPressSec > 2)
  5096  0705  3003               	movlw	3
  5097  0706  0021               	movlb	1	; select bank1
  5098  0707  026E               	subwf	_LongPressSec^(0+128),w
  5099  0708  1C03               	skipc
  5100  0709  2F12               	goto	l1001
  5101                           
  5102                           ;key.c: 60: {
  5103                           ;key.c: 61: do { LATA2 = 0; } while(0);
  5104  070A  0022               	movlb	2	; select bank2
  5105  070B  110C               	bcf	12,2	;volatile
  5106                           
  5107                           ;key.c: 62: do { LATA3 = 1; } while(0);
  5108  070C  158C               	bsf	12,3	;volatile
  5109                           
  5110                           ;key.c: 63: SendCmd_1621(0x04);
  5111  070D  3004               	movlw	4
  5112  070E  3194  240A  3186   	fcall	_SendCmd_1621
  5113                           
  5114                           ;key.c: 64: }
  5115  0711  2F43               	goto	l1009
  5116  0712                     l1001:	
  5117                           
  5118                           ;key.c: 66: else
  5119                           ;key.c: 67: {
  5120                           ;key.c: 68: SWDTEN = 0;
  5121  0712  1017               	bcf	23,0	;volatile
  5122                           
  5123                           ;key.c: 69: for(i=0x2000;i<0x2000+1000;i++)
  5124  0713  3000               	movlw	0
  5125  0714  0020               	movlb	0	; select bank0
  5126  0715  00DF               	movwf	Key_Process@i
  5127  0716  3020               	movlw	32
  5128  0717  00E0               	movwf	Key_Process@i+1
  5129  0718  3023               	movlw	35
  5130  0719  0260               	subwf	Key_Process@i+1,w
  5131  071A  30E8               	movlw	232
  5132  071B  1903               	skipnz
  5133  071C  025F               	subwf	Key_Process@i,w
  5134  071D  1803               	btfsc	3,0
  5135  071E  2F40               	goto	l1008
  5136  071F                     l6504:	
  5137                           
  5138                           ;key.c: 70: {
  5139                           ;key.c: 71: data_temp = FLASH_ReadWord(i);
  5140  071F  0860               	movf	Key_Process@i+1,w
  5141  0720  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  5142  0721  085F               	movf	Key_Process@i,w
  5143  0722  00A1               	movwf	FLASH_ReadWord@flashAddr
  5144  0723  3195  2523  3186   	fcall	_FLASH_ReadWord
  5145  0726  0020               	movlb	0	; select bank0
  5146  0727  0822               	movf	?_FLASH_ReadWord+1,w
  5147  0728  00DD               	movwf	Key_Process@data_temp+1
  5148  0729  0821               	movf	?_FLASH_ReadWord,w
  5149  072A  00DC               	movwf	Key_Process@data_temp
  5150                           
  5151                           ;key.c: 72: EUSART_Write(data_temp>>8);
  5152  072B  085D               	movf	Key_Process@data_temp+1,w
  5153  072C  3193  2354  3186   	fcall	_EUSART_Write
  5154                           
  5155                           ;key.c: 73: EUSART_Write(data_temp&0xff);
  5156  072F  0020               	movlb	0	; select bank0
  5157  0730  085C               	movf	Key_Process@data_temp,w
  5158  0731  3193  2354  3186   	fcall	_EUSART_Write
  5159  0734  3001               	movlw	1
  5160  0735  0020               	movlb	0	; select bank0
  5161  0736  07DF               	addwf	Key_Process@i,f
  5162  0737  3000               	movlw	0
  5163  0738  3DE0               	addwfc	Key_Process@i+1,f
  5164  0739  3023               	movlw	35
  5165  073A  0260               	subwf	Key_Process@i+1,w
  5166  073B  30E8               	movlw	232
  5167  073C  1903               	skipnz
  5168  073D  025F               	subwf	Key_Process@i,w
  5169  073E  1C03               	skipc
  5170  073F  2F1F               	goto	l6504
  5171  0740                     l1008:	
  5172                           
  5173                           ;key.c: 75: }
  5174                           ;key.c: 77: SWDTEN = 1;
  5175  0740  0021               	movlb	1	; select bank1
  5176  0741  1417               	bsf	23,0	;volatile
  5177  0742  0064               	clrwdt	;# 
  5178  0743                     l1009:	
  5179                           ;key.c: 80: }
  5180                           ;key.c: 82: while(RB5 == 0) asm("clrwdt");
  5181                           
  5182  0743  0020               	movlb	0	; select bank0
  5183  0744  1A8D               	btfsc	13,5	;volatile
  5184  0745  0008               	return
  5185  0746  0064               	clrwdt	;# 
  5186  0747  2F43               	goto	l1009
  5187  0748                     l1015:	
  5188                           ;key.c: 85: while( !(LongPressSec > 2 || RA7 == 1) )asm("clrwdt");
  5189                           
  5190                           ;key.c: 84: case 0x02:
  5191                           
  5192                           ;key.c: 83: break;
  5193                           
  5194  0748  0064               	clrwdt	;# 
  5195  0749                     l6510:	
  5196  0749  3003               	movlw	3
  5197  074A  0021               	movlb	1	; select bank1
  5198  074B  026E               	subwf	_LongPressSec^(0+128),w
  5199  074C  1803               	skipnc
  5200  074D  2F51               	goto	l6514
  5201  074E  0020               	movlb	0	; select bank0
  5202  074F  1F8C               	btfss	12,7	;volatile
  5203  0750  2F48               	goto	l1015
  5204  0751                     l6514:	
  5205                           
  5206                           ;key.c: 86: if(LongPressSec > 2)
  5207  0751  3003               	movlw	3
  5208  0752  0021               	movlb	1	; select bank1
  5209  0753  026E               	subwf	_LongPressSec^(0+128),w
  5210  0754  1C03               	skipc
  5211  0755  2F91               	goto	l6544
  5212                           
  5213                           ;key.c: 87: {
  5214                           ;key.c: 88: if(Record_flag == 0)
  5215  0756  0020               	movlb	0	; select bank0
  5216  0757  0867               	movf	_Record_flag,w
  5217  0758  1D03               	btfss	3,2
  5218  0759  2F8A               	goto	l6540
  5219                           
  5220                           ;key.c: 89: {
  5221                           ;key.c: 90: if( Cur_Save_Index > 16384 - 32) FLASH_EraseBlock(0x2000);
  5222  075A  303F               	movlw	63
  5223  075B  0266               	subwf	_Cur_Save_Index+1,w
  5224  075C  30E1               	movlw	225
  5225  075D  1903               	skipnz
  5226  075E  0265               	subwf	_Cur_Save_Index,w
  5227  075F  1C03               	skipc
  5228  0760  2F65               	goto	l6522
  5229  0761  3000               	movlw	0
  5230  0762  00A1               	movwf	FLASH_EraseBlock@startAddr
  5231  0763  3020               	movlw	32
  5232  0764  2F6B               	goto	L3
  5233  0765                     l6522:	
  5234                           
  5235                           ;key.c: 91: else FLASH_EraseBlock(Cur_Save_Index+32);
  5236  0765  0020               	movlb	0	; select bank0
  5237  0766  0865               	movf	_Cur_Save_Index,w
  5238  0767  3E20               	addlw	32
  5239  0768  00A1               	movwf	FLASH_EraseBlock@startAddr
  5240  0769  3000               	movlw	0
  5241  076A  3D66               	addwfc	_Cur_Save_Index+1,w
  5242  076B                     L3:	
  5243  076B  00A2               	movwf	FLASH_EraseBlock@startAddr+1
  5244  076C  3195  2583  3186   	fcall	_FLASH_EraseBlock
  5245                           
  5246                           ;key.c: 92: Set_start_flag();
  5247  076F  3193  232E  3186   	fcall	_Set_start_flag
  5248                           
  5249                           ;key.c: 93: Cur_Save_Index_Bak = Cur_Save_Index;
  5250  0772  0020               	movlb	0	; select bank0
  5251  0773  0866               	movf	_Cur_Save_Index+1,w
  5252  0774  0022               	movlb	2	; select bank2
  5253  0775  00AF               	movwf	(_Cur_Save_Index_Bak+1)^(0+256)
  5254  0776  0020               	movlb	0	; select bank0
  5255  0777  0865               	movf	_Cur_Save_Index,w
  5256  0778  0022               	movlb	2	; select bank2
  5257  0779  00AE               	movwf	_Cur_Save_Index_Bak^(0+256)
  5258                           
  5259                           ;key.c: 94: Write_Flash_head();
  5260  077A  3188  201B  3186   	fcall	_Write_Flash_head
  5261                           
  5262                           ;key.c: 95: Save_Write_time();
  5263  077D  318C  24D7  3186   	fcall	_Save_Write_time
  5264                           
  5265                           ;key.c: 96: Cur_temperature_time_ch1 = 0;
  5266  0780  0022               	movlb	2	; select bank2
  5267  0781  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  5268                           
  5269                           ;key.c: 97: Cur_temperature_time_ch2 = 0;
  5270  0782  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  5271                           
  5272                           ;key.c: 98: CH1_temperature = 0;
  5273  0783  01AA               	clrf	_CH1_temperature^(0+256)
  5274  0784  01AB               	clrf	(_CH1_temperature+1)^(0+256)
  5275                           
  5276                           ;key.c: 99: CH2_temperature = 0;
  5277  0785  01AC               	clrf	_CH2_temperature^(0+256)
  5278  0786  01AD               	clrf	(_CH2_temperature+1)^(0+256)
  5279                           
  5280                           ;key.c: 100: time_count = 0;
  5281  0787  0020               	movlb	0	; select bank0
  5282  0788  01EA               	clrf	_time_count
  5283                           
  5284                           ;key.c: 101: }
  5285  0789  2F99               	goto	l1025
  5286  078A                     l6540:	
  5287                           
  5288                           ;key.c: 102: else
  5289                           ;key.c: 103: {
  5290                           ;key.c: 104: Set_finish_flag();
  5291  078A  3193  2324  3186   	fcall	_Set_finish_flag
  5292                           
  5293                           ;key.c: 105: Write_Flash_finish();
  5294  078D  3197  27CA  3186   	fcall	_Write_Flash_finish
  5295                           
  5296                           ;key.c: 106: }
  5297                           ;key.c: 107: }
  5298  0790  2F99               	goto	l1025
  5299  0791                     l6544:	
  5300                           
  5301                           ;key.c: 108: else
  5302                           ;key.c: 109: {
  5303                           ;key.c: 110: time_count = 5;
  5304  0791  3005               	movlw	5
  5305  0792  0020               	movlb	0	; select bank0
  5306  0793  00DB               	movwf	??_Key_Process
  5307  0794  085B               	movf	??_Key_Process,w
  5308  0795  00EA               	movwf	_time_count
  5309                           
  5310                           ;key.c: 111: temperature_process();
  5311  0796  3188  2051  3186   	fcall	_temperature_process
  5312  0799                     l1025:	
  5313                           ;key.c: 112: }
  5314                           ;key.c: 113: while(RA7 == 0)asm("clrwdt");
  5315                           
  5316  0799  0020               	movlb	0	; select bank0
  5317  079A  1B8C               	btfsc	12,7	;volatile
  5318  079B  0008               	return
  5319  079C  0064               	clrwdt	;# 
  5320  079D  2F99               	goto	l1025
  5321  079E                     l6550:	
  5322                           ;key.c: 116: }
  5323                           
  5324                           ;key.c: 115: default:break;
  5325                           
  5326                           ;key.c: 114: break;
  5327                           
  5328  079E  0020               	movlb	0	; select bank0
  5329  079F  085E               	movf	Key_Process@gKeyValue,w
  5330                           
  5331                           ; Switch size 1, requested type "space"
  5332                           ; Number of cases is 2, Range of values is 1 to 2
  5333                           ; switch strategies available:
  5334                           ; Name         Instructions Cycles
  5335                           ; simple_byte            7     4 (average)
  5336                           ; direct_byte           13     9 (fixed)
  5337                           ; jumptable            263     9 (fixed)
  5338                           ;	Chosen strategy is simple_byte
  5339  07A0  3A01               	xorlw	1	; case 1
  5340  07A1  1903               	skipnz
  5341  07A2  2EFD               	goto	l6492
  5342  07A3  3A03               	xorlw	3	; case 2
  5343  07A4  1903               	skipnz
  5344  07A5  2F49               	goto	l6510
  5345  07A6  2FA8               	goto	l1029
  5346  07A7  0008               	return
  5347  07A8                     l1029:	
  5348  07A8  0008               	return
  5349  07A9                     __end_of_Key_Process:	
  5350                           
  5351                           	psect	text14
  5352  0851                     __ptext14:	
  5353 ;; *************** function _temperature_process *****************
  5354 ;; Defined at:
  5355 ;;		line 375 in file "mcc_generated_files/max31856.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:   10
  5376 ;; This function calls:
  5377 ;;		_Two_Display
  5378 ;;		_one_temperature_trans
  5379 ;;		_temperature_display
  5380 ;;		_time_Display
  5381 ;; This function is called by:
  5382 ;;		_main
  5383 ;;		_Key_Process
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           
  5388                           ;psect for function _temperature_process
  5389  0851                     _temperature_process:	
  5390                           
  5391                           ;max31856.c: 377: switch(time_count)
  5392                           
  5393                           ;incstack = 0
  5394                           ; Regs used in _temperature_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5395  0851  2875               	goto	l6342
  5396  0852                     l6310:	
  5397                           ;max31856.c: 378: {
  5398                           ;max31856.c: 379: case 0:
  5399                           
  5400                           
  5401                           ;max31856.c: 380: Two_Display(1);
  5402  0852  3001               	movlw	1
  5403  0853  3197  272F  3188   	fcall	_Two_Display
  5404                           
  5405                           ;max31856.c: 381: do { LATA1 = 1; } while(0);
  5406  0856  0022               	movlb	2	; select bank2
  5407  0857  148C               	bsf	12,1	;volatile
  5408                           
  5409                           ;max31856.c: 382: do { LATA0 = 1; } while(0);
  5410  0858  140C               	bsf	12,0	;volatile
  5411                           
  5412                           ;max31856.c: 383: do { LATA0 = 0; } while(0);
  5413  0859  100C               	bcf	12,0	;volatile
  5414                           
  5415                           ;max31856.c: 384: one_temperature_trans();
  5416  085A  3189  2183         	fcall	_one_temperature_trans
  5417                           
  5418                           ;max31856.c: 385: do { LATA0 = 1; } while(0);
  5419  085C  0022               	movlb	2	; select bank2
  5420  085D  140C               	bsf	12,0	;volatile
  5421                           
  5422                           ;max31856.c: 386: break;
  5423  085E  0008               	return
  5424  085F                     l6322:	
  5425                           ;max31856.c: 387: case 1:
  5426                           
  5427                           
  5428                           ;max31856.c: 388: temperature_display();
  5429  085F  3188  20FF         	fcall	_temperature_display
  5430                           
  5431                           ;max31856.c: 389: break;
  5432  0861  0008               	return
  5433  0862                     l6324:	
  5434                           ;max31856.c: 390: case 2:
  5435                           
  5436                           
  5437                           ;max31856.c: 391: Two_Display(2);
  5438  0862  3002               	movlw	2
  5439  0863  3197  272F  3188   	fcall	_Two_Display
  5440                           
  5441                           ;max31856.c: 392: do { LATA0 = 1; } while(0);
  5442  0866  0022               	movlb	2	; select bank2
  5443  0867  140C               	bsf	12,0	;volatile
  5444                           
  5445                           ;max31856.c: 393: do { LATA1 = 1; } while(0);
  5446  0868  148C               	bsf	12,1	;volatile
  5447                           
  5448                           ;max31856.c: 394: do { LATA1 = 0; } while(0);
  5449  0869  108C               	bcf	12,1	;volatile
  5450                           
  5451                           ;max31856.c: 395: one_temperature_trans();
  5452  086A  3189  2183         	fcall	_one_temperature_trans
  5453                           
  5454                           ;max31856.c: 396: do { LATA1 = 1; } while(0);
  5455  086C  0022               	movlb	2	; select bank2
  5456  086D  148C               	bsf	12,1	;volatile
  5457                           
  5458                           ;max31856.c: 397: break;
  5459  086E  0008               	return
  5460  086F                     l6336:	
  5461                           ;max31856.c: 398: case 3:
  5462                           
  5463                           
  5464                           ;max31856.c: 399: temperature_display();
  5465  086F  3188  20FF         	fcall	_temperature_display
  5466                           
  5467                           ;max31856.c: 400: break;
  5468  0871  0008               	return
  5469  0872                     l6338:	
  5470                           ;max31856.c: 401: case 5:
  5471                           
  5472                           
  5473                           ;max31856.c: 402: time_Display();
  5474  0872  318E  26C6         	fcall	_time_Display
  5475                           
  5476                           ;max31856.c: 405: }
  5477                           
  5478                           ;max31856.c: 404: default:break;
  5479                           
  5480                           ;max31856.c: 403: break;
  5481  0874  0008               	return
  5482  0875                     l6342:	
  5483  0875  0020               	movlb	0	; select bank0
  5484  0876  086A               	movf	_time_count,w
  5485                           
  5486                           ; Switch size 1, requested type "space"
  5487                           ; Number of cases is 5, Range of values is 0 to 5
  5488                           ; switch strategies available:
  5489                           ; Name         Instructions Cycles
  5490                           ; simple_byte           16     9 (average)
  5491                           ; direct_byte           18     6 (fixed)
  5492                           ; jumptable            260     6 (fixed)
  5493                           ;	Chosen strategy is simple_byte
  5494  0877  3A00               	xorlw	0	; case 0
  5495  0878  1903               	skipnz
  5496  0879  2852               	goto	l6310
  5497  087A  3A01               	xorlw	1	; case 1
  5498  087B  1903               	skipnz
  5499  087C  285F               	goto	l6322
  5500  087D  3A03               	xorlw	3	; case 2
  5501  087E  1903               	skipnz
  5502  087F  2862               	goto	l6324
  5503  0880  3A01               	xorlw	1	; case 3
  5504  0881  1903               	skipnz
  5505  0882  286F               	goto	l6336
  5506  0883  3A06               	xorlw	6	; case 5
  5507  0884  1903               	skipnz
  5508  0885  2872               	goto	l6338
  5509  0886  2887               	goto	l693
  5510  0887                     l693:	
  5511  0887  0008               	return
  5512  0888                     __end_of_temperature_process:	
  5513                           
  5514                           	psect	text15
  5515  0EC6                     __ptext15:	
  5516 ;; *************** function _time_Display *****************
  5517 ;; Defined at:
  5518 ;;		line 167 in file "mcc_generated_files/ht1621.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  num             4   25[BANK0 ] unsigned char [4]
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5535 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5536 ;;Total ram usage:        7 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    6
  5539 ;; This function calls:
  5540 ;;		_Bq32k_Rtc_Read_Time
  5541 ;;		_WriteAll_1621
  5542 ;;		___awdiv
  5543 ;;		___awmod
  5544 ;; This function is called by:
  5545 ;;		_temperature_process
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           
  5550                           ;psect for function _time_Display
  5551  0EC6                     _time_Display:	
  5552                           
  5553                           ;ht1621.c: 169: unsigned char num[4]={0};
  5554                           
  5555                           ;incstack = 0
  5556                           ; Regs used in _time_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5557  0EC6  0023               	movlb	3	; select bank3
  5558  0EC7  0837               	movf	(time_Display@F2144+3)^(0+384),w
  5559  0EC8  0020               	movlb	0	; select bank0
  5560  0EC9  00BC               	movwf	time_Display@num+3
  5561  0ECA  0023               	movlb	3	; select bank3
  5562  0ECB  0836               	movf	(time_Display@F2144+2)^(0+384),w
  5563  0ECC  0020               	movlb	0	; select bank0
  5564  0ECD  00BB               	movwf	time_Display@num+2
  5565  0ECE  0023               	movlb	3	; select bank3
  5566  0ECF  0835               	movf	(time_Display@F2144+1)^(0+384),w
  5567  0ED0  0020               	movlb	0	; select bank0
  5568  0ED1  00BA               	movwf	time_Display@num+1
  5569  0ED2  0023               	movlb	3	; select bank3
  5570  0ED3  0834               	movf	time_Display@F2144^(0+384),w
  5571  0ED4  0020               	movlb	0	; select bank0
  5572  0ED5  00B9               	movwf	time_Display@num
  5573                           
  5574                           ;ht1621.c: 170: Bq32k_Rtc_Read_Time(&rtc_tm);
  5575  0ED6  3061               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  5576  0ED7  318B  23F8  318E   	fcall	_Bq32k_Rtc_Read_Time
  5577                           
  5578                           ;ht1621.c: 171: num[0] = Dis_TAB[rtc_tm.hours / 10];
  5579  0EDA  300A               	movlw	10
  5580  0EDB  0020               	movlb	0	; select bank0
  5581  0EDC  00A1               	movwf	___awdiv@divisor
  5582  0EDD  3000               	movlw	0
  5583  0EDE  00A2               	movwf	___awdiv@divisor+1
  5584  0EDF  0022               	movlb	2	; select bank2
  5585  0EE0  0863               	movf	(_rtc_tm^(0+256)+2),w
  5586  0EE1  0020               	movlb	0	; select bank0
  5587  0EE2  00B6               	movwf	??_time_Display
  5588  0EE3  01B7               	clrf	??_time_Display+1
  5589  0EE4  0836               	movf	??_time_Display,w
  5590  0EE5  00A3               	movwf	___awdiv@dividend
  5591  0EE6  0837               	movf	??_time_Display+1,w
  5592  0EE7  00A4               	movwf	___awdiv@dividend+1
  5593  0EE8  318A  221A  318E   	fcall	___awdiv
  5594  0EEB  0020               	movlb	0	; select bank0
  5595  0EEC  0822               	movf	?___awdiv+1,w
  5596  0EED  0085               	movwf	5
  5597  0EEE  0821               	movf	?___awdiv,w
  5598  0EEF  0084               	movwf	4
  5599  0EF0  3000               	movlw	low (_Dis_TAB| (0+32768))
  5600  0EF1  0784               	addwf	4,f
  5601  0EF2  3098               	movlw	high (_Dis_TAB| (0+32768))
  5602  0EF3  3D85               	addwfc	5,f
  5603  0EF4  0800               	movf	0,w	;code access
  5604  0EF5  00B8               	movwf	??_time_Display+2
  5605  0EF6  0838               	movf	??_time_Display+2,w
  5606  0EF7  00B9               	movwf	time_Display@num
  5607                           
  5608                           ;ht1621.c: 172: num[0] |= 0x08;
  5609  0EF8  15B9               	bsf	time_Display@num,3
  5610                           
  5611                           ;ht1621.c: 173: num[1] = Dis_TAB[rtc_tm.hours % 10];
  5612  0EF9  300A               	movlw	10
  5613  0EFA  00A1               	movwf	___awmod@divisor
  5614  0EFB  3000               	movlw	0
  5615  0EFC  00A2               	movwf	___awmod@divisor+1
  5616  0EFD  0022               	movlb	2	; select bank2
  5617  0EFE  0863               	movf	(_rtc_tm^(0+256)+2),w
  5618  0EFF  0020               	movlb	0	; select bank0
  5619  0F00  00B6               	movwf	??_time_Display
  5620  0F01  01B7               	clrf	??_time_Display+1
  5621  0F02  0836               	movf	??_time_Display,w
  5622  0F03  00A3               	movwf	___awmod@dividend
  5623  0F04  0837               	movf	??_time_Display+1,w
  5624  0F05  00A4               	movwf	___awmod@dividend+1
  5625  0F06  3189  213D  318E   	fcall	___awmod
  5626  0F09  0020               	movlb	0	; select bank0
  5627  0F0A  0822               	movf	?___awmod+1,w
  5628  0F0B  0085               	movwf	5
  5629  0F0C  0821               	movf	?___awmod,w
  5630  0F0D  0084               	movwf	4
  5631  0F0E  3000               	movlw	low (_Dis_TAB| (0+32768))
  5632  0F0F  0784               	addwf	4,f
  5633  0F10  3098               	movlw	high (_Dis_TAB| (0+32768))
  5634  0F11  3D85               	addwfc	5,f
  5635  0F12  0800               	movf	0,w	;code access
  5636  0F13  00B8               	movwf	??_time_Display+2
  5637  0F14  0838               	movf	??_time_Display+2,w
  5638  0F15  00BA               	movwf	time_Display@num+1
  5639                           
  5640                           ;ht1621.c: 174: num[2] = Dis_TAB[rtc_tm.minutes / 10];
  5641  0F16  300A               	movlw	10
  5642  0F17  00A1               	movwf	___awdiv@divisor
  5643  0F18  3000               	movlw	0
  5644  0F19  00A2               	movwf	___awdiv@divisor+1
  5645  0F1A  0022               	movlb	2	; select bank2
  5646  0F1B  0862               	movf	(_rtc_tm^(0+256)+1),w
  5647  0F1C  0020               	movlb	0	; select bank0
  5648  0F1D  00B6               	movwf	??_time_Display
  5649  0F1E  01B7               	clrf	??_time_Display+1
  5650  0F1F  0836               	movf	??_time_Display,w
  5651  0F20  00A3               	movwf	___awdiv@dividend
  5652  0F21  0837               	movf	??_time_Display+1,w
  5653  0F22  00A4               	movwf	___awdiv@dividend+1
  5654  0F23  318A  221A  318E   	fcall	___awdiv
  5655  0F26  0020               	movlb	0	; select bank0
  5656  0F27  0822               	movf	?___awdiv+1,w
  5657  0F28  0085               	movwf	5
  5658  0F29  0821               	movf	?___awdiv,w
  5659  0F2A  0084               	movwf	4
  5660  0F2B  3000               	movlw	low (_Dis_TAB| (0+32768))
  5661  0F2C  0784               	addwf	4,f
  5662  0F2D  3098               	movlw	high (_Dis_TAB| (0+32768))
  5663  0F2E  3D85               	addwfc	5,f
  5664  0F2F  0800               	movf	0,w	;code access
  5665  0F30  00B8               	movwf	??_time_Display+2
  5666  0F31  0838               	movf	??_time_Display+2,w
  5667  0F32  00BB               	movwf	time_Display@num+2
  5668                           
  5669                           ;ht1621.c: 175: num[3] = Dis_TAB[rtc_tm.minutes % 10];
  5670  0F33  300A               	movlw	10
  5671  0F34  00A1               	movwf	___awmod@divisor
  5672  0F35  3000               	movlw	0
  5673  0F36  00A2               	movwf	___awmod@divisor+1
  5674  0F37  0022               	movlb	2	; select bank2
  5675  0F38  0862               	movf	(_rtc_tm^(0+256)+1),w
  5676  0F39  0020               	movlb	0	; select bank0
  5677  0F3A  00B6               	movwf	??_time_Display
  5678  0F3B  01B7               	clrf	??_time_Display+1
  5679  0F3C  0836               	movf	??_time_Display,w
  5680  0F3D  00A3               	movwf	___awmod@dividend
  5681  0F3E  0837               	movf	??_time_Display+1,w
  5682  0F3F  00A4               	movwf	___awmod@dividend+1
  5683  0F40  3189  213D  318E   	fcall	___awmod
  5684  0F43  0020               	movlb	0	; select bank0
  5685  0F44  0822               	movf	?___awmod+1,w
  5686  0F45  0085               	movwf	5
  5687  0F46  0821               	movf	?___awmod,w
  5688  0F47  0084               	movwf	4
  5689  0F48  3000               	movlw	low (_Dis_TAB| (0+32768))
  5690  0F49  0784               	addwf	4,f
  5691  0F4A  3098               	movlw	high (_Dis_TAB| (0+32768))
  5692  0F4B  3D85               	addwfc	5,f
  5693  0F4C  0800               	movf	0,w	;code access
  5694  0F4D  00B8               	movwf	??_time_Display+2
  5695  0F4E  0838               	movf	??_time_Display+2,w
  5696  0F4F  00BC               	movwf	time_Display@num+3
  5697                           
  5698                           ;ht1621.c: 176: WriteAll_1621(0, num, 4);
  5699  0F50  3039               	movlw	low time_Display@num
  5700  0F51  00A5               	movwf	WriteAll_1621@p
  5701  0F52  3000               	movlw	high time_Display@num
  5702  0F53  00A6               	movwf	WriteAll_1621@p+1
  5703  0F54  3004               	movlw	4
  5704  0F55  00B6               	movwf	??_time_Display
  5705  0F56  0836               	movf	??_time_Display,w
  5706  0F57  00A7               	movwf	WriteAll_1621@cnt
  5707  0F58  3000               	movlw	0
  5708  0F59  3197  2760         	fcall	_WriteAll_1621
  5709  0F5B  0008               	return
  5710  0F5C                     __end_of_time_Display:	
  5711                           
  5712                           	psect	text16
  5713  08FF                     __ptext16:	
  5714 ;; *************** function _temperature_display *****************
  5715 ;; Defined at:
  5716 ;;		line 337 in file "mcc_generated_files/max31856.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;		None
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;		None
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  1    wreg      void 
  5723 ;; Registers used:
  5724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5734 ;;Total ram usage:        1 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    9
  5737 ;; This function calls:
  5738 ;;		_Tc_Display
  5739 ;;		_err_Display
  5740 ;;		_maxim_31856_write_register
  5741 ;;		_maxim_clear_fault_status
  5742 ;;		_tc_temperature_trans
  5743 ;; This function is called by:
  5744 ;;		_temperature_process
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           
  5749                           ;psect for function _temperature_display
  5750  08FF                     _temperature_display:	
  5751                           
  5752                           ;max31856.c: 339: if(uch_sr==(uint8_t)0x00)
  5753                           
  5754                           ;incstack = 0
  5755                           ; Regs used in _temperature_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5756  08FF  0022               	movlb	2	; select bank2
  5757  0900  084A               	movf	_uch_sr^(0+256),w
  5758  0901  1D03               	btfss	3,2
  5759  0902  2918               	goto	l6162
  5760                           
  5761                           ;max31856.c: 340: {
  5762                           ;max31856.c: 341: tc_temperature_trans();
  5763  0903  3180  2056  3188   	fcall	_tc_temperature_trans
  5764                           
  5765                           ;max31856.c: 342: Tc_Display();
  5766  0906  3186  2614  3188   	fcall	_Tc_Display
  5767                           
  5768                           ;max31856.c: 343: if(time_count == 1)
  5769  0909  0020               	movlb	0	; select bank0
  5770  090A  036A               	decf	_time_count,w
  5771  090B  1D03               	btfss	3,2
  5772  090C  2910               	goto	l6158
  5773                           
  5774                           ;max31856.c: 344: {
  5775                           ;max31856.c: 345: CH1_state = 0;
  5776  090D  0022               	movlb	2	; select bank2
  5777  090E  01B4               	clrf	_CH1_state^(0+256)
  5778                           
  5779                           ;max31856.c: 346: }
  5780  090F  0008               	return
  5781  0910                     l6158:	
  5782                           
  5783                           ;max31856.c: 347: else if(time_count == 3)
  5784  0910  3003               	movlw	3
  5785  0911  0020               	movlb	0	; select bank0
  5786  0912  066A               	xorwf	_time_count,w
  5787  0913  1D03               	btfss	3,2
  5788  0914  0008               	return
  5789                           
  5790                           ;max31856.c: 348: {
  5791                           ;max31856.c: 349: CH2_state = 0;
  5792  0915  0022               	movlb	2	; select bank2
  5793  0916  01B5               	clrf	_CH2_state^(0+256)
  5794                           
  5795                           ;max31856.c: 350: }
  5796                           ;max31856.c: 351: }
  5797  0917  0008               	return
  5798  0918                     l6162:	
  5799                           
  5800                           ;max31856.c: 352: else
  5801                           ;max31856.c: 353: {
  5802                           ;max31856.c: 354: if(time_count == 1)
  5803  0918  0020               	movlb	0	; select bank0
  5804  0919  036A               	decf	_time_count,w
  5805  091A  1D03               	btfss	3,2
  5806  091B  2920               	goto	l6166
  5807                           
  5808                           ;max31856.c: 355: {
  5809                           ;max31856.c: 356: CH1_state = 1;
  5810  091C  0022               	movlb	2	; select bank2
  5811  091D  01B4               	clrf	_CH1_state^(0+256)
  5812  091E  0AB4               	incf	_CH1_state^(0+256),f
  5813                           
  5814                           ;max31856.c: 357: }
  5815  091F  2928               	goto	l6170
  5816  0920                     l6166:	
  5817                           
  5818                           ;max31856.c: 358: else if(time_count == 3)
  5819  0920  3003               	movlw	3
  5820  0921  0020               	movlb	0	; select bank0
  5821  0922  066A               	xorwf	_time_count,w
  5822  0923  1D03               	btfss	3,2
  5823  0924  2928               	goto	l6170
  5824                           
  5825                           ;max31856.c: 359: {
  5826                           ;max31856.c: 360: CH2_state = 1;
  5827  0925  0022               	movlb	2	; select bank2
  5828  0926  01B5               	clrf	_CH2_state^(0+256)
  5829  0927  0AB5               	incf	_CH2_state^(0+256),f
  5830  0928                     l6170:	
  5831                           
  5832                           ;max31856.c: 361: }
  5833                           ;max31856.c: 362: err_Display();
  5834  0928  3196  2678  3188   	fcall	_err_Display
  5835                           
  5836                           ;max31856.c: 363: maxim_31856_write_register(0x82, 0xFF);
  5837  092B  30FF               	movlw	255
  5838  092C  0020               	movlb	0	; select bank0
  5839  092D  00DA               	movwf	??_temperature_display
  5840  092E  085A               	movf	??_temperature_display,w
  5841  092F  00A2               	movwf	maxim_31856_write_register@uch_register_value
  5842  0930  3082               	movlw	130
  5843  0931  3193  2364  3188   	fcall	_maxim_31856_write_register
  5844                           
  5845                           ;max31856.c: 364: maxim_clear_fault_status();
  5846  0934  3193  23B8  3188   	fcall	_maxim_clear_fault_status
  5847                           
  5848                           ;max31856.c: 365: maxim_31856_write_register(0x82, 0x00);
  5849  0937  0020               	movlb	0	; select bank0
  5850  0938  01A2               	clrf	maxim_31856_write_register@uch_register_value
  5851  0939  3082               	movlw	130
  5852  093A  3193  2364         	fcall	_maxim_31856_write_register
  5853  093C  0008               	return
  5854  093D                     __end_of_temperature_display:	
  5855                           
  5856                           	psect	text17
  5857  0056                     __ptext17:	
  5858 ;; *************** function _tc_temperature_trans *****************
  5859 ;; Defined at:
  5860 ;;		line 168 in file "mcc_generated_files/max31856.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;		None
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  temperature_    2   56[BANK0 ] unsigned int 
  5865 ;;  var_time        2   54[BANK0 ] unsigned int 
  5866 ;;  temperature_    2   52[BANK0 ] unsigned int 
  5867 ;;  temperature_    2   50[BANK0 ] unsigned int 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  1    wreg      void 
  5870 ;; Registers used:
  5871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5878 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;Total ram usage:       12 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    8
  5884 ;; This function calls:
  5885 ;;		_Calculate_Time
  5886 ;;		_Save_Write_word
  5887 ;; This function is called by:
  5888 ;;		_temperature_display
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           
  5893                           ;psect for function _tc_temperature_trans
  5894  0056                     _tc_temperature_trans:	
  5895                           
  5896                           ;max31856.c: 170: unsigned int temperature_absolute = 0;
  5897                           
  5898                           ;incstack = 0
  5899                           ; Regs used in _tc_temperature_trans: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5900  0056  0020               	movlb	0	; select bank0
  5901  0057  01D4               	clrf	tc_temperature_trans@temperature_absolute
  5902  0058  01D5               	clrf	tc_temperature_trans@temperature_absolute+1
  5903                           
  5904                           ;max31856.c: 171: unsigned int temperature_temp = 0;
  5905  0059  01D8               	clrf	tc_temperature_trans@temperature_temp
  5906  005A  01D9               	clrf	tc_temperature_trans@temperature_temp+1
  5907                           
  5908                           ;max31856.c: 172: unsigned int temperature_back = 0;
  5909  005B  01D2               	clrf	tc_temperature_trans@temperature_back
  5910  005C  01D3               	clrf	tc_temperature_trans@temperature_back+1
  5911                           
  5912                           ;max31856.c: 173: unsigned int var_time=0;
  5913  005D  01D6               	clrf	tc_temperature_trans@var_time
  5914  005E  01D7               	clrf	tc_temperature_trans@var_time+1
  5915                           
  5916                           ;max31856.c: 174: temperature_value = 0;
  5917  005F  3000               	movlw	0
  5918  0060  0022               	movlb	2	; select bank2
  5919  0061  00A7               	movwf	(_temperature_value+3)^(0+256)
  5920  0062  3000               	movlw	0
  5921  0063  00A6               	movwf	(_temperature_value+2)^(0+256)
  5922  0064  3000               	movlw	0
  5923  0065  00A5               	movwf	(_temperature_value+1)^(0+256)
  5924  0066  3000               	movlw	0
  5925  0067  00A4               	movwf	_temperature_value^(0+256)
  5926                           
  5927                           ;max31856.c: 175: temperature_value = (((uch_ltcbh&0x3f)<<8) | (uch_ltcbm) )>>1;
  5928  0068  303F               	movlw	63
  5929  0069  0546               	andwf	_uch_ltcbh^(0+256),w
  5930  006A  0020               	movlb	0	; select bank0
  5931  006B  00CE               	movwf	??_tc_temperature_trans
  5932  006C  084E               	movf	??_tc_temperature_trans,w
  5933  006D  00D0               	movwf	??_tc_temperature_trans+2
  5934  006E  0022               	movlb	2	; select bank2
  5935  006F  0848               	movf	_uch_ltcbm^(0+256),w
  5936  0070  0020               	movlb	0	; select bank0
  5937  0071  00CF               	movwf	??_tc_temperature_trans+1
  5938  0072  0D50               	rlf	??_tc_temperature_trans+2,w
  5939  0073  0CD0               	rrf	??_tc_temperature_trans+2,f
  5940  0074  0CCF               	rrf	??_tc_temperature_trans+1,f
  5941  0075  084F               	movf	??_tc_temperature_trans+1,w
  5942  0076  0022               	movlb	2	; select bank2
  5943  0077  00A4               	movwf	_temperature_value^(0+256)
  5944  0078  0020               	movlb	0	; select bank0
  5945  0079  0850               	movf	??_tc_temperature_trans+2,w
  5946  007A  0022               	movlb	2	; select bank2
  5947  007B  00A5               	movwf	(_temperature_value+1)^(0+256)
  5948  007C  0D89               	rlf	9,f
  5949  007D  3B89               	subwfb	9,f
  5950  007E  0989               	comf	9,f
  5951  007F  00A6               	movwf	(_temperature_value+2)^(0+256)
  5952  0080  00A7               	movwf	(_temperature_value+3)^(0+256)
  5953                           
  5954                           ;max31856.c: 176: if(uch_ltcbh & 0x80) temperature_value |=0x2000;
  5955  0081  1BC6               	btfsc	_uch_ltcbh^(0+256),7
  5956  0082  16A5               	bsf	(_temperature_value^(0+256)+1),5
  5957                           
  5958                           ;max31856.c: 177: temperature_temp = temperature_value;
  5959  0083  0825               	movf	(_temperature_value+1)^(0+256),w
  5960  0084  0020               	movlb	0	; select bank0
  5961  0085  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  5962  0086  0022               	movlb	2	; select bank2
  5963  0087  0824               	movf	_temperature_value^(0+256),w
  5964  0088  0020               	movlb	0	; select bank0
  5965  0089  00D8               	movwf	tc_temperature_trans@temperature_temp
  5966                           
  5967                           ;max31856.c: 180: if(time_count == 1 && Record_flag == 1)
  5968  008A  036A               	decf	_time_count,w
  5969  008B  1D03               	btfss	3,2
  5970  008C  2938               	goto	l5942
  5971  008D  0367               	decf	_Record_flag,w
  5972  008E  1D03               	btfss	3,2
  5973  008F  2938               	goto	l5942
  5974                           
  5975                           ;max31856.c: 181: {
  5976                           ;max31856.c: 182: temperature_back = CH1_temperature;
  5977  0090  0022               	movlb	2	; select bank2
  5978  0091  082B               	movf	(_CH1_temperature+1)^(0+256),w
  5979  0092  0020               	movlb	0	; select bank0
  5980  0093  00D3               	movwf	tc_temperature_trans@temperature_back+1
  5981  0094  0022               	movlb	2	; select bank2
  5982  0095  082A               	movf	_CH1_temperature^(0+256),w
  5983  0096  0020               	movlb	0	; select bank0
  5984  0097  00D2               	movwf	tc_temperature_trans@temperature_back
  5985                           
  5986                           ;max31856.c: 183: if( CH1_temperature & 0x2000 != temperature_temp & 0x2000)
  5987  0098  3020               	movlw	32
  5988  0099  0659               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5989  009A  0458               	iorwf	tc_temperature_trans@temperature_temp,w
  5990  009B  1903               	btfsc	3,2
  5991  009C  289F               	goto	u5390
  5992  009D  3001               	movlw	1
  5993  009E  28A0               	goto	u5400
  5994  009F                     u5390:	
  5995  009F  3000               	movlw	0
  5996  00A0                     u5400:	
  5997  00A0  00CE               	movwf	??_tc_temperature_trans
  5998  00A1  01CF               	clrf	??_tc_temperature_trans+1
  5999  00A2  0022               	movlb	2	; select bank2
  6000  00A3  082A               	movf	_CH1_temperature^(0+256),w
  6001  00A4  0020               	movlb	0	; select bank0
  6002  00A5  054E               	andwf	??_tc_temperature_trans,w
  6003  00A6  00D0               	movwf	??_tc_temperature_trans+2
  6004  00A7  0022               	movlb	2	; select bank2
  6005  00A8  082B               	movf	(_CH1_temperature+1)^(0+256),w
  6006  00A9  0020               	movlb	0	; select bank0
  6007  00AA  054F               	andwf	??_tc_temperature_trans+1,w
  6008  00AB  00D1               	movwf	??_tc_temperature_trans+3
  6009  00AC  1AD1               	btfsc	??_tc_temperature_trans+3,5
  6010  00AD  2904               	goto	L8
  6011                           
  6012                           ;max31856.c: 194: else
  6013                           ;max31856.c: 195: {
  6014                           ;max31856.c: 196: if(CH1_temperature & 0x2000) CH1_temperature=0x3FFF-CH1_temperature + 
      +                          1 ;
  6015                           
  6016                           ;max31856.c: 193: }
  6017                           
  6018                           ;max31856.c: 192: CH1_temperature = temperature_value;
  6019                           
  6020                           ;max31856.c: 191: Cur_temperature_time_ch1 = 0;
  6021                           
  6022                           ;max31856.c: 190: Save_Write_word(temperature_value);
  6023                           
  6024                           ;max31856.c: 189: Save_Write_word(var_time);
  6025                           
  6026                           ;max31856.c: 188: var_time |= 0x2000;
  6027                           
  6028                           ;max31856.c: 187: if(CH1_state == 1) var_time |= 0x400;
  6029                           
  6030                           ;max31856.c: 186: var_time |= 0x100;
  6031                           
  6032                           ;max31856.c: 184: {
  6033                           ;max31856.c: 185: var_time = Calculate_Time();
  6034  00AE  0022               	movlb	2	; select bank2
  6035  00AF  1EAB               	btfss	(_CH1_temperature+1)^(0+256),5
  6036  00B0  28C4               	goto	l5916
  6037  00B1  092A               	comf	_CH1_temperature^(0+256),w
  6038  00B2  0020               	movlb	0	; select bank0
  6039  00B3  00CE               	movwf	??_tc_temperature_trans
  6040  00B4  0022               	movlb	2	; select bank2
  6041  00B5  092B               	comf	(_CH1_temperature+1)^(0+256),w
  6042  00B6  0020               	movlb	0	; select bank0
  6043  00B7  00CF               	movwf	??_tc_temperature_trans+1
  6044  00B8  0ACE               	incf	??_tc_temperature_trans,f
  6045  00B9  1903               	skipnz
  6046  00BA  0ACF               	incf	??_tc_temperature_trans+1,f
  6047  00BB  084E               	movf	??_tc_temperature_trans,w
  6048  00BC  3E00               	addlw	0
  6049  00BD  0022               	movlb	2	; select bank2
  6050  00BE  00AA               	movwf	_CH1_temperature^(0+256)
  6051  00BF  3040               	movlw	64
  6052  00C0  0020               	movlb	0	; select bank0
  6053  00C1  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6054  00C2  0022               	movlb	2	; select bank2
  6055  00C3  00AB               	movwf	(_CH1_temperature+1)^(0+256)
  6056  00C4                     l5916:	
  6057                           
  6058                           ;max31856.c: 197: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  6059  00C4  0020               	movlb	0	; select bank0
  6060  00C5  1ED9               	btfss	tc_temperature_trans@temperature_temp+1,5
  6061  00C6  28D4               	goto	l5920
  6062  00C7  0958               	comf	tc_temperature_trans@temperature_temp,w
  6063  00C8  00CE               	movwf	??_tc_temperature_trans
  6064  00C9  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6065  00CA  00CF               	movwf	??_tc_temperature_trans+1
  6066  00CB  0ACE               	incf	??_tc_temperature_trans,f
  6067  00CC  1903               	skipnz
  6068  00CD  0ACF               	incf	??_tc_temperature_trans+1,f
  6069  00CE  084E               	movf	??_tc_temperature_trans,w
  6070  00CF  3E00               	addlw	0
  6071  00D0  00D8               	movwf	tc_temperature_trans@temperature_temp
  6072  00D1  3040               	movlw	64
  6073  00D2  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6074  00D3  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6075  00D4                     l5920:	
  6076                           
  6077                           ;max31856.c: 198: if( temperature_temp > CH1_temperature ) temperature_absolute = temper
      +                          ature_temp - CH1_temperature;
  6078  00D4  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6079  00D5  0022               	movlb	2	; select bank2
  6080  00D6  022B               	subwf	(_CH1_temperature+1)^(0+256),w
  6081  00D7  1D03               	skipz
  6082  00D8  28DD               	goto	u5455
  6083  00D9  0020               	movlb	0	; select bank0
  6084  00DA  0858               	movf	tc_temperature_trans@temperature_temp,w
  6085  00DB  0022               	movlb	2	; select bank2
  6086  00DC  022A               	subwf	_CH1_temperature^(0+256),w
  6087  00DD                     u5455:	
  6088  00DD  1803               	skipnc
  6089  00DE  28EE               	goto	l5924
  6090  00DF  092A               	comf	_CH1_temperature^(0+256),w
  6091  00E0  0020               	movlb	0	; select bank0
  6092  00E1  00CE               	movwf	??_tc_temperature_trans
  6093  00E2  0022               	movlb	2	; select bank2
  6094  00E3  092B               	comf	(_CH1_temperature+1)^(0+256),w
  6095  00E4  0020               	movlb	0	; select bank0
  6096  00E5  00CF               	movwf	??_tc_temperature_trans+1
  6097  00E6  0ACE               	incf	??_tc_temperature_trans,f
  6098  00E7  1903               	skipnz
  6099  00E8  0ACF               	incf	??_tc_temperature_trans+1,f
  6100  00E9  0858               	movf	tc_temperature_trans@temperature_temp,w
  6101  00EA  074E               	addwf	??_tc_temperature_trans,w
  6102  00EB  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6103  00EC  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6104  00ED  28FE               	goto	L4
  6105  00EE                     l5924:	
  6106                           
  6107                           ;max31856.c: 199: else temperature_absolute = CH1_temperature - temperature_temp;
  6108  00EE  0020               	movlb	0	; select bank0
  6109  00EF  0958               	comf	tc_temperature_trans@temperature_temp,w
  6110  00F0  00CE               	movwf	??_tc_temperature_trans
  6111  00F1  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6112  00F2  00CF               	movwf	??_tc_temperature_trans+1
  6113  00F3  0ACE               	incf	??_tc_temperature_trans,f
  6114  00F4  1903               	skipnz
  6115  00F5  0ACF               	incf	??_tc_temperature_trans+1,f
  6116  00F6  0022               	movlb	2	; select bank2
  6117  00F7  082A               	movf	_CH1_temperature^(0+256),w
  6118  00F8  0020               	movlb	0	; select bank0
  6119  00F9  074E               	addwf	??_tc_temperature_trans,w
  6120  00FA  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6121  00FB  0022               	movlb	2	; select bank2
  6122  00FC  082B               	movf	(_CH1_temperature+1)^(0+256),w
  6123  00FD  0020               	movlb	0	; select bank0
  6124  00FE                     L4:	
  6125  00FE  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6126  00FF  00D5               	movwf	tc_temperature_trans@temperature_absolute+1
  6127                           
  6128                           ;max31856.c: 201: if( temperature_absolute > 0)
  6129  0100  0854               	movf	tc_temperature_trans@temperature_absolute,w
  6130  0101  0455               	iorwf	tc_temperature_trans@temperature_absolute+1,w
  6131  0102  1903               	btfsc	3,2
  6132  0103  292F               	goto	l5940
  6133  0104                     L8:	
  6134                           
  6135                           ;max31856.c: 202: {
  6136                           ;max31856.c: 203: var_time = Calculate_Time();
  6137  0104  3182  2265  3180   	fcall	_Calculate_Time
  6138  0107  0020               	movlb	0	; select bank0
  6139  0108  00CE               	movwf	??_tc_temperature_trans
  6140  0109  01CF               	clrf	??_tc_temperature_trans+1
  6141  010A  084E               	movf	??_tc_temperature_trans,w
  6142  010B  00D6               	movwf	tc_temperature_trans@var_time
  6143  010C  084F               	movf	??_tc_temperature_trans+1,w
  6144  010D  00D7               	movwf	tc_temperature_trans@var_time+1
  6145                           
  6146                           ;max31856.c: 204: var_time |= 0x100;
  6147  010E  1457               	bsf	tc_temperature_trans@var_time+1,0
  6148                           
  6149                           ;max31856.c: 205: if(CH1_state == 1) var_time |= 0x400;
  6150  010F  0022               	movlb	2	; select bank2
  6151  0110  0334               	decf	_CH1_state^(0+256),w
  6152  0111  1D03               	btfss	3,2
  6153  0112  2915               	goto	l621
  6154  0113  0020               	movlb	0	; select bank0
  6155  0114  1557               	bsf	tc_temperature_trans@var_time+1,2
  6156  0115                     l621:	
  6157                           
  6158                           ;max31856.c: 206: var_time |= 0x2000;
  6159  0115  0020               	movlb	0	; select bank0
  6160  0116  16D7               	bsf	tc_temperature_trans@var_time+1,5
  6161                           
  6162                           ;max31856.c: 207: Save_Write_word(var_time);
  6163  0117  0857               	movf	tc_temperature_trans@var_time+1,w
  6164  0118  00A7               	movwf	Save_Write_word@data+1
  6165  0119  0856               	movf	tc_temperature_trans@var_time,w
  6166  011A  00A6               	movwf	Save_Write_word@data
  6167  011B  318E  263F  3180   	fcall	_Save_Write_word
  6168                           
  6169                           ;max31856.c: 208: Save_Write_word(temperature_value);
  6170  011E  0022               	movlb	2	; select bank2
  6171  011F  0825               	movf	(_temperature_value+1)^(0+256),w
  6172  0120  0020               	movlb	0	; select bank0
  6173  0121  00A7               	movwf	Save_Write_word@data+1
  6174  0122  0022               	movlb	2	; select bank2
  6175  0123  0824               	movf	_temperature_value^(0+256),w
  6176  0124  0020               	movlb	0	; select bank0
  6177  0125  00A6               	movwf	Save_Write_word@data
  6178  0126  318E  263F  3180   	fcall	_Save_Write_word
  6179                           
  6180                           ;max31856.c: 209: Cur_temperature_time_ch1 = 0;
  6181  0129  0022               	movlb	2	; select bank2
  6182  012A  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  6183                           
  6184                           ;max31856.c: 210: CH1_temperature = temperature_value;
  6185  012B  0825               	movf	(_temperature_value+1)^(0+256),w
  6186  012C  00AB               	movwf	(_CH1_temperature+1)^(0+256)
  6187  012D  0824               	movf	_temperature_value^(0+256),w
  6188  012E  2936               	goto	L5
  6189  012F                     l5940:	
  6190                           ;max31856.c: 211: }
  6191                           
  6192                           
  6193                           ;max31856.c: 212: else
  6194                           ;max31856.c: 213: {
  6195                           ;max31856.c: 214: CH1_temperature = temperature_back;
  6196  012F  0020               	movlb	0	; select bank0
  6197  0130  0853               	movf	tc_temperature_trans@temperature_back+1,w
  6198  0131  0022               	movlb	2	; select bank2
  6199  0132  00AB               	movwf	(_CH1_temperature+1)^(0+256)
  6200  0133  0020               	movlb	0	; select bank0
  6201  0134  0852               	movf	tc_temperature_trans@temperature_back,w
  6202  0135  0022               	movlb	2	; select bank2
  6203  0136                     L5:	
  6204  0136  00AA               	movwf	_CH1_temperature^(0+256)
  6205                           
  6206                           ;max31856.c: 215: }
  6207                           ;max31856.c: 216: }
  6208                           ;max31856.c: 218: }
  6209  0137  29E7               	goto	l623
  6210  0138                     l5942:	
  6211                           
  6212                           ;max31856.c: 219: else if( time_count == 3 && Record_flag == 1)
  6213  0138  3003               	movlw	3
  6214  0139  0020               	movlb	0	; select bank0
  6215  013A  066A               	xorwf	_time_count,w
  6216  013B  1D03               	btfss	3,2
  6217  013C  29E7               	goto	l623
  6218  013D  0367               	decf	_Record_flag,w
  6219  013E  1D03               	btfss	3,2
  6220  013F  29E7               	goto	l623
  6221                           
  6222                           ;max31856.c: 220: {
  6223                           ;max31856.c: 221: temperature_back = CH2_temperature;
  6224  0140  0022               	movlb	2	; select bank2
  6225  0141  082D               	movf	(_CH2_temperature+1)^(0+256),w
  6226  0142  0020               	movlb	0	; select bank0
  6227  0143  00D3               	movwf	tc_temperature_trans@temperature_back+1
  6228  0144  0022               	movlb	2	; select bank2
  6229  0145  082C               	movf	_CH2_temperature^(0+256),w
  6230  0146  0020               	movlb	0	; select bank0
  6231  0147  00D2               	movwf	tc_temperature_trans@temperature_back
  6232                           
  6233                           ;max31856.c: 222: if( CH2_temperature & 0x2000 != temperature_temp & 0x2000)
  6234  0148  3020               	movlw	32
  6235  0149  0659               	xorwf	tc_temperature_trans@temperature_temp+1,w
  6236  014A  0458               	iorwf	tc_temperature_trans@temperature_temp,w
  6237  014B  1903               	btfsc	3,2
  6238  014C  294F               	goto	u5500
  6239  014D  3001               	movlw	1
  6240  014E  2950               	goto	u5510
  6241  014F                     u5500:	
  6242  014F  3000               	movlw	0
  6243  0150                     u5510:	
  6244  0150  00CE               	movwf	??_tc_temperature_trans
  6245  0151  01CF               	clrf	??_tc_temperature_trans+1
  6246  0152  0022               	movlb	2	; select bank2
  6247  0153  082C               	movf	_CH2_temperature^(0+256),w
  6248  0154  0020               	movlb	0	; select bank0
  6249  0155  054E               	andwf	??_tc_temperature_trans,w
  6250  0156  00D0               	movwf	??_tc_temperature_trans+2
  6251  0157  0022               	movlb	2	; select bank2
  6252  0158  082D               	movf	(_CH2_temperature+1)^(0+256),w
  6253  0159  0020               	movlb	0	; select bank0
  6254  015A  054F               	andwf	??_tc_temperature_trans+1,w
  6255  015B  00D1               	movwf	??_tc_temperature_trans+3
  6256  015C  1AD1               	btfsc	??_tc_temperature_trans+3,5
  6257  015D  29B4               	goto	L9
  6258                           
  6259                           ;max31856.c: 233: else
  6260                           ;max31856.c: 234: {
  6261                           ;max31856.c: 235: if(CH2_temperature & 0x2000) CH2_temperature=0x3FFF-CH2_temperature + 
      +                          1 ;
  6262                           
  6263                           ;max31856.c: 232: }
  6264                           
  6265                           ;max31856.c: 231: CH2_temperature = temperature_value;
  6266                           
  6267                           ;max31856.c: 230: Cur_temperature_time_ch2 = 0;
  6268                           
  6269                           ;max31856.c: 229: Save_Write_word(temperature_value);
  6270                           
  6271                           ;max31856.c: 228: Save_Write_word(var_time);
  6272                           
  6273                           ;max31856.c: 227: var_time |= 0x2000;
  6274                           
  6275                           ;max31856.c: 226: if(CH2_state == 1) var_time |= 0x800;
  6276                           
  6277                           ;max31856.c: 225: var_time |= 0x200;
  6278                           
  6279                           ;max31856.c: 223: {
  6280                           ;max31856.c: 224: var_time = Calculate_Time();
  6281  015E  0022               	movlb	2	; select bank2
  6282  015F  1EAD               	btfss	(_CH2_temperature+1)^(0+256),5
  6283  0160  2974               	goto	l5966
  6284  0161  092C               	comf	_CH2_temperature^(0+256),w
  6285  0162  0020               	movlb	0	; select bank0
  6286  0163  00CE               	movwf	??_tc_temperature_trans
  6287  0164  0022               	movlb	2	; select bank2
  6288  0165  092D               	comf	(_CH2_temperature+1)^(0+256),w
  6289  0166  0020               	movlb	0	; select bank0
  6290  0167  00CF               	movwf	??_tc_temperature_trans+1
  6291  0168  0ACE               	incf	??_tc_temperature_trans,f
  6292  0169  1903               	skipnz
  6293  016A  0ACF               	incf	??_tc_temperature_trans+1,f
  6294  016B  084E               	movf	??_tc_temperature_trans,w
  6295  016C  3E00               	addlw	0
  6296  016D  0022               	movlb	2	; select bank2
  6297  016E  00AC               	movwf	_CH2_temperature^(0+256)
  6298  016F  3040               	movlw	64
  6299  0170  0020               	movlb	0	; select bank0
  6300  0171  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6301  0172  0022               	movlb	2	; select bank2
  6302  0173  00AD               	movwf	(_CH2_temperature+1)^(0+256)
  6303  0174                     l5966:	
  6304                           
  6305                           ;max31856.c: 236: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  6306  0174  0020               	movlb	0	; select bank0
  6307  0175  1ED9               	btfss	tc_temperature_trans@temperature_temp+1,5
  6308  0176  2984               	goto	l5970
  6309  0177  0958               	comf	tc_temperature_trans@temperature_temp,w
  6310  0178  00CE               	movwf	??_tc_temperature_trans
  6311  0179  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6312  017A  00CF               	movwf	??_tc_temperature_trans+1
  6313  017B  0ACE               	incf	??_tc_temperature_trans,f
  6314  017C  1903               	skipnz
  6315  017D  0ACF               	incf	??_tc_temperature_trans+1,f
  6316  017E  084E               	movf	??_tc_temperature_trans,w
  6317  017F  3E00               	addlw	0
  6318  0180  00D8               	movwf	tc_temperature_trans@temperature_temp
  6319  0181  3040               	movlw	64
  6320  0182  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6321  0183  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6322  0184                     l5970:	
  6323                           
  6324                           ;max31856.c: 237: if( temperature_temp > CH2_temperature ) temperature_absolute = temper
      +                          ature_temp - CH2_temperature;
  6325  0184  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6326  0185  0022               	movlb	2	; select bank2
  6327  0186  022D               	subwf	(_CH2_temperature+1)^(0+256),w
  6328  0187  1D03               	skipz
  6329  0188  298D               	goto	u5565
  6330  0189  0020               	movlb	0	; select bank0
  6331  018A  0858               	movf	tc_temperature_trans@temperature_temp,w
  6332  018B  0022               	movlb	2	; select bank2
  6333  018C  022C               	subwf	_CH2_temperature^(0+256),w
  6334  018D                     u5565:	
  6335  018D  1803               	skipnc
  6336  018E  299E               	goto	l5974
  6337  018F  092C               	comf	_CH2_temperature^(0+256),w
  6338  0190  0020               	movlb	0	; select bank0
  6339  0191  00CE               	movwf	??_tc_temperature_trans
  6340  0192  0022               	movlb	2	; select bank2
  6341  0193  092D               	comf	(_CH2_temperature+1)^(0+256),w
  6342  0194  0020               	movlb	0	; select bank0
  6343  0195  00CF               	movwf	??_tc_temperature_trans+1
  6344  0196  0ACE               	incf	??_tc_temperature_trans,f
  6345  0197  1903               	skipnz
  6346  0198  0ACF               	incf	??_tc_temperature_trans+1,f
  6347  0199  0858               	movf	tc_temperature_trans@temperature_temp,w
  6348  019A  074E               	addwf	??_tc_temperature_trans,w
  6349  019B  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6350  019C  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6351  019D  29AE               	goto	L6
  6352  019E                     l5974:	
  6353                           
  6354                           ;max31856.c: 238: else temperature_absolute = CH2_temperature - temperature_temp;
  6355  019E  0020               	movlb	0	; select bank0
  6356  019F  0958               	comf	tc_temperature_trans@temperature_temp,w
  6357  01A0  00CE               	movwf	??_tc_temperature_trans
  6358  01A1  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6359  01A2  00CF               	movwf	??_tc_temperature_trans+1
  6360  01A3  0ACE               	incf	??_tc_temperature_trans,f
  6361  01A4  1903               	skipnz
  6362  01A5  0ACF               	incf	??_tc_temperature_trans+1,f
  6363  01A6  0022               	movlb	2	; select bank2
  6364  01A7  082C               	movf	_CH2_temperature^(0+256),w
  6365  01A8  0020               	movlb	0	; select bank0
  6366  01A9  074E               	addwf	??_tc_temperature_trans,w
  6367  01AA  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6368  01AB  0022               	movlb	2	; select bank2
  6369  01AC  082D               	movf	(_CH2_temperature+1)^(0+256),w
  6370  01AD  0020               	movlb	0	; select bank0
  6371  01AE                     L6:	
  6372  01AE  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6373  01AF  00D5               	movwf	tc_temperature_trans@temperature_absolute+1
  6374                           
  6375                           ;max31856.c: 240: if( temperature_absolute > 0)
  6376  01B0  0854               	movf	tc_temperature_trans@temperature_absolute,w
  6377  01B1  0455               	iorwf	tc_temperature_trans@temperature_absolute+1,w
  6378  01B2  1903               	btfsc	3,2
  6379  01B3  29DF               	goto	l5990
  6380  01B4                     L9:	
  6381                           
  6382                           ;max31856.c: 241: {
  6383                           ;max31856.c: 242: var_time = Calculate_Time();
  6384  01B4  3182  2265  3180   	fcall	_Calculate_Time
  6385  01B7  0020               	movlb	0	; select bank0
  6386  01B8  00CE               	movwf	??_tc_temperature_trans
  6387  01B9  01CF               	clrf	??_tc_temperature_trans+1
  6388  01BA  084E               	movf	??_tc_temperature_trans,w
  6389  01BB  00D6               	movwf	tc_temperature_trans@var_time
  6390  01BC  084F               	movf	??_tc_temperature_trans+1,w
  6391  01BD  00D7               	movwf	tc_temperature_trans@var_time+1
  6392                           
  6393                           ;max31856.c: 243: var_time |= 0x200;
  6394  01BE  14D7               	bsf	tc_temperature_trans@var_time+1,1
  6395                           
  6396                           ;max31856.c: 244: if(CH2_state == 1) var_time |= 0x800;
  6397  01BF  0022               	movlb	2	; select bank2
  6398  01C0  0335               	decf	_CH2_state^(0+256),w
  6399  01C1  1D03               	btfss	3,2
  6400  01C2  29C5               	goto	l633
  6401  01C3  0020               	movlb	0	; select bank0
  6402  01C4  15D7               	bsf	tc_temperature_trans@var_time+1,3
  6403  01C5                     l633:	
  6404                           
  6405                           ;max31856.c: 245: var_time |= 0x2000;
  6406  01C5  0020               	movlb	0	; select bank0
  6407  01C6  16D7               	bsf	tc_temperature_trans@var_time+1,5
  6408                           
  6409                           ;max31856.c: 246: Save_Write_word(var_time);
  6410  01C7  0857               	movf	tc_temperature_trans@var_time+1,w
  6411  01C8  00A7               	movwf	Save_Write_word@data+1
  6412  01C9  0856               	movf	tc_temperature_trans@var_time,w
  6413  01CA  00A6               	movwf	Save_Write_word@data
  6414  01CB  318E  263F  3180   	fcall	_Save_Write_word
  6415                           
  6416                           ;max31856.c: 247: Save_Write_word(temperature_value);
  6417  01CE  0022               	movlb	2	; select bank2
  6418  01CF  0825               	movf	(_temperature_value+1)^(0+256),w
  6419  01D0  0020               	movlb	0	; select bank0
  6420  01D1  00A7               	movwf	Save_Write_word@data+1
  6421  01D2  0022               	movlb	2	; select bank2
  6422  01D3  0824               	movf	_temperature_value^(0+256),w
  6423  01D4  0020               	movlb	0	; select bank0
  6424  01D5  00A6               	movwf	Save_Write_word@data
  6425  01D6  318E  263F  3180   	fcall	_Save_Write_word
  6426                           
  6427                           ;max31856.c: 248: Cur_temperature_time_ch2 = 0;
  6428  01D9  0022               	movlb	2	; select bank2
  6429  01DA  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  6430                           
  6431                           ;max31856.c: 249: CH2_temperature = temperature_value;
  6432  01DB  0825               	movf	(_temperature_value+1)^(0+256),w
  6433  01DC  00AD               	movwf	(_CH2_temperature+1)^(0+256)
  6434  01DD  0824               	movf	_temperature_value^(0+256),w
  6435  01DE  29E6               	goto	L7
  6436  01DF                     l5990:	
  6437                           ;max31856.c: 250: }
  6438                           
  6439                           
  6440                           ;max31856.c: 251: else
  6441                           ;max31856.c: 252: {
  6442                           ;max31856.c: 253: CH2_temperature = temperature_back;
  6443  01DF  0020               	movlb	0	; select bank0
  6444  01E0  0853               	movf	tc_temperature_trans@temperature_back+1,w
  6445  01E1  0022               	movlb	2	; select bank2
  6446  01E2  00AD               	movwf	(_CH2_temperature+1)^(0+256)
  6447  01E3  0020               	movlb	0	; select bank0
  6448  01E4  0852               	movf	tc_temperature_trans@temperature_back,w
  6449  01E5  0022               	movlb	2	; select bank2
  6450  01E6                     L7:	
  6451  01E6  00AC               	movwf	_CH2_temperature^(0+256)
  6452  01E7                     l623:	
  6453                           
  6454                           ;max31856.c: 254: }
  6455                           ;max31856.c: 255: }
  6456                           ;max31856.c: 257: }
  6457                           ;max31856.c: 259: temperature_temp = temperature_value;
  6458  01E7  0022               	movlb	2	; select bank2
  6459  01E8  0825               	movf	(_temperature_value+1)^(0+256),w
  6460  01E9  0020               	movlb	0	; select bank0
  6461  01EA  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6462  01EB  0022               	movlb	2	; select bank2
  6463  01EC  0824               	movf	_temperature_value^(0+256),w
  6464  01ED  0020               	movlb	0	; select bank0
  6465  01EE  00D8               	movwf	tc_temperature_trans@temperature_temp
  6466                           
  6467                           ;max31856.c: 260: if((uch_ltcbh&0x80)==0x80)
  6468  01EF  0022               	movlb	2	; select bank2
  6469  01F0  1FC6               	btfss	_uch_ltcbh^(0+256),7
  6470  01F1  2A32               	goto	l6008
  6471                           
  6472                           ;max31856.c: 261: {
  6473                           ;max31856.c: 262: temperature_sign = 1;
  6474  01F2  01C1               	clrf	_temperature_sign^(0+256)
  6475  01F3  0AC1               	incf	_temperature_sign^(0+256),f
  6476                           
  6477                           ;max31856.c: 263: temperature_temp=0x3FFF-temperature_temp + 1 ;
  6478  01F4  0020               	movlb	0	; select bank0
  6479  01F5  0958               	comf	tc_temperature_trans@temperature_temp,w
  6480  01F6  00CE               	movwf	??_tc_temperature_trans
  6481  01F7  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6482  01F8  00CF               	movwf	??_tc_temperature_trans+1
  6483  01F9  0ACE               	incf	??_tc_temperature_trans,f
  6484  01FA  1903               	skipnz
  6485  01FB  0ACF               	incf	??_tc_temperature_trans+1,f
  6486  01FC  084E               	movf	??_tc_temperature_trans,w
  6487  01FD  3E00               	addlw	0
  6488  01FE  00D8               	movwf	tc_temperature_trans@temperature_temp
  6489  01FF  3040               	movlw	64
  6490  0200  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6491  0201  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6492                           
  6493                           ;max31856.c: 265: temperature_int = temperature_temp>>3;
  6494  0202  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6495  0203  00CF               	movwf	??_tc_temperature_trans+1
  6496  0204  0858               	movf	tc_temperature_trans@temperature_temp,w
  6497  0205  00CE               	movwf	??_tc_temperature_trans
  6498  0206  36CF               	lsrf	??_tc_temperature_trans+1,f
  6499  0207  0CCE               	rrf	??_tc_temperature_trans,f
  6500  0208  36CF               	lsrf	??_tc_temperature_trans+1,f
  6501  0209  0CCE               	rrf	??_tc_temperature_trans,f
  6502  020A  36CF               	lsrf	??_tc_temperature_trans+1,f
  6503  020B  0CCE               	rrf	??_tc_temperature_trans,f
  6504  020C  084E               	movf	??_tc_temperature_trans,w
  6505  020D  0022               	movlb	2	; select bank2
  6506  020E  00B2               	movwf	_temperature_int^(0+256)
  6507  020F  0020               	movlb	0	; select bank0
  6508  0210  084F               	movf	??_tc_temperature_trans+1,w
  6509  0211  0022               	movlb	2	; select bank2
  6510  0212  00B3               	movwf	(_temperature_int+1)^(0+256)
  6511                           
  6512                           ;max31856.c: 266: temperature_decimal = temperature_temp & 0x07;
  6513  0213  0020               	movlb	0	; select bank0
  6514  0214  0858               	movf	tc_temperature_trans@temperature_temp,w
  6515  0215  3907               	andlw	7
  6516  0216  00CE               	movwf	??_tc_temperature_trans
  6517  0217  084E               	movf	??_tc_temperature_trans,w
  6518  0218  00E9               	movwf	_temperature_decimal
  6519                           
  6520                           ;max31856.c: 267: if(temperature_decimal > 3) temperature_decimal++;
  6521  0219  3004               	movlw	4
  6522  021A  0269               	subwf	_temperature_decimal,w
  6523  021B  1C03               	skipc
  6524  021C  2A21               	goto	l636
  6525  021D  3001               	movlw	1
  6526  021E  00CE               	movwf	??_tc_temperature_trans
  6527  021F  084E               	movf	??_tc_temperature_trans,w
  6528  0220  07E9               	addwf	_temperature_decimal,f
  6529  0221                     l636:	
  6530                           
  6531                           ;max31856.c: 268: if(( temperature_decimal == 3 || temperature_decimal == 8 ) && (temper
      +                          ature_int & 0x01)) temperature_decimal++;
  6532  0221  3003               	movlw	3
  6533  0222  0669               	xorwf	_temperature_decimal,w
  6534  0223  1903               	btfsc	3,2
  6535  0224  2A29               	goto	l639
  6536  0225  3008               	movlw	8
  6537  0226  0669               	xorwf	_temperature_decimal,w
  6538  0227  1D03               	btfss	3,2
  6539  0228  0008               	return
  6540  0229                     l639:	
  6541  0229  0022               	movlb	2	; select bank2
  6542  022A  1C32               	btfss	_temperature_int^(0+256),0
  6543  022B  0008               	return
  6544  022C  3001               	movlw	1
  6545  022D  0020               	movlb	0	; select bank0
  6546  022E  00CE               	movwf	??_tc_temperature_trans
  6547  022F  084E               	movf	??_tc_temperature_trans,w
  6548  0230  07E9               	addwf	_temperature_decimal,f
  6549                           
  6550                           ;max31856.c: 269: }
  6551  0231  0008               	return
  6552  0232                     l6008:	
  6553                           
  6554                           ;max31856.c: 270: else
  6555                           ;max31856.c: 271: {
  6556                           ;max31856.c: 272: temperature_sign = 0;
  6557  0232  0022               	movlb	2	; select bank2
  6558  0233  01C1               	clrf	_temperature_sign^(0+256)
  6559                           
  6560                           ;max31856.c: 273: temperature_int = temperature_temp>>3;
  6561  0234  0020               	movlb	0	; select bank0
  6562  0235  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6563  0236  00CF               	movwf	??_tc_temperature_trans+1
  6564  0237  0858               	movf	tc_temperature_trans@temperature_temp,w
  6565  0238  00CE               	movwf	??_tc_temperature_trans
  6566  0239  36CF               	lsrf	??_tc_temperature_trans+1,f
  6567  023A  0CCE               	rrf	??_tc_temperature_trans,f
  6568  023B  36CF               	lsrf	??_tc_temperature_trans+1,f
  6569  023C  0CCE               	rrf	??_tc_temperature_trans,f
  6570  023D  36CF               	lsrf	??_tc_temperature_trans+1,f
  6571  023E  0CCE               	rrf	??_tc_temperature_trans,f
  6572  023F  084E               	movf	??_tc_temperature_trans,w
  6573  0240  0022               	movlb	2	; select bank2
  6574  0241  00B2               	movwf	_temperature_int^(0+256)
  6575  0242  0020               	movlb	0	; select bank0
  6576  0243  084F               	movf	??_tc_temperature_trans+1,w
  6577  0244  0022               	movlb	2	; select bank2
  6578  0245  00B3               	movwf	(_temperature_int+1)^(0+256)
  6579                           
  6580                           ;max31856.c: 274: temperature_decimal = temperature_temp & 0x07;
  6581  0246  0020               	movlb	0	; select bank0
  6582  0247  0858               	movf	tc_temperature_trans@temperature_temp,w
  6583  0248  3907               	andlw	7
  6584  0249  00CE               	movwf	??_tc_temperature_trans
  6585  024A  084E               	movf	??_tc_temperature_trans,w
  6586  024B  00E9               	movwf	_temperature_decimal
  6587                           
  6588                           ;max31856.c: 275: if(temperature_decimal > 3) temperature_decimal++;
  6589  024C  3004               	movlw	4
  6590  024D  0269               	subwf	_temperature_decimal,w
  6591  024E  1C03               	skipc
  6592  024F  2A54               	goto	l641
  6593  0250  3001               	movlw	1
  6594  0251  00CE               	movwf	??_tc_temperature_trans
  6595  0252  084E               	movf	??_tc_temperature_trans,w
  6596  0253  07E9               	addwf	_temperature_decimal,f
  6597  0254                     l641:	
  6598                           
  6599                           ;max31856.c: 276: if((temperature_decimal == 4 || temperature_decimal == 8) && (temperat
      +                          ure_int & 0x01)) temperature_decimal++;
  6600  0254  3004               	movlw	4
  6601  0255  0669               	xorwf	_temperature_decimal,w
  6602  0256  1903               	btfsc	3,2
  6603  0257  2A5C               	goto	l644
  6604  0258  3008               	movlw	8
  6605  0259  0669               	xorwf	_temperature_decimal,w
  6606  025A  1D03               	btfss	3,2
  6607  025B  0008               	return
  6608  025C                     l644:	
  6609  025C  0022               	movlb	2	; select bank2
  6610  025D  1C32               	btfss	_temperature_int^(0+256),0
  6611  025E  0008               	return
  6612  025F  3001               	movlw	1
  6613  0260  0020               	movlb	0	; select bank0
  6614  0261  00CE               	movwf	??_tc_temperature_trans
  6615  0262  084E               	movf	??_tc_temperature_trans,w
  6616  0263  07E9               	addwf	_temperature_decimal,f
  6617  0264  0008               	return
  6618  0265                     __end_of_tc_temperature_trans:	
  6619                           
  6620                           	psect	text18
  6621  0265                     __ptext18:	
  6622 ;; *************** function _Calculate_Time *****************
  6623 ;; Defined at:
  6624 ;;		line 163 in file "mcc_generated_files/save.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;		None
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  temp2           4   42[BANK0 ] unsigned long 
  6629 ;;  temp1           4   38[BANK0 ] unsigned long 
  6630 ;;  temp            4   34[BANK0 ] unsigned long 
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      unsigned char 
  6633 ;; Registers used:
  6634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;Total ram usage:       22 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    7
  6647 ;; This function calls:
  6648 ;;		_Bq32k_Rtc_Read_Time
  6649 ;;		_Save_Write_time
  6650 ;;		_Write_Flash_finish
  6651 ;;		_Write_Flash_head
  6652 ;;		___wmul
  6653 ;; This function is called by:
  6654 ;;		_tc_temperature_trans
  6655 ;;		_Save_process
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _Calculate_Time
  6661  0265                     _Calculate_Time:	
  6662                           
  6663                           ;save.c: 165: unsigned long temp = 0 ;
  6664                           
  6665                           ;incstack = 0
  6666                           ; Regs used in _Calculate_Time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6667  0265  3000               	movlw	0
  6668  0266  0020               	movlb	0	; select bank0
  6669  0267  00C5               	movwf	Calculate_Time@temp+3
  6670  0268  3000               	movlw	0
  6671  0269  00C4               	movwf	Calculate_Time@temp+2
  6672  026A  3000               	movlw	0
  6673  026B  00C3               	movwf	Calculate_Time@temp+1
  6674  026C  3000               	movlw	0
  6675  026D  00C2               	movwf	Calculate_Time@temp
  6676                           
  6677                           ;save.c: 166: unsigned long temp1 = 0 ;
  6678  026E  3000               	movlw	0
  6679  026F  00C9               	movwf	Calculate_Time@temp1+3
  6680  0270  3000               	movlw	0
  6681  0271  00C8               	movwf	Calculate_Time@temp1+2
  6682  0272  3000               	movlw	0
  6683  0273  00C7               	movwf	Calculate_Time@temp1+1
  6684  0274  3000               	movlw	0
  6685  0275  00C6               	movwf	Calculate_Time@temp1
  6686                           
  6687                           ;save.c: 167: unsigned long temp2 = 0 ;
  6688  0276  3000               	movlw	0
  6689  0277  00CD               	movwf	Calculate_Time@temp2+3
  6690  0278  3000               	movlw	0
  6691  0279  00CC               	movwf	Calculate_Time@temp2+2
  6692  027A  3000               	movlw	0
  6693  027B  00CB               	movwf	Calculate_Time@temp2+1
  6694  027C  3000               	movlw	0
  6695  027D  00CA               	movwf	Calculate_Time@temp2
  6696                           
  6697                           ;save.c: 168: Bq32k_Rtc_Read_Time(&rtc_tm);
  6698  027E  3061               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  6699  027F  318B  23F8  3182   	fcall	_Bq32k_Rtc_Read_Time
  6700                           
  6701                           ;save.c: 169: if( time_count == 1 )
  6702  0282  0020               	movlb	0	; select bank0
  6703  0283  036A               	decf	_time_count,w
  6704  0284  1D03               	btfss	3,2
  6705  0285  2B3C               	goto	l5670
  6706                           
  6707                           ;save.c: 170: {
  6708                           ;save.c: 171: if(rtc_tm.date != rtc_save_ch1.date)
  6709  0286  0022               	movlb	2	; select bank2
  6710  0287  0865               	movf	(_rtc_tm^(0+256)+4),w
  6711  0288  0657               	xorwf	(_rtc_save_ch1^(0+256)+4),w
  6712  0289  1D03               	btfss	3,2
  6713  028A  2B45               	goto	l5674
  6714                           
  6715                           ;save.c: 183: else
  6716                           ;save.c: 184: {
  6717                           ;save.c: 185: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6718                           
  6719                           ;save.c: 182: }
  6720                           
  6721                           ;save.c: 181: time_count = 0;
  6722                           
  6723                           ;save.c: 178: Cur_temperature_time_ch2 = 0;
  6724                           
  6725                           ;save.c: 177: Cur_temperature_time_ch1 = 0;
  6726                           
  6727                           ;save.c: 176: Save_Write_time();
  6728                           
  6729                           ;save.c: 175: Write_Flash_head();
  6730                           
  6731                           ;save.c: 172: {
  6732                           ;save.c: 174: Write_Flash_finish();
  6733  028B  0022               	movlb	2	; select bank2
  6734  028C  0861               	movf	_rtc_tm^(0+256),w
  6735  028D  0020               	movlb	0	; select bank0
  6736  028E  00B8               	movwf	??_Calculate_Time
  6737  028F  01B9               	clrf	??_Calculate_Time+1
  6738  0290  0022               	movlb	2	; select bank2
  6739  0291  0863               	movf	(_rtc_tm^(0+256)+2),w
  6740  0292  0020               	movlb	0	; select bank0
  6741  0293  00BA               	movwf	??_Calculate_Time+2
  6742  0294  01BB               	clrf	??_Calculate_Time+3
  6743  0295  083A               	movf	??_Calculate_Time+2,w
  6744  0296  00A1               	movwf	___wmul@multiplier
  6745  0297  083B               	movf	??_Calculate_Time+3,w
  6746  0298  00A2               	movwf	___wmul@multiplier+1
  6747  0299  3010               	movlw	16
  6748  029A  00A3               	movwf	___wmul@multiplicand
  6749  029B  300E               	movlw	14
  6750  029C  00A4               	movwf	___wmul@multiplicand+1
  6751  029D  3194  2456  3182   	fcall	___wmul
  6752  02A0  0020               	movlb	0	; select bank0
  6753  02A1  0821               	movf	?___wmul,w
  6754  02A2  00BC               	movwf	??_Calculate_Time+4
  6755  02A3  0822               	movf	?___wmul+1,w
  6756  02A4  00BD               	movwf	??_Calculate_Time+5
  6757  02A5  0022               	movlb	2	; select bank2
  6758  02A6  0862               	movf	(_rtc_tm^(0+256)+1),w
  6759  02A7  0020               	movlb	0	; select bank0
  6760  02A8  00BE               	movwf	??_Calculate_Time+6
  6761  02A9  01BF               	clrf	??_Calculate_Time+7
  6762  02AA  083E               	movf	??_Calculate_Time+6,w
  6763  02AB  00A1               	movwf	___wmul@multiplier
  6764  02AC  083F               	movf	??_Calculate_Time+7,w
  6765  02AD  00A2               	movwf	___wmul@multiplier+1
  6766  02AE  303C               	movlw	60
  6767  02AF  00A3               	movwf	___wmul@multiplicand
  6768  02B0  3000               	movlw	0
  6769  02B1  00A4               	movwf	___wmul@multiplicand+1
  6770  02B2  3194  2456  3182   	fcall	___wmul
  6771  02B5  0020               	movlb	0	; select bank0
  6772  02B6  0821               	movf	?___wmul,w
  6773  02B7  073C               	addwf	??_Calculate_Time+4,w
  6774  02B8  00C0               	movwf	??_Calculate_Time+8
  6775  02B9  0822               	movf	?___wmul+1,w
  6776  02BA  3D3D               	addwfc	??_Calculate_Time+5,w
  6777  02BB  00C1               	movwf	??_Calculate_Time+9
  6778  02BC  0838               	movf	??_Calculate_Time,w
  6779  02BD  0740               	addwf	??_Calculate_Time+8,w
  6780  02BE  00C6               	movwf	Calculate_Time@temp1
  6781  02BF  0839               	movf	??_Calculate_Time+1,w
  6782  02C0  3D41               	addwfc	??_Calculate_Time+9,w
  6783  02C1  00C7               	movwf	Calculate_Time@temp1+1
  6784  02C2  01C8               	clrf	Calculate_Time@temp1+2
  6785  02C3  1BC7               	btfsc	Calculate_Time@temp1+1,7
  6786  02C4  03C8               	decf	Calculate_Time@temp1+2,f
  6787  02C5  0848               	movf	Calculate_Time@temp1+2,w
  6788  02C6  00C9               	movwf	Calculate_Time@temp1+3
  6789                           
  6790                           ;save.c: 186: temp2 = rtc_save_ch1.hours*3600+rtc_save_ch1.minutes*60+rtc_save_ch1.secon
      +                          ds;
  6791  02C7  0022               	movlb	2	; select bank2
  6792  02C8  0853               	movf	_rtc_save_ch1^(0+256),w
  6793  02C9  0020               	movlb	0	; select bank0
  6794  02CA  00B8               	movwf	??_Calculate_Time
  6795  02CB  01B9               	clrf	??_Calculate_Time+1
  6796  02CC  0022               	movlb	2	; select bank2
  6797  02CD  0855               	movf	(_rtc_save_ch1^(0+256)+2),w
  6798  02CE  0020               	movlb	0	; select bank0
  6799  02CF  00BA               	movwf	??_Calculate_Time+2
  6800  02D0  01BB               	clrf	??_Calculate_Time+3
  6801  02D1  083A               	movf	??_Calculate_Time+2,w
  6802  02D2  00A1               	movwf	___wmul@multiplier
  6803  02D3  083B               	movf	??_Calculate_Time+3,w
  6804  02D4  00A2               	movwf	___wmul@multiplier+1
  6805  02D5  3010               	movlw	16
  6806  02D6  00A3               	movwf	___wmul@multiplicand
  6807  02D7  300E               	movlw	14
  6808  02D8  00A4               	movwf	___wmul@multiplicand+1
  6809  02D9  3194  2456  3182   	fcall	___wmul
  6810  02DC  0020               	movlb	0	; select bank0
  6811  02DD  0821               	movf	?___wmul,w
  6812  02DE  00BC               	movwf	??_Calculate_Time+4
  6813  02DF  0822               	movf	?___wmul+1,w
  6814  02E0  00BD               	movwf	??_Calculate_Time+5
  6815  02E1  0022               	movlb	2	; select bank2
  6816  02E2  0854               	movf	(_rtc_save_ch1^(0+256)+1),w
  6817  02E3  0020               	movlb	0	; select bank0
  6818  02E4  00BE               	movwf	??_Calculate_Time+6
  6819  02E5  01BF               	clrf	??_Calculate_Time+7
  6820  02E6  083E               	movf	??_Calculate_Time+6,w
  6821  02E7  00A1               	movwf	___wmul@multiplier
  6822  02E8  083F               	movf	??_Calculate_Time+7,w
  6823  02E9  00A2               	movwf	___wmul@multiplier+1
  6824  02EA  303C               	movlw	60
  6825  02EB  00A3               	movwf	___wmul@multiplicand
  6826  02EC  3000               	movlw	0
  6827  02ED  00A4               	movwf	___wmul@multiplicand+1
  6828  02EE  3194  2456  3182   	fcall	___wmul
  6829  02F1  0020               	movlb	0	; select bank0
  6830  02F2  0821               	movf	?___wmul,w
  6831  02F3  073C               	addwf	??_Calculate_Time+4,w
  6832  02F4  00C0               	movwf	??_Calculate_Time+8
  6833  02F5  0822               	movf	?___wmul+1,w
  6834  02F6  3D3D               	addwfc	??_Calculate_Time+5,w
  6835  02F7  00C1               	movwf	??_Calculate_Time+9
  6836  02F8  0838               	movf	??_Calculate_Time,w
  6837  02F9  0740               	addwf	??_Calculate_Time+8,w
  6838  02FA  00CA               	movwf	Calculate_Time@temp2
  6839  02FB  0839               	movf	??_Calculate_Time+1,w
  6840  02FC  3D41               	addwfc	??_Calculate_Time+9,w
  6841  02FD  00CB               	movwf	Calculate_Time@temp2+1
  6842  02FE  01CC               	clrf	Calculate_Time@temp2+2
  6843  02FF  1BCB               	btfsc	Calculate_Time@temp2+1,7
  6844  0300  03CC               	decf	Calculate_Time@temp2+2,f
  6845  0301  084C               	movf	Calculate_Time@temp2+2,w
  6846  0302  00CD               	movwf	Calculate_Time@temp2+3
  6847                           
  6848                           ;save.c: 187: temp = temp1 - temp2;
  6849  0303  0846               	movf	Calculate_Time@temp1,w
  6850  0304  00B8               	movwf	??_Calculate_Time
  6851  0305  0847               	movf	Calculate_Time@temp1+1,w
  6852  0306  00B9               	movwf	??_Calculate_Time+1
  6853  0307  0848               	movf	Calculate_Time@temp1+2,w
  6854  0308  00BA               	movwf	??_Calculate_Time+2
  6855  0309  0849               	movf	Calculate_Time@temp1+3,w
  6856  030A  00BB               	movwf	??_Calculate_Time+3
  6857  030B  094A               	comf	Calculate_Time@temp2,w
  6858  030C  00BC               	movwf	??_Calculate_Time+4
  6859  030D  094B               	comf	Calculate_Time@temp2+1,w
  6860  030E  00BD               	movwf	??_Calculate_Time+5
  6861  030F  094C               	comf	Calculate_Time@temp2+2,w
  6862  0310  00BE               	movwf	??_Calculate_Time+6
  6863  0311  094D               	comf	Calculate_Time@temp2+3,w
  6864  0312  00BF               	movwf	??_Calculate_Time+7
  6865  0313  0ABC               	incf	??_Calculate_Time+4,f
  6866  0314  1903               	skipnz
  6867  0315  0ABD               	incf	??_Calculate_Time+5,f
  6868  0316  1903               	skipnz
  6869  0317  0ABE               	incf	??_Calculate_Time+6,f
  6870  0318  1903               	skipnz
  6871  0319  0ABF               	incf	??_Calculate_Time+7,f
  6872  031A  083C               	movf	??_Calculate_Time+4,w
  6873  031B  07B8               	addwf	??_Calculate_Time,f
  6874  031C  083D               	movf	??_Calculate_Time+5,w
  6875  031D  3DB9               	addwfc	??_Calculate_Time+1,f
  6876  031E  083E               	movf	??_Calculate_Time+6,w
  6877  031F  3DBA               	addwfc	??_Calculate_Time+2,f
  6878  0320  083F               	movf	??_Calculate_Time+7,w
  6879  0321  3DBB               	addwfc	??_Calculate_Time+3,f
  6880  0322  083B               	movf	??_Calculate_Time+3,w
  6881  0323  00C5               	movwf	Calculate_Time@temp+3
  6882  0324  083A               	movf	??_Calculate_Time+2,w
  6883  0325  00C4               	movwf	Calculate_Time@temp+2
  6884  0326  0839               	movf	??_Calculate_Time+1,w
  6885  0327  00C3               	movwf	Calculate_Time@temp+1
  6886  0328  0838               	movf	??_Calculate_Time,w
  6887  0329  00C2               	movwf	Calculate_Time@temp
  6888                           
  6889                           ;save.c: 188: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  6890  032A  3053               	movlw	low (_rtc_save_ch1| (0+256))
  6891  032B  0086               	movwf	6
  6892  032C  3001               	movlw	1	; select bank2/3
  6893  032D  0087               	movwf	7
  6894  032E  3061               	movlw	low (_rtc_tm| (0+256))
  6895  032F  0084               	movwf	4
  6896  0330  3001               	movlw	1	; select bank2/3
  6897  0331  0085               	movwf	5
  6898  0332  3007               	movlw	7
  6899  0333  0020               	movlb	0	; select bank0
  6900  0334  00B8               	movwf	??_Calculate_Time
  6901  0335                     u498m0:	
  6902  0335  0012               	moviw fsr0++
  6903  0336  001E               	movwi fsr1++
  6904  0337  0BB8               	decfsz	??_Calculate_Time,f
  6905  0338  2B35               	goto	u498m0
  6906                           
  6907                           ;save.c: 189: return temp;
  6908  0339  0020               	movlb	0	; select bank0
  6909  033A  0842               	movf	Calculate_Time@temp,w
  6910  033B  0008               	return
  6911  033C                     l5670:	
  6912                           ;save.c: 190: }
  6913                           ;save.c: 191: }
  6914                           
  6915                           
  6916                           ;save.c: 192: else if( time_count == 3 )
  6917  033C  3003               	movlw	3
  6918  033D  066A               	xorwf	_time_count,w
  6919  033E  1D03               	btfss	3,2
  6920  033F  2C05               	goto	l5694
  6921                           
  6922                           ;save.c: 193: {
  6923                           ;save.c: 194: if(rtc_tm.date != rtc_save_ch2.date)
  6924  0340  0022               	movlb	2	; select bank2
  6925  0341  0865               	movf	(_rtc_tm^(0+256)+4),w
  6926  0342  065E               	xorwf	(_rtc_save_ch2^(0+256)+4),w
  6927  0343  1903               	skipnz
  6928  0344  2B54               	goto	l5684
  6929  0345                     l5674:	
  6930                           
  6931                           ;save.c: 195: {
  6932                           ;save.c: 197: Write_Flash_finish();
  6933  0345  3197  27CA  3182   	fcall	_Write_Flash_finish
  6934                           
  6935                           ;save.c: 198: Write_Flash_head();
  6936  0348  3188  201B  3182   	fcall	_Write_Flash_head
  6937                           
  6938                           ;save.c: 199: Save_Write_time();
  6939  034B  318C  24D7  3182   	fcall	_Save_Write_time
  6940                           
  6941                           ;save.c: 200: Cur_temperature_time_ch1 = 0;
  6942  034E  0022               	movlb	2	; select bank2
  6943  034F  01B6               	clrf	_Cur_temperature_time_ch1^(0+256)
  6944                           
  6945                           ;save.c: 201: Cur_temperature_time_ch2 = 0;
  6946  0350  01B7               	clrf	_Cur_temperature_time_ch2^(0+256)
  6947                           
  6948                           ;save.c: 204: time_count = 0;
  6949  0351  0020               	movlb	0	; select bank0
  6950  0352  01EA               	clrf	_time_count
  6951                           
  6952                           ;save.c: 205: }
  6953  0353  2C05               	goto	l5694
  6954  0354                     l5684:	
  6955                           
  6956                           ;save.c: 206: else
  6957                           ;save.c: 207: {
  6958                           ;save.c: 208: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6959  0354  0022               	movlb	2	; select bank2
  6960  0355  0861               	movf	_rtc_tm^(0+256),w
  6961  0356  0020               	movlb	0	; select bank0
  6962  0357  00B8               	movwf	??_Calculate_Time
  6963  0358  01B9               	clrf	??_Calculate_Time+1
  6964  0359  0022               	movlb	2	; select bank2
  6965  035A  0863               	movf	(_rtc_tm^(0+256)+2),w
  6966  035B  0020               	movlb	0	; select bank0
  6967  035C  00BA               	movwf	??_Calculate_Time+2
  6968  035D  01BB               	clrf	??_Calculate_Time+3
  6969  035E  083A               	movf	??_Calculate_Time+2,w
  6970  035F  00A1               	movwf	___wmul@multiplier
  6971  0360  083B               	movf	??_Calculate_Time+3,w
  6972  0361  00A2               	movwf	___wmul@multiplier+1
  6973  0362  3010               	movlw	16
  6974  0363  00A3               	movwf	___wmul@multiplicand
  6975  0364  300E               	movlw	14
  6976  0365  00A4               	movwf	___wmul@multiplicand+1
  6977  0366  3194  2456  3182   	fcall	___wmul
  6978  0369  0020               	movlb	0	; select bank0
  6979  036A  0821               	movf	?___wmul,w
  6980  036B  00BC               	movwf	??_Calculate_Time+4
  6981  036C  0822               	movf	?___wmul+1,w
  6982  036D  00BD               	movwf	??_Calculate_Time+5
  6983  036E  0022               	movlb	2	; select bank2
  6984  036F  0862               	movf	(_rtc_tm^(0+256)+1),w
  6985  0370  0020               	movlb	0	; select bank0
  6986  0371  00BE               	movwf	??_Calculate_Time+6
  6987  0372  01BF               	clrf	??_Calculate_Time+7
  6988  0373  083E               	movf	??_Calculate_Time+6,w
  6989  0374  00A1               	movwf	___wmul@multiplier
  6990  0375  083F               	movf	??_Calculate_Time+7,w
  6991  0376  00A2               	movwf	___wmul@multiplier+1
  6992  0377  303C               	movlw	60
  6993  0378  00A3               	movwf	___wmul@multiplicand
  6994  0379  3000               	movlw	0
  6995  037A  00A4               	movwf	___wmul@multiplicand+1
  6996  037B  3194  2456  3182   	fcall	___wmul
  6997  037E  0020               	movlb	0	; select bank0
  6998  037F  0821               	movf	?___wmul,w
  6999  0380  073C               	addwf	??_Calculate_Time+4,w
  7000  0381  00C0               	movwf	??_Calculate_Time+8
  7001  0382  0822               	movf	?___wmul+1,w
  7002  0383  3D3D               	addwfc	??_Calculate_Time+5,w
  7003  0384  00C1               	movwf	??_Calculate_Time+9
  7004  0385  0838               	movf	??_Calculate_Time,w
  7005  0386  0740               	addwf	??_Calculate_Time+8,w
  7006  0387  00C6               	movwf	Calculate_Time@temp1
  7007  0388  0839               	movf	??_Calculate_Time+1,w
  7008  0389  3D41               	addwfc	??_Calculate_Time+9,w
  7009  038A  00C7               	movwf	Calculate_Time@temp1+1
  7010  038B  01C8               	clrf	Calculate_Time@temp1+2
  7011  038C  1BC7               	btfsc	Calculate_Time@temp1+1,7
  7012  038D  03C8               	decf	Calculate_Time@temp1+2,f
  7013  038E  0848               	movf	Calculate_Time@temp1+2,w
  7014  038F  00C9               	movwf	Calculate_Time@temp1+3
  7015                           
  7016                           ;save.c: 209: temp2 = rtc_save_ch2.hours*3600+rtc_save_ch2.minutes*60+rtc_save_ch2.secon
      +                          ds;
  7017  0390  0022               	movlb	2	; select bank2
  7018  0391  085A               	movf	_rtc_save_ch2^(0+256),w
  7019  0392  0020               	movlb	0	; select bank0
  7020  0393  00B8               	movwf	??_Calculate_Time
  7021  0394  01B9               	clrf	??_Calculate_Time+1
  7022  0395  0022               	movlb	2	; select bank2
  7023  0396  085C               	movf	(_rtc_save_ch2^(0+256)+2),w
  7024  0397  0020               	movlb	0	; select bank0
  7025  0398  00BA               	movwf	??_Calculate_Time+2
  7026  0399  01BB               	clrf	??_Calculate_Time+3
  7027  039A  083A               	movf	??_Calculate_Time+2,w
  7028  039B  00A1               	movwf	___wmul@multiplier
  7029  039C  083B               	movf	??_Calculate_Time+3,w
  7030  039D  00A2               	movwf	___wmul@multiplier+1
  7031  039E  3010               	movlw	16
  7032  039F  00A3               	movwf	___wmul@multiplicand
  7033  03A0  300E               	movlw	14
  7034  03A1  00A4               	movwf	___wmul@multiplicand+1
  7035  03A2  3194  2456  3182   	fcall	___wmul
  7036  03A5  0020               	movlb	0	; select bank0
  7037  03A6  0821               	movf	?___wmul,w
  7038  03A7  00BC               	movwf	??_Calculate_Time+4
  7039  03A8  0822               	movf	?___wmul+1,w
  7040  03A9  00BD               	movwf	??_Calculate_Time+5
  7041  03AA  0022               	movlb	2	; select bank2
  7042  03AB  085B               	movf	(_rtc_save_ch2^(0+256)+1),w
  7043  03AC  0020               	movlb	0	; select bank0
  7044  03AD  00BE               	movwf	??_Calculate_Time+6
  7045  03AE  01BF               	clrf	??_Calculate_Time+7
  7046  03AF  083E               	movf	??_Calculate_Time+6,w
  7047  03B0  00A1               	movwf	___wmul@multiplier
  7048  03B1  083F               	movf	??_Calculate_Time+7,w
  7049  03B2  00A2               	movwf	___wmul@multiplier+1
  7050  03B3  303C               	movlw	60
  7051  03B4  00A3               	movwf	___wmul@multiplicand
  7052  03B5  3000               	movlw	0
  7053  03B6  00A4               	movwf	___wmul@multiplicand+1
  7054  03B7  3194  2456  3182   	fcall	___wmul
  7055  03BA  0020               	movlb	0	; select bank0
  7056  03BB  0821               	movf	?___wmul,w
  7057  03BC  073C               	addwf	??_Calculate_Time+4,w
  7058  03BD  00C0               	movwf	??_Calculate_Time+8
  7059  03BE  0822               	movf	?___wmul+1,w
  7060  03BF  3D3D               	addwfc	??_Calculate_Time+5,w
  7061  03C0  00C1               	movwf	??_Calculate_Time+9
  7062  03C1  0838               	movf	??_Calculate_Time,w
  7063  03C2  0740               	addwf	??_Calculate_Time+8,w
  7064  03C3  00CA               	movwf	Calculate_Time@temp2
  7065  03C4  0839               	movf	??_Calculate_Time+1,w
  7066  03C5  3D41               	addwfc	??_Calculate_Time+9,w
  7067  03C6  00CB               	movwf	Calculate_Time@temp2+1
  7068  03C7  01CC               	clrf	Calculate_Time@temp2+2
  7069  03C8  1BCB               	btfsc	Calculate_Time@temp2+1,7
  7070  03C9  03CC               	decf	Calculate_Time@temp2+2,f
  7071  03CA  084C               	movf	Calculate_Time@temp2+2,w
  7072  03CB  00CD               	movwf	Calculate_Time@temp2+3
  7073                           
  7074                           ;save.c: 210: temp = temp1 - temp2;
  7075  03CC  0846               	movf	Calculate_Time@temp1,w
  7076  03CD  00B8               	movwf	??_Calculate_Time
  7077  03CE  0847               	movf	Calculate_Time@temp1+1,w
  7078  03CF  00B9               	movwf	??_Calculate_Time+1
  7079  03D0  0848               	movf	Calculate_Time@temp1+2,w
  7080  03D1  00BA               	movwf	??_Calculate_Time+2
  7081  03D2  0849               	movf	Calculate_Time@temp1+3,w
  7082  03D3  00BB               	movwf	??_Calculate_Time+3
  7083  03D4  094A               	comf	Calculate_Time@temp2,w
  7084  03D5  00BC               	movwf	??_Calculate_Time+4
  7085  03D6  094B               	comf	Calculate_Time@temp2+1,w
  7086  03D7  00BD               	movwf	??_Calculate_Time+5
  7087  03D8  094C               	comf	Calculate_Time@temp2+2,w
  7088  03D9  00BE               	movwf	??_Calculate_Time+6
  7089  03DA  094D               	comf	Calculate_Time@temp2+3,w
  7090  03DB  00BF               	movwf	??_Calculate_Time+7
  7091  03DC  0ABC               	incf	??_Calculate_Time+4,f
  7092  03DD  1903               	skipnz
  7093  03DE  0ABD               	incf	??_Calculate_Time+5,f
  7094  03DF  1903               	skipnz
  7095  03E0  0ABE               	incf	??_Calculate_Time+6,f
  7096  03E1  1903               	skipnz
  7097  03E2  0ABF               	incf	??_Calculate_Time+7,f
  7098  03E3  083C               	movf	??_Calculate_Time+4,w
  7099  03E4  07B8               	addwf	??_Calculate_Time,f
  7100  03E5  083D               	movf	??_Calculate_Time+5,w
  7101  03E6  3DB9               	addwfc	??_Calculate_Time+1,f
  7102  03E7  083E               	movf	??_Calculate_Time+6,w
  7103  03E8  3DBA               	addwfc	??_Calculate_Time+2,f
  7104  03E9  083F               	movf	??_Calculate_Time+7,w
  7105  03EA  3DBB               	addwfc	??_Calculate_Time+3,f
  7106  03EB  083B               	movf	??_Calculate_Time+3,w
  7107  03EC  00C5               	movwf	Calculate_Time@temp+3
  7108  03ED  083A               	movf	??_Calculate_Time+2,w
  7109  03EE  00C4               	movwf	Calculate_Time@temp+2
  7110  03EF  0839               	movf	??_Calculate_Time+1,w
  7111  03F0  00C3               	movwf	Calculate_Time@temp+1
  7112  03F1  0838               	movf	??_Calculate_Time,w
  7113  03F2  00C2               	movwf	Calculate_Time@temp
  7114                           
  7115                           ;save.c: 211: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7116  03F3  305A               	movlw	low (_rtc_save_ch2| (0+256))
  7117  03F4  0086               	movwf	6
  7118  03F5  3001               	movlw	1	; select bank2/3
  7119  03F6  0087               	movwf	7
  7120  03F7  3061               	movlw	low (_rtc_tm| (0+256))
  7121  03F8  0084               	movwf	4
  7122  03F9  3001               	movlw	1	; select bank2/3
  7123  03FA  0085               	movwf	5
  7124  03FB  3007               	movlw	7
  7125  03FC  0020               	movlb	0	; select bank0
  7126  03FD  00B8               	movwf	??_Calculate_Time
  7127  03FE                     u501m0:	
  7128  03FE  0012               	moviw fsr0++
  7129  03FF  001E               	movwi fsr1++
  7130  0400  0BB8               	decfsz	??_Calculate_Time,f
  7131  0401  2BFE               	goto	u501m0
  7132                           
  7133                           ;save.c: 212: return temp;
  7134  0402  0020               	movlb	0	; select bank0
  7135  0403  0842               	movf	Calculate_Time@temp,w
  7136  0404  0008               	return
  7137  0405                     l5694:	
  7138                           
  7139                           ;save.c: 213: }
  7140                           ;save.c: 214: }
  7141                           ;save.c: 215: return 0;
  7142  0405  3000               	movlw	0
  7143  0406  0008               	return
  7144  0407                     __end_of_Calculate_Time:	
  7145                           
  7146                           	psect	text19
  7147  1456                     __ptext19:	
  7148 ;; *************** function ___wmul *****************
  7149 ;; Defined at:
  7150 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  multiplier      2    1[BANK0 ] unsigned int 
  7153 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  product         2    5[BANK0 ] unsigned int 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  2    1[BANK0 ] unsigned int 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7165 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;Total ram usage:        6 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    3
  7172 ;; This function calls:
  7173 ;;		Nothing
  7174 ;; This function is called by:
  7175 ;;		_Calculate_Time
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           
  7180                           ;psect for function ___wmul
  7181  1456                     ___wmul:	
  7182                           
  7183                           ;incstack = 0
  7184                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7185  1456  0020               	movlb	0	; select bank0
  7186  1457  01A5               	clrf	___wmul@product
  7187  1458  01A6               	clrf	___wmul@product+1
  7188  1459                     l5576:	
  7189  1459  1C21               	btfss	___wmul@multiplier,0
  7190  145A  2C5F               	goto	l1306
  7191  145B  0823               	movf	___wmul@multiplicand,w
  7192  145C  07A5               	addwf	___wmul@product,f
  7193  145D  0824               	movf	___wmul@multiplicand+1,w
  7194  145E  3DA6               	addwfc	___wmul@product+1,f
  7195  145F                     l1306:	
  7196  145F  3001               	movlw	1
  7197  1460                     u4865:	
  7198  1460  35A3               	lslf	___wmul@multiplicand,f
  7199  1461  0DA4               	rlf	___wmul@multiplicand+1,f
  7200  1462  0B89               	decfsz	9,f
  7201  1463  2C60               	goto	u4865
  7202  1464  3001               	movlw	1
  7203  1465                     u4875:	
  7204  1465  36A2               	lsrf	___wmul@multiplier+1,f
  7205  1466  0CA1               	rrf	___wmul@multiplier,f
  7206  1467  0B89               	decfsz	9,f
  7207  1468  2C65               	goto	u4875
  7208  1469  0821               	movf	___wmul@multiplier,w
  7209  146A  0422               	iorwf	___wmul@multiplier+1,w
  7210  146B  1D03               	btfss	3,2
  7211  146C  2C59               	goto	l5576
  7212  146D  0826               	movf	___wmul@product+1,w
  7213  146E  00A2               	movwf	?___wmul+1
  7214  146F  0825               	movf	___wmul@product,w
  7215  1470  00A1               	movwf	?___wmul
  7216  1471  0008               	return
  7217  1472                     __end_of___wmul:	
  7218                           
  7219                           	psect	text20
  7220  081B                     __ptext20:	
  7221 ;; *************** function _Write_Flash_head *****************
  7222 ;; Defined at:
  7223 ;;		line 92 in file "mcc_generated_files/save.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;		None
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;		None
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      void 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0, pclath, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;Total ram usage:        0 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    4
  7244 ;; This function calls:
  7245 ;;		_FLASH_WriteWord
  7246 ;; This function is called by:
  7247 ;;		_Key_Process
  7248 ;;		_Calculate_Time
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           
  7253                           ;psect for function _Write_Flash_head
  7254  081B                     _Write_Flash_head:	
  7255                           
  7256                           ;save.c: 94: FLASH_WriteWord(Cur_Save_Index, 0xAAAA);
  7257                           
  7258                           ;incstack = 0
  7259                           ; Regs used in _Write_Flash_head: [wreg+status,2+status,0+pclath+cstack]
  7260  081B  0020               	movlb	0	; select bank0
  7261  081C  0866               	movf	_Cur_Save_Index+1,w
  7262  081D  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7263  081E  0865               	movf	_Cur_Save_Index,w
  7264  081F  00A1               	movwf	FLASH_WriteWord@flashAddr
  7265  0820  30AA               	movlw	170
  7266  0821  00A3               	movwf	FLASH_WriteWord@word
  7267  0822  30AA               	movlw	170
  7268  0823  00A4               	movwf	FLASH_WriteWord@word+1
  7269  0824  3196  264D  3188   	fcall	_FLASH_WriteWord
  7270                           
  7271                           ;save.c: 95: if(Cur_Save_Index == 16384 ) Cur_Save_Index = 0x2000 ;
  7272  0827  3040               	movlw	64
  7273  0828  0020               	movlb	0	; select bank0
  7274  0829  0666               	xorwf	_Cur_Save_Index+1,w
  7275  082A  0465               	iorwf	_Cur_Save_Index,w
  7276  082B  1D03               	btfss	3,2
  7277  082C  2832               	goto	l5544
  7278  082D  3000               	movlw	0
  7279  082E  00E5               	movwf	_Cur_Save_Index
  7280  082F  3020               	movlw	32
  7281  0830  00E6               	movwf	_Cur_Save_Index+1
  7282  0831  2836               	goto	l5546
  7283  0832                     l5544:	
  7284                           
  7285                           ;save.c: 96: else Cur_Save_Index++;
  7286  0832  3001               	movlw	1
  7287  0833  07E5               	addwf	_Cur_Save_Index,f
  7288  0834  3000               	movlw	0
  7289  0835  3DE6               	addwfc	_Cur_Save_Index+1,f
  7290  0836                     l5546:	
  7291                           
  7292                           ;save.c: 97: FLASH_WriteWord(Cur_Save_Index, 0xAAAA);
  7293  0836  0866               	movf	_Cur_Save_Index+1,w
  7294  0837  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7295  0838  0865               	movf	_Cur_Save_Index,w
  7296  0839  00A1               	movwf	FLASH_WriteWord@flashAddr
  7297  083A  30AA               	movlw	170
  7298  083B  00A3               	movwf	FLASH_WriteWord@word
  7299  083C  30AA               	movlw	170
  7300  083D  00A4               	movwf	FLASH_WriteWord@word+1
  7301  083E  3196  264D  3188   	fcall	_FLASH_WriteWord
  7302                           
  7303                           ;save.c: 98: if(Cur_Save_Index == 16384 ) Cur_Save_Index = 0x2000 ;
  7304  0841  3040               	movlw	64
  7305  0842  0020               	movlb	0	; select bank0
  7306  0843  0666               	xorwf	_Cur_Save_Index+1,w
  7307  0844  0465               	iorwf	_Cur_Save_Index,w
  7308  0845  1D03               	btfss	3,2
  7309  0846  284C               	goto	l5552
  7310  0847  3000               	movlw	0
  7311  0848  00E5               	movwf	_Cur_Save_Index
  7312  0849  3020               	movlw	32
  7313  084A  00E6               	movwf	_Cur_Save_Index+1
  7314  084B  0008               	return
  7315  084C                     l5552:	
  7316                           
  7317                           ;save.c: 99: else Cur_Save_Index++;
  7318  084C  3001               	movlw	1
  7319  084D  07E5               	addwf	_Cur_Save_Index,f
  7320  084E  3000               	movlw	0
  7321  084F  3DE6               	addwfc	_Cur_Save_Index+1,f
  7322  0850  0008               	return
  7323  0851                     __end_of_Write_Flash_head:	
  7324                           
  7325                           	psect	text21
  7326  17CA                     __ptext21:	
  7327 ;; *************** function _Write_Flash_finish *****************
  7328 ;; Defined at:
  7329 ;;		line 108 in file "mcc_generated_files/save.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;		None
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;		None
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  1    wreg      void 
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0, pclath, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;Total ram usage:        0 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    4
  7350 ;; This function calls:
  7351 ;;		_FLASH_WriteWord
  7352 ;; This function is called by:
  7353 ;;		_main
  7354 ;;		_Key_Process
  7355 ;;		_Serach_Flash_Head
  7356 ;;		_Calculate_Time
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _Write_Flash_finish
  7362  17CA                     _Write_Flash_finish:	
  7363                           
  7364                           ;save.c: 110: FLASH_WriteWord(Cur_Save_Index, 0x5555);
  7365                           
  7366                           ;incstack = 0
  7367                           ; Regs used in _Write_Flash_finish: [wreg+status,2+status,0+pclath+cstack]
  7368  17CA  0020               	movlb	0	; select bank0
  7369  17CB  0866               	movf	_Cur_Save_Index+1,w
  7370  17CC  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7371  17CD  0865               	movf	_Cur_Save_Index,w
  7372  17CE  00A1               	movwf	FLASH_WriteWord@flashAddr
  7373  17CF  3055               	movlw	85
  7374  17D0  00A3               	movwf	FLASH_WriteWord@word
  7375  17D1  3055               	movlw	85
  7376  17D2  00A4               	movwf	FLASH_WriteWord@word+1
  7377  17D3  3196  264D  3197   	fcall	_FLASH_WriteWord
  7378                           
  7379                           ;save.c: 111: if(Cur_Save_Index == 16384 ) Cur_Save_Index = 0x2000 ;
  7380  17D6  3040               	movlw	64
  7381  17D7  0020               	movlb	0	; select bank0
  7382  17D8  0666               	xorwf	_Cur_Save_Index+1,w
  7383  17D9  0465               	iorwf	_Cur_Save_Index,w
  7384  17DA  1D03               	btfss	3,2
  7385  17DB  2FE1               	goto	l5504
  7386  17DC  3000               	movlw	0
  7387  17DD  00E5               	movwf	_Cur_Save_Index
  7388  17DE  3020               	movlw	32
  7389  17DF  00E6               	movwf	_Cur_Save_Index+1
  7390  17E0  2FE5               	goto	l5506
  7391  17E1                     l5504:	
  7392                           
  7393                           ;save.c: 112: else Cur_Save_Index++;
  7394  17E1  3001               	movlw	1
  7395  17E2  07E5               	addwf	_Cur_Save_Index,f
  7396  17E3  3000               	movlw	0
  7397  17E4  3DE6               	addwfc	_Cur_Save_Index+1,f
  7398  17E5                     l5506:	
  7399                           
  7400                           ;save.c: 113: FLASH_WriteWord(Cur_Save_Index, 0x5555);
  7401  17E5  0866               	movf	_Cur_Save_Index+1,w
  7402  17E6  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7403  17E7  0865               	movf	_Cur_Save_Index,w
  7404  17E8  00A1               	movwf	FLASH_WriteWord@flashAddr
  7405  17E9  3055               	movlw	85
  7406  17EA  00A3               	movwf	FLASH_WriteWord@word
  7407  17EB  3055               	movlw	85
  7408  17EC  00A4               	movwf	FLASH_WriteWord@word+1
  7409  17ED  3196  264D  3197   	fcall	_FLASH_WriteWord
  7410                           
  7411                           ;save.c: 114: if(Cur_Save_Index == 16384 ) Cur_Save_Index = 0x2000 ;
  7412  17F0  3040               	movlw	64
  7413  17F1  0020               	movlb	0	; select bank0
  7414  17F2  0666               	xorwf	_Cur_Save_Index+1,w
  7415  17F3  0465               	iorwf	_Cur_Save_Index,w
  7416  17F4  1D03               	btfss	3,2
  7417  17F5  2FFB               	goto	l5512
  7418  17F6  3000               	movlw	0
  7419  17F7  00E5               	movwf	_Cur_Save_Index
  7420  17F8  3020               	movlw	32
  7421  17F9  00E6               	movwf	_Cur_Save_Index+1
  7422  17FA  0008               	return
  7423  17FB                     l5512:	
  7424                           
  7425                           ;save.c: 115: else Cur_Save_Index++;
  7426  17FB  3001               	movlw	1
  7427  17FC  07E5               	addwf	_Cur_Save_Index,f
  7428  17FD  3000               	movlw	0
  7429  17FE  3DE6               	addwfc	_Cur_Save_Index+1,f
  7430  17FF  0008               	return
  7431  1800                     __end_of_Write_Flash_finish:	
  7432                           
  7433                           	psect	text22
  7434  0CD7                     __ptext22:	
  7435 ;; *************** function _Save_Write_time *****************
  7436 ;; Defined at:
  7437 ;;		line 260 in file "mcc_generated_files/save.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  i               1    0        unsigned char 
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  1    wreg      void 
  7444 ;; Registers used:
  7445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;Total ram usage:        2 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    6
  7458 ;; This function calls:
  7459 ;;		_Bq32k_Rtc_Read_Time
  7460 ;;		_Save_Write_word
  7461 ;; This function is called by:
  7462 ;;		_Key_Process
  7463 ;;		_Calculate_Time
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function _Save_Write_time
  7469  0CD7                     _Save_Write_time:	
  7470                           
  7471                           ;save.c: 262: unsigned char i;
  7472                           ;save.c: 263: Bq32k_Rtc_Read_Time(&rtc_tm);
  7473                           
  7474                           ;incstack = 0
  7475                           ; Regs used in _Save_Write_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7476  0CD7  3061               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
  7477  0CD8  318B  23F8  318C   	fcall	_Bq32k_Rtc_Read_Time
  7478                           
  7479                           ;save.c: 264: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  7480  0CDB  3053               	movlw	low (_rtc_save_ch1| (0+256))
  7481  0CDC  0086               	movwf	6
  7482  0CDD  3001               	movlw	1	; select bank2/3
  7483  0CDE  0087               	movwf	7
  7484  0CDF  3061               	movlw	low (_rtc_tm| (0+256))
  7485  0CE0  0084               	movwf	4
  7486  0CE1  3001               	movlw	1	; select bank2/3
  7487  0CE2  0085               	movwf	5
  7488  0CE3  3007               	movlw	7
  7489  0CE4  0020               	movlb	0	; select bank0
  7490  0CE5  00B6               	movwf	??_Save_Write_time
  7491  0CE6                     u483m0:	
  7492  0CE6  0012               	moviw fsr0++
  7493  0CE7  001E               	movwi fsr1++
  7494  0CE8  0BB6               	decfsz	??_Save_Write_time,f
  7495  0CE9  2CE6               	goto	u483m0
  7496                           
  7497                           ;save.c: 265: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7498  0CEA  305A               	movlw	low (_rtc_save_ch2| (0+256))
  7499  0CEB  0086               	movwf	6
  7500  0CEC  3001               	movlw	1	; select bank2/3
  7501  0CED  0087               	movwf	7
  7502  0CEE  3061               	movlw	low (_rtc_tm| (0+256))
  7503  0CEF  0084               	movwf	4
  7504  0CF0  3001               	movlw	1	; select bank2/3
  7505  0CF1  0085               	movwf	5
  7506  0CF2  3007               	movlw	7
  7507  0CF3  0020               	movlb	0	; select bank0
  7508  0CF4  00B6               	movwf	??_Save_Write_time
  7509  0CF5                     u484m0:	
  7510  0CF5  0012               	moviw fsr0++
  7511  0CF6  001E               	movwi fsr1++
  7512  0CF7  0BB6               	decfsz	??_Save_Write_time,f
  7513  0CF8  2CF5               	goto	u484m0
  7514                           
  7515                           ;save.c: 266: Save_Write_word( rtc_tm.years);
  7516  0CF9  0022               	movlb	2	; select bank2
  7517  0CFA  0867               	movf	(_rtc_tm^(0+256)+6),w
  7518  0CFB  0020               	movlb	0	; select bank0
  7519  0CFC  00B6               	movwf	??_Save_Write_time
  7520  0CFD  01B7               	clrf	??_Save_Write_time+1
  7521  0CFE  0836               	movf	??_Save_Write_time,w
  7522  0CFF  00A6               	movwf	Save_Write_word@data
  7523  0D00  0837               	movf	??_Save_Write_time+1,w
  7524  0D01  00A7               	movwf	Save_Write_word@data+1
  7525  0D02  318E  263F  318C   	fcall	_Save_Write_word
  7526                           
  7527                           ;save.c: 267: Save_Write_word( rtc_tm.month);
  7528  0D05  0022               	movlb	2	; select bank2
  7529  0D06  0866               	movf	(_rtc_tm^(0+256)+5),w
  7530  0D07  0020               	movlb	0	; select bank0
  7531  0D08  00B6               	movwf	??_Save_Write_time
  7532  0D09  01B7               	clrf	??_Save_Write_time+1
  7533  0D0A  0836               	movf	??_Save_Write_time,w
  7534  0D0B  00A6               	movwf	Save_Write_word@data
  7535  0D0C  0837               	movf	??_Save_Write_time+1,w
  7536  0D0D  00A7               	movwf	Save_Write_word@data+1
  7537  0D0E  318E  263F  318C   	fcall	_Save_Write_word
  7538                           
  7539                           ;save.c: 268: Save_Write_word( rtc_tm.date);
  7540  0D11  0022               	movlb	2	; select bank2
  7541  0D12  0865               	movf	(_rtc_tm^(0+256)+4),w
  7542  0D13  0020               	movlb	0	; select bank0
  7543  0D14  00B6               	movwf	??_Save_Write_time
  7544  0D15  01B7               	clrf	??_Save_Write_time+1
  7545  0D16  0836               	movf	??_Save_Write_time,w
  7546  0D17  00A6               	movwf	Save_Write_word@data
  7547  0D18  0837               	movf	??_Save_Write_time+1,w
  7548  0D19  00A7               	movwf	Save_Write_word@data+1
  7549  0D1A  318E  263F  318C   	fcall	_Save_Write_word
  7550                           
  7551                           ;save.c: 269: Save_Write_word( rtc_tm.hours);
  7552  0D1D  0022               	movlb	2	; select bank2
  7553  0D1E  0863               	movf	(_rtc_tm^(0+256)+2),w
  7554  0D1F  0020               	movlb	0	; select bank0
  7555  0D20  00B6               	movwf	??_Save_Write_time
  7556  0D21  01B7               	clrf	??_Save_Write_time+1
  7557  0D22  0836               	movf	??_Save_Write_time,w
  7558  0D23  00A6               	movwf	Save_Write_word@data
  7559  0D24  0837               	movf	??_Save_Write_time+1,w
  7560  0D25  00A7               	movwf	Save_Write_word@data+1
  7561  0D26  318E  263F  318C   	fcall	_Save_Write_word
  7562                           
  7563                           ;save.c: 270: Save_Write_word( rtc_tm.minutes);
  7564  0D29  0022               	movlb	2	; select bank2
  7565  0D2A  0862               	movf	(_rtc_tm^(0+256)+1),w
  7566  0D2B  0020               	movlb	0	; select bank0
  7567  0D2C  00B6               	movwf	??_Save_Write_time
  7568  0D2D  01B7               	clrf	??_Save_Write_time+1
  7569  0D2E  0836               	movf	??_Save_Write_time,w
  7570  0D2F  00A6               	movwf	Save_Write_word@data
  7571  0D30  0837               	movf	??_Save_Write_time+1,w
  7572  0D31  00A7               	movwf	Save_Write_word@data+1
  7573  0D32  318E  263F  318C   	fcall	_Save_Write_word
  7574                           
  7575                           ;save.c: 271: Save_Write_word( rtc_tm.seconds);
  7576  0D35  0022               	movlb	2	; select bank2
  7577  0D36  0861               	movf	_rtc_tm^(0+256),w
  7578  0D37  0020               	movlb	0	; select bank0
  7579  0D38  00B6               	movwf	??_Save_Write_time
  7580  0D39  01B7               	clrf	??_Save_Write_time+1
  7581  0D3A  0836               	movf	??_Save_Write_time,w
  7582  0D3B  00A6               	movwf	Save_Write_word@data
  7583  0D3C  0837               	movf	??_Save_Write_time+1,w
  7584  0D3D  00A7               	movwf	Save_Write_word@data+1
  7585  0D3E  318E  263F  318C   	fcall	_Save_Write_word
  7586                           
  7587                           ;save.c: 272: Save_Write_word( rtc_tm.wday);
  7588  0D41  0022               	movlb	2	; select bank2
  7589  0D42  0864               	movf	(_rtc_tm^(0+256)+3),w
  7590  0D43  0020               	movlb	0	; select bank0
  7591  0D44  00B6               	movwf	??_Save_Write_time
  7592  0D45  01B7               	clrf	??_Save_Write_time+1
  7593  0D46  0836               	movf	??_Save_Write_time,w
  7594  0D47  00A6               	movwf	Save_Write_word@data
  7595  0D48  0837               	movf	??_Save_Write_time+1,w
  7596  0D49  00A7               	movwf	Save_Write_word@data+1
  7597  0D4A  318E  263F         	fcall	_Save_Write_word
  7598  0D4C  0008               	return
  7599  0D4D                     __end_of_Save_Write_time:	
  7600                           
  7601                           	psect	text23
  7602  0E3F                     __ptext23:	
  7603 ;; *************** function _Save_Write_word *****************
  7604 ;; Defined at:
  7605 ;;		line 224 in file "mcc_generated_files/save.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  data            2    6[BANK0 ] unsigned int 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;		None
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      void 
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0, pclath, cstack
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7619 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;Total ram usage:        6 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    4
  7626 ;; This function calls:
  7627 ;;		_FLASH_EraseBlock
  7628 ;;		_FLASH_WriteWord
  7629 ;; This function is called by:
  7630 ;;		_tc_temperature_trans
  7631 ;;		_Save_process
  7632 ;;		_Save_Write_time
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           
  7637                           ;psect for function _Save_Write_word
  7638  0E3F                     _Save_Write_word:	
  7639                           
  7640                           ;save.c: 226: if(Cur_Save_Index % 32 == 0)
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in _Save_Write_word: [wreg+status,2+status,0+pclath+cstack]
  7644  0E3F  301F               	movlw	31
  7645  0E40  0020               	movlb	0	; select bank0
  7646  0E41  0565               	andwf	_Cur_Save_Index,w
  7647  0E42  00A8               	movwf	??_Save_Write_word
  7648  0E43  3000               	movlw	0
  7649  0E44  0566               	andwf	_Cur_Save_Index+1,w
  7650  0E45  00A9               	movwf	??_Save_Write_word+1
  7651  0E46  0828               	movf	??_Save_Write_word,w
  7652  0E47  0429               	iorwf	??_Save_Write_word+1,w
  7653  0E48  1D03               	btfss	3,2
  7654  0E49  2E95               	goto	l5476
  7655                           
  7656                           ;save.c: 227: {
  7657                           ;save.c: 228: if(Cur_Save_Index == 16384 - 32)
  7658  0E4A  30E0               	movlw	224
  7659  0E4B  0665               	xorwf	_Cur_Save_Index,w
  7660  0E4C  303F               	movlw	63
  7661  0E4D  1903               	skipnz
  7662  0E4E  0666               	xorwf	_Cur_Save_Index+1,w
  7663  0E4F  1D03               	btfss	3,2
  7664  0E50  2E66               	goto	l5470
  7665                           
  7666                           ;save.c: 229: {
  7667                           ;save.c: 230: if( (Cur_Save_Index_Bak - 0x2000 >32) )
  7668  0E51  0022               	movlb	2	; select bank2
  7669  0E52  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  7670  0E53  3E00               	addlw	0
  7671  0E54  0020               	movlb	0	; select bank0
  7672  0E55  00A8               	movwf	??_Save_Write_word
  7673  0E56  30E0               	movlw	224
  7674  0E57  0022               	movlb	2	; select bank2
  7675  0E58  3D2F               	addwfc	(_Cur_Save_Index_Bak+1)^(0+256),w
  7676  0E59  0020               	movlb	0	; select bank0
  7677  0E5A  00A9               	movwf	??_Save_Write_word+1
  7678  0E5B  3000               	movlw	0
  7679  0E5C  0229               	subwf	??_Save_Write_word+1,w
  7680  0E5D  3021               	movlw	33
  7681  0E5E  1903               	skipnz
  7682  0E5F  0228               	subwf	??_Save_Write_word,w
  7683  0E60  1C03               	skipc
  7684  0E61  2E95               	goto	l5476
  7685                           
  7686                           ;save.c: 231: {
  7687                           ;save.c: 232: FLASH_EraseBlock(0x2000);
  7688  0E62  3000               	movlw	0
  7689  0E63  00A1               	movwf	FLASH_EraseBlock@startAddr
  7690  0E64  3020               	movlw	32
  7691  0E65  2E91               	goto	L10
  7692  0E66                     l5470:	
  7693                           ;save.c: 233: }
  7694                           ;save.c: 234: }
  7695                           
  7696                           
  7697                           ;save.c: 235: else
  7698                           ;save.c: 236: {
  7699                           ;save.c: 237: if( (Cur_Save_Index_Bak < Cur_Save_Index) ||(Cur_Save_Index_Bak - Cur_Save
      +                          _Index > 64) )
  7700  0E66  0020               	movlb	0	; select bank0
  7701  0E67  0866               	movf	_Cur_Save_Index+1,w
  7702  0E68  0022               	movlb	2	; select bank2
  7703  0E69  022F               	subwf	(_Cur_Save_Index_Bak+1)^(0+256),w
  7704  0E6A  1D03               	skipz
  7705  0E6B  2E70               	goto	u4705
  7706  0E6C  0020               	movlb	0	; select bank0
  7707  0E6D  0865               	movf	_Cur_Save_Index,w
  7708  0E6E  0022               	movlb	2	; select bank2
  7709  0E6F  022E               	subwf	_Cur_Save_Index_Bak^(0+256),w
  7710  0E70                     u4705:	
  7711  0E70  1C03               	skipc
  7712  0E71  2E8B               	goto	l5474
  7713  0E72  0020               	movlb	0	; select bank0
  7714  0E73  0965               	comf	_Cur_Save_Index,w
  7715  0E74  00A8               	movwf	??_Save_Write_word
  7716  0E75  0966               	comf	_Cur_Save_Index+1,w
  7717  0E76  00A9               	movwf	??_Save_Write_word+1
  7718  0E77  0AA8               	incf	??_Save_Write_word,f
  7719  0E78  1903               	skipnz
  7720  0E79  0AA9               	incf	??_Save_Write_word+1,f
  7721  0E7A  0022               	movlb	2	; select bank2
  7722  0E7B  082E               	movf	_Cur_Save_Index_Bak^(0+256),w
  7723  0E7C  0020               	movlb	0	; select bank0
  7724  0E7D  0728               	addwf	??_Save_Write_word,w
  7725  0E7E  00AA               	movwf	??_Save_Write_word+2
  7726  0E7F  0022               	movlb	2	; select bank2
  7727  0E80  082F               	movf	(_Cur_Save_Index_Bak+1)^(0+256),w
  7728  0E81  0020               	movlb	0	; select bank0
  7729  0E82  3D29               	addwfc	??_Save_Write_word+1,w
  7730  0E83  00AB               	movwf	??_Save_Write_word+3
  7731  0E84  3000               	movlw	0
  7732  0E85  022B               	subwf	??_Save_Write_word+3,w
  7733  0E86  3041               	movlw	65
  7734  0E87  1903               	skipnz
  7735  0E88  022A               	subwf	??_Save_Write_word+2,w
  7736  0E89  1C03               	skipc
  7737  0E8A  2E95               	goto	l5476
  7738  0E8B                     l5474:	
  7739                           
  7740                           ;save.c: 238: {
  7741                           ;save.c: 239: FLASH_EraseBlock(Cur_Save_Index+32);
  7742  0E8B  0020               	movlb	0	; select bank0
  7743  0E8C  0865               	movf	_Cur_Save_Index,w
  7744  0E8D  3E20               	addlw	32
  7745  0E8E  00A1               	movwf	FLASH_EraseBlock@startAddr
  7746  0E8F  3000               	movlw	0
  7747  0E90  3D66               	addwfc	_Cur_Save_Index+1,w
  7748  0E91                     L10:	
  7749  0E91  00A2               	movwf	FLASH_EraseBlock@startAddr+1
  7750  0E92  3195  2583  318E   	fcall	_FLASH_EraseBlock
  7751  0E95                     l5476:	
  7752                           
  7753                           ;save.c: 240: }
  7754                           ;save.c: 241: }
  7755                           ;save.c: 242: }
  7756                           ;save.c: 243: if( (data & 0x3fff) == 0x3fff)
  7757  0E95  30FF               	movlw	255
  7758  0E96  0020               	movlb	0	; select bank0
  7759  0E97  0526               	andwf	Save_Write_word@data,w
  7760  0E98  00A8               	movwf	??_Save_Write_word
  7761  0E99  303F               	movlw	63
  7762  0E9A  0527               	andwf	Save_Write_word@data+1,w
  7763  0E9B  00A9               	movwf	??_Save_Write_word+1
  7764  0E9C  0A28               	incf	??_Save_Write_word,w
  7765  0E9D  303F               	movlw	63
  7766  0E9E  1903               	skipnz
  7767  0E9F  0629               	xorwf	??_Save_Write_word+1,w
  7768  0EA0  1D03               	btfss	3,2
  7769  0EA1  2EAB               	goto	l5480
  7770                           
  7771                           ;save.c: 244: FLASH_WriteWord(Cur_Save_Index, 0x3ffe);
  7772  0EA2  0866               	movf	_Cur_Save_Index+1,w
  7773  0EA3  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7774  0EA4  0865               	movf	_Cur_Save_Index,w
  7775  0EA5  00A1               	movwf	FLASH_WriteWord@flashAddr
  7776  0EA6  30FE               	movlw	254
  7777  0EA7  00A3               	movwf	FLASH_WriteWord@word
  7778  0EA8  303F               	movlw	63
  7779  0EA9  00A4               	movwf	FLASH_WriteWord@word+1
  7780  0EAA  2EB4               	goto	L11
  7781  0EAB                     l5480:	
  7782                           
  7783                           ;save.c: 245: else
  7784                           ;save.c: 246: FLASH_WriteWord(Cur_Save_Index, data);
  7785  0EAB  0020               	movlb	0	; select bank0
  7786  0EAC  0866               	movf	_Cur_Save_Index+1,w
  7787  0EAD  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7788  0EAE  0865               	movf	_Cur_Save_Index,w
  7789  0EAF  00A1               	movwf	FLASH_WriteWord@flashAddr
  7790  0EB0  0827               	movf	Save_Write_word@data+1,w
  7791  0EB1  00A4               	movwf	FLASH_WriteWord@word+1
  7792  0EB2  0826               	movf	Save_Write_word@data,w
  7793  0EB3  00A3               	movwf	FLASH_WriteWord@word
  7794  0EB4                     L11:	
  7795  0EB4  3196  264D  318E   	fcall	_FLASH_WriteWord
  7796                           
  7797                           ;save.c: 247: Cur_Save_Index++;
  7798  0EB7  3001               	movlw	1
  7799  0EB8  0020               	movlb	0	; select bank0
  7800  0EB9  07E5               	addwf	_Cur_Save_Index,f
  7801  0EBA  3000               	movlw	0
  7802  0EBB  3DE6               	addwfc	_Cur_Save_Index+1,f
  7803                           
  7804                           ;save.c: 248: if( Cur_Save_Index == 16384)
  7805  0EBC  3040               	movlw	64
  7806  0EBD  0666               	xorwf	_Cur_Save_Index+1,w
  7807  0EBE  0465               	iorwf	_Cur_Save_Index,w
  7808  0EBF  1D03               	btfss	3,2
  7809  0EC0  0008               	return
  7810                           
  7811                           ;save.c: 249: {
  7812                           ;save.c: 250: Cur_Save_Index = 0x2000;
  7813  0EC1  3000               	movlw	0
  7814  0EC2  00E5               	movwf	_Cur_Save_Index
  7815  0EC3  3020               	movlw	32
  7816  0EC4  00E6               	movwf	_Cur_Save_Index+1
  7817  0EC5  0008               	return
  7818  0EC6                     __end_of_Save_Write_word:	
  7819                           
  7820                           	psect	text24
  7821  164D                     __ptext24:	
  7822 ;; *************** function _FLASH_WriteWord *****************
  7823 ;; Defined at:
  7824 ;;		line 93 in file "mcc_generated_files/memory.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;  flashAddr       2    1[BANK0 ] unsigned int 
  7827 ;;  word            2    3[BANK0 ] unsigned int 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  GIEBitValue     1    5[BANK0 ] unsigned char 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  1    wreg      void 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7839 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;Total ram usage:        5 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    3
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_Write_Flash_head
  7850 ;;		_Write_Flash_finish
  7851 ;;		_Save_Write_word
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           
  7856                           ;psect for function _FLASH_WriteWord
  7857  164D                     _FLASH_WriteWord:	
  7858                           
  7859                           ;memory.c: 95: uint8_t GIEBitValue = INTCONbits.GIE;
  7860                           
  7861                           ;incstack = 0
  7862                           ; Regs used in _FLASH_WriteWord: [wreg+status,2+status,0]
  7863  164D  3000               	movlw	0
  7864  164E  1B8B               	btfsc	11,7	;volatile
  7865  164F  3001               	movlw	1
  7866  1650  0020               	movlb	0	; select bank0
  7867  1651  00A5               	movwf	FLASH_WriteWord@GIEBitValue
  7868                           
  7869                           ;memory.c: 98: INTCONbits.GIE = 0;
  7870  1652  138B               	bcf	11,7	;volatile
  7871                           
  7872                           ;memory.c: 102: PMCON1bits.CFGS = 0;
  7873  1653  0023               	movlb	3	; select bank3
  7874  1654  1315               	bcf	21,6	;volatile
  7875                           
  7876                           ;memory.c: 103: PMCON1bits.WREN = 1;
  7877  1655  1515               	bsf	21,2	;volatile
  7878                           
  7879                           ;memory.c: 104: PMCON1bits.LWLO = 1;
  7880  1656  1695               	bsf	21,5	;volatile
  7881                           
  7882                           ;memory.c: 107: PMADRL = (flashAddr & 0xFF);
  7883  1657  0020               	movlb	0	; select bank0
  7884  1658  0821               	movf	FLASH_WriteWord@flashAddr,w
  7885  1659  0023               	movlb	3	; select bank3
  7886  165A  0091               	movwf	17	;volatile
  7887                           
  7888                           ;memory.c: 109: PMADRH = ((flashAddr & 0xFF00) >> 8);
  7889  165B  0020               	movlb	0	; select bank0
  7890  165C  0822               	movf	FLASH_WriteWord@flashAddr+1,w
  7891  165D  0023               	movlb	3	; select bank3
  7892  165E  0092               	movwf	18	;volatile
  7893                           
  7894                           ;memory.c: 112: PMDATL = word;
  7895  165F  0020               	movlb	0	; select bank0
  7896  1660  0823               	movf	FLASH_WriteWord@word,w
  7897  1661  0023               	movlb	3	; select bank3
  7898  1662  0093               	movwf	19	;volatile
  7899                           
  7900                           ;memory.c: 113: PMDATH = ((word & 0xFF00) >> 8);
  7901  1663  0020               	movlb	0	; select bank0
  7902  1664  0824               	movf	FLASH_WriteWord@word+1,w
  7903  1665  0023               	movlb	3	; select bank3
  7904  1666  0094               	movwf	20	;volatile
  7905                           
  7906                           ;memory.c: 116: PMCON1bits.LWLO = 0;
  7907  1667  1295               	bcf	21,5	;volatile
  7908                           
  7909                           ;memory.c: 118: PMCON2 = 0x55;
  7910  1668  3055               	movlw	85
  7911  1669  0096               	movwf	22	;volsfr
  7912                           
  7913                           ;memory.c: 119: PMCON2 = 0xAA;
  7914  166A  30AA               	movlw	170
  7915  166B  0096               	movwf	22	;volsfr
  7916                           
  7917                           ;memory.c: 120: PMCON1bits.WR = 1;
  7918  166C  1495               	bsf	21,1	;volatile
  7919                           
  7920                           ;memory.c: 121: __nop();
  7921  166D  0000               	nop
  7922                           
  7923                           ;memory.c: 122: __nop();
  7924  166E  0000               	nop
  7925                           
  7926                           ;memory.c: 124: PMCON1bits.WREN = 0;
  7927  166F  0023               	movlb	3	; select bank3
  7928  1670  1115               	bcf	21,2	;volatile
  7929                           
  7930                           ;memory.c: 125: INTCONbits.GIE = GIEBitValue;
  7931  1671  0020               	movlb	0	; select bank0
  7932  1672  0C25               	rrf	FLASH_WriteWord@GIEBitValue,w
  7933  1673  1C03               	skipc
  7934  1674  138B               	bcf	11,7	;volatile
  7935  1675  1803               	skipnc
  7936  1676  178B               	bsf	11,7	;volatile
  7937  1677  0008               	return
  7938  1678                     __end_of_FLASH_WriteWord:	
  7939                           
  7940                           	psect	text25
  7941  1583                     __ptext25:	
  7942 ;; *************** function _FLASH_EraseBlock *****************
  7943 ;; Defined at:
  7944 ;;		line 178 in file "mcc_generated_files/memory.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;  startAddr       2    1[BANK0 ] unsigned int 
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      void 
  7951 ;; Registers used:
  7952 ;;		wreg, status,2, status,0
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7958 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;Total ram usage:        3 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    3
  7965 ;; This function calls:
  7966 ;;		Nothing
  7967 ;; This function is called by:
  7968 ;;		_Key_Process
  7969 ;;		_Save_Write_word
  7970 ;;		_FLASH_WriteBlock
  7971 ;; This function uses a non-reentrant model
  7972 ;;
  7973                           
  7974                           
  7975                           ;psect for function _FLASH_EraseBlock
  7976  1583                     _FLASH_EraseBlock:	
  7977                           
  7978                           ;memory.c: 179: uint8_t GIEBitValue = INTCONbits.GIE;
  7979                           
  7980                           ;incstack = 0
  7981                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  7982  1583  3000               	movlw	0
  7983  1584  1B8B               	btfsc	11,7	;volatile
  7984  1585  3001               	movlw	1
  7985  1586  0020               	movlb	0	; select bank0
  7986  1587  00A3               	movwf	FLASH_EraseBlock@GIEBitValue
  7987                           
  7988                           ;memory.c: 182: INTCONbits.GIE = 0;
  7989  1588  138B               	bcf	11,7	;volatile
  7990                           
  7991                           ;memory.c: 184: PMADRL = (startAddr & 0xFF);
  7992  1589  0821               	movf	FLASH_EraseBlock@startAddr,w
  7993  158A  0023               	movlb	3	; select bank3
  7994  158B  0091               	movwf	17	;volatile
  7995                           
  7996                           ;memory.c: 186: PMADRH = ((startAddr & 0xFF00) >> 8);
  7997  158C  0020               	movlb	0	; select bank0
  7998  158D  0822               	movf	FLASH_EraseBlock@startAddr+1,w
  7999  158E  0023               	movlb	3	; select bank3
  8000  158F  0092               	movwf	18	;volatile
  8001                           
  8002                           ;memory.c: 189: PMCON1bits.CFGS = 0;
  8003  1590  1315               	bcf	21,6	;volatile
  8004                           
  8005                           ;memory.c: 190: PMCON1bits.FREE = 1;
  8006  1591  1615               	bsf	21,4	;volatile
  8007                           
  8008                           ;memory.c: 191: PMCON1bits.WREN = 1;
  8009  1592  1515               	bsf	21,2	;volatile
  8010                           
  8011                           ;memory.c: 194: PMCON2 = 0x55;
  8012  1593  3055               	movlw	85
  8013  1594  0096               	movwf	22	;volsfr
  8014                           
  8015                           ;memory.c: 195: PMCON2 = 0xAA;
  8016  1595  30AA               	movlw	170
  8017  1596  0096               	movwf	22	;volsfr
  8018                           
  8019                           ;memory.c: 196: PMCON1bits.WR = 1;
  8020  1597  1495               	bsf	21,1	;volatile
  8021                           
  8022                           ;memory.c: 197: __nop();
  8023  1598  0000               	nop
  8024                           
  8025                           ;memory.c: 198: __nop();
  8026  1599  0000               	nop
  8027                           
  8028                           ;memory.c: 200: PMCON1bits.WREN = 0;
  8029  159A  0023               	movlb	3	; select bank3
  8030  159B  1115               	bcf	21,2	;volatile
  8031                           
  8032                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8033  159C  0020               	movlb	0	; select bank0
  8034  159D  0C23               	rrf	FLASH_EraseBlock@GIEBitValue,w
  8035  159E  1C03               	skipc
  8036  159F  138B               	bcf	11,7	;volatile
  8037  15A0  1803               	skipnc
  8038  15A1  178B               	bsf	11,7	;volatile
  8039  15A2  0008               	return
  8040  15A3                     __end_of_FLASH_EraseBlock:	
  8041                           
  8042                           	psect	text26
  8043  13B8                     __ptext26:	
  8044 ;; *************** function _maxim_clear_fault_status *****************
  8045 ;; Defined at:
  8046 ;;		line 155 in file "mcc_generated_files/max31856.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		wreg, status,2, status,0, pclath, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;Total ram usage:        1 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    5
  8067 ;; This function calls:
  8068 ;;		_maxim_31856_read_register
  8069 ;;		_maxim_31856_write_register
  8070 ;; This function is called by:
  8071 ;;		_temperature_display
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           
  8076                           ;psect for function _maxim_clear_fault_status
  8077  13B8                     _maxim_clear_fault_status:	
  8078                           
  8079                           ;max31856.c: 157: uch_cr0= maxim_31856_read_register(0x00);
  8080                           
  8081                           ;incstack = 0
  8082                           ; Regs used in _maxim_clear_fault_status: [wreg+status,2+status,0+pclath+cstack]
  8083  13B8  3000               	movlw	0
  8084  13B9  3193  23E0  3193   	fcall	_maxim_31856_read_register
  8085  13BC  0020               	movlb	0	; select bank0
  8086  13BD  00A5               	movwf	??_maxim_clear_fault_status
  8087  13BE  0825               	movf	??_maxim_clear_fault_status,w
  8088  13BF  0021               	movlb	1	; select bank1
  8089  13C0  00EF               	movwf	_uch_cr0^(0+128)
  8090                           
  8091                           ;max31856.c: 158: uch_cr0|= (uint8_t) 0x02 ;
  8092  13C1  14EF               	bsf	_uch_cr0^(0+128),1
  8093                           
  8094                           ;max31856.c: 159: maxim_31856_write_register(0x80, uch_cr0);
  8095  13C2  086F               	movf	_uch_cr0^(0+128),w
  8096  13C3  0020               	movlb	0	; select bank0
  8097  13C4  00A5               	movwf	??_maxim_clear_fault_status
  8098  13C5  0825               	movf	??_maxim_clear_fault_status,w
  8099  13C6  00A2               	movwf	maxim_31856_write_register@uch_register_value
  8100  13C7  3080               	movlw	128
  8101  13C8  3193  2364         	fcall	_maxim_31856_write_register
  8102  13CA  0008               	return
  8103  13CB                     __end_of_maxim_clear_fault_status:	
  8104                           
  8105                           	psect	text27
  8106  1678                     __ptext27:	
  8107 ;; *************** function _err_Display *****************
  8108 ;; Defined at:
  8109 ;;		line 153 in file "mcc_generated_files/ht1621.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;		None
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  num             4   12[BANK0 ] unsigned char [4]
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  1    wreg      void 
  8116 ;; Registers used:
  8117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;Total ram usage:        5 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    5
  8130 ;; This function calls:
  8131 ;;		_WriteAll_1621
  8132 ;; This function is called by:
  8133 ;;		_temperature_display
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function _err_Display
  8139  1678                     _err_Display:	
  8140                           
  8141                           ;ht1621.c: 155: unsigned char num[4]={0};
  8142                           
  8143                           ;incstack = 0
  8144                           ; Regs used in _err_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8145  1678  0023               	movlb	3	; select bank3
  8146  1679  0833               	movf	(err_Display@F2141+3)^(0+384),w
  8147  167A  0020               	movlb	0	; select bank0
  8148  167B  00AF               	movwf	err_Display@num+3
  8149  167C  0023               	movlb	3	; select bank3
  8150  167D  0832               	movf	(err_Display@F2141+2)^(0+384),w
  8151  167E  0020               	movlb	0	; select bank0
  8152  167F  00AE               	movwf	err_Display@num+2
  8153  1680  0023               	movlb	3	; select bank3
  8154  1681  0831               	movf	(err_Display@F2141+1)^(0+384),w
  8155  1682  0020               	movlb	0	; select bank0
  8156  1683  00AD               	movwf	err_Display@num+1
  8157  1684  0023               	movlb	3	; select bank3
  8158  1685  0830               	movf	err_Display@F2141^(0+384),w
  8159  1686  0020               	movlb	0	; select bank0
  8160  1687  00AC               	movwf	err_Display@num
  8161                           
  8162                           ;ht1621.c: 156: num[1] = Dis_TAB[0x10];
  8163  1688  3010               	movlw	low ((_Dis_TAB+16)| (0+32768))
  8164  1689  0084               	movwf	4
  8165  168A  3098               	movlw	high ((_Dis_TAB+16)| (0+32768))
  8166  168B  0085               	movwf	5
  8167  168C  0800               	movf	0,w	;code access
  8168  168D  00AB               	movwf	??_err_Display
  8169  168E  082B               	movf	??_err_Display,w
  8170  168F  00AD               	movwf	err_Display@num+1
  8171                           
  8172                           ;ht1621.c: 157: num[2] = Dis_TAB[0x0c];
  8173  1690  300C               	movlw	low ((_Dis_TAB+12)| (0+32768))
  8174  1691  0084               	movwf	4
  8175  1692  3098               	movlw	high ((_Dis_TAB+12)| (0+32768))
  8176  1693  0085               	movwf	5
  8177  1694  0800               	movf	0,w	;code access
  8178  1695  00AB               	movwf	??_err_Display
  8179  1696  082B               	movf	??_err_Display,w
  8180  1697  00AE               	movwf	err_Display@num+2
  8181                           
  8182                           ;ht1621.c: 158: WriteAll_1621(0, num, 4);
  8183  1698  302C               	movlw	low err_Display@num
  8184  1699  00A5               	movwf	WriteAll_1621@p
  8185  169A  3000               	movlw	high err_Display@num
  8186  169B  00A6               	movwf	WriteAll_1621@p+1
  8187  169C  3004               	movlw	4
  8188  169D  00AB               	movwf	??_err_Display
  8189  169E  082B               	movf	??_err_Display,w
  8190  169F  00A7               	movwf	WriteAll_1621@cnt
  8191  16A0  3000               	movlw	0
  8192  16A1  3197  2760         	fcall	_WriteAll_1621
  8193  16A3  0008               	return
  8194  16A4                     __end_of_err_Display:	
  8195                           
  8196                           	psect	text28
  8197  0614                     __ptext28:	
  8198 ;; *************** function _Tc_Display *****************
  8199 ;; Defined at:
  8200 ;;		line 110 in file "mcc_generated_files/ht1621.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;		None
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  data            2   17[BANK0 ] unsigned int 
  8205 ;;  count           1   16[BANK0 ] unsigned char 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      void 
  8208 ;; Registers used:
  8209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;Total ram usage:        4 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    5
  8222 ;; This function calls:
  8223 ;;		_WriteAll_1621
  8224 ;;		___lwdiv
  8225 ;;		___lwmod
  8226 ;;		_memset
  8227 ;; This function is called by:
  8228 ;;		_temperature_display
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           
  8233                           ;psect for function _Tc_Display
  8234  0614                     _Tc_Display:	
  8235                           
  8236                           ;ht1621.c: 112: unsigned char count = 0;
  8237                           
  8238                           ;incstack = 0
  8239                           ; Regs used in _Tc_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8240  0614  0020               	movlb	0	; select bank0
  8241  0615  01B0               	clrf	Tc_Display@count
  8242                           
  8243                           ;ht1621.c: 113: unsigned int data = temperature_int;
  8244  0616  0022               	movlb	2	; select bank2
  8245  0617  0833               	movf	(_temperature_int+1)^(0+256),w
  8246  0618  0020               	movlb	0	; select bank0
  8247  0619  00B2               	movwf	Tc_Display@data+1
  8248  061A  0022               	movlb	2	; select bank2
  8249  061B  0832               	movf	_temperature_int^(0+256),w
  8250  061C  0020               	movlb	0	; select bank0
  8251  061D  00B1               	movwf	Tc_Display@data
  8252                           
  8253                           ;ht1621.c: 114: memset(display_buff,0,4);
  8254  061E  3000               	movlw	0
  8255  061F  00A1               	movwf	memset@c
  8256  0620  00A2               	movwf	memset@c+1
  8257  0621  3004               	movlw	4
  8258  0622  00A3               	movwf	memset@n
  8259  0623  3000               	movlw	0
  8260  0624  00A4               	movwf	memset@n+1
  8261  0625  3068               	movlw	(low (_display_buff| (0+256)))& (0+255)
  8262  0626  3194  243A  3186   	fcall	_memset
  8263  0629                     l6032:	
  8264                           ;ht1621.c: 115: while(data)
  8265                           
  8266  0629  0020               	movlb	0	; select bank0
  8267  062A  0831               	movf	Tc_Display@data,w
  8268  062B  0432               	iorwf	Tc_Display@data+1,w
  8269  062C  1903               	btfsc	3,2
  8270  062D  2EB1               	goto	l6040
  8271                           
  8272                           ;ht1621.c: 116: {
  8273                           ;ht1621.c: 117: count++;
  8274  062E  3001               	movlw	1
  8275  062F  0020               	movlb	0	; select bank0
  8276  0630  00AF               	movwf	??_Tc_Display
  8277  0631  082F               	movf	??_Tc_Display,w
  8278  0632  07B0               	addwf	Tc_Display@count,f
  8279                           
  8280                           ;ht1621.c: 118: data /=10;
  8281  0633  300A               	movlw	10
  8282  0634  00A7               	movwf	___lwdiv@divisor
  8283  0635  3000               	movlw	0
  8284  0636  00A8               	movwf	___lwdiv@divisor+1
  8285  0637  0832               	movf	Tc_Display@data+1,w
  8286  0638  00AA               	movwf	___lwdiv@dividend+1
  8287  0639  0831               	movf	Tc_Display@data,w
  8288  063A  00A9               	movwf	___lwdiv@dividend
  8289  063B  3197  2795  3186   	fcall	___lwdiv
  8290  063E  0020               	movlb	0	; select bank0
  8291  063F  0828               	movf	?___lwdiv+1,w
  8292  0640  00B2               	movwf	Tc_Display@data+1
  8293  0641  0827               	movf	?___lwdiv,w
  8294  0642  00B1               	movwf	Tc_Display@data
  8295  0643  2E29               	goto	l6032
  8296  0644                     l6034:	
  8297                           ;ht1621.c: 121: {
  8298                           ;ht1621.c: 122: case 3:display_buff[0] = Dis_TAB[temperature_int/100];
  8299                           
  8300                           ;ht1621.c: 119: }
  8301                           ;ht1621.c: 120: switch(count)
  8302                           
  8303  0644  3064               	movlw	100
  8304  0645  00A7               	movwf	___lwdiv@divisor
  8305  0646  3000               	movlw	0
  8306  0647  00A8               	movwf	___lwdiv@divisor+1
  8307  0648  0022               	movlb	2	; select bank2
  8308  0649  0833               	movf	(_temperature_int+1)^(0+256),w
  8309  064A  0020               	movlb	0	; select bank0
  8310  064B  00AA               	movwf	___lwdiv@dividend+1
  8311  064C  0022               	movlb	2	; select bank2
  8312  064D  0832               	movf	_temperature_int^(0+256),w
  8313  064E  0020               	movlb	0	; select bank0
  8314  064F  00A9               	movwf	___lwdiv@dividend
  8315  0650  3197  2795  3186   	fcall	___lwdiv
  8316  0653  0020               	movlb	0	; select bank0
  8317  0654  0828               	movf	?___lwdiv+1,w
  8318  0655  0085               	movwf	5
  8319  0656  0827               	movf	?___lwdiv,w
  8320  0657  0084               	movwf	4
  8321  0658  3000               	movlw	low (_Dis_TAB| (0+32768))
  8322  0659  0784               	addwf	4,f
  8323  065A  3098               	movlw	high (_Dis_TAB| (0+32768))
  8324  065B  3D85               	addwfc	5,f
  8325  065C  0800               	movf	0,w	;code access
  8326  065D  00AF               	movwf	??_Tc_Display
  8327  065E  082F               	movf	??_Tc_Display,w
  8328  065F  0022               	movlb	2	; select bank2
  8329  0660  00E8               	movwf	_display_buff^(0+256)
  8330  0661                     l791:	
  8331                           ;ht1621.c: 123: case 2:display_buff[1] = Dis_TAB[temperature_int%100/10];
  8332                           
  8333  0661  300A               	movlw	10
  8334  0662  0020               	movlb	0	; select bank0
  8335  0663  00A7               	movwf	___lwdiv@divisor
  8336  0664  3000               	movlw	0
  8337  0665  00A8               	movwf	___lwdiv@divisor+1
  8338  0666  0022               	movlb	2	; select bank2
  8339  0667  0833               	movf	(_temperature_int+1)^(0+256),w
  8340  0668  0020               	movlb	0	; select bank0
  8341  0669  00A4               	movwf	___lwmod@dividend+1
  8342  066A  0022               	movlb	2	; select bank2
  8343  066B  0832               	movf	_temperature_int^(0+256),w
  8344  066C  0020               	movlb	0	; select bank0
  8345  066D  00A3               	movwf	___lwmod@dividend
  8346  066E  3064               	movlw	100
  8347  066F  00A1               	movwf	___lwmod@divisor
  8348  0670  3000               	movlw	0
  8349  0671  00A2               	movwf	___lwmod@divisor+1
  8350  0672  3196  26A4  3186   	fcall	___lwmod
  8351  0675  0020               	movlb	0	; select bank0
  8352  0676  0822               	movf	?___lwmod+1,w
  8353  0677  00AA               	movwf	___lwdiv@dividend+1
  8354  0678  0821               	movf	?___lwmod,w
  8355  0679  00A9               	movwf	___lwdiv@dividend
  8356  067A  3197  2795  3186   	fcall	___lwdiv
  8357  067D  0020               	movlb	0	; select bank0
  8358  067E  0828               	movf	?___lwdiv+1,w
  8359  067F  0085               	movwf	5
  8360  0680  0827               	movf	?___lwdiv,w
  8361  0681  0084               	movwf	4
  8362  0682  3000               	movlw	low (_Dis_TAB| (0+32768))
  8363  0683  0784               	addwf	4,f
  8364  0684  3098               	movlw	high (_Dis_TAB| (0+32768))
  8365  0685  3D85               	addwfc	5,f
  8366  0686  0800               	movf	0,w	;code access
  8367  0687  00AF               	movwf	??_Tc_Display
  8368  0688  082F               	movf	??_Tc_Display,w
  8369  0689  0022               	movlb	2	; select bank2
  8370  068A  00E9               	movwf	(_display_buff^(0+256)+1)
  8371  068B                     l792:	
  8372                           ;ht1621.c: 124: case 1:display_buff[2] = Dis_TAB[temperature_int%10]; break;
  8373                           
  8374  068B  300A               	movlw	10
  8375  068C  0020               	movlb	0	; select bank0
  8376  068D  00A1               	movwf	___lwmod@divisor
  8377  068E  3000               	movlw	0
  8378  068F  00A2               	movwf	___lwmod@divisor+1
  8379  0690  0022               	movlb	2	; select bank2
  8380  0691  0833               	movf	(_temperature_int+1)^(0+256),w
  8381  0692  0020               	movlb	0	; select bank0
  8382  0693  00A4               	movwf	___lwmod@dividend+1
  8383  0694  0022               	movlb	2	; select bank2
  8384  0695  0832               	movf	_temperature_int^(0+256),w
  8385  0696  0020               	movlb	0	; select bank0
  8386  0697  00A3               	movwf	___lwmod@dividend
  8387  0698  3196  26A4  3186   	fcall	___lwmod
  8388  069B  0020               	movlb	0	; select bank0
  8389  069C  0822               	movf	?___lwmod+1,w
  8390  069D  0085               	movwf	5
  8391  069E  0821               	movf	?___lwmod,w
  8392  069F  0084               	movwf	4
  8393  06A0  3000               	movlw	low (_Dis_TAB| (0+32768))
  8394  06A1  0784               	addwf	4,f
  8395  06A2  3098               	movlw	high (_Dis_TAB| (0+32768))
  8396  06A3  3D85               	addwfc	5,f
  8397  06A4  0800               	movf	0,w	;code access
  8398  06A5  2EAC               	goto	L12
  8399  06A6                     l6036:	
  8400                           ;ht1621.c: 125: case 0:display_buff[2] = Dis_TAB[0];
  8401                           
  8402  06A6  3000               	movlw	low (_Dis_TAB| (0+32768))
  8403  06A7  0084               	movwf	4
  8404  06A8  3098               	movlw	high (_Dis_TAB| (0+32768))
  8405  06A9  0085               	movwf	5
  8406  06AA  0800               	movf	0,w	;code access
  8407  06AB  0020               	movlb	0	; select bank0
  8408  06AC                     L12:	
  8409  06AC  00AF               	movwf	??_Tc_Display
  8410  06AD  082F               	movf	??_Tc_Display,w
  8411  06AE  0022               	movlb	2	; select bank2
  8412  06AF  00EA               	movwf	(_display_buff^(0+256)+2)
  8413                           
  8414                           ;ht1621.c: 127: }
  8415                           
  8416                           ;ht1621.c: 126: default:break;
  8417  06B0  2EC0               	goto	l6042
  8418  06B1                     l6040:	
  8419  06B1  0020               	movlb	0	; select bank0
  8420  06B2  0830               	movf	Tc_Display@count,w
  8421                           
  8422                           ; Switch size 1, requested type "space"
  8423                           ; Number of cases is 4, Range of values is 0 to 3
  8424                           ; switch strategies available:
  8425                           ; Name         Instructions Cycles
  8426                           ; simple_byte           13     7 (average)
  8427                           ; direct_byte           14     6 (fixed)
  8428                           ; jumptable            260     6 (fixed)
  8429                           ;	Chosen strategy is simple_byte
  8430  06B3  3A00               	xorlw	0	; case 0
  8431  06B4  1903               	skipnz
  8432  06B5  2EA6               	goto	l6036
  8433  06B6  3A01               	xorlw	1	; case 1
  8434  06B7  1903               	skipnz
  8435  06B8  2E8B               	goto	l792
  8436  06B9  3A03               	xorlw	3	; case 2
  8437  06BA  1903               	skipnz
  8438  06BB  2E61               	goto	l791
  8439  06BC  3A01               	xorlw	1	; case 3
  8440  06BD  1903               	skipnz
  8441  06BE  2E44               	goto	l6034
  8442  06BF  2EC0               	goto	l6042
  8443  06C0                     l6042:	
  8444                           
  8445                           ;ht1621.c: 128: if(temperature_sign == 1) display_buff[0]=0x20;
  8446  06C0  0022               	movlb	2	; select bank2
  8447  06C1  0341               	decf	_temperature_sign^(0+256),w
  8448  06C2  1D03               	btfss	3,2
  8449  06C3  2ECA               	goto	l6046
  8450  06C4  3020               	movlw	32
  8451  06C5  0020               	movlb	0	; select bank0
  8452  06C6  00AF               	movwf	??_Tc_Display
  8453  06C7  082F               	movf	??_Tc_Display,w
  8454  06C8  0022               	movlb	2	; select bank2
  8455  06C9  00E8               	movwf	_display_buff^(0+256)
  8456  06CA                     l6046:	
  8457                           
  8458                           ;ht1621.c: 129: display_buff[3] = Dis_TAB[temperature_decimal] | 0x08;
  8459  06CA  0020               	movlb	0	; select bank0
  8460  06CB  0869               	movf	_temperature_decimal,w
  8461  06CC  3E00               	addlw	low (_Dis_TAB| (0+32768))
  8462  06CD  0084               	movwf	4
  8463  06CE  3098               	movlw	high (_Dis_TAB| (0+32768))
  8464  06CF  1803               	skipnc
  8465  06D0  3E01               	addlw	1
  8466  06D1  0085               	movwf	5
  8467  06D2  0800               	movf	0,w	;code access
  8468  06D3  3808               	iorlw	8
  8469  06D4  00AF               	movwf	??_Tc_Display
  8470  06D5  082F               	movf	??_Tc_Display,w
  8471  06D6  0022               	movlb	2	; select bank2
  8472  06D7  00EB               	movwf	(_display_buff^(0+256)+3)
  8473                           
  8474                           ;ht1621.c: 130: WriteAll_1621(0,display_buff,4);
  8475  06D8  3068               	movlw	low _display_buff
  8476  06D9  0020               	movlb	0	; select bank0
  8477  06DA  00A5               	movwf	WriteAll_1621@p
  8478  06DB  3001               	movlw	high _display_buff
  8479  06DC  00A6               	movwf	WriteAll_1621@p+1
  8480  06DD  3004               	movlw	4
  8481  06DE  00AF               	movwf	??_Tc_Display
  8482  06DF  082F               	movf	??_Tc_Display,w
  8483  06E0  00A7               	movwf	WriteAll_1621@cnt
  8484  06E1  3000               	movlw	0
  8485  06E2  3197  2760         	fcall	_WriteAll_1621
  8486  06E4  0008               	return
  8487  06E5                     __end_of_Tc_Display:	
  8488                           
  8489                           	psect	text29
  8490  143A                     __ptext29:	
  8491 ;; *************** function _memset *****************
  8492 ;; Defined at:
  8493 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  p1              1    wreg     PTR void 
  8496 ;;		 -> display_buff(4), 
  8497 ;;  c               2    1[BANK0 ] int 
  8498 ;;  n               2    3[BANK0 ] unsigned int 
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;  p1              1    6[BANK0 ] PTR void 
  8501 ;;		 -> display_buff(4), 
  8502 ;;  p               1    7[BANK0 ] PTR unsigned char 
  8503 ;;		 -> display_buff(4), 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      PTR void 
  8506 ;; Registers used:
  8507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8513 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;Total ram usage:        7 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    3
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_Tc_Display
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _memset
  8529  143A                     _memset:	
  8530                           
  8531                           ;incstack = 0
  8532                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8533                           ;memset@p1 stored from wreg
  8534  143A  0020               	movlb	0	; select bank0
  8535  143B  00A6               	movwf	memset@p1
  8536  143C  0826               	movf	memset@p1,w
  8537  143D  00A5               	movwf	??_memset
  8538  143E  0825               	movf	??_memset,w
  8539  143F  00A7               	movwf	memset@p
  8540  1440                     l5704:	
  8541  1440  3001               	movlw	1
  8542  1441  02A3               	subwf	memset@n,f
  8543  1442  3000               	movlw	0
  8544  1443  3BA4               	subwfb	memset@n+1,f
  8545  1444  0A23               	incf	memset@n,w
  8546  1445  1903               	btfsc	3,2
  8547  1446  0A24               	incf	memset@n+1,w
  8548  1447  1903               	btfsc	3,2
  8549  1448  0008               	return
  8550  1449  0821               	movf	memset@c,w
  8551  144A  00A5               	movwf	??_memset
  8552  144B  0827               	movf	memset@p,w
  8553  144C  0086               	movwf	6
  8554  144D  3001               	movlw	1	; select bank2/3
  8555  144E  0087               	movwf	7
  8556  144F  0825               	movf	??_memset,w
  8557  1450  0081               	movwf	1
  8558  1451  3001               	movlw	1
  8559  1452  00A5               	movwf	??_memset
  8560  1453  0825               	movf	??_memset,w
  8561  1454  07A7               	addwf	memset@p,f
  8562  1455  2C40               	goto	l5704
  8563  1456                     __end_of_memset:	
  8564                           ;	Return value of _memset is never used
  8565                           
  8566                           
  8567                           	psect	text30
  8568  16A4                     __ptext30:	
  8569 ;; *************** function ___lwmod *****************
  8570 ;; Defined at:
  8571 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  divisor         2    1[BANK0 ] unsigned int 
  8574 ;;  dividend        2    3[BANK0 ] unsigned int 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  counter         1    6[BANK0 ] unsigned char 
  8577 ;; Return value:  Size  Location     Type
  8578 ;;                  2    1[BANK0 ] unsigned int 
  8579 ;; Registers used:
  8580 ;;		wreg, status,2, status,0
  8581 ;; Tracked objects:
  8582 ;;		On entry : 0/0
  8583 ;;		On exit  : 0/0
  8584 ;;		Unchanged: 0/0
  8585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;Total ram usage:        6 bytes
  8591 ;; Hardware stack levels used:    1
  8592 ;; Hardware stack levels required when called:    3
  8593 ;; This function calls:
  8594 ;;		Nothing
  8595 ;; This function is called by:
  8596 ;;		_Tc_Display
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           
  8601                           ;psect for function ___lwmod
  8602  16A4                     ___lwmod:	
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8606  16A4  0020               	movlb	0	; select bank0
  8607  16A5  0821               	movf	___lwmod@divisor,w
  8608  16A6  0422               	iorwf	___lwmod@divisor+1,w
  8609  16A7  1903               	btfsc	3,2
  8610  16A8  2ECC               	goto	l5832
  8611  16A9  01A6               	clrf	___lwmod@counter
  8612  16AA  0AA6               	incf	___lwmod@counter,f
  8613  16AB                     l5822:	
  8614  16AB  1BA2               	btfsc	___lwmod@divisor+1,7
  8615  16AC  2EB7               	goto	l5824
  8616  16AD  3001               	movlw	1
  8617  16AE                     u5305:	
  8618  16AE  35A1               	lslf	___lwmod@divisor,f
  8619  16AF  0DA2               	rlf	___lwmod@divisor+1,f
  8620  16B0  0B89               	decfsz	9,f
  8621  16B1  2EAE               	goto	u5305
  8622  16B2  3001               	movlw	1
  8623  16B3  00A5               	movwf	??___lwmod
  8624  16B4  0825               	movf	??___lwmod,w
  8625  16B5  07A6               	addwf	___lwmod@counter,f
  8626  16B6  2EAB               	goto	l5822
  8627  16B7                     l5824:	
  8628  16B7  0822               	movf	___lwmod@divisor+1,w
  8629  16B8  0224               	subwf	___lwmod@dividend+1,w
  8630  16B9  1D03               	skipz
  8631  16BA  2EBD               	goto	u5325
  8632  16BB  0821               	movf	___lwmod@divisor,w
  8633  16BC  0223               	subwf	___lwmod@dividend,w
  8634  16BD                     u5325:	
  8635  16BD  1C03               	skipc
  8636  16BE  2EC3               	goto	l5828
  8637  16BF  0821               	movf	___lwmod@divisor,w
  8638  16C0  02A3               	subwf	___lwmod@dividend,f
  8639  16C1  0822               	movf	___lwmod@divisor+1,w
  8640  16C2  3BA4               	subwfb	___lwmod@dividend+1,f
  8641  16C3                     l5828:	
  8642  16C3  3001               	movlw	1
  8643  16C4                     u5335:	
  8644  16C4  36A2               	lsrf	___lwmod@divisor+1,f
  8645  16C5  0CA1               	rrf	___lwmod@divisor,f
  8646  16C6  0B89               	decfsz	9,f
  8647  16C7  2EC4               	goto	u5335
  8648  16C8  3001               	movlw	1
  8649  16C9  02A6               	subwf	___lwmod@counter,f
  8650  16CA  1D03               	btfss	3,2
  8651  16CB  2EB7               	goto	l5824
  8652  16CC                     l5832:	
  8653  16CC  0824               	movf	___lwmod@dividend+1,w
  8654  16CD  00A2               	movwf	?___lwmod+1
  8655  16CE  0823               	movf	___lwmod@dividend,w
  8656  16CF  00A1               	movwf	?___lwmod
  8657  16D0  0008               	return
  8658  16D1                     __end_of___lwmod:	
  8659                           
  8660                           	psect	text31
  8661  1795                     __ptext31:	
  8662 ;; *************** function ___lwdiv *****************
  8663 ;; Defined at:
  8664 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  divisor         2    7[BANK0 ] unsigned int 
  8667 ;;  dividend        2    9[BANK0 ] unsigned int 
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;  quotient        2   13[BANK0 ] unsigned int 
  8670 ;;  counter         1   12[BANK0 ] unsigned char 
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  2    7[BANK0 ] unsigned int 
  8673 ;; Registers used:
  8674 ;;		wreg, status,2, status,0
  8675 ;; Tracked objects:
  8676 ;;		On entry : 0/0
  8677 ;;		On exit  : 0/0
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8680 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8681 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;Total ram usage:        8 bytes
  8685 ;; Hardware stack levels used:    1
  8686 ;; Hardware stack levels required when called:    3
  8687 ;; This function calls:
  8688 ;;		Nothing
  8689 ;; This function is called by:
  8690 ;;		_Tc_Display
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           
  8695                           ;psect for function ___lwdiv
  8696  1795                     ___lwdiv:	
  8697                           
  8698                           ;incstack = 0
  8699                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8700  1795  0020               	movlb	0	; select bank0
  8701  1796  01AD               	clrf	___lwdiv@quotient
  8702  1797  01AE               	clrf	___lwdiv@quotient+1
  8703  1798  0827               	movf	___lwdiv@divisor,w
  8704  1799  0428               	iorwf	___lwdiv@divisor+1,w
  8705  179A  1903               	btfsc	3,2
  8706  179B  2FC5               	goto	l5810
  8707  179C  01AC               	clrf	___lwdiv@counter
  8708  179D  0AAC               	incf	___lwdiv@counter,f
  8709  179E                     l5798:	
  8710  179E  1BA8               	btfsc	___lwdiv@divisor+1,7
  8711  179F  2FAA               	goto	l5800
  8712  17A0  3001               	movlw	1
  8713  17A1                     u5235:	
  8714  17A1  35A7               	lslf	___lwdiv@divisor,f
  8715  17A2  0DA8               	rlf	___lwdiv@divisor+1,f
  8716  17A3  0B89               	decfsz	9,f
  8717  17A4  2FA1               	goto	u5235
  8718  17A5  3001               	movlw	1
  8719  17A6  00AB               	movwf	??___lwdiv
  8720  17A7  082B               	movf	??___lwdiv,w
  8721  17A8  07AC               	addwf	___lwdiv@counter,f
  8722  17A9  2F9E               	goto	l5798
  8723  17AA                     l5800:	
  8724  17AA  3001               	movlw	1
  8725  17AB                     u5255:	
  8726  17AB  35AD               	lslf	___lwdiv@quotient,f
  8727  17AC  0DAE               	rlf	___lwdiv@quotient+1,f
  8728  17AD  0B89               	decfsz	9,f
  8729  17AE  2FAB               	goto	u5255
  8730  17AF  0828               	movf	___lwdiv@divisor+1,w
  8731  17B0  022A               	subwf	___lwdiv@dividend+1,w
  8732  17B1  1D03               	skipz
  8733  17B2  2FB5               	goto	u5265
  8734  17B3  0827               	movf	___lwdiv@divisor,w
  8735  17B4  0229               	subwf	___lwdiv@dividend,w
  8736  17B5                     u5265:	
  8737  17B5  1C03               	skipc
  8738  17B6  2FBC               	goto	l5806
  8739  17B7  0827               	movf	___lwdiv@divisor,w
  8740  17B8  02A9               	subwf	___lwdiv@dividend,f
  8741  17B9  0828               	movf	___lwdiv@divisor+1,w
  8742  17BA  3BAA               	subwfb	___lwdiv@dividend+1,f
  8743  17BB  142D               	bsf	___lwdiv@quotient,0
  8744  17BC                     l5806:	
  8745  17BC  3001               	movlw	1
  8746  17BD                     u5275:	
  8747  17BD  36A8               	lsrf	___lwdiv@divisor+1,f
  8748  17BE  0CA7               	rrf	___lwdiv@divisor,f
  8749  17BF  0B89               	decfsz	9,f
  8750  17C0  2FBD               	goto	u5275
  8751  17C1  3001               	movlw	1
  8752  17C2  02AC               	subwf	___lwdiv@counter,f
  8753  17C3  1D03               	btfss	3,2
  8754  17C4  2FAA               	goto	l5800
  8755  17C5                     l5810:	
  8756  17C5  082E               	movf	___lwdiv@quotient+1,w
  8757  17C6  00A8               	movwf	?___lwdiv+1
  8758  17C7  082D               	movf	___lwdiv@quotient,w
  8759  17C8  00A7               	movwf	?___lwdiv
  8760  17C9  0008               	return
  8761  17CA                     __end_of___lwdiv:	
  8762                           
  8763                           	psect	text32
  8764  0983                     __ptext32:	
  8765 ;; *************** function _one_temperature_trans *****************
  8766 ;; Defined at:
  8767 ;;		line 286 in file "mcc_generated_files/max31856.c"
  8768 ;; Parameters:    Size  Location     Type
  8769 ;;		None
  8770 ;; Auto vars:     Size  Location     Type
  8771 ;;		None
  8772 ;; Return value:  Size  Location     Type
  8773 ;;                  1    wreg      void 
  8774 ;; Registers used:
  8775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8776 ;; Tracked objects:
  8777 ;;		On entry : 0/0
  8778 ;;		On exit  : 0/0
  8779 ;;		Unchanged: 0/0
  8780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;Total ram usage:        2 bytes
  8786 ;; Hardware stack levels used:    1
  8787 ;; Hardware stack levels required when called:    6
  8788 ;; This function calls:
  8789 ;;		_maxim_31856_read_nregisters
  8790 ;;		_maxim_start_conversion
  8791 ;; This function is called by:
  8792 ;;		_temperature_process
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _one_temperature_trans
  8798  0983                     _one_temperature_trans:	
  8799                           
  8800                           ;max31856.c: 288: maxim_start_conversion((uint8_t) 0x40);
  8801                           
  8802                           ;incstack = 0
  8803                           ; Regs used in _one_temperature_trans: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8804  0983  3040               	movlw	64
  8805  0984  3195  2563  3189   	fcall	_maxim_start_conversion
  8806                           
  8807                           ;max31856.c: 290: MAX31856Sec = 0;
  8808  0987  0022               	movlb	2	; select bank2
  8809  0988  01B9               	clrf	_MAX31856Sec^(0+256)
  8810                           
  8811                           ;max31856.c: 291: while( !(RB3 == 0 || MAX31856Sec > 30) ) asm("clrwdt");
  8812  0989  298B               	goto	l648
  8813  098A                     l649:	
  8814  098A  0064               	clrwdt	;# 
  8815  098B                     l648:	
  8816  098B  0020               	movlb	0	; select bank0
  8817  098C  1D8D               	btfss	13,3	;volatile
  8818  098D  2993               	goto	l6132
  8819  098E  301F               	movlw	31
  8820  098F  0022               	movlb	2	; select bank2
  8821  0990  0239               	subwf	_MAX31856Sec^(0+256),w
  8822  0991  1C03               	skipc
  8823  0992  298A               	goto	l649
  8824  0993                     l6132:	
  8825                           
  8826                           ;max31856.c: 292: if( MAX31856Sec > 30)
  8827  0993  301F               	movlw	31
  8828  0994  0022               	movlb	2	; select bank2
  8829  0995  0239               	subwf	_MAX31856Sec^(0+256),w
  8830  0996  1C03               	skipc
  8831  0997  299B               	goto	l6136
  8832                           
  8833                           ;max31856.c: 293: {
  8834                           ;max31856.c: 294: uch_sr = 0x01;
  8835  0998  01CA               	clrf	_uch_sr^(0+256)
  8836  0999  0ACA               	incf	_uch_sr^(0+256),f
  8837                           
  8838                           ;max31856.c: 295: }
  8839  099A  0008               	return
  8840  099B                     l6136:	
  8841                           
  8842                           ;max31856.c: 322: else
  8843                           ;max31856.c: 323: {
  8844                           ;max31856.c: 324: maxim_31856_read_nregisters(0x0A, uch_reg,6);
  8845  099B  304B               	movlw	(low (_uch_reg| (0+256)))& (0+255)
  8846  099C  0020               	movlb	0	; select bank0
  8847  099D  00AE               	movwf	??_one_temperature_trans
  8848  099E  082E               	movf	??_one_temperature_trans,w
  8849  099F  00A9               	movwf	maxim_31856_read_nregisters@uch_buff
  8850  09A0  3006               	movlw	6
  8851  09A1  00AF               	movwf	??_one_temperature_trans+1
  8852  09A2  082F               	movf	??_one_temperature_trans+1,w
  8853  09A3  00AA               	movwf	maxim_31856_read_nregisters@uch_nBytes
  8854  09A4  300A               	movlw	10
  8855  09A5  3194  2422         	fcall	_maxim_31856_read_nregisters
  8856                           
  8857                           ;max31856.c: 325: uch_cjth=uch_reg[0];uch_cjtl=uch_reg[1];
  8858  09A7  0022               	movlb	2	; select bank2
  8859  09A8  084B               	movf	_uch_reg^(0+256),w
  8860  09A9  0020               	movlb	0	; select bank0
  8861  09AA  00AE               	movwf	??_one_temperature_trans
  8862  09AB  082E               	movf	??_one_temperature_trans,w
  8863  09AC  0022               	movlb	2	; select bank2
  8864  09AD  00C3               	movwf	_uch_cjth^(0+256)
  8865  09AE  084C               	movf	(_uch_reg^(0+256)+1),w
  8866  09AF  0020               	movlb	0	; select bank0
  8867  09B0  00AE               	movwf	??_one_temperature_trans
  8868  09B1  082E               	movf	??_one_temperature_trans,w
  8869  09B2  0022               	movlb	2	; select bank2
  8870  09B3  00C4               	movwf	_uch_cjtl^(0+256)
  8871                           
  8872                           ;max31856.c: 326: uch_ltcbh=uch_reg[2];uch_ltcbm=uch_reg[3];uch_ltcbl=uch_reg[4];
  8873  09B4  084D               	movf	(_uch_reg^(0+256)+2),w
  8874  09B5  0020               	movlb	0	; select bank0
  8875  09B6  00AE               	movwf	??_one_temperature_trans
  8876  09B7  082E               	movf	??_one_temperature_trans,w
  8877  09B8  0022               	movlb	2	; select bank2
  8878  09B9  00C6               	movwf	_uch_ltcbh^(0+256)
  8879  09BA  084E               	movf	(_uch_reg^(0+256)+3),w
  8880  09BB  0020               	movlb	0	; select bank0
  8881  09BC  00AE               	movwf	??_one_temperature_trans
  8882  09BD  082E               	movf	??_one_temperature_trans,w
  8883  09BE  0022               	movlb	2	; select bank2
  8884  09BF  00C8               	movwf	_uch_ltcbm^(0+256)
  8885  09C0  084F               	movf	(_uch_reg^(0+256)+4),w
  8886  09C1  0020               	movlb	0	; select bank0
  8887  09C2  00AE               	movwf	??_one_temperature_trans
  8888  09C3  082E               	movf	??_one_temperature_trans,w
  8889  09C4  0022               	movlb	2	; select bank2
  8890  09C5  00C7               	movwf	_uch_ltcbl^(0+256)
  8891                           
  8892                           ;max31856.c: 327: uch_sr=uch_reg[5];
  8893  09C6  0850               	movf	(_uch_reg^(0+256)+5),w
  8894  09C7  0020               	movlb	0	; select bank0
  8895  09C8  00AE               	movwf	??_one_temperature_trans
  8896  09C9  082E               	movf	??_one_temperature_trans,w
  8897  09CA  0022               	movlb	2	; select bank2
  8898  09CB  00CA               	movwf	_uch_sr^(0+256)
  8899  09CC  0008               	return
  8900  09CD                     __end_of_one_temperature_trans:	
  8901                           
  8902                           	psect	text33
  8903  1563                     __ptext33:	
  8904 ;; *************** function _maxim_start_conversion *****************
  8905 ;; Defined at:
  8906 ;;		line 114 in file "mcc_generated_files/max31856.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;  uch_conversi    1    wreg     unsigned char 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;  uch_conversi    1    6[BANK0 ] unsigned char 
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0, pclath, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;Total ram usage:        2 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    5
  8927 ;; This function calls:
  8928 ;;		_maxim_31856_read_register
  8929 ;;		_maxim_31856_write_register
  8930 ;; This function is called by:
  8931 ;;		_one_temperature_trans
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           
  8936                           ;psect for function _maxim_start_conversion
  8937  1563                     _maxim_start_conversion:	
  8938                           
  8939                           ;incstack = 0
  8940                           ; Regs used in _maxim_start_conversion: [wreg+status,2+status,0+pclath+cstack]
  8941                           ;maxim_start_conversion@uch_conversion_mode stored from wreg
  8942  1563  0020               	movlb	0	; select bank0
  8943  1564  00A6               	movwf	maxim_start_conversion@uch_conversion_mode
  8944                           
  8945                           ;max31856.c: 116: uch_cr0=maxim_31856_read_register(0x00);
  8946  1565  3000               	movlw	0
  8947  1566  3193  23E0  3195   	fcall	_maxim_31856_read_register
  8948  1569  0020               	movlb	0	; select bank0
  8949  156A  00A5               	movwf	??_maxim_start_conversion
  8950  156B  0825               	movf	??_maxim_start_conversion,w
  8951  156C  0021               	movlb	1	; select bank1
  8952  156D  00EF               	movwf	_uch_cr0^(0+128)
  8953                           
  8954                           ;max31856.c: 117: uch_cr0&=(uint8_t) 0x3F;
  8955  156E  303F               	movlw	63
  8956  156F  0020               	movlb	0	; select bank0
  8957  1570  00A5               	movwf	??_maxim_start_conversion
  8958  1571  0825               	movf	??_maxim_start_conversion,w
  8959  1572  0021               	movlb	1	; select bank1
  8960  1573  05EF               	andwf	_uch_cr0^(0+128),f
  8961                           
  8962                           ;max31856.c: 118: uch_cr0|=uch_conversion_mode;
  8963  1574  0020               	movlb	0	; select bank0
  8964  1575  0826               	movf	maxim_start_conversion@uch_conversion_mode,w
  8965  1576  00A5               	movwf	??_maxim_start_conversion
  8966  1577  0825               	movf	??_maxim_start_conversion,w
  8967  1578  0021               	movlb	1	; select bank1
  8968  1579  04EF               	iorwf	_uch_cr0^(0+128),f
  8969                           
  8970                           ;max31856.c: 119: maxim_31856_write_register(0x80, uch_cr0);
  8971  157A  086F               	movf	_uch_cr0^(0+128),w
  8972  157B  0020               	movlb	0	; select bank0
  8973  157C  00A5               	movwf	??_maxim_start_conversion
  8974  157D  0825               	movf	??_maxim_start_conversion,w
  8975  157E  00A2               	movwf	maxim_31856_write_register@uch_register_value
  8976  157F  3080               	movlw	128
  8977  1580  3193  2364         	fcall	_maxim_31856_write_register
  8978  1582  0008               	return
  8979  1583                     __end_of_maxim_start_conversion:	
  8980                           
  8981                           	psect	text34
  8982  1364                     __ptext34:	
  8983 ;; *************** function _maxim_31856_write_register *****************
  8984 ;; Defined at:
  8985 ;;		line 20 in file "mcc_generated_files/max31856.c"
  8986 ;; Parameters:    Size  Location     Type
  8987 ;;  uch_register    1    wreg     unsigned char 
  8988 ;;  uch_register    1    2[BANK0 ] unsigned char 
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		wreg, status,2, status,0, pclath, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9000 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;Total ram usage:        2 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    4
  9007 ;; This function calls:
  9008 ;;		_SPI_Exchange8bit
  9009 ;; This function is called by:
  9010 ;;		_maxim_start_conversion
  9011 ;;		_maxim_clear_fault_status
  9012 ;;		_temperature_display
  9013 ;;		_maxim_31856_init
  9014 ;;		_maxim_stop_conversion
  9015 ;;		_maxim_disable_oc_fault_detection
  9016 ;;		_maxim_set_oc_fault_detection
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           
  9021                           ;psect for function _maxim_31856_write_register
  9022  1364                     _maxim_31856_write_register:	
  9023                           
  9024                           ;incstack = 0
  9025                           ; Regs used in _maxim_31856_write_register: [wreg+status,2+status,0+pclath+cstack]
  9026                           ;maxim_31856_write_register@uch_register_address stored from wreg
  9027  1364  0020               	movlb	0	; select bank0
  9028  1365  00A3               	movwf	maxim_31856_write_register@uch_register_address
  9029                           
  9030                           ;max31856.c: 22: do { LATA5 = 0; } while(0);
  9031  1366  0022               	movlb	2	; select bank2
  9032  1367  128C               	bcf	12,5	;volatile
  9033                           
  9034                           ;max31856.c: 23: SPI_Exchange8bit(uch_register_address);
  9035  1368  0020               	movlb	0	; select bank0
  9036  1369  0823               	movf	maxim_31856_write_register@uch_register_address,w
  9037  136A  3193  2348  3193   	fcall	_SPI_Exchange8bit
  9038                           
  9039                           ;max31856.c: 24: SPI_Exchange8bit(uch_register_value);
  9040  136D  0020               	movlb	0	; select bank0
  9041  136E  0822               	movf	maxim_31856_write_register@uch_register_value,w
  9042  136F  3193  2348         	fcall	_SPI_Exchange8bit
  9043                           
  9044                           ;max31856.c: 25: do { LATA5 = 1; } while(0);
  9045  1371  0022               	movlb	2	; select bank2
  9046  1372  168C               	bsf	12,5	;volatile
  9047  1373  0008               	return
  9048  1374                     __end_of_maxim_31856_write_register:	
  9049                           
  9050                           	psect	text35
  9051  13E0                     __ptext35:	
  9052 ;; *************** function _maxim_31856_read_register *****************
  9053 ;; Defined at:
  9054 ;;		line 34 in file "mcc_generated_files/max31856.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;  uch_register    1    wreg     unsigned char 
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  uch_register    1    3[BANK0 ] unsigned char 
  9059 ;;  uch_register    1    4[BANK0 ] unsigned char 
  9060 ;; Return value:  Size  Location     Type
  9061 ;;                  1    wreg      unsigned char 
  9062 ;; Registers used:
  9063 ;;		wreg, status,2, status,0, pclath, cstack
  9064 ;; Tracked objects:
  9065 ;;		On entry : 0/0
  9066 ;;		On exit  : 0/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;Total ram usage:        3 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    4
  9076 ;; This function calls:
  9077 ;;		_SPI_Exchange8bit
  9078 ;; This function is called by:
  9079 ;;		_maxim_start_conversion
  9080 ;;		_maxim_clear_fault_status
  9081 ;;		_maxim_stop_conversion
  9082 ;;		_maxim_disable_oc_fault_detection
  9083 ;;		_maxim_set_oc_fault_detection
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           
  9088                           ;psect for function _maxim_31856_read_register
  9089  13E0                     _maxim_31856_read_register:	
  9090                           
  9091                           ;incstack = 0
  9092                           ; Regs used in _maxim_31856_read_register: [wreg+status,2+status,0+pclath+cstack]
  9093                           ;maxim_31856_read_register@uch_register_address stored from wreg
  9094  13E0  0020               	movlb	0	; select bank0
  9095  13E1  00A3               	movwf	maxim_31856_read_register@uch_register_address
  9096                           
  9097                           ;max31856.c: 36: uint8_t uch_register_data;
  9098                           ;max31856.c: 37: do { LATA5 = 0; } while(0);
  9099  13E2  0022               	movlb	2	; select bank2
  9100  13E3  128C               	bcf	12,5	;volatile
  9101                           
  9102                           ;max31856.c: 38: SPI_Exchange8bit(uch_register_address);
  9103  13E4  0020               	movlb	0	; select bank0
  9104  13E5  0823               	movf	maxim_31856_read_register@uch_register_address,w
  9105  13E6  3193  2348  3193   	fcall	_SPI_Exchange8bit
  9106                           
  9107                           ;max31856.c: 39: uch_register_data=SPI_Exchange8bit(0xff);
  9108  13E9  30FF               	movlw	255
  9109  13EA  3193  2348         	fcall	_SPI_Exchange8bit
  9110  13EC  0020               	movlb	0	; select bank0
  9111  13ED  00A2               	movwf	??_maxim_31856_read_register
  9112  13EE  0822               	movf	??_maxim_31856_read_register,w
  9113  13EF  00A4               	movwf	maxim_31856_read_register@uch_register_data
  9114                           
  9115                           ;max31856.c: 40: do { LATA5 = 1; } while(0);
  9116  13F0  0022               	movlb	2	; select bank2
  9117  13F1  168C               	bsf	12,5	;volatile
  9118                           
  9119                           ;max31856.c: 41: return (uch_register_data);
  9120  13F2  0020               	movlb	0	; select bank0
  9121  13F3  0824               	movf	maxim_31856_read_register@uch_register_data,w
  9122  13F4  0008               	return
  9123  13F5                     __end_of_maxim_31856_read_register:	
  9124                           
  9125                           	psect	text36
  9126  1422                     __ptext36:	
  9127 ;; *************** function _maxim_31856_read_nregisters *****************
  9128 ;; Defined at:
  9129 ;;		line 50 in file "mcc_generated_files/max31856.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;  uch_register    1    wreg     unsigned char 
  9132 ;;  uch_buff        1    9[BANK0 ] PTR unsigned char 
  9133 ;;		 -> uch_reg(8), 
  9134 ;;  uch_nBytes      1   10[BANK0 ] unsigned char 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  uch_register    1   13[BANK0 ] unsigned char 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9146 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;Total ram usage:        5 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    5
  9153 ;; This function calls:
  9154 ;;		_SPI_Exchange8bit
  9155 ;;		_SPI_Exchange8bitBuffer
  9156 ;; This function is called by:
  9157 ;;		_one_temperature_trans
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           
  9162                           ;psect for function _maxim_31856_read_nregisters
  9163  1422                     _maxim_31856_read_nregisters:	
  9164                           
  9165                           ;incstack = 0
  9166                           ; Regs used in _maxim_31856_read_nregisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9167                           ;maxim_31856_read_nregisters@uch_register_address stored from wreg
  9168  1422  0020               	movlb	0	; select bank0
  9169  1423  00AD               	movwf	maxim_31856_read_nregisters@uch_register_address
  9170                           
  9171                           ;max31856.c: 52: do { LATA5 = 0; } while(0);
  9172  1424  0022               	movlb	2	; select bank2
  9173  1425  128C               	bcf	12,5	;volatile
  9174                           
  9175                           ;max31856.c: 53: SPI_Exchange8bit(uch_register_address);
  9176  1426  0020               	movlb	0	; select bank0
  9177  1427  082D               	movf	maxim_31856_read_nregisters@uch_register_address,w
  9178  1428  3193  2348  3194   	fcall	_SPI_Exchange8bit
  9179                           
  9180                           ;max31856.c: 54: SPI_Exchange8bitBuffer((0), uch_nBytes, uch_buff);
  9181  142B  0020               	movlb	0	; select bank0
  9182  142C  082A               	movf	maxim_31856_read_nregisters@uch_nBytes,w
  9183  142D  00AB               	movwf	??_maxim_31856_read_nregisters
  9184  142E  082B               	movf	??_maxim_31856_read_nregisters,w
  9185  142F  00A2               	movwf	SPI_Exchange8bitBuffer@bufLen
  9186  1430  0829               	movf	maxim_31856_read_nregisters@uch_buff,w
  9187  1431  00AC               	movwf	??_maxim_31856_read_nregisters+1
  9188  1432  082C               	movf	??_maxim_31856_read_nregisters+1,w
  9189  1433  00A3               	movwf	SPI_Exchange8bitBuffer@dataOut
  9190  1434  3000               	movlw	0
  9191  1435  318A  226C         	fcall	_SPI_Exchange8bitBuffer
  9192                           
  9193                           ;max31856.c: 55: do { LATA5 = 1; } while(0);
  9194  1437  0022               	movlb	2	; select bank2
  9195  1438  168C               	bsf	12,5	;volatile
  9196  1439  0008               	return
  9197  143A                     __end_of_maxim_31856_read_nregisters:	
  9198                           
  9199                           	psect	text37
  9200  0A6C                     __ptext37:	
  9201 ;; *************** function _SPI_Exchange8bitBuffer *****************
  9202 ;; Defined at:
  9203 ;;		line 89 in file "mcc_generated_files/spi.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;  dataIn          1    wreg     PTR unsigned char 
  9206 ;;		 -> NULL(0), 
  9207 ;;  bufLen          1    2[BANK0 ] unsigned char 
  9208 ;;  dataOut         1    3[BANK0 ] PTR unsigned char 
  9209 ;;		 -> uch_reg(8), 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;  dataIn          1    7[BANK0 ] PTR unsigned char 
  9212 ;;		 -> NULL(0), 
  9213 ;;  bytesWritten    1    8[BANK0 ] unsigned char 
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  1    wreg      unsigned char 
  9216 ;; Registers used:
  9217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9223 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;Total ram usage:        7 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    4
  9230 ;; This function calls:
  9231 ;;		_SPI_Exchange8bit
  9232 ;; This function is called by:
  9233 ;;		_maxim_31856_read_nregisters
  9234 ;; This function uses a non-reentrant model
  9235 ;;
  9236                           
  9237                           
  9238                           ;psect for function _SPI_Exchange8bitBuffer
  9239  0A6C                     _SPI_Exchange8bitBuffer:	
  9240                           
  9241                           ;incstack = 0
  9242                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9243                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  9244  0A6C  0020               	movlb	0	; select bank0
  9245  0A6D  00A7               	movwf	SPI_Exchange8bitBuffer@dataIn
  9246                           
  9247                           ;spi.c: 90: uint8_t bytesWritten = 0;
  9248  0A6E  01A8               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  9249                           
  9250                           ;spi.c: 92: if (bufLen != 0) {
  9251  0A6F  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9252  0A70  1903               	btfsc	3,2
  9253  0A71  0008               	return
  9254                           
  9255                           ;spi.c: 93: if (dataIn != (0)) {
  9256  0A72  0827               	movf	SPI_Exchange8bitBuffer@dataIn,w
  9257  0A73  1D03               	btfss	3,2
  9258  0A74  2A9F               	goto	l5604
  9259  0A75  2AA4               	goto	l5606
  9260  0A76                     l5596:	
  9261                           ;spi.c: 94: while (bytesWritten < bufLen) {
  9262                           
  9263                           
  9264                           ;spi.c: 95: if (dataOut == (0)) {
  9265  0A76  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9266  0A77  1D03               	btfss	3,2
  9267  0A78  2A84               	goto	l5600
  9268                           
  9269                           ;spi.c: 96: SPI_Exchange8bit(dataIn[bytesWritten]);
  9270  0A79  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9271  0A7A  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9272  0A7B  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9273  0A7C  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9274  0A7D  0086               	movwf	6
  9275  0A7E  0187               	clrf	7
  9276  0A7F  0801               	movf	1,w
  9277  0A80  3193  2348  318A   	fcall	_SPI_Exchange8bit
  9278                           
  9279                           ;spi.c: 97: } else {
  9280  0A83  2A9A               	goto	l5602
  9281  0A84                     l5600:	
  9282                           
  9283                           ;spi.c: 98: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  9284  0A84  0020               	movlb	0	; select bank0
  9285  0A85  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9286  0A86  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9287  0A87  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9288  0A88  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9289  0A89  0086               	movwf	6
  9290  0A8A  0187               	clrf	7
  9291  0A8B  0801               	movf	1,w
  9292  0A8C  3193  2348  318A   	fcall	_SPI_Exchange8bit
  9293  0A8F  0020               	movlb	0	; select bank0
  9294  0A90  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  9295  0A91  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9296  0A92  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9297  0A93  00A6               	movwf	??_SPI_Exchange8bitBuffer+2
  9298  0A94  0826               	movf	??_SPI_Exchange8bitBuffer+2,w
  9299  0A95  0086               	movwf	6
  9300  0A96  3001               	movlw	1	; select bank2/3
  9301  0A97  0087               	movwf	7
  9302  0A98  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  9303  0A99  0081               	movwf	1
  9304  0A9A                     l5602:	
  9305                           
  9306                           ;spi.c: 99: }
  9307                           ;spi.c: 101: bytesWritten++;
  9308  0A9A  3001               	movlw	1
  9309  0A9B  0020               	movlb	0	; select bank0
  9310  0A9C  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9311  0A9D  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9312  0A9E  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9313  0A9F                     l5604:	
  9314  0A9F  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9315  0AA0  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9316  0AA1  1803               	btfsc	3,0
  9317  0AA2  0008               	return
  9318  0AA3  2A76               	goto	l5596
  9319  0AA4                     l5606:	
  9320                           ;spi.c: 102: }
  9321                           ;spi.c: 103: } else {
  9322                           
  9323                           
  9324                           ;spi.c: 104: if (dataOut != (0)) {
  9325  0AA4  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9326  0AA5  1903               	btfsc	3,2
  9327  0AA6  0008               	return
  9328  0AA7                     l5614:	
  9329  0AA7  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9330  0AA8  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9331  0AA9  1803               	btfsc	3,0
  9332  0AAA  0008               	return
  9333                           
  9334                           ;spi.c: 106: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  9335                           
  9336                           ;spi.c: 105: while (bytesWritten < bufLen) {
  9337  0AAB  3000               	movlw	0
  9338  0AAC  3193  2348  318A   	fcall	_SPI_Exchange8bit
  9339  0AAF  0020               	movlb	0	; select bank0
  9340  0AB0  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9341  0AB1  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9342  0AB2  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9343  0AB3  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  9344  0AB4  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  9345  0AB5  0086               	movwf	6
  9346  0AB6  3001               	movlw	1	; select bank2/3
  9347  0AB7  0087               	movwf	7
  9348  0AB8  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9349  0AB9  0081               	movwf	1
  9350                           
  9351                           ;spi.c: 108: bytesWritten++;
  9352  0ABA  3001               	movlw	1
  9353  0ABB  00A4               	movwf	??_SPI_Exchange8bitBuffer
  9354  0ABC  0824               	movf	??_SPI_Exchange8bitBuffer,w
  9355  0ABD  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9356  0ABE  2AA7               	goto	l5614
  9357  0ABF                     __end_of_SPI_Exchange8bitBuffer:	
  9358                           ;spi.c: 109: }
  9359                           ;spi.c: 110: }
  9360                           ;spi.c: 111: }
  9361                           ;spi.c: 112: }
  9362                           ;spi.c: 114: return bytesWritten;
  9363                           ;	Return value of _SPI_Exchange8bitBuffer is never used
  9364                           
  9365                           
  9366                           	psect	text38
  9367  1348                     __ptext38:	
  9368 ;; *************** function _SPI_Exchange8bit *****************
  9369 ;; Defined at:
  9370 ;;		line 77 in file "mcc_generated_files/spi.c"
  9371 ;; Parameters:    Size  Location     Type
  9372 ;;  data            1    wreg     unsigned char 
  9373 ;; Auto vars:     Size  Location     Type
  9374 ;;  data            1    1[BANK0 ] unsigned char 
  9375 ;; Return value:  Size  Location     Type
  9376 ;;                  1    wreg      unsigned char 
  9377 ;; Registers used:
  9378 ;;		wreg
  9379 ;; Tracked objects:
  9380 ;;		On entry : 0/0
  9381 ;;		On exit  : 0/0
  9382 ;;		Unchanged: 0/0
  9383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;Total ram usage:        1 bytes
  9389 ;; Hardware stack levels used:    1
  9390 ;; Hardware stack levels required when called:    3
  9391 ;; This function calls:
  9392 ;;		Nothing
  9393 ;; This function is called by:
  9394 ;;		_SPI_Exchange8bitBuffer
  9395 ;;		_maxim_31856_write_register
  9396 ;;		_maxim_31856_read_register
  9397 ;;		_maxim_31856_read_nregisters
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           
  9402                           ;psect for function _SPI_Exchange8bit
  9403  1348                     _SPI_Exchange8bit:	
  9404                           
  9405                           ;incstack = 0
  9406                           ; Regs used in _SPI_Exchange8bit: [wreg]
  9407                           ;SPI_Exchange8bit@data stored from wreg
  9408  1348  0020               	movlb	0	; select bank0
  9409  1349  00A1               	movwf	SPI_Exchange8bit@data
  9410                           
  9411                           ;spi.c: 79: SSP1CON1bits.WCOL = 0;
  9412  134A  0024               	movlb	4	; select bank4
  9413  134B  1395               	bcf	21,7	;volatile
  9414                           
  9415                           ;spi.c: 81: SSPBUF = data;
  9416  134C  0020               	movlb	0	; select bank0
  9417  134D  0821               	movf	SPI_Exchange8bit@data,w
  9418  134E  0024               	movlb	4	; select bank4
  9419  134F  0091               	movwf	17	;volatile
  9420  1350                     l71:	
  9421                           ;spi.c: 83: while (SSP1STATbits.BF == 0x0) {
  9422                           
  9423  1350  1C14               	btfss	20,0	;volatile
  9424  1351  2B50               	goto	l71
  9425                           
  9426                           ;spi.c: 84: }
  9427                           ;spi.c: 86: return (SSPBUF);
  9428  1352  0811               	movf	17,w	;volatile
  9429  1353  0008               	return
  9430  1354                     __end_of_SPI_Exchange8bit:	
  9431                           
  9432                           	psect	text39
  9433  172F                     __ptext39:	
  9434 ;; *************** function _Two_Display *****************
  9435 ;; Defined at:
  9436 ;;		line 139 in file "mcc_generated_files/ht1621.c"
  9437 ;; Parameters:    Size  Location     Type
  9438 ;;  number          1    wreg     unsigned char 
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;  number          1   16[BANK0 ] unsigned char 
  9441 ;;  num             4   12[BANK0 ] unsigned char [4]
  9442 ;; Return value:  Size  Location     Type
  9443 ;;                  1    wreg      void 
  9444 ;; Registers used:
  9445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;Total ram usage:        6 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    5
  9458 ;; This function calls:
  9459 ;;		_WriteAll_1621
  9460 ;; This function is called by:
  9461 ;;		_temperature_process
  9462 ;; This function uses a non-reentrant model
  9463 ;;
  9464                           
  9465                           
  9466                           ;psect for function _Two_Display
  9467  172F                     _Two_Display:	
  9468                           
  9469                           ;incstack = 0
  9470                           ; Regs used in _Two_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9471                           ;Two_Display@number stored from wreg
  9472  172F  0020               	movlb	0	; select bank0
  9473  1730  00B0               	movwf	Two_Display@number
  9474                           
  9475                           ;ht1621.c: 141: unsigned char num[4]={0};
  9476  1731  0022               	movlb	2	; select bank2
  9477  1732  0823               	movf	(Two_Display@F2138+3)^(0+256),w
  9478  1733  0020               	movlb	0	; select bank0
  9479  1734  00AF               	movwf	Two_Display@num+3
  9480  1735  0022               	movlb	2	; select bank2
  9481  1736  0822               	movf	(Two_Display@F2138+2)^(0+256),w
  9482  1737  0020               	movlb	0	; select bank0
  9483  1738  00AE               	movwf	Two_Display@num+2
  9484  1739  0022               	movlb	2	; select bank2
  9485  173A  0821               	movf	(Two_Display@F2138+1)^(0+256),w
  9486  173B  0020               	movlb	0	; select bank0
  9487  173C  00AD               	movwf	Two_Display@num+1
  9488  173D  0022               	movlb	2	; select bank2
  9489  173E  0820               	movf	Two_Display@F2138^(0+256),w
  9490  173F  0020               	movlb	0	; select bank0
  9491  1740  00AC               	movwf	Two_Display@num
  9492                           
  9493                           ;ht1621.c: 142: num[1] = Dis_TAB[0];
  9494  1741  3000               	movlw	low (_Dis_TAB| (0+32768))
  9495  1742  0084               	movwf	4
  9496  1743  3098               	movlw	high (_Dis_TAB| (0+32768))
  9497  1744  0085               	movwf	5
  9498  1745  0800               	movf	0,w	;code access
  9499  1746  00AB               	movwf	??_Two_Display
  9500  1747  082B               	movf	??_Two_Display,w
  9501  1748  00AD               	movwf	Two_Display@num+1
  9502                           
  9503                           ;ht1621.c: 143: num[2] = Dis_TAB[number];
  9504  1749  0830               	movf	Two_Display@number,w
  9505  174A  3E00               	addlw	low (_Dis_TAB| (0+32768))
  9506  174B  0084               	movwf	4
  9507  174C  3098               	movlw	high (_Dis_TAB| (0+32768))
  9508  174D  1803               	skipnc
  9509  174E  3E01               	addlw	1
  9510  174F  0085               	movwf	5
  9511  1750  0800               	movf	0,w	;code access
  9512  1751  00AB               	movwf	??_Two_Display
  9513  1752  082B               	movf	??_Two_Display,w
  9514  1753  00AE               	movwf	Two_Display@num+2
  9515                           
  9516                           ;ht1621.c: 144: WriteAll_1621(0, num, 4);
  9517  1754  302C               	movlw	low Two_Display@num
  9518  1755  00A5               	movwf	WriteAll_1621@p
  9519  1756  3000               	movlw	high Two_Display@num
  9520  1757  00A6               	movwf	WriteAll_1621@p+1
  9521  1758  3004               	movlw	4
  9522  1759  00AB               	movwf	??_Two_Display
  9523  175A  082B               	movf	??_Two_Display,w
  9524  175B  00A7               	movwf	WriteAll_1621@cnt
  9525  175C  3000               	movlw	0
  9526  175D  3197  2760         	fcall	_WriteAll_1621
  9527  175F  0008               	return
  9528  1760                     __end_of_Two_Display:	
  9529                           
  9530                           	psect	text40
  9531  1760                     __ptext40:	
  9532 ;; *************** function _WriteAll_1621 *****************
  9533 ;; Defined at:
  9534 ;;		line 91 in file "mcc_generated_files/ht1621.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;  addr            1    wreg     unsigned char 
  9537 ;;  p               2    5[BANK0 ] PTR unsigned char 
  9538 ;;		 -> time_Display@num(4), err_Display@num(4), Two_Display@num(4), display_buff(4), 
  9539 ;;		 -> Dis_TAB(21), 
  9540 ;;  cnt             1    7[BANK0 ] unsigned char 
  9541 ;; Auto vars:     Size  Location     Type
  9542 ;;  addr            1    9[BANK0 ] unsigned char 
  9543 ;;  i               1   10[BANK0 ] unsigned char 
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  1    wreg      void 
  9546 ;; Registers used:
  9547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9553 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;Total ram usage:        6 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    4
  9560 ;; This function calls:
  9561 ;;		_SendBit_1621
  9562 ;;		_SendDataBit_1621
  9563 ;; This function is called by:
  9564 ;;		_main
  9565 ;;		_Tc_Display
  9566 ;;		_Two_Display
  9567 ;;		_err_Display
  9568 ;;		_time_Display
  9569 ;; This function uses a non-reentrant model
  9570 ;;
  9571                           
  9572                           
  9573                           ;psect for function _WriteAll_1621
  9574  1760                     _WriteAll_1621:	
  9575                           
  9576                           ;incstack = 0
  9577                           ; Regs used in _WriteAll_1621: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9578                           ;WriteAll_1621@addr stored from wreg
  9579  1760  0020               	movlb	0	; select bank0
  9580  1761  00A9               	movwf	WriteAll_1621@addr
  9581                           
  9582                           ;ht1621.c: 93: unsigned char i;
  9583                           ;ht1621.c: 94: do { LATC0 = 0; } while(0);
  9584  1762  0022               	movlb	2	; select bank2
  9585  1763  100E               	bcf	14,0	;volatile
  9586                           
  9587                           ;ht1621.c: 95: SendBit_1621(0xa0,3);
  9588  1764  3003               	movlw	3
  9589  1765  0020               	movlb	0	; select bank0
  9590  1766  00A8               	movwf	??_WriteAll_1621
  9591  1767  0828               	movf	??_WriteAll_1621,w
  9592  1768  00A1               	movwf	SendBit_1621@cnt
  9593  1769  30A0               	movlw	160
  9594  176A  3195  25A3  3197   	fcall	_SendBit_1621
  9595                           
  9596                           ;ht1621.c: 96: SendBit_1621(addr,6);
  9597  176D  3006               	movlw	6
  9598  176E  0020               	movlb	0	; select bank0
  9599  176F  00A8               	movwf	??_WriteAll_1621
  9600  1770  0828               	movf	??_WriteAll_1621,w
  9601  1771  00A1               	movwf	SendBit_1621@cnt
  9602  1772  0829               	movf	WriteAll_1621@addr,w
  9603  1773  3195  25A3  3197   	fcall	_SendBit_1621
  9604                           
  9605                           ;ht1621.c: 97: for(i =0; i <cnt; i ++,p++)
  9606  1776  0020               	movlb	0	; select bank0
  9607  1777  01AA               	clrf	WriteAll_1621@i
  9608  1778                     l5626:	
  9609  1778  0827               	movf	WriteAll_1621@cnt,w
  9610  1779  022A               	subwf	WriteAll_1621@i,w
  9611  177A  1803               	btfsc	3,0
  9612  177B  2F92               	goto	l781
  9613                           
  9614                           ;ht1621.c: 98: {
  9615                           ;ht1621.c: 99: SendDataBit_1621(*p,8);
  9616  177C  3008               	movlw	8
  9617  177D  00A8               	movwf	??_WriteAll_1621
  9618  177E  0828               	movf	??_WriteAll_1621,w
  9619  177F  00A1               	movwf	SendDataBit_1621@cnt
  9620  1780  0825               	movf	WriteAll_1621@p,w
  9621  1781  0084               	movwf	4
  9622  1782  0826               	movf	WriteAll_1621@p+1,w
  9623  1783  0085               	movwf	5
  9624  1784  0800               	movf	0,w	;code access
  9625  1785  3195  25C4  3197   	fcall	_SendDataBit_1621
  9626  1788  3001               	movlw	1
  9627  1789  0020               	movlb	0	; select bank0
  9628  178A  00A8               	movwf	??_WriteAll_1621
  9629  178B  0828               	movf	??_WriteAll_1621,w
  9630  178C  07AA               	addwf	WriteAll_1621@i,f
  9631  178D  3001               	movlw	1
  9632  178E  07A5               	addwf	WriteAll_1621@p,f
  9633  178F  3000               	movlw	0
  9634  1790  3DA6               	addwfc	WriteAll_1621@p+1,f
  9635  1791  2F78               	goto	l5626
  9636  1792                     l781:	
  9637                           ;ht1621.c: 100: }
  9638                           ;ht1621.c: 101: do { LATC0 = 1; } while(0);
  9639                           
  9640  1792  0022               	movlb	2	; select bank2
  9641  1793  140E               	bsf	14,0	;volatile
  9642  1794  0008               	return
  9643  1795                     __end_of_WriteAll_1621:	
  9644                           
  9645                           	psect	text41
  9646  15C4                     __ptext41:	
  9647 ;; *************** function _SendDataBit_1621 *****************
  9648 ;; Defined at:
  9649 ;;		line 42 in file "mcc_generated_files/ht1621.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  data            1    wreg     unsigned char 
  9652 ;;  cnt             1    1[BANK0 ] unsigned char 
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  data            1    3[BANK0 ] unsigned char 
  9655 ;;  i               1    4[BANK0 ] unsigned char 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;                  1    wreg      void 
  9658 ;; Registers used:
  9659 ;;		wreg, status,2, status,0
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9665 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;Total ram usage:        4 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    3
  9672 ;; This function calls:
  9673 ;;		Nothing
  9674 ;; This function is called by:
  9675 ;;		_WriteAll_1621
  9676 ;;		_Write_1621
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function _SendDataBit_1621
  9682  15C4                     _SendDataBit_1621:	
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _SendDataBit_1621: [wreg+status,2+status,0]
  9686                           ;SendDataBit_1621@data stored from wreg
  9687  15C4  0020               	movlb	0	; select bank0
  9688  15C5  00A3               	movwf	SendDataBit_1621@data
  9689                           
  9690                           ;ht1621.c: 44: unsigned char i;
  9691                           ;ht1621.c: 45: for(i =0; i <cnt; i ++)
  9692  15C6  01A4               	clrf	SendDataBit_1621@i
  9693  15C7                     l5536:	
  9694  15C7  0821               	movf	SendDataBit_1621@cnt,w
  9695  15C8  0224               	subwf	SendDataBit_1621@i,w
  9696  15C9  1803               	btfsc	3,0
  9697  15CA  0008               	return
  9698                           
  9699                           ;ht1621.c: 46: {
  9700                           ;ht1621.c: 47: if((data&0x01)==0) do { LATC2 = 0; } while(0);
  9701  15CB  1823               	btfsc	SendDataBit_1621@data,0
  9702  15CC  2DD0               	goto	l752
  9703  15CD  0022               	movlb	2	; select bank2
  9704  15CE  110E               	bcf	14,2	;volatile
  9705  15CF  2DD2               	goto	l754
  9706  15D0                     l752:	
  9707                           ;ht1621.c: 48: else do { LATC2 = 1; } while(0);
  9708                           
  9709  15D0  0022               	movlb	2	; select bank2
  9710  15D1  150E               	bsf	14,2	;volatile
  9711  15D2                     l754:	
  9712                           ;ht1621.c: 49: do { LATC1 = 0; } while(0);
  9713                           
  9714  15D2  108E               	bcf	14,1	;volatile
  9715                           
  9716                           ;ht1621.c: 50: _delay((unsigned long)((1)*(4000000/4000.0)));
  9717  15D3  30F9               	movlw	249
  9718  15D4  0020               	movlb	0	; select bank0
  9719  15D5  00A2               	movwf	??_SendDataBit_1621
  9720  15D6                     u6527:	
  9721  15D6  0000               	nop
  9722  15D7  0BA2               	decfsz	??_SendDataBit_1621,f
  9723  15D8  2DD6               	goto	u6527
  9724  15D9  3200               	nop2	;nop
  9725  15DA  0000               	nop
  9726                           
  9727                           ;ht1621.c: 51: do { LATC1 = 1; } while(0);
  9728  15DB  0022               	movlb	2	; select bank2
  9729  15DC  148E               	bsf	14,1	;volatile
  9730                           
  9731                           ;ht1621.c: 52: data>>=1;
  9732  15DD  1003               	clrc
  9733  15DE  0020               	movlb	0	; select bank0
  9734  15DF  0CA3               	rrf	SendDataBit_1621@data,f
  9735  15E0  3001               	movlw	1
  9736  15E1  00A2               	movwf	??_SendDataBit_1621
  9737  15E2  0822               	movf	??_SendDataBit_1621,w
  9738  15E3  07A4               	addwf	SendDataBit_1621@i,f
  9739  15E4  2DC7               	goto	l5536
  9740  15E5                     __end_of_SendDataBit_1621:	
  9741                           
  9742                           	psect	text42
  9743  132E                     __ptext42:	
  9744 ;; *************** function _Set_start_flag *****************
  9745 ;; Defined at:
  9746 ;;		line 18 in file "mcc_generated_files/save.c"
  9747 ;; Parameters:    Size  Location     Type
  9748 ;;		None
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;		None
  9751 ;; Return value:  Size  Location     Type
  9752 ;;                  1    wreg      void 
  9753 ;; Registers used:
  9754 ;;		None
  9755 ;; Tracked objects:
  9756 ;;		On entry : 0/0
  9757 ;;		On exit  : 0/0
  9758 ;;		Unchanged: 0/0
  9759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;Total ram usage:        0 bytes
  9765 ;; Hardware stack levels used:    1
  9766 ;; Hardware stack levels required when called:    3
  9767 ;; This function calls:
  9768 ;;		Nothing
  9769 ;; This function is called by:
  9770 ;;		_Key_Process
  9771 ;; This function uses a non-reentrant model
  9772 ;;
  9773                           
  9774                           
  9775                           ;psect for function _Set_start_flag
  9776  132E                     _Set_start_flag:	
  9777                           
  9778                           ;save.c: 20: Record_flag = 1;
  9779                           
  9780                           ;incstack = 0
  9781                           ; Regs used in _Set_start_flag: []
  9782  132E  0020               	movlb	0	; select bank0
  9783  132F  01E7               	clrf	_Record_flag
  9784  1330  0AE7               	incf	_Record_flag,f
  9785                           
  9786                           ;save.c: 21: do { LATA4 = 0; } while(0);
  9787  1331  0022               	movlb	2	; select bank2
  9788  1332  120C               	bcf	12,4	;volatile
  9789  1333  0008               	return
  9790  1334                     __end_of_Set_start_flag:	
  9791                           
  9792                           	psect	text43
  9793  1324                     __ptext43:	
  9794 ;; *************** function _Set_finish_flag *****************
  9795 ;; Defined at:
  9796 ;;		line 30 in file "mcc_generated_files/save.c"
  9797 ;; Parameters:    Size  Location     Type
  9798 ;;		None
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;		None
  9801 ;; Return value:  Size  Location     Type
  9802 ;;                  1    wreg      void 
  9803 ;; Registers used:
  9804 ;;		status,2
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;Total ram usage:        0 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; Hardware stack levels required when called:    3
  9817 ;; This function calls:
  9818 ;;		Nothing
  9819 ;; This function is called by:
  9820 ;;		_main
  9821 ;;		_Key_Process
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _Set_finish_flag
  9827  1324                     _Set_finish_flag:	
  9828                           
  9829                           ;save.c: 32: Record_flag = 0;
  9830                           
  9831                           ;incstack = 0
  9832                           ; Regs used in _Set_finish_flag: [status,2]
  9833  1324  0020               	movlb	0	; select bank0
  9834  1325  01E7               	clrf	_Record_flag
  9835                           
  9836                           ;save.c: 33: do { LATA4 = 1; } while(0);
  9837  1326  0022               	movlb	2	; select bank2
  9838  1327  160C               	bsf	12,4	;volatile
  9839  1328  0008               	return
  9840  1329                     __end_of_Set_finish_flag:	
  9841                           
  9842                           	psect	text44
  9843  140A                     __ptext44:	
  9844 ;; *************** function _SendCmd_1621 *****************
  9845 ;; Defined at:
  9846 ;;		line 62 in file "mcc_generated_files/ht1621.c"
  9847 ;; Parameters:    Size  Location     Type
  9848 ;;  command         1    wreg     unsigned char 
  9849 ;; Auto vars:     Size  Location     Type
  9850 ;;  command         1    6[BANK0 ] unsigned char 
  9851 ;; Return value:  Size  Location     Type
  9852 ;;                  1    wreg      void 
  9853 ;; Registers used:
  9854 ;;		wreg, status,2, status,0, pclath, cstack
  9855 ;; Tracked objects:
  9856 ;;		On entry : 0/0
  9857 ;;		On exit  : 0/0
  9858 ;;		Unchanged: 0/0
  9859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;Total ram usage:        2 bytes
  9865 ;; Hardware stack levels used:    1
  9866 ;; Hardware stack levels required when called:    4
  9867 ;; This function calls:
  9868 ;;		_SendBit_1621
  9869 ;; This function is called by:
  9870 ;;		_main
  9871 ;;		_Key_Process
  9872 ;; This function uses a non-reentrant model
  9873 ;;
  9874                           
  9875                           
  9876                           ;psect for function _SendCmd_1621
  9877  140A                     _SendCmd_1621:	
  9878                           
  9879                           ;incstack = 0
  9880                           ; Regs used in _SendCmd_1621: [wreg+status,2+status,0+pclath+cstack]
  9881                           ;SendCmd_1621@command stored from wreg
  9882  140A  0020               	movlb	0	; select bank0
  9883  140B  00A6               	movwf	SendCmd_1621@command
  9884                           
  9885                           ;ht1621.c: 64: do { LATC0 = 0; } while(0);
  9886  140C  0022               	movlb	2	; select bank2
  9887  140D  100E               	bcf	14,0	;volatile
  9888                           
  9889                           ;ht1621.c: 65: SendBit_1621(0x80,4);
  9890  140E  3004               	movlw	4
  9891  140F  0020               	movlb	0	; select bank0
  9892  1410  00A5               	movwf	??_SendCmd_1621
  9893  1411  0825               	movf	??_SendCmd_1621,w
  9894  1412  00A1               	movwf	SendBit_1621@cnt
  9895  1413  3080               	movlw	128
  9896  1414  3195  25A3  3194   	fcall	_SendBit_1621
  9897                           
  9898                           ;ht1621.c: 66: SendBit_1621(command,8);
  9899  1417  3008               	movlw	8
  9900  1418  0020               	movlb	0	; select bank0
  9901  1419  00A5               	movwf	??_SendCmd_1621
  9902  141A  0825               	movf	??_SendCmd_1621,w
  9903  141B  00A1               	movwf	SendBit_1621@cnt
  9904  141C  0826               	movf	SendCmd_1621@command,w
  9905  141D  3195  25A3         	fcall	_SendBit_1621
  9906                           
  9907                           ;ht1621.c: 67: do { LATC0 = 1; } while(0);
  9908  141F  0022               	movlb	2	; select bank2
  9909  1420  140E               	bsf	14,0	;volatile
  9910  1421  0008               	return
  9911  1422                     __end_of_SendCmd_1621:	
  9912                           
  9913                           	psect	text45
  9914  15A3                     __ptext45:	
  9915 ;; *************** function _SendBit_1621 *****************
  9916 ;; Defined at:
  9917 ;;		line 22 in file "mcc_generated_files/ht1621.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;  data            1    wreg     unsigned char 
  9920 ;;  cnt             1    1[BANK0 ] unsigned char 
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;  data            1    3[BANK0 ] unsigned char 
  9923 ;;  i               1    4[BANK0 ] unsigned char 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  1    wreg      void 
  9926 ;; Registers used:
  9927 ;;		wreg, status,2, status,0
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9933 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;Total ram usage:        4 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    3
  9940 ;; This function calls:
  9941 ;;		Nothing
  9942 ;; This function is called by:
  9943 ;;		_SendCmd_1621
  9944 ;;		_WriteAll_1621
  9945 ;;		_Write_1621
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           
  9950                           ;psect for function _SendBit_1621
  9951  15A3                     _SendBit_1621:	
  9952                           
  9953                           ;incstack = 0
  9954                           ; Regs used in _SendBit_1621: [wreg+status,2+status,0]
  9955                           ;SendBit_1621@data stored from wreg
  9956  15A3  0020               	movlb	0	; select bank0
  9957  15A4  00A3               	movwf	SendBit_1621@data
  9958                           
  9959                           ;ht1621.c: 24: unsigned char i;
  9960                           ;ht1621.c: 25: for(i =0; i <cnt; i ++)
  9961  15A5  01A4               	clrf	SendBit_1621@i
  9962  15A6                     l5524:	
  9963  15A6  0821               	movf	SendBit_1621@cnt,w
  9964  15A7  0224               	subwf	SendBit_1621@i,w
  9965  15A8  1803               	btfsc	3,0
  9966  15A9  0008               	return
  9967                           
  9968                           ;ht1621.c: 26: {
  9969                           ;ht1621.c: 27: if((data&0x80)==0) do { LATC2 = 0; } while(0);
  9970  15AA  1BA3               	btfsc	SendBit_1621@data,7
  9971  15AB  2DAF               	goto	l736
  9972  15AC  0022               	movlb	2	; select bank2
  9973  15AD  110E               	bcf	14,2	;volatile
  9974  15AE  2DB1               	goto	l738
  9975  15AF                     l736:	
  9976                           ;ht1621.c: 28: else do { LATC2 = 1; } while(0);
  9977                           
  9978  15AF  0022               	movlb	2	; select bank2
  9979  15B0  150E               	bsf	14,2	;volatile
  9980  15B1                     l738:	
  9981                           ;ht1621.c: 29: do { LATC1 = 0; } while(0);
  9982                           
  9983  15B1  108E               	bcf	14,1	;volatile
  9984                           
  9985                           ;ht1621.c: 30: _delay((unsigned long)((1)*(4000000/4000.0)));
  9986  15B2  30F9               	movlw	249
  9987  15B3  0020               	movlb	0	; select bank0
  9988  15B4  00A2               	movwf	??_SendBit_1621
  9989  15B5                     u6537:	
  9990  15B5  0000               	nop
  9991  15B6  0BA2               	decfsz	??_SendBit_1621,f
  9992  15B7  2DB5               	goto	u6537
  9993  15B8  3200               	nop2	;nop
  9994  15B9  0000               	nop
  9995                           
  9996                           ;ht1621.c: 31: do { LATC1 = 1; } while(0);
  9997  15BA  0022               	movlb	2	; select bank2
  9998  15BB  148E               	bsf	14,1	;volatile
  9999                           
 10000                           ;ht1621.c: 32: data<<=1;
 10001  15BC  1003               	clrc
 10002  15BD  0020               	movlb	0	; select bank0
 10003  15BE  0DA3               	rlf	SendBit_1621@data,f
 10004  15BF  3001               	movlw	1
 10005  15C0  00A2               	movwf	??_SendBit_1621
 10006  15C1  0822               	movf	??_SendBit_1621,w
 10007  15C2  07A4               	addwf	SendBit_1621@i,f
 10008  15C3  2DA6               	goto	l5524
 10009  15C4                     __end_of_SendBit_1621:	
 10010                           
 10011                           	psect	text46
 10012  1607                     __ptext46:	
 10013 ;; *************** function _Key_Scan *****************
 10014 ;; Defined at:
 10015 ;;		line 20 in file "mcc_generated_files/key.c"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;		None
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;  Key_val         1    3[BANK0 ] unsigned char 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  1    wreg      unsigned char 
 10022 ;; Registers used:
 10023 ;;		wreg
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;Total ram usage:        3 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    3
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_Key_Process
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           
 10044                           ;psect for function _Key_Scan
 10045  1607                     _Key_Scan:	
 10046                           
 10047                           ;key.c: 22: unsigned char Key_val=0xff;
 10048                           
 10049                           ;incstack = 0
 10050                           ; Regs used in _Key_Scan: [wreg]
 10051  1607  30FF               	movlw	255
 10052  1608  0020               	movlb	0	; select bank0
 10053  1609  00A1               	movwf	??_Key_Scan
 10054  160A  0821               	movf	??_Key_Scan,w
 10055  160B  00A3               	movwf	Key_Scan@Key_val
 10056                           
 10057                           ;key.c: 23: if( RA7 == 0 || RB5 == 0 )
 10058  160C  1F8C               	btfss	12,7	;volatile
 10059  160D  2E10               	goto	l6354
 10060  160E  1A8D               	btfsc	13,5	;volatile
 10061  160F  2E28               	goto	l977
 10062  1610                     l6354:	
 10063                           
 10064                           ;key.c: 24: {
 10065                           ;key.c: 25: _delay((unsigned long)((10)*(4000000/4000.0)));
 10066  1610  300D               	movlw	13
 10067  1611  00A2               	movwf	??_Key_Scan+1
 10068  1612  30FB               	movlw	251
 10069  1613  00A1               	movwf	??_Key_Scan
 10070  1614                     u6547:	
 10071  1614  0BA1               	decfsz	??_Key_Scan,f
 10072  1615  2E14               	goto	u6547
 10073  1616  0BA2               	decfsz	??_Key_Scan+1,f
 10074  1617  2E14               	goto	u6547
 10075  1618  3200               	nop2
 10076                           
 10077                           ;key.c: 26: if( RA7 == 0 || RB5 == 0)
 10078  1619  0020               	movlb	0	; select bank0
 10079  161A  1F8C               	btfss	12,7	;volatile
 10080  161B  2E1E               	goto	l982
 10081  161C  1A8D               	btfsc	13,5	;volatile
 10082  161D  2E28               	goto	l977
 10083  161E                     l982:	
 10084                           
 10085                           ;key.c: 27: {
 10086                           ;key.c: 28: if(RB5 == 0 ) Key_val = 0x01;
 10087  161E  1A8D               	btfsc	13,5	;volatile
 10088  161F  2E22               	goto	l983
 10089  1620  01A3               	clrf	Key_Scan@Key_val
 10090  1621  0AA3               	incf	Key_Scan@Key_val,f
 10091  1622                     l983:	
 10092                           
 10093                           ;key.c: 29: if(RA7 == 0 ) Key_val = 0x02;
 10094  1622  1B8C               	btfsc	12,7	;volatile
 10095  1623  2E28               	goto	l977
 10096  1624  3002               	movlw	2
 10097  1625  00A1               	movwf	??_Key_Scan
 10098  1626  0821               	movf	??_Key_Scan,w
 10099  1627  00A3               	movwf	Key_Scan@Key_val
 10100  1628                     l977:	
 10101                           
 10102                           ;key.c: 30: }
 10103                           ;key.c: 31: }
 10104                           ;key.c: 32: return Key_val;
 10105  1628  0823               	movf	Key_Scan@Key_val,w
 10106  1629  0008               	return
 10107  162A                     __end_of_Key_Scan:	
 10108                           
 10109                           	psect	text47
 10110  1395                     __ptext47:	
 10111 ;; *************** function _Com_Process *****************
 10112 ;; Defined at:
 10113 ;;		line 19 in file "mcc_generated_files/com.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;		None
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;		None
 10118 ;; Return value:  Size  Location     Type
 10119 ;;                  2  380[None  ] int 
 10120 ;; Registers used:
 10121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10122 ;; Tracked objects:
 10123 ;;		On entry : 0/0
 10124 ;;		On exit  : 0/0
 10125 ;;		Unchanged: 0/0
 10126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;Total ram usage:        0 bytes
 10132 ;; Hardware stack levels used:    1
 10133 ;; Hardware stack levels required when called:    7
 10134 ;; This function calls:
 10135 ;;		_Inf_to_Com
 10136 ;;		_Set_time_from_Com
 10137 ;; This function is called by:
 10138 ;;		_main
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           
 10143                           ;psect for function _Com_Process
 10144  1395                     _Com_Process:	
 10145                           
 10146                           ;com.c: 21: if(Set_time_cmd_flag == 1)
 10147                           
 10148                           ;incstack = 0
 10149                           ; Regs used in _Com_Process: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10150  1395  0022               	movlb	2	; select bank2
 10151  1396  033A               	decf	_Set_time_cmd_flag^(0+256),w
 10152  1397  1D03               	btfss	3,2
 10153  1398  2B9E               	goto	l6596
 10154                           
 10155                           ;com.c: 22: {
 10156                           ;com.c: 23: Set_time_from_Com();
 10157  1399  3188  20C3  3193   	fcall	_Set_time_from_Com
 10158                           
 10159                           ;com.c: 24: Set_time_cmd_flag = 0;
 10160  139C  0022               	movlb	2	; select bank2
 10161  139D  01BA               	clrf	_Set_time_cmd_flag^(0+256)
 10162  139E                     l6596:	
 10163                           
 10164                           ;com.c: 25: }
 10165                           ;com.c: 26: if(Inf_cmd_flag == 1)
 10166  139E  0338               	decf	_Inf_cmd_flag^(0+256),w
 10167  139F  1D03               	btfss	3,2
 10168  13A0  0008               	return
 10169                           
 10170                           ;com.c: 27: {
 10171                           ;com.c: 28: Inf_to_Com();
 10172  13A1  3185  253B         	fcall	_Inf_to_Com
 10173                           
 10174                           ;com.c: 29: Inf_cmd_flag = 0;
 10175  13A3  0022               	movlb	2	; select bank2
 10176  13A4  01B8               	clrf	_Inf_cmd_flag^(0+256)
 10177  13A5  0008               	return
 10178  13A6                     __end_of_Com_Process:	
 10179                           
 10180                           	psect	text48
 10181  08C3                     __ptext48:	
 10182 ;; *************** function _Set_time_from_Com *****************
 10183 ;; Defined at:
 10184 ;;		line 39 in file "mcc_generated_files/com.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;		None
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;		None
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  1    wreg      void 
 10191 ;; Registers used:
 10192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10201 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;Total ram usage:        1 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    6
 10205 ;; This function calls:
 10206 ;;		_Bq32k_Rtc_Read_Time
 10207 ;;		_Bq32k_Rtc_Write_Time
 10208 ;;		_Read_time_to_Com
 10209 ;; This function is called by:
 10210 ;;		_Com_Process
 10211 ;; This function uses a non-reentrant model
 10212 ;;
 10213                           
 10214                           
 10215                           ;psect for function _Set_time_from_Com
 10216  08C3                     _Set_time_from_Com:	
 10217                           
 10218                           ;com.c: 41: rtc_tm.years = Usart_Rx_Buff[4];
 10219                           
 10220                           ;incstack = 0
 10221                           ; Regs used in _Set_time_from_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10222  08C3  0023               	movlb	3	; select bank3
 10223  08C4  083C               	movf	(_Usart_Rx_Buff^(0+384)+4),w
 10224  08C5  0020               	movlb	0	; select bank0
 10225  08C6  00BF               	movwf	??_Set_time_from_Com
 10226  08C7  083F               	movf	??_Set_time_from_Com,w
 10227  08C8  0022               	movlb	2	; select bank2
 10228  08C9  00E7               	movwf	(_rtc_tm^(0+256)+6)
 10229                           
 10230                           ;com.c: 42: rtc_tm.month= Usart_Rx_Buff[5];
 10231  08CA  0023               	movlb	3	; select bank3
 10232  08CB  083D               	movf	(_Usart_Rx_Buff^(0+384)+5),w
 10233  08CC  0020               	movlb	0	; select bank0
 10234  08CD  00BF               	movwf	??_Set_time_from_Com
 10235  08CE  083F               	movf	??_Set_time_from_Com,w
 10236  08CF  0022               	movlb	2	; select bank2
 10237  08D0  00E6               	movwf	(_rtc_tm^(0+256)+5)
 10238                           
 10239                           ;com.c: 43: rtc_tm.date= Usart_Rx_Buff[6];
 10240  08D1  0023               	movlb	3	; select bank3
 10241  08D2  083E               	movf	(_Usart_Rx_Buff^(0+384)+6),w
 10242  08D3  0020               	movlb	0	; select bank0
 10243  08D4  00BF               	movwf	??_Set_time_from_Com
 10244  08D5  083F               	movf	??_Set_time_from_Com,w
 10245  08D6  0022               	movlb	2	; select bank2
 10246  08D7  00E5               	movwf	(_rtc_tm^(0+256)+4)
 10247                           
 10248                           ;com.c: 44: rtc_tm.hours= Usart_Rx_Buff[7];
 10249  08D8  0023               	movlb	3	; select bank3
 10250  08D9  083F               	movf	(_Usart_Rx_Buff^(0+384)+7),w
 10251  08DA  0020               	movlb	0	; select bank0
 10252  08DB  00BF               	movwf	??_Set_time_from_Com
 10253  08DC  083F               	movf	??_Set_time_from_Com,w
 10254  08DD  0022               	movlb	2	; select bank2
 10255  08DE  00E3               	movwf	(_rtc_tm^(0+256)+2)
 10256                           
 10257                           ;com.c: 45: rtc_tm.minutes= Usart_Rx_Buff[8];
 10258  08DF  0023               	movlb	3	; select bank3
 10259  08E0  0840               	movf	(_Usart_Rx_Buff^(0+384)+8),w
 10260  08E1  0020               	movlb	0	; select bank0
 10261  08E2  00BF               	movwf	??_Set_time_from_Com
 10262  08E3  083F               	movf	??_Set_time_from_Com,w
 10263  08E4  0022               	movlb	2	; select bank2
 10264  08E5  00E2               	movwf	(_rtc_tm^(0+256)+1)
 10265                           
 10266                           ;com.c: 46: rtc_tm.seconds= Usart_Rx_Buff[9];
 10267  08E6  0023               	movlb	3	; select bank3
 10268  08E7  0841               	movf	(_Usart_Rx_Buff^(0+384)+9),w
 10269  08E8  0020               	movlb	0	; select bank0
 10270  08E9  00BF               	movwf	??_Set_time_from_Com
 10271  08EA  083F               	movf	??_Set_time_from_Com,w
 10272  08EB  0022               	movlb	2	; select bank2
 10273  08EC  00E1               	movwf	_rtc_tm^(0+256)
 10274                           
 10275                           ;com.c: 47: rtc_tm.wday= Usart_Rx_Buff[10];
 10276  08ED  0023               	movlb	3	; select bank3
 10277  08EE  0842               	movf	(_Usart_Rx_Buff^(0+384)+10),w
 10278  08EF  0020               	movlb	0	; select bank0
 10279  08F0  00BF               	movwf	??_Set_time_from_Com
 10280  08F1  083F               	movf	??_Set_time_from_Com,w
 10281  08F2  0022               	movlb	2	; select bank2
 10282  08F3  00E4               	movwf	(_rtc_tm^(0+256)+3)
 10283                           
 10284                           ;com.c: 48: Bq32k_Rtc_Write_Time(&rtc_tm);
 10285  08F4  3061               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
 10286  08F5  318A  22BF  3188   	fcall	_Bq32k_Rtc_Write_Time
 10287                           
 10288                           ;com.c: 49: Bq32k_Rtc_Read_Time(&rtc_tm);
 10289  08F8  3061               	movlw	(low (_rtc_tm| (0+256)))& (0+255)
 10290  08F9  318B  23F8  3188   	fcall	_Bq32k_Rtc_Read_Time
 10291                           
 10292                           ;com.c: 50: Read_time_to_Com();
 10293  08FC  318B  2326         	fcall	_Read_time_to_Com
 10294  08FE  0008               	return
 10295  08FF                     __end_of_Set_time_from_Com:	
 10296                           
 10297                           	psect	text49
 10298  0B26                     __ptext49:	
 10299 ;; *************** function _Read_time_to_Com *****************
 10300 ;; Defined at:
 10301 ;;		line 59 in file "mcc_generated_files/com.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;		None
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;  tmp_buf        16   12[BANK0 ] unsigned char [16]
 10306 ;;  crc_tmp         2   28[BANK0 ] unsigned int 
 10307 ;;  i               1   30[BANK0 ] unsigned char 
 10308 ;; Return value:  Size  Location     Type
 10309 ;;                  1    wreg      void 
 10310 ;; Registers used:
 10311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;Total ram usage:       20 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:    4
 10324 ;; This function calls:
 10325 ;;		_CRC_cal
 10326 ;;		_EUSART_Write
 10327 ;; This function is called by:
 10328 ;;		_Set_time_from_Com
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           
 10333                           ;psect for function _Read_time_to_Com
 10334  0B26                     _Read_time_to_Com:	
 10335                           
 10336                           ;com.c: 61: unsigned int crc_tmp=0;
 10337                           
 10338                           ;incstack = 0
 10339                           ; Regs used in _Read_time_to_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10340  0B26  0020               	movlb	0	; select bank0
 10341  0B27  01BC               	clrf	Read_time_to_Com@crc_tmp
 10342  0B28  01BD               	clrf	Read_time_to_Com@crc_tmp+1
 10343                           
 10344                           ;com.c: 62: unsigned char tmp_buf[16];
 10345                           ;com.c: 63: unsigned char i;
 10346                           ;com.c: 64: tmp_buf[0] = 0xfe;
 10347  0B29  30FE               	movlw	254
 10348  0B2A  00AB               	movwf	??_Read_time_to_Com
 10349  0B2B  082B               	movf	??_Read_time_to_Com,w
 10350  0B2C  00AC               	movwf	Read_time_to_Com@tmp_buf
 10351                           
 10352                           ;com.c: 65: tmp_buf[1] = 0xfe;
 10353  0B2D  30FE               	movlw	254
 10354  0B2E  00AB               	movwf	??_Read_time_to_Com
 10355  0B2F  082B               	movf	??_Read_time_to_Com,w
 10356  0B30  00AD               	movwf	Read_time_to_Com@tmp_buf+1
 10357                           
 10358                           ;com.c: 66: tmp_buf[2] = 0X02;
 10359  0B31  3002               	movlw	2
 10360  0B32  00AB               	movwf	??_Read_time_to_Com
 10361  0B33  082B               	movf	??_Read_time_to_Com,w
 10362  0B34  00AE               	movwf	Read_time_to_Com@tmp_buf+2
 10363                           
 10364                           ;com.c: 67: tmp_buf[3] = 0x07;
 10365  0B35  3007               	movlw	7
 10366  0B36  00AB               	movwf	??_Read_time_to_Com
 10367  0B37  082B               	movf	??_Read_time_to_Com,w
 10368  0B38  00AF               	movwf	Read_time_to_Com@tmp_buf+3
 10369                           
 10370                           ;com.c: 68: tmp_buf[4] = rtc_tm.years;
 10371  0B39  0022               	movlb	2	; select bank2
 10372  0B3A  0867               	movf	(_rtc_tm^(0+256)+6),w
 10373  0B3B  0020               	movlb	0	; select bank0
 10374  0B3C  00AB               	movwf	??_Read_time_to_Com
 10375  0B3D  082B               	movf	??_Read_time_to_Com,w
 10376  0B3E  00B0               	movwf	Read_time_to_Com@tmp_buf+4
 10377                           
 10378                           ;com.c: 69: tmp_buf[5] = rtc_tm.month;
 10379  0B3F  0022               	movlb	2	; select bank2
 10380  0B40  0866               	movf	(_rtc_tm^(0+256)+5),w
 10381  0B41  0020               	movlb	0	; select bank0
 10382  0B42  00AB               	movwf	??_Read_time_to_Com
 10383  0B43  082B               	movf	??_Read_time_to_Com,w
 10384  0B44  00B1               	movwf	Read_time_to_Com@tmp_buf+5
 10385                           
 10386                           ;com.c: 70: tmp_buf[6] = rtc_tm.date;
 10387  0B45  0022               	movlb	2	; select bank2
 10388  0B46  0865               	movf	(_rtc_tm^(0+256)+4),w
 10389  0B47  0020               	movlb	0	; select bank0
 10390  0B48  00AB               	movwf	??_Read_time_to_Com
 10391  0B49  082B               	movf	??_Read_time_to_Com,w
 10392  0B4A  00B2               	movwf	Read_time_to_Com@tmp_buf+6
 10393                           
 10394                           ;com.c: 71: tmp_buf[7] = rtc_tm.hours;
 10395  0B4B  0022               	movlb	2	; select bank2
 10396  0B4C  0863               	movf	(_rtc_tm^(0+256)+2),w
 10397  0B4D  0020               	movlb	0	; select bank0
 10398  0B4E  00AB               	movwf	??_Read_time_to_Com
 10399  0B4F  082B               	movf	??_Read_time_to_Com,w
 10400  0B50  00B3               	movwf	Read_time_to_Com@tmp_buf+7
 10401                           
 10402                           ;com.c: 72: tmp_buf[8] = rtc_tm.minutes;
 10403  0B51  0022               	movlb	2	; select bank2
 10404  0B52  0862               	movf	(_rtc_tm^(0+256)+1),w
 10405  0B53  0020               	movlb	0	; select bank0
 10406  0B54  00AB               	movwf	??_Read_time_to_Com
 10407  0B55  082B               	movf	??_Read_time_to_Com,w
 10408  0B56  00B4               	movwf	Read_time_to_Com@tmp_buf+8
 10409                           
 10410                           ;com.c: 73: tmp_buf[9] = rtc_tm.seconds;
 10411  0B57  0022               	movlb	2	; select bank2
 10412  0B58  0861               	movf	_rtc_tm^(0+256),w
 10413  0B59  0020               	movlb	0	; select bank0
 10414  0B5A  00AB               	movwf	??_Read_time_to_Com
 10415  0B5B  082B               	movf	??_Read_time_to_Com,w
 10416  0B5C  00B5               	movwf	Read_time_to_Com@tmp_buf+9
 10417                           
 10418                           ;com.c: 74: tmp_buf[10] = rtc_tm.wday;
 10419  0B5D  0022               	movlb	2	; select bank2
 10420  0B5E  0864               	movf	(_rtc_tm^(0+256)+3),w
 10421  0B5F  0020               	movlb	0	; select bank0
 10422  0B60  00AB               	movwf	??_Read_time_to_Com
 10423  0B61  082B               	movf	??_Read_time_to_Com,w
 10424  0B62  00B6               	movwf	Read_time_to_Com@tmp_buf+10
 10425                           
 10426                           ;com.c: 75: crc_tmp = CRC_cal(tmp_buf,14);
 10427  0B63  300E               	movlw	14
 10428  0B64  00AB               	movwf	??_Read_time_to_Com
 10429  0B65  082B               	movf	??_Read_time_to_Com,w
 10430  0B66  00A1               	movwf	CRC_cal@frame_len
 10431  0B67  302C               	movlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
 10432  0B68  318D  25C5  318B   	fcall	_CRC_cal
 10433  0B6B  0020               	movlb	0	; select bank0
 10434  0B6C  0822               	movf	?_CRC_cal+1,w
 10435  0B6D  00BD               	movwf	Read_time_to_Com@crc_tmp+1
 10436  0B6E  0821               	movf	?_CRC_cal,w
 10437  0B6F  00BC               	movwf	Read_time_to_Com@crc_tmp
 10438                           
 10439                           ;com.c: 76: tmp_buf[11] = crc_tmp & 0xff;
 10440  0B70  083C               	movf	Read_time_to_Com@crc_tmp,w
 10441  0B71  00AB               	movwf	??_Read_time_to_Com
 10442  0B72  082B               	movf	??_Read_time_to_Com,w
 10443  0B73  00B7               	movwf	Read_time_to_Com@tmp_buf+11
 10444                           
 10445                           ;com.c: 77: tmp_buf[12] = crc_tmp >>8;
 10446  0B74  083D               	movf	Read_time_to_Com@crc_tmp+1,w
 10447  0B75  00AB               	movwf	??_Read_time_to_Com
 10448  0B76  082B               	movf	??_Read_time_to_Com,w
 10449  0B77  00B8               	movwf	Read_time_to_Com@tmp_buf+12
 10450                           
 10451                           ;com.c: 78: tmp_buf[13] = 0xbb;
 10452  0B78  30BB               	movlw	187
 10453  0B79  00AB               	movwf	??_Read_time_to_Com
 10454  0B7A  082B               	movf	??_Read_time_to_Com,w
 10455  0B7B  00B9               	movwf	Read_time_to_Com@tmp_buf+13
 10456                           
 10457                           ;com.c: 79: for(i=0;i<14;i++)
 10458  0B7C  01BE               	clrf	Read_time_to_Com@i
 10459  0B7D                     L13:	
 10460  0B7D  300E               	movlw	14
 10461  0B7E  023E               	subwf	Read_time_to_Com@i,w
 10462  0B7F  1803               	btfsc	3,0
 10463  0B80  0008               	return
 10464                           
 10465                           ;com.c: 80: {
 10466                           ;com.c: 81: EUSART_Write(tmp_buf[i]);
 10467  0B81  083E               	movf	Read_time_to_Com@i,w
 10468  0B82  3E2C               	addlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
 10469  0B83  0086               	movwf	6
 10470  0B84  0187               	clrf	7
 10471  0B85  0801               	movf	1,w
 10472  0B86  3193  2354  318B   	fcall	_EUSART_Write
 10473  0B89  3001               	movlw	1
 10474  0B8A  0020               	movlb	0	; select bank0
 10475  0B8B  00AB               	movwf	??_Read_time_to_Com
 10476  0B8C  082B               	movf	??_Read_time_to_Com,w
 10477  0B8D  07BE               	addwf	Read_time_to_Com@i,f
 10478  0B8E  2B7D               	goto	L13
 10479  0B8F                     __end_of_Read_time_to_Com:	
 10480                           
 10481                           	psect	text50
 10482  0ABF                     __ptext50:	
 10483 ;; *************** function _Bq32k_Rtc_Write_Time *****************
 10484 ;; Defined at:
 10485 ;;		line 54 in file "mcc_generated_files/bq32k.c"
 10486 ;; Parameters:    Size  Location     Type
 10487 ;;  p               1    wreg     PTR struct bq32k_regs
 10488 ;;		 -> rtc_tm(7), 
 10489 ;; Auto vars:     Size  Location     Type
 10490 ;;  p               1   30[BANK0 ] PTR struct bq32k_regs
 10491 ;;		 -> rtc_tm(7), 
 10492 ;;  temp           10   20[BANK0 ] unsigned char [10]
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  1    wreg      void 
 10495 ;; Registers used:
 10496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:       13 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    5
 10509 ;; This function calls:
 10510 ;;		_I2C_Send_Buffer
 10511 ;;		_bin2bcd
 10512 ;; This function is called by:
 10513 ;;		_Set_time_from_Com
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           
 10518                           ;psect for function _Bq32k_Rtc_Write_Time
 10519  0ABF                     _Bq32k_Rtc_Write_Time:	
 10520                           
 10521                           ;incstack = 0
 10522                           ; Regs used in _Bq32k_Rtc_Write_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10523                           ;Bq32k_Rtc_Write_Time@p stored from wreg
 10524  0ABF  0020               	movlb	0	; select bank0
 10525  0AC0  00BE               	movwf	Bq32k_Rtc_Write_Time@p
 10526                           
 10527                           ;bq32k.c: 56: unsigned char temp[10] ;
 10528                           ;bq32k.c: 57: temp[0] = bin2bcd(p->seconds);
 10529  0AC1  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10530  0AC2  0086               	movwf	6
 10531  0AC3  3001               	movlw	1	; select bank2/3
 10532  0AC4  0087               	movwf	7
 10533  0AC5  0801               	movf	1,w
 10534  0AC6  3196  26D1  318A   	fcall	_bin2bcd
 10535  0AC9  0020               	movlb	0	; select bank0
 10536  0ACA  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10537  0ACB  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10538  0ACC  00B4               	movwf	Bq32k_Rtc_Write_Time@temp
 10539                           
 10540                           ;bq32k.c: 58: temp[1] = bin2bcd(p->minutes);
 10541  0ACD  0A3E               	incf	Bq32k_Rtc_Write_Time@p,w
 10542  0ACE  0086               	movwf	6
 10543  0ACF  3001               	movlw	1	; select bank2/3
 10544  0AD0  0087               	movwf	7
 10545  0AD1  0801               	movf	1,w
 10546  0AD2  3196  26D1  318A   	fcall	_bin2bcd
 10547  0AD5  0020               	movlb	0	; select bank0
 10548  0AD6  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10549  0AD7  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10550  0AD8  00B5               	movwf	Bq32k_Rtc_Write_Time@temp+1
 10551                           
 10552                           ;bq32k.c: 59: temp[2] = bin2bcd(p->hours);
 10553  0AD9  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10554  0ADA  3E02               	addlw	2
 10555  0ADB  0086               	movwf	6
 10556  0ADC  3001               	movlw	1	; select bank2/3
 10557  0ADD  0087               	movwf	7
 10558  0ADE  0801               	movf	1,w
 10559  0ADF  3196  26D1  318A   	fcall	_bin2bcd
 10560  0AE2  0020               	movlb	0	; select bank0
 10561  0AE3  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10562  0AE4  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10563  0AE5  00B6               	movwf	Bq32k_Rtc_Write_Time@temp+2
 10564                           
 10565                           ;bq32k.c: 60: temp[3] = bin2bcd(p->wday);
 10566  0AE6  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10567  0AE7  3E03               	addlw	3
 10568  0AE8  0086               	movwf	6
 10569  0AE9  3001               	movlw	1	; select bank2/3
 10570  0AEA  0087               	movwf	7
 10571  0AEB  0801               	movf	1,w
 10572  0AEC  3196  26D1  318A   	fcall	_bin2bcd
 10573  0AEF  0020               	movlb	0	; select bank0
 10574  0AF0  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10575  0AF1  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10576  0AF2  00B7               	movwf	Bq32k_Rtc_Write_Time@temp+3
 10577                           
 10578                           ;bq32k.c: 61: temp[4] = bin2bcd(p->date);
 10579  0AF3  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10580  0AF4  3E04               	addlw	4
 10581  0AF5  0086               	movwf	6
 10582  0AF6  3001               	movlw	1	; select bank2/3
 10583  0AF7  0087               	movwf	7
 10584  0AF8  0801               	movf	1,w
 10585  0AF9  3196  26D1  318A   	fcall	_bin2bcd
 10586  0AFC  0020               	movlb	0	; select bank0
 10587  0AFD  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10588  0AFE  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10589  0AFF  00B8               	movwf	Bq32k_Rtc_Write_Time@temp+4
 10590                           
 10591                           ;bq32k.c: 62: temp[5] = bin2bcd(p->month);
 10592  0B00  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10593  0B01  3E05               	addlw	5
 10594  0B02  0086               	movwf	6
 10595  0B03  3001               	movlw	1	; select bank2/3
 10596  0B04  0087               	movwf	7
 10597  0B05  0801               	movf	1,w
 10598  0B06  3196  26D1  318A   	fcall	_bin2bcd
 10599  0B09  0020               	movlb	0	; select bank0
 10600  0B0A  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10601  0B0B  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10602  0B0C  00B9               	movwf	Bq32k_Rtc_Write_Time@temp+5
 10603                           
 10604                           ;bq32k.c: 63: temp[6] = bin2bcd(p->years);
 10605  0B0D  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10606  0B0E  3E06               	addlw	6
 10607  0B0F  0086               	movwf	6
 10608  0B10  3001               	movlw	1	; select bank2/3
 10609  0B11  0087               	movwf	7
 10610  0B12  0801               	movf	1,w
 10611  0B13  3196  26D1  318A   	fcall	_bin2bcd
 10612  0B16  0020               	movlb	0	; select bank0
 10613  0B17  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10614  0B18  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10615  0B19  00BA               	movwf	Bq32k_Rtc_Write_Time@temp+6
 10616                           
 10617                           ;bq32k.c: 64: I2C_Send_Buffer( 0 , temp , 7);
 10618  0B1A  3034               	movlw	(low (Bq32k_Rtc_Write_Time@temp| 0))& (0+255)
 10619  0B1B  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10620  0B1C  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10621  0B1D  00A4               	movwf	I2C_Send_Buffer@buff
 10622  0B1E  3007               	movlw	7
 10623  0B1F  00B3               	movwf	??_Bq32k_Rtc_Write_Time+1
 10624  0B20  0833               	movf	??_Bq32k_Rtc_Write_Time+1,w
 10625  0B21  00A5               	movwf	I2C_Send_Buffer@Length
 10626  0B22  3000               	movlw	0
 10627  0B23  3188  2088         	fcall	_I2C_Send_Buffer
 10628  0B25  0008               	return
 10629  0B26                     __end_of_Bq32k_Rtc_Write_Time:	
 10630                           
 10631                           	psect	text51
 10632  16D1                     __ptext51:	
 10633 ;; *************** function _bin2bcd *****************
 10634 ;; Defined at:
 10635 ;;		line 84 in file "mcc_generated_files/bq32k.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;  val             1    wreg     unsigned char 
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;  val             1   17[BANK0 ] unsigned char 
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  1    wreg      unsigned char 
 10642 ;; Registers used:
 10643 ;;		wreg, status,2, status,0, pclath, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;Total ram usage:        8 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    4
 10656 ;; This function calls:
 10657 ;;		___awdiv
 10658 ;;		___awmod
 10659 ;; This function is called by:
 10660 ;;		_Bq32k_Rtc_Write_Time
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           
 10665                           ;psect for function _bin2bcd
 10666  16D1                     _bin2bcd:	
 10667                           
 10668                           ;incstack = 0
 10669                           ; Regs used in _bin2bcd: [wreg+status,2+status,0+pclath+cstack]
 10670                           ;bin2bcd@val stored from wreg
 10671  16D1  0020               	movlb	0	; select bank0
 10672  16D2  00B1               	movwf	bin2bcd@val
 10673                           
 10674                           ;bq32k.c: 86: return ((val / 10) << 4) + val % 10;
 10675  16D3  300A               	movlw	10
 10676  16D4  00A1               	movwf	___awmod@divisor
 10677  16D5  3000               	movlw	0
 10678  16D6  00A2               	movwf	___awmod@divisor+1
 10679  16D7  0831               	movf	bin2bcd@val,w
 10680  16D8  00AA               	movwf	??_bin2bcd
 10681  16D9  01AB               	clrf	??_bin2bcd+1
 10682  16DA  082A               	movf	??_bin2bcd,w
 10683  16DB  00A3               	movwf	___awmod@dividend
 10684  16DC  082B               	movf	??_bin2bcd+1,w
 10685  16DD  00A4               	movwf	___awmod@dividend+1
 10686  16DE  3189  213D  3196   	fcall	___awmod
 10687  16E1  0020               	movlb	0	; select bank0
 10688  16E2  0821               	movf	?___awmod,w
 10689  16E3  00AC               	movwf	??_bin2bcd+2
 10690  16E4  0822               	movf	?___awmod+1,w
 10691  16E5  00AD               	movwf	??_bin2bcd+3
 10692  16E6  300A               	movlw	10
 10693  16E7  00A1               	movwf	___awdiv@divisor
 10694  16E8  3000               	movlw	0
 10695  16E9  00A2               	movwf	___awdiv@divisor+1
 10696  16EA  0831               	movf	bin2bcd@val,w
 10697  16EB  00AE               	movwf	??_bin2bcd+4
 10698  16EC  01AF               	clrf	??_bin2bcd+5
 10699  16ED  082E               	movf	??_bin2bcd+4,w
 10700  16EE  00A3               	movwf	___awdiv@dividend
 10701  16EF  082F               	movf	??_bin2bcd+5,w
 10702  16F0  00A4               	movwf	___awdiv@dividend+1
 10703  16F1  318A  221A  3196   	fcall	___awdiv
 10704  16F4  0020               	movlb	0	; select bank0
 10705  16F5  0821               	movf	?___awdiv,w
 10706  16F6  00B0               	movwf	??_bin2bcd+6
 10707  16F7  3003               	movlw	3
 10708  16F8                     u5745:	
 10709  16F8  35B0               	lslf	??_bin2bcd+6,f
 10710  16F9  3EFF               	addlw	-1
 10711  16FA  1D03               	skipz
 10712  16FB  2EF8               	goto	u5745
 10713  16FC  3530               	lslf	??_bin2bcd+6,w
 10714  16FD  072C               	addwf	??_bin2bcd+2,w
 10715  16FE  0008               	return
 10716  16FF                     __end_of_bin2bcd:	
 10717                           
 10718                           	psect	text52
 10719  093D                     __ptext52:	
 10720 ;; *************** function ___awmod *****************
 10721 ;; Defined at:
 10722 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;  divisor         2    1[BANK0 ] int 
 10725 ;;  dividend        2    3[BANK0 ] int 
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;  sign            1    7[BANK0 ] unsigned char 
 10728 ;;  counter         1    6[BANK0 ] unsigned char 
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  2    1[BANK0 ] int 
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10738 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;Total ram usage:        7 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    3
 10745 ;; This function calls:
 10746 ;;		Nothing
 10747 ;; This function is called by:
 10748 ;;		_time_Display
 10749 ;;		_bin2bcd
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           
 10754                           ;psect for function ___awmod
 10755  093D                     ___awmod:	
 10756                           
 10757                           ;incstack = 0
 10758                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10759  093D  0020               	movlb	0	; select bank0
 10760  093E  01A7               	clrf	___awmod@sign
 10761  093F  1FA4               	btfss	___awmod@dividend+1,7
 10762  0940  2948               	goto	l5758
 10763  0941  09A3               	comf	___awmod@dividend,f
 10764  0942  09A4               	comf	___awmod@dividend+1,f
 10765  0943  0AA3               	incf	___awmod@dividend,f
 10766  0944  1903               	skipnz
 10767  0945  0AA4               	incf	___awmod@dividend+1,f
 10768  0946  01A7               	clrf	___awmod@sign
 10769  0947  0AA7               	incf	___awmod@sign,f
 10770  0948                     l5758:	
 10771  0948  1FA2               	btfss	___awmod@divisor+1,7
 10772  0949  294F               	goto	l5762
 10773  094A  09A1               	comf	___awmod@divisor,f
 10774  094B  09A2               	comf	___awmod@divisor+1,f
 10775  094C  0AA1               	incf	___awmod@divisor,f
 10776  094D  1903               	skipnz
 10777  094E  0AA2               	incf	___awmod@divisor+1,f
 10778  094F                     l5762:	
 10779  094F  0821               	movf	___awmod@divisor,w
 10780  0950  0422               	iorwf	___awmod@divisor+1,w
 10781  0951  1903               	btfsc	3,2
 10782  0952  2976               	goto	l5780
 10783  0953  01A6               	clrf	___awmod@counter
 10784  0954  0AA6               	incf	___awmod@counter,f
 10785  0955                     l5770:	
 10786  0955  1BA2               	btfsc	___awmod@divisor+1,7
 10787  0956  2961               	goto	l5772
 10788  0957  3001               	movlw	1
 10789  0958                     u5165:	
 10790  0958  35A1               	lslf	___awmod@divisor,f
 10791  0959  0DA2               	rlf	___awmod@divisor+1,f
 10792  095A  0B89               	decfsz	9,f
 10793  095B  2958               	goto	u5165
 10794  095C  3001               	movlw	1
 10795  095D  00A5               	movwf	??___awmod
 10796  095E  0825               	movf	??___awmod,w
 10797  095F  07A6               	addwf	___awmod@counter,f
 10798  0960  2955               	goto	l5770
 10799  0961                     l5772:	
 10800  0961  0822               	movf	___awmod@divisor+1,w
 10801  0962  0224               	subwf	___awmod@dividend+1,w
 10802  0963  1D03               	skipz
 10803  0964  2967               	goto	u5185
 10804  0965  0821               	movf	___awmod@divisor,w
 10805  0966  0223               	subwf	___awmod@dividend,w
 10806  0967                     u5185:	
 10807  0967  1C03               	skipc
 10808  0968  296D               	goto	l5776
 10809  0969  0821               	movf	___awmod@divisor,w
 10810  096A  02A3               	subwf	___awmod@dividend,f
 10811  096B  0822               	movf	___awmod@divisor+1,w
 10812  096C  3BA4               	subwfb	___awmod@dividend+1,f
 10813  096D                     l5776:	
 10814  096D  3001               	movlw	1
 10815  096E                     u5195:	
 10816  096E  36A2               	lsrf	___awmod@divisor+1,f
 10817  096F  0CA1               	rrf	___awmod@divisor,f
 10818  0970  0B89               	decfsz	9,f
 10819  0971  296E               	goto	u5195
 10820  0972  3001               	movlw	1
 10821  0973  02A6               	subwf	___awmod@counter,f
 10822  0974  1D03               	btfss	3,2
 10823  0975  2961               	goto	l5772
 10824  0976                     l5780:	
 10825  0976  0827               	movf	___awmod@sign,w
 10826  0977  1903               	btfsc	3,2
 10827  0978  297E               	goto	l5784
 10828  0979  09A3               	comf	___awmod@dividend,f
 10829  097A  09A4               	comf	___awmod@dividend+1,f
 10830  097B  0AA3               	incf	___awmod@dividend,f
 10831  097C  1903               	skipnz
 10832  097D  0AA4               	incf	___awmod@dividend+1,f
 10833  097E                     l5784:	
 10834  097E  0824               	movf	___awmod@dividend+1,w
 10835  097F  00A2               	movwf	?___awmod+1
 10836  0980  0823               	movf	___awmod@dividend,w
 10837  0981  00A1               	movwf	?___awmod
 10838  0982  0008               	return
 10839  0983                     __end_of___awmod:	
 10840                           
 10841                           	psect	text53
 10842  0A1A                     __ptext53:	
 10843 ;; *************** function ___awdiv *****************
 10844 ;; Defined at:
 10845 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;  divisor         2    1[BANK0 ] int 
 10848 ;;  dividend        2    3[BANK0 ] int 
 10849 ;; Auto vars:     Size  Location     Type
 10850 ;;  quotient        2    8[BANK0 ] int 
 10851 ;;  sign            1    7[BANK0 ] unsigned char 
 10852 ;;  counter         1    6[BANK0 ] unsigned char 
 10853 ;; Return value:  Size  Location     Type
 10854 ;;                  2    1[BANK0 ] int 
 10855 ;; Registers used:
 10856 ;;		wreg, status,2, status,0
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10862 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;Total ram usage:        9 bytes
 10867 ;; Hardware stack levels used:    1
 10868 ;; Hardware stack levels required when called:    3
 10869 ;; This function calls:
 10870 ;;		Nothing
 10871 ;; This function is called by:
 10872 ;;		_time_Display
 10873 ;;		_bin2bcd
 10874 ;; This function uses a non-reentrant model
 10875 ;;
 10876                           
 10877                           
 10878                           ;psect for function ___awdiv
 10879  0A1A                     ___awdiv:	
 10880                           
 10881                           ;incstack = 0
 10882                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10883  0A1A  0020               	movlb	0	; select bank0
 10884  0A1B  01A7               	clrf	___awdiv@sign
 10885  0A1C  1FA2               	btfss	___awdiv@divisor+1,7
 10886  0A1D  2A25               	goto	l5714
 10887  0A1E  09A1               	comf	___awdiv@divisor,f
 10888  0A1F  09A2               	comf	___awdiv@divisor+1,f
 10889  0A20  0AA1               	incf	___awdiv@divisor,f
 10890  0A21  1903               	skipnz
 10891  0A22  0AA2               	incf	___awdiv@divisor+1,f
 10892  0A23  01A7               	clrf	___awdiv@sign
 10893  0A24  0AA7               	incf	___awdiv@sign,f
 10894  0A25                     l5714:	
 10895  0A25  1FA4               	btfss	___awdiv@dividend+1,7
 10896  0A26  2A30               	goto	l5720
 10897  0A27  09A3               	comf	___awdiv@dividend,f
 10898  0A28  09A4               	comf	___awdiv@dividend+1,f
 10899  0A29  0AA3               	incf	___awdiv@dividend,f
 10900  0A2A  1903               	skipnz
 10901  0A2B  0AA4               	incf	___awdiv@dividend+1,f
 10902  0A2C  3001               	movlw	1
 10903  0A2D  00A5               	movwf	??___awdiv
 10904  0A2E  0825               	movf	??___awdiv,w
 10905  0A2F  06A7               	xorwf	___awdiv@sign,f
 10906  0A30                     l5720:	
 10907  0A30  01A8               	clrf	___awdiv@quotient
 10908  0A31  01A9               	clrf	___awdiv@quotient+1
 10909  0A32  0821               	movf	___awdiv@divisor,w
 10910  0A33  0422               	iorwf	___awdiv@divisor+1,w
 10911  0A34  1903               	btfsc	3,2
 10912  0A35  2A5F               	goto	l5742
 10913  0A36  01A6               	clrf	___awdiv@counter
 10914  0A37  0AA6               	incf	___awdiv@counter,f
 10915  0A38                     l5730:	
 10916  0A38  1BA2               	btfsc	___awdiv@divisor+1,7
 10917  0A39  2A44               	goto	l5732
 10918  0A3A  3001               	movlw	1
 10919  0A3B                     u5065:	
 10920  0A3B  35A1               	lslf	___awdiv@divisor,f
 10921  0A3C  0DA2               	rlf	___awdiv@divisor+1,f
 10922  0A3D  0B89               	decfsz	9,f
 10923  0A3E  2A3B               	goto	u5065
 10924  0A3F  3001               	movlw	1
 10925  0A40  00A5               	movwf	??___awdiv
 10926  0A41  0825               	movf	??___awdiv,w
 10927  0A42  07A6               	addwf	___awdiv@counter,f
 10928  0A43  2A38               	goto	l5730
 10929  0A44                     l5732:	
 10930  0A44  3001               	movlw	1
 10931  0A45                     u5085:	
 10932  0A45  35A8               	lslf	___awdiv@quotient,f
 10933  0A46  0DA9               	rlf	___awdiv@quotient+1,f
 10934  0A47  0B89               	decfsz	9,f
 10935  0A48  2A45               	goto	u5085
 10936  0A49  0822               	movf	___awdiv@divisor+1,w
 10937  0A4A  0224               	subwf	___awdiv@dividend+1,w
 10938  0A4B  1D03               	skipz
 10939  0A4C  2A4F               	goto	u5095
 10940  0A4D  0821               	movf	___awdiv@divisor,w
 10941  0A4E  0223               	subwf	___awdiv@dividend,w
 10942  0A4F                     u5095:	
 10943  0A4F  1C03               	skipc
 10944  0A50  2A56               	goto	l5738
 10945  0A51  0821               	movf	___awdiv@divisor,w
 10946  0A52  02A3               	subwf	___awdiv@dividend,f
 10947  0A53  0822               	movf	___awdiv@divisor+1,w
 10948  0A54  3BA4               	subwfb	___awdiv@dividend+1,f
 10949  0A55  1428               	bsf	___awdiv@quotient,0
 10950  0A56                     l5738:	
 10951  0A56  3001               	movlw	1
 10952  0A57                     u5105:	
 10953  0A57  36A2               	lsrf	___awdiv@divisor+1,f
 10954  0A58  0CA1               	rrf	___awdiv@divisor,f
 10955  0A59  0B89               	decfsz	9,f
 10956  0A5A  2A57               	goto	u5105
 10957  0A5B  3001               	movlw	1
 10958  0A5C  02A6               	subwf	___awdiv@counter,f
 10959  0A5D  1D03               	btfss	3,2
 10960  0A5E  2A44               	goto	l5732
 10961  0A5F                     l5742:	
 10962  0A5F  0827               	movf	___awdiv@sign,w
 10963  0A60  1903               	btfsc	3,2
 10964  0A61  2A67               	goto	l5746
 10965  0A62  09A8               	comf	___awdiv@quotient,f
 10966  0A63  09A9               	comf	___awdiv@quotient+1,f
 10967  0A64  0AA8               	incf	___awdiv@quotient,f
 10968  0A65  1903               	skipnz
 10969  0A66  0AA9               	incf	___awdiv@quotient+1,f
 10970  0A67                     l5746:	
 10971  0A67  0829               	movf	___awdiv@quotient+1,w
 10972  0A68  00A2               	movwf	?___awdiv+1
 10973  0A69  0828               	movf	___awdiv@quotient,w
 10974  0A6A  00A1               	movwf	?___awdiv
 10975  0A6B  0008               	return
 10976  0A6C                     __end_of___awdiv:	
 10977                           
 10978                           	psect	text54
 10979  0888                     __ptext54:	
 10980 ;; *************** function _I2C_Send_Buffer *****************
 10981 ;; Defined at:
 10982 ;;		line 173 in file "mcc_generated_files/i2c.c"
 10983 ;; Parameters:    Size  Location     Type
 10984 ;;  ADD             1    wreg     unsigned char 
 10985 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 10986 ;;		 -> Bq32k_Rtc_Write_Time@temp(10), Bq32k_Time_Init@temp(2), 
 10987 ;;  Length          1    5[BANK0 ] unsigned char 
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;  ADD             1    8[BANK0 ] unsigned char 
 10990 ;;  Flag            1   10[BANK0 ] unsigned char 
 10991 ;;  i               1    9[BANK0 ] unsigned char 
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  1    wreg      unsigned char 
 10994 ;; Registers used:
 10995 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11001 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;Total ram usage:        7 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    4
 11008 ;; This function calls:
 11009 ;;		_I2C_Send_Byte
 11010 ;;		_I2C_Start
 11011 ;;		_I2C_Stop
 11012 ;; This function is called by:
 11013 ;;		_Bq32k_Rtc_Write_Time
 11014 ;;		_Bq32k_Time_Init
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           
 11019                           ;psect for function _I2C_Send_Buffer
 11020  0888                     _I2C_Send_Buffer:	
 11021                           
 11022                           ;incstack = 0
 11023                           ; Regs used in _I2C_Send_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11024                           ;I2C_Send_Buffer@ADD stored from wreg
 11025  0888  0020               	movlb	0	; select bank0
 11026  0889  00A8               	movwf	I2C_Send_Buffer@ADD
 11027                           
 11028                           ;i2c.c: 175: unsigned char Flag=1;
 11029  088A  01AA               	clrf	I2C_Send_Buffer@Flag
 11030  088B  0AAA               	incf	I2C_Send_Buffer@Flag,f
 11031                           
 11032                           ;i2c.c: 176: unsigned char i;
 11033                           ;i2c.c: 178: I2C_Start();
 11034  088C  3194  248E  3188   	fcall	_I2C_Start
 11035                           
 11036                           ;i2c.c: 180: Flag=I2C_Send_Byte(0XD0);
 11037  088F  30D0               	movlw	208
 11038  0890  3187  27A9  3188   	fcall	_I2C_Send_Byte
 11039  0893  0020               	movlb	0	; select bank0
 11040  0894  00A6               	movwf	??_I2C_Send_Buffer
 11041  0895  0826               	movf	??_I2C_Send_Buffer,w
 11042  0896  00AA               	movwf	I2C_Send_Buffer@Flag
 11043                           
 11044                           ;i2c.c: 181: if(Flag)
 11045  0897  082A               	movf	I2C_Send_Buffer@Flag,w
 11046  0898  1D03               	btfss	3,2
 11047  0899  0008               	return
 11048                           
 11049                           ;i2c.c: 184: Flag=I2C_Send_Byte( ADD );
 11050                           
 11051                           ;i2c.c: 182: return 0x01;
 11052                           ;	Return value of _I2C_Send_Buffer is never used
 11053  089A  0828               	movf	I2C_Send_Buffer@ADD,w
 11054  089B  3187  27A9  3188   	fcall	_I2C_Send_Byte
 11055  089E  0020               	movlb	0	; select bank0
 11056  089F  00A6               	movwf	??_I2C_Send_Buffer
 11057  08A0  0826               	movf	??_I2C_Send_Buffer,w
 11058  08A1  00AA               	movwf	I2C_Send_Buffer@Flag
 11059                           
 11060                           ;i2c.c: 185: if(Flag)
 11061  08A2  082A               	movf	I2C_Send_Buffer@Flag,w
 11062  08A3  1D03               	btfss	3,2
 11063  08A4  0008               	return
 11064                           
 11065                           ;i2c.c: 188: for (i = 0; i<Length; i++)
 11066                           
 11067                           ;i2c.c: 186: return 0x01;
 11068                           ;	Return value of _I2C_Send_Buffer is never used
 11069  08A5  01A9               	clrf	I2C_Send_Buffer@i
 11070  08A6                     l6082:	
 11071  08A6  0825               	movf	I2C_Send_Buffer@Length,w
 11072  08A7  0229               	subwf	I2C_Send_Buffer@i,w
 11073  08A8  1803               	btfsc	3,0
 11074  08A9  28C0               	goto	l6084
 11075                           
 11076                           ;i2c.c: 189: {
 11077                           ;i2c.c: 190: Flag=I2C_Send_Byte(*(buff+i));
 11078  08AA  0829               	movf	I2C_Send_Buffer@i,w
 11079  08AB  0724               	addwf	I2C_Send_Buffer@buff,w
 11080  08AC  00A6               	movwf	??_I2C_Send_Buffer
 11081  08AD  0826               	movf	??_I2C_Send_Buffer,w
 11082  08AE  0086               	movwf	6
 11083  08AF  0187               	clrf	7
 11084  08B0  0801               	movf	1,w
 11085  08B1  3187  27A9  3188   	fcall	_I2C_Send_Byte
 11086  08B4  0020               	movlb	0	; select bank0
 11087  08B5  00A7               	movwf	??_I2C_Send_Buffer+1
 11088  08B6  0827               	movf	??_I2C_Send_Buffer+1,w
 11089  08B7  00AA               	movwf	I2C_Send_Buffer@Flag
 11090                           
 11091                           ;i2c.c: 191: if(Flag)
 11092  08B8  082A               	movf	I2C_Send_Buffer@Flag,w
 11093  08B9  1D03               	btfss	3,2
 11094  08BA  0008               	return
 11095                           
 11096                           ;i2c.c: 192: return 0x01;
 11097                           ;	Return value of _I2C_Send_Buffer is never used
 11098  08BB  3001               	movlw	1
 11099  08BC  00A6               	movwf	??_I2C_Send_Buffer
 11100  08BD  0826               	movf	??_I2C_Send_Buffer,w
 11101  08BE  07A9               	addwf	I2C_Send_Buffer@i,f
 11102  08BF  28A6               	goto	l6082
 11103  08C0                     l6084:	
 11104                           
 11105                           ;i2c.c: 193: }
 11106                           ;i2c.c: 194: I2C_Stop();
 11107  08C0  3194  24AB         	fcall	_I2C_Stop
 11108  08C2  0008               	return
 11109  08C3                     __end_of_I2C_Send_Buffer:	
 11110                           ;i2c.c: 195: return 0x00;
 11111                           ;	Return value of _I2C_Send_Buffer is never used
 11112                           
 11113                           
 11114                           	psect	text55
 11115  0BF8                     __ptext55:	
 11116 ;; *************** function _Bq32k_Rtc_Read_Time *****************
 11117 ;; Defined at:
 11118 ;;		line 35 in file "mcc_generated_files/bq32k.c"
 11119 ;; Parameters:    Size  Location     Type
 11120 ;;  p               1    wreg     PTR struct bq32k_regs
 11121 ;;		 -> rtc_tm(7), 
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;  p               1   21[BANK0 ] PTR struct bq32k_regs
 11124 ;;		 -> rtc_tm(7), 
 11125 ;;  temp           10   11[BANK0 ] unsigned char [10]
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  1    wreg      void 
 11128 ;; Registers used:
 11129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;Total ram usage:       13 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    5
 11142 ;; This function calls:
 11143 ;;		_I2C_Read_Buffer
 11144 ;;		_bcd2bin
 11145 ;; This function is called by:
 11146 ;;		_time_Display
 11147 ;;		_Calculate_Time
 11148 ;;		_Save_Write_time
 11149 ;;		_Set_time_from_Com
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           
 11154                           ;psect for function _Bq32k_Rtc_Read_Time
 11155  0BF8                     _Bq32k_Rtc_Read_Time:	
 11156                           
 11157                           ;incstack = 0
 11158                           ; Regs used in _Bq32k_Rtc_Read_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11159                           ;Bq32k_Rtc_Read_Time@p stored from wreg
 11160  0BF8  0020               	movlb	0	; select bank0
 11161  0BF9  00B5               	movwf	Bq32k_Rtc_Read_Time@p
 11162                           
 11163                           ;bq32k.c: 37: unsigned char temp[10] ;
 11164                           ;bq32k.c: 38: I2C_Read_Buffer( 0 , temp , 7);
 11165  0BFA  302B               	movlw	(low (Bq32k_Rtc_Read_Time@temp| 0))& (0+255)
 11166  0BFB  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11167  0BFC  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11168  0BFD  00A4               	movwf	I2C_Read_Buffer@buff
 11169  0BFE  3007               	movlw	7
 11170  0BFF  00AA               	movwf	??_Bq32k_Rtc_Read_Time+1
 11171  0C00  082A               	movf	??_Bq32k_Rtc_Read_Time+1,w
 11172  0C01  00A5               	movwf	I2C_Read_Buffer@Length
 11173  0C02  3000               	movlw	0
 11174  0C03  318D  254D  318B   	fcall	_I2C_Read_Buffer
 11175                           
 11176                           ;bq32k.c: 39: p->seconds = bcd2bin(temp[0] & 0x7F);
 11177  0C06  0020               	movlb	0	; select bank0
 11178  0C07  082B               	movf	Bq32k_Rtc_Read_Time@temp,w
 11179  0C08  397F               	andlw	127
 11180  0C09  3193  23CB  318B   	fcall	_bcd2bin
 11181  0C0C  0020               	movlb	0	; select bank0
 11182  0C0D  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11183  0C0E  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11184  0C0F  0086               	movwf	6
 11185  0C10  3001               	movlw	1	; select bank2/3
 11186  0C11  0087               	movwf	7
 11187  0C12  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11188  0C13  0081               	movwf	1
 11189                           
 11190                           ;bq32k.c: 40: p->minutes = bcd2bin(temp[1] & 0x7F);
 11191  0C14  082C               	movf	Bq32k_Rtc_Read_Time@temp+1,w
 11192  0C15  397F               	andlw	127
 11193  0C16  3193  23CB  318B   	fcall	_bcd2bin
 11194  0C19  0020               	movlb	0	; select bank0
 11195  0C1A  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11196  0C1B  0A35               	incf	Bq32k_Rtc_Read_Time@p,w
 11197  0C1C  0086               	movwf	6
 11198  0C1D  3001               	movlw	1	; select bank2/3
 11199  0C1E  0087               	movwf	7
 11200  0C1F  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11201  0C20  0081               	movwf	1
 11202                           
 11203                           ;bq32k.c: 41: p->hours = bcd2bin(temp[2] & 0x3F);
 11204  0C21  082D               	movf	Bq32k_Rtc_Read_Time@temp+2,w
 11205  0C22  393F               	andlw	63
 11206  0C23  3193  23CB  318B   	fcall	_bcd2bin
 11207  0C26  0020               	movlb	0	; select bank0
 11208  0C27  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11209  0C28  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11210  0C29  3E02               	addlw	2
 11211  0C2A  0086               	movwf	6
 11212  0C2B  3001               	movlw	1	; select bank2/3
 11213  0C2C  0087               	movwf	7
 11214  0C2D  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11215  0C2E  0081               	movwf	1
 11216                           
 11217                           ;bq32k.c: 42: p->wday = bcd2bin(temp[3]);
 11218  0C2F  082E               	movf	Bq32k_Rtc_Read_Time@temp+3,w
 11219  0C30  3193  23CB  318B   	fcall	_bcd2bin
 11220  0C33  0020               	movlb	0	; select bank0
 11221  0C34  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11222  0C35  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11223  0C36  3E03               	addlw	3
 11224  0C37  0086               	movwf	6
 11225  0C38  3001               	movlw	1	; select bank2/3
 11226  0C39  0087               	movwf	7
 11227  0C3A  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11228  0C3B  0081               	movwf	1
 11229                           
 11230                           ;bq32k.c: 43: p->date = bcd2bin(temp[4]);
 11231  0C3C  082F               	movf	Bq32k_Rtc_Read_Time@temp+4,w
 11232  0C3D  3193  23CB  318B   	fcall	_bcd2bin
 11233  0C40  0020               	movlb	0	; select bank0
 11234  0C41  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11235  0C42  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11236  0C43  3E04               	addlw	4
 11237  0C44  0086               	movwf	6
 11238  0C45  3001               	movlw	1	; select bank2/3
 11239  0C46  0087               	movwf	7
 11240  0C47  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11241  0C48  0081               	movwf	1
 11242                           
 11243                           ;bq32k.c: 44: p->month = bcd2bin(temp[5]);
 11244  0C49  0830               	movf	Bq32k_Rtc_Read_Time@temp+5,w
 11245  0C4A  3193  23CB  318B   	fcall	_bcd2bin
 11246  0C4D  0020               	movlb	0	; select bank0
 11247  0C4E  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11248  0C4F  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11249  0C50  3E05               	addlw	5
 11250  0C51  0086               	movwf	6
 11251  0C52  3001               	movlw	1	; select bank2/3
 11252  0C53  0087               	movwf	7
 11253  0C54  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11254  0C55  0081               	movwf	1
 11255                           
 11256                           ;bq32k.c: 45: p->years= bcd2bin(temp[6]);
 11257  0C56  0831               	movf	Bq32k_Rtc_Read_Time@temp+6,w
 11258  0C57  3193  23CB         	fcall	_bcd2bin
 11259  0C59  0020               	movlb	0	; select bank0
 11260  0C5A  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 11261  0C5B  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 11262  0C5C  3E06               	addlw	6
 11263  0C5D  0086               	movwf	6
 11264  0C5E  3001               	movlw	1	; select bank2/3
 11265  0C5F  0087               	movwf	7
 11266  0C60  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 11267  0C61  0081               	movwf	1
 11268  0C62  0008               	return
 11269  0C63                     __end_of_Bq32k_Rtc_Read_Time:	
 11270                           
 11271                           	psect	text56
 11272  13CB                     __ptext56:	
 11273 ;; *************** function _bcd2bin *****************
 11274 ;; Defined at:
 11275 ;;		line 73 in file "mcc_generated_files/bq32k.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;  val             1    wreg     unsigned char 
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  val             1    8[BANK0 ] unsigned char 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  1    wreg      unsigned char 
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0, pclath, cstack
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;Total ram usage:        4 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    4
 11296 ;; This function calls:
 11297 ;;		___bmul
 11298 ;; This function is called by:
 11299 ;;		_Bq32k_Rtc_Read_Time
 11300 ;; This function uses a non-reentrant model
 11301 ;;
 11302                           
 11303                           
 11304                           ;psect for function _bcd2bin
 11305  13CB                     _bcd2bin:	
 11306                           
 11307                           ;incstack = 0
 11308                           ; Regs used in _bcd2bin: [wreg+status,2+status,0+pclath+cstack]
 11309                           ;bcd2bin@val stored from wreg
 11310  13CB  0020               	movlb	0	; select bank0
 11311  13CC  00A8               	movwf	bcd2bin@val
 11312                           
 11313                           ;bq32k.c: 75: return (val & 0x0f) + (val >> 4) * 10;
 11314  13CD  300F               	movlw	15
 11315  13CE  0528               	andwf	bcd2bin@val,w
 11316  13CF  00A5               	movwf	??_bcd2bin
 11317  13D0  300A               	movlw	10
 11318  13D1  00A6               	movwf	??_bcd2bin+1
 11319  13D2  0826               	movf	??_bcd2bin+1,w
 11320  13D3  00A1               	movwf	___bmul@multiplicand
 11321  13D4  0828               	movf	bcd2bin@val,w
 11322  13D5  00A7               	movwf	??_bcd2bin+2
 11323  13D6  3004               	movlw	4
 11324  13D7                     u4665:	
 11325  13D7  36A7               	lsrf	??_bcd2bin+2,f
 11326  13D8  0B89               	decfsz	9,f
 11327  13D9  2BD7               	goto	u4665
 11328  13DA  0827               	movf	??_bcd2bin+2,w
 11329  13DB  3193  23A6         	fcall	___bmul
 11330  13DD  0020               	movlb	0	; select bank0
 11331  13DE  0725               	addwf	??_bcd2bin,w
 11332  13DF  0008               	return
 11333  13E0                     __end_of_bcd2bin:	
 11334                           
 11335                           	psect	text57
 11336  13A6                     __ptext57:	
 11337 ;; *************** function ___bmul *****************
 11338 ;; Defined at:
 11339 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 11340 ;; Parameters:    Size  Location     Type
 11341 ;;  multiplier      1    wreg     unsigned char 
 11342 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;  multiplier      1    4[BANK0 ] unsigned char 
 11345 ;;  product         1    3[BANK0 ] unsigned char 
 11346 ;; Return value:  Size  Location     Type
 11347 ;;                  1    wreg      unsigned char 
 11348 ;; Registers used:
 11349 ;;		wreg, status,2, status,0
 11350 ;; Tracked objects:
 11351 ;;		On entry : 0/0
 11352 ;;		On exit  : 0/0
 11353 ;;		Unchanged: 0/0
 11354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11355 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;Total ram usage:        4 bytes
 11360 ;; Hardware stack levels used:    1
 11361 ;; Hardware stack levels required when called:    3
 11362 ;; This function calls:
 11363 ;;		Nothing
 11364 ;; This function is called by:
 11365 ;;		_bcd2bin
 11366 ;; This function uses a non-reentrant model
 11367 ;;
 11368                           
 11369                           
 11370                           ;psect for function ___bmul
 11371  13A6                     ___bmul:	
 11372                           
 11373                           ;incstack = 0
 11374                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11375                           ;___bmul@multiplier stored from wreg
 11376  13A6  0020               	movlb	0	; select bank0
 11377  13A7  00A4               	movwf	___bmul@multiplier
 11378  13A8  01A3               	clrf	___bmul@product
 11379  13A9                     l5332:	
 11380  13A9  1C24               	btfss	___bmul@multiplier,0
 11381  13AA  2BAF               	goto	l5336
 11382  13AB  0821               	movf	___bmul@multiplicand,w
 11383  13AC  00A2               	movwf	??___bmul
 11384  13AD  0822               	movf	??___bmul,w
 11385  13AE  07A3               	addwf	___bmul@product,f
 11386  13AF                     l5336:	
 11387  13AF  1003               	clrc
 11388  13B0  0DA1               	rlf	___bmul@multiplicand,f
 11389  13B1  1003               	clrc
 11390  13B2  0CA4               	rrf	___bmul@multiplier,f
 11391  13B3  0824               	movf	___bmul@multiplier,w
 11392  13B4  1D03               	btfss	3,2
 11393  13B5  2BA9               	goto	l5332
 11394  13B6  0823               	movf	___bmul@product,w
 11395  13B7  0008               	return
 11396  13B8                     __end_of___bmul:	
 11397                           
 11398                           	psect	text58
 11399  0D4D                     __ptext58:	
 11400 ;; *************** function _I2C_Read_Buffer *****************
 11401 ;; Defined at:
 11402 ;;		line 120 in file "mcc_generated_files/i2c.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;  ADD             1    wreg     unsigned char 
 11405 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 11406 ;;		 -> Bq32k_Rtc_Read_Time@temp(10), 
 11407 ;;  Length          1    5[BANK0 ] unsigned char 
 11408 ;; Auto vars:     Size  Location     Type
 11409 ;;  ADD             1    7[BANK0 ] unsigned char 
 11410 ;;  Flag            1    8[BANK0 ] unsigned char 
 11411 ;; Return value:  Size  Location     Type
 11412 ;;                  1    wreg      unsigned char 
 11413 ;; Registers used:
 11414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11415 ;; Tracked objects:
 11416 ;;		On entry : 0/0
 11417 ;;		On exit  : 0/0
 11418 ;;		Unchanged: 0/0
 11419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11420 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;Total ram usage:        5 bytes
 11425 ;; Hardware stack levels used:    1
 11426 ;; Hardware stack levels required when called:    4
 11427 ;; This function calls:
 11428 ;;		_I2C_Receive_Byte
 11429 ;;		_I2C_Send_Byte
 11430 ;;		_I2C_Start
 11431 ;;		_I2C_Stop
 11432 ;; This function is called by:
 11433 ;;		_Bq32k_Rtc_Read_Time
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           
 11438                           ;psect for function _I2C_Read_Buffer
 11439  0D4D                     _I2C_Read_Buffer:	
 11440                           
 11441                           ;incstack = 0
 11442                           ; Regs used in _I2C_Read_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11443                           ;I2C_Read_Buffer@ADD stored from wreg
 11444  0D4D  0020               	movlb	0	; select bank0
 11445  0D4E  00A7               	movwf	I2C_Read_Buffer@ADD
 11446                           
 11447                           ;i2c.c: 122: unsigned char Flag=1;
 11448  0D4F  01A8               	clrf	I2C_Read_Buffer@Flag
 11449  0D50  0AA8               	incf	I2C_Read_Buffer@Flag,f
 11450                           
 11451                           ;i2c.c: 124: I2C_Start();
 11452  0D51  3194  248E  318D   	fcall	_I2C_Start
 11453                           
 11454                           ;i2c.c: 126: Flag=I2C_Send_Byte(0XD0);
 11455  0D54  30D0               	movlw	208
 11456  0D55  3187  27A9  318D   	fcall	_I2C_Send_Byte
 11457  0D58  0020               	movlb	0	; select bank0
 11458  0D59  00A6               	movwf	??_I2C_Read_Buffer
 11459  0D5A  0826               	movf	??_I2C_Read_Buffer,w
 11460  0D5B  00A8               	movwf	I2C_Read_Buffer@Flag
 11461                           
 11462                           ;i2c.c: 127: if(Flag)
 11463  0D5C  0828               	movf	I2C_Read_Buffer@Flag,w
 11464  0D5D  1D03               	btfss	3,2
 11465  0D5E  0008               	return
 11466                           
 11467                           ;i2c.c: 130: Flag=I2C_Send_Byte(ADD);
 11468                           
 11469                           ;i2c.c: 128: return 0x01;
 11470                           ;	Return value of _I2C_Read_Buffer is never used
 11471  0D5F  0827               	movf	I2C_Read_Buffer@ADD,w
 11472  0D60  3187  27A9  318D   	fcall	_I2C_Send_Byte
 11473  0D63  0020               	movlb	0	; select bank0
 11474  0D64  00A6               	movwf	??_I2C_Read_Buffer
 11475  0D65  0826               	movf	??_I2C_Read_Buffer,w
 11476  0D66  00A8               	movwf	I2C_Read_Buffer@Flag
 11477                           
 11478                           ;i2c.c: 131: if(Flag)
 11479  0D67  0828               	movf	I2C_Read_Buffer@Flag,w
 11480  0D68  1D03               	btfss	3,2
 11481  0D69  0008               	return
 11482                           
 11483                           ;i2c.c: 134: I2C_Start();
 11484                           
 11485                           ;i2c.c: 132: return 0x01;
 11486                           ;	Return value of _I2C_Read_Buffer is never used
 11487  0D6A  3194  248E  318D   	fcall	_I2C_Start
 11488                           
 11489                           ;i2c.c: 135: Flag=I2C_Send_Byte(0XD0+1);
 11490  0D6D  30D1               	movlw	209
 11491  0D6E  3187  27A9  318D   	fcall	_I2C_Send_Byte
 11492  0D71  0020               	movlb	0	; select bank0
 11493  0D72  00A6               	movwf	??_I2C_Read_Buffer
 11494  0D73  0826               	movf	??_I2C_Read_Buffer,w
 11495  0D74  00A8               	movwf	I2C_Read_Buffer@Flag
 11496                           
 11497                           ;i2c.c: 136: if(Flag)
 11498  0D75  0828               	movf	I2C_Read_Buffer@Flag,w
 11499  0D76  1D03               	btfss	3,2
 11500  0D77  0008               	return
 11501  0D78                     l5438:	
 11502  0D78  3002               	movlw	2
 11503  0D79  0225               	subwf	I2C_Read_Buffer@Length,w
 11504  0D7A  1C03               	btfss	3,0
 11505  0D7B  2DA3               	goto	l5440
 11506                           
 11507                           ;i2c.c: 140: {
 11508                           ;i2c.c: 141: *buff = I2C_Receive_Byte();
 11509                           
 11510                           ;i2c.c: 139: while(Length>1)
 11511                           
 11512                           ;i2c.c: 137: return 0x01;
 11513                           ;	Return value of _I2C_Read_Buffer is never used
 11514  0D7C  3196  26FF  318D   	fcall	_I2C_Receive_Byte
 11515  0D7F  0020               	movlb	0	; select bank0
 11516  0D80  00A6               	movwf	??_I2C_Read_Buffer
 11517  0D81  0824               	movf	I2C_Read_Buffer@buff,w
 11518  0D82  0086               	movwf	6
 11519  0D83  0187               	clrf	7
 11520  0D84  0826               	movf	??_I2C_Read_Buffer,w
 11521  0D85  0081               	movwf	1
 11522                           
 11523                           ;i2c.c: 143: do { LATB1 = 0; } while(0);
 11524  0D86  0022               	movlb	2	; select bank2
 11525  0D87  108D               	bcf	13,1	;volatile
 11526                           
 11527                           ;i2c.c: 144: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11528  0D88  3003               	movlw	3
 11529  0D89  0020               	movlb	0	; select bank0
 11530  0D8A  00A6               	movwf	??_I2C_Read_Buffer
 11531  0D8B                     u6557:	
 11532  0D8B  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11533  0D8C  2D8B               	goto	u6557
 11534                           
 11535                           ;i2c.c: 145: do { LATB0 = 1; } while(0);
 11536  0D8D  0022               	movlb	2	; select bank2
 11537  0D8E  140D               	bsf	13,0	;volatile
 11538                           
 11539                           ;i2c.c: 146: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11540  0D8F  3003               	movlw	3
 11541  0D90  0020               	movlb	0	; select bank0
 11542  0D91  00A6               	movwf	??_I2C_Read_Buffer
 11543  0D92                     u6567:	
 11544  0D92  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11545  0D93  2D92               	goto	u6567
 11546                           
 11547                           ;i2c.c: 147: do { LATB0 = 0; } while(0);
 11548  0D94  0022               	movlb	2	; select bank2
 11549  0D95  100D               	bcf	13,0	;volatile
 11550                           
 11551                           ;i2c.c: 148: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11552  0D96  3003               	movlw	3
 11553  0D97  0020               	movlb	0	; select bank0
 11554  0D98  00A6               	movwf	??_I2C_Read_Buffer
 11555  0D99                     u6577:	
 11556  0D99  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11557  0D9A  2D99               	goto	u6577
 11558                           
 11559                           ;i2c.c: 150: buff++;
 11560  0D9B  3001               	movlw	1
 11561  0D9C  0020               	movlb	0	; select bank0
 11562  0D9D  00A6               	movwf	??_I2C_Read_Buffer
 11563  0D9E  0826               	movf	??_I2C_Read_Buffer,w
 11564  0D9F  07A4               	addwf	I2C_Read_Buffer@buff,f
 11565                           
 11566                           ;i2c.c: 151: Length--;
 11567  0DA0  3001               	movlw	1
 11568  0DA1  02A5               	subwf	I2C_Read_Buffer@Length,f
 11569  0DA2  2D78               	goto	l5438
 11570  0DA3                     l5440:	
 11571                           
 11572                           ;i2c.c: 152: }
 11573                           ;i2c.c: 153: *buff = I2C_Receive_Byte();
 11574  0DA3  3196  26FF  318D   	fcall	_I2C_Receive_Byte
 11575  0DA6  0020               	movlb	0	; select bank0
 11576  0DA7  00A6               	movwf	??_I2C_Read_Buffer
 11577  0DA8  0824               	movf	I2C_Read_Buffer@buff,w
 11578  0DA9  0086               	movwf	6
 11579  0DAA  0187               	clrf	7
 11580  0DAB  0826               	movf	??_I2C_Read_Buffer,w
 11581  0DAC  0081               	movwf	1
 11582                           
 11583                           ;i2c.c: 155: do { LATB1 = 1; } while(0);
 11584  0DAD  0022               	movlb	2	; select bank2
 11585  0DAE  148D               	bsf	13,1	;volatile
 11586                           
 11587                           ;i2c.c: 156: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11588  0DAF  3003               	movlw	3
 11589  0DB0  0020               	movlb	0	; select bank0
 11590  0DB1  00A6               	movwf	??_I2C_Read_Buffer
 11591  0DB2                     u6587:	
 11592  0DB2  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11593  0DB3  2DB2               	goto	u6587
 11594                           
 11595                           ;i2c.c: 157: do { LATB0 = 1; } while(0);
 11596  0DB4  0022               	movlb	2	; select bank2
 11597  0DB5  140D               	bsf	13,0	;volatile
 11598                           
 11599                           ;i2c.c: 158: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11600  0DB6  3003               	movlw	3
 11601  0DB7  0020               	movlb	0	; select bank0
 11602  0DB8  00A6               	movwf	??_I2C_Read_Buffer
 11603  0DB9                     u6597:	
 11604  0DB9  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11605  0DBA  2DB9               	goto	u6597
 11606                           
 11607                           ;i2c.c: 159: do { LATB0 = 0; } while(0);
 11608  0DBB  0022               	movlb	2	; select bank2
 11609  0DBC  100D               	bcf	13,0	;volatile
 11610                           
 11611                           ;i2c.c: 160: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11612  0DBD  3003               	movlw	3
 11613  0DBE  0020               	movlb	0	; select bank0
 11614  0DBF  00A6               	movwf	??_I2C_Read_Buffer
 11615  0DC0                     u6607:	
 11616  0DC0  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11617  0DC1  2DC0               	goto	u6607
 11618                           
 11619                           ;i2c.c: 162: I2C_Stop();
 11620  0DC2  3194  24AB         	fcall	_I2C_Stop
 11621  0DC4  0008               	return
 11622  0DC5                     __end_of_I2C_Read_Buffer:	
 11623                           ;i2c.c: 164: return 0x00;
 11624                           ;	Return value of _I2C_Read_Buffer is never used
 11625                           
 11626                           
 11627                           	psect	text59
 11628  14AB                     __ptext59:	
 11629 ;; *************** function _I2C_Stop *****************
 11630 ;; Defined at:
 11631 ;;		line 102 in file "mcc_generated_files/i2c.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;		None
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;		None
 11636 ;; Return value:  Size  Location     Type
 11637 ;;                  1    wreg      void 
 11638 ;; Registers used:
 11639 ;;		wreg
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;Total ram usage:        1 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    3
 11652 ;; This function calls:
 11653 ;;		Nothing
 11654 ;; This function is called by:
 11655 ;;		_I2C_Read_Buffer
 11656 ;;		_I2C_Send_Buffer
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _I2C_Stop
 11662  14AB                     _I2C_Stop:	
 11663                           
 11664                           ;incstack = 0
 11665                           ; Regs used in _I2C_Stop: [wreg]
 11666                           ;i2c.c: 104: do { LATB0 = 0; } while(0);
 11667  14AB  0022               	movlb	2	; select bank2
 11668  14AC  100D               	bcf	13,0	;volatile
 11669                           
 11670                           ;i2c.c: 105: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11671  14AD  3003               	movlw	3
 11672  14AE  0020               	movlb	0	; select bank0
 11673  14AF  00A1               	movwf	??_I2C_Stop
 11674  14B0                     u6617:	
 11675  14B0  0BA1               	decfsz	??_I2C_Stop,f
 11676  14B1  2CB0               	goto	u6617
 11677                           
 11678                           ;i2c.c: 106: do { LATB1 = 0; } while(0);
 11679  14B2  0022               	movlb	2	; select bank2
 11680  14B3  108D               	bcf	13,1	;volatile
 11681                           
 11682                           ;i2c.c: 107: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11683  14B4  3003               	movlw	3
 11684  14B5  0020               	movlb	0	; select bank0
 11685  14B6  00A1               	movwf	??_I2C_Stop
 11686  14B7                     u6627:	
 11687  14B7  0BA1               	decfsz	??_I2C_Stop,f
 11688  14B8  2CB7               	goto	u6627
 11689                           
 11690                           ;i2c.c: 108: do { LATB0 = 1; } while(0);
 11691  14B9  0022               	movlb	2	; select bank2
 11692  14BA  140D               	bsf	13,0	;volatile
 11693                           
 11694                           ;i2c.c: 109: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11695  14BB  3003               	movlw	3
 11696  14BC  0020               	movlb	0	; select bank0
 11697  14BD  00A1               	movwf	??_I2C_Stop
 11698  14BE                     u6637:	
 11699  14BE  0BA1               	decfsz	??_I2C_Stop,f
 11700  14BF  2CBE               	goto	u6637
 11701                           
 11702                           ;i2c.c: 110: do { LATB1 = 1; } while(0);
 11703  14C0  0022               	movlb	2	; select bank2
 11704  14C1  148D               	bsf	13,1	;volatile
 11705                           
 11706                           ;i2c.c: 111: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11707  14C2  3003               	movlw	3
 11708  14C3  0020               	movlb	0	; select bank0
 11709  14C4  00A1               	movwf	??_I2C_Stop
 11710  14C5                     u6647:	
 11711  14C5  0BA1               	decfsz	??_I2C_Stop,f
 11712  14C6  2CC5               	goto	u6647
 11713  14C7  0008               	return
 11714  14C8                     __end_of_I2C_Stop:	
 11715                           
 11716                           	psect	text60
 11717  148E                     __ptext60:	
 11718 ;; *************** function _I2C_Start *****************
 11719 ;; Defined at:
 11720 ;;		line 16 in file "mcc_generated_files/i2c.c"
 11721 ;; Parameters:    Size  Location     Type
 11722 ;;		None
 11723 ;; Auto vars:     Size  Location     Type
 11724 ;;		None
 11725 ;; Return value:  Size  Location     Type
 11726 ;;                  1    wreg      void 
 11727 ;; Registers used:
 11728 ;;		wreg
 11729 ;; Tracked objects:
 11730 ;;		On entry : 0/0
 11731 ;;		On exit  : 0/0
 11732 ;;		Unchanged: 0/0
 11733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;Total ram usage:        1 bytes
 11739 ;; Hardware stack levels used:    1
 11740 ;; Hardware stack levels required when called:    3
 11741 ;; This function calls:
 11742 ;;		Nothing
 11743 ;; This function is called by:
 11744 ;;		_I2C_Read_Buffer
 11745 ;;		_I2C_Send_Buffer
 11746 ;; This function uses a non-reentrant model
 11747 ;;
 11748                           
 11749                           
 11750                           ;psect for function _I2C_Start
 11751  148E                     _I2C_Start:	
 11752                           
 11753                           ;incstack = 0
 11754                           ; Regs used in _I2C_Start: [wreg]
 11755                           ;i2c.c: 18: do { LATB1 = 1; } while(0);
 11756  148E  0022               	movlb	2	; select bank2
 11757  148F  148D               	bsf	13,1	;volatile
 11758                           
 11759                           ;i2c.c: 19: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11760  1490  3003               	movlw	3
 11761  1491  0020               	movlb	0	; select bank0
 11762  1492  00A1               	movwf	??_I2C_Start
 11763  1493                     u6657:	
 11764  1493  0BA1               	decfsz	??_I2C_Start,f
 11765  1494  2C93               	goto	u6657
 11766                           
 11767                           ;i2c.c: 20: do { LATB0 = 1; } while(0);
 11768  1495  0022               	movlb	2	; select bank2
 11769  1496  140D               	bsf	13,0	;volatile
 11770                           
 11771                           ;i2c.c: 21: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11772  1497  3003               	movlw	3
 11773  1498  0020               	movlb	0	; select bank0
 11774  1499  00A1               	movwf	??_I2C_Start
 11775  149A                     u6667:	
 11776  149A  0BA1               	decfsz	??_I2C_Start,f
 11777  149B  2C9A               	goto	u6667
 11778                           
 11779                           ;i2c.c: 22: do { LATB1 = 0; } while(0);
 11780  149C  0022               	movlb	2	; select bank2
 11781  149D  108D               	bcf	13,1	;volatile
 11782                           
 11783                           ;i2c.c: 23: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11784  149E  3003               	movlw	3
 11785  149F  0020               	movlb	0	; select bank0
 11786  14A0  00A1               	movwf	??_I2C_Start
 11787  14A1                     u6677:	
 11788  14A1  0BA1               	decfsz	??_I2C_Start,f
 11789  14A2  2CA1               	goto	u6677
 11790                           
 11791                           ;i2c.c: 24: do { LATB0 = 0; } while(0);
 11792  14A3  0022               	movlb	2	; select bank2
 11793  14A4  100D               	bcf	13,0	;volatile
 11794                           
 11795                           ;i2c.c: 25: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11796  14A5  3003               	movlw	3
 11797  14A6  0020               	movlb	0	; select bank0
 11798  14A7  00A1               	movwf	??_I2C_Start
 11799  14A8                     u6687:	
 11800  14A8  0BA1               	decfsz	??_I2C_Start,f
 11801  14A9  2CA8               	goto	u6687
 11802  14AA  0008               	return
 11803  14AB                     __end_of_I2C_Start:	
 11804                           
 11805                           	psect	text61
 11806  07A9                     __ptext61:	
 11807 ;; *************** function _I2C_Send_Byte *****************
 11808 ;; Defined at:
 11809 ;;		line 34 in file "mcc_generated_files/i2c.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;  Data            1    wreg     unsigned char 
 11812 ;; Auto vars:     Size  Location     Type
 11813 ;;  Data            1    2[BANK0 ] unsigned char 
 11814 ;;  i               1    3[BANK0 ] unsigned char 
 11815 ;; Return value:  Size  Location     Type
 11816 ;;                  1    wreg      unsigned char 
 11817 ;; Registers used:
 11818 ;;		wreg, status,2, status,0
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/0
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;Total ram usage:        3 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; Hardware stack levels required when called:    3
 11831 ;; This function calls:
 11832 ;;		Nothing
 11833 ;; This function is called by:
 11834 ;;		_I2C_Read_Buffer
 11835 ;;		_I2C_Send_Buffer
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           
 11840                           ;psect for function _I2C_Send_Byte
 11841  07A9                     _I2C_Send_Byte:	
 11842                           
 11843                           ;incstack = 0
 11844                           ; Regs used in _I2C_Send_Byte: [wreg+status,2+status,0]
 11845                           ;I2C_Send_Byte@Data stored from wreg
 11846  07A9  0020               	movlb	0	; select bank0
 11847  07AA  00A2               	movwf	I2C_Send_Byte@Data
 11848                           
 11849                           ;i2c.c: 36: unsigned char i;
 11850                           ;i2c.c: 37: for(i=0;i<8;i++)
 11851  07AB  01A3               	clrf	I2C_Send_Byte@i
 11852  07AC  3008               	movlw	8
 11853  07AD  0223               	subwf	I2C_Send_Byte@i,w
 11854  07AE  1803               	btfsc	3,0
 11855  07AF  2FD6               	goto	l848
 11856  07B0                     l836:	
 11857                           
 11858                           ;i2c.c: 38: {
 11859                           ;i2c.c: 39: if(Data&0x80)
 11860  07B0  1FA2               	btfss	I2C_Send_Byte@Data,7
 11861  07B1  2FB5               	goto	l842
 11862                           
 11863                           ;i2c.c: 40: do { LATB1 = 1; } while(0);
 11864  07B2  0022               	movlb	2	; select bank2
 11865  07B3  148D               	bsf	13,1	;volatile
 11866  07B4  2FB7               	goto	l5268
 11867  07B5                     l842:	
 11868                           ;i2c.c: 41: else
 11869                           ;i2c.c: 42: do { LATB1 = 0; } while(0);
 11870                           
 11871  07B5  0022               	movlb	2	; select bank2
 11872  07B6  108D               	bcf	13,1	;volatile
 11873  07B7                     l5268:	
 11874                           
 11875                           ;i2c.c: 43: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11876  07B7  3003               	movlw	3
 11877  07B8  0020               	movlb	0	; select bank0
 11878  07B9  00A1               	movwf	??_I2C_Send_Byte
 11879  07BA                     u6697:	
 11880  07BA  0BA1               	decfsz	??_I2C_Send_Byte,f
 11881  07BB  2FBA               	goto	u6697
 11882                           
 11883                           ;i2c.c: 44: do { LATB0 = 1; } while(0);
 11884  07BC  0022               	movlb	2	; select bank2
 11885  07BD  140D               	bsf	13,0	;volatile
 11886                           
 11887                           ;i2c.c: 45: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11888  07BE  3003               	movlw	3
 11889  07BF  0020               	movlb	0	; select bank0
 11890  07C0  00A1               	movwf	??_I2C_Send_Byte
 11891  07C1                     u6707:	
 11892  07C1  0BA1               	decfsz	??_I2C_Send_Byte,f
 11893  07C2  2FC1               	goto	u6707
 11894                           
 11895                           ;i2c.c: 46: Data<<=1;
 11896  07C3  1003               	clrc
 11897  07C4  0020               	movlb	0	; select bank0
 11898  07C5  0DA2               	rlf	I2C_Send_Byte@Data,f
 11899                           
 11900                           ;i2c.c: 47: do { LATB0 = 0; } while(0);
 11901  07C6  0022               	movlb	2	; select bank2
 11902  07C7  100D               	bcf	13,0	;volatile
 11903                           
 11904                           ;i2c.c: 48: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11905  07C8  3003               	movlw	3
 11906  07C9  0020               	movlb	0	; select bank0
 11907  07CA  00A1               	movwf	??_I2C_Send_Byte
 11908  07CB                     u6717:	
 11909  07CB  0BA1               	decfsz	??_I2C_Send_Byte,f
 11910  07CC  2FCB               	goto	u6717
 11911  07CD  3001               	movlw	1
 11912  07CE  0020               	movlb	0	; select bank0
 11913  07CF  00A1               	movwf	??_I2C_Send_Byte
 11914  07D0  0821               	movf	??_I2C_Send_Byte,w
 11915  07D1  07A3               	addwf	I2C_Send_Byte@i,f
 11916  07D2  3008               	movlw	8
 11917  07D3  0223               	subwf	I2C_Send_Byte@i,w
 11918  07D4  1C03               	skipc
 11919  07D5  2FB0               	goto	l836
 11920  07D6                     l848:	
 11921                           ;i2c.c: 49: }
 11922                           ;i2c.c: 50: do { LATB1 = 1; } while(0);
 11923                           
 11924  07D6  0022               	movlb	2	; select bank2
 11925  07D7  148D               	bsf	13,1	;volatile
 11926                           
 11927                           ;i2c.c: 51: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11928  07D8  3003               	movlw	3
 11929  07D9  0020               	movlb	0	; select bank0
 11930  07DA  00A1               	movwf	??_I2C_Send_Byte
 11931  07DB                     u6727:	
 11932  07DB  0BA1               	decfsz	??_I2C_Send_Byte,f
 11933  07DC  2FDB               	goto	u6727
 11934                           
 11935                           ;i2c.c: 52: do { LATB0 = 1; } while(0);
 11936  07DD  0022               	movlb	2	; select bank2
 11937  07DE  140D               	bsf	13,0	;volatile
 11938                           
 11939                           ;i2c.c: 53: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11940  07DF  3003               	movlw	3
 11941  07E0  0020               	movlb	0	; select bank0
 11942  07E1  00A1               	movwf	??_I2C_Send_Byte
 11943  07E2                     u6737:	
 11944  07E2  0BA1               	decfsz	??_I2C_Send_Byte,f
 11945  07E3  2FE2               	goto	u6737
 11946                           
 11947                           ;i2c.c: 54: do { TRISB1 = 1; } while(0);
 11948  07E4  0021               	movlb	1	; select bank1
 11949  07E5  148D               	bsf	13,1	;volatile
 11950                           
 11951                           ;i2c.c: 55: if(RB1)
 11952  07E6  0020               	movlb	0	; select bank0
 11953  07E7  1C8D               	btfss	13,1	;volatile
 11954  07E8  2FED               	goto	l858
 11955                           
 11956                           ;i2c.c: 56: {
 11957                           ;i2c.c: 57: do { TRISB1 = 0; } while(0);
 11958  07E9  0021               	movlb	1	; select bank1
 11959  07EA  108D               	bcf	13,1	;volatile
 11960                           
 11961                           ;i2c.c: 58: return 0x01;
 11962  07EB  3001               	movlw	1
 11963  07EC  0008               	return
 11964  07ED                     l858:	
 11965                           ;i2c.c: 59: }
 11966                           ;i2c.c: 60: do { TRISB1 = 0; } while(0);
 11967                           
 11968  07ED  0021               	movlb	1	; select bank1
 11969  07EE  108D               	bcf	13,1	;volatile
 11970                           
 11971                           ;i2c.c: 61: do { LATB0 = 0; } while(0);
 11972  07EF  0022               	movlb	2	; select bank2
 11973  07F0  100D               	bcf	13,0	;volatile
 11974                           
 11975                           ;i2c.c: 62: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11976  07F1  3003               	movlw	3
 11977  07F2  0020               	movlb	0	; select bank0
 11978  07F3  00A1               	movwf	??_I2C_Send_Byte
 11979  07F4                     u6747:	
 11980  07F4  0BA1               	decfsz	??_I2C_Send_Byte,f
 11981  07F5  2FF4               	goto	u6747
 11982                           
 11983                           ;i2c.c: 63: do { LATB1 = 0; } while(0);
 11984  07F6  0022               	movlb	2	; select bank2
 11985  07F7  108D               	bcf	13,1	;volatile
 11986                           
 11987                           ;i2c.c: 64: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11988  07F8  3003               	movlw	3
 11989  07F9  0020               	movlb	0	; select bank0
 11990  07FA  00A1               	movwf	??_I2C_Send_Byte
 11991  07FB                     u6757:	
 11992  07FB  0BA1               	decfsz	??_I2C_Send_Byte,f
 11993  07FC  2FFB               	goto	u6757
 11994                           
 11995                           ;i2c.c: 65: return 0x00;
 11996  07FD  3000               	movlw	0
 11997  07FE  0008               	return
 11998  07FF                     __end_of_I2C_Send_Byte:	
 11999                           
 12000                           	psect	text62
 12001  16FF                     __ptext62:	
 12002 ;; *************** function _I2C_Receive_Byte *****************
 12003 ;; Defined at:
 12004 ;;		line 74 in file "mcc_generated_files/i2c.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;		None
 12007 ;; Auto vars:     Size  Location     Type
 12008 ;;  i               1    3[BANK0 ] unsigned char 
 12009 ;;  Data            1    2[BANK0 ] unsigned char 
 12010 ;; Return value:  Size  Location     Type
 12011 ;;                  1    wreg      unsigned char 
 12012 ;; Registers used:
 12013 ;;		wreg, status,2, status,0
 12014 ;; Tracked objects:
 12015 ;;		On entry : 0/0
 12016 ;;		On exit  : 0/0
 12017 ;;		Unchanged: 0/0
 12018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;Total ram usage:        3 bytes
 12024 ;; Hardware stack levels used:    1
 12025 ;; Hardware stack levels required when called:    3
 12026 ;; This function calls:
 12027 ;;		Nothing
 12028 ;; This function is called by:
 12029 ;;		_I2C_Read_Buffer
 12030 ;; This function uses a non-reentrant model
 12031 ;;
 12032                           
 12033                           
 12034                           ;psect for function _I2C_Receive_Byte
 12035  16FF                     _I2C_Receive_Byte:	
 12036                           
 12037                           ;i2c.c: 76: unsigned char i,Data=0;
 12038                           
 12039                           ;incstack = 0
 12040                           ; Regs used in _I2C_Receive_Byte: [wreg+status,2+status,0]
 12041  16FF  0020               	movlb	0	; select bank0
 12042  1700  01A2               	clrf	I2C_Receive_Byte@Data
 12043                           
 12044                           ;i2c.c: 77: do { LATB1 = 1; } while(0);
 12045  1701  0022               	movlb	2	; select bank2
 12046  1702  148D               	bsf	13,1	;volatile
 12047                           
 12048                           ;i2c.c: 78: for(i=0;i<8;i++)
 12049  1703  0020               	movlb	0	; select bank0
 12050  1704  01A3               	clrf	I2C_Receive_Byte@i
 12051  1705  3008               	movlw	8
 12052  1706  0223               	subwf	I2C_Receive_Byte@i,w
 12053  1707  1803               	btfsc	3,0
 12054  1708  2F2D               	goto	l5318
 12055                           
 12056                           ;i2c.c: 79: {
 12057                           ;i2c.c: 80: Data <<= 1;
 12058  1709  1003               	clrc
 12059  170A                     L14:	
 12060  170A  0DA2               	rlf	I2C_Receive_Byte@Data,f
 12061                           
 12062                           ;i2c.c: 81: do { LATB0 = 1; } while(0);
 12063  170B  0022               	movlb	2	; select bank2
 12064  170C  140D               	bsf	13,0	;volatile
 12065                           
 12066                           ;i2c.c: 82: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12067  170D  3003               	movlw	3
 12068  170E  0020               	movlb	0	; select bank0
 12069  170F  00A1               	movwf	??_I2C_Receive_Byte
 12070  1710                     u6767:	
 12071  1710  0BA1               	decfsz	??_I2C_Receive_Byte,f
 12072  1711  2F10               	goto	u6767
 12073                           
 12074                           ;i2c.c: 83: do { TRISB1 = 1; } while(0);
 12075  1712  0021               	movlb	1	; select bank1
 12076  1713  148D               	bsf	13,1	;volatile
 12077                           
 12078                           ;i2c.c: 84: if(RB1)
 12079  1714  0020               	movlb	0	; select bank0
 12080  1715  1C8D               	btfss	13,1	;volatile
 12081  1716  2F1B               	goto	l877
 12082                           
 12083                           ;i2c.c: 85: {
 12084                           ;i2c.c: 86: do { TRISB1 = 0; } while(0);
 12085  1717  0021               	movlb	1	; select bank1
 12086  1718  108D               	bcf	13,1	;volatile
 12087                           
 12088                           ;i2c.c: 87: Data |= 0x01;
 12089  1719  0020               	movlb	0	; select bank0
 12090  171A  1422               	bsf	I2C_Receive_Byte@Data,0
 12091  171B                     l877:	
 12092                           ;i2c.c: 88: }
 12093                           ;i2c.c: 89: do { TRISB1 = 0; } while(0);
 12094                           
 12095  171B  0021               	movlb	1	; select bank1
 12096  171C  108D               	bcf	13,1	;volatile
 12097                           
 12098                           ;i2c.c: 90: do { LATB0 = 0; } while(0);
 12099  171D  0022               	movlb	2	; select bank2
 12100  171E  100D               	bcf	13,0	;volatile
 12101                           
 12102                           ;i2c.c: 91: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12103  171F  3003               	movlw	3
 12104  1720  0020               	movlb	0	; select bank0
 12105  1721  00A1               	movwf	??_I2C_Receive_Byte
 12106  1722                     u6777:	
 12107  1722  0BA1               	decfsz	??_I2C_Receive_Byte,f
 12108  1723  2F22               	goto	u6777
 12109  1724  3001               	movlw	1
 12110  1725  0020               	movlb	0	; select bank0
 12111  1726  00A1               	movwf	??_I2C_Receive_Byte
 12112  1727  0821               	movf	??_I2C_Receive_Byte,w
 12113  1728  07A3               	addwf	I2C_Receive_Byte@i,f
 12114  1729  3008               	movlw	8
 12115  172A  0223               	subwf	I2C_Receive_Byte@i,w
 12116  172B  1C03               	skipc
 12117  172C  2F0A               	goto	L14
 12118  172D                     l5318:	
 12119                           
 12120                           ;i2c.c: 92: }
 12121                           ;i2c.c: 93: return Data;
 12122  172D  0822               	movf	I2C_Receive_Byte@Data,w
 12123  172E  0008               	return
 12124  172F                     __end_of_I2C_Receive_Byte:	
 12125                           
 12126                           	psect	text63
 12127  053B                     __ptext63:	
 12128 ;; *************** function _Inf_to_Com *****************
 12129 ;; Defined at:
 12130 ;;		line 91 in file "mcc_generated_files/com.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;  tmp_buf        72    0[BANK1 ] unsigned char [72]
 12135 ;;  crc_tmp         2   74[BANK1 ] unsigned int 
 12136 ;;  add_tmp         2   72[BANK1 ] unsigned int 
 12137 ;;  count_tmp       1   77[BANK1 ] unsigned char 
 12138 ;;  i               1   76[BANK1 ] unsigned char 
 12139 ;; Return value:  Size  Location     Type
 12140 ;;                  1    wreg      void 
 12141 ;; Registers used:
 12142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12143 ;; Tracked objects:
 12144 ;;		On entry : 0/0
 12145 ;;		On exit  : 0/0
 12146 ;;		Unchanged: 0/0
 12147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Locals:         0       0      78       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Totals:         0       5      78       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;Total ram usage:       83 bytes
 12153 ;; Hardware stack levels used:    1
 12154 ;; Hardware stack levels required when called:    5
 12155 ;; This function calls:
 12156 ;;		_CRC_cal
 12157 ;;		_EUSART_Write
 12158 ;;		_FLASH_readBlock
 12159 ;; This function is called by:
 12160 ;;		_Com_Process
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           
 12165                           ;psect for function _Inf_to_Com
 12166  053B                     _Inf_to_Com:	
 12167                           
 12168                           ;com.c: 93: unsigned int add_tmp=0;
 12169                           
 12170                           ;incstack = 0
 12171                           ; Regs used in _Inf_to_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12172  053B  0021               	movlb	1	; select bank1
 12173  053C  01E8               	clrf	Inf_to_Com@add_tmp^(0+128)
 12174  053D  01E9               	clrf	(Inf_to_Com@add_tmp+1)^(0+128)
 12175                           
 12176                           ;com.c: 94: unsigned char count_tmp = 0;
 12177  053E  01ED               	clrf	Inf_to_Com@count_tmp^(0+128)
 12178                           
 12179                           ;com.c: 95: unsigned int crc_tmp=0;
 12180  053F  01EA               	clrf	Inf_to_Com@crc_tmp^(0+128)
 12181  0540  01EB               	clrf	(Inf_to_Com@crc_tmp+1)^(0+128)
 12182                           
 12183                           ;com.c: 96: unsigned char tmp_buf[72];
 12184                           ;com.c: 97: unsigned char i=0;
 12185  0541  01EC               	clrf	Inf_to_Com@i^(0+128)
 12186                           
 12187                           ;com.c: 98: add_tmp = (Usart_Rx_Buff[4]<<8) | Usart_Rx_Buff[5];
 12188  0542  0023               	movlb	3	; select bank3
 12189  0543  083D               	movf	(_Usart_Rx_Buff^(0+384)+5),w
 12190  0544  0020               	movlb	0	; select bank0
 12191  0545  00AB               	movwf	??_Inf_to_Com
 12192  0546  01AC               	clrf	??_Inf_to_Com+1
 12193  0547  0023               	movlb	3	; select bank3
 12194  0548  083C               	movf	(_Usart_Rx_Buff^(0+384)+4),w
 12195  0549  0020               	movlb	0	; select bank0
 12196  054A  00AD               	movwf	??_Inf_to_Com+2
 12197  054B  01AE               	clrf	??_Inf_to_Com+3
 12198  054C  082D               	movf	??_Inf_to_Com+2,w
 12199  054D  00AE               	movwf	??_Inf_to_Com+3
 12200  054E  01AD               	clrf	??_Inf_to_Com+2
 12201  054F  082B               	movf	??_Inf_to_Com,w
 12202  0550  042D               	iorwf	??_Inf_to_Com+2,w
 12203  0551  0021               	movlb	1	; select bank1
 12204  0552  00E8               	movwf	Inf_to_Com@add_tmp^(0+128)
 12205  0553  0020               	movlb	0	; select bank0
 12206  0554  082C               	movf	??_Inf_to_Com+1,w
 12207  0555  042E               	iorwf	??_Inf_to_Com+3,w
 12208  0556  0021               	movlb	1	; select bank1
 12209  0557  00E9               	movwf	(Inf_to_Com@add_tmp+1)^(0+128)
 12210                           
 12211                           ;com.c: 99: count_tmp = Usart_Rx_Buff[6];
 12212  0558  0023               	movlb	3	; select bank3
 12213  0559  083E               	movf	(_Usart_Rx_Buff^(0+384)+6),w
 12214  055A  0020               	movlb	0	; select bank0
 12215  055B  00AB               	movwf	??_Inf_to_Com
 12216  055C  082B               	movf	??_Inf_to_Com,w
 12217  055D  0021               	movlb	1	; select bank1
 12218  055E  00ED               	movwf	Inf_to_Com@count_tmp^(0+128)
 12219                           
 12220                           ;com.c: 100: FLASH_readBlock(Flash_buff, add_tmp, count_tmp);
 12221  055F  0869               	movf	(Inf_to_Com@add_tmp+1)^(0+128),w
 12222  0560  0020               	movlb	0	; select bank0
 12223  0561  00A5               	movwf	FLASH_readBlock@address+1
 12224  0562  0021               	movlb	1	; select bank1
 12225  0563  0868               	movf	Inf_to_Com@add_tmp^(0+128),w
 12226  0564  0020               	movlb	0	; select bank0
 12227  0565  00A4               	movwf	FLASH_readBlock@address
 12228  0566  0021               	movlb	1	; select bank1
 12229  0567  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12230  0568  0020               	movlb	0	; select bank0
 12231  0569  00AB               	movwf	??_Inf_to_Com
 12232  056A  082B               	movf	??_Inf_to_Com,w
 12233  056B  00A6               	movwf	FLASH_readBlock@count
 12234  056C  3020               	movlw	(low (_Flash_buff| (0+512)))& (0+255)
 12235  056D  3195  2543  3185   	fcall	_FLASH_readBlock
 12236                           
 12237                           ;com.c: 101: tmp_buf[0] = 0xfe;
 12238  0570  30FE               	movlw	254
 12239  0571  0020               	movlb	0	; select bank0
 12240  0572  00AB               	movwf	??_Inf_to_Com
 12241  0573  082B               	movf	??_Inf_to_Com,w
 12242  0574  0021               	movlb	1	; select bank1
 12243  0575  00A0               	movwf	Inf_to_Com@tmp_buf^(0+128)
 12244                           
 12245                           ;com.c: 102: tmp_buf[1] = 0xfe;
 12246  0576  30FE               	movlw	254
 12247  0577  0020               	movlb	0	; select bank0
 12248  0578  00AB               	movwf	??_Inf_to_Com
 12249  0579  082B               	movf	??_Inf_to_Com,w
 12250  057A  0021               	movlb	1	; select bank1
 12251  057B  00A1               	movwf	(Inf_to_Com@tmp_buf^(0+128)+1)
 12252                           
 12253                           ;com.c: 103: tmp_buf[2] = 0x01;
 12254  057C  01A2               	clrf	(Inf_to_Com@tmp_buf^(0+128)+2)
 12255  057D  0AA2               	incf	(Inf_to_Com@tmp_buf^(0+128)+2),f
 12256                           
 12257                           ;com.c: 104: tmp_buf[3] = count_tmp;
 12258  057E  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12259  057F  0020               	movlb	0	; select bank0
 12260  0580  00AB               	movwf	??_Inf_to_Com
 12261  0581  082B               	movf	??_Inf_to_Com,w
 12262  0582  0021               	movlb	1	; select bank1
 12263  0583  00A3               	movwf	(Inf_to_Com@tmp_buf^(0+128)+3)
 12264                           
 12265                           ;com.c: 105: for(i=0;i<count_tmp;i++)
 12266  0584  01EC               	clrf	Inf_to_Com@i^(0+128)
 12267  0585                     l6416:	
 12268  0585  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12269  0586  026C               	subwf	Inf_to_Com@i^(0+128),w
 12270  0587  1803               	btfsc	3,0
 12271  0588  2DB6               	goto	l6418
 12272                           
 12273                           ;com.c: 106: {
 12274                           ;com.c: 107: tmp_buf[4+i*2] = Flash_buff[i] >> 8 ;
 12275  0589  356C               	lslf	Inf_to_Com@i^(0+128),w
 12276  058A  3E20               	addlw	(low (_Flash_buff| (0+512)))& (0+255)
 12277  058B  0086               	movwf	6
 12278  058C  3002               	movlw	2	; select bank4/5
 12279  058D  0087               	movwf	7
 12280  058E  3F40               	moviw [0]fsr1
 12281  058F  0020               	movlb	0	; select bank0
 12282  0590  00AB               	movwf	??_Inf_to_Com
 12283  0591  3F41               	moviw [1]fsr1
 12284  0592  00AC               	movwf	??_Inf_to_Com+1
 12285  0593  082C               	movf	??_Inf_to_Com+1,w
 12286  0594  00AD               	movwf	??_Inf_to_Com+2
 12287  0595  0021               	movlb	1	; select bank1
 12288  0596  356C               	lslf	Inf_to_Com@i^(0+128),w
 12289  0597  3E04               	addlw	4
 12290  0598  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12291  0599  0086               	movwf	6
 12292  059A  0187               	clrf	7
 12293  059B  0020               	movlb	0	; select bank0
 12294  059C  082D               	movf	??_Inf_to_Com+2,w
 12295  059D  0081               	movwf	1
 12296                           
 12297                           ;com.c: 108: tmp_buf[5+i*2] = Flash_buff[i] & 0xff ;
 12298  059E  0021               	movlb	1	; select bank1
 12299  059F  356C               	lslf	Inf_to_Com@i^(0+128),w
 12300  05A0  3E20               	addlw	(low (_Flash_buff| (0+512)))& (0+255)
 12301  05A1  0086               	movwf	6
 12302  05A2  3002               	movlw	2	; select bank4/5
 12303  05A3  0087               	movwf	7
 12304  05A4  0801               	movf	1,w
 12305  05A5  0020               	movlb	0	; select bank0
 12306  05A6  00AB               	movwf	??_Inf_to_Com
 12307  05A7  0021               	movlb	1	; select bank1
 12308  05A8  356C               	lslf	Inf_to_Com@i^(0+128),w
 12309  05A9  3E05               	addlw	5
 12310  05AA  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12311  05AB  0086               	movwf	6
 12312  05AC  0187               	clrf	7
 12313  05AD  0020               	movlb	0	; select bank0
 12314  05AE  082B               	movf	??_Inf_to_Com,w
 12315  05AF  0081               	movwf	1
 12316  05B0  3001               	movlw	1
 12317  05B1  00AB               	movwf	??_Inf_to_Com
 12318  05B2  082B               	movf	??_Inf_to_Com,w
 12319  05B3  0021               	movlb	1	; select bank1
 12320  05B4  07EC               	addwf	Inf_to_Com@i^(0+128),f
 12321  05B5  2D85               	goto	l6416
 12322  05B6                     l6418:	
 12323                           
 12324                           ;com.c: 109: }
 12325                           ;com.c: 110: crc_tmp = CRC_cal(tmp_buf,count_tmp+7);
 12326  05B6  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12327  05B7  3E07               	addlw	7
 12328  05B8  0020               	movlb	0	; select bank0
 12329  05B9  00AB               	movwf	??_Inf_to_Com
 12330  05BA  082B               	movf	??_Inf_to_Com,w
 12331  05BB  00A1               	movwf	CRC_cal@frame_len
 12332  05BC  30A0               	movlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12333  05BD  318D  25C5  3185   	fcall	_CRC_cal
 12334  05C0  0020               	movlb	0	; select bank0
 12335  05C1  0822               	movf	?_CRC_cal+1,w
 12336  05C2  0021               	movlb	1	; select bank1
 12337  05C3  00EB               	movwf	(Inf_to_Com@crc_tmp+1)^(0+128)
 12338  05C4  0020               	movlb	0	; select bank0
 12339  05C5  0821               	movf	?_CRC_cal,w
 12340  05C6  0021               	movlb	1	; select bank1
 12341  05C7  00EA               	movwf	Inf_to_Com@crc_tmp^(0+128)
 12342                           
 12343                           ;com.c: 111: tmp_buf[count_tmp*2 + 4] = crc_tmp & 0xff;
 12344  05C8  086A               	movf	Inf_to_Com@crc_tmp^(0+128),w
 12345  05C9  0020               	movlb	0	; select bank0
 12346  05CA  00AB               	movwf	??_Inf_to_Com
 12347  05CB  0021               	movlb	1	; select bank1
 12348  05CC  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 12349  05CD  3E04               	addlw	4
 12350  05CE  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12351  05CF  0086               	movwf	6
 12352  05D0  0187               	clrf	7
 12353  05D1  0020               	movlb	0	; select bank0
 12354  05D2  082B               	movf	??_Inf_to_Com,w
 12355  05D3  0081               	movwf	1
 12356                           
 12357                           ;com.c: 112: tmp_buf[count_tmp*2 + 5] = crc_tmp >>8;
 12358  05D4  0021               	movlb	1	; select bank1
 12359  05D5  086B               	movf	(Inf_to_Com@crc_tmp+1)^(0+128),w
 12360  05D6  0020               	movlb	0	; select bank0
 12361  05D7  00AB               	movwf	??_Inf_to_Com
 12362  05D8  0021               	movlb	1	; select bank1
 12363  05D9  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 12364  05DA  3E05               	addlw	5
 12365  05DB  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12366  05DC  0086               	movwf	6
 12367  05DD  0187               	clrf	7
 12368  05DE  0020               	movlb	0	; select bank0
 12369  05DF  082B               	movf	??_Inf_to_Com,w
 12370  05E0  0081               	movwf	1
 12371                           
 12372                           ;com.c: 113: tmp_buf[count_tmp*2 + 6] = 0xbb;
 12373  05E1  30BB               	movlw	187
 12374  05E2  00AB               	movwf	??_Inf_to_Com
 12375  05E3  0021               	movlb	1	; select bank1
 12376  05E4  356D               	lslf	Inf_to_Com@count_tmp^(0+128),w
 12377  05E5  3E06               	addlw	6
 12378  05E6  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12379  05E7  0086               	movwf	6
 12380  05E8  0187               	clrf	7
 12381  05E9  0020               	movlb	0	; select bank0
 12382  05EA  082B               	movf	??_Inf_to_Com,w
 12383  05EB  0081               	movwf	1
 12384                           
 12385                           ;com.c: 114: for(i=0;i<(count_tmp*2+7);i++)
 12386  05EC  0021               	movlb	1	; select bank1
 12387  05ED  01EC               	clrf	Inf_to_Com@i^(0+128)
 12388  05EE                     l6432:	
 12389  05EE  086D               	movf	Inf_to_Com@count_tmp^(0+128),w
 12390  05EF  0020               	movlb	0	; select bank0
 12391  05F0  00AB               	movwf	??_Inf_to_Com
 12392  05F1  01AC               	clrf	??_Inf_to_Com+1
 12393  05F2  35AB               	lslf	??_Inf_to_Com,f
 12394  05F3  0DAC               	rlf	??_Inf_to_Com+1,f
 12395  05F4  082B               	movf	??_Inf_to_Com,w
 12396  05F5  3E07               	addlw	7
 12397  05F6  00AD               	movwf	??_Inf_to_Com+2
 12398  05F7  3000               	movlw	0
 12399  05F8  3D2C               	addwfc	??_Inf_to_Com+1,w
 12400  05F9  00AE               	movwf	??_Inf_to_Com+3
 12401  05FA  082E               	movf	??_Inf_to_Com+3,w
 12402  05FB  3A80               	xorlw	128
 12403  05FC  3C80               	sublw	128
 12404  05FD  1D03               	skipz
 12405  05FE  2E02               	goto	u5995
 12406  05FF  082D               	movf	??_Inf_to_Com+2,w
 12407  0600  0021               	movlb	1	; select bank1
 12408  0601  026C               	subwf	Inf_to_Com@i^(0+128),w
 12409  0602                     u5995:	
 12410  0602  1803               	btfsc	3,0
 12411  0603  0008               	return
 12412                           
 12413                           ;com.c: 115: {
 12414                           ;com.c: 116: EUSART_Write(tmp_buf[i]);
 12415  0604  0021               	movlb	1	; select bank1
 12416  0605  086C               	movf	Inf_to_Com@i^(0+128),w
 12417  0606  3EA0               	addlw	(low (Inf_to_Com@tmp_buf| 0))& (0+255)
 12418  0607  0086               	movwf	6
 12419  0608  0187               	clrf	7
 12420  0609  0801               	movf	1,w
 12421  060A  3193  2354  3185   	fcall	_EUSART_Write
 12422  060D  3001               	movlw	1
 12423  060E  0020               	movlb	0	; select bank0
 12424  060F  00AB               	movwf	??_Inf_to_Com
 12425  0610  082B               	movf	??_Inf_to_Com,w
 12426  0611  0021               	movlb	1	; select bank1
 12427  0612  07EC               	addwf	Inf_to_Com@i^(0+128),f
 12428  0613  2DEE               	goto	l6432
 12429  0614                     __end_of_Inf_to_Com:	
 12430                           
 12431                           	psect	text64
 12432  1543                     __ptext64:	
 12433 ;; *************** function _FLASH_readBlock *****************
 12434 ;; Defined at:
 12435 ;;		line 204 in file "mcc_generated_files/memory.c"
 12436 ;; Parameters:    Size  Location     Type
 12437 ;;  buffer          1    wreg     PTR unsigned int 
 12438 ;;		 -> Flash_buff(64), 
 12439 ;;  address         2    4[BANK0 ] unsigned int 
 12440 ;;  count           1    6[BANK0 ] unsigned char 
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;  buffer          1    8[BANK0 ] PTR unsigned int 
 12443 ;;		 -> Flash_buff(64), 
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12453 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;Total ram usage:        5 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; Hardware stack levels required when called:    4
 12460 ;; This function calls:
 12461 ;;		_FLASH_ReadWord
 12462 ;; This function is called by:
 12463 ;;		_Inf_to_Com
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           
 12468                           ;psect for function _FLASH_readBlock
 12469  1543                     _FLASH_readBlock:	
 12470                           
 12471                           ;incstack = 0
 12472                           ; Regs used in _FLASH_readBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12473                           ;FLASH_readBlock@buffer stored from wreg
 12474  1543  0020               	movlb	0	; select bank0
 12475  1544  00A8               	movwf	FLASH_readBlock@buffer
 12476  1545                     l6124:	
 12477                           ;memory.c: 206: while (count > 0)
 12478                           
 12479  1545  0826               	movf	FLASH_readBlock@count,w
 12480  1546  1903               	btfsc	3,2
 12481  1547  0008               	return
 12482                           
 12483                           ;memory.c: 207: {
 12484                           ;memory.c: 208: *buffer++ = FLASH_ReadWord (address++);
 12485  1548  0825               	movf	FLASH_readBlock@address+1,w
 12486  1549  00A2               	movwf	FLASH_ReadWord@flashAddr+1
 12487  154A  0824               	movf	FLASH_readBlock@address,w
 12488  154B  00A1               	movwf	FLASH_ReadWord@flashAddr
 12489  154C  3195  2523  3195   	fcall	_FLASH_ReadWord
 12490  154F  0020               	movlb	0	; select bank0
 12491  1550  0828               	movf	FLASH_readBlock@buffer,w
 12492  1551  0086               	movwf	6
 12493  1552  3002               	movlw	2	; select bank4/5
 12494  1553  0087               	movwf	7
 12495  1554  0821               	movf	?_FLASH_ReadWord,w
 12496  1555  3FC0               	movwi [0]fsr1
 12497  1556  0822               	movf	?_FLASH_ReadWord+1,w
 12498  1557  3FC1               	movwi [1]fsr1
 12499  1558  3001               	movlw	1
 12500  1559  07A4               	addwf	FLASH_readBlock@address,f
 12501  155A  3000               	movlw	0
 12502  155B  3DA5               	addwfc	FLASH_readBlock@address+1,f
 12503  155C  3002               	movlw	2
 12504  155D  00A7               	movwf	??_FLASH_readBlock
 12505  155E  0827               	movf	??_FLASH_readBlock,w
 12506  155F  07A8               	addwf	FLASH_readBlock@buffer,f
 12507                           
 12508                           ;memory.c: 209: count--;
 12509  1560  3001               	movlw	1
 12510  1561  02A6               	subwf	FLASH_readBlock@count,f
 12511  1562  2D45               	goto	l6124
 12512  1563                     __end_of_FLASH_readBlock:	
 12513                           
 12514                           	psect	text65
 12515  1523                     __ptext65:	
 12516 ;; *************** function _FLASH_ReadWord *****************
 12517 ;; Defined at:
 12518 ;;		line 58 in file "mcc_generated_files/memory.c"
 12519 ;; Parameters:    Size  Location     Type
 12520 ;;  flashAddr       2    1[BANK0 ] unsigned int 
 12521 ;; Auto vars:     Size  Location     Type
 12522 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 12523 ;; Return value:  Size  Location     Type
 12524 ;;                  2    1[BANK0 ] unsigned int 
 12525 ;; Registers used:
 12526 ;;		wreg, status,2, status,0
 12527 ;; Tracked objects:
 12528 ;;		On entry : 0/0
 12529 ;;		On exit  : 0/0
 12530 ;;		Unchanged: 0/0
 12531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12532 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;Total ram usage:        3 bytes
 12537 ;; Hardware stack levels used:    1
 12538 ;; Hardware stack levels required when called:    3
 12539 ;; This function calls:
 12540 ;;		Nothing
 12541 ;; This function is called by:
 12542 ;;		_FLASH_readBlock
 12543 ;;		_Key_Process
 12544 ;;		_Serach_Flash_Head
 12545 ;; This function uses a non-reentrant model
 12546 ;;
 12547                           
 12548                           
 12549                           ;psect for function _FLASH_ReadWord
 12550  1523                     _FLASH_ReadWord:	
 12551                           
 12552                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12553                           
 12554                           ;incstack = 0
 12555                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12556  1523  3000               	movlw	0
 12557  1524  1B8B               	btfsc	11,7	;volatile
 12558  1525  3001               	movlw	1
 12559  1526  0020               	movlb	0	; select bank0
 12560  1527  00A3               	movwf	FLASH_ReadWord@GIEBitValue
 12561                           
 12562                           ;memory.c: 61: INTCONbits.GIE = 0;
 12563  1528  138B               	bcf	11,7	;volatile
 12564                           
 12565                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12566  1529  0821               	movf	FLASH_ReadWord@flashAddr,w
 12567  152A  0023               	movlb	3	; select bank3
 12568  152B  0091               	movwf	17	;volatile
 12569                           
 12570                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12571  152C  0020               	movlb	0	; select bank0
 12572  152D  0822               	movf	FLASH_ReadWord@flashAddr+1,w
 12573  152E  0023               	movlb	3	; select bank3
 12574  152F  0092               	movwf	18	;volatile
 12575                           
 12576                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12577  1530  1315               	bcf	21,6	;volatile
 12578                           
 12579                           ;memory.c: 66: PMCON1bits.RD = 1;
 12580  1531  1415               	bsf	21,0	;volatile
 12581                           
 12582                           ;memory.c: 67: __nop();
 12583  1532  0000               	nop
 12584                           
 12585                           ;memory.c: 68: __nop();
 12586  1533  0000               	nop
 12587                           
 12588                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12589  1534  0020               	movlb	0	; select bank0
 12590  1535  0C23               	rrf	FLASH_ReadWord@GIEBitValue,w
 12591  1536  1C03               	skipc
 12592  1537  138B               	bcf	11,7	;volatile
 12593  1538  1803               	skipnc
 12594  1539  178B               	bsf	11,7	;volatile
 12595                           
 12596                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12597  153A  0023               	movlb	3	; select bank3
 12598  153B  0814               	movf	20,w	;volatile
 12599  153C  0020               	movlb	0	; select bank0
 12600  153D  00A2               	movwf	?_FLASH_ReadWord+1
 12601  153E  0023               	movlb	3	; select bank3
 12602  153F  0813               	movf	19,w	;volatile
 12603  1540  0020               	movlb	0	; select bank0
 12604  1541  00A1               	movwf	?_FLASH_ReadWord
 12605  1542  0008               	return
 12606  1543                     __end_of_FLASH_ReadWord:	
 12607                           
 12608                           	psect	text66
 12609  1354                     __ptext66:	
 12610 ;; *************** function _EUSART_Write *****************
 12611 ;; Defined at:
 12612 ;;		line 132 in file "mcc_generated_files/eusart.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;  txData          1    wreg     unsigned char 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  txData          1    1[BANK0 ] unsigned char 
 12617 ;; Return value:  Size  Location     Type
 12618 ;;                  1    wreg      void 
 12619 ;; Registers used:
 12620 ;;		wreg
 12621 ;; Tracked objects:
 12622 ;;		On entry : 0/0
 12623 ;;		On exit  : 0/0
 12624 ;;		Unchanged: 0/0
 12625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12629 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;Total ram usage:        1 bytes
 12631 ;; Hardware stack levels used:    1
 12632 ;; Hardware stack levels required when called:    3
 12633 ;; This function calls:
 12634 ;;		Nothing
 12635 ;; This function is called by:
 12636 ;;		_Key_Process
 12637 ;;		_Read_time_to_Com
 12638 ;;		_Inf_to_Com
 12639 ;;		_EUSART_SendString
 12640 ;; This function uses a non-reentrant model
 12641 ;;
 12642                           
 12643                           
 12644                           ;psect for function _EUSART_Write
 12645  1354                     _EUSART_Write:	
 12646                           
 12647                           ;incstack = 0
 12648                           ; Regs used in _EUSART_Write: [wreg]
 12649                           ;EUSART_Write@txData stored from wreg
 12650  1354  0020               	movlb	0	; select bank0
 12651  1355  00A1               	movwf	EUSART_Write@txData
 12652                           
 12653                           ;eusart.c: 135: TXREG = txData;
 12654  1356  0821               	movf	EUSART_Write@txData,w
 12655  1357  0023               	movlb	3	; select bank3
 12656  1358  009A               	movwf	26	;volatile
 12657                           
 12658                           ;eusart.c: 136: PIR1bits.TXIF = 0;
 12659  1359  0020               	movlb	0	; select bank0
 12660  135A  1211               	bcf	17,4	;volatile
 12661                           
 12662                           ;eusart.c: 137: __nop();
 12663  135B  0000               	nop
 12664  135C                     l163:	
 12665                           ;eusart.c: 138: while(!PIR1bits.TXIF)
 12666                           
 12667  135C  0020               	movlb	0	; select bank0
 12668  135D  1A11               	btfsc	17,4	;volatile
 12669  135E  0008               	return
 12670                           
 12671                           ;eusart.c: 139: {__nop();__nop();__nop();__nop();}
 12672  135F  0000               	nop
 12673  1360  0000               	nop
 12674  1361  0000               	nop
 12675  1362  0000               	nop
 12676  1363  2B5C               	goto	l163
 12677  1364                     __end_of_EUSART_Write:	
 12678                           
 12679                           	psect	text67
 12680  0DC5                     __ptext67:	
 12681 ;; *************** function _CRC_cal *****************
 12682 ;; Defined at:
 12683 ;;		line 165 in file "mcc_generated_files/com.c"
 12684 ;; Parameters:    Size  Location     Type
 12685 ;;  rx_arr          1    wreg     PTR unsigned char 
 12686 ;;		 -> Inf_to_Com@tmp_buf(72), Read_time_to_Com@tmp_buf(16), 
 12687 ;;  frame_len       1    1[BANK0 ] unsigned char 
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;  rx_arr          1    7[BANK0 ] PTR unsigned char 
 12690 ;;		 -> Inf_to_Com@tmp_buf(72), Read_time_to_Com@tmp_buf(16), 
 12691 ;;  remainder       2    9[BANK0 ] unsigned int 
 12692 ;;  i               1    8[BANK0 ] unsigned char 
 12693 ;; Return value:  Size  Location     Type
 12694 ;;                  2    1[BANK0 ] unsigned int 
 12695 ;; Registers used:
 12696 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12697 ;; Tracked objects:
 12698 ;;		On entry : 0/0
 12699 ;;		On exit  : 0/0
 12700 ;;		Unchanged: 0/0
 12701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12702 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12705 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12706 ;;Total ram usage:       10 bytes
 12707 ;; Hardware stack levels used:    1
 12708 ;; Hardware stack levels required when called:    3
 12709 ;; This function calls:
 12710 ;;		Nothing
 12711 ;; This function is called by:
 12712 ;;		_Read_time_to_Com
 12713 ;;		_Inf_to_Com
 12714 ;; This function uses a non-reentrant model
 12715 ;;
 12716                           
 12717                           
 12718                           ;psect for function _CRC_cal
 12719  0DC5                     _CRC_cal:	
 12720                           
 12721                           ;incstack = 0
 12722                           ; Regs used in _CRC_cal: [wreg+fsr1l+fsr1h+status,2+status,0]
 12723                           ;CRC_cal@rx_arr stored from wreg
 12724  0DC5  0020               	movlb	0	; select bank0
 12725  0DC6  00A7               	movwf	CRC_cal@rx_arr
 12726                           
 12727                           ;com.c: 167: unsigned char i = 0;
 12728  0DC7  01A8               	clrf	CRC_cal@i
 12729                           
 12730                           ;com.c: 168: unsigned int remainder = 0;
 12731  0DC8  01A9               	clrf	CRC_cal@remainder
 12732  0DC9  01AA               	clrf	CRC_cal@remainder+1
 12733                           
 12734                           ;com.c: 170: for(i = 2; i < frame_len - 3; i++)
 12735  0DCA  3002               	movlw	2
 12736  0DCB  00A3               	movwf	??_CRC_cal
 12737  0DCC  0823               	movf	??_CRC_cal,w
 12738  0DCD  00A8               	movwf	CRC_cal@i
 12739  0DCE                     l6108:	
 12740  0DCE  0821               	movf	CRC_cal@frame_len,w
 12741  0DCF  3EFD               	addlw	253
 12742  0DD0  00A3               	movwf	??_CRC_cal
 12743  0DD1  30FF               	movlw	255
 12744  0DD2  1803               	skipnc
 12745  0DD3  3000               	movlw	0
 12746  0DD4  00A4               	movwf	??_CRC_cal+1
 12747  0DD5  0824               	movf	??_CRC_cal+1,w
 12748  0DD6  3A80               	xorlw	128
 12749  0DD7  3C80               	sublw	128
 12750  0DD8  1D03               	skipz
 12751  0DD9  2DDC               	goto	u5765
 12752  0DDA  0823               	movf	??_CRC_cal,w
 12753  0DDB  0228               	subwf	CRC_cal@i,w
 12754  0DDC                     u5765:	
 12755  0DDC  1803               	btfsc	3,0
 12756  0DDD  2E39               	goto	l6110
 12757                           
 12758                           ;com.c: 171: {
 12759                           ;com.c: 172: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 12760  0DDE  0020               	movlb	0	; select bank0
 12761  0DDF  0829               	movf	CRC_cal@remainder,w
 12762  0DE0  00A4               	movwf	??_CRC_cal+1
 12763  0DE1  01A3               	clrf	??_CRC_cal
 12764  0DE2  082A               	movf	CRC_cal@remainder+1,w
 12765  0DE3  00A6               	movwf	??_CRC_cal+3
 12766  0DE4  0829               	movf	CRC_cal@remainder,w
 12767  0DE5  00A5               	movwf	??_CRC_cal+2
 12768  0DE6  0826               	movf	??_CRC_cal+3,w
 12769  0DE7  00A5               	movwf	??_CRC_cal+2
 12770  0DE8  01A6               	clrf	??_CRC_cal+3
 12771  0DE9  0823               	movf	??_CRC_cal,w
 12772  0DEA  0425               	iorwf	??_CRC_cal+2,w
 12773  0DEB  00A9               	movwf	CRC_cal@remainder
 12774  0DEC  0824               	movf	??_CRC_cal+1,w
 12775  0DED  0426               	iorwf	??_CRC_cal+3,w
 12776  0DEE  00AA               	movwf	CRC_cal@remainder+1
 12777                           
 12778                           ;com.c: 173: remainder ^= rx_arr[i];
 12779  0DEF  0828               	movf	CRC_cal@i,w
 12780  0DF0  0727               	addwf	CRC_cal@rx_arr,w
 12781  0DF1  00A3               	movwf	??_CRC_cal
 12782  0DF2  0823               	movf	??_CRC_cal,w
 12783  0DF3  0086               	movwf	6
 12784  0DF4  0187               	clrf	7
 12785  0DF5  0801               	movf	1,w
 12786  0DF6  00A4               	movwf	??_CRC_cal+1
 12787  0DF7  01A5               	clrf	??_CRC_cal+2
 12788  0DF8  0824               	movf	??_CRC_cal+1,w
 12789  0DF9  06A9               	xorwf	CRC_cal@remainder,f
 12790  0DFA  0825               	movf	??_CRC_cal+2,w
 12791  0DFB  06AA               	xorwf	CRC_cal@remainder+1,f
 12792                           
 12793                           ;com.c: 174: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 12794  0DFC  082A               	movf	CRC_cal@remainder+1,w
 12795  0DFD  00A4               	movwf	??_CRC_cal+1
 12796  0DFE  0829               	movf	CRC_cal@remainder,w
 12797  0DFF  00A3               	movwf	??_CRC_cal
 12798  0E00  3004               	movlw	4
 12799  0E01                     u5755:	
 12800  0E01  36A4               	lsrf	??_CRC_cal+1,f
 12801  0E02  0CA3               	rrf	??_CRC_cal,f
 12802  0E03  0B89               	decfsz	9,f
 12803  0E04  2E01               	goto	u5755
 12804  0E05  300F               	movlw	15
 12805  0E06  0523               	andwf	??_CRC_cal,w
 12806  0E07  00A5               	movwf	??_CRC_cal+2
 12807  0E08  3000               	movlw	0
 12808  0E09  0524               	andwf	??_CRC_cal+1,w
 12809  0E0A  00A6               	movwf	??_CRC_cal+3
 12810  0E0B  0825               	movf	??_CRC_cal+2,w
 12811  0E0C  06A9               	xorwf	CRC_cal@remainder,f
 12812  0E0D  0826               	movf	??_CRC_cal+3,w
 12813  0E0E  06AA               	xorwf	CRC_cal@remainder+1,f
 12814                           
 12815                           ;com.c: 175: remainder ^= (unsigned int)((remainder << 8) << 4);
 12816  0E0F  0829               	movf	CRC_cal@remainder,w
 12817  0E10  00A4               	movwf	??_CRC_cal+1
 12818  0E11  01A3               	clrf	??_CRC_cal
 12819  0E12  0EA3               	swapf	??_CRC_cal,f
 12820  0E13  0EA4               	swapf	??_CRC_cal+1,f
 12821  0E14  30F0               	movlw	240
 12822  0E15  05A4               	andwf	??_CRC_cal+1,f
 12823  0E16  0823               	movf	??_CRC_cal,w
 12824  0E17  390F               	andlw	15
 12825  0E18  04A4               	iorwf	??_CRC_cal+1,f
 12826  0E19  30F0               	movlw	240
 12827  0E1A  05A3               	andwf	??_CRC_cal,f
 12828  0E1B  0823               	movf	??_CRC_cal,w
 12829  0E1C  06A9               	xorwf	CRC_cal@remainder,f
 12830  0E1D  0824               	movf	??_CRC_cal+1,w
 12831  0E1E  06AA               	xorwf	CRC_cal@remainder+1,f
 12832                           
 12833                           ;com.c: 176: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 12834  0E1F  30FF               	movlw	255
 12835  0E20  0529               	andwf	CRC_cal@remainder,w
 12836  0E21  00A3               	movwf	??_CRC_cal
 12837  0E22  3000               	movlw	0
 12838  0E23  052A               	andwf	CRC_cal@remainder+1,w
 12839  0E24  00A4               	movwf	??_CRC_cal+1
 12840  0E25  0EA3               	swapf	??_CRC_cal,f
 12841  0E26  0EA4               	swapf	??_CRC_cal+1,f
 12842  0E27  30F0               	movlw	240
 12843  0E28  05A4               	andwf	??_CRC_cal+1,f
 12844  0E29  0823               	movf	??_CRC_cal,w
 12845  0E2A  390F               	andlw	15
 12846  0E2B  04A4               	iorwf	??_CRC_cal+1,f
 12847  0E2C  30F0               	movlw	240
 12848  0E2D  05A3               	andwf	??_CRC_cal,f
 12849  0E2E  35A3               	lslf	??_CRC_cal,f
 12850  0E2F  0DA4               	rlf	??_CRC_cal+1,f
 12851  0E30  0823               	movf	??_CRC_cal,w
 12852  0E31  06A9               	xorwf	CRC_cal@remainder,f
 12853  0E32  0824               	movf	??_CRC_cal+1,w
 12854  0E33  06AA               	xorwf	CRC_cal@remainder+1,f
 12855  0E34  3001               	movlw	1
 12856  0E35  00A3               	movwf	??_CRC_cal
 12857  0E36  0823               	movf	??_CRC_cal,w
 12858  0E37  07A8               	addwf	CRC_cal@i,f
 12859  0E38  2DCE               	goto	l6108
 12860  0E39                     l6110:	
 12861                           
 12862                           ;com.c: 177: }
 12863                           ;com.c: 178: return remainder;
 12864  0E39  0020               	movlb	0	; select bank0
 12865  0E3A  082A               	movf	CRC_cal@remainder+1,w
 12866  0E3B  00A2               	movwf	?_CRC_cal+1
 12867  0E3C  0829               	movf	CRC_cal@remainder,w
 12868  0E3D  00A1               	movwf	?_CRC_cal
 12869  0E3E  0008               	return
 12870  0E3F                     __end_of_CRC_cal:	
 12871                           
 12872                           	psect	text68
 12873  14E6                     __ptext68:	
 12874 ;; *************** function _ADC_GetConversion *****************
 12875 ;; Defined at:
 12876 ;;		line 106 in file "mcc_generated_files/adc.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;  channel         1    wreg     enum E1850
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;  channel         1    4[BANK0 ] enum E1850
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  2    1[BANK0 ] unsigned int 
 12883 ;; Registers used:
 12884 ;;		wreg, status,2, status,0
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12890 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;Total ram usage:        4 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    3
 12897 ;; This function calls:
 12898 ;;		Nothing
 12899 ;; This function is called by:
 12900 ;;		_main
 12901 ;; This function uses a non-reentrant model
 12902 ;;
 12903                           
 12904                           
 12905                           ;psect for function _ADC_GetConversion
 12906  14E6                     _ADC_GetConversion:	
 12907                           
 12908                           ;incstack = 0
 12909                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 12910                           ;ADC_GetConversion@channel stored from wreg
 12911  14E6  0020               	movlb	0	; select bank0
 12912  14E7  00A4               	movwf	ADC_GetConversion@channel
 12913                           
 12914                           ;adc.c: 108: ADCON0bits.CHS = channel;
 12915  14E8  0824               	movf	ADC_GetConversion@channel,w
 12916  14E9  00A3               	movwf	??_ADC_GetConversion
 12917  14EA  0DA3               	rlf	??_ADC_GetConversion,f
 12918  14EB  0DA3               	rlf	??_ADC_GetConversion,f
 12919  14EC  0021               	movlb	1	; select bank1
 12920  14ED  081D               	movf	29,w	;volatile
 12921  14EE  0020               	movlb	0	; select bank0
 12922  14EF  0623               	xorwf	??_ADC_GetConversion,w
 12923  14F0  3983               	andlw	-125
 12924  14F1  0623               	xorwf	??_ADC_GetConversion,w
 12925  14F2  0021               	movlb	1	; select bank1
 12926  14F3  009D               	movwf	29	;volatile
 12927                           
 12928                           ;adc.c: 111: ADCON0bits.ADON = 1;
 12929  14F4  141D               	bsf	29,0	;volatile
 12930                           
 12931                           ;adc.c: 114: _delay((unsigned long)((5)*(4000000/4000000.0)));
 12932  14F5  3200               	nop2	;2 cycle nop
 12933  14F6  3200               	nop2	;2 cycle nop
 12934  14F7  0000               	nop
 12935                           
 12936                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
 12937  14F8  0021               	movlb	1	; select bank1
 12938  14F9  149D               	bsf	29,1	;volatile
 12939  14FA                     l261:	
 12940                           ;adc.c: 120: while (ADCON0bits.GO_nDONE) {
 12941                           
 12942  14FA  189D               	btfsc	29,1	;volatile
 12943  14FB  2CFA               	goto	l261
 12944                           
 12945                           ;adc.c: 121: }
 12946                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
 12947  14FC  081C               	movf	28,w	;volatile
 12948  14FD  0020               	movlb	0	; select bank0
 12949  14FE  00A2               	movwf	?_ADC_GetConversion+1
 12950  14FF  0021               	movlb	1	; select bank1
 12951  1500  081B               	movf	27,w	;volatile
 12952  1501  0020               	movlb	0	; select bank0
 12953  1502  00A1               	movwf	?_ADC_GetConversion
 12954  1503  0008               	return
 12955  1504                     __end_of_ADC_GetConversion:	
 12956                           
 12957                           	psect	intentry
 12958  0004                     __pintentry:	
 12959 ;; *************** function _INTERRUPT_InterruptManager *****************
 12960 ;; Defined at:
 12961 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12962 ;; Parameters:    Size  Location     Type
 12963 ;;		None
 12964 ;; Auto vars:     Size  Location     Type
 12965 ;;		None
 12966 ;; Return value:  Size  Location     Type
 12967 ;;                  1    wreg      void 
 12968 ;; Registers used:
 12969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12970 ;; Tracked objects:
 12971 ;;		On entry : 0/0
 12972 ;;		On exit  : 0/0
 12973 ;;		Unchanged: 0/0
 12974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12978 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;Total ram usage:        1 bytes
 12980 ;; Hardware stack levels used:    1
 12981 ;; Hardware stack levels required when called:    2
 12982 ;; This function calls:
 12983 ;;		_EUSART_Receive_ISR
 12984 ;;		_EUSART_Transmit_ISR
 12985 ;;		_TMR0_ISR
 12986 ;; This function is called by:
 12987 ;;		Interrupt level 1
 12988 ;; This function uses a non-reentrant model
 12989 ;;
 12990                           
 12991  0004                     _INTERRUPT_InterruptManager:	
 12992                           
 12993                           ;incstack = 0
 12994                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12995  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12996  0005  3180               	pagesel	$
 12997  0006  0020               	movlb	0	; select bank0
 12998  0007  087F               	movf	127,w
 12999  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 13000                           
 13001                           ;interrupt_manager.c: 54: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 13002  0009  1A8B               	btfsc	11,5	;volatile
 13003  000A  1D0B               	btfss	11,2	;volatile
 13004  000B  2810               	goto	i1l330
 13005                           
 13006                           ;interrupt_manager.c: 55: TMR0_ISR();
 13007  000C  3188  2000  3180   	fcall	_TMR0_ISR
 13008                           
 13009                           ;interrupt_manager.c: 56: } else if (PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1) {
 13010  000F  2822               	goto	i1l336
 13011  0010                     i1l330:	
 13012  0010  0021               	movlb	1	; select bank1
 13013  0011  1E91               	btfss	17,5	;volatile
 13014  0012  281A               	goto	i1l332
 13015  0013  0020               	movlb	0	; select bank0
 13016  0014  1E91               	btfss	17,5	;volatile
 13017  0015  281A               	goto	i1l332
 13018                           
 13019                           ;interrupt_manager.c: 57: EUSART_Receive_ISR();
 13020  0016  318C  2463  3180   	fcall	_EUSART_Receive_ISR
 13021                           
 13022                           ;interrupt_manager.c: 58: } else if (PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1) {
 13023  0019  2822               	goto	i1l336
 13024  001A                     i1l332:	
 13025  001A  0021               	movlb	1	; select bank1
 13026  001B  1E11               	btfss	17,4	;volatile
 13027  001C  2822               	goto	i1l336
 13028  001D  0020               	movlb	0	; select bank0
 13029  001E  1E11               	btfss	17,4	;volatile
 13030  001F  2822               	goto	i1l336
 13031                           
 13032                           ;interrupt_manager.c: 59: EUSART_Transmit_ISR();
 13033  0020  3194  24C8         	fcall	_EUSART_Transmit_ISR
 13034  0022                     i1l336:	
 13035                           ;interrupt_manager.c: 60: } else {
 13036                           
 13037  0022  0020               	movlb	0	; select bank0
 13038  0023  0820               	movf	??_INTERRUPT_InterruptManager,w
 13039  0024  00FF               	movwf	127
 13040  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13041  0026  0009               	retfie
 13042  0027                     __end_of_INTERRUPT_InterruptManager:	
 13043                           
 13044                           	psect	text70
 13045  0800                     __ptext70:	
 13046 ;; *************** function _TMR0_ISR *****************
 13047 ;; Defined at:
 13048 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;		None
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;		None
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      void 
 13055 ;; Registers used:
 13056 ;;		wreg, status,2, status,0, pclath, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13064 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;Total ram usage:        1 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    1
 13069 ;; This function calls:
 13070 ;;		_TMR0_CallBack
 13071 ;; This function is called by:
 13072 ;;		_INTERRUPT_InterruptManager
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           
 13077                           ;psect for function _TMR0_ISR
 13078  0800                     _TMR0_ISR:	
 13079                           
 13080                           ;tmr0.c: 104: static volatile unsigned int CountCallBack = 0;
 13081                           ;tmr0.c: 107: INTCONbits.TMR0IF = 0;
 13082                           
 13083                           ;incstack = 0
 13084                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 13085  0800  110B               	bcf	11,2	;volatile
 13086                           
 13087                           ;tmr0.c: 109: TMR0 = timer0ReloadVal;
 13088  0801  0022               	movlb	2	; select bank2
 13089  0802  086D               	movf	_timer0ReloadVal^(0+256),w	;volatile
 13090  0803  0020               	movlb	0	; select bank0
 13091  0804  0095               	movwf	21	;volatile
 13092                           
 13093                           ;tmr0.c: 111: MAX31856Sec++;
 13094  0805  3001               	movlw	1
 13095  0806  00F1               	movwf	??_TMR0_ISR
 13096  0807  0871               	movf	??_TMR0_ISR,w
 13097  0808  0022               	movlb	2	; select bank2
 13098  0809  07B9               	addwf	_MAX31856Sec^(0+256),f
 13099                           
 13100                           ;tmr0.c: 114: if (++CountCallBack >= 100) {
 13101  080A  3001               	movlw	1
 13102  080B  07A8               	addwf	TMR0_ISR@CountCallBack^(0+256),f	;volatile
 13103  080C  3000               	movlw	0
 13104  080D  3DA9               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+256),f	;volatile
 13105  080E  3000               	movlw	0
 13106  080F  0229               	subwf	(TMR0_ISR@CountCallBack+1)^(0+256),w	;volatile
 13107  0810  3064               	movlw	100
 13108  0811  1903               	skipnz
 13109  0812  0228               	subwf	TMR0_ISR@CountCallBack^(0+256),w	;volatile
 13110  0813  1C03               	skipc
 13111  0814  0008               	return
 13112                           
 13113                           ;tmr0.c: 116: TMR0_CallBack();
 13114  0815  3193  2384         	fcall	_TMR0_CallBack
 13115                           
 13116                           ;tmr0.c: 119: CountCallBack = 0;
 13117  0817  0022               	movlb	2	; select bank2
 13118  0818  01A8               	clrf	TMR0_ISR@CountCallBack^(0+256)	;volatile
 13119  0819  01A9               	clrf	(TMR0_ISR@CountCallBack+1)^(0+256)	;volatile
 13120  081A  0008               	return
 13121  081B                     __end_of_TMR0_ISR:	
 13122                           
 13123                           	psect	text71
 13124  1384                     __ptext71:	
 13125 ;; *************** function _TMR0_CallBack *****************
 13126 ;; Defined at:
 13127 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 13128 ;; Parameters:    Size  Location     Type
 13129 ;;		None
 13130 ;; Auto vars:     Size  Location     Type
 13131 ;;		None
 13132 ;; Return value:  Size  Location     Type
 13133 ;;                  1    wreg      void 
 13134 ;; Registers used:
 13135 ;;		wreg, status,2, status,0
 13136 ;; Tracked objects:
 13137 ;;		On entry : 0/0
 13138 ;;		On exit  : 0/0
 13139 ;;		Unchanged: 0/0
 13140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;Total ram usage:        1 bytes
 13146 ;; Hardware stack levels used:    1
 13147 ;; This function calls:
 13148 ;;		Nothing
 13149 ;; This function is called by:
 13150 ;;		_TMR0_ISR
 13151 ;; This function uses a non-reentrant model
 13152 ;;
 13153                           
 13154                           
 13155                           ;psect for function _TMR0_CallBack
 13156  1384                     _TMR0_CallBack:	
 13157                           
 13158                           ;tmr0.c: 128: LongPressSec++;
 13159                           
 13160                           ;incstack = 0
 13161                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0]
 13162  1384  3001               	movlw	1
 13163  1385  00F0               	movwf	??_TMR0_CallBack
 13164  1386  0870               	movf	??_TMR0_CallBack,w
 13165  1387  0021               	movlb	1	; select bank1
 13166  1388  07EE               	addwf	_LongPressSec^(0+128),f
 13167                           
 13168                           ;tmr0.c: 129: if(Usart_Run_Flag > 0)
 13169  1389  0022               	movlb	2	; select bank2
 13170  138A  083B               	movf	_Usart_Run_Flag^(0+256),w
 13171  138B  1903               	btfsc	3,2
 13172  138C  2B8F               	goto	i1l313
 13173                           
 13174                           ;tmr0.c: 130: {
 13175                           ;tmr0.c: 131: Usart_Run_Flag--;
 13176  138D  3001               	movlw	1
 13177  138E  02BB               	subwf	_Usart_Run_Flag^(0+256),f
 13178  138F                     i1l313:	
 13179                           
 13180                           ;tmr0.c: 132: }
 13181                           ;tmr0.c: 134: if( Usart_Run_Flag == 0)
 13182  138F  083B               	movf	_Usart_Run_Flag^(0+256),w
 13183  1390  1D03               	btfss	3,2
 13184  1391  0008               	return
 13185                           
 13186                           ;tmr0.c: 135: {
 13187                           ;tmr0.c: 136: SWDTEN = 1;
 13188  1392  0021               	movlb	1	; select bank1
 13189  1393  1417               	bsf	23,0	;volatile
 13190  1394  0008               	return
 13191  1395                     __end_of_TMR0_CallBack:	
 13192                           
 13193                           	psect	text72
 13194  14C8                     __ptext72:	
 13195 ;; *************** function _EUSART_Transmit_ISR *****************
 13196 ;; Defined at:
 13197 ;;		line 155 in file "mcc_generated_files/eusart.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;		None
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;		None
 13202 ;; Return value:  Size  Location     Type
 13203 ;;                  1    wreg      void 
 13204 ;; Registers used:
 13205 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13206 ;; Tracked objects:
 13207 ;;		On entry : 0/0
 13208 ;;		On exit  : 0/0
 13209 ;;		Unchanged: 0/0
 13210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;Total ram usage:        1 bytes
 13216 ;; Hardware stack levels used:    1
 13217 ;; This function calls:
 13218 ;;		Nothing
 13219 ;; This function is called by:
 13220 ;;		_INTERRUPT_InterruptManager
 13221 ;; This function uses a non-reentrant model
 13222 ;;
 13223                           
 13224                           
 13225                           ;psect for function _EUSART_Transmit_ISR
 13226  14C8                     _EUSART_Transmit_ISR:	
 13227                           
 13228                           ;eusart.c: 158: if (sizeof (eusartTxBuffer) > eusartTxBufferRemaining) {
 13229                           
 13230                           ;incstack = 0
 13231                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13232  14C8  3008               	movlw	8
 13233  14C9  0022               	movlb	2	; select bank2
 13234  14CA  026C               	subwf	_eusartTxBufferRemaining^(0+256),w	;volatile
 13235  14CB  1803               	skipnc
 13236  14CC  2CE3               	goto	i1l169
 13237                           
 13238                           ;eusart.c: 159: TXREG = eusartTxBuffer[eusartTxTail++];
 13239  14CD  0840               	movf	_eusartTxTail^(0+256),w
 13240  14CE  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 13241  14CF  0086               	movwf	6
 13242  14D0  3001               	movlw	1	; select bank3/4
 13243  14D1  0087               	movwf	7
 13244  14D2  0801               	movf	1,w
 13245  14D3  0023               	movlb	3	; select bank3
 13246  14D4  009A               	movwf	26	;volatile
 13247  14D5  3001               	movlw	1
 13248  14D6  00F0               	movwf	??_EUSART_Transmit_ISR
 13249  14D7  0870               	movf	??_EUSART_Transmit_ISR,w
 13250  14D8  0022               	movlb	2	; select bank2
 13251  14D9  07C0               	addwf	_eusartTxTail^(0+256),f
 13252                           
 13253                           ;eusart.c: 160: if (sizeof (eusartTxBuffer) <= eusartTxTail) {
 13254  14DA  3008               	movlw	8
 13255  14DB  0240               	subwf	_eusartTxTail^(0+256),w
 13256  14DC  1803               	btfsc	3,0
 13257                           
 13258                           ;eusart.c: 161: eusartTxTail = 0;
 13259  14DD  01C0               	clrf	_eusartTxTail^(0+256)
 13260                           
 13261                           ;eusart.c: 162: }
 13262                           ;eusart.c: 163: eusartTxBufferRemaining++;
 13263  14DE  3001               	movlw	1
 13264  14DF  00F0               	movwf	??_EUSART_Transmit_ISR
 13265  14E0  0870               	movf	??_EUSART_Transmit_ISR,w
 13266  14E1  07EC               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 13267                           
 13268                           ;eusart.c: 164: } else {
 13269  14E2  0008               	return
 13270  14E3                     i1l169:	
 13271                           
 13272                           ;eusart.c: 165: PIE1bits.TXIE = 0;
 13273  14E3  0021               	movlb	1	; select bank1
 13274  14E4  1211               	bcf	17,4	;volatile
 13275  14E5  0008               	return
 13276  14E6                     __end_of_EUSART_Transmit_ISR:	
 13277                           
 13278                           	psect	text73
 13279  0C63                     __ptext73:	
 13280 ;; *************** function _EUSART_Receive_ISR *****************
 13281 ;; Defined at:
 13282 ;;		line 169 in file "mcc_generated_files/eusart.c"
 13283 ;; Parameters:    Size  Location     Type
 13284 ;;		None
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;  rx_tmp          1   13[COMMON] unsigned char 
 13287 ;; Return value:  Size  Location     Type
 13288 ;;                  1    wreg      void 
 13289 ;; Registers used:
 13290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;Total ram usage:        3 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; Hardware stack levels required when called:    1
 13303 ;; This function calls:
 13304 ;;		_RxFrameCheck
 13305 ;; This function is called by:
 13306 ;;		_INTERRUPT_InterruptManager
 13307 ;; This function uses a non-reentrant model
 13308 ;;
 13309                           
 13310                           
 13311                           ;psect for function _EUSART_Receive_ISR
 13312  0C63                     _EUSART_Receive_ISR:	
 13313                           
 13314                           ;eusart.c: 170: unsigned char rx_tmp;
 13315                           ;eusart.c: 171: if (1 == RCSTAbits.OERR) {
 13316                           
 13317                           ;incstack = 0
 13318                           ; Regs used in _EUSART_Receive_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13319  0C63  0023               	movlb	3	; select bank3
 13320  0C64  1C9D               	btfss	29,1	;volatile
 13321  0C65  2C68               	goto	i1l4732
 13322                           
 13323                           ;eusart.c: 174: RCSTAbits.CREN = 0;
 13324  0C66  121D               	bcf	29,4	;volatile
 13325                           
 13326                           ;eusart.c: 175: RCSTAbits.CREN = 1;
 13327  0C67  161D               	bsf	29,4	;volatile
 13328  0C68                     i1l4732:	
 13329                           
 13330                           ;eusart.c: 176: }
 13331                           ;eusart.c: 177: rx_tmp = RCREG;
 13332  0C68  0819               	movf	25,w	;volatile
 13333  0C69  00FB               	movwf	??_EUSART_Receive_ISR
 13334  0C6A  087B               	movf	??_EUSART_Receive_ISR,w
 13335  0C6B  00FD               	movwf	EUSART_Receive_ISR@rx_tmp
 13336                           
 13337                           ;eusart.c: 178: Usart_Rx_Buff[Usart_Rx_Cnt] = rx_tmp ;
 13338  0C6C  087D               	movf	EUSART_Receive_ISR@rx_tmp,w
 13339  0C6D  00FB               	movwf	??_EUSART_Receive_ISR
 13340  0C6E  0020               	movlb	0	; select bank0
 13341  0C6F  0868               	movf	_Usart_Rx_Cnt,w
 13342  0C70  3EB8               	addlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 13343  0C71  0086               	movwf	6
 13344  0C72  3001               	movlw	1	; select bank3/4
 13345  0C73  0087               	movwf	7
 13346  0C74  087B               	movf	??_EUSART_Receive_ISR,w
 13347  0C75  0081               	movwf	1
 13348                           
 13349                           ;eusart.c: 179: Usart_Rx_Cnt++;
 13350  0C76  3001               	movlw	1
 13351  0C77  00FB               	movwf	??_EUSART_Receive_ISR
 13352  0C78  087B               	movf	??_EUSART_Receive_ISR,w
 13353  0C79  07E8               	addwf	_Usart_Rx_Cnt,f
 13354                           
 13355                           ;eusart.c: 180: Usart_Run_Flag = 10;
 13356  0C7A  300A               	movlw	10
 13357  0C7B  00FB               	movwf	??_EUSART_Receive_ISR
 13358  0C7C  087B               	movf	??_EUSART_Receive_ISR,w
 13359  0C7D  0022               	movlb	2	; select bank2
 13360  0C7E  00BB               	movwf	_Usart_Run_Flag^(0+256)
 13361                           
 13362                           ;eusart.c: 181: SWDTEN = 0;
 13363  0C7F  0021               	movlb	1	; select bank1
 13364  0C80  1017               	bcf	23,0	;volatile
 13365                           
 13366                           ;eusart.c: 192: if( Usart_Rx_Cnt == 1)
 13367  0C81  0020               	movlb	0	; select bank0
 13368  0C82  0368               	decf	_Usart_Rx_Cnt,w
 13369  0C83  1D03               	btfss	3,2
 13370  0C84  2C8B               	goto	i1l4748
 13371                           
 13372                           ;eusart.c: 193: {
 13373                           ;eusart.c: 194: if( rx_tmp != 0xfe)
 13374  0C85  30FE               	movlw	254
 13375  0C86  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13376  0C87  1903               	btfsc	3,2
 13377  0C88  0008               	return
 13378                           
 13379                           ;eusart.c: 195: {
 13380                           ;eusart.c: 196: Usart_Rx_Cnt = 0;
 13381  0C89  01E8               	clrf	_Usart_Rx_Cnt
 13382                           
 13383                           ;eusart.c: 197: }
 13384                           ;eusart.c: 198: }
 13385  0C8A  0008               	return
 13386  0C8B                     i1l4748:	
 13387                           
 13388                           ;eusart.c: 199: else if( Usart_Rx_Cnt == 2)
 13389  0C8B  3002               	movlw	2
 13390  0C8C  0668               	xorwf	_Usart_Rx_Cnt,w
 13391  0C8D  1D03               	btfss	3,2
 13392  0C8E  2C95               	goto	i1l4754
 13393                           
 13394                           ;eusart.c: 200: {
 13395                           ;eusart.c: 201: if( rx_tmp != 0xfe)
 13396  0C8F  30FE               	movlw	254
 13397  0C90  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13398  0C91  1903               	btfsc	3,2
 13399  0C92  0008               	return
 13400                           
 13401                           ;eusart.c: 202: {
 13402                           ;eusart.c: 203: Usart_Rx_Cnt = 0;
 13403  0C93  01E8               	clrf	_Usart_Rx_Cnt
 13404                           
 13405                           ;eusart.c: 204: }
 13406                           ;eusart.c: 205: }
 13407  0C94  0008               	return
 13408  0C95                     i1l4754:	
 13409                           
 13410                           ;eusart.c: 206: else if( Usart_Rx_Cnt == 4)
 13411  0C95  3004               	movlw	4
 13412  0C96  0668               	xorwf	_Usart_Rx_Cnt,w
 13413  0C97  1D03               	btfss	3,2
 13414  0C98  2C9F               	goto	i1l4760
 13415                           
 13416                           ;eusart.c: 207: {
 13417                           ;eusart.c: 208: if( rx_tmp > 7)
 13418  0C99  3008               	movlw	8
 13419  0C9A  027D               	subwf	EUSART_Receive_ISR@rx_tmp,w
 13420  0C9B  1C03               	skipc
 13421  0C9C  0008               	return
 13422                           
 13423                           ;eusart.c: 209: {
 13424                           ;eusart.c: 210: Usart_Rx_Cnt = 0;
 13425  0C9D  01E8               	clrf	_Usart_Rx_Cnt
 13426                           
 13427                           ;eusart.c: 211: }
 13428                           ;eusart.c: 212: }
 13429  0C9E  0008               	return
 13430  0C9F                     i1l4760:	
 13431                           
 13432                           ;eusart.c: 213: else if( Usart_Rx_Cnt > 14)
 13433  0C9F  300F               	movlw	15
 13434  0CA0  0268               	subwf	_Usart_Rx_Cnt,w
 13435  0CA1  1C03               	skipc
 13436  0CA2  2CA5               	goto	i1l4764
 13437                           
 13438                           ;eusart.c: 214: {
 13439                           ;eusart.c: 215: Usart_Rx_Cnt = 0;
 13440  0CA3  01E8               	clrf	_Usart_Rx_Cnt
 13441                           
 13442                           ;eusart.c: 216: }
 13443  0CA4  0008               	return
 13444  0CA5                     i1l4764:	
 13445                           
 13446                           ;eusart.c: 217: else if( (Usart_Rx_Cnt == (Usart_Rx_Buff[3]+7)) && ( rx_tmp == 0Xbb) )
 13447  0CA5  0023               	movlb	3	; select bank3
 13448  0CA6  083B               	movf	(_Usart_Rx_Buff^(0+384)+3),w
 13449  0CA7  3E07               	addlw	7
 13450  0CA8  00FB               	movwf	??_EUSART_Receive_ISR
 13451  0CA9  3000               	movlw	0
 13452  0CAA  1803               	skipnc
 13453  0CAB  3001               	movlw	1
 13454  0CAC  00FC               	movwf	??_EUSART_Receive_ISR+1
 13455  0CAD  0020               	movlb	0	; select bank0
 13456  0CAE  0868               	movf	_Usart_Rx_Cnt,w
 13457  0CAF  067B               	xorwf	??_EUSART_Receive_ISR,w
 13458  0CB0  047C               	iorwf	??_EUSART_Receive_ISR+1,w
 13459  0CB1  1D03               	skipz
 13460  0CB2  0008               	return
 13461  0CB3  30BB               	movlw	187
 13462  0CB4  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 13463  0CB5  1D03               	btfss	3,2
 13464  0CB6  0008               	return
 13465                           
 13466                           ;eusart.c: 218: {
 13467                           ;eusart.c: 219: if(RxFrameCheck(Usart_Rx_Buff,Usart_Rx_Cnt))
 13468  0CB7  0868               	movf	_Usart_Rx_Cnt,w
 13469  0CB8  00FB               	movwf	??_EUSART_Receive_ISR
 13470  0CB9  087B               	movf	??_EUSART_Receive_ISR,w
 13471  0CBA  00F0               	movwf	RxFrameCheck@frame_len
 13472  0CBB  30B8               	movlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 13473  0CBC  318F  275C  318C   	fcall	_RxFrameCheck
 13474  0CBF  3A00               	xorlw	0
 13475  0CC0  1D03               	btfss	3,2
 13476  0CC1  2CCB               	goto	i1l4774
 13477  0CC2  2CD4               	goto	i1l4776
 13478  0CC3                     i1l190:	
 13479                           ;eusart.c: 222: {
 13480                           ;eusart.c: 223: case 0x01: Inf_cmd_flag = 1;
 13481                           
 13482                           ;eusart.c: 220: {
 13483                           ;eusart.c: 221: switch( Usart_Rx_Buff[2] )
 13484                           
 13485  0CC3  0022               	movlb	2	; select bank2
 13486  0CC4  01B8               	clrf	_Inf_cmd_flag^(0+256)
 13487  0CC5  0AB8               	incf	_Inf_cmd_flag^(0+256),f
 13488                           
 13489                           ;eusart.c: 224: break;
 13490  0CC6  2CD4               	goto	i1l4776
 13491  0CC7                     i1l192:	
 13492                           ;eusart.c: 225: case 0X02: Set_time_cmd_flag = 1;
 13493                           
 13494  0CC7  0022               	movlb	2	; select bank2
 13495  0CC8  01BA               	clrf	_Set_time_cmd_flag^(0+256)
 13496  0CC9  0ABA               	incf	_Set_time_cmd_flag^(0+256),f
 13497                           
 13498                           ;eusart.c: 228: }
 13499                           
 13500                           ;eusart.c: 227: default:break;
 13501                           
 13502                           ;eusart.c: 226: break;
 13503  0CCA  2CD4               	goto	i1l4776
 13504  0CCB                     i1l4774:	
 13505  0CCB  0023               	movlb	3	; select bank3
 13506  0CCC  083A               	movf	(_Usart_Rx_Buff^(0+384)+2),w
 13507                           
 13508                           ; Switch size 1, requested type "space"
 13509                           ; Number of cases is 2, Range of values is 1 to 2
 13510                           ; switch strategies available:
 13511                           ; Name         Instructions Cycles
 13512                           ; simple_byte            7     4 (average)
 13513                           ; direct_byte           13     9 (fixed)
 13514                           ; jumptable            263     9 (fixed)
 13515                           ;	Chosen strategy is simple_byte
 13516  0CCD  3A01               	xorlw	1	; case 1
 13517  0CCE  1903               	skipnz
 13518  0CCF  2CC3               	goto	i1l190
 13519  0CD0  3A03               	xorlw	3	; case 2
 13520  0CD1  1903               	skipnz
 13521  0CD2  2CC7               	goto	i1l192
 13522  0CD3  2CD4               	goto	i1l4776
 13523  0CD4                     i1l4776:	
 13524                           
 13525                           ;eusart.c: 229: }
 13526                           ;eusart.c: 230: Usart_Rx_Cnt = 0;
 13527  0CD4  0020               	movlb	0	; select bank0
 13528  0CD5  01E8               	clrf	_Usart_Rx_Cnt
 13529  0CD6  0008               	return
 13530  0CD7                     __end_of_EUSART_Receive_ISR:	
 13531                           
 13532                           	psect	text74
 13533  0F5C                     __ptext74:	
 13534 ;; *************** function _RxFrameCheck *****************
 13535 ;; Defined at:
 13536 ;;		line 126 in file "mcc_generated_files/com.c"
 13537 ;; Parameters:    Size  Location     Type
 13538 ;;  rx_arr          1    wreg     PTR unsigned char 
 13539 ;;		 -> Usart_Rx_Buff(32), 
 13540 ;;  frame_len       1    0[COMMON] unsigned char 
 13541 ;; Auto vars:     Size  Location     Type
 13542 ;;  rx_arr          1    8[COMMON] PTR unsigned char 
 13543 ;;		 -> Usart_Rx_Buff(32), 
 13544 ;;  remainder       2    9[COMMON] unsigned int 
 13545 ;;  tmp_crc         2    5[COMMON] unsigned int 
 13546 ;;  i               1    7[COMMON] unsigned char 
 13547 ;; Return value:  Size  Location     Type
 13548 ;;                  1    wreg      unsigned char 
 13549 ;; Registers used:
 13550 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13551 ;; Tracked objects:
 13552 ;;		On entry : 0/0
 13553 ;;		On exit  : 0/0
 13554 ;;		Unchanged: 0/0
 13555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13556 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;Total ram usage:       11 bytes
 13561 ;; Hardware stack levels used:    1
 13562 ;; This function calls:
 13563 ;;		Nothing
 13564 ;; This function is called by:
 13565 ;;		_EUSART_Receive_ISR
 13566 ;; This function uses a non-reentrant model
 13567 ;;
 13568                           
 13569                           
 13570                           ;psect for function _RxFrameCheck
 13571  0F5C                     _RxFrameCheck:	
 13572                           
 13573                           ;incstack = 0
 13574                           ; Regs used in _RxFrameCheck: [wreg+fsr1l+fsr1h+status,2+status,0]
 13575                           ;RxFrameCheck@rx_arr stored from wreg
 13576  0F5C  00F8               	movwf	RxFrameCheck@rx_arr
 13577                           
 13578                           ;com.c: 128: unsigned char i = 0;
 13579  0F5D  01F7               	clrf	RxFrameCheck@i
 13580                           
 13581                           ;com.c: 129: unsigned int remainder = 0;
 13582  0F5E  01F9               	clrf	RxFrameCheck@remainder
 13583  0F5F  01FA               	clrf	RxFrameCheck@remainder+1
 13584                           
 13585                           ;com.c: 130: unsigned int tmp_crc = 0;
 13586  0F60  01F5               	clrf	RxFrameCheck@tmp_crc
 13587  0F61  01F6               	clrf	RxFrameCheck@tmp_crc+1
 13588                           
 13589                           ;com.c: 132: for(i = 2; i < frame_len - 3; i++)
 13590  0F62  3002               	movlw	2
 13591  0F63  00F1               	movwf	??_RxFrameCheck
 13592  0F64  0871               	movf	??_RxFrameCheck,w
 13593  0F65  00F7               	movwf	RxFrameCheck@i
 13594  0F66                     i1l4560:	
 13595  0F66  0870               	movf	RxFrameCheck@frame_len,w
 13596  0F67  3EFD               	addlw	253
 13597  0F68  00F1               	movwf	??_RxFrameCheck
 13598  0F69  30FF               	movlw	255
 13599  0F6A  1803               	skipnc
 13600  0F6B  3000               	movlw	0
 13601  0F6C  00F2               	movwf	??_RxFrameCheck+1
 13602  0F6D  0872               	movf	??_RxFrameCheck+1,w
 13603  0F6E  3A80               	xorlw	128
 13604  0F6F  3C80               	sublw	128
 13605  0F70  1D03               	skipz
 13606  0F71  2F74               	goto	u363_25
 13607  0F72  0871               	movf	??_RxFrameCheck,w
 13608  0F73  0277               	subwf	RxFrameCheck@i,w
 13609  0F74                     u363_25:	
 13610  0F74  1803               	btfsc	3,0
 13611  0F75  2FD1               	goto	i1l4562
 13612                           
 13613                           ;com.c: 133: {
 13614                           ;com.c: 134: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 13615  0F76  0879               	movf	RxFrameCheck@remainder,w
 13616  0F77  00F2               	movwf	??_RxFrameCheck+1
 13617  0F78  01F1               	clrf	??_RxFrameCheck
 13618  0F79  087A               	movf	RxFrameCheck@remainder+1,w
 13619  0F7A  00F4               	movwf	??_RxFrameCheck+3
 13620  0F7B  0879               	movf	RxFrameCheck@remainder,w
 13621  0F7C  00F3               	movwf	??_RxFrameCheck+2
 13622  0F7D  0874               	movf	??_RxFrameCheck+3,w
 13623  0F7E  00F3               	movwf	??_RxFrameCheck+2
 13624  0F7F  01F4               	clrf	??_RxFrameCheck+3
 13625  0F80  0871               	movf	??_RxFrameCheck,w
 13626  0F81  0473               	iorwf	??_RxFrameCheck+2,w
 13627  0F82  00F9               	movwf	RxFrameCheck@remainder
 13628  0F83  0872               	movf	??_RxFrameCheck+1,w
 13629  0F84  0474               	iorwf	??_RxFrameCheck+3,w
 13630  0F85  00FA               	movwf	RxFrameCheck@remainder+1
 13631                           
 13632                           ;com.c: 135: remainder ^= rx_arr[i];
 13633  0F86  0877               	movf	RxFrameCheck@i,w
 13634  0F87  0778               	addwf	RxFrameCheck@rx_arr,w
 13635  0F88  00F1               	movwf	??_RxFrameCheck
 13636  0F89  0871               	movf	??_RxFrameCheck,w
 13637  0F8A  0086               	movwf	6
 13638  0F8B  3001               	movlw	1	; select bank2/3
 13639  0F8C  0087               	movwf	7
 13640  0F8D  0801               	movf	1,w
 13641  0F8E  00F2               	movwf	??_RxFrameCheck+1
 13642  0F8F  01F3               	clrf	??_RxFrameCheck+2
 13643  0F90  0872               	movf	??_RxFrameCheck+1,w
 13644  0F91  06F9               	xorwf	RxFrameCheck@remainder,f
 13645  0F92  0873               	movf	??_RxFrameCheck+2,w
 13646  0F93  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13647                           
 13648                           ;com.c: 136: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 13649  0F94  087A               	movf	RxFrameCheck@remainder+1,w
 13650  0F95  00F2               	movwf	??_RxFrameCheck+1
 13651  0F96  0879               	movf	RxFrameCheck@remainder,w
 13652  0F97  00F1               	movwf	??_RxFrameCheck
 13653  0F98  3004               	movlw	4
 13654  0F99                     u362_25:	
 13655  0F99  36F2               	lsrf	??_RxFrameCheck+1,f
 13656  0F9A  0CF1               	rrf	??_RxFrameCheck,f
 13657  0F9B  0B89               	decfsz	9,f
 13658  0F9C  2F99               	goto	u362_25
 13659  0F9D  300F               	movlw	15
 13660  0F9E  0571               	andwf	??_RxFrameCheck,w
 13661  0F9F  00F3               	movwf	??_RxFrameCheck+2
 13662  0FA0  3000               	movlw	0
 13663  0FA1  0572               	andwf	??_RxFrameCheck+1,w
 13664  0FA2  00F4               	movwf	??_RxFrameCheck+3
 13665  0FA3  0873               	movf	??_RxFrameCheck+2,w
 13666  0FA4  06F9               	xorwf	RxFrameCheck@remainder,f
 13667  0FA5  0874               	movf	??_RxFrameCheck+3,w
 13668  0FA6  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13669                           
 13670                           ;com.c: 137: remainder ^= (unsigned int)((remainder << 8) << 4);
 13671  0FA7  0879               	movf	RxFrameCheck@remainder,w
 13672  0FA8  00F2               	movwf	??_RxFrameCheck+1
 13673  0FA9  01F1               	clrf	??_RxFrameCheck
 13674  0FAA  0EF1               	swapf	??_RxFrameCheck,f
 13675  0FAB  0EF2               	swapf	??_RxFrameCheck+1,f
 13676  0FAC  30F0               	movlw	240
 13677  0FAD  05F2               	andwf	??_RxFrameCheck+1,f
 13678  0FAE  0871               	movf	??_RxFrameCheck,w
 13679  0FAF  390F               	andlw	15
 13680  0FB0  04F2               	iorwf	??_RxFrameCheck+1,f
 13681  0FB1  30F0               	movlw	240
 13682  0FB2  05F1               	andwf	??_RxFrameCheck,f
 13683  0FB3  0871               	movf	??_RxFrameCheck,w
 13684  0FB4  06F9               	xorwf	RxFrameCheck@remainder,f
 13685  0FB5  0872               	movf	??_RxFrameCheck+1,w
 13686  0FB6  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13687                           
 13688                           ;com.c: 138: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 13689  0FB7  30FF               	movlw	255
 13690  0FB8  0579               	andwf	RxFrameCheck@remainder,w
 13691  0FB9  00F1               	movwf	??_RxFrameCheck
 13692  0FBA  3000               	movlw	0
 13693  0FBB  057A               	andwf	RxFrameCheck@remainder+1,w
 13694  0FBC  00F2               	movwf	??_RxFrameCheck+1
 13695  0FBD  0EF1               	swapf	??_RxFrameCheck,f
 13696  0FBE  0EF2               	swapf	??_RxFrameCheck+1,f
 13697  0FBF  30F0               	movlw	240
 13698  0FC0  05F2               	andwf	??_RxFrameCheck+1,f
 13699  0FC1  0871               	movf	??_RxFrameCheck,w
 13700  0FC2  390F               	andlw	15
 13701  0FC3  04F2               	iorwf	??_RxFrameCheck+1,f
 13702  0FC4  30F0               	movlw	240
 13703  0FC5  05F1               	andwf	??_RxFrameCheck,f
 13704  0FC6  35F1               	lslf	??_RxFrameCheck,f
 13705  0FC7  0DF2               	rlf	??_RxFrameCheck+1,f
 13706  0FC8  0871               	movf	??_RxFrameCheck,w
 13707  0FC9  06F9               	xorwf	RxFrameCheck@remainder,f
 13708  0FCA  0872               	movf	??_RxFrameCheck+1,w
 13709  0FCB  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13710  0FCC  3001               	movlw	1
 13711  0FCD  00F1               	movwf	??_RxFrameCheck
 13712  0FCE  0871               	movf	??_RxFrameCheck,w
 13713  0FCF  07F7               	addwf	RxFrameCheck@i,f
 13714  0FD0  2F66               	goto	i1l4560
 13715  0FD1                     i1l4562:	
 13716                           
 13717                           ;com.c: 139: }
 13718                           ;com.c: 141: tmp_crc = rx_arr[frame_len - 2];
 13719  0FD1  0870               	movf	RxFrameCheck@frame_len,w
 13720  0FD2  3EFE               	addlw	-2
 13721  0FD3  0778               	addwf	RxFrameCheck@rx_arr,w
 13722  0FD4  00F1               	movwf	??_RxFrameCheck
 13723  0FD5  0871               	movf	??_RxFrameCheck,w
 13724  0FD6  0086               	movwf	6
 13725  0FD7  3001               	movlw	1	; select bank2/3
 13726  0FD8  0087               	movwf	7
 13727  0FD9  0801               	movf	1,w
 13728  0FDA  00F2               	movwf	??_RxFrameCheck+1
 13729  0FDB  01F3               	clrf	??_RxFrameCheck+2
 13730  0FDC  0872               	movf	??_RxFrameCheck+1,w
 13731  0FDD  00F5               	movwf	RxFrameCheck@tmp_crc
 13732  0FDE  0873               	movf	??_RxFrameCheck+2,w
 13733  0FDF  00F6               	movwf	RxFrameCheck@tmp_crc+1
 13734                           
 13735                           ;com.c: 142: tmp_crc<<=8;
 13736  0FE0  3008               	movlw	8
 13737  0FE1                     u364_25:	
 13738  0FE1  35F5               	lslf	RxFrameCheck@tmp_crc,f
 13739  0FE2  0DF6               	rlf	RxFrameCheck@tmp_crc+1,f
 13740  0FE3  0B89               	decfsz	9,f
 13741  0FE4  2FE1               	goto	u364_25
 13742                           
 13743                           ;com.c: 143: tmp_crc|=rx_arr[frame_len - 3];
 13744  0FE5  0870               	movf	RxFrameCheck@frame_len,w
 13745  0FE6  3EFD               	addlw	-3
 13746  0FE7  0778               	addwf	RxFrameCheck@rx_arr,w
 13747  0FE8  00F1               	movwf	??_RxFrameCheck
 13748  0FE9  0871               	movf	??_RxFrameCheck,w
 13749  0FEA  0086               	movwf	6
 13750  0FEB  3001               	movlw	1	; select bank2/3
 13751  0FEC  0087               	movwf	7
 13752  0FED  0801               	movf	1,w
 13753  0FEE  00F2               	movwf	??_RxFrameCheck+1
 13754  0FEF  01F3               	clrf	??_RxFrameCheck+2
 13755  0FF0  0872               	movf	??_RxFrameCheck+1,w
 13756  0FF1  04F5               	iorwf	RxFrameCheck@tmp_crc,f
 13757  0FF2  0873               	movf	??_RxFrameCheck+2,w
 13758  0FF3  04F6               	iorwf	RxFrameCheck@tmp_crc+1,f
 13759                           
 13760                           ;com.c: 149: if(remainder == tmp_crc)
 13761  0FF4  0876               	movf	RxFrameCheck@tmp_crc+1,w
 13762  0FF5  067A               	xorwf	RxFrameCheck@remainder+1,w
 13763  0FF6  1D03               	skipz
 13764  0FF7  2FFA               	goto	u365_25
 13765  0FF8  0875               	movf	RxFrameCheck@tmp_crc,w
 13766  0FF9  0679               	xorwf	RxFrameCheck@remainder,w
 13767  0FFA                     u365_25:	
 13768  0FFA  1D03               	skipz
 13769  0FFB  2FFE               	goto	i1l4574
 13770                           
 13771                           ;com.c: 150: {
 13772                           ;com.c: 151: return 1;
 13773  0FFC  3001               	movlw	1
 13774                           
 13775                           ;com.c: 152: }
 13776  0FFD  0008               	return
 13777  0FFE                     i1l4574:	
 13778                           
 13779                           ;com.c: 153: else
 13780                           ;com.c: 154: {
 13781                           ;com.c: 155: return 0;
 13782  0FFE  3000               	movlw	0
 13783  0FFF  0008               	return
 13784  1000                     __end_of_RxFrameCheck:	
 13785  007E                     btemp	set	126	;btemp
 13786  007E                     int$flags	set	126
 13787  007E                     wtemp	set	126
 13788  007E                     wtemp0	set	126
 13789  0080                     wtemp1	set	128
 13790  0082                     wtemp2	set	130
 13791  0084                     wtemp3	set	132
 13792  0086                     wtemp4	set	134
 13793  0088                     wtemp5	set	136
 13794  007F                     wtemp6	set	127
 13795  007E                     ttemp	set	126
 13796  007E                     ttemp0	set	126
 13797  0081                     ttemp1	set	129
 13798  0084                     ttemp2	set	132
 13799  0087                     ttemp3	set	135
 13800  007F                     ttemp4	set	127
 13801  007E                     ltemp	set	126
 13802  007E                     ltemp0	set	126
 13803  0082                     ltemp1	set	130
 13804  0086                     ltemp2	set	134
 13805  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    21
    Data        2
    BSS         204
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     69      75
    BANK1            80     78      80
    BANK2            80      0      80
    BANK3            80      5      61
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 7
		 -> rtc_save_ch2(BANK2[7]), rtc_save_ch1(BANK2[7]), 

    memset@p1	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    memset@p	PTR unsigned char  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    CRC_cal@rx_arr	PTR unsigned char  size(1) Largest target is 72
		 -> Inf_to_Com@tmp_buf(BANK1[72]), Read_time_to_Com@tmp_buf(BANK0[16]), 

    RxFrameCheck@rx_arr	PTR unsigned char  size(1) Largest target is 32
		 -> Usart_Rx_Buff(BANK3[32]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    Bq32k_Rtc_Write_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    Bq32k_Rtc_Read_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK2[7]), 

    I2C_Send_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Write_Time@temp(BANK0[10]), Bq32k_Time_Init@temp(COMMON[2]), 

    I2C_Read_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Read_Time@temp(BANK0[10]), 

    sp__memset	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK2[4]), 

    WriteAll_1621@p	PTR unsigned char  size(2) Largest target is 21
		 -> time_Display@num(BANK0[4]), err_Display@num(BANK0[4]), Two_Display@num(BANK0[4]), display_buff(BANK2[4]), 
		 -> Dis_TAB(CODE[21]), 

    maxim_31856_read_nregisters@uch_buff	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK2[8]), 

    FLASH_readBlock@buffer	PTR unsigned int  size(1) Largest target is 64
		 -> Flash_buff(BANK4[64]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK2[8]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack
    _EUSART_Receive_ISR->_RxFrameCheck

Critical Paths under _main in BANK0

    _main->_Key_Process
    _Sleep_process->_Step_control
    _Save_process->_Calculate_Time
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize
    _temperature_process->_temperature_display
    _time_Display->_Bq32k_Rtc_Read_Time
    _temperature_display->_tc_temperature_trans
    _tc_temperature_trans->_Calculate_Time
    _Calculate_Time->_Save_Write_time
    _Write_Flash_head->_FLASH_WriteWord
    _Write_Flash_finish->_FLASH_WriteWord
    _Save_Write_time->_Bq32k_Rtc_Read_Time
    _Save_Write_word->_FLASH_WriteWord
    _maxim_clear_fault_status->_maxim_31856_read_register
    _err_Display->_WriteAll_1621
    _Tc_Display->___lwdiv
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_31856_read_nregisters
    _maxim_start_conversion->_maxim_31856_read_register
    _maxim_31856_write_register->_SPI_Exchange8bit
    _maxim_31856_read_register->_SPI_Exchange8bit
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _Two_Display->_WriteAll_1621
    _WriteAll_1621->_SendBit_1621
    _WriteAll_1621->_SendDataBit_1621
    _SendCmd_1621->_SendBit_1621
    _Com_Process->_Set_time_from_Com
    _Set_time_from_Com->_Bq32k_Rtc_Write_Time
    _Set_time_from_Com->_Read_time_to_Com
    _Read_time_to_Com->_CRC_cal
    _Bq32k_Rtc_Write_Time->_bin2bcd
    _bin2bcd->___awdiv
    _I2C_Send_Buffer->_I2C_Send_Byte
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _bcd2bin->___bmul
    _I2C_Read_Buffer->_I2C_Receive_Byte
    _I2C_Read_Buffer->_I2C_Send_Byte
    _Inf_to_Com->_CRC_cal
    _FLASH_readBlock->_FLASH_ReadWord

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _Com_Process->_Inf_to_Com

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   98906
                                             65 BANK0      4     4      0
                                              0 BANK3      5     5      0
                  _ADC_GetConversion
                        _Com_Process
                        _Key_Process
                  _SYSTEM_Initialize
                       _Save_process
                       _SendCmd_1621
                  _Serach_Flash_Head
                    _Set_finish_flag
                      _Sleep_process
                      _WriteAll_1621
                 _Write_Flash_finish
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _Sleep_process                                        0     0      0       0
                       _Step_control
 ---------------------------------------------------------------------------------
 (2) _Step_control                                         1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serach_Flash_Head                                    6     6      0    1712
                                              6 BANK0      6     6      0
                     _FLASH_ReadWord
                 _Write_Flash_finish
 ---------------------------------------------------------------------------------
 (1) _Save_process                                         4     4      0   13012
                                             46 BANK0      4     4      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Key_Process                                          6     6      0   40432
                                             59 BANK0      6     6      0
                       _EUSART_Write
                   _FLASH_EraseBlock
                     _FLASH_ReadWord
                           _Key_Scan
                    _Save_Write_time
                       _SendCmd_1621
                    _Set_finish_flag
                     _Set_start_flag
                 _Write_Flash_finish
                   _Write_Flash_head
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _temperature_process                                  0     0      0   31973
                        _Two_Display
              _one_temperature_trans
                _temperature_display
                       _time_Display
 ---------------------------------------------------------------------------------
 (2) _time_Display                                         7     7      0    5180
                                             22 BANK0      7     7      0
                _Bq32k_Rtc_Read_Time
                      _WriteAll_1621
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _temperature_display                                  1     1      0   22228
                                             58 BANK0      1     1      0
                         _Tc_Display
                        _err_Display
         _maxim_31856_write_register
           _maxim_clear_fault_status
               _tc_temperature_trans
 ---------------------------------------------------------------------------------
 (3) _tc_temperature_trans                                12    12      0   13791
                                             46 BANK0     12    12      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Calculate_Time                                      22    22      0    9835
                                             24 BANK0     22    22      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_time
                 _Write_Flash_finish
                   _Write_Flash_head
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1368
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_head                                     0     0      0    1082
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_finish                                   0     0      0    1082
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Save_Write_time                                      3     3      0    4589
                                             22 BANK0      2     2      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Save_Write_word                                      6     4      2    3088
                                              6 BANK0      6     4      2
                   _FLASH_EraseBlock
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteWord                                      5     1      4    1082
                                              1 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     481
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _maxim_clear_fault_status                             1     1      0    1652
                                              5 BANK0      1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (3) _err_Display                                          5     5      0    1834
                                             11 BANK0      5     5      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _Tc_Display                                           4     4      0    3395
                                             15 BANK0      4     4      0
                      _WriteAll_1621
                            ___lwdiv
                            ___lwmod
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     324
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     540
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     703
                                              7 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _one_temperature_trans                                2     2      0    2700
                                             14 BANK0      2     2      0
        _maxim_31856_read_nregisters
             _maxim_start_conversion
 ---------------------------------------------------------------------------------
 (3) _maxim_start_conversion                               2     2      0    1683
                                              5 BANK0      2     2      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_write_register                           2     1      1    1556
                                              2 BANK0      2     1      1
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_read_register                            3     3      0      96
                                              2 BANK0      3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _maxim_31856_read_nregisters                          5     3      2    1017
                                              9 BANK0      5     3      2
                   _SPI_Exchange8bit
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     739
                                              2 BANK0      7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Two_Display                                          6     6      0    1865
                                             11 BANK0      6     6      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _WriteAll_1621                                        6     3      3    1723
                                              5 BANK0      6     3      3
                       _SendBit_1621
                   _SendDataBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendDataBit_1621                                     4     3      1     256
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Set_start_flag                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_finish_flag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendCmd_1621                                         2     2      0     595
                                              5 BANK0      2     2      0
                       _SendBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendBit_1621                                         4     3      1     564
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Key_Scan                                             3     3      0      40
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Com_Process                                          0     0      0    8019
                         _Inf_to_Com
                  _Set_time_from_Com
 ---------------------------------------------------------------------------------
 (2) _Set_time_from_Com                                    1     1      0    5857
                                             31 BANK0      1     1      0
                _Bq32k_Rtc_Read_Time
               _Bq32k_Rtc_Write_Time
                   _Read_time_to_Com
 ---------------------------------------------------------------------------------
 (3) _Read_time_to_Com                                    20    20      0    1307
                                             11 BANK0     20    20      0
                            _CRC_cal
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Write_Time                                13    13      0    3049
                                             18 BANK0     13    13      0
                    _I2C_Send_Buffer
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (4) _bin2bcd                                              8     8      0    1864
                                             10 BANK0      8     8      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     895
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     907
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _I2C_Send_Buffer                                      7     5      2     676
                                              4 BANK0      7     5      2
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Read_Time                                 13    13      0    1501
                                              9 BANK0     13    13      0
                    _I2C_Read_Buffer
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (4) _bcd2bin                                              4     4      0     275
                                              5 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     213
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Buffer                                      5     3      2     599
                                              4 BANK0      5     3      2
                   _I2C_Receive_Byte
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_Byte                                        3     3      0     102
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Receive_Byte                                     3     3      0     108
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Inf_to_Com                                          83    83      0    2162
                                             11 BANK0      5     5      0
                                              0 BANK1     78    78      0
                            _CRC_cal
                       _EUSART_Write
                    _FLASH_readBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_readBlock                                      5     2      3     616
                                              4 BANK0      5     2      3
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _CRC_cal                                             10     8      2     557
                                              1 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      31
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0     548
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            1     1      0       0
                                              1 COMMON     1     1      0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  3     3      0     548
                                             11 COMMON     3     3      0
                       _RxFrameCheck
 ---------------------------------------------------------------------------------
 (12) _RxFrameCheck                                       11    10      1     437
                                              0 COMMON    11    10      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _Com_Process
     _Inf_to_Com
       _CRC_cal
       _EUSART_Write
       _FLASH_readBlock
         _FLASH_ReadWord
     _Set_time_from_Com
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Bq32k_Rtc_Write_Time
         _I2C_Send_Buffer
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bin2bcd
           ___awdiv
           ___awmod
       _Read_time_to_Com
         _CRC_cal
         _EUSART_Write
   _Key_Process
     _EUSART_Write
     _FLASH_EraseBlock
     _FLASH_ReadWord
     _Key_Scan
     _Save_Write_time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_word
         _FLASH_EraseBlock
         _FLASH_WriteWord
     _SendCmd_1621
       _SendBit_1621
     _Set_finish_flag
     _Set_start_flag
     _Write_Flash_finish
       _FLASH_WriteWord
     _Write_Flash_head
       _FLASH_WriteWord
     _temperature_process
       _Two_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _one_temperature_trans
         _maxim_31856_read_nregisters
           _SPI_Exchange8bit
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
         _maxim_start_conversion
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
       _temperature_display
         _Tc_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
           _memset
         _err_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
         _maxim_31856_write_register
           _SPI_Exchange8bit
         _maxim_clear_fault_status
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
         _tc_temperature_trans
           _Calculate_Time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_time
               _Bq32k_Rtc_Read_Time
                 _I2C_Read_Buffer
                   _I2C_Receive_Byte
                   _I2C_Send_Byte
                   _I2C_Start
                   _I2C_Stop
                 _bcd2bin
                   ___bmul
               _Save_Write_word
                 _FLASH_EraseBlock
                 _FLASH_WriteWord
             _Write_Flash_finish
               _FLASH_WriteWord
             _Write_Flash_head
               _FLASH_WriteWord
             ___wmul
           _Save_Write_word
             _FLASH_EraseBlock
             _FLASH_WriteWord
       _time_Display
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___awdiv
         ___awmod
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR0_Initialize
   _Save_process
     _Calculate_Time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_time
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_WriteWord
       _Write_Flash_finish
         _FLASH_WriteWord
       _Write_Flash_head
         _FLASH_WriteWord
       ___wmul
     _Save_Write_word
       _FLASH_EraseBlock
       _FLASH_WriteWord
   _SendCmd_1621
     _SendBit_1621
   _Serach_Flash_Head
     _FLASH_ReadWord
     _Write_Flash_finish
       _FLASH_WriteWord
   _Set_finish_flag
   _Sleep_process
     _Step_control
   _WriteAll_1621
     _SendBit_1621
     _SendDataBit_1621
   _Write_Flash_finish
     _FLASH_WriteWord
   _temperature_process
     _Two_Display
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
     _one_temperature_trans
       _maxim_31856_read_nregisters
         _SPI_Exchange8bit
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _maxim_start_conversion
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
     _temperature_display
       _Tc_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         _memset
       _err_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _maxim_31856_write_register
         _SPI_Exchange8bit
       _maxim_clear_fault_status
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
       _tc_temperature_trans
         _Calculate_Time
           _Bq32k_Rtc_Read_Time
             _I2C_Read_Buffer
               _I2C_Receive_Byte
               _I2C_Send_Byte
               _I2C_Start
               _I2C_Stop
             _bcd2bin
               ___bmul
           _Save_Write_time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_word
               _FLASH_EraseBlock
               _FLASH_WriteWord
           _Write_Flash_finish
             _FLASH_WriteWord
           _Write_Flash_head
             _FLASH_WriteWord
           ___wmul
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_WriteWord
     _time_Display
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
       ___awdiv
       ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
     _RxFrameCheck
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     45      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4E      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      5      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     176      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     176      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Aug 30 16:33:31 2016

                        __end_of_I2C_Send_Buffer 08C3                                   _SPI_Initialize 1334  
                     ?_maxim_31856_read_register 0070                                     _Usart_Rx_Cnt 0068  
  maxim_31856_read_register@uch_register_address 0023                                   ___bmul@product 0023  
                             __size_of_I2C_Start 001D                       FLASH_WriteWord@GIEBitValue 0025  
                                    __CFG_CP$OFF 0000                                ?_Write_Flash_head 0070  
                                  _Usart_Rx_Buff 01B8                                               l71 1350  
                                   ___awdiv@sign 0027                          ?_SPI_Exchange8bitBuffer 0022  
                         __end_of_FVR_Initialize 1324                              ___wmul@multiplicand 0023  
                               ?_Save_Write_time 0070                                 ?_Save_Write_word 0026  
                                _timer0ReloadVal 016D                               ??_Write_Flash_head 0026  
                           Bq32k_Rtc_Read_Time@p 0035                                              l163 135C  
                                            l261 14FA                                              l621 0115  
                                            l623 01E7                                              l471 042E  
                                            l641 0254                                              l633 01C5  
                                            l644 025C                                              l636 0221  
                                            l469 042C                                              l478 0462  
                                            l639 0229                                              l736 15AF  
                                            l752 15D0                                              l648 098B  
                                            l488 04D7                                              l649 098A  
                                            l842 07B5                                              l738 15B1  
                                            l754 15D2                                              l836 07B0  
                                            l781 1792                                              l693 0887  
                                            l791 0661                                              l848 07D6  
                                            l792 068B                                              l858 07ED  
                                            l877 171B                                              l982 161E  
                                            l983 1622                                              l977 1628  
                                            l997 06FC                                              _RB1 0069  
                                            _RB3 006B                                              _RB5 006D  
                                            _RA7 0067                                     ?_err_Display 0070  
                                   ___awmod@sign 0027                                   _Usart_Run_Flag 013B  
                             _Write_Flash_finish 17CA                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                               ?_FLASH_WriteWord 0021                           _maxim_start_conversion 1563  
                            __end_of_Com_Process 13A6                                  __end_of_CRC_cal 0E3F  
                                   __CFG_LVP$OFF 0000                                             l1001 0712  
                                           l1015 0748                                             l1008 0740  
                                           l1025 0799                                             l1009 0743  
                                           l1140 0BAE                                             l1029 07A8  
                                           l1144 0BE2                                             l1306 145F  
                                           l1227 1518                                             l6110 0E39  
                                           l6040 06B1                                             l6032 0629  
                                           l6008 0232                                             l6042 06C0  
                                           l6034 0644                                             l6108 0DCE  
                                           l6124 1545                                             l5332 13A9  
                                           l6132 0993                                             l6036 06A6  
                                           l5318 172D                                             l6046 06CA  
                                           l6310 0852                                             l5440 0DA3  
                                           l5336 13AF                                             l5600 0A84  
                                           l6136 099B                                             l5512 17FB  
                                           l5504 17E1                                             l6082 08A6  
                                           l5602 0A9A                                             l5506 17E5  
                                           l6170 0928                                             l6162 0918  
                                           l6322 085F                                             l5268 07B7  
                                           l6084 08C0                                             l5524 15A6  
                                           l5604 0A9F                                             l6324 0862  
                                           l5438 0D78                                             l5614 0AA7  
                                           l5606 0AA4                                             l5470 0E66  
                                           l6166 0920                                             l6158 0910  
                                           l6342 0875                                             l6510 0749  
                                           l6432 05EE                                             l6416 0585  
                                           l5720 0A30                                             l5536 15C7  
                                           l5800 17AA                                             l5704 1440  
                                           l5480 0EAB                                             l5552 084C  
                                           l5544 0832                                             l6336 086F  
                                           l6504 071F                                             l6418 05B6  
                                           l5730 0A38                                             l5714 0A25  
                                           l6354 1610                                             l5626 1778  
                                           l5810 17C5                                             l5474 0E8B  
                                           l5546 0836                                             l6338 0872  
                                           l6522 0765                                             l6514 0751  
                                           l5732 0A44                                             l5476 0E95  
                                           l6540 078A                                             l6372 1637  
                                           l5742 0A5F                                             l5806 17BC  
                                           l5822 16AB                                             l5670 033C  
                                           l6550 079E                                             l6470 0A05  
                                           l6462 09F6                                             l6374 1638  
                                           l5824 16B7                                             l5832 16CC  
                                           l5576 1459                                             l5920 00D4  
                                           l6544 0791                                             l6480 0A14  
                                           l6608 1520                                             l5746 0A67  
                                           l5738 0A56                                             l5770 0955  
                                           l5762 094F                                             l5674 0345  
                                           l5772 0961                                             l5780 0976  
                                           l5596 0A76                                             l5828 16C3  
                                           l5684 0354                                             l5940 012F  
                                           l5924 00EE                                             l5916 00C4  
                                           l6492 06FD                                             l6572 0BC4  
                                           l5758 0948                                             l5694 0405  
                                           l5942 0138                                             l6478 0A12  
                                           l5784 097E                                             l5776 096D  
                                           l6496 0705                                             l6760 04D9  
                                           l5970 0184                                             l6762 04DC  
                                           l6596 139E                                             l6780 0509  
                                           l6748 04AB                                             l6692 0450  
                                           l5798 179E                                             l5990 01DF  
                                           l5974 019E                                             l5966 0174  
                                           l6686 0437                                             l6696 0464  
                                           l6788 0533                              ?_Write_Flash_finish 0070  
                                           _LATA 010C                                             _LATB 010D  
                                           _LATC 010E                                             u5105 0A57  
                                           u5400 00A0                                             u5065 0A3B  
                                           u5305 16AE                                             u5235 17A1  
                                           u5500 014F                                             u5085 0A45  
                                           u5165 0958                                             u5325 16BD  
                                           u5510 0150                                             u5095 0A4F  
                                           u5255 17AB                                             u5335 16C4  
                                           u5185 0967                                             u5265 17B5  
                                           u4705 0E70                                             u5195 096E  
                                           u5275 17BD                                             u5390 009F  
                                           u5455 00DD                                             u4665 13D7  
                                           u5565 018D                                             u6517 041F  
                                           u6607 0DC0                                             u6527 15D6  
                                           u6617 14B0                                             u5745 16F8  
                                           u6537 15B5                                             u4865 1460  
                                           u5755 0E01                                             u6707 07C1  
                                           u6627 14B7                                             u6547 1614  
                                           u4875 1465                                             u6475 0513  
                                           u5765 0DDC                                             u6717 07CB  
                                           u6637 14BE                                             u6557 0D8B  
                                           u6727 07DB                                             u6647 14C5  
                                           u6567 0D92                                             u6737 07E2  
                                           u6657 1493                                             u6577 0D99  
                                           u6747 07F4                                             u6667 149A  
                                           u6587 0DB2                                             u6757 07FB  
                                           u6677 14A1                                             u6597 0DB9  
                                           u6767 1710                                             u6687 14A8  
                                           u6777 1722                                             u6697 07BA  
                                           u5995 0602                                             _TMR0 0015  
                                           _WPUB 020D                                             _WPUE 0210  
                            RxFrameCheck@tmp_crc 0075                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                          __size_of_Set_start_flag 0006  
                         __size_of_WriteAll_1621 0035                                    ??_Key_Process 005B  
                                           _main 0407                                             fsr0h 0005  
                                           fsr1h 0007                                             fsr0l 0004  
                                           indf0 0000                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                               __end_of_I2C_Stop 14C8                                    __CFG_BOREN$ON 0000  
                                    Inf_to_Com@i 00EC                                             ltemp 007E  
                            SendCmd_1621@command 0026                                             start 0027  
                                           ttemp 007E                                             wtemp 007E  
                                __end_of_Dis_TAB 1815                                ?_Read_time_to_Com 0070  
                         __end_of_SPI_Initialize 133A                                 ?_I2C_Read_Buffer 0024  
                              ___bmul@multiplier 0024                                    __CFG_MCLRE$ON 0000  
                                   main@bat_data 01DB                               ??_Read_time_to_Com 002B  
                 __end_of_SPI_Exchange8bitBuffer 0ABF                                  time_Display@num 0039  
                           ??_Write_Flash_finish 0026                          __end_of_TMR0_Initialize 1384  
                                ?_FVR_Initialize 0070                                    ?_EUSART_Write 0070  
                 __size_of_OSCILLATOR_Initialize 0005                    __end_of_OSCILLATOR_Initialize 132E  
                                __end_of_bcd2bin 13E0                                            ?_main 0070  
                                __end_of___awdiv 0A6C                                  __end_of___awmod 0983  
                                ___awdiv@divisor 0021                                            _LATA0 0860  
                                          _LATA1 0861                                            _LATB0 0868  
                                          _LATA2 0862                                  __end_of_bin2bcd 16FF  
                                          _LATB1 0869                                            _LATA3 0863  
                                          _LATC0 0870                                            _LATA4 0864  
                                          _LATC1 0871                                            _LATA5 0865  
                                          _LATC2 0872                                            _LATA6 0866  
                                __end_of___lwdiv 17CA                                            i1l313 138F  
                                          i1l330 0010                                            i1l332 001A  
                                          i1l190 0CC3                                            i1l192 0CC7  
                                          i1l336 0022                                            i1l169 14E3  
                                __end_of___lwmod 16D1                                  ___awdiv@counter 0026  
                                          _RCREG 0199                                            u501m0 03FE  
                                          _RCSTA 019D                                       _Flash_buff 0220  
                                          u483m0 0CE6                                            u484m0 0CF5  
                                          u498m0 0335                          ??_one_temperature_trans 002E  
                              ?_SendDataBit_1621 0021                                            _TRISA 008C  
                                          _TRISB 008D                                            _TRISC 008E  
                               ?_FLASH_readBlock 0024                                            _TXREG 019A  
                                          _TXSTA 019E                                 __end_of_TMR0_ISR 081B  
                             ??_SendDataBit_1621 0022                     __end_of_tc_temperature_trans 0265  
                                          main@i 01DA                                __end_of_I2C_Start 14AB  
                            _Bq32k_Rtc_Read_Time 0BF8                                  Tc_Display@count 0030  
                              WriteAll_1621@addr 0029                                            ltemp0 007E  
                                          ltemp1 0082                                            ltemp2 0086  
                                          ltemp3 0080                                            ttemp0 007E  
                                          ttemp1 0081                                            ttemp2 0084  
                                          ttemp3 0087                                            ttemp4 007F  
                                          status 0003                                            wtemp0 007E  
                                          wtemp1 0080                                            wtemp2 0082  
                                          wtemp3 0084                                            wtemp4 0086  
                                          wtemp5 0088                                            wtemp6 007F  
                                     _Inf_to_Com 053B                           __size_of_I2C_Send_Byte 0056  
                                _Cur_temperature 0130                                       _Tc_Display 0614  
                                ?_SPI_Initialize 0070                      __end_of_temperature_display 093D  
                                __initialization 0029                              __end_of_Key_Process 07A9  
                               ?_I2C_Send_Buffer 0024                                     __end_of_main 053B  
                          RxFrameCheck@frame_len 0070                                   WriteAll_1621@i 002A  
                                 WriteAll_1621@p 0025                                 __end_of_Key_Scan 162A  
                                  main@data_temp 01D8                                   ??_EUSART_Write 0021  
                           ?_Bq32k_Rtc_Read_Time 0070                      __end_of_temperature_process 0888  
                          __end_of_Sleep_process 1523                                   __CFG_LPBOR$OFF 0000  
   maxim_31856_write_register@uch_register_value 0022                      ?_INTERRUPT_InterruptManager 0070  
                                  _WriteAll_1621 1760                                           ??_main 0061  
                                    _Com_Process 1395                                     Key_Process@i 005F  
 maxim_31856_write_register@uch_register_address 0023                               _Cur_Save_Index_Bak 012E  
                                      ??_CRC_cal 0023                          __size_of_FLASH_ReadWord 0020  
                        Bq32k_Rtc_Read_Time@temp 002B                                I2C_Receive_Byte@i 0023  
                                  CRC_cal@rx_arr 0027                         __end_of_SPI_Exchange8bit 1354  
                          RxFrameCheck@remainder 0079                                           _ADCON0 009D  
                                         _ADCON1 009E                                           _ADRESH 009C  
                                         _ADRESL 009B                                 ___awdiv@dividend 0023  
                                         _APFCON 011D                                           _ANSELA 018C  
                                         _ANSELB 018D                                           _ANSELC 018E  
                                         i1l4560 0F66                                           i1l4562 0FD1  
                                         i1l4732 0C68                                           i1l4574 0FFE  
                                         i1l4760 0C9F                                           i1l4754 0C95  
                                         i1l4764 0CA5                                           i1l4748 0C8B  
                                         i1l4774 0CCB                                           i1l4776 0CD4  
                                         _FVRCON 0117                                           _PMADRH 0192  
                                         _PMADRL 0191                                           _PMDATH 0194  
                                         u362_25 0F99                                           _PMDATL 0193  
                                         u363_25 0F74                                _temperature_value 0124  
                                         _PMCON2 0196                                           u364_25 0FE1  
                                         u365_25 0FFA                        __size_of_FLASH_EraseBlock 0020  
                                         _OSCCON 0099                                           _SPBRGH 019C  
                                         _SPBRGL 019B                         _Cur_temperature_time_ch1 0136  
                       _Cur_temperature_time_ch2 0137                                           _WDTPS0 04B9  
                                         _WDTPS1 04BA                                           _WDTPS2 04BB  
                                         _WDTPS3 04BC                                           _WDTPS4 04BD  
                                         _TRISB1 0469                                           _TRISB3 046B  
                                         _SSPBUF 0211                                    ?_SendCmd_1621 0070  
                                         _SWDTEN 04B8                     __end_of_Bq32k_Rtc_Write_Time 0B26  
                                  ?_SendBit_1621 0021                                   __CFG_PWRTE$OFF 0000  
                               SendBit_1621@data 0023                                           ___bmul 13A6  
                                      ??_bcd2bin 0025                                    RxFrameCheck@i 0077  
                                         ___wmul 1456                                        ??___awdiv 0025  
                                 __CFG_STVREN$ON 0000                                        ??___awmod 0025  
                          ??_Bq32k_Rtc_Read_Time 0029                                        ??_bin2bcd 002A  
                                      ??___lwdiv 002B                                        ??___lwmod 0025  
                            _EUSART_Transmit_ISR 14C8                     ?_maxim_31856_read_nregisters 0029  
                            FLASH_WriteWord@word 0023                                   ?_WriteAll_1621 0025  
                               ?_TMR0_Initialize 0070                                           _memset 143A  
                              ?_I2C_Receive_Byte 0070                                 ___awdiv@quotient 0028  
                                ___awmod@divisor 0021                                           _uch_sr 014A  
                                ___awmod@counter 0026                                           _rtc_tm 0161  
                                _Set_finish_flag 1324                                    _I2C_Send_Byte 07A9  
                             ??_I2C_Receive_Byte 0021                          FLASH_ReadWord@flashAddr 0021  
                                      ?_I2C_Stop 0070                     ??_maxim_31856_write_register 0023  
                          I2C_Read_Buffer@Length 0025                         ADC_GetConversion@channel 0024  
                           __size_of_err_Display 002C                            __end_of_TMR0_CallBack 1395  
                                     bcd2bin@val 0028                       ??_maxim_clear_fault_status 0025  
                           ?_EUSART_Transmit_ISR 0070                                   _Set_start_flag 132E  
                              _SYSTEM_Initialize 13F5                                   ??_SendCmd_1621 0025  
                        __end_of__initialization 0052                                   ??_SendBit_1621 0022  
                                    _Key_Process 06E5                                      ?_Inf_to_Com 0070  
                             ?_SYSTEM_Initialize 0070                                 CRC_cal@frame_len 0021  
                                    ?_Tc_Display 0070                               Calculate_Time@temp 0042  
                            ___bmul@multiplicand 0021                                    ?_RxFrameCheck 0070  
                              time_Display@F2144 01B4             tc_temperature_trans@temperature_back 0052  
                                 __pcstackCOMMON 0070             tc_temperature_trans@temperature_temp 0058  
                                   __pidataBANK2 0002                              ??_SYSTEM_Initialize 0022  
                           _tc_temperature_trans 0056                                        ?_TMR0_ISR 0070  
                    ??_maxim_31856_read_register 0022              __size_of_maxim_31856_write_register 0010  
                                  ?_Save_process 0070                                   ?_I2C_Send_Byte 0070  
                  ??_maxim_31856_read_nregisters 002B                                 CRC_cal@remainder 0029  
                        ?_maxim_start_conversion 0070                                   _OPTION_REGbits 0095  
                          TMR0_ISR@CountCallBack 0128                                  _temperature_int 0132  
                                     ??_I2C_Stop 0021                                    ??_Two_Display 002B  
                               Two_Display@F2138 0120                             I2C_Receive_Byte@Data 0022  
                         __end_of_Set_start_flag 1334                              I2C_Read_Buffer@Flag 0028  
                      __end_of_SYSTEM_Initialize 140A                        __size_of_Write_Flash_head 0036  
                          ??_EUSART_Transmit_ISR 0070                              I2C_Read_Buffer@buff 0024  
                                     __pbssBANK0 0065                                       __pbssBANK1 00EE  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                                     __pbssBANK4 0220                                        ?_Key_Scan 0070  
                           __end_of_EUSART_Write 1364                                  __CFG_VCAPEN$OFF 0000  
                    __size_of_EUSART_Receive_ISR 0074                                       bin2bcd@val 0031  
                                 ??_RxFrameCheck 0071                                 ??_FVR_Initialize 0021  
                                     __pmaintext 0407                                          ?___bmul 0021  
                        __end_of_Set_finish_flag 1329                            ?_tc_temperature_trans 0070  
                                    _Record_flag 0067                                  ??_WriteAll_1621 0028  
                                        ?___wmul 0021                                       ??_TMR0_ISR 0071  
                                 ??_Save_process 004E                                       __pintentry 0004  
                                        _BAUDCON 019F                                          ?_memset 0021  
                 __end_of_maxim_start_conversion 1583                          __size_of_ADC_Initialize 0008  
                                 _FLASH_ReadWord 1523                                    _eusartRxCount 013C  
                                        _CRC_cal 0DC5                        __size_of_Read_time_to_Com 0069  
                           _Bq32k_Rtc_Write_Time 0ABF                              __size_of_Inf_to_Com 00D9  
                            __size_of_Tc_Display 00D1                   __size_of_one_temperature_trans 004A  
                  __end_of_one_temperature_trans 09CD                                          _OSCSTAT 009A  
                       __size_of_Save_Write_time 0076                                          _SSP1ADD 0212  
                       __size_of_Save_Write_word 0087                        _maxim_31856_read_register 13E0  
                                ?_Set_start_flag 0070             __size_of_maxim_31856_read_nregisters 0018  
                                     ??_Key_Scan 0021                                          _Dis_TAB 1800  
                               _FLASH_EraseBlock 1583                                 ??_SPI_Initialize 0021  
                       __size_of_FLASH_WriteWord 002B                          __size_of_Calculate_Time 01A2  
                            __end_of_Two_Display 1760                        __size_of_SendDataBit_1621 0021  
                                      _I2C_Start 148E  maxim_31856_read_nregisters@uch_register_address 002D  
                                      _CH1_state 0134                                        _CH2_state 0135  
                                        _bcd2bin 13CB                                  __size_of___bmul 0012  
                                  ?_time_Display 0070                                          ___awdiv 0A1A  
                                        ___awmod 093D                                  __size_of___wmul 001C  
                                        _bin2bcd 16D1                                          ___lwdiv 1795  
                                        ___lwmod 16A4                                  ??_I2C_Send_Byte 0021  
                    __size_of_Write_Flash_finish 0036                                I2C_Send_Byte@Data 0022  
                         __end_of_FLASH_ReadWord 1543                                  __size_of_memset 001C  
                       __size_of_I2C_Read_Buffer 0078                                          __ptext1 1504  
                                        __ptext2 162A                                          __ptext3 09CD  
                                        __ptext4 0B8F                                          __ptext5 13F5  
                                        __ptext6 1374                                          __ptext7 1334  
                                        __ptext8 15E5                                          __ptext9 1329  
                                   ?_Com_Process 0070                             __end_of_SendCmd_1621 1422  
                        Read_time_to_Com@crc_tmp 003C                             SendDataBit_1621@data 0023  
                           __end_of_SendBit_1621 15C4                            ?_Bq32k_Rtc_Write_Time 0070  
             __end_of_maxim_31856_write_register 1374                       _maxim_31856_write_register 1364  
                          _OSCILLATOR_Initialize 1329                                   I2C_Send_Byte@i 0023  
                               ___awmod@dividend 0023                                          _uch_cr0 00EF  
                                        _uch_cr1 0145                         ??_PIN_MANAGER_Initialize 0021  
                                        _uch_reg 014B                 __end_of_maxim_clear_fault_status 13CB  
                              ?_SPI_Exchange8bit 0070                          Read_time_to_Com@tmp_buf 002C  
                          I2C_Send_Buffer@Length 0025                       __size_of_SYSTEM_Initialize 0015  
                                        clrloop0 133B                             end_of_initialization 0052  
                             ??_SPI_Exchange8bit 0021                             SPI_Exchange8bit@data 0021  
                       __size_of_FLASH_readBlock 0020                             FLASH_readBlock@count 0026  
                                        memset@c 0021                                          memset@n 0023  
                                        memset@p 0027                                       ?_I2C_Start 0070  
                              _EUSART_Initialize 1472                                     _Inf_cmd_flag 0138  
                         ??_tc_temperature_trans 004E                               ?_EUSART_Initialize 0070  
                                 ??_time_Display 0036                                        _RCSTAbits 019D  
                               ?_Set_finish_flag 0070                            Serach_Flash_Head@data 0028  
                                   __pstringtext 1800                        FLASH_ReadWord@GIEBitValue 0023  
                                     _time_count 006A                                  ?_FLASH_ReadWord 0021  
                   __size_of_temperature_display 003E                              ??_EUSART_Initialize 0021  
                                  ?_Step_control 0070                                     _display_buff 0168  
                       __size_of_I2C_Send_Buffer 003B                                 __CFG_FOSC$INTOSC 0000  
                   __size_of_temperature_process 0037                             __end_of_RxFrameCheck 1000  
                          __size_of_EUSART_Write 0010                                      _Two_Display 172F  
                              __size_of_I2C_Stop 001D                                 _Write_Flash_head 081B  
                           __end_of_Save_process 0BF8                        __size_of_I2C_Receive_Byte 0030  
                           Key_Process@gKeyValue 005E                           __size_of_Sleep_process 001F  
                      __end_of_EUSART_Initialize 148E                              Calculate_Time@temp1 0046  
                            Calculate_Time@temp2 004A                         EUSART_Receive_ISR@rx_tmp 007D  
                              ??_Save_Write_time 0036                                     ?_Key_Process 0070  
                              ??_Save_Write_word 0028                                     ??_Inf_to_Com 002B  
                       ??_SPI_Exchange8bitBuffer 0024                                     ??_Tc_Display 002F  
                             RxFrameCheck@rx_arr 0078                      __end_of_Bq32k_Rtc_Read_Time 0C63  
                              ??_FLASH_WriteWord 0025                     tc_temperature_trans@var_time 0056  
      maxim_start_conversion@uch_conversion_mode 0026                                   __end_of___bmul 13B8  
                                 __end_of___wmul 1472                                     _EUSART_Write 1354  
                              __size_of_TMR0_ISR 001B                                   _ADC_Initialize 1340  
                         ??_Bq32k_Rtc_Write_Time 0032                                   ??_Step_control 0021  
                           Key_Process@data_temp 005C                           ?_OSCILLATOR_Initialize 0070  
                              Read_time_to_Com@i 003E                                   __end_of_memset 1456  
                                 Tc_Display@data 0031                                 WriteAll_1621@cnt 0027  
                                  ??_err_Display 002B                                 _Read_time_to_Com 0B26  
                            start_initialization 0029                               __end_of_Inf_to_Com 0614  
                       __size_of_TMR0_Initialize 0010                               __end_of_Tc_Display 06E5  
                __size_of_PIN_MANAGER_Initialize 0022                                ??_I2C_Read_Buffer 0026  
                          Bq32k_Rtc_Write_Time@p 003E                                   Two_Display@num 002C  
                                 _Calculate_Time 0265                                 _SendDataBit_1621 15C4  
                                    ??_I2C_Start 0021                                __size_of_Key_Scan 0023  
                               _temperature_sign 0141               __size_of_maxim_31856_read_register 0015  
                              ??_FLASH_readBlock 0027                                  SendBit_1621@cnt 0021  
                                       ??___bmul 0022                __size_of_maxim_clear_fault_status 0013  
                      ?_maxim_clear_fault_status 0070                                         ??___wmul 0025  
                          __size_of_SendCmd_1621 0018                            __size_of_SendBit_1621 0021  
                            I2C_Send_Buffer@Flag 002A                           __size_of_TMR0_CallBack 0011  
                         __end_of_ADC_Initialize 1348                                      __pdataBANK2 016E  
                            I2C_Send_Buffer@buff 0024                                         ??_memset 0025  
                    FLASH_EraseBlock@GIEBitValue 0023                         __end_of_FLASH_EraseBlock 15A3  
                                  _Sleep_process 1504                                         ?_CRC_cal 0021  
                               ??_Set_start_flag 0021                      __end_of_EUSART_Transmit_ISR 14E6  
                           __size_of_Com_Process 0011                                         CRC_cal@i 0028  
                                _CH1_temperature 012A                              Inf_to_Com@count_tmp 00ED  
                                      ___latbits 0003                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00A0                                    __pcstackBANK3 01D8  
                       Bq32k_Rtc_Write_Time@temp 0034                             __end_of_time_Display 0F5C  
                  SPI_Exchange8bitBuffer@dataOut 0023                           __end_of_Calculate_Time 0407  
                              ??_I2C_Send_Buffer 0026                              __end_of_err_Display 16A4  
                              Inf_to_Com@add_tmp 00E8                       __end_of_EUSART_Receive_ISR 0CD7  
                     __size_of_EUSART_Initialize 001C                               I2C_Read_Buffer@ADD 0027  
                                   _LongPressSec 00EE                                Inf_to_Com@crc_tmp 00EA  
                              Two_Display@number 0030                                     _SendCmd_1621 140A  
                                   _SendBit_1621 15A3                                        __pnvBANK2 016C  
                __size_of_SPI_Exchange8bitBuffer 0053                                 ___lwdiv@dividend 0029  
                         _PIN_MANAGER_Initialize 15E5                                      _MAX31856Sec 0139  
              __end_of_maxim_31856_read_register 13F5                                         ?_bcd2bin 0070  
                              Inf_to_Com@tmp_buf 00A0                                         ?___awdiv 0021  
                                       ?___awmod 0021              __end_of_maxim_31856_read_nregisters 143A  
                    _maxim_31856_read_nregisters 1422                                         ?_bin2bcd 0070  
                                       ?___lwdiv 0027                                         ?___lwmod 0021  
                                ?_ADC_Initialize 0070                                SendDataBit_1621@i 0024  
                                   _eusartRxHead 013D                                     _eusartTxHead 013F  
                                 ?_Sleep_process 0070                            __end_of_WriteAll_1621 1795  
                                   _eusartRxTail 013E                                     _eusartTxTail 0140  
                   ??_INTERRUPT_InterruptManager 0020                            __size_of_RxFrameCheck 00A4  
                        _eusartTxBufferRemaining 016C                                _Set_time_cmd_flag 013A  
                    ?_maxim_31856_write_register 0022                                         _I2C_Stop 14AB  
                          __size_of_Save_process 0069                                  _CH2_temperature 012C  
                               I2C_Send_Buffer@i 0029                                 __CFG_WDTE$SWDTEN 0000  
                               ___lwdiv@quotient 002D                                    _TMR0_CallBack 1384  
                                ?_Calculate_Time 0070                              _temperature_decimal 0069  
                          _one_temperature_trans 0983                                _Set_time_from_Com 08C3  
                               _I2C_Receive_Byte 16FF                              SendDataBit_1621@cnt 0021  
                       FLASH_WriteWord@flashAddr 0021                                   err_Display@num 002C  
                                 _eusartRxBuffer 01A0            maxim_31856_read_nregisters@uch_nBytes 002A  
                            _temperature_display 08FF                                ??_TMR0_Initialize 0021  
                                 _eusartTxBuffer 01A8                               ?_Set_time_from_Com 0070  
                                 ___wmul@product 0025                             __end_of_Step_control 164D  
                                      clear_ram0 133A                                         _PIE1bits 0091  
                                      _uch_ltcbh 0146                                        _uch_ltcbl 0147  
                                      _uch_ltcbm 0148                             __size_of_Key_Process 00C4  
            __size_of_INTERRUPT_InterruptManager 0023                              _temperature_process 0851  
                                       _PIR1bits 0011                        FLASH_EraseBlock@startAddr 0021  
                                   _RxFrameCheck 0F5C                              ??_Set_time_from_Com 003F  
                               ??_FLASH_ReadWord 0023                        __size_of_SPI_Exchange8bit 000C  
                     __end_of_Write_Flash_finish 1800                                         _SSP1CON1 0215  
                                       _TMR0_ISR 0800                         __end_of_Write_Flash_head 0851  
                                       _SSP1STAT 0214                                     _Save_process 0B8F  
                           ?_temperature_display 0070                            __end_of_I2C_Send_Byte 07FF  
                                     _ADCON0bits 009D                                ___wmul@multiplier 0021  
                        __size_of_FVR_Initialize 0004                           _SPI_Exchange8bitBuffer 0A6C  
                                 _Cur_Save_Index 0065                                      _err_Display 1678  
                            Save_Write_word@data 0026                             ?_temperature_process 0070  
                               __size_of_CRC_cal 007A                                  _Save_Write_time 0CD7  
                                _Save_Write_word 0E3F                                     ?_Two_Display 0070  
                      __end_of_Set_time_from_Com 08FF                                   ?_TMR0_CallBack 0070  
                                _FLASH_WriteWord 164D                                         _Key_Scan 1607  
            maxim_31856_read_nregisters@uch_buff 0029                           FLASH_readBlock@address 0024  
                              _Serach_Flash_Head 09CD                         __end_of_Read_time_to_Com 0B8F  
                             ?_Serach_Flash_Head 0070                                _ADC_GetConversion 14E6  
                       ??_maxim_start_conversion 0025                               I2C_Send_Buffer@ADD 0028  
                                ??_Sleep_process 0022                    __size_of_tc_temperature_trans 020F  
                        __size_of_SPI_Initialize 0006                                 __size_of_bcd2bin 0015  
                        ??_OSCILLATOR_Initialize 0021                               Serach_Flash_Head@i 002A  
                             ?_ADC_GetConversion 0021                                 __size_of___awdiv 0052  
                          ??_temperature_display 005A                                 __size_of___awmod 0046  
                                _I2C_Read_Buffer 0D4D                                 __size_of_bin2bcd 002E  
                               __size_of___lwdiv 0035                                 __size_of___lwmod 002D  
                            ??_Serach_Flash_Head 0026                     SPI_Exchange8bitBuffer@dataIn 0027  
                   SPI_Exchange8bitBuffer@bufLen 0022                                 err_Display@F2141 01B0  
                       __end_of_SendDataBit_1621 15E5                         __size_of_Set_finish_flag 0005  
                          __size_of_time_Display 0096                              ??_ADC_GetConversion 0023  
                          ??_temperature_process 005B                                  ___lwdiv@divisor 0027  
                                ___lwdiv@counter 002C                                         __ptext10 1320  
                                       __ptext11 1472                                         __ptext20 081B  
                                       __ptext12 1340                                         __ptext21 17CA  
                                       __ptext13 06E5                                         __ptext30 16A4  
                                       __ptext22 0CD7                                         __ptext14 0851  
                                       __ptext31 1795                                         __ptext23 0E3F  
                                       __ptext15 0EC6                                         __ptext40 1760  
                                       __ptext32 0983                                         __ptext24 164D  
                                       __ptext16 08FF                                         __ptext41 15C4  
                                       __ptext33 1563                                         __ptext25 1583  
                                       __ptext17 0056                                         __ptext50 0ABF  
                                       __ptext42 132E                                         __ptext34 1364  
                                       __ptext26 13B8                                         __ptext18 0265  
                                       __ptext51 16D1                                         __ptext43 1324  
                                       __ptext35 13E0                                         __ptext27 1678  
                                       __ptext19 1456                                         __ptext60 148E  
                                       __ptext52 093D                                         __ptext44 140A  
                                       __ptext36 1422                                         __ptext28 0614  
                                       __ptext61 07A9                                         __ptext53 0A1A  
                                       __ptext45 15A3                                         __ptext37 0A6C  
                                       __ptext29 143A                                         __ptext70 0800  
                                       __ptext62 16FF                                         __ptext54 0888  
                                       __ptext46 1607                                         __ptext38 1348  
                                       __ptext71 1384                                         __ptext63 053B  
                                       __ptext55 0BF8                                         __ptext47 1395  
                                       __ptext39 172F                                         __ptext72 14C8  
                                       __ptext64 1543                                         __ptext56 13CB  
                                       __ptext48 08C3                                         __ptext73 0C63  
                                       __ptext65 1523                                         __ptext57 13A6  
                                       __ptext49 0B26                                         __ptext74 0F5C  
                                       __ptext66 1354                                         __ptext58 0D4D  
                                       __ptext67 0DC5                                         __ptext59 14AB  
                                       __ptext68 14E6                           ?_one_temperature_trans 0070  
                                   _SSP1CON1bits 0215                                  _FLASH_readBlock 1543  
                      __end_of_Serach_Flash_Head 0A1A                                    __size_of_main 0134  
     maxim_31856_read_register@uch_register_data 0024                        __end_of_ADC_GetConversion 1504  
                                       _uch_cjth 0143                                         _uch_cjtl 0144  
                                       _uch_mask 0149                             Save_process@var_time 0050  
                                       int$flags 007E                                     _time_Display 0EC6  
                                       _tmr_flag 0142               __end_of_INTERRUPT_InterruptManager 0027  
                     _INTERRUPT_InterruptManager 0004                     __size_of_Bq32k_Rtc_Read_Time 006B  
                                   _SSP1STATbits 0214                          __end_of_Save_Write_time 0D4D  
                        __end_of_Save_Write_word 0EC6                                  _I2C_Send_Buffer 0888  
                              ?_FLASH_EraseBlock 0021                    __size_of_Bq32k_Rtc_Write_Time 0067  
                             ??_FLASH_EraseBlock 0023                                       _INTCONbits 000B  
                        __end_of_FLASH_WriteWord 1678                                  ??_TMR0_CallBack 0070  
                                     _FVRCONbits 0117                                  Key_Scan@Key_val 0023  
                          FLASH_readBlock@buffer 0028                                    SendBit_1621@i 0024  
                     __size_of_Set_time_from_Com 003C                                         memset@p1 0026  
                          __size_of_Step_control 0023                                         intlevel1 0000  
                                     _PMCON1bits 0195                                 ___lwmod@dividend 0023  
                        ?_PIN_MANAGER_Initialize 0070                                __CFG_CLKOUTEN$OFF 0000  
             SPI_Exchange8bitBuffer@bytesWritten 0028                                 ??_ADC_Initialize 0021  
                        __end_of_I2C_Read_Buffer 0DC5                                 _SPI_Exchange8bit 1348  
                __size_of_maxim_start_conversion 0020                               _EUSART_Receive_ISR 0C63  
                       __end_of_I2C_Receive_Byte 172F                           Serach_Flash_Head@count 0027  
                                  ??_Com_Process 0040                                   _FVR_Initialize 1320  
                                   _rtc_save_ch1 0153                                     _rtc_save_ch2 015A  
                                     _OPTION_REG 0095                              ?_EUSART_Receive_ISR 0070  
                                   _Step_control 162A                          __end_of_FLASH_readBlock 1563  
                               ??_Calculate_Time 0038                                  ___lwmod@divisor 0021  
                                _TMR0_Initialize 1374                                  ___lwmod@counter 0026  
       tc_temperature_trans@temperature_absolute 0054                                ??_Set_finish_flag 0021  
                             EUSART_Write@txData 0021                             __size_of_Two_Display 0031  
                   __size_of_EUSART_Transmit_ISR 001E                   __end_of_PIN_MANAGER_Initialize 1607  
                     __size_of_Serach_Flash_Head 004D                             ??_EUSART_Receive_ISR 007B  
                           Bq32k_Time_Init@F2033 016E                       __size_of_ADC_GetConversion 001E  
                       _maxim_clear_fault_status 13B8  
