

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jul 15 11:13:08 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000D                     	;# 
    99  000E                     	;# 
   100  0010                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0099                     	;# 
   122  009A                     	;# 
   123  009B                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  011D                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  018E                     	;# 
   137  0191                     	;# 
   138  0191                     	;# 
   139  0192                     	;# 
   140  0193                     	;# 
   141  0193                     	;# 
   142  0194                     	;# 
   143  0195                     	;# 
   144  0196                     	;# 
   145  0197                     	;# 
   146  0199                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019C                     	;# 
   153  019C                     	;# 
   154  019D                     	;# 
   155  019E                     	;# 
   156  019F                     	;# 
   157  020D                     	;# 
   158  0210                     	;# 
   159  0211                     	;# 
   160  0211                     	;# 
   161  0212                     	;# 
   162  0212                     	;# 
   163  0213                     	;# 
   164  0213                     	;# 
   165  0214                     	;# 
   166  0214                     	;# 
   167  0215                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0216                     	;# 
   171  0216                     	;# 
   172  0217                     	;# 
   173  0217                     	;# 
   174  0291                     	;# 
   175  0291                     	;# 
   176  0292                     	;# 
   177  0293                     	;# 
   178  0298                     	;# 
   179  0298                     	;# 
   180  0299                     	;# 
   181  029A                     	;# 
   182  0394                     	;# 
   183  0395                     	;# 
   184  0396                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196  0000                     	;# 
   197  0001                     	;# 
   198  0002                     	;# 
   199  0003                     	;# 
   200  0004                     	;# 
   201  0005                     	;# 
   202  0006                     	;# 
   203  0007                     	;# 
   204  0008                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000D                     	;# 
   210  000E                     	;# 
   211  0010                     	;# 
   212  0011                     	;# 
   213  0012                     	;# 
   214  0015                     	;# 
   215  0016                     	;# 
   216  0016                     	;# 
   217  0017                     	;# 
   218  0018                     	;# 
   219  0019                     	;# 
   220  001A                     	;# 
   221  001B                     	;# 
   222  001C                     	;# 
   223  008C                     	;# 
   224  008D                     	;# 
   225  008E                     	;# 
   226  0090                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0097                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  010C                     	;# 
   240  010D                     	;# 
   241  010E                     	;# 
   242  0116                     	;# 
   243  0117                     	;# 
   244  011D                     	;# 
   245  018C                     	;# 
   246  018D                     	;# 
   247  018E                     	;# 
   248  0191                     	;# 
   249  0191                     	;# 
   250  0192                     	;# 
   251  0193                     	;# 
   252  0193                     	;# 
   253  0194                     	;# 
   254  0195                     	;# 
   255  0196                     	;# 
   256  0197                     	;# 
   257  0199                     	;# 
   258  019A                     	;# 
   259  019B                     	;# 
   260  019B                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019C                     	;# 
   264  019C                     	;# 
   265  019D                     	;# 
   266  019E                     	;# 
   267  019F                     	;# 
   268  020D                     	;# 
   269  0210                     	;# 
   270  0211                     	;# 
   271  0211                     	;# 
   272  0212                     	;# 
   273  0212                     	;# 
   274  0213                     	;# 
   275  0213                     	;# 
   276  0214                     	;# 
   277  0214                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0216                     	;# 
   282  0216                     	;# 
   283  0217                     	;# 
   284  0217                     	;# 
   285  0291                     	;# 
   286  0291                     	;# 
   287  0292                     	;# 
   288  0293                     	;# 
   289  0298                     	;# 
   290  0298                     	;# 
   291  0299                     	;# 
   292  029A                     	;# 
   293  0394                     	;# 
   294  0395                     	;# 
   295  0396                     	;# 
   296  0FE4                     	;# 
   297  0FE5                     	;# 
   298  0FE6                     	;# 
   299  0FE7                     	;# 
   300  0FE8                     	;# 
   301  0FE9                     	;# 
   302  0FEA                     	;# 
   303  0FEB                     	;# 
   304  0FED                     	;# 
   305  0FEE                     	;# 
   306  0FEF                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0008                     	;# 
   316  0009                     	;# 
   317  000A                     	;# 
   318  000B                     	;# 
   319  000C                     	;# 
   320  000D                     	;# 
   321  000E                     	;# 
   322  0010                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  008C                     	;# 
   335  008D                     	;# 
   336  008E                     	;# 
   337  0090                     	;# 
   338  0091                     	;# 
   339  0092                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009B                     	;# 
   347  009C                     	;# 
   348  009D                     	;# 
   349  009E                     	;# 
   350  010C                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  0116                     	;# 
   354  0117                     	;# 
   355  011D                     	;# 
   356  018C                     	;# 
   357  018D                     	;# 
   358  018E                     	;# 
   359  0191                     	;# 
   360  0191                     	;# 
   361  0192                     	;# 
   362  0193                     	;# 
   363  0193                     	;# 
   364  0194                     	;# 
   365  0195                     	;# 
   366  0196                     	;# 
   367  0197                     	;# 
   368  0199                     	;# 
   369  019A                     	;# 
   370  019B                     	;# 
   371  019B                     	;# 
   372  019B                     	;# 
   373  019B                     	;# 
   374  019C                     	;# 
   375  019C                     	;# 
   376  019D                     	;# 
   377  019E                     	;# 
   378  019F                     	;# 
   379  020D                     	;# 
   380  0210                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0216                     	;# 
   393  0216                     	;# 
   394  0217                     	;# 
   395  0217                     	;# 
   396  0291                     	;# 
   397  0291                     	;# 
   398  0292                     	;# 
   399  0293                     	;# 
   400  0298                     	;# 
   401  0298                     	;# 
   402  0299                     	;# 
   403  029A                     	;# 
   404  0394                     	;# 
   405  0395                     	;# 
   406  0396                     	;# 
   407  0FE4                     	;# 
   408  0FE5                     	;# 
   409  0FE6                     	;# 
   410  0FE7                     	;# 
   411  0FE8                     	;# 
   412  0FE9                     	;# 
   413  0FEA                     	;# 
   414  0FEB                     	;# 
   415  0FED                     	;# 
   416  0FEE                     	;# 
   417  0FEF                     	;# 
   418  0000                     	;# 
   419  0001                     	;# 
   420  0002                     	;# 
   421  0003                     	;# 
   422  0004                     	;# 
   423  0005                     	;# 
   424  0006                     	;# 
   425  0007                     	;# 
   426  0008                     	;# 
   427  0009                     	;# 
   428  000A                     	;# 
   429  000B                     	;# 
   430  000C                     	;# 
   431  000D                     	;# 
   432  000E                     	;# 
   433  0010                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0015                     	;# 
   437  0016                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001C                     	;# 
   445  008C                     	;# 
   446  008D                     	;# 
   447  008E                     	;# 
   448  0090                     	;# 
   449  0091                     	;# 
   450  0092                     	;# 
   451  0095                     	;# 
   452  0096                     	;# 
   453  0097                     	;# 
   454  0099                     	;# 
   455  009A                     	;# 
   456  009B                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  010C                     	;# 
   462  010D                     	;# 
   463  010E                     	;# 
   464  0116                     	;# 
   465  0117                     	;# 
   466  011D                     	;# 
   467  018C                     	;# 
   468  018D                     	;# 
   469  018E                     	;# 
   470  0191                     	;# 
   471  0191                     	;# 
   472  0192                     	;# 
   473  0193                     	;# 
   474  0193                     	;# 
   475  0194                     	;# 
   476  0195                     	;# 
   477  0196                     	;# 
   478  0197                     	;# 
   479  0199                     	;# 
   480  019A                     	;# 
   481  019B                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019C                     	;# 
   486  019C                     	;# 
   487  019D                     	;# 
   488  019E                     	;# 
   489  019F                     	;# 
   490  020D                     	;# 
   491  0210                     	;# 
   492  0211                     	;# 
   493  0211                     	;# 
   494  0212                     	;# 
   495  0212                     	;# 
   496  0213                     	;# 
   497  0213                     	;# 
   498  0214                     	;# 
   499  0214                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0216                     	;# 
   504  0216                     	;# 
   505  0217                     	;# 
   506  0217                     	;# 
   507  0291                     	;# 
   508  0291                     	;# 
   509  0292                     	;# 
   510  0293                     	;# 
   511  0298                     	;# 
   512  0298                     	;# 
   513  0299                     	;# 
   514  029A                     	;# 
   515  0394                     	;# 
   516  0395                     	;# 
   517  0396                     	;# 
   518  0FE4                     	;# 
   519  0FE5                     	;# 
   520  0FE6                     	;# 
   521  0FE7                     	;# 
   522  0FE8                     	;# 
   523  0FE9                     	;# 
   524  0FEA                     	;# 
   525  0FEB                     	;# 
   526  0FED                     	;# 
   527  0FEE                     	;# 
   528  0FEF                     	;# 
   529  0000                     	;# 
   530  0001                     	;# 
   531  0002                     	;# 
   532  0003                     	;# 
   533  0004                     	;# 
   534  0005                     	;# 
   535  0006                     	;# 
   536  0007                     	;# 
   537  0008                     	;# 
   538  0009                     	;# 
   539  000A                     	;# 
   540  000B                     	;# 
   541  000C                     	;# 
   542  000D                     	;# 
   543  000E                     	;# 
   544  0010                     	;# 
   545  0011                     	;# 
   546  0012                     	;# 
   547  0015                     	;# 
   548  0016                     	;# 
   549  0016                     	;# 
   550  0017                     	;# 
   551  0018                     	;# 
   552  0019                     	;# 
   553  001A                     	;# 
   554  001B                     	;# 
   555  001C                     	;# 
   556  008C                     	;# 
   557  008D                     	;# 
   558  008E                     	;# 
   559  0090                     	;# 
   560  0091                     	;# 
   561  0092                     	;# 
   562  0095                     	;# 
   563  0096                     	;# 
   564  0097                     	;# 
   565  0099                     	;# 
   566  009A                     	;# 
   567  009B                     	;# 
   568  009B                     	;# 
   569  009C                     	;# 
   570  009D                     	;# 
   571  009E                     	;# 
   572  010C                     	;# 
   573  010D                     	;# 
   574  010E                     	;# 
   575  0116                     	;# 
   576  0117                     	;# 
   577  011D                     	;# 
   578  018C                     	;# 
   579  018D                     	;# 
   580  018E                     	;# 
   581  0191                     	;# 
   582  0191                     	;# 
   583  0192                     	;# 
   584  0193                     	;# 
   585  0193                     	;# 
   586  0194                     	;# 
   587  0195                     	;# 
   588  0196                     	;# 
   589  0197                     	;# 
   590  0199                     	;# 
   591  019A                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019C                     	;# 
   597  019C                     	;# 
   598  019D                     	;# 
   599  019E                     	;# 
   600  019F                     	;# 
   601  020D                     	;# 
   602  0210                     	;# 
   603  0211                     	;# 
   604  0211                     	;# 
   605  0212                     	;# 
   606  0212                     	;# 
   607  0213                     	;# 
   608  0213                     	;# 
   609  0214                     	;# 
   610  0214                     	;# 
   611  0215                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0216                     	;# 
   615  0216                     	;# 
   616  0217                     	;# 
   617  0217                     	;# 
   618  0291                     	;# 
   619  0291                     	;# 
   620  0292                     	;# 
   621  0293                     	;# 
   622  0298                     	;# 
   623  0298                     	;# 
   624  0299                     	;# 
   625  029A                     	;# 
   626  0394                     	;# 
   627  0395                     	;# 
   628  0396                     	;# 
   629  0FE4                     	;# 
   630  0FE5                     	;# 
   631  0FE6                     	;# 
   632  0FE7                     	;# 
   633  0FE8                     	;# 
   634  0FE9                     	;# 
   635  0FEA                     	;# 
   636  0FEB                     	;# 
   637  0FED                     	;# 
   638  0FEE                     	;# 
   639  0FEF                     	;# 
   640  0000                     	;# 
   641  0001                     	;# 
   642  0002                     	;# 
   643  0003                     	;# 
   644  0004                     	;# 
   645  0005                     	;# 
   646  0006                     	;# 
   647  0007                     	;# 
   648  0008                     	;# 
   649  0009                     	;# 
   650  000A                     	;# 
   651  000B                     	;# 
   652  000C                     	;# 
   653  000D                     	;# 
   654  000E                     	;# 
   655  0010                     	;# 
   656  0011                     	;# 
   657  0012                     	;# 
   658  0015                     	;# 
   659  0016                     	;# 
   660  0016                     	;# 
   661  0017                     	;# 
   662  0018                     	;# 
   663  0019                     	;# 
   664  001A                     	;# 
   665  001B                     	;# 
   666  001C                     	;# 
   667  008C                     	;# 
   668  008D                     	;# 
   669  008E                     	;# 
   670  0090                     	;# 
   671  0091                     	;# 
   672  0092                     	;# 
   673  0095                     	;# 
   674  0096                     	;# 
   675  0097                     	;# 
   676  0099                     	;# 
   677  009A                     	;# 
   678  009B                     	;# 
   679  009B                     	;# 
   680  009C                     	;# 
   681  009D                     	;# 
   682  009E                     	;# 
   683  010C                     	;# 
   684  010D                     	;# 
   685  010E                     	;# 
   686  0116                     	;# 
   687  0117                     	;# 
   688  011D                     	;# 
   689  018C                     	;# 
   690  018D                     	;# 
   691  018E                     	;# 
   692  0191                     	;# 
   693  0191                     	;# 
   694  0192                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0197                     	;# 
   701  0199                     	;# 
   702  019A                     	;# 
   703  019B                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019C                     	;# 
   708  019C                     	;# 
   709  019D                     	;# 
   710  019E                     	;# 
   711  019F                     	;# 
   712  020D                     	;# 
   713  0210                     	;# 
   714  0211                     	;# 
   715  0211                     	;# 
   716  0212                     	;# 
   717  0212                     	;# 
   718  0213                     	;# 
   719  0213                     	;# 
   720  0214                     	;# 
   721  0214                     	;# 
   722  0215                     	;# 
   723  0215                     	;# 
   724  0215                     	;# 
   725  0216                     	;# 
   726  0216                     	;# 
   727  0217                     	;# 
   728  0217                     	;# 
   729  0291                     	;# 
   730  0291                     	;# 
   731  0292                     	;# 
   732  0293                     	;# 
   733  0298                     	;# 
   734  0298                     	;# 
   735  0299                     	;# 
   736  029A                     	;# 
   737  0394                     	;# 
   738  0395                     	;# 
   739  0396                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE9                     	;# 
   746  0FEA                     	;# 
   747  0FEB                     	;# 
   748  0FED                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000D                     	;# 
   765  000E                     	;# 
   766  0010                     	;# 
   767  0011                     	;# 
   768  0012                     	;# 
   769  0015                     	;# 
   770  0016                     	;# 
   771  0016                     	;# 
   772  0017                     	;# 
   773  0018                     	;# 
   774  0019                     	;# 
   775  001A                     	;# 
   776  001B                     	;# 
   777  001C                     	;# 
   778  008C                     	;# 
   779  008D                     	;# 
   780  008E                     	;# 
   781  0090                     	;# 
   782  0091                     	;# 
   783  0092                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  010C                     	;# 
   795  010D                     	;# 
   796  010E                     	;# 
   797  0116                     	;# 
   798  0117                     	;# 
   799  011D                     	;# 
   800  018C                     	;# 
   801  018D                     	;# 
   802  018E                     	;# 
   803  0191                     	;# 
   804  0191                     	;# 
   805  0192                     	;# 
   806  0193                     	;# 
   807  0193                     	;# 
   808  0194                     	;# 
   809  0195                     	;# 
   810  0196                     	;# 
   811  0197                     	;# 
   812  0199                     	;# 
   813  019A                     	;# 
   814  019B                     	;# 
   815  019B                     	;# 
   816  019B                     	;# 
   817  019B                     	;# 
   818  019C                     	;# 
   819  019C                     	;# 
   820  019D                     	;# 
   821  019E                     	;# 
   822  019F                     	;# 
   823  020D                     	;# 
   824  0210                     	;# 
   825  0211                     	;# 
   826  0211                     	;# 
   827  0212                     	;# 
   828  0212                     	;# 
   829  0213                     	;# 
   830  0213                     	;# 
   831  0214                     	;# 
   832  0214                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0216                     	;# 
   837  0216                     	;# 
   838  0217                     	;# 
   839  0217                     	;# 
   840  0291                     	;# 
   841  0291                     	;# 
   842  0292                     	;# 
   843  0293                     	;# 
   844  0298                     	;# 
   845  0298                     	;# 
   846  0299                     	;# 
   847  029A                     	;# 
   848  0394                     	;# 
   849  0395                     	;# 
   850  0396                     	;# 
   851  0FE4                     	;# 
   852  0FE5                     	;# 
   853  0FE6                     	;# 
   854  0FE7                     	;# 
   855  0FE8                     	;# 
   856  0FE9                     	;# 
   857  0FEA                     	;# 
   858  0FEB                     	;# 
   859  0FED                     	;# 
   860  0FEE                     	;# 
   861  0FEF                     	;# 
   862  0000                     	;# 
   863  0001                     	;# 
   864  0002                     	;# 
   865  0003                     	;# 
   866  0004                     	;# 
   867  0005                     	;# 
   868  0006                     	;# 
   869  0007                     	;# 
   870  0008                     	;# 
   871  0009                     	;# 
   872  000A                     	;# 
   873  000B                     	;# 
   874  000C                     	;# 
   875  000D                     	;# 
   876  000E                     	;# 
   877  0010                     	;# 
   878  0011                     	;# 
   879  0012                     	;# 
   880  0015                     	;# 
   881  0016                     	;# 
   882  0016                     	;# 
   883  0017                     	;# 
   884  0018                     	;# 
   885  0019                     	;# 
   886  001A                     	;# 
   887  001B                     	;# 
   888  001C                     	;# 
   889  008C                     	;# 
   890  008D                     	;# 
   891  008E                     	;# 
   892  0090                     	;# 
   893  0091                     	;# 
   894  0092                     	;# 
   895  0095                     	;# 
   896  0096                     	;# 
   897  0097                     	;# 
   898  0099                     	;# 
   899  009A                     	;# 
   900  009B                     	;# 
   901  009B                     	;# 
   902  009C                     	;# 
   903  009D                     	;# 
   904  009E                     	;# 
   905  010C                     	;# 
   906  010D                     	;# 
   907  010E                     	;# 
   908  0116                     	;# 
   909  0117                     	;# 
   910  011D                     	;# 
   911  018C                     	;# 
   912  018D                     	;# 
   913  018E                     	;# 
   914  0191                     	;# 
   915  0191                     	;# 
   916  0192                     	;# 
   917  0193                     	;# 
   918  0193                     	;# 
   919  0194                     	;# 
   920  0195                     	;# 
   921  0196                     	;# 
   922  0197                     	;# 
   923  0199                     	;# 
   924  019A                     	;# 
   925  019B                     	;# 
   926  019B                     	;# 
   927  019B                     	;# 
   928  019B                     	;# 
   929  019C                     	;# 
   930  019C                     	;# 
   931  019D                     	;# 
   932  019E                     	;# 
   933  019F                     	;# 
   934  020D                     	;# 
   935  0210                     	;# 
   936  0211                     	;# 
   937  0211                     	;# 
   938  0212                     	;# 
   939  0212                     	;# 
   940  0213                     	;# 
   941  0213                     	;# 
   942  0214                     	;# 
   943  0214                     	;# 
   944  0215                     	;# 
   945  0215                     	;# 
   946  0215                     	;# 
   947  0216                     	;# 
   948  0216                     	;# 
   949  0217                     	;# 
   950  0217                     	;# 
   951  0291                     	;# 
   952  0291                     	;# 
   953  0292                     	;# 
   954  0293                     	;# 
   955  0298                     	;# 
   956  0298                     	;# 
   957  0299                     	;# 
   958  029A                     	;# 
   959  0394                     	;# 
   960  0395                     	;# 
   961  0396                     	;# 
   962  0FE4                     	;# 
   963  0FE5                     	;# 
   964  0FE6                     	;# 
   965  0FE7                     	;# 
   966  0FE8                     	;# 
   967  0FE9                     	;# 
   968  0FEA                     	;# 
   969  0FEB                     	;# 
   970  0FED                     	;# 
   971  0FEE                     	;# 
   972  0FEF                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0008                     	;# 
   982  0009                     	;# 
   983  000A                     	;# 
   984  000B                     	;# 
   985  000C                     	;# 
   986  000D                     	;# 
   987  000E                     	;# 
   988  0010                     	;# 
   989  0011                     	;# 
   990  0012                     	;# 
   991  0015                     	;# 
   992  0016                     	;# 
   993  0016                     	;# 
   994  0017                     	;# 
   995  0018                     	;# 
   996  0019                     	;# 
   997  001A                     	;# 
   998  001B                     	;# 
   999  001C                     	;# 
  1000  008C                     	;# 
  1001  008D                     	;# 
  1002  008E                     	;# 
  1003  0090                     	;# 
  1004  0091                     	;# 
  1005  0092                     	;# 
  1006  0095                     	;# 
  1007  0096                     	;# 
  1008  0097                     	;# 
  1009  0099                     	;# 
  1010  009A                     	;# 
  1011  009B                     	;# 
  1012  009B                     	;# 
  1013  009C                     	;# 
  1014  009D                     	;# 
  1015  009E                     	;# 
  1016  010C                     	;# 
  1017  010D                     	;# 
  1018  010E                     	;# 
  1019  0116                     	;# 
  1020  0117                     	;# 
  1021  011D                     	;# 
  1022  018C                     	;# 
  1023  018D                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0194                     	;# 
  1031  0195                     	;# 
  1032  0196                     	;# 
  1033  0197                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020D                     	;# 
  1046  0210                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0298                     	;# 
  1067  0298                     	;# 
  1068  0299                     	;# 
  1069  029A                     	;# 
  1070  0394                     	;# 
  1071  0395                     	;# 
  1072  0396                     	;# 
  1073  0FE4                     	;# 
  1074  0FE5                     	;# 
  1075  0FE6                     	;# 
  1076  0FE7                     	;# 
  1077  0FE8                     	;# 
  1078  0FE9                     	;# 
  1079  0FEA                     	;# 
  1080  0FEB                     	;# 
  1081  0FED                     	;# 
  1082  0FEE                     	;# 
  1083  0FEF                     	;# 
  1084  0000                     	;# 
  1085  0001                     	;# 
  1086  0002                     	;# 
  1087  0003                     	;# 
  1088  0004                     	;# 
  1089  0005                     	;# 
  1090  0006                     	;# 
  1091  0007                     	;# 
  1092  0008                     	;# 
  1093  0009                     	;# 
  1094  000A                     	;# 
  1095  000B                     	;# 
  1096  000C                     	;# 
  1097  000D                     	;# 
  1098  000E                     	;# 
  1099  0010                     	;# 
  1100  0011                     	;# 
  1101  0012                     	;# 
  1102  0015                     	;# 
  1103  0016                     	;# 
  1104  0016                     	;# 
  1105  0017                     	;# 
  1106  0018                     	;# 
  1107  0019                     	;# 
  1108  001A                     	;# 
  1109  001B                     	;# 
  1110  001C                     	;# 
  1111  008C                     	;# 
  1112  008D                     	;# 
  1113  008E                     	;# 
  1114  0090                     	;# 
  1115  0091                     	;# 
  1116  0092                     	;# 
  1117  0095                     	;# 
  1118  0096                     	;# 
  1119  0097                     	;# 
  1120  0099                     	;# 
  1121  009A                     	;# 
  1122  009B                     	;# 
  1123  009B                     	;# 
  1124  009C                     	;# 
  1125  009D                     	;# 
  1126  009E                     	;# 
  1127  010C                     	;# 
  1128  010D                     	;# 
  1129  010E                     	;# 
  1130  0116                     	;# 
  1131  0117                     	;# 
  1132  011D                     	;# 
  1133  018C                     	;# 
  1134  018D                     	;# 
  1135  018E                     	;# 
  1136  0191                     	;# 
  1137  0191                     	;# 
  1138  0192                     	;# 
  1139  0193                     	;# 
  1140  0193                     	;# 
  1141  0194                     	;# 
  1142  0195                     	;# 
  1143  0196                     	;# 
  1144  0197                     	;# 
  1145  0199                     	;# 
  1146  019A                     	;# 
  1147  019B                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019C                     	;# 
  1152  019C                     	;# 
  1153  019D                     	;# 
  1154  019E                     	;# 
  1155  019F                     	;# 
  1156  020D                     	;# 
  1157  0210                     	;# 
  1158  0211                     	;# 
  1159  0211                     	;# 
  1160  0212                     	;# 
  1161  0212                     	;# 
  1162  0213                     	;# 
  1163  0213                     	;# 
  1164  0214                     	;# 
  1165  0214                     	;# 
  1166  0215                     	;# 
  1167  0215                     	;# 
  1168  0215                     	;# 
  1169  0216                     	;# 
  1170  0216                     	;# 
  1171  0217                     	;# 
  1172  0217                     	;# 
  1173  0291                     	;# 
  1174  0291                     	;# 
  1175  0292                     	;# 
  1176  0293                     	;# 
  1177  0298                     	;# 
  1178  0298                     	;# 
  1179  0299                     	;# 
  1180  029A                     	;# 
  1181  0394                     	;# 
  1182  0395                     	;# 
  1183  0396                     	;# 
  1184  0FE4                     	;# 
  1185  0FE5                     	;# 
  1186  0FE6                     	;# 
  1187  0FE7                     	;# 
  1188  0FE8                     	;# 
  1189  0FE9                     	;# 
  1190  0FEA                     	;# 
  1191  0FEB                     	;# 
  1192  0FED                     	;# 
  1193  0FEE                     	;# 
  1194  0FEF                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0008                     	;# 
  1204  0009                     	;# 
  1205  000A                     	;# 
  1206  000B                     	;# 
  1207  000C                     	;# 
  1208  000D                     	;# 
  1209  000E                     	;# 
  1210  0010                     	;# 
  1211  0011                     	;# 
  1212  0012                     	;# 
  1213  0015                     	;# 
  1214  0016                     	;# 
  1215  0016                     	;# 
  1216  0017                     	;# 
  1217  0018                     	;# 
  1218  0019                     	;# 
  1219  001A                     	;# 
  1220  001B                     	;# 
  1221  001C                     	;# 
  1222  008C                     	;# 
  1223  008D                     	;# 
  1224  008E                     	;# 
  1225  0090                     	;# 
  1226  0091                     	;# 
  1227  0092                     	;# 
  1228  0095                     	;# 
  1229  0096                     	;# 
  1230  0097                     	;# 
  1231  0099                     	;# 
  1232  009A                     	;# 
  1233  009B                     	;# 
  1234  009B                     	;# 
  1235  009C                     	;# 
  1236  009D                     	;# 
  1237  009E                     	;# 
  1238  010C                     	;# 
  1239  010D                     	;# 
  1240  010E                     	;# 
  1241  0116                     	;# 
  1242  0117                     	;# 
  1243  011D                     	;# 
  1244  018C                     	;# 
  1245  018D                     	;# 
  1246  018E                     	;# 
  1247  0191                     	;# 
  1248  0191                     	;# 
  1249  0192                     	;# 
  1250  0193                     	;# 
  1251  0193                     	;# 
  1252  0194                     	;# 
  1253  0195                     	;# 
  1254  0196                     	;# 
  1255  0197                     	;# 
  1256  0199                     	;# 
  1257  019A                     	;# 
  1258  019B                     	;# 
  1259  019B                     	;# 
  1260  019B                     	;# 
  1261  019B                     	;# 
  1262  019C                     	;# 
  1263  019C                     	;# 
  1264  019D                     	;# 
  1265  019E                     	;# 
  1266  019F                     	;# 
  1267  020D                     	;# 
  1268  0210                     	;# 
  1269  0211                     	;# 
  1270  0211                     	;# 
  1271  0212                     	;# 
  1272  0212                     	;# 
  1273  0213                     	;# 
  1274  0213                     	;# 
  1275  0214                     	;# 
  1276  0214                     	;# 
  1277  0215                     	;# 
  1278  0215                     	;# 
  1279  0215                     	;# 
  1280  0216                     	;# 
  1281  0216                     	;# 
  1282  0217                     	;# 
  1283  0217                     	;# 
  1284  0291                     	;# 
  1285  0291                     	;# 
  1286  0292                     	;# 
  1287  0293                     	;# 
  1288  0298                     	;# 
  1289  0298                     	;# 
  1290  0299                     	;# 
  1291  029A                     	;# 
  1292  0394                     	;# 
  1293  0395                     	;# 
  1294  0396                     	;# 
  1295  0FE4                     	;# 
  1296  0FE5                     	;# 
  1297  0FE6                     	;# 
  1298  0FE7                     	;# 
  1299  0FE8                     	;# 
  1300  0FE9                     	;# 
  1301  0FEA                     	;# 
  1302  0FEB                     	;# 
  1303  0FED                     	;# 
  1304  0FEE                     	;# 
  1305  0FEF                     	;# 
  1306  0000                     	;# 
  1307  0001                     	;# 
  1308  0002                     	;# 
  1309  0003                     	;# 
  1310  0004                     	;# 
  1311  0005                     	;# 
  1312  0006                     	;# 
  1313  0007                     	;# 
  1314  0008                     	;# 
  1315  0009                     	;# 
  1316  000A                     	;# 
  1317  000B                     	;# 
  1318  000C                     	;# 
  1319  000D                     	;# 
  1320  000E                     	;# 
  1321  0010                     	;# 
  1322  0011                     	;# 
  1323  0012                     	;# 
  1324  0015                     	;# 
  1325  0016                     	;# 
  1326  0016                     	;# 
  1327  0017                     	;# 
  1328  0018                     	;# 
  1329  0019                     	;# 
  1330  001A                     	;# 
  1331  001B                     	;# 
  1332  001C                     	;# 
  1333  008C                     	;# 
  1334  008D                     	;# 
  1335  008E                     	;# 
  1336  0090                     	;# 
  1337  0091                     	;# 
  1338  0092                     	;# 
  1339  0095                     	;# 
  1340  0096                     	;# 
  1341  0097                     	;# 
  1342  0099                     	;# 
  1343  009A                     	;# 
  1344  009B                     	;# 
  1345  009B                     	;# 
  1346  009C                     	;# 
  1347  009D                     	;# 
  1348  009E                     	;# 
  1349  010C                     	;# 
  1350  010D                     	;# 
  1351  010E                     	;# 
  1352  0116                     	;# 
  1353  0117                     	;# 
  1354  011D                     	;# 
  1355  018C                     	;# 
  1356  018D                     	;# 
  1357  018E                     	;# 
  1358  0191                     	;# 
  1359  0191                     	;# 
  1360  0192                     	;# 
  1361  0193                     	;# 
  1362  0193                     	;# 
  1363  0194                     	;# 
  1364  0195                     	;# 
  1365  0196                     	;# 
  1366  0197                     	;# 
  1367  0199                     	;# 
  1368  019A                     	;# 
  1369  019B                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019C                     	;# 
  1374  019C                     	;# 
  1375  019D                     	;# 
  1376  019E                     	;# 
  1377  019F                     	;# 
  1378  020D                     	;# 
  1379  0210                     	;# 
  1380  0211                     	;# 
  1381  0211                     	;# 
  1382  0212                     	;# 
  1383  0212                     	;# 
  1384  0213                     	;# 
  1385  0213                     	;# 
  1386  0214                     	;# 
  1387  0214                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0215                     	;# 
  1391  0216                     	;# 
  1392  0216                     	;# 
  1393  0217                     	;# 
  1394  0217                     	;# 
  1395  0291                     	;# 
  1396  0291                     	;# 
  1397  0292                     	;# 
  1398  0293                     	;# 
  1399  0298                     	;# 
  1400  0298                     	;# 
  1401  0299                     	;# 
  1402  029A                     	;# 
  1403  0394                     	;# 
  1404  0395                     	;# 
  1405  0396                     	;# 
  1406  0FE4                     	;# 
  1407  0FE5                     	;# 
  1408  0FE6                     	;# 
  1409  0FE7                     	;# 
  1410  0FE8                     	;# 
  1411  0FE9                     	;# 
  1412  0FEA                     	;# 
  1413  0FEB                     	;# 
  1414  0FED                     	;# 
  1415  0FEE                     	;# 
  1416  0FEF                     	;# 
  1417  0000                     	;# 
  1418  0001                     	;# 
  1419  0002                     	;# 
  1420  0003                     	;# 
  1421  0004                     	;# 
  1422  0005                     	;# 
  1423  0006                     	;# 
  1424  0007                     	;# 
  1425  0008                     	;# 
  1426  0009                     	;# 
  1427  000A                     	;# 
  1428  000B                     	;# 
  1429  000C                     	;# 
  1430  000D                     	;# 
  1431  000E                     	;# 
  1432  0010                     	;# 
  1433  0011                     	;# 
  1434  0012                     	;# 
  1435  0015                     	;# 
  1436  0016                     	;# 
  1437  0016                     	;# 
  1438  0017                     	;# 
  1439  0018                     	;# 
  1440  0019                     	;# 
  1441  001A                     	;# 
  1442  001B                     	;# 
  1443  001C                     	;# 
  1444  008C                     	;# 
  1445  008D                     	;# 
  1446  008E                     	;# 
  1447  0090                     	;# 
  1448  0091                     	;# 
  1449  0092                     	;# 
  1450  0095                     	;# 
  1451  0096                     	;# 
  1452  0097                     	;# 
  1453  0099                     	;# 
  1454  009A                     	;# 
  1455  009B                     	;# 
  1456  009B                     	;# 
  1457  009C                     	;# 
  1458  009D                     	;# 
  1459  009E                     	;# 
  1460  010C                     	;# 
  1461  010D                     	;# 
  1462  010E                     	;# 
  1463  0116                     	;# 
  1464  0117                     	;# 
  1465  011D                     	;# 
  1466  018C                     	;# 
  1467  018D                     	;# 
  1468  018E                     	;# 
  1469  0191                     	;# 
  1470  0191                     	;# 
  1471  0192                     	;# 
  1472  0193                     	;# 
  1473  0193                     	;# 
  1474  0194                     	;# 
  1475  0195                     	;# 
  1476  0196                     	;# 
  1477  0197                     	;# 
  1478  0199                     	;# 
  1479  019A                     	;# 
  1480  019B                     	;# 
  1481  019B                     	;# 
  1482  019B                     	;# 
  1483  019B                     	;# 
  1484  019C                     	;# 
  1485  019C                     	;# 
  1486  019D                     	;# 
  1487  019E                     	;# 
  1488  019F                     	;# 
  1489  020D                     	;# 
  1490  0210                     	;# 
  1491  0211                     	;# 
  1492  0211                     	;# 
  1493  0212                     	;# 
  1494  0212                     	;# 
  1495  0213                     	;# 
  1496  0213                     	;# 
  1497  0214                     	;# 
  1498  0214                     	;# 
  1499  0215                     	;# 
  1500  0215                     	;# 
  1501  0215                     	;# 
  1502  0216                     	;# 
  1503  0216                     	;# 
  1504  0217                     	;# 
  1505  0217                     	;# 
  1506  0291                     	;# 
  1507  0291                     	;# 
  1508  0292                     	;# 
  1509  0293                     	;# 
  1510  0298                     	;# 
  1511  0298                     	;# 
  1512  0299                     	;# 
  1513  029A                     	;# 
  1514  0394                     	;# 
  1515  0395                     	;# 
  1516  0396                     	;# 
  1517  0FE4                     	;# 
  1518  0FE5                     	;# 
  1519  0FE6                     	;# 
  1520  0FE7                     	;# 
  1521  0FE8                     	;# 
  1522  0FE9                     	;# 
  1523  0FEA                     	;# 
  1524  0FEB                     	;# 
  1525  0FED                     	;# 
  1526  0FEE                     	;# 
  1527  0FEF                     	;# 
  1528  0000                     	;# 
  1529  0001                     	;# 
  1530  0002                     	;# 
  1531  0003                     	;# 
  1532  0004                     	;# 
  1533  0005                     	;# 
  1534  0006                     	;# 
  1535  0007                     	;# 
  1536  0008                     	;# 
  1537  0009                     	;# 
  1538  000A                     	;# 
  1539  000B                     	;# 
  1540  000C                     	;# 
  1541  000D                     	;# 
  1542  000E                     	;# 
  1543  0010                     	;# 
  1544  0011                     	;# 
  1545  0012                     	;# 
  1546  0015                     	;# 
  1547  0016                     	;# 
  1548  0016                     	;# 
  1549  0017                     	;# 
  1550  0018                     	;# 
  1551  0019                     	;# 
  1552  001A                     	;# 
  1553  001B                     	;# 
  1554  001C                     	;# 
  1555  008C                     	;# 
  1556  008D                     	;# 
  1557  008E                     	;# 
  1558  0090                     	;# 
  1559  0091                     	;# 
  1560  0092                     	;# 
  1561  0095                     	;# 
  1562  0096                     	;# 
  1563  0097                     	;# 
  1564  0099                     	;# 
  1565  009A                     	;# 
  1566  009B                     	;# 
  1567  009B                     	;# 
  1568  009C                     	;# 
  1569  009D                     	;# 
  1570  009E                     	;# 
  1571  010C                     	;# 
  1572  010D                     	;# 
  1573  010E                     	;# 
  1574  0116                     	;# 
  1575  0117                     	;# 
  1576  011D                     	;# 
  1577  018C                     	;# 
  1578  018D                     	;# 
  1579  018E                     	;# 
  1580  0191                     	;# 
  1581  0191                     	;# 
  1582  0192                     	;# 
  1583  0193                     	;# 
  1584  0193                     	;# 
  1585  0194                     	;# 
  1586  0195                     	;# 
  1587  0196                     	;# 
  1588  0197                     	;# 
  1589  0199                     	;# 
  1590  019A                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019C                     	;# 
  1596  019C                     	;# 
  1597  019D                     	;# 
  1598  019E                     	;# 
  1599  019F                     	;# 
  1600  020D                     	;# 
  1601  0210                     	;# 
  1602  0211                     	;# 
  1603  0211                     	;# 
  1604  0212                     	;# 
  1605  0212                     	;# 
  1606  0213                     	;# 
  1607  0213                     	;# 
  1608  0214                     	;# 
  1609  0214                     	;# 
  1610  0215                     	;# 
  1611  0215                     	;# 
  1612  0215                     	;# 
  1613  0216                     	;# 
  1614  0216                     	;# 
  1615  0217                     	;# 
  1616  0217                     	;# 
  1617  0291                     	;# 
  1618  0291                     	;# 
  1619  0292                     	;# 
  1620  0293                     	;# 
  1621  0298                     	;# 
  1622  0298                     	;# 
  1623  0299                     	;# 
  1624  029A                     	;# 
  1625  0394                     	;# 
  1626  0395                     	;# 
  1627  0396                     	;# 
  1628  0FE4                     	;# 
  1629  0FE5                     	;# 
  1630  0FE6                     	;# 
  1631  0FE7                     	;# 
  1632  0FE8                     	;# 
  1633  0FE9                     	;# 
  1634  0FEA                     	;# 
  1635  0FEB                     	;# 
  1636  0FED                     	;# 
  1637  0FEE                     	;# 
  1638  0FEF                     	;# 
  1639  0000                     	;# 
  1640  0001                     	;# 
  1641  0002                     	;# 
  1642  0003                     	;# 
  1643  0004                     	;# 
  1644  0005                     	;# 
  1645  0006                     	;# 
  1646  0007                     	;# 
  1647  0008                     	;# 
  1648  0009                     	;# 
  1649  000A                     	;# 
  1650  000B                     	;# 
  1651  000C                     	;# 
  1652  000D                     	;# 
  1653  000E                     	;# 
  1654  0010                     	;# 
  1655  0011                     	;# 
  1656  0012                     	;# 
  1657  0015                     	;# 
  1658  0016                     	;# 
  1659  0016                     	;# 
  1660  0017                     	;# 
  1661  0018                     	;# 
  1662  0019                     	;# 
  1663  001A                     	;# 
  1664  001B                     	;# 
  1665  001C                     	;# 
  1666  008C                     	;# 
  1667  008D                     	;# 
  1668  008E                     	;# 
  1669  0090                     	;# 
  1670  0091                     	;# 
  1671  0092                     	;# 
  1672  0095                     	;# 
  1673  0096                     	;# 
  1674  0097                     	;# 
  1675  0099                     	;# 
  1676  009A                     	;# 
  1677  009B                     	;# 
  1678  009B                     	;# 
  1679  009C                     	;# 
  1680  009D                     	;# 
  1681  009E                     	;# 
  1682  010C                     	;# 
  1683  010D                     	;# 
  1684  010E                     	;# 
  1685  0116                     	;# 
  1686  0117                     	;# 
  1687  011D                     	;# 
  1688  018C                     	;# 
  1689  018D                     	;# 
  1690  018E                     	;# 
  1691  0191                     	;# 
  1692  0191                     	;# 
  1693  0192                     	;# 
  1694  0193                     	;# 
  1695  0193                     	;# 
  1696  0194                     	;# 
  1697  0195                     	;# 
  1698  0196                     	;# 
  1699  0197                     	;# 
  1700  0199                     	;# 
  1701  019A                     	;# 
  1702  019B                     	;# 
  1703  019B                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019C                     	;# 
  1708  019D                     	;# 
  1709  019E                     	;# 
  1710  019F                     	;# 
  1711  020D                     	;# 
  1712  0210                     	;# 
  1713  0211                     	;# 
  1714  0211                     	;# 
  1715  0212                     	;# 
  1716  0212                     	;# 
  1717  0213                     	;# 
  1718  0213                     	;# 
  1719  0214                     	;# 
  1720  0214                     	;# 
  1721  0215                     	;# 
  1722  0215                     	;# 
  1723  0215                     	;# 
  1724  0216                     	;# 
  1725  0216                     	;# 
  1726  0217                     	;# 
  1727  0217                     	;# 
  1728  0291                     	;# 
  1729  0291                     	;# 
  1730  0292                     	;# 
  1731  0293                     	;# 
  1732  0298                     	;# 
  1733  0298                     	;# 
  1734  0299                     	;# 
  1735  029A                     	;# 
  1736  0394                     	;# 
  1737  0395                     	;# 
  1738  0396                     	;# 
  1739  0FE4                     	;# 
  1740  0FE5                     	;# 
  1741  0FE6                     	;# 
  1742  0FE7                     	;# 
  1743  0FE8                     	;# 
  1744  0FE9                     	;# 
  1745  0FEA                     	;# 
  1746  0FEB                     	;# 
  1747  0FED                     	;# 
  1748  0FEE                     	;# 
  1749  0FEF                     	;# 
  1750  0000                     	;# 
  1751  0001                     	;# 
  1752  0002                     	;# 
  1753  0003                     	;# 
  1754  0004                     	;# 
  1755  0005                     	;# 
  1756  0006                     	;# 
  1757  0007                     	;# 
  1758  0008                     	;# 
  1759  0009                     	;# 
  1760  000A                     	;# 
  1761  000B                     	;# 
  1762  000C                     	;# 
  1763  000D                     	;# 
  1764  000E                     	;# 
  1765  0010                     	;# 
  1766  0011                     	;# 
  1767  0012                     	;# 
  1768  0015                     	;# 
  1769  0016                     	;# 
  1770  0016                     	;# 
  1771  0017                     	;# 
  1772  0018                     	;# 
  1773  0019                     	;# 
  1774  001A                     	;# 
  1775  001B                     	;# 
  1776  001C                     	;# 
  1777  008C                     	;# 
  1778  008D                     	;# 
  1779  008E                     	;# 
  1780  0090                     	;# 
  1781  0091                     	;# 
  1782  0092                     	;# 
  1783  0095                     	;# 
  1784  0096                     	;# 
  1785  0097                     	;# 
  1786  0099                     	;# 
  1787  009A                     	;# 
  1788  009B                     	;# 
  1789  009B                     	;# 
  1790  009C                     	;# 
  1791  009D                     	;# 
  1792  009E                     	;# 
  1793  010C                     	;# 
  1794  010D                     	;# 
  1795  010E                     	;# 
  1796  0116                     	;# 
  1797  0117                     	;# 
  1798  011D                     	;# 
  1799  018C                     	;# 
  1800  018D                     	;# 
  1801  018E                     	;# 
  1802  0191                     	;# 
  1803  0191                     	;# 
  1804  0192                     	;# 
  1805  0193                     	;# 
  1806  0193                     	;# 
  1807  0194                     	;# 
  1808  0195                     	;# 
  1809  0196                     	;# 
  1810  0197                     	;# 
  1811  0199                     	;# 
  1812  019A                     	;# 
  1813  019B                     	;# 
  1814  019B                     	;# 
  1815  019B                     	;# 
  1816  019B                     	;# 
  1817  019C                     	;# 
  1818  019C                     	;# 
  1819  019D                     	;# 
  1820  019E                     	;# 
  1821  019F                     	;# 
  1822  020D                     	;# 
  1823  0210                     	;# 
  1824  0211                     	;# 
  1825  0211                     	;# 
  1826  0212                     	;# 
  1827  0212                     	;# 
  1828  0213                     	;# 
  1829  0213                     	;# 
  1830  0214                     	;# 
  1831  0214                     	;# 
  1832  0215                     	;# 
  1833  0215                     	;# 
  1834  0215                     	;# 
  1835  0216                     	;# 
  1836  0216                     	;# 
  1837  0217                     	;# 
  1838  0217                     	;# 
  1839  0291                     	;# 
  1840  0291                     	;# 
  1841  0292                     	;# 
  1842  0293                     	;# 
  1843  0298                     	;# 
  1844  0298                     	;# 
  1845  0299                     	;# 
  1846  029A                     	;# 
  1847  0394                     	;# 
  1848  0395                     	;# 
  1849  0396                     	;# 
  1850  0FE4                     	;# 
  1851  0FE5                     	;# 
  1852  0FE6                     	;# 
  1853  0FE7                     	;# 
  1854  0FE8                     	;# 
  1855  0FE9                     	;# 
  1856  0FEA                     	;# 
  1857  0FEB                     	;# 
  1858  0FED                     	;# 
  1859  0FEE                     	;# 
  1860  0FEF                     	;# 
  1861  0000                     	;# 
  1862  0001                     	;# 
  1863  0002                     	;# 
  1864  0003                     	;# 
  1865  0004                     	;# 
  1866  0005                     	;# 
  1867  0006                     	;# 
  1868  0007                     	;# 
  1869  0008                     	;# 
  1870  0009                     	;# 
  1871  000A                     	;# 
  1872  000B                     	;# 
  1873  000C                     	;# 
  1874  000D                     	;# 
  1875  000E                     	;# 
  1876  0010                     	;# 
  1877  0011                     	;# 
  1878  0012                     	;# 
  1879  0015                     	;# 
  1880  0016                     	;# 
  1881  0016                     	;# 
  1882  0017                     	;# 
  1883  0018                     	;# 
  1884  0019                     	;# 
  1885  001A                     	;# 
  1886  001B                     	;# 
  1887  001C                     	;# 
  1888  008C                     	;# 
  1889  008D                     	;# 
  1890  008E                     	;# 
  1891  0090                     	;# 
  1892  0091                     	;# 
  1893  0092                     	;# 
  1894  0095                     	;# 
  1895  0096                     	;# 
  1896  0097                     	;# 
  1897  0099                     	;# 
  1898  009A                     	;# 
  1899  009B                     	;# 
  1900  009B                     	;# 
  1901  009C                     	;# 
  1902  009D                     	;# 
  1903  009E                     	;# 
  1904  010C                     	;# 
  1905  010D                     	;# 
  1906  010E                     	;# 
  1907  0116                     	;# 
  1908  0117                     	;# 
  1909  011D                     	;# 
  1910  018C                     	;# 
  1911  018D                     	;# 
  1912  018E                     	;# 
  1913  0191                     	;# 
  1914  0191                     	;# 
  1915  0192                     	;# 
  1916  0193                     	;# 
  1917  0193                     	;# 
  1918  0194                     	;# 
  1919  0195                     	;# 
  1920  0196                     	;# 
  1921  0197                     	;# 
  1922  0199                     	;# 
  1923  019A                     	;# 
  1924  019B                     	;# 
  1925  019B                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019C                     	;# 
  1929  019C                     	;# 
  1930  019D                     	;# 
  1931  019E                     	;# 
  1932  019F                     	;# 
  1933  020D                     	;# 
  1934  0210                     	;# 
  1935  0211                     	;# 
  1936  0211                     	;# 
  1937  0212                     	;# 
  1938  0212                     	;# 
  1939  0213                     	;# 
  1940  0213                     	;# 
  1941  0214                     	;# 
  1942  0214                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0215                     	;# 
  1946  0216                     	;# 
  1947  0216                     	;# 
  1948  0217                     	;# 
  1949  0217                     	;# 
  1950  0291                     	;# 
  1951  0291                     	;# 
  1952  0292                     	;# 
  1953  0293                     	;# 
  1954  0298                     	;# 
  1955  0298                     	;# 
  1956  0299                     	;# 
  1957  029A                     	;# 
  1958  0394                     	;# 
  1959  0395                     	;# 
  1960  0396                     	;# 
  1961  0FE4                     	;# 
  1962  0FE5                     	;# 
  1963  0FE6                     	;# 
  1964  0FE7                     	;# 
  1965  0FE8                     	;# 
  1966  0FE9                     	;# 
  1967  0FEA                     	;# 
  1968  0FEB                     	;# 
  1969  0FED                     	;# 
  1970  0FEE                     	;# 
  1971  0FEF                     	;# 
  1972  0000                     	;# 
  1973  0001                     	;# 
  1974  0002                     	;# 
  1975  0003                     	;# 
  1976  0004                     	;# 
  1977  0005                     	;# 
  1978  0006                     	;# 
  1979  0007                     	;# 
  1980  0008                     	;# 
  1981  0009                     	;# 
  1982  000A                     	;# 
  1983  000B                     	;# 
  1984  000C                     	;# 
  1985  000D                     	;# 
  1986  000E                     	;# 
  1987  0010                     	;# 
  1988  0011                     	;# 
  1989  0012                     	;# 
  1990  0015                     	;# 
  1991  0016                     	;# 
  1992  0016                     	;# 
  1993  0017                     	;# 
  1994  0018                     	;# 
  1995  0019                     	;# 
  1996  001A                     	;# 
  1997  001B                     	;# 
  1998  001C                     	;# 
  1999  008C                     	;# 
  2000  008D                     	;# 
  2001  008E                     	;# 
  2002  0090                     	;# 
  2003  0091                     	;# 
  2004  0092                     	;# 
  2005  0095                     	;# 
  2006  0096                     	;# 
  2007  0097                     	;# 
  2008  0099                     	;# 
  2009  009A                     	;# 
  2010  009B                     	;# 
  2011  009B                     	;# 
  2012  009C                     	;# 
  2013  009D                     	;# 
  2014  009E                     	;# 
  2015  010C                     	;# 
  2016  010D                     	;# 
  2017  010E                     	;# 
  2018  0116                     	;# 
  2019  0117                     	;# 
  2020  011D                     	;# 
  2021  018C                     	;# 
  2022  018D                     	;# 
  2023  018E                     	;# 
  2024  0191                     	;# 
  2025  0191                     	;# 
  2026  0192                     	;# 
  2027  0193                     	;# 
  2028  0193                     	;# 
  2029  0194                     	;# 
  2030  0195                     	;# 
  2031  0196                     	;# 
  2032  0197                     	;# 
  2033  0199                     	;# 
  2034  019A                     	;# 
  2035  019B                     	;# 
  2036  019B                     	;# 
  2037  019B                     	;# 
  2038  019B                     	;# 
  2039  019C                     	;# 
  2040  019C                     	;# 
  2041  019D                     	;# 
  2042  019E                     	;# 
  2043  019F                     	;# 
  2044  020D                     	;# 
  2045  0210                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0216                     	;# 
  2058  0216                     	;# 
  2059  0217                     	;# 
  2060  0217                     	;# 
  2061  0291                     	;# 
  2062  0291                     	;# 
  2063  0292                     	;# 
  2064  0293                     	;# 
  2065  0298                     	;# 
  2066  0298                     	;# 
  2067  0299                     	;# 
  2068  029A                     	;# 
  2069  0394                     	;# 
  2070  0395                     	;# 
  2071  0396                     	;# 
  2072  0FE4                     	;# 
  2073  0FE5                     	;# 
  2074  0FE6                     	;# 
  2075  0FE7                     	;# 
  2076  0FE8                     	;# 
  2077  0FE9                     	;# 
  2078  0FEA                     	;# 
  2079  0FEB                     	;# 
  2080  0FED                     	;# 
  2081  0FEE                     	;# 
  2082  0FEF                     	;# 
  2083                           
  2084                           	psect	idataBANK1
  2085  0876                     __pidataBANK1:	
  2086                           
  2087                           ;initializer for Bq32k_Time_Init@F2018
  2088  0876  3401               	retlw	1
  2089  0877  3450               	retlw	80
  2090  0878  3423               	retlw	35
  2091  0879  3402               	retlw	2
  2092  087A  3408               	retlw	8
  2093  087B  3407               	retlw	7
  2094  087C  3416               	retlw	22
  2095  087D  3400               	retlw	0
  2096  087E  3400               	retlw	0
  2097  087F  3400               	retlw	0
  2098                           
  2099                           	psect	stringtext
  2100  1000                     __pstringtext:	
  2101  1000                     _Dis_TAB:	
  2102  1000  34D7               	retlw	215
  2103  1001  3450               	retlw	80
  2104  1002  34B5               	retlw	181
  2105  1003  34F1               	retlw	241
  2106  1004  3472               	retlw	114
  2107  1005  34E3               	retlw	227
  2108  1006  34E7               	retlw	231
  2109  1007  3451               	retlw	81
  2110  1008  34F7               	retlw	247
  2111  1009  34F3               	retlw	243
  2112  100A  3477               	retlw	119
  2113  100B  34E6               	retlw	230
  2114  100C  3487               	retlw	135
  2115  100D  34F4               	retlw	244
  2116  100E  34A7               	retlw	167
  2117  100F  3427               	retlw	39
  2118  1010  3457               	retlw	87
  2119  1011  3420               	retlw	32
  2120  1012  3420               	retlw	32
  2121  1013  3420               	retlw	32
  2122  1014  3420               	retlw	32
  2123  1015                     __end_of_Dis_TAB:	
  2124                           
  2125                           	psect	nvBANK1
  2126  00EF                     __pnvBANK1:	
  2127  00EF                     _timer0ReloadVal:	
  2128  00EF                     	ds	1
  2129  000B                     _INTCONbits	set	11
  2130  0011                     _PIR1bits	set	17
  2131  0015                     _TMR0	set	21
  2132  0067                     _RA7	set	103
  2133  0069                     _RB1	set	105
  2134  006B                     _RB3	set	107
  2135  006D                     _RB5	set	109
  2136  009D                     _ADCON0	set	157
  2137  009D                     _ADCON0bits	set	157
  2138  009E                     _ADCON1	set	158
  2139  009C                     _ADRESH	set	156
  2140  009B                     _ADRESL	set	155
  2141  0095                     _OPTION_REG	set	149
  2142  0095                     _OPTION_REGbits	set	149
  2143  0099                     _OSCCON	set	153
  2144  009A                     _OSCSTAT	set	154
  2145  008C                     _TRISA	set	140
  2146  008D                     _TRISB	set	141
  2147  008E                     _TRISC	set	142
  2148  04B8                     _SWDTEN	set	1208
  2149  0469                     _TRISB1	set	1129
  2150  046B                     _TRISB3	set	1131
  2151  04B9                     _WDTPS0	set	1209
  2152  04BA                     _WDTPS1	set	1210
  2153  04BB                     _WDTPS2	set	1211
  2154  04BC                     _WDTPS3	set	1212
  2155  04BD                     _WDTPS4	set	1213
  2156  011D                     _APFCON	set	285
  2157  0117                     _FVRCON	set	279
  2158  0117                     _FVRCONbits	set	279
  2159  010C                     _LATA	set	268
  2160  010D                     _LATB	set	269
  2161  010E                     _LATC	set	270
  2162  0860                     _LATA0	set	2144
  2163  0861                     _LATA1	set	2145
  2164  0862                     _LATA2	set	2146
  2165  0863                     _LATA3	set	2147
  2166  0864                     _LATA4	set	2148
  2167  0865                     _LATA5	set	2149
  2168  0866                     _LATA6	set	2150
  2169  0868                     _LATB0	set	2152
  2170  0869                     _LATB1	set	2153
  2171  0870                     _LATC0	set	2160
  2172  0871                     _LATC1	set	2161
  2173  0872                     _LATC2	set	2162
  2174  018C                     _ANSELA	set	396
  2175  018D                     _ANSELB	set	397
  2176  018E                     _ANSELC	set	398
  2177  019F                     _BAUDCON	set	415
  2178  0192                     _PMADRH	set	402
  2179  0191                     _PMADRL	set	401
  2180  0195                     _PMCON1bits	set	405
  2181  0196                     _PMCON2	set	406
  2182  0194                     _PMDATH	set	404
  2183  0193                     _PMDATL	set	403
  2184  0199                     _RCREG	set	409
  2185  019D                     _RCSTA	set	413
  2186  019D                     _RCSTAbits	set	413
  2187  019C                     _SPBRGH	set	412
  2188  019B                     _SPBRGL	set	411
  2189  019A                     _TXREG	set	410
  2190  019E                     _TXSTA	set	414
  2191  0212                     _SSP1ADD	set	530
  2192  0215                     _SSP1CON1	set	533
  2193  0215                     _SSP1CON1bits	set	533
  2194  0214                     _SSP1STAT	set	532
  2195  0214                     _SSP1STATbits	set	532
  2196  0211                     _SSPBUF	set	529
  2197  020D                     _WPUB	set	525
  2198  0210                     _WPUE	set	528
  2199                           
  2200                           ; #config settings
  2201  0000                     
  2202                           	psect	cinit
  2203  0015                     start_initialization:	
  2204  0015                     __initialization:	
  2205                           
  2206                           ; Clear objects allocated to COMMON
  2207  0015  01F8               	clrf	__pbssCOMMON& (0+127)
  2208  0016  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2209  0017  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2210                           
  2211                           ; Clear objects allocated to BANK0
  2212  0018  3065               	movlw	low __pbssBANK0
  2213  0019  0084               	movwf	4
  2214  001A  3000               	movlw	high __pbssBANK0
  2215  001B  0085               	movwf	5
  2216  001C  3009               	movlw	9
  2217  001D  3188  2057  3180   	fcall	clear_ram0
  2218                           
  2219                           ; Clear objects allocated to BANK1
  2220  0020  30A0               	movlw	low __pbssBANK1
  2221  0021  0084               	movwf	4
  2222  0022  3000               	movlw	high __pbssBANK1
  2223  0023  0085               	movwf	5
  2224  0024  3045               	movlw	69
  2225  0025  3188  2057  3180   	fcall	clear_ram0
  2226                           
  2227                           ; Clear objects allocated to BANK2
  2228  0028  3020               	movlw	low __pbssBANK2
  2229  0029  0084               	movwf	4
  2230  002A  3001               	movlw	high __pbssBANK2
  2231  002B  0085               	movwf	5
  2232  002C  3040               	movlw	64
  2233  002D  3188  2057  3180   	fcall	clear_ram0
  2234                           
  2235                           ; Initialize objects allocated to BANK1
  2236  0030  3076               	movlw	low __pidataBANK1
  2237  0031  0084               	movwf	4
  2238  0032  3088               	movlw	(high __pidataBANK1)| (0+128)
  2239  0033  0085               	movwf	5
  2240  0034  30E5               	movlw	low __pdataBANK1
  2241  0035  0086               	movwf	6
  2242  0036  3000               	movlw	high __pdataBANK1
  2243  0037  0087               	movwf	7
  2244  0038  300A               	movlw	10
  2245  0039  3188  2051         	fcall	init_ram
  2246  003B                     end_of_initialization:	
  2247                           ;End of C runtime variable initialization code
  2248                           
  2249  003B                     __end_of__initialization:	
  2250  003B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2251  003C  0020               	movlb	0
  2252  003D  3183  2BA9         	ljmp	_main	;jump to C main() function
  2253                           
  2254                           	psect	bssCOMMON
  2255  0078                     __pbssCOMMON:	
  2256  0078                     _CH2_temperature:	
  2257  0078                     	ds	2
  2258  007A                     _uch_cr0:	
  2259  007A                     	ds	1
  2260                           
  2261                           	psect	bssBANK0
  2262  0065                     __pbssBANK0:	
  2263  0065                     _temperature_value:	
  2264  0065                     	ds	4
  2265  0069                     _CH1_temperature:	
  2266  0069                     	ds	2
  2267  006B                     _Record_flag:	
  2268  006B                     	ds	1
  2269  006C                     _temperature_decimal:	
  2270  006C                     	ds	1
  2271  006D                     _time_count:	
  2272  006D                     	ds	1
  2273                           
  2274                           	psect	bssBANK1
  2275  00A0                     __pbssBANK1:	
  2276  00A0                     Two_Display@F2123:	
  2277  00A0                     	ds	4
  2278  00A4                     err_Display@F2126:	
  2279  00A4                     	ds	4
  2280  00A8                     time_Display@F2129:	
  2281  00A8                     	ds	4
  2282  00AC                     TMR0_ISR@CountCallBack:	
  2283  00AC                     	ds	2
  2284  00AE                     _Cur_Save_Index:	
  2285  00AE                     	ds	2
  2286  00B0                     _Cur_temperature:	
  2287  00B0                     	ds	2
  2288  00B2                     _temperature_int:	
  2289  00B2                     	ds	2
  2290  00B4                     _CH1_state:	
  2291  00B4                     	ds	1
  2292  00B5                     _CH2_state:	
  2293  00B5                     	ds	1
  2294  00B6                     _Cur_temperature_time_ch1:	
  2295  00B6                     	ds	1
  2296  00B7                     _Cur_temperature_time_ch2:	
  2297  00B7                     	ds	1
  2298  00B8                     _LongPressSec:	
  2299  00B8                     	ds	1
  2300  00B9                     _MAX31856Sec:	
  2301  00B9                     	ds	1
  2302  00BA                     _temperature_sign:	
  2303  00BA                     	ds	1
  2304  00BB                     _tmr_flag:	
  2305  00BB                     	ds	1
  2306  00BC                     _uch_cjth:	
  2307  00BC                     	ds	1
  2308  00BD                     _uch_cjtl:	
  2309  00BD                     	ds	1
  2310  00BE                     _uch_cr1:	
  2311  00BE                     	ds	1
  2312  00BF                     _uch_ltcbh:	
  2313  00BF                     	ds	1
  2314  00C0                     _uch_ltcbl:	
  2315  00C0                     	ds	1
  2316  00C1                     _uch_ltcbm:	
  2317  00C1                     	ds	1
  2318  00C2                     _uch_mask:	
  2319  00C2                     	ds	1
  2320  00C3                     _uch_sr:	
  2321  00C3                     	ds	1
  2322  00C4                     _uch_reg:	
  2323  00C4                     	ds	8
  2324  00CC                     _rtc_save_ch1:	
  2325  00CC                     	ds	7
  2326  00D3                     _rtc_save_ch2:	
  2327  00D3                     	ds	7
  2328  00DA                     _rtc_tm:	
  2329  00DA                     	ds	7
  2330  00E1                     _display_buff:	
  2331  00E1                     	ds	4
  2332                           
  2333                           	psect	dataBANK1
  2334  00E5                     __pdataBANK1:	
  2335  00E5                     Bq32k_Time_Init@F2018:	
  2336  00E5                     	ds	10
  2337                           
  2338                           	psect	bssBANK2
  2339  0120                     __pbssBANK2:	
  2340  0120                     _Flash_buff:	
  2341  0120                     	ds	64
  2342                           
  2343                           	psect	clrtext
  2344  0857                     clear_ram0:	
  2345                           ;	Called with FSR0 containing the base address, and
  2346                           ;	WREG with the size to clear
  2347                           
  2348  0857  0064               	clrwdt	;clear the watchdog before getting into this loop
  2349  0858                     clrloop0:	
  2350  0858  0180               	clrf	0	;clear RAM location pointed to by FSR
  2351  0859  3101               	addfsr 0,1
  2352  085A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2353  085B  2858               	goto	clrloop0	;have we reached the end yet?
  2354  085C  3400               	retlw	0	;all done for this memory range, return
  2355                           
  2356                           	psect	inittext
  2357  0851                     init_ram:	
  2358  0851  00FE               	movwf	126
  2359  0852                     initloop:	
  2360  0852  0012               	moviw fsr0++
  2361  0853  001E               	movwi fsr1++
  2362  0854  0BFE               	decfsz	126,f
  2363  0855  2852               	goto	initloop
  2364  0856  3400               	retlw	0
  2365                           
  2366                           	psect	cstackBANK2
  2367  0160                     __pcstackBANK2:	
  2368  0160                     main@data_temp:	
  2369                           
  2370                           ; 2 bytes @ 0x0
  2371  0160                     	ds	2
  2372  0162                     main@i:	
  2373                           
  2374                           ; 1 bytes @ 0x2
  2375  0162                     	ds	1
  2376  0163                     main@bat_data:	
  2377                           
  2378                           ; 2 bytes @ 0x3
  2379  0163                     	ds	2
  2380                           
  2381                           	psect	cstackCOMMON
  2382  0070                     __pcstackCOMMON:	
  2383  0070                     ?_OSCILLATOR_Initialize:	
  2384  0070                     ?_SPI_Initialize:	
  2385                           ; 1 bytes @ 0x0
  2386                           
  2387  0070                     ?_EUSART_Initialize:	
  2388                           ; 1 bytes @ 0x0
  2389                           
  2390  0070                     ?_ADC_Initialize:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393  0070                     ?_FVR_Initialize:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396  0070                     ?_TMR0_Initialize:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0070                     ?_TMR0_CallBack:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0070                     ??_TMR0_CallBack:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0070                     ?_Bq32k_Time_Init:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_SendCmd_1621:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ?_Serach_Flash_Head:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?_temperature_process:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ?_Key_Process:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ?_Save_process:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ?_Sleep_process:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?_Calculate_Time:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ?_Tc_Display:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ?_err_Display:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?_Two_Display:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ?_time_Display:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ?_Bq32k_Rtc_Read_Time:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?_Set_start_flag:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ?_Write_Flash_head:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ?_Save_Write_time:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ?_Set_finish_flag:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     ?_Write_Flash_finish:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0070                     ?_bcd2bin:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0070                     ?_Step_control:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0070                     ?_PIN_MANAGER_Initialize:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0070                     ?_SYSTEM_Initialize:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_SPI_Exchange8bit:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ?_EUSART_Write:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ?_TMR0_ISR:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_INTERRUPT_InterruptManager:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ?_main:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ?_maxim_31856_read_register:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?_maxim_start_conversion:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?_maxim_clear_fault_status:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?_tc_temperature_trans:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ?_one_temperature_trans:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ?_temperature_display:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     ?_I2C_Start:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     ?_I2C_Send_Byte:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0070                     ?_I2C_Receive_Byte:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0070                     ?_I2C_Stop:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0070                     ?_Key_Scan:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519                           
  2520                           ; 1 bytes @ 0x0
  2521  0070                     	ds	1
  2522  0071                     ??_TMR0_ISR:	
  2523                           
  2524                           ; 1 bytes @ 0x1
  2525  0071                     	ds	1
  2526  0072                     ??_INTERRUPT_InterruptManager:	
  2527                           
  2528                           ; 1 bytes @ 0x2
  2529  0072                     	ds	1
  2530  0073                     ??_OSCILLATOR_Initialize:	
  2531  0073                     ??_SPI_Initialize:	
  2532                           ; 1 bytes @ 0x3
  2533                           
  2534  0073                     ??_EUSART_Initialize:	
  2535                           ; 1 bytes @ 0x3
  2536                           
  2537  0073                     ??_ADC_Initialize:	
  2538                           ; 1 bytes @ 0x3
  2539                           
  2540  0073                     ??_FVR_Initialize:	
  2541                           ; 1 bytes @ 0x3
  2542                           
  2543  0073                     ??_TMR0_Initialize:	
  2544                           ; 1 bytes @ 0x3
  2545                           
  2546  0073                     ?_FLASH_EraseBlock:	
  2547                           ; 1 bytes @ 0x3
  2548                           
  2549  0073                     ?_memset:	
  2550                           ; 1 bytes @ 0x3
  2551                           
  2552  0073                     ??_Set_start_flag:	
  2553                           ; 1 bytes @ 0x3
  2554                           
  2555  0073                     ??_Set_finish_flag:	
  2556                           ; 1 bytes @ 0x3
  2557                           
  2558  0073                     ??_Step_control:	
  2559                           ; 1 bytes @ 0x3
  2560                           
  2561  0073                     ??_PIN_MANAGER_Initialize:	
  2562                           ; 1 bytes @ 0x3
  2563                           
  2564  0073                     ??_SPI_Exchange8bit:	
  2565                           ; 1 bytes @ 0x3
  2566                           
  2567  0073                     ??_EUSART_Write:	
  2568                           ; 1 bytes @ 0x3
  2569                           
  2570  0073                     ?_SendBit_1621:	
  2571                           ; 1 bytes @ 0x3
  2572                           
  2573  0073                     ?_SendDataBit_1621:	
  2574                           ; 1 bytes @ 0x3
  2575                           
  2576  0073                     ??_I2C_Start:	
  2577                           ; 1 bytes @ 0x3
  2578                           
  2579  0073                     ??_I2C_Send_Byte:	
  2580                           ; 1 bytes @ 0x3
  2581                           
  2582  0073                     ??_I2C_Receive_Byte:	
  2583                           ; 1 bytes @ 0x3
  2584                           
  2585  0073                     ??_I2C_Stop:	
  2586                           ; 1 bytes @ 0x3
  2587                           
  2588  0073                     ??_Key_Scan:	
  2589                           ; 1 bytes @ 0x3
  2590                           
  2591  0073                     ?___bmul:	
  2592                           ; 1 bytes @ 0x3
  2593                           
  2594  0073                     ?_FLASH_ReadWord:	
  2595                           ; 1 bytes @ 0x3
  2596                           
  2597  0073                     ?_ADC_GetConversion:	
  2598                           ; 2 bytes @ 0x3
  2599                           
  2600  0073                     ?___wmul:	
  2601                           ; 2 bytes @ 0x3
  2602                           
  2603  0073                     ?___awdiv:	
  2604                           ; 2 bytes @ 0x3
  2605                           
  2606  0073                     ?___awmod:	
  2607                           ; 2 bytes @ 0x3
  2608                           
  2609  0073                     ?___lwmod:	
  2610                           ; 2 bytes @ 0x3
  2611                           
  2612  0073                     SPI_Exchange8bit@data:	
  2613                           ; 2 bytes @ 0x3
  2614                           
  2615  0073                     EUSART_Write@txData:	
  2616                           ; 1 bytes @ 0x3
  2617                           
  2618  0073                     SendBit_1621@cnt:	
  2619                           ; 1 bytes @ 0x3
  2620                           
  2621  0073                     SendDataBit_1621@cnt:	
  2622                           ; 1 bytes @ 0x3
  2623                           
  2624  0073                     ___bmul@multiplicand:	
  2625                           ; 1 bytes @ 0x3
  2626                           
  2627  0073                     FLASH_ReadWord@flashAddr:	
  2628                           ; 1 bytes @ 0x3
  2629                           
  2630  0073                     FLASH_EraseBlock@startAddr:	
  2631                           ; 2 bytes @ 0x3
  2632                           
  2633  0073                     ___wmul@multiplier:	
  2634                           ; 2 bytes @ 0x3
  2635                           
  2636  0073                     ___awdiv@divisor:	
  2637                           ; 2 bytes @ 0x3
  2638                           
  2639  0073                     ___awmod@divisor:	
  2640                           ; 2 bytes @ 0x3
  2641                           
  2642  0073                     ___lwmod@divisor:	
  2643                           ; 2 bytes @ 0x3
  2644                           
  2645  0073                     memset@c:	
  2646                           ; 2 bytes @ 0x3
  2647                           
  2648                           
  2649                           ; 2 bytes @ 0x3
  2650  0073                     	ds	1
  2651  0074                     ??_Sleep_process:	
  2652  0074                     ??_SYSTEM_Initialize:	
  2653                           ; 1 bytes @ 0x4
  2654                           
  2655  0074                     ?_SPI_Exchange8bitBuffer:	
  2656                           ; 1 bytes @ 0x4
  2657                           
  2658  0074                     ?_maxim_31856_write_register:	
  2659                           ; 1 bytes @ 0x4
  2660                           
  2661  0074                     ??_maxim_31856_read_register:	
  2662                           ; 1 bytes @ 0x4
  2663                           
  2664  0074                     ??_SendBit_1621:	
  2665                           ; 1 bytes @ 0x4
  2666                           
  2667  0074                     ??_SendDataBit_1621:	
  2668                           ; 1 bytes @ 0x4
  2669                           
  2670  0074                     ??___bmul:	
  2671                           ; 1 bytes @ 0x4
  2672                           
  2673  0074                     SPI_Exchange8bitBuffer@bufLen:	
  2674                           ; 1 bytes @ 0x4
  2675                           
  2676  0074                     maxim_31856_write_register@uch_register_value:	
  2677                           ; 1 bytes @ 0x4
  2678                           
  2679  0074                     I2C_Send_Byte@Data:	
  2680                           ; 1 bytes @ 0x4
  2681                           
  2682  0074                     I2C_Receive_Byte@Data:	
  2683                           ; 1 bytes @ 0x4
  2684                           
  2685                           
  2686                           ; 1 bytes @ 0x4
  2687  0074                     	ds	1
  2688  0075                     ??_FLASH_EraseBlock:	
  2689  0075                     ??_FLASH_ReadWord:	
  2690                           ; 1 bytes @ 0x5
  2691                           
  2692  0075                     ??_ADC_GetConversion:	
  2693                           ; 1 bytes @ 0x5
  2694                           
  2695  0075                     ??_maxim_31856_write_register:	
  2696                           ; 1 bytes @ 0x5
  2697                           
  2698  0075                     SPI_Exchange8bitBuffer@dataOut:	
  2699                           ; 1 bytes @ 0x5
  2700                           
  2701  0075                     FLASH_ReadWord@GIEBitValue:	
  2702                           ; 1 bytes @ 0x5
  2703                           
  2704  0075                     FLASH_EraseBlock@GIEBitValue:	
  2705                           ; 1 bytes @ 0x5
  2706                           
  2707  0075                     maxim_31856_write_register@uch_register_address:	
  2708                           ; 1 bytes @ 0x5
  2709                           
  2710  0075                     maxim_31856_read_register@uch_register_address:	
  2711                           ; 1 bytes @ 0x5
  2712                           
  2713  0075                     SendBit_1621@data:	
  2714                           ; 1 bytes @ 0x5
  2715                           
  2716  0075                     SendDataBit_1621@data:	
  2717                           ; 1 bytes @ 0x5
  2718                           
  2719  0075                     I2C_Send_Byte@i:	
  2720                           ; 1 bytes @ 0x5
  2721                           
  2722  0075                     I2C_Receive_Byte@i:	
  2723                           ; 1 bytes @ 0x5
  2724                           
  2725  0075                     Key_Scan@Key_val:	
  2726                           ; 1 bytes @ 0x5
  2727                           
  2728  0075                     ___bmul@product:	
  2729                           ; 1 bytes @ 0x5
  2730                           
  2731  0075                     ___wmul@multiplicand:	
  2732                           ; 1 bytes @ 0x5
  2733                           
  2734  0075                     ___awdiv@dividend:	
  2735                           ; 2 bytes @ 0x5
  2736                           
  2737  0075                     ___awmod@dividend:	
  2738                           ; 2 bytes @ 0x5
  2739                           
  2740  0075                     ___lwmod@dividend:	
  2741                           ; 2 bytes @ 0x5
  2742                           
  2743  0075                     memset@n:	
  2744                           ; 2 bytes @ 0x5
  2745                           
  2746                           
  2747                           ; 2 bytes @ 0x5
  2748  0075                     	ds	1
  2749  0076                     ??_FLASH_WriteWord:	
  2750  0076                     ?_I2C_Read_Buffer:	
  2751                           ; 1 bytes @ 0x6
  2752                           
  2753  0076                     ?_I2C_Send_Buffer:	
  2754                           ; 1 bytes @ 0x6
  2755                           
  2756  0076                     SPI_Exchange8bitBuffer@dataIn:	
  2757                           ; 1 bytes @ 0x6
  2758                           
  2759  0076                     ADC_GetConversion@channel:	
  2760                           ; 1 bytes @ 0x6
  2761                           
  2762  0076                     maxim_31856_read_register@uch_register_data:	
  2763                           ; 1 bytes @ 0x6
  2764                           
  2765  0076                     SendBit_1621@i:	
  2766                           ; 1 bytes @ 0x6
  2767                           
  2768  0076                     SendDataBit_1621@i:	
  2769                           ; 1 bytes @ 0x6
  2770                           
  2771  0076                     I2C_Read_Buffer@buff:	
  2772                           ; 1 bytes @ 0x6
  2773                           
  2774  0076                     I2C_Send_Buffer@buff:	
  2775                           ; 1 bytes @ 0x6
  2776                           
  2777  0076                     ___bmul@multiplier:	
  2778                           ; 1 bytes @ 0x6
  2779                           
  2780                           
  2781                           ; 1 bytes @ 0x6
  2782  0076                     	ds	1
  2783  0077                     ??_SendCmd_1621:	
  2784  0077                     ??_WriteAll_1621:	
  2785                           ; 1 bytes @ 0x7
  2786                           
  2787  0077                     ??_memset:	
  2788                           ; 1 bytes @ 0x7
  2789                           
  2790  0077                     ??_Write_Flash_head:	
  2791                           ; 1 bytes @ 0x7
  2792                           
  2793  0077                     ??_Write_Flash_finish:	
  2794                           ; 1 bytes @ 0x7
  2795                           
  2796  0077                     ??_maxim_start_conversion:	
  2797                           ; 1 bytes @ 0x7
  2798                           
  2799  0077                     ??_maxim_clear_fault_status:	
  2800                           ; 1 bytes @ 0x7
  2801                           
  2802  0077                     ??___wmul:	
  2803                           ; 1 bytes @ 0x7
  2804                           
  2805  0077                     ??___awdiv:	
  2806                           ; 1 bytes @ 0x7
  2807                           
  2808  0077                     ??___awmod:	
  2809                           ; 1 bytes @ 0x7
  2810                           
  2811  0077                     ??___lwmod:	
  2812                           ; 1 bytes @ 0x7
  2813                           
  2814  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  2815                           ; 1 bytes @ 0x7
  2816                           
  2817  0077                     I2C_Read_Buffer@Length:	
  2818                           ; 1 bytes @ 0x7
  2819                           
  2820  0077                     I2C_Send_Buffer@Length:	
  2821                           ; 1 bytes @ 0x7
  2822                           
  2823  0077                     bcd2bin@val:	
  2824                           ; 1 bytes @ 0x7
  2825                           
  2826                           
  2827                           ; 1 bytes @ 0x7
  2828  0077                     	ds	1
  2829  0078                     ??_temperature_process:	
  2830                           
  2831                           	psect	cstackBANK0
  2832  0020                     __pcstackBANK0:	
  2833                           ; 1 bytes @ 0x8
  2834                           
  2835  0020                     ?_FLASH_WriteBlock:	
  2836  0020                     ?_WriteAll_1621:	
  2837                           ; 1 bytes @ 0x0
  2838                           
  2839  0020                     ??_bcd2bin:	
  2840                           ; 1 bytes @ 0x0
  2841                           
  2842  0020                     ??_SPI_Exchange8bitBuffer:	
  2843                           ; 1 bytes @ 0x0
  2844                           
  2845  0020                     ??_I2C_Read_Buffer:	
  2846                           ; 1 bytes @ 0x0
  2847                           
  2848  0020                     ??_I2C_Send_Buffer:	
  2849                           ; 1 bytes @ 0x0
  2850                           
  2851  0020                     maxim_start_conversion@uch_conversion_mode:	
  2852                           ; 1 bytes @ 0x0
  2853                           
  2854  0020                     SendCmd_1621@command:	
  2855                           ; 1 bytes @ 0x0
  2856                           
  2857  0020                     ___awdiv@counter:	
  2858                           ; 1 bytes @ 0x0
  2859                           
  2860  0020                     ___awmod@counter:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0020                     ___lwmod@counter:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0020                     memset@p1:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0020                     FLASH_WriteBlock@writeAddr:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0020                     WriteAll_1621@p:	
  2873                           ; 2 bytes @ 0x0
  2874                           
  2875  0020                     ___wmul@product:	
  2876                           ; 2 bytes @ 0x0
  2877                           
  2878                           
  2879                           ; 2 bytes @ 0x0
  2880  0020                     	ds	1
  2881  0021                     ?___lwdiv:	
  2882  0021                     I2C_Read_Buffer@ADD:	
  2883                           ; 2 bytes @ 0x1
  2884                           
  2885  0021                     ___awdiv@sign:	
  2886                           ; 1 bytes @ 0x1
  2887                           
  2888  0021                     ___awmod@sign:	
  2889                           ; 1 bytes @ 0x1
  2890                           
  2891  0021                     memset@p:	
  2892                           ; 1 bytes @ 0x1
  2893                           
  2894  0021                     ___lwdiv@divisor:	
  2895                           ; 1 bytes @ 0x1
  2896                           
  2897                           
  2898                           ; 2 bytes @ 0x1
  2899  0021                     	ds	1
  2900  0022                     FLASH_WriteBlock@flashWordArray:	
  2901  0022                     WriteAll_1621@cnt:	
  2902                           ; 1 bytes @ 0x2
  2903                           
  2904  0022                     I2C_Read_Buffer@Flag:	
  2905                           ; 1 bytes @ 0x2
  2906                           
  2907  0022                     I2C_Send_Buffer@ADD:	
  2908                           ; 1 bytes @ 0x2
  2909                           
  2910  0022                     ___awdiv@quotient:	
  2911                           ; 1 bytes @ 0x2
  2912                           
  2913                           
  2914                           ; 2 bytes @ 0x2
  2915  0022                     	ds	1
  2916  0023                     ??_FLASH_WriteBlock:	
  2917  0023                     ??_Bq32k_Rtc_Read_Time:	
  2918                           ; 1 bytes @ 0x3
  2919                           
  2920  0023                     ?_maxim_31856_read_nregisters:	
  2921                           ; 1 bytes @ 0x3
  2922                           
  2923  0023                     maxim_31856_read_nregisters@uch_buff:	
  2924                           ; 1 bytes @ 0x3
  2925                           
  2926  0023                     WriteAll_1621@addr:	
  2927                           ; 1 bytes @ 0x3
  2928                           
  2929  0023                     I2C_Send_Buffer@i:	
  2930                           ; 1 bytes @ 0x3
  2931                           
  2932  0023                     ___lwdiv@dividend:	
  2933                           ; 1 bytes @ 0x3
  2934                           
  2935                           
  2936                           ; 2 bytes @ 0x3
  2937  0023                     	ds	1
  2938  0024                     maxim_31856_read_nregisters@uch_nBytes:	
  2939  0024                     WriteAll_1621@i:	
  2940                           ; 1 bytes @ 0x4
  2941                           
  2942  0024                     I2C_Send_Buffer@Flag:	
  2943                           ; 1 bytes @ 0x4
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x4
  2947  0024                     	ds	1
  2948  0025                     ??_Bq32k_Time_Init:	
  2949  0025                     ??_err_Display:	
  2950                           ; 1 bytes @ 0x5
  2951                           
  2952  0025                     ??_Two_Display:	
  2953                           ; 1 bytes @ 0x5
  2954                           
  2955  0025                     ??_maxim_31856_read_nregisters:	
  2956                           ; 1 bytes @ 0x5
  2957                           
  2958  0025                     ??___lwdiv:	
  2959                           ; 1 bytes @ 0x5
  2960                           
  2961  0025                     Bq32k_Rtc_Read_Time@temp:	
  2962                           ; 1 bytes @ 0x5
  2963                           
  2964                           
  2965                           ; 10 bytes @ 0x5
  2966  0025                     	ds	1
  2967  0026                     ___lwdiv@counter:	
  2968  0026                     FLASH_WriteBlock@blockStartAddr:	
  2969                           ; 1 bytes @ 0x6
  2970                           
  2971  0026                     Two_Display@num:	
  2972                           ; 2 bytes @ 0x6
  2973                           
  2974  0026                     err_Display@num:	
  2975                           ; 4 bytes @ 0x6
  2976                           
  2977                           
  2978                           ; 4 bytes @ 0x6
  2979  0026                     	ds	1
  2980  0027                     maxim_31856_read_nregisters@uch_register_address:	
  2981  0027                     ___lwdiv@quotient:	
  2982                           ; 1 bytes @ 0x7
  2983                           
  2984  0027                     Bq32k_Time_Init@temp:	
  2985                           ; 2 bytes @ 0x7
  2986                           
  2987                           
  2988                           ; 10 bytes @ 0x7
  2989  0027                     	ds	1
  2990  0028                     ??_one_temperature_trans:	
  2991  0028                     FLASH_WriteBlock@GIEBitValue:	
  2992                           ; 1 bytes @ 0x8
  2993                           
  2994                           
  2995                           ; 1 bytes @ 0x8
  2996  0028                     	ds	1
  2997  0029                     ??_Tc_Display:	
  2998  0029                     FLASH_WriteBlock@i:	
  2999                           ; 1 bytes @ 0x9
  3000                           
  3001                           
  3002                           ; 1 bytes @ 0x9
  3003  0029                     	ds	1
  3004  002A                     ?_FLASH_WriteWord:	
  3005  002A                     Tc_Display@count:	
  3006                           ; 1 bytes @ 0xA
  3007                           
  3008  002A                     Two_Display@number:	
  3009                           ; 1 bytes @ 0xA
  3010                           
  3011  002A                     FLASH_WriteWord@flashAddr:	
  3012                           ; 1 bytes @ 0xA
  3013                           
  3014                           
  3015                           ; 2 bytes @ 0xA
  3016  002A                     	ds	1
  3017  002B                     Tc_Display@data:	
  3018                           
  3019                           ; 2 bytes @ 0xB
  3020  002B                     	ds	1
  3021  002C                     FLASH_WriteWord@ramBuf:	
  3022                           
  3023                           ; 1 bytes @ 0xC
  3024  002C                     	ds	1
  3025  002D                     FLASH_WriteWord@word:	
  3026                           
  3027                           ; 2 bytes @ 0xD
  3028  002D                     	ds	2
  3029  002F                     FLASH_WriteWord@offset:	
  3030  002F                     Bq32k_Rtc_Read_Time@p:	
  3031                           ; 1 bytes @ 0xF
  3032                           
  3033                           
  3034                           ; 1 bytes @ 0xF
  3035  002F                     	ds	1
  3036  0030                     ??_time_Display:	
  3037  0030                     FLASH_WriteWord@blockStartAddr:	
  3038                           ; 1 bytes @ 0x10
  3039                           
  3040                           
  3041                           ; 2 bytes @ 0x10
  3042  0030                     	ds	2
  3043  0032                     FLASH_WriteWord@i:	
  3044                           
  3045                           ; 1 bytes @ 0x12
  3046  0032                     	ds	1
  3047  0033                     ??_Serach_Flash_Head:	
  3048  0033                     ?_Save_Write_word:	
  3049                           ; 1 bytes @ 0x13
  3050                           
  3051  0033                     Save_Write_word@data:	
  3052                           ; 1 bytes @ 0x13
  3053                           
  3054  0033                     time_Display@num:	
  3055                           ; 2 bytes @ 0x13
  3056                           
  3057                           
  3058                           ; 4 bytes @ 0x13
  3059  0033                     	ds	1
  3060  0034                     Serach_Flash_Head@count:	
  3061                           
  3062                           ; 1 bytes @ 0x14
  3063  0034                     	ds	1
  3064  0035                     ??_Save_Write_word:	
  3065  0035                     Serach_Flash_Head@data:	
  3066                           ; 1 bytes @ 0x15
  3067                           
  3068                           
  3069                           ; 2 bytes @ 0x15
  3070  0035                     	ds	2
  3071  0037                     ??_Save_Write_time:	
  3072  0037                     Serach_Flash_Head@i:	
  3073                           ; 1 bytes @ 0x17
  3074                           
  3075                           
  3076                           ; 2 bytes @ 0x17
  3077  0037                     	ds	2
  3078  0039                     ??_Calculate_Time:	
  3079                           
  3080                           ; 1 bytes @ 0x19
  3081  0039                     	ds	10
  3082  0043                     Calculate_Time@temp:	
  3083                           
  3084                           ; 4 bytes @ 0x23
  3085  0043                     	ds	4
  3086  0047                     Calculate_Time@temp1:	
  3087                           
  3088                           ; 4 bytes @ 0x27
  3089  0047                     	ds	4
  3090  004B                     Calculate_Time@temp2:	
  3091                           
  3092                           ; 4 bytes @ 0x2B
  3093  004B                     	ds	4
  3094  004F                     ??_Save_process:	
  3095  004F                     ??_tc_temperature_trans:	
  3096                           ; 1 bytes @ 0x2F
  3097                           
  3098                           
  3099                           ; 1 bytes @ 0x2F
  3100  004F                     	ds	2
  3101  0051                     Save_process@var_time:	
  3102                           
  3103                           ; 2 bytes @ 0x31
  3104  0051                     	ds	2
  3105  0053                     tc_temperature_trans@temperature_back:	
  3106                           
  3107                           ; 2 bytes @ 0x33
  3108  0053                     	ds	2
  3109  0055                     tc_temperature_trans@temperature_absolute:	
  3110                           
  3111                           ; 2 bytes @ 0x35
  3112  0055                     	ds	2
  3113  0057                     tc_temperature_trans@var_time:	
  3114                           
  3115                           ; 2 bytes @ 0x37
  3116  0057                     	ds	2
  3117  0059                     tc_temperature_trans@temperature_temp:	
  3118                           
  3119                           ; 2 bytes @ 0x39
  3120  0059                     	ds	2
  3121  005B                     ??_temperature_display:	
  3122                           
  3123                           ; 1 bytes @ 0x3B
  3124  005B                     	ds	1
  3125  005C                     ??_Key_Process:	
  3126                           
  3127                           ; 1 bytes @ 0x3C
  3128  005C                     	ds	1
  3129  005D                     Key_Process@data_temp:	
  3130                           
  3131                           ; 2 bytes @ 0x3D
  3132  005D                     	ds	2
  3133  005F                     Key_Process@gKeyValue:	
  3134                           
  3135                           ; 1 bytes @ 0x3F
  3136  005F                     	ds	1
  3137  0060                     Key_Process@i:	
  3138                           
  3139                           ; 2 bytes @ 0x40
  3140  0060                     	ds	2
  3141  0062                     ??_main:	
  3142                           
  3143                           ; 1 bytes @ 0x42
  3144  0062                     	ds	3
  3145                           
  3146                           	psect	maintext
  3147  03A9                     __pmaintext:	
  3148 ;;
  3149 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3150 ;;
  3151 ;; *************** function _main *****************
  3152 ;; Defined at:
  3153 ;;		line 67 in file "main.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;		None
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  bat_data        2    3[BANK2 ] unsigned int 
  3158 ;;  data_temp       2    0[BANK2 ] unsigned int 
  3159 ;;  i               1    2[BANK2 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  1    wreg      void 
  3162 ;; Registers used:
  3163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3164 ;; Tracked objects:
  3165 ;;		On entry : B1F/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3170 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  3171 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3172 ;;      Totals:         0       3       0       5       0       0       0       0       0       0       0       0       
      +0       0
  3173 ;;Total ram usage:        8 bytes
  3174 ;; Hardware stack levels required when called:   13
  3175 ;; This function calls:
  3176 ;;		_ADC_GetConversion
  3177 ;;		_Bq32k_Time_Init
  3178 ;;		_Key_Process
  3179 ;;		_SYSTEM_Initialize
  3180 ;;		_Save_process
  3181 ;;		_SendCmd_1621
  3182 ;;		_Serach_Flash_Head
  3183 ;;		_Sleep_process
  3184 ;;		_WriteAll_1621
  3185 ;;		_temperature_process
  3186 ;; This function is called by:
  3187 ;;		Startup code after reset
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           
  3192                           ;psect for function _main
  3193  03A9                     _main:	
  3194                           
  3195                           ;main.c: 69: unsigned char i=0;
  3196                           
  3197                           ;incstack = 0
  3198                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3199  03A9  0022               	movlb	2	; select bank2
  3200  03AA  01E2               	clrf	main@i^(0+256)
  3201                           
  3202                           ;main.c: 71: unsigned int bat_data = 0;
  3203  03AB  01E3               	clrf	main@bat_data^(0+256)
  3204  03AC  01E4               	clrf	(main@bat_data+1)^(0+256)
  3205                           
  3206                           ;main.c: 72: unsigned int data_temp = 0;
  3207  03AD  01E0               	clrf	main@data_temp^(0+256)
  3208  03AE  01E1               	clrf	(main@data_temp+1)^(0+256)
  3209                           
  3210                           ;main.c: 73: SWDTEN = 0;
  3211  03AF  0021               	movlb	1	; select bank1
  3212  03B0  1017               	bcf	23,0	;volatile
  3213                           
  3214                           ;main.c: 74: WDTPS0 = 1;
  3215  03B1  1497               	bsf	23,1	;volatile
  3216                           
  3217                           ;main.c: 75: WDTPS1 = 0;
  3218  03B2  1117               	bcf	23,2	;volatile
  3219                           
  3220                           ;main.c: 76: WDTPS2 = 0;
  3221  03B3  1197               	bcf	23,3	;volatile
  3222                           
  3223                           ;main.c: 77: WDTPS3 = 1;
  3224  03B4  1617               	bsf	23,4	;volatile
  3225                           
  3226                           ;main.c: 78: WDTPS4 = 0;
  3227  03B5  1297               	bcf	23,5	;volatile
  3228  03B6  0064               	clrwdt	;# 
  3229                           
  3230                           ;main.c: 81: SYSTEM_Initialize();
  3231  03B7  3188  20EF  3183   	fcall	_SYSTEM_Initialize
  3232                           
  3233                           ;main.c: 84: _delay((unsigned long)((3000)*(4000000/4000.0)));
  3234  03BA  3010               	movlw	16
  3235  03BB  0020               	movlb	0	; select bank0
  3236  03BC  00E4               	movwf	??_main+2
  3237  03BD  3039               	movlw	57
  3238  03BE  00E3               	movwf	??_main+1
  3239  03BF  301B               	movlw	27
  3240  03C0  00E2               	movwf	??_main
  3241  03C1                     u5317:	
  3242  03C1  0BE2               	decfsz	??_main,f
  3243  03C2  2BC1               	goto	u5317
  3244  03C3  0BE3               	decfsz	??_main+1,f
  3245  03C4  2BC1               	goto	u5317
  3246  03C5  0BE4               	decfsz	??_main+2,f
  3247  03C6  2BC1               	goto	u5317
  3248  03C7  3200               	nop2
  3249                           
  3250                           ;main.c: 85: if(RB5 == 0 ) do { LATA2 = 1; } while(0);
  3251  03C8  0020               	movlb	0	; select bank0
  3252  03C9  1A8D               	btfsc	13,5	;volatile
  3253  03CA  2BCE               	goto	l371
  3254  03CB  0022               	movlb	2	; select bank2
  3255  03CC  150C               	bsf	12,2	;volatile
  3256  03CD  2BD0               	goto	l373
  3257  03CE                     l371:	
  3258                           ;main.c: 86: else do { LATA2 = 0; } while(0);
  3259                           
  3260  03CE  0022               	movlb	2	; select bank2
  3261  03CF  110C               	bcf	12,2	;volatile
  3262  03D0                     l373:	
  3263                           ;main.c: 87: do { LATA3 = 0; } while(0);
  3264                           
  3265  03D0  118C               	bcf	12,3	;volatile
  3266                           
  3267                           ;main.c: 90: bat_data = 0;
  3268  03D1  01E3               	clrf	main@bat_data^(0+256)
  3269  03D2  01E4               	clrf	(main@bat_data+1)^(0+256)
  3270                           
  3271                           ;main.c: 91: for(i=0;i<16;i++)
  3272  03D3  01E2               	clrf	main@i^(0+256)
  3273  03D4  3010               	movlw	16
  3274  03D5  0262               	subwf	main@i^(0+256),w
  3275  03D6  1803               	btfsc	3,0
  3276  03D7  2BED               	goto	l5533
  3277  03D8                     l5527:	
  3278                           
  3279                           ;main.c: 92: {
  3280                           ;main.c: 93: bat_data = bat_data + ADC_GetConversion(ADC);
  3281  03D8  300B               	movlw	11
  3282  03D9  3189  211B  3183   	fcall	_ADC_GetConversion
  3283  03DC  0022               	movlb	2	; select bank2
  3284  03DD  0863               	movf	main@bat_data^(0+256),w
  3285  03DE  0773               	addwf	?_ADC_GetConversion,w
  3286  03DF  00E3               	movwf	main@bat_data^(0+256)
  3287  03E0  0864               	movf	(main@bat_data+1)^(0+256),w
  3288  03E1  3D74               	addwfc	?_ADC_GetConversion+1,w
  3289  03E2  00E4               	movwf	(main@bat_data+1)^(0+256)
  3290  03E3  3001               	movlw	1
  3291  03E4  0020               	movlb	0	; select bank0
  3292  03E5  00E2               	movwf	??_main
  3293  03E6  0862               	movf	??_main,w
  3294  03E7  0022               	movlb	2	; select bank2
  3295  03E8  07E2               	addwf	main@i^(0+256),f
  3296  03E9  3010               	movlw	16
  3297  03EA  0262               	subwf	main@i^(0+256),w
  3298  03EB  1C03               	skipc
  3299  03EC  2BD8               	goto	l5527
  3300  03ED                     l5533:	
  3301                           
  3302                           ;main.c: 94: }
  3303                           ;main.c: 95: bat_data = bat_data>>4;
  3304  03ED  0E63               	swapf	main@bat_data^(0+256),w
  3305  03EE  390F               	andlw	15
  3306  03EF  00E3               	movwf	main@bat_data^(0+256)
  3307  03F0  0E64               	swapf	(main@bat_data+1)^(0+256),w
  3308  03F1  39F0               	andlw	240
  3309  03F2  04E3               	iorwf	main@bat_data^(0+256),f
  3310  03F3  0E64               	swapf	(main@bat_data+1)^(0+256),w
  3311  03F4  390F               	andlw	15
  3312  03F5  00E4               	movwf	(main@bat_data^(0+256)+1)
  3313                           
  3314                           ;main.c: 96: if( bat_data < 800)
  3315  03F6  3003               	movlw	3
  3316  03F7  0264               	subwf	(main@bat_data+1)^(0+256),w
  3317  03F8  3020               	movlw	32
  3318  03F9  1903               	skipnz
  3319  03FA  0263               	subwf	main@bat_data^(0+256),w
  3320  03FB  1803               	skipnc
  3321  03FC  2C00               	goto	l5537
  3322                           
  3323                           ;main.c: 97: {
  3324                           ;main.c: 98: do { LATA2 = 0; } while(0);
  3325  03FD  110C               	bcf	12,2	;volatile
  3326  03FE                     l380:	
  3327                           ;main.c: 99: while(1)asm("clrwdt");
  3328                           
  3329  03FE  0064               	clrwdt	;# 
  3330  03FF  2BFE               	goto	l380
  3331  0400                     l5537:	
  3332                           
  3333                           ;main.c: 100: }
  3334                           ;main.c: 101: i = 0 ;
  3335  0400  0022               	movlb	2	; select bank2
  3336  0401  01E2               	clrf	main@i^(0+256)
  3337                           
  3338                           ;main.c: 102: bat_data = 0 ;
  3339  0402  01E3               	clrf	main@bat_data^(0+256)
  3340  0403  01E4               	clrf	(main@bat_data+1)^(0+256)
  3341                           
  3342                           ;main.c: 106: do { TRISB3 = 1; } while(0);
  3343  0404  0021               	movlb	1	; select bank1
  3344  0405  158D               	bsf	13,3	;volatile
  3345                           
  3346                           ;main.c: 107: Bq32k_Time_Init();
  3347  0406  3189  21CB  3183   	fcall	_Bq32k_Time_Init
  3348                           
  3349                           ;main.c: 108: SendCmd_1621(0x52);
  3350  0409  3052               	movlw	82
  3351  040A  3189  2104  3183   	fcall	_SendCmd_1621
  3352                           
  3353                           ;main.c: 109: SendCmd_1621(0X28);
  3354  040D  3028               	movlw	40
  3355  040E  3189  2104  3183   	fcall	_SendCmd_1621
  3356                           
  3357                           ;main.c: 110: SendCmd_1621(0x02);
  3358  0411  3002               	movlw	2
  3359  0412  3189  2104  3183   	fcall	_SendCmd_1621
  3360                           
  3361                           ;main.c: 111: SendCmd_1621(0x06);
  3362  0415  3006               	movlw	6
  3363  0416  3189  2104  3183   	fcall	_SendCmd_1621
  3364                           
  3365                           ;main.c: 113: WriteAll_1621(0,Dis_TAB+17,4);
  3366  0419  3011               	movlw	low ((_Dis_TAB| (0+32768)+17))
  3367  041A  0020               	movlb	0	; select bank0
  3368  041B  00A0               	movwf	WriteAll_1621@p
  3369  041C  3090               	movlw	high ((_Dis_TAB| (0+32768)+17))
  3370  041D  00A1               	movwf	WriteAll_1621@p+1
  3371  041E  3004               	movlw	4
  3372  041F  00E2               	movwf	??_main
  3373  0420  0862               	movf	??_main,w
  3374  0421  00A2               	movwf	WriteAll_1621@cnt
  3375  0422  3000               	movlw	0
  3376  0423  318C  240E  3183   	fcall	_WriteAll_1621
  3377                           
  3378                           ;main.c: 115: time_count = 0;
  3379  0426  0020               	movlb	0	; select bank0
  3380  0427  01ED               	clrf	_time_count
  3381                           
  3382                           ;main.c: 116: Record_flag = 0;
  3383  0428  01EB               	clrf	_Record_flag
  3384                           
  3385                           ;main.c: 117: Cur_temperature_time_ch1 = 0;
  3386  0429  0021               	movlb	1	; select bank1
  3387  042A  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  3388                           
  3389                           ;main.c: 118: Cur_temperature_time_ch2 = 0;
  3390  042B  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  3391                           
  3392                           ;main.c: 119: CH1_temperature = 0;
  3393  042C  0020               	movlb	0	; select bank0
  3394  042D  01E9               	clrf	_CH1_temperature
  3395  042E  01EA               	clrf	_CH1_temperature+1
  3396                           
  3397                           ;main.c: 120: CH2_temperature = 0;
  3398  042F  01F8               	clrf	_CH2_temperature
  3399  0430  01F9               	clrf	_CH2_temperature+1
  3400                           
  3401                           ;main.c: 121: CH1_state = 0;
  3402  0431  0021               	movlb	1	; select bank1
  3403  0432  01B4               	clrf	_CH1_state^(0+128)
  3404                           
  3405                           ;main.c: 122: CH2_state = 0;
  3406  0433  01B5               	clrf	_CH2_state^(0+128)
  3407                           
  3408                           ;main.c: 123: bat_data = 0;
  3409  0434  0022               	movlb	2	; select bank2
  3410  0435  01E3               	clrf	main@bat_data^(0+256)
  3411  0436  01E4               	clrf	(main@bat_data+1)^(0+256)
  3412                           
  3413                           ;main.c: 124: Cur_Save_Index = 0x2000;
  3414  0437  3000               	movlw	0
  3415  0438  0021               	movlb	1	; select bank1
  3416  0439  00AE               	movwf	_Cur_Save_Index^(0+128)
  3417  043A  3020               	movlw	32
  3418  043B  00AF               	movwf	(_Cur_Save_Index^(0+128)+1)
  3419                           
  3420                           ;main.c: 125: Serach_Flash_Head();
  3421  043C  318E  26E5  3183   	fcall	_Serach_Flash_Head
  3422  043F  0064               	clrwdt	;# 
  3423                           
  3424                           ;main.c: 127: SWDTEN = 1;
  3425  0440  0021               	movlb	1	; select bank1
  3426  0441  1417               	bsf	23,0	;volatile
  3427                           
  3428                           ;main.c: 152: (INTCONbits.GIE = 1);
  3429  0442  178B               	bsf	11,7	;volatile
  3430                           
  3431                           ;main.c: 155: (INTCONbits.PEIE = 1);
  3432  0443  170B               	bsf	11,6	;volatile
  3433  0444                     l5581:	
  3434                           ;main.c: 163: while (1)
  3435                           
  3436                           
  3437                           ;main.c: 164: {
  3438                           ;main.c: 169: bat_data = bat_data + ADC_GetConversion(ADC);
  3439  0444  300B               	movlw	11
  3440  0445  3189  211B  3183   	fcall	_ADC_GetConversion
  3441  0448  0022               	movlb	2	; select bank2
  3442  0449  0863               	movf	main@bat_data^(0+256),w
  3443  044A  0773               	addwf	?_ADC_GetConversion,w
  3444  044B  00E3               	movwf	main@bat_data^(0+256)
  3445  044C  0864               	movf	(main@bat_data+1)^(0+256),w
  3446  044D  3D74               	addwfc	?_ADC_GetConversion+1,w
  3447  044E  00E4               	movwf	(main@bat_data+1)^(0+256)
  3448                           
  3449                           ;main.c: 170: i++;
  3450  044F  3001               	movlw	1
  3451  0450  0020               	movlb	0	; select bank0
  3452  0451  00E2               	movwf	??_main
  3453  0452  0862               	movf	??_main,w
  3454  0453  0022               	movlb	2	; select bank2
  3455  0454  07E2               	addwf	main@i^(0+256),f
  3456                           
  3457                           ;main.c: 171: if(i == 16)
  3458  0455  3010               	movlw	16
  3459  0456  0662               	xorwf	main@i^(0+256),w
  3460  0457  1D03               	btfss	3,2
  3461  0458  2C70               	goto	l5595
  3462                           
  3463                           ;main.c: 172: {
  3464                           ;main.c: 173: i = 0;
  3465  0459  01E2               	clrf	main@i^(0+256)
  3466                           
  3467                           ;main.c: 174: bat_data = bat_data>>4;
  3468  045A  0E63               	swapf	main@bat_data^(0+256),w
  3469  045B  390F               	andlw	15
  3470  045C  00E3               	movwf	main@bat_data^(0+256)
  3471  045D  0E64               	swapf	(main@bat_data+1)^(0+256),w
  3472  045E  39F0               	andlw	240
  3473  045F  04E3               	iorwf	main@bat_data^(0+256),f
  3474  0460  0E64               	swapf	(main@bat_data+1)^(0+256),w
  3475  0461  390F               	andlw	15
  3476  0462  00E4               	movwf	(main@bat_data^(0+256)+1)
  3477                           
  3478                           ;main.c: 175: if( bat_data < 800)
  3479  0463  3003               	movlw	3
  3480  0464  0264               	subwf	(main@bat_data+1)^(0+256),w
  3481  0465  3020               	movlw	32
  3482  0466  1903               	skipnz
  3483  0467  0263               	subwf	main@bat_data^(0+256),w
  3484  0468  1803               	skipnc
  3485  0469  2C6D               	goto	l5593
  3486                           
  3487                           ;main.c: 176: {
  3488                           ;main.c: 177: do { LATA2 = 0; } while(0);
  3489  046A  110C               	bcf	12,2	;volatile
  3490  046B                     l390:	
  3491                           ;main.c: 178: while(1)asm("clrwdt");
  3492                           
  3493  046B  0064               	clrwdt	;# 
  3494  046C  2C6B               	goto	l390
  3495  046D                     l5593:	
  3496                           
  3497                           ;main.c: 179: }
  3498                           ;main.c: 180: bat_data = 0;
  3499  046D  0022               	movlb	2	; select bank2
  3500  046E  01E3               	clrf	main@bat_data^(0+256)
  3501  046F  01E4               	clrf	(main@bat_data+1)^(0+256)
  3502  0470                     l5595:	
  3503                           
  3504                           ;main.c: 181: }
  3505                           ;main.c: 186: temperature_process();
  3506  0470  318C  24AD  3183   	fcall	_temperature_process
  3507                           
  3508                           ;main.c: 187: Key_Process();
  3509  0473  3185  2545  3183   	fcall	_Key_Process
  3510                           
  3511                           ;main.c: 188: Save_process();
  3512  0476  318F  2739  3183   	fcall	_Save_process
  3513                           
  3514                           ;main.c: 189: Sleep_process();
  3515  0479  318A  2277  3183   	fcall	_Sleep_process
  3516  047C  2C44               	goto	l5581
  3517  047D                     __end_of_main:	
  3518                           
  3519                           	psect	text1
  3520  0A77                     __ptext1:	
  3521 ;; *************** function _Sleep_process *****************
  3522 ;; Defined at:
  3523 ;;		line 17 in file "mcc_generated_files/power.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0, pclath, cstack
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3541 ;;Total ram usage:        0 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    4
  3544 ;; This function calls:
  3545 ;;		_Step_control
  3546 ;; This function is called by:
  3547 ;;		_main
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           
  3552                           ;psect for function _Sleep_process
  3553  0A77                     _Sleep_process:	
  3554                           
  3555                           ;incstack = 0
  3556                           ; Regs used in _Sleep_process: [wreg+status,2+status,0+pclath+cstack]
  3557                           ;power.c: 19: do { LATA3 = 1; } while(0);
  3558  0A77  0022               	movlb	2	; select bank2
  3559  0A78  158C               	bsf	12,3	;volatile
  3560                           
  3561                           ;power.c: 20: do { LATA4 = 1; } while(0);
  3562  0A79  160C               	bsf	12,4	;volatile
  3563                           
  3564                           ;power.c: 21: do { LATA0 = 1; } while(0);
  3565  0A7A  140C               	bsf	12,0	;volatile
  3566                           
  3567                           ;power.c: 22: do { LATA1 = 1; } while(0);
  3568  0A7B  148C               	bsf	12,1	;volatile
  3569                           
  3570                           ;power.c: 26: do { LATC0 = 1; } while(0);
  3571  0A7C  140E               	bsf	14,0	;volatile
  3572                           
  3573                           ;power.c: 27: do { LATC2 = 1; } while(0);
  3574  0A7D  150E               	bsf	14,2	;volatile
  3575                           
  3576                           ;power.c: 28: do { LATA6 = 1; } while(0);
  3577  0A7E  170C               	bsf	12,6	;volatile
  3578                           
  3579                           ;power.c: 29: do { LATC1 = 1; } while(0);
  3580  0A7F  148E               	bsf	14,1	;volatile
  3581                           
  3582                           ;power.c: 30: do { LATB0 = 1; } while(0);
  3583  0A80  140D               	bsf	13,0	;volatile
  3584                           
  3585                           ;power.c: 31: do { LATB1 = 1; } while(0);
  3586  0A81  148D               	bsf	13,1	;volatile
  3587  0A82  0063               	sleep	;# 
  3588                           
  3589                           ;power.c: 33: if( time_count == 0 || time_count == 2 )
  3590  0A83  0020               	movlb	0	; select bank0
  3591  0A84  086D               	movf	_time_count,w
  3592  0A85  1903               	btfsc	3,2
  3593  0A86  2A8B               	goto	l1088
  3594  0A87  3002               	movlw	2
  3595  0A88  066D               	xorwf	_time_count,w
  3596  0A89  1D03               	btfss	3,2
  3597  0A8A  2A93               	goto	l5499
  3598  0A8B                     l1088:	
  3599                           ;power.c: 34: {
  3600                           ;power.c: 35: do { LATA3 = 0; } while(0);
  3601                           
  3602  0A8B  0022               	movlb	2	; select bank2
  3603  0A8C  118C               	bcf	12,3	;volatile
  3604                           
  3605                           ;power.c: 36: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  3606  0A8D  0020               	movlb	0	; select bank0
  3607  0A8E  036B               	decf	_Record_flag,w
  3608  0A8F  1D03               	btfss	3,2
  3609  0A90  2A93               	goto	l5499
  3610  0A91  0022               	movlb	2	; select bank2
  3611  0A92  120C               	bcf	12,4	;volatile
  3612  0A93                     l5499:	
  3613                           
  3614                           ;power.c: 37: }
  3615                           ;power.c: 39: Step_control();
  3616  0A93  318A  2296         	fcall	_Step_control
  3617  0A95  0008               	return
  3618  0A96                     __end_of_Sleep_process:	
  3619                           
  3620                           	psect	text2
  3621  0A96                     __ptext2:	
  3622 ;; *************** function _Step_control *****************
  3623 ;; Defined at:
  3624 ;;		line 48 in file "mcc_generated_files/power.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;		None
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;		None
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		wreg, status,2, status,0
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3640 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;Total ram usage:        1 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; Hardware stack levels required when called:    3
  3645 ;; This function calls:
  3646 ;;		Nothing
  3647 ;; This function is called by:
  3648 ;;		_Sleep_process
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           
  3653                           ;psect for function _Step_control
  3654  0A96                     _Step_control:	
  3655                           
  3656                           ;power.c: 50: time_count++;
  3657                           
  3658                           ;incstack = 0
  3659                           ; Regs used in _Step_control: [wreg+status,2+status,0]
  3660  0A96  3001               	movlw	1
  3661  0A97  00F3               	movwf	??_Step_control
  3662  0A98  0873               	movf	??_Step_control,w
  3663  0A99  0020               	movlb	0	; select bank0
  3664  0A9A  07ED               	addwf	_time_count,f
  3665                           
  3666                           ;power.c: 51: if(time_count == 4 || time_count > 12) time_count = 0;
  3667  0A9B  3004               	movlw	4
  3668  0A9C  066D               	xorwf	_time_count,w
  3669  0A9D  1903               	btfsc	3,2
  3670  0A9E  2AA3               	goto	l5325
  3671  0A9F  300D               	movlw	13
  3672  0AA0  026D               	subwf	_time_count,w
  3673  0AA1  1C03               	skipc
  3674  0AA2  2AA4               	goto	l5327
  3675  0AA3                     l5325:	
  3676  0AA3  01ED               	clrf	_time_count
  3677  0AA4                     l5327:	
  3678                           
  3679                           ;power.c: 53: Cur_temperature_time_ch1++;
  3680  0AA4  3001               	movlw	1
  3681  0AA5  00F3               	movwf	??_Step_control
  3682  0AA6  0873               	movf	??_Step_control,w
  3683  0AA7  0021               	movlb	1	; select bank1
  3684  0AA8  07B6               	addwf	_Cur_temperature_time_ch1^(0+128),f
  3685                           
  3686                           ;power.c: 54: if(Cur_temperature_time_ch1 > 130)
  3687  0AA9  3083               	movlw	131
  3688  0AAA  0236               	subwf	_Cur_temperature_time_ch1^(0+128),w
  3689  0AAB  1803               	btfsc	3,0
  3690                           
  3691                           ;power.c: 55: {
  3692                           ;power.c: 56: Cur_temperature_time_ch1 = 0;
  3693  0AAC  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  3694                           
  3695                           ;power.c: 57: }
  3696                           ;power.c: 59: Cur_temperature_time_ch2++;
  3697  0AAD  3001               	movlw	1
  3698  0AAE  00F3               	movwf	??_Step_control
  3699  0AAF  0873               	movf	??_Step_control,w
  3700  0AB0  07B7               	addwf	_Cur_temperature_time_ch2^(0+128),f
  3701                           
  3702                           ;power.c: 60: if(Cur_temperature_time_ch2 > 130)
  3703  0AB1  3083               	movlw	131
  3704  0AB2  0237               	subwf	_Cur_temperature_time_ch2^(0+128),w
  3705  0AB3  1C03               	skipc
  3706  0AB4  0008               	return
  3707                           
  3708                           ;power.c: 61: {
  3709                           ;power.c: 62: Cur_temperature_time_ch2= 0;
  3710  0AB5  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  3711  0AB6  0008               	return
  3712  0AB7                     __end_of_Step_control:	
  3713                           
  3714                           	psect	text3
  3715  0EE5                     __ptext3:	
  3716 ;; *************** function _Serach_Flash_Head *****************
  3717 ;; Defined at:
  3718 ;;		line 42 in file "mcc_generated_files/save.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  i               2   23[BANK0 ] unsigned int 
  3723 ;;  data            2   21[BANK0 ] unsigned int 
  3724 ;;  count           1   20[BANK0 ] unsigned char 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;Total ram usage:        6 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    7
  3741 ;; This function calls:
  3742 ;;		_FLASH_ReadWord
  3743 ;;		_Write_Flash_finish
  3744 ;; This function is called by:
  3745 ;;		_main
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           
  3750                           ;psect for function _Serach_Flash_Head
  3751  0EE5                     _Serach_Flash_Head:	
  3752                           
  3753                           ;save.c: 44: unsigned int i=0;
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _Serach_Flash_Head: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3757  0EE5  0020               	movlb	0	; select bank0
  3758  0EE6  01B7               	clrf	Serach_Flash_Head@i
  3759  0EE7  01B8               	clrf	Serach_Flash_Head@i+1
  3760                           
  3761                           ;save.c: 45: unsigned int data=0;
  3762  0EE8  01B5               	clrf	Serach_Flash_Head@data
  3763  0EE9  01B6               	clrf	Serach_Flash_Head@data+1
  3764                           
  3765                           ;save.c: 46: unsigned char count =0;
  3766  0EEA  01B4               	clrf	Serach_Flash_Head@count
  3767                           
  3768                           ;save.c: 47: for(i = 0x2000; i<16384;i++ )
  3769  0EEB  3000               	movlw	0
  3770  0EEC  00B7               	movwf	Serach_Flash_Head@i
  3771  0EED  3020               	movlw	32
  3772  0EEE  00B8               	movwf	Serach_Flash_Head@i+1
  3773  0EEF                     L1:	
  3774  0EEF  3040               	movlw	64
  3775  0EF0  0238               	subwf	Serach_Flash_Head@i+1,w
  3776  0EF1  3000               	movlw	0
  3777  0EF2  1903               	skipnz
  3778  0EF3  0237               	subwf	Serach_Flash_Head@i,w
  3779  0EF4  1803               	btfsc	3,0
  3780  0EF5  0008               	return
  3781                           
  3782                           ;save.c: 48: {
  3783                           ;save.c: 49: data = FLASH_ReadWord(i);
  3784  0EF6  0838               	movf	Serach_Flash_Head@i+1,w
  3785  0EF7  00F4               	movwf	FLASH_ReadWord@flashAddr+1
  3786  0EF8  0837               	movf	Serach_Flash_Head@i,w
  3787  0EF9  00F3               	movwf	FLASH_ReadWord@flashAddr
  3788  0EFA  3189  217D  318E   	fcall	_FLASH_ReadWord
  3789  0EFD  0874               	movf	?_FLASH_ReadWord+1,w
  3790  0EFE  0020               	movlb	0	; select bank0
  3791  0EFF  00B6               	movwf	Serach_Flash_Head@data+1
  3792  0F00  0873               	movf	?_FLASH_ReadWord,w
  3793  0F01  00B5               	movwf	Serach_Flash_Head@data
  3794                           
  3795                           ;save.c: 51: if( data == 0x1555 )
  3796  0F02  3055               	movlw	85
  3797  0F03  0635               	xorwf	Serach_Flash_Head@data,w
  3798  0F04  3015               	movlw	21
  3799  0F05  1903               	skipnz
  3800  0F06  0636               	xorwf	Serach_Flash_Head@data+1,w
  3801  0F07  1D03               	btfss	3,2
  3802  0F08  2F0E               	goto	l5371
  3803                           
  3804                           ;save.c: 52: {
  3805                           ;save.c: 53: count++;
  3806  0F09  3001               	movlw	1
  3807  0F0A  00B3               	movwf	??_Serach_Flash_Head
  3808  0F0B  0833               	movf	??_Serach_Flash_Head,w
  3809  0F0C  07B4               	addwf	Serach_Flash_Head@count,f
  3810                           
  3811                           ;save.c: 54: }
  3812  0F0D  2F33               	goto	l5389
  3813  0F0E                     l5371:	
  3814                           
  3815                           ;save.c: 55: else
  3816                           ;save.c: 56: {
  3817                           ;save.c: 57: if( data == 0x3fff && count >1 )
  3818  0F0E  0A35               	incf	Serach_Flash_Head@data,w
  3819  0F0F  303F               	movlw	63
  3820  0F10  1903               	skipnz
  3821  0F11  0636               	xorwf	Serach_Flash_Head@data+1,w
  3822  0F12  1D03               	btfss	3,2
  3823  0F13  2F20               	goto	l5379
  3824  0F14  3002               	movlw	2
  3825  0F15  0234               	subwf	Serach_Flash_Head@count,w
  3826  0F16  1C03               	skipc
  3827  0F17  2F20               	goto	l5379
  3828                           
  3829                           ;save.c: 58: {
  3830                           ;save.c: 59: Cur_Save_Index = i;
  3831  0F18  0838               	movf	Serach_Flash_Head@i+1,w
  3832  0F19  0021               	movlb	1	; select bank1
  3833  0F1A  00AF               	movwf	(_Cur_Save_Index+1)^(0+128)
  3834  0F1B  0020               	movlb	0	; select bank0
  3835  0F1C  0837               	movf	Serach_Flash_Head@i,w
  3836  0F1D  0021               	movlb	1	; select bank1
  3837  0F1E  00AE               	movwf	_Cur_Save_Index^(0+128)
  3838                           
  3839                           ;save.c: 60: break;
  3840  0F1F  0008               	return
  3841  0F20                     l5379:	
  3842                           ;save.c: 61: }
  3843                           
  3844                           
  3845                           ;save.c: 62: else if( data == 0x3fff )
  3846  0F20  0020               	movlb	0	; select bank0
  3847  0F21  0A35               	incf	Serach_Flash_Head@data,w
  3848  0F22  303F               	movlw	63
  3849  0F23  1903               	skipnz
  3850  0F24  0636               	xorwf	Serach_Flash_Head@data+1,w
  3851  0F25  1D03               	btfss	3,2
  3852  0F26  2F31               	goto	l5387
  3853                           
  3854                           ;save.c: 63: {
  3855                           ;save.c: 64: Cur_Save_Index = i;
  3856  0F27  0838               	movf	Serach_Flash_Head@i+1,w
  3857  0F28  0021               	movlb	1	; select bank1
  3858  0F29  00AF               	movwf	(_Cur_Save_Index+1)^(0+128)
  3859  0F2A  0020               	movlb	0	; select bank0
  3860  0F2B  0837               	movf	Serach_Flash_Head@i,w
  3861  0F2C  0021               	movlb	1	; select bank1
  3862  0F2D  00AE               	movwf	_Cur_Save_Index^(0+128)
  3863                           
  3864                           ;save.c: 65: Write_Flash_finish();
  3865  0F2E  318B  237F         	fcall	_Write_Flash_finish
  3866                           
  3867                           ;save.c: 66: break;
  3868  0F30  0008               	return
  3869  0F31                     l5387:	
  3870                           ;save.c: 67: }
  3871                           
  3872                           
  3873                           ;save.c: 68: else
  3874                           ;save.c: 69: {
  3875                           ;save.c: 70: count = 0;
  3876  0F31  0020               	movlb	0	; select bank0
  3877  0F32  01B4               	clrf	Serach_Flash_Head@count
  3878  0F33                     l5389:	
  3879  0F33  3001               	movlw	1
  3880  0F34  0020               	movlb	0	; select bank0
  3881  0F35  07B7               	addwf	Serach_Flash_Head@i,f
  3882  0F36  3000               	movlw	0
  3883  0F37  3DB8               	addwfc	Serach_Flash_Head@i+1,f
  3884  0F38  2EEF               	goto	L1
  3885  0F39                     __end_of_Serach_Flash_Head:	
  3886                           
  3887                           	psect	text4
  3888  0F39                     __ptext4:	
  3889 ;; *************** function _Save_process *****************
  3890 ;; Defined at:
  3891 ;;		line 120 in file "mcc_generated_files/save.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  var_time        2   49[BANK0 ] unsigned int 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3909 ;;Total ram usage:        4 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    9
  3912 ;; This function calls:
  3913 ;;		_Calculate_Time
  3914 ;;		_Save_Write_word
  3915 ;; This function is called by:
  3916 ;;		_main
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _Save_process
  3922  0F39                     _Save_process:	
  3923                           
  3924                           ;save.c: 122: unsigned int var_time=0;
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _Save_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3928  0F39  0020               	movlb	0	; select bank0
  3929  0F3A  01D1               	clrf	Save_process@var_time
  3930  0F3B  01D2               	clrf	Save_process@var_time+1
  3931                           
  3932                           ;save.c: 123: if( time_count == 1 && Record_flag == 1 )
  3933  0F3C  036D               	decf	_time_count,w
  3934  0F3D  1D03               	btfss	3,2
  3935  0F3E  2F6B               	goto	l5475
  3936  0F3F  036B               	decf	_Record_flag,w
  3937  0F40  1D03               	btfss	3,2
  3938  0F41  2F6B               	goto	l5475
  3939                           
  3940                           ;save.c: 124: {
  3941                           ;save.c: 125: if(Cur_temperature_time_ch1 > 120)
  3942  0F42  3079               	movlw	121
  3943  0F43  0021               	movlb	1	; select bank1
  3944  0F44  0236               	subwf	_Cur_temperature_time_ch1^(0+128),w
  3945  0F45  1C03               	skipc
  3946  0F46  0008               	return
  3947                           
  3948                           ;save.c: 126: {
  3949                           ;save.c: 127: var_time = Calculate_Time();
  3950  0F47  3182  220B  318F   	fcall	_Calculate_Time
  3951  0F4A  0020               	movlb	0	; select bank0
  3952  0F4B  00CF               	movwf	??_Save_process
  3953  0F4C  01D0               	clrf	??_Save_process+1
  3954  0F4D  084F               	movf	??_Save_process,w
  3955  0F4E  00D1               	movwf	Save_process@var_time
  3956  0F4F  0850               	movf	??_Save_process+1,w
  3957  0F50  00D2               	movwf	Save_process@var_time+1
  3958                           
  3959                           ;save.c: 128: var_time |= 0x100;
  3960  0F51  1452               	bsf	Save_process@var_time+1,0
  3961                           
  3962                           ;save.c: 129: if(CH1_state == 1) var_time |= 0x400;
  3963  0F52  0021               	movlb	1	; select bank1
  3964  0F53  0334               	decf	_CH1_state^(0+128),w
  3965  0F54  1D03               	btfss	3,2
  3966  0F55  2F58               	goto	l1009
  3967  0F56  0020               	movlb	0	; select bank0
  3968  0F57  1552               	bsf	Save_process@var_time+1,2
  3969  0F58                     l1009:	
  3970                           
  3971                           ;save.c: 131: var_time |= 0x1000;
  3972  0F58  0020               	movlb	0	; select bank0
  3973  0F59  1652               	bsf	Save_process@var_time+1,4
  3974                           
  3975                           ;save.c: 133: Save_Write_word(var_time);
  3976  0F5A  0852               	movf	Save_process@var_time+1,w
  3977  0F5B  00B4               	movwf	Save_Write_word@data+1
  3978  0F5C  0851               	movf	Save_process@var_time,w
  3979  0F5D  00B3               	movwf	Save_Write_word@data
  3980  0F5E  318C  2477  318F   	fcall	_Save_Write_word
  3981                           
  3982                           ;save.c: 134: Save_Write_word(CH1_temperature);
  3983  0F61  0020               	movlb	0	; select bank0
  3984  0F62  086A               	movf	_CH1_temperature+1,w
  3985  0F63  00B4               	movwf	Save_Write_word@data+1
  3986  0F64  0869               	movf	_CH1_temperature,w
  3987  0F65  00B3               	movwf	Save_Write_word@data
  3988  0F66  318C  2477         	fcall	_Save_Write_word
  3989                           
  3990                           ;save.c: 136: Cur_temperature_time_ch1 = 0;
  3991  0F68  0021               	movlb	1	; select bank1
  3992  0F69  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  3993                           
  3994                           ;save.c: 137: }
  3995                           ;save.c: 138: }
  3996  0F6A  0008               	return
  3997  0F6B                     l5475:	
  3998                           
  3999                           ;save.c: 139: else if(time_count == 3 && Record_flag == 1)
  4000  0F6B  3003               	movlw	3
  4001  0F6C  0020               	movlb	0	; select bank0
  4002  0F6D  066D               	xorwf	_time_count,w
  4003  0F6E  1D03               	btfss	3,2
  4004  0F6F  0008               	return
  4005  0F70  036B               	decf	_Record_flag,w
  4006  0F71  1D03               	btfss	3,2
  4007  0F72  0008               	return
  4008                           
  4009                           ;save.c: 140: {
  4010                           ;save.c: 141: if(Cur_temperature_time_ch2 > 120)
  4011  0F73  3079               	movlw	121
  4012  0F74  0021               	movlb	1	; select bank1
  4013  0F75  0237               	subwf	_Cur_temperature_time_ch2^(0+128),w
  4014  0F76  1C03               	skipc
  4015  0F77  0008               	return
  4016                           
  4017                           ;save.c: 142: {
  4018                           ;save.c: 143: var_time = Calculate_Time();
  4019  0F78  3182  220B  318F   	fcall	_Calculate_Time
  4020  0F7B  0020               	movlb	0	; select bank0
  4021  0F7C  00CF               	movwf	??_Save_process
  4022  0F7D  01D0               	clrf	??_Save_process+1
  4023  0F7E  084F               	movf	??_Save_process,w
  4024  0F7F  00D1               	movwf	Save_process@var_time
  4025  0F80  0850               	movf	??_Save_process+1,w
  4026  0F81  00D2               	movwf	Save_process@var_time+1
  4027                           
  4028                           ;save.c: 144: var_time |= 0x200;
  4029  0F82  14D2               	bsf	Save_process@var_time+1,1
  4030                           
  4031                           ;save.c: 145: if(CH2_state == 1) var_time |= 0x800;
  4032  0F83  0021               	movlb	1	; select bank1
  4033  0F84  0335               	decf	_CH2_state^(0+128),w
  4034  0F85  1D03               	btfss	3,2
  4035  0F86  2F89               	goto	l1013
  4036  0F87  0020               	movlb	0	; select bank0
  4037  0F88  15D2               	bsf	Save_process@var_time+1,3
  4038  0F89                     l1013:	
  4039                           
  4040                           ;save.c: 147: var_time |= 0x1000;
  4041  0F89  0020               	movlb	0	; select bank0
  4042  0F8A  1652               	bsf	Save_process@var_time+1,4
  4043                           
  4044                           ;save.c: 149: Save_Write_word(var_time);
  4045  0F8B  0852               	movf	Save_process@var_time+1,w
  4046  0F8C  00B4               	movwf	Save_Write_word@data+1
  4047  0F8D  0851               	movf	Save_process@var_time,w
  4048  0F8E  00B3               	movwf	Save_Write_word@data
  4049  0F8F  318C  2477  318F   	fcall	_Save_Write_word
  4050                           
  4051                           ;save.c: 150: Save_Write_word(CH2_temperature);
  4052  0F92  0879               	movf	_CH2_temperature+1,w
  4053  0F93  0020               	movlb	0	; select bank0
  4054  0F94  00B4               	movwf	Save_Write_word@data+1
  4055  0F95  0878               	movf	_CH2_temperature,w
  4056  0F96  00B3               	movwf	Save_Write_word@data
  4057  0F97  318C  2477         	fcall	_Save_Write_word
  4058                           
  4059                           ;save.c: 152: Cur_temperature_time_ch2 = 0;
  4060  0F99  0021               	movlb	1	; select bank1
  4061  0F9A  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  4062  0F9B  0008               	return
  4063  0F9C                     __end_of_Save_process:	
  4064                           
  4065                           	psect	text5
  4066  08EF                     __ptext5:	
  4067 ;; *************** function _SYSTEM_Initialize *****************
  4068 ;; Defined at:
  4069 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    4
  4090 ;; This function calls:
  4091 ;;		_ADC_Initialize
  4092 ;;		_EUSART_Initialize
  4093 ;;		_FVR_Initialize
  4094 ;;		_OSCILLATOR_Initialize
  4095 ;;		_PIN_MANAGER_Initialize
  4096 ;;		_SPI_Initialize
  4097 ;;		_TMR0_Initialize
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _SYSTEM_Initialize
  4105  08EF                     _SYSTEM_Initialize:	
  4106                           
  4107                           ;mcc.c: 71: OSCILLATOR_Initialize();
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4111  08EF  3188  203A  3188   	fcall	_OSCILLATOR_Initialize
  4112                           
  4113                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  4114  08F2  318A  22B7  3188   	fcall	_PIN_MANAGER_Initialize
  4115                           
  4116                           ;mcc.c: 73: SPI_Initialize();
  4117  08F5  3188  204B  3188   	fcall	_SPI_Initialize
  4118                           
  4119                           ;mcc.c: 74: EUSART_Initialize();
  4120  08F8  3188  2080  3188   	fcall	_EUSART_Initialize
  4121                           
  4122                           ;mcc.c: 75: ADC_Initialize();
  4123  08FB  3188  2065  3188   	fcall	_ADC_Initialize
  4124                           
  4125                           ;mcc.c: 76: FVR_Initialize();
  4126  08FE  3188  2031  3188   	fcall	_FVR_Initialize
  4127                           
  4128                           ;mcc.c: 77: TMR0_Initialize();
  4129  0901  3188  20A8         	fcall	_TMR0_Initialize
  4130  0903  0008               	return
  4131  0904                     __end_of_SYSTEM_Initialize:	
  4132                           
  4133                           	psect	text6
  4134  08A8                     __ptext6:	
  4135 ;; *************** function _TMR0_Initialize *****************
  4136 ;; Defined at:
  4137 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg, status,2
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;Total ram usage:        1 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    3
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_SYSTEM_Initialize
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           
  4166                           ;psect for function _TMR0_Initialize
  4167  08A8                     _TMR0_Initialize:	
  4168                           
  4169                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4170                           
  4171                           ;incstack = 0
  4172                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4173  08A8  0021               	movlb	1	; select bank1
  4174  08A9  0815               	movf	21,w	;volatile
  4175  08AA  39C0               	andlw	192
  4176  08AB  3817               	iorlw	23
  4177  08AC  0095               	movwf	21	;volatile
  4178                           
  4179                           ;tmr0.c: 73: TMR0 = 0xD9;
  4180  08AD  30D9               	movlw	217
  4181  08AE  0020               	movlb	0	; select bank0
  4182  08AF  0095               	movwf	21	;volatile
  4183                           
  4184                           ;tmr0.c: 76: timer0ReloadVal = 217;
  4185  08B0  30D9               	movlw	217
  4186  08B1  00F3               	movwf	??_TMR0_Initialize
  4187  08B2  0873               	movf	??_TMR0_Initialize,w
  4188  08B3  0021               	movlb	1	; select bank1
  4189  08B4  00EF               	movwf	_timer0ReloadVal^(0+128)	;volatile
  4190                           
  4191                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  4192  08B5  110B               	bcf	11,2	;volatile
  4193                           
  4194                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  4195  08B6  168B               	bsf	11,5	;volatile
  4196  08B7  0008               	return
  4197  08B8                     __end_of_TMR0_Initialize:	
  4198                           
  4199                           	psect	text7
  4200  084B                     __ptext7:	
  4201 ;; *************** function _SPI_Initialize *****************
  4202 ;; Defined at:
  4203 ;;		line 64 in file "mcc_generated_files/spi.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    3
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_SYSTEM_Initialize
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _SPI_Initialize
  4233  084B                     _SPI_Initialize:	
  4234                           
  4235                           ;spi.c: 68: SSP1STAT = 0x00;
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4239  084B  0024               	movlb	4	; select bank4
  4240  084C  0194               	clrf	20	;volatile
  4241                           
  4242                           ;spi.c: 71: SSP1CON1 = 0x30;
  4243  084D  3030               	movlw	48
  4244  084E  0095               	movwf	21	;volatile
  4245                           
  4246                           ;spi.c: 74: SSP1ADD = 0x00;
  4247  084F  0192               	clrf	18	;volatile
  4248  0850  0008               	return
  4249  0851                     __end_of_SPI_Initialize:	
  4250                           
  4251                           	psect	text8
  4252  0AB7                     __ptext8:	
  4253 ;; *************** function _PIN_MANAGER_Initialize *****************
  4254 ;; Defined at:
  4255 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;Total ram usage:        0 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    3
  4276 ;; This function calls:
  4277 ;;		Nothing
  4278 ;; This function is called by:
  4279 ;;		_SYSTEM_Initialize
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           
  4284                           ;psect for function _PIN_MANAGER_Initialize
  4285  0AB7                     _PIN_MANAGER_Initialize:	
  4286                           
  4287                           ;pin_manager.c: 51: LATA = 0x7B;
  4288                           
  4289                           ;incstack = 0
  4290                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4291  0AB7  307B               	movlw	123
  4292  0AB8  0022               	movlb	2	; select bank2
  4293  0AB9  008C               	movwf	12	;volatile
  4294                           
  4295                           ;pin_manager.c: 52: TRISA = 0x80;
  4296  0ABA  3080               	movlw	128
  4297  0ABB  0021               	movlb	1	; select bank1
  4298  0ABC  008C               	movwf	12	;volatile
  4299                           
  4300                           ;pin_manager.c: 53: ANSELA = 0x00;
  4301  0ABD  0023               	movlb	3	; select bank3
  4302  0ABE  018C               	clrf	12	;volatile
  4303                           
  4304                           ;pin_manager.c: 55: LATB = 0x00;
  4305  0ABF  0022               	movlb	2	; select bank2
  4306  0AC0  018D               	clrf	13	;volatile
  4307                           
  4308                           ;pin_manager.c: 56: TRISB = 0xFC;
  4309  0AC1  30FC               	movlw	252
  4310  0AC2  0021               	movlb	1	; select bank1
  4311  0AC3  008D               	movwf	13	;volatile
  4312                           
  4313                           ;pin_manager.c: 57: ANSELB = 0x10;
  4314  0AC4  3010               	movlw	16
  4315  0AC5  0023               	movlb	3	; select bank3
  4316  0AC6  008D               	movwf	13	;volatile
  4317                           
  4318                           ;pin_manager.c: 58: WPUB = 0x2C;
  4319  0AC7  302C               	movlw	44
  4320  0AC8  0024               	movlb	4	; select bank4
  4321  0AC9  008D               	movwf	13	;volatile
  4322                           
  4323                           ;pin_manager.c: 60: LATC = 0x07;
  4324  0ACA  3007               	movlw	7
  4325  0ACB  0022               	movlb	2	; select bank2
  4326  0ACC  008E               	movwf	14	;volatile
  4327                           
  4328                           ;pin_manager.c: 61: TRISC = 0xD0;
  4329  0ACD  30D0               	movlw	208
  4330  0ACE  0021               	movlb	1	; select bank1
  4331  0ACF  008E               	movwf	14	;volatile
  4332                           
  4333                           ;pin_manager.c: 62: ANSELC = 0x00;
  4334  0AD0  0023               	movlb	3	; select bank3
  4335  0AD1  018E               	clrf	14	;volatile
  4336                           
  4337                           ;pin_manager.c: 64: WPUE = 0x00;
  4338  0AD2  0024               	movlb	4	; select bank4
  4339  0AD3  0190               	clrf	16	;volatile
  4340                           
  4341                           ;pin_manager.c: 66: OPTION_REGbits.nWPUEN = 0x00;
  4342  0AD4  0021               	movlb	1	; select bank1
  4343  0AD5  1395               	bcf	21,7	;volatile
  4344                           
  4345                           ;pin_manager.c: 68: APFCON = 0x00;
  4346  0AD6  0022               	movlb	2	; select bank2
  4347  0AD7  019D               	clrf	29	;volatile
  4348  0AD8  0008               	return
  4349  0AD9                     __end_of_PIN_MANAGER_Initialize:	
  4350                           
  4351                           	psect	text9
  4352  083A                     __ptext9:	
  4353 ;; *************** function _OSCILLATOR_Initialize *****************
  4354 ;; Defined at:
  4355 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      void 
  4362 ;; Registers used:
  4363 ;;		wreg, status,2
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        0 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    3
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_SYSTEM_Initialize
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _OSCILLATOR_Initialize
  4385  083A                     _OSCILLATOR_Initialize:	
  4386                           
  4387                           ;mcc.c: 82: OSCCON = 0x68;
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4391  083A  3068               	movlw	104
  4392  083B  0021               	movlb	1	; select bank1
  4393  083C  0099               	movwf	25	;volatile
  4394                           
  4395                           ;mcc.c: 84: OSCSTAT = 0x00;
  4396  083D  019A               	clrf	26	;volatile
  4397  083E  0008               	return
  4398  083F                     __end_of_OSCILLATOR_Initialize:	
  4399                           
  4400                           	psect	text10
  4401  0831                     __ptext10:	
  4402 ;; *************** function _FVR_Initialize *****************
  4403 ;; Defined at:
  4404 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;		None
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      void 
  4411 ;; Registers used:
  4412 ;;		wreg
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;Total ram usage:        0 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    3
  4425 ;; This function calls:
  4426 ;;		Nothing
  4427 ;; This function is called by:
  4428 ;;		_SYSTEM_Initialize
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _FVR_Initialize
  4434  0831                     _FVR_Initialize:	
  4435                           
  4436                           ;fvr.c: 60: FVRCON = 0x82;
  4437                           
  4438                           ;incstack = 0
  4439                           ; Regs used in _FVR_Initialize: [wreg]
  4440  0831  3082               	movlw	130
  4441  0832  0022               	movlb	2	; select bank2
  4442  0833  0097               	movwf	23	;volatile
  4443  0834  0008               	return
  4444  0835                     __end_of_FVR_Initialize:	
  4445                           
  4446                           	psect	text11
  4447  0880                     __ptext11:	
  4448 ;; *************** function _EUSART_Initialize *****************
  4449 ;; Defined at:
  4450 ;;		line 56 in file "mcc_generated_files/eusart.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    3
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_SYSTEM_Initialize
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _EUSART_Initialize
  4480  0880                     _EUSART_Initialize:	
  4481                           
  4482                           ;eusart.c: 60: BAUDCON = 0x48;
  4483                           
  4484                           ;incstack = 0
  4485                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4486  0880  3048               	movlw	72
  4487  0881  0023               	movlb	3	; select bank3
  4488  0882  009F               	movwf	31	;volatile
  4489                           
  4490                           ;eusart.c: 63: RCSTA = 0x80;
  4491  0883  3080               	movlw	128
  4492  0884  009D               	movwf	29	;volatile
  4493                           
  4494                           ;eusart.c: 66: TXSTA = 0x26;
  4495  0885  3026               	movlw	38
  4496  0886  009E               	movwf	30	;volatile
  4497                           
  4498                           ;eusart.c: 69: SPBRGL = 0x67;
  4499  0887  3067               	movlw	103
  4500  0888  009B               	movwf	27	;volatile
  4501                           
  4502                           ;eusart.c: 72: SPBRGH = 0x00;
  4503  0889  019C               	clrf	28	;volatile
  4504  088A  0008               	return
  4505  088B                     __end_of_EUSART_Initialize:	
  4506                           
  4507                           	psect	text12
  4508  0865                     __ptext12:	
  4509 ;; *************** function _ADC_Initialize *****************
  4510 ;; Defined at:
  4511 ;;		line 65 in file "mcc_generated_files/adc.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, status,2
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    3
  4532 ;; This function calls:
  4533 ;;		Nothing
  4534 ;; This function is called by:
  4535 ;;		_SYSTEM_Initialize
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           
  4540                           ;psect for function _ADC_Initialize
  4541  0865                     _ADC_Initialize:	
  4542                           
  4543                           ;adc.c: 69: ADCON0 = 0x01;
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4547  0865  3001               	movlw	1
  4548  0866  0021               	movlb	1	; select bank1
  4549  0867  009D               	movwf	29	;volatile
  4550                           
  4551                           ;adc.c: 72: ADCON1 = 0xE3;
  4552  0868  30E3               	movlw	227
  4553  0869  009E               	movwf	30	;volatile
  4554                           
  4555                           ;adc.c: 75: ADRESL = 0x00;
  4556  086A  019B               	clrf	27	;volatile
  4557                           
  4558                           ;adc.c: 78: ADRESH = 0x00;
  4559  086B  019C               	clrf	28	;volatile
  4560  086C  0008               	return
  4561  086D                     __end_of_ADC_Initialize:	
  4562                           
  4563                           	psect	text13
  4564  0545                     __ptext13:	
  4565 ;; *************** function _Key_Process *****************
  4566 ;; Defined at:
  4567 ;;		line 42 in file "mcc_generated_files/key.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;		None
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  i               2   64[BANK0 ] unsigned int 
  4572 ;;  data_temp       2   61[BANK0 ] unsigned int 
  4573 ;;  gKeyValue       1   63[BANK0 ] unsigned char 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;Total ram usage:        6 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:   12
  4590 ;; This function calls:
  4591 ;;		_EUSART_Write
  4592 ;;		_FLASH_ReadWord
  4593 ;;		_Key_Scan
  4594 ;;		_Save_Write_time
  4595 ;;		_SendCmd_1621
  4596 ;;		_Set_finish_flag
  4597 ;;		_Set_start_flag
  4598 ;;		_Write_Flash_finish
  4599 ;;		_Write_Flash_head
  4600 ;;		_temperature_process
  4601 ;; This function is called by:
  4602 ;;		_main
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function _Key_Process
  4608  0545                     _Key_Process:	
  4609                           
  4610                           ;key.c: 44: unsigned char gKeyValue=0;
  4611                           
  4612                           ;incstack = 0
  4613                           ; Regs used in _Key_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4614  0545  0020               	movlb	0	; select bank0
  4615  0546  01DF               	clrf	Key_Process@gKeyValue
  4616                           
  4617                           ;key.c: 46: unsigned int i;
  4618                           ;key.c: 47: unsigned int data_temp;
  4619                           ;key.c: 49: LongPressSec = 0;
  4620  0547  0021               	movlb	1	; select bank1
  4621  0548  01B8               	clrf	_LongPressSec^(0+128)
  4622                           
  4623                           ;key.c: 50: gKeyValue=Key_Scan();
  4624  0549  318A  22D9  3185   	fcall	_Key_Scan
  4625  054C  0020               	movlb	0	; select bank0
  4626  054D  00DC               	movwf	??_Key_Process
  4627  054E  085C               	movf	??_Key_Process,w
  4628  054F  00DF               	movwf	Key_Process@gKeyValue
  4629                           
  4630                           ;key.c: 51: if(gKeyValue)
  4631  0550  085F               	movf	Key_Process@gKeyValue,w
  4632  0551  1903               	btfsc	3,2
  4633  0552  0008               	return
  4634  0553  2DD0               	goto	l5453
  4635  0554                     l878:	
  4636                           ;key.c: 56: while( !(LongPressSec > 2 || RB5 == 1) ) asm("clrwdt");
  4637                           
  4638                           ;key.c: 54: {
  4639                           ;key.c: 55: case 0x01:
  4640                           
  4641                           ;key.c: 52: {
  4642                           ;key.c: 53: switch(gKeyValue)
  4643                           
  4644  0554  0064               	clrwdt	;# 
  4645  0555                     l5401:	
  4646  0555  3003               	movlw	3
  4647  0556  0021               	movlb	1	; select bank1
  4648  0557  0238               	subwf	_LongPressSec^(0+128),w
  4649  0558  1803               	skipnc
  4650  0559  2D5D               	goto	l5405
  4651  055A  0020               	movlb	0	; select bank0
  4652  055B  1E8D               	btfss	13,5	;volatile
  4653  055C  2D54               	goto	l878
  4654  055D                     l5405:	
  4655                           
  4656                           ;key.c: 57: if(LongPressSec > 2)
  4657  055D  3003               	movlw	3
  4658  055E  0021               	movlb	1	; select bank1
  4659  055F  0238               	subwf	_LongPressSec^(0+128),w
  4660  0560  1C03               	skipc
  4661  0561  2D6A               	goto	l5409
  4662                           
  4663                           ;key.c: 58: {
  4664                           ;key.c: 59: do { LATA2 = 0; } while(0);
  4665  0562  0022               	movlb	2	; select bank2
  4666  0563  110C               	bcf	12,2	;volatile
  4667                           
  4668                           ;key.c: 60: do { LATA3 = 1; } while(0);
  4669  0564  158C               	bsf	12,3	;volatile
  4670                           
  4671                           ;key.c: 61: SendCmd_1621(0x04);
  4672  0565  3004               	movlw	4
  4673  0566  3189  2104  3185   	fcall	_SendCmd_1621
  4674                           
  4675                           ;key.c: 62: }
  4676  0569  2D93               	goto	l890
  4677  056A                     l5409:	
  4678                           
  4679                           ;key.c: 64: else
  4680                           ;key.c: 65: {
  4681                           ;key.c: 66: for(i=0x2000;i<0x2000+1000;i++)
  4682  056A  3000               	movlw	0
  4683  056B  0020               	movlb	0	; select bank0
  4684  056C  00E0               	movwf	Key_Process@i
  4685  056D  3020               	movlw	32
  4686  056E  00E1               	movwf	Key_Process@i+1
  4687  056F                     L2:	
  4688  056F  3023               	movlw	35
  4689  0570  0261               	subwf	Key_Process@i+1,w
  4690  0571  30E8               	movlw	232
  4691  0572  1903               	skipnz
  4692  0573  0260               	subwf	Key_Process@i,w
  4693  0574  1803               	btfsc	3,0
  4694  0575  2D93               	goto	l890
  4695                           
  4696                           ;key.c: 67: {
  4697                           ;key.c: 68: data_temp = FLASH_ReadWord(i);
  4698  0576  0861               	movf	Key_Process@i+1,w
  4699  0577  00F4               	movwf	FLASH_ReadWord@flashAddr+1
  4700  0578  0860               	movf	Key_Process@i,w
  4701  0579  00F3               	movwf	FLASH_ReadWord@flashAddr
  4702  057A  3189  217D  3185   	fcall	_FLASH_ReadWord
  4703  057D  0874               	movf	?_FLASH_ReadWord+1,w
  4704  057E  0020               	movlb	0	; select bank0
  4705  057F  00DE               	movwf	Key_Process@data_temp+1
  4706  0580  0873               	movf	?_FLASH_ReadWord,w
  4707  0581  00DD               	movwf	Key_Process@data_temp
  4708                           
  4709                           ;key.c: 69: EUSART_Write(data_temp>>8);
  4710  0582  085E               	movf	Key_Process@data_temp+1,w
  4711  0583  3188  205D  3185   	fcall	_EUSART_Write
  4712                           
  4713                           ;key.c: 70: EUSART_Write(data_temp&0xff);
  4714  0586  0020               	movlb	0	; select bank0
  4715  0587  085D               	movf	Key_Process@data_temp,w
  4716  0588  3188  205D  3185   	fcall	_EUSART_Write
  4717  058B  0064               	clrwdt	;# 
  4718  058C  3001               	movlw	1
  4719  058D  0020               	movlb	0	; select bank0
  4720  058E  07E0               	addwf	Key_Process@i,f
  4721  058F  3000               	movlw	0
  4722  0590  3DE1               	addwfc	Key_Process@i+1,f
  4723  0591  2D6F               	goto	L2
  4724  0592                     l891:	
  4725                           ;key.c: 72: }
  4726                           ;key.c: 73: }
  4727                           ;key.c: 75: while(RB5 == 0) asm("clrwdt");
  4728                           
  4729  0592  0064               	clrwdt	;# 
  4730  0593                     l890:	
  4731  0593  0020               	movlb	0	; select bank0
  4732  0594  1A8D               	btfsc	13,5	;volatile
  4733  0595  0008               	return
  4734  0596  2D92               	goto	l891
  4735  0597                     l896:	
  4736                           ;key.c: 78: while( !(LongPressSec > 2 || RA7 == 1) )asm("clrwdt");
  4737                           
  4738                           ;key.c: 77: case 0x02:
  4739                           
  4740                           ;key.c: 76: break;
  4741                           
  4742  0597  0064               	clrwdt	;# 
  4743  0598                     l5419:	
  4744  0598  3003               	movlw	3
  4745  0599  0021               	movlb	1	; select bank1
  4746  059A  0238               	subwf	_LongPressSec^(0+128),w
  4747  059B  1803               	skipnc
  4748  059C  2DA0               	goto	l5423
  4749  059D  0020               	movlb	0	; select bank0
  4750  059E  1F8C               	btfss	12,7	;volatile
  4751  059F  2D97               	goto	l896
  4752  05A0                     l5423:	
  4753                           
  4754                           ;key.c: 79: if(LongPressSec > 2)
  4755  05A0  3003               	movlw	3
  4756  05A1  0021               	movlb	1	; select bank1
  4757  05A2  0238               	subwf	_LongPressSec^(0+128),w
  4758  05A3  1C03               	skipc
  4759  05A4  2DC3               	goto	l5447
  4760                           
  4761                           ;key.c: 80: {
  4762                           ;key.c: 81: if(Record_flag == 0)
  4763  05A5  0020               	movlb	0	; select bank0
  4764  05A6  086B               	movf	_Record_flag,w
  4765  05A7  1D03               	btfss	3,2
  4766  05A8  2DBC               	goto	l5443
  4767                           
  4768                           ;key.c: 82: {
  4769                           ;key.c: 83: Set_start_flag();
  4770  05A9  3188  2045  3185   	fcall	_Set_start_flag
  4771                           
  4772                           ;key.c: 84: Write_Flash_head();
  4773  05AC  318B  23AE  3185   	fcall	_Write_Flash_head
  4774                           
  4775                           ;key.c: 85: Save_Write_time();
  4776  05AF  3186  26E7  3185   	fcall	_Save_Write_time
  4777                           
  4778                           ;key.c: 86: Cur_temperature_time_ch1 = 0;
  4779  05B2  0021               	movlb	1	; select bank1
  4780  05B3  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  4781                           
  4782                           ;key.c: 87: Cur_temperature_time_ch2 = 0;
  4783  05B4  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  4784                           
  4785                           ;key.c: 88: CH1_temperature = 0;
  4786  05B5  0020               	movlb	0	; select bank0
  4787  05B6  01E9               	clrf	_CH1_temperature
  4788  05B7  01EA               	clrf	_CH1_temperature+1
  4789                           
  4790                           ;key.c: 89: CH2_temperature = 0;
  4791  05B8  01F8               	clrf	_CH2_temperature
  4792  05B9  01F9               	clrf	_CH2_temperature+1
  4793                           
  4794                           ;key.c: 90: time_count = 0;
  4795  05BA  01ED               	clrf	_time_count
  4796                           
  4797                           ;key.c: 91: }
  4798  05BB  2DCB               	goto	l904
  4799  05BC                     l5443:	
  4800                           
  4801                           ;key.c: 92: else
  4802                           ;key.c: 93: {
  4803                           ;key.c: 94: Set_finish_flag();
  4804  05BC  3188  2035  3185   	fcall	_Set_finish_flag
  4805                           
  4806                           ;key.c: 95: Write_Flash_finish();
  4807  05BF  318B  237F  3185   	fcall	_Write_Flash_finish
  4808                           
  4809                           ;key.c: 96: }
  4810                           ;key.c: 97: }
  4811  05C2  2DCB               	goto	l904
  4812  05C3                     l5447:	
  4813                           
  4814                           ;key.c: 98: else
  4815                           ;key.c: 99: {
  4816                           ;key.c: 100: time_count = 5;
  4817  05C3  3005               	movlw	5
  4818  05C4  0020               	movlb	0	; select bank0
  4819  05C5  00DC               	movwf	??_Key_Process
  4820  05C6  085C               	movf	??_Key_Process,w
  4821  05C7  00ED               	movwf	_time_count
  4822                           
  4823                           ;key.c: 101: temperature_process();
  4824  05C8  318C  24AD  3185   	fcall	_temperature_process
  4825  05CB                     l904:	
  4826                           ;key.c: 102: }
  4827                           ;key.c: 103: while(RA7 == 0)asm("clrwdt");
  4828                           
  4829  05CB  0020               	movlb	0	; select bank0
  4830  05CC  1B8C               	btfsc	12,7	;volatile
  4831  05CD  0008               	return
  4832  05CE  0064               	clrwdt	;# 
  4833  05CF  2DCB               	goto	l904
  4834  05D0                     l5453:	
  4835                           ;key.c: 106: }
  4836                           
  4837                           ;key.c: 105: default:break;
  4838                           
  4839                           ;key.c: 104: break;
  4840                           
  4841  05D0  085F               	movf	Key_Process@gKeyValue,w
  4842                           
  4843                           ; Switch size 1, requested type "space"
  4844                           ; Number of cases is 2, Range of values is 1 to 2
  4845                           ; switch strategies available:
  4846                           ; Name         Instructions Cycles
  4847                           ; simple_byte            7     4 (average)
  4848                           ; direct_byte           13     9 (fixed)
  4849                           ; jumptable            263     9 (fixed)
  4850                           ;	Chosen strategy is simple_byte
  4851  05D1  3A01               	xorlw	1	; case 1
  4852  05D2  1903               	skipnz
  4853  05D3  2D55               	goto	l5401
  4854  05D4  3A03               	xorlw	3	; case 2
  4855  05D5  1903               	skipnz
  4856  05D6  2D98               	goto	l5419
  4857  05D7  2DD9               	goto	l908
  4858  05D8  0008               	return
  4859  05D9                     l908:	
  4860  05D9  0008               	return
  4861  05DA                     __end_of_Key_Process:	
  4862                           
  4863                           	psect	text14
  4864  0CAD                     __ptext14:	
  4865 ;; *************** function _temperature_process *****************
  4866 ;; Defined at:
  4867 ;;		line 381 in file "mcc_generated_files/max31856.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;Total ram usage:        0 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:   11
  4888 ;; This function calls:
  4889 ;;		_Two_Display
  4890 ;;		_one_temperature_trans
  4891 ;;		_temperature_display
  4892 ;;		_time_Display
  4893 ;; This function is called by:
  4894 ;;		_main
  4895 ;;		_Key_Process
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function _temperature_process
  4901  0CAD                     _temperature_process:	
  4902                           
  4903                           ;max31856.c: 383: switch(time_count)
  4904                           
  4905                           ;incstack = 0
  4906                           ; Regs used in _temperature_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4907  0CAD  2CD1               	goto	l5265
  4908  0CAE                     l5233:	
  4909                           ;max31856.c: 384: {
  4910                           ;max31856.c: 385: case 0:
  4911                           
  4912                           
  4913                           ;max31856.c: 386: Two_Display(1);
  4914  0CAE  3001               	movlw	1
  4915  0CAF  318B  23DD  318C   	fcall	_Two_Display
  4916                           
  4917                           ;max31856.c: 387: do { LATA1 = 1; } while(0);
  4918  0CB2  0022               	movlb	2	; select bank2
  4919  0CB3  148C               	bsf	12,1	;volatile
  4920                           
  4921                           ;max31856.c: 388: do { LATA0 = 1; } while(0);
  4922  0CB4  140C               	bsf	12,0	;volatile
  4923                           
  4924                           ;max31856.c: 389: do { LATA0 = 0; } while(0);
  4925  0CB5  100C               	bcf	12,0	;volatile
  4926                           
  4927                           ;max31856.c: 390: one_temperature_trans();
  4928  0CB6  318D  25AC         	fcall	_one_temperature_trans
  4929                           
  4930                           ;max31856.c: 391: do { LATA0 = 1; } while(0);
  4931  0CB8  0022               	movlb	2	; select bank2
  4932  0CB9  140C               	bsf	12,0	;volatile
  4933                           
  4934                           ;max31856.c: 392: break;
  4935  0CBA  0008               	return
  4936  0CBB                     l5245:	
  4937                           ;max31856.c: 393: case 1:
  4938                           
  4939                           
  4940                           ;max31856.c: 394: temperature_display();
  4941  0CBB  318C  24E4         	fcall	_temperature_display
  4942                           
  4943                           ;max31856.c: 395: break;
  4944  0CBD  0008               	return
  4945  0CBE                     l5247:	
  4946                           ;max31856.c: 396: case 2:
  4947                           
  4948                           
  4949                           ;max31856.c: 397: Two_Display(2);
  4950  0CBE  3002               	movlw	2
  4951  0CBF  318B  23DD  318C   	fcall	_Two_Display
  4952                           
  4953                           ;max31856.c: 398: do { LATA0 = 1; } while(0);
  4954  0CC2  0022               	movlb	2	; select bank2
  4955  0CC3  140C               	bsf	12,0	;volatile
  4956                           
  4957                           ;max31856.c: 399: do { LATA1 = 1; } while(0);
  4958  0CC4  148C               	bsf	12,1	;volatile
  4959                           
  4960                           ;max31856.c: 400: do { LATA1 = 0; } while(0);
  4961  0CC5  108C               	bcf	12,1	;volatile
  4962                           
  4963                           ;max31856.c: 401: one_temperature_trans();
  4964  0CC6  318D  25AC         	fcall	_one_temperature_trans
  4965                           
  4966                           ;max31856.c: 402: do { LATA1 = 1; } while(0);
  4967  0CC8  0022               	movlb	2	; select bank2
  4968  0CC9  148C               	bsf	12,1	;volatile
  4969                           
  4970                           ;max31856.c: 403: break;
  4971  0CCA  0008               	return
  4972  0CCB                     l5259:	
  4973                           ;max31856.c: 404: case 3:
  4974                           
  4975                           
  4976                           ;max31856.c: 405: temperature_display();
  4977  0CCB  318C  24E4         	fcall	_temperature_display
  4978                           
  4979                           ;max31856.c: 406: break;
  4980  0CCD  0008               	return
  4981  0CCE                     l5261:	
  4982                           ;max31856.c: 407: case 5:
  4983                           
  4984                           
  4985                           ;max31856.c: 408: time_Display();
  4986  0CCE  3185  25DA         	fcall	_time_Display
  4987                           
  4988                           ;max31856.c: 411: }
  4989                           
  4990                           ;max31856.c: 410: default:break;
  4991                           
  4992                           ;max31856.c: 409: break;
  4993  0CD0  0008               	return
  4994  0CD1                     l5265:	
  4995  0CD1  0020               	movlb	0	; select bank0
  4996  0CD2  086D               	movf	_time_count,w
  4997                           
  4998                           ; Switch size 1, requested type "space"
  4999                           ; Number of cases is 5, Range of values is 0 to 5
  5000                           ; switch strategies available:
  5001                           ; Name         Instructions Cycles
  5002                           ; simple_byte           16     9 (average)
  5003                           ; direct_byte           18     6 (fixed)
  5004                           ; jumptable            260     6 (fixed)
  5005                           ;	Chosen strategy is simple_byte
  5006  0CD3  3A00               	xorlw	0	; case 0
  5007  0CD4  1903               	skipnz
  5008  0CD5  2CAE               	goto	l5233
  5009  0CD6  3A01               	xorlw	1	; case 1
  5010  0CD7  1903               	skipnz
  5011  0CD8  2CBB               	goto	l5245
  5012  0CD9  3A03               	xorlw	3	; case 2
  5013  0CDA  1903               	skipnz
  5014  0CDB  2CBE               	goto	l5247
  5015  0CDC  3A01               	xorlw	1	; case 3
  5016  0CDD  1903               	skipnz
  5017  0CDE  2CCB               	goto	l5259
  5018  0CDF  3A06               	xorlw	6	; case 5
  5019  0CE0  1903               	skipnz
  5020  0CE1  2CCE               	goto	l5261
  5021  0CE2  2CE3               	goto	l589
  5022  0CE3                     l589:	
  5023  0CE3  0008               	return
  5024  0CE4                     __end_of_temperature_process:	
  5025                           
  5026                           	psect	text15
  5027  05DA                     __ptext15:	
  5028 ;; *************** function _time_Display *****************
  5029 ;; Defined at:
  5030 ;;		line 167 in file "mcc_generated_files/ht1621.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  num             4   19[BANK0 ] unsigned char [4]
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;Total ram usage:        7 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    6
  5051 ;; This function calls:
  5052 ;;		_Bq32k_Rtc_Read_Time
  5053 ;;		_WriteAll_1621
  5054 ;;		___awdiv
  5055 ;;		___awmod
  5056 ;; This function is called by:
  5057 ;;		_temperature_process
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           
  5062                           ;psect for function _time_Display
  5063  05DA                     _time_Display:	
  5064                           
  5065                           ;ht1621.c: 169: unsigned char num[4]={0};
  5066                           
  5067                           ;incstack = 0
  5068                           ; Regs used in _time_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5069  05DA  0021               	movlb	1	; select bank1
  5070  05DB  082B               	movf	(time_Display@F2129+3)^(0+128),w
  5071  05DC  0020               	movlb	0	; select bank0
  5072  05DD  00B6               	movwf	time_Display@num+3
  5073  05DE  0021               	movlb	1	; select bank1
  5074  05DF  082A               	movf	(time_Display@F2129+2)^(0+128),w
  5075  05E0  0020               	movlb	0	; select bank0
  5076  05E1  00B5               	movwf	time_Display@num+2
  5077  05E2  0021               	movlb	1	; select bank1
  5078  05E3  0829               	movf	(time_Display@F2129+1)^(0+128),w
  5079  05E4  0020               	movlb	0	; select bank0
  5080  05E5  00B4               	movwf	time_Display@num+1
  5081  05E6  0021               	movlb	1	; select bank1
  5082  05E7  0828               	movf	time_Display@F2129^(0+128),w
  5083  05E8  0020               	movlb	0	; select bank0
  5084  05E9  00B3               	movwf	time_Display@num
  5085                           
  5086                           ;ht1621.c: 170: Bq32k_Rtc_Read_Time(&rtc_tm);
  5087  05EA  30DA               	movlw	(low (_rtc_tm| 0))& (0+255)
  5088  05EB  318F  279C  3185   	fcall	_Bq32k_Rtc_Read_Time
  5089                           
  5090                           ;ht1621.c: 171: num[0] = Dis_TAB[rtc_tm.hours / 10];
  5091  05EE  300A               	movlw	10
  5092  05EF  00F3               	movwf	___awdiv@divisor
  5093  05F0  3000               	movlw	0
  5094  05F1  00F4               	movwf	___awdiv@divisor+1
  5095  05F2  0021               	movlb	1	; select bank1
  5096  05F3  085C               	movf	(_rtc_tm^(0+128)+2),w
  5097  05F4  0020               	movlb	0	; select bank0
  5098  05F5  00B0               	movwf	??_time_Display
  5099  05F6  01B1               	clrf	??_time_Display+1
  5100  05F7  0830               	movf	??_time_Display,w
  5101  05F8  00F5               	movwf	___awdiv@dividend
  5102  05F9  0831               	movf	??_time_Display+1,w
  5103  05FA  00F6               	movwf	___awdiv@dividend+1
  5104  05FB  318E  2693  3185   	fcall	___awdiv
  5105  05FE  0874               	movf	?___awdiv+1,w
  5106  05FF  0085               	movwf	5
  5107  0600  0873               	movf	?___awdiv,w
  5108  0601  0084               	movwf	4
  5109  0602  3000               	movlw	low (_Dis_TAB| (0+32768))
  5110  0603  0784               	addwf	4,f
  5111  0604  3090               	movlw	high (_Dis_TAB| (0+32768))
  5112  0605  3D85               	addwfc	5,f
  5113  0606  0800               	movf	0,w	;code access
  5114  0607  0020               	movlb	0	; select bank0
  5115  0608  00B2               	movwf	??_time_Display+2
  5116  0609  0832               	movf	??_time_Display+2,w
  5117  060A  00B3               	movwf	time_Display@num
  5118                           
  5119                           ;ht1621.c: 172: num[0] |= 0x08;
  5120  060B  15B3               	bsf	time_Display@num,3
  5121                           
  5122                           ;ht1621.c: 173: num[1] = Dis_TAB[rtc_tm.hours % 10];
  5123  060C  300A               	movlw	10
  5124  060D  00F3               	movwf	___awmod@divisor
  5125  060E  3000               	movlw	0
  5126  060F  00F4               	movwf	___awmod@divisor+1
  5127  0610  0021               	movlb	1	; select bank1
  5128  0611  085C               	movf	(_rtc_tm^(0+128)+2),w
  5129  0612  0020               	movlb	0	; select bank0
  5130  0613  00B0               	movwf	??_time_Display
  5131  0614  01B1               	clrf	??_time_Display+1
  5132  0615  0830               	movf	??_time_Display,w
  5133  0616  00F5               	movwf	___awmod@dividend
  5134  0617  0831               	movf	??_time_Display+1,w
  5135  0618  00F6               	movwf	___awmod@dividend+1
  5136  0619  318D  2566  3185   	fcall	___awmod
  5137  061C  0874               	movf	?___awmod+1,w
  5138  061D  0085               	movwf	5
  5139  061E  0873               	movf	?___awmod,w
  5140  061F  0084               	movwf	4
  5141  0620  3000               	movlw	low (_Dis_TAB| (0+32768))
  5142  0621  0784               	addwf	4,f
  5143  0622  3090               	movlw	high (_Dis_TAB| (0+32768))
  5144  0623  3D85               	addwfc	5,f
  5145  0624  0800               	movf	0,w	;code access
  5146  0625  0020               	movlb	0	; select bank0
  5147  0626  00B2               	movwf	??_time_Display+2
  5148  0627  0832               	movf	??_time_Display+2,w
  5149  0628  00B4               	movwf	time_Display@num+1
  5150                           
  5151                           ;ht1621.c: 174: num[2] = Dis_TAB[rtc_tm.minutes / 10];
  5152  0629  300A               	movlw	10
  5153  062A  00F3               	movwf	___awdiv@divisor
  5154  062B  3000               	movlw	0
  5155  062C  00F4               	movwf	___awdiv@divisor+1
  5156  062D  0021               	movlb	1	; select bank1
  5157  062E  085B               	movf	(_rtc_tm^(0+128)+1),w
  5158  062F  0020               	movlb	0	; select bank0
  5159  0630  00B0               	movwf	??_time_Display
  5160  0631  01B1               	clrf	??_time_Display+1
  5161  0632  0830               	movf	??_time_Display,w
  5162  0633  00F5               	movwf	___awdiv@dividend
  5163  0634  0831               	movf	??_time_Display+1,w
  5164  0635  00F6               	movwf	___awdiv@dividend+1
  5165  0636  318E  2693  3185   	fcall	___awdiv
  5166  0639  0874               	movf	?___awdiv+1,w
  5167  063A  0085               	movwf	5
  5168  063B  0873               	movf	?___awdiv,w
  5169  063C  0084               	movwf	4
  5170  063D  3000               	movlw	low (_Dis_TAB| (0+32768))
  5171  063E  0784               	addwf	4,f
  5172  063F  3090               	movlw	high (_Dis_TAB| (0+32768))
  5173  0640  3D85               	addwfc	5,f
  5174  0641  0800               	movf	0,w	;code access
  5175  0642  0020               	movlb	0	; select bank0
  5176  0643  00B2               	movwf	??_time_Display+2
  5177  0644  0832               	movf	??_time_Display+2,w
  5178  0645  00B5               	movwf	time_Display@num+2
  5179                           
  5180                           ;ht1621.c: 175: num[3] = Dis_TAB[rtc_tm.minutes % 10];
  5181  0646  300A               	movlw	10
  5182  0647  00F3               	movwf	___awmod@divisor
  5183  0648  3000               	movlw	0
  5184  0649  00F4               	movwf	___awmod@divisor+1
  5185  064A  0021               	movlb	1	; select bank1
  5186  064B  085B               	movf	(_rtc_tm^(0+128)+1),w
  5187  064C  0020               	movlb	0	; select bank0
  5188  064D  00B0               	movwf	??_time_Display
  5189  064E  01B1               	clrf	??_time_Display+1
  5190  064F  0830               	movf	??_time_Display,w
  5191  0650  00F5               	movwf	___awmod@dividend
  5192  0651  0831               	movf	??_time_Display+1,w
  5193  0652  00F6               	movwf	___awmod@dividend+1
  5194  0653  318D  2566  3185   	fcall	___awmod
  5195  0656  0874               	movf	?___awmod+1,w
  5196  0657  0085               	movwf	5
  5197  0658  0873               	movf	?___awmod,w
  5198  0659  0084               	movwf	4
  5199  065A  3000               	movlw	low (_Dis_TAB| (0+32768))
  5200  065B  0784               	addwf	4,f
  5201  065C  3090               	movlw	high (_Dis_TAB| (0+32768))
  5202  065D  3D85               	addwfc	5,f
  5203  065E  0800               	movf	0,w	;code access
  5204  065F  0020               	movlb	0	; select bank0
  5205  0660  00B2               	movwf	??_time_Display+2
  5206  0661  0832               	movf	??_time_Display+2,w
  5207  0662  00B6               	movwf	time_Display@num+3
  5208                           
  5209                           ;ht1621.c: 176: WriteAll_1621(0, num, 4);
  5210  0663  3033               	movlw	low time_Display@num
  5211  0664  00A0               	movwf	WriteAll_1621@p
  5212  0665  3000               	movlw	high time_Display@num
  5213  0666  00A1               	movwf	WriteAll_1621@p+1
  5214  0667  3004               	movlw	4
  5215  0668  00B0               	movwf	??_time_Display
  5216  0669  0830               	movf	??_time_Display,w
  5217  066A  00A2               	movwf	WriteAll_1621@cnt
  5218  066B  3000               	movlw	0
  5219  066C  318C  240E         	fcall	_WriteAll_1621
  5220  066E  0008               	return
  5221  066F                     __end_of_time_Display:	
  5222                           
  5223                           	psect	text16
  5224  0D66                     __ptext16:	
  5225 ;; *************** function ___awmod *****************
  5226 ;; Defined at:
  5227 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;  divisor         2    3[COMMON] int 
  5230 ;;  dividend        2    5[COMMON] int 
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  sign            1    1[BANK0 ] unsigned char 
  5233 ;;  counter         1    0[BANK0 ] unsigned char 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  2    3[COMMON] int 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5243 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;Total ram usage:        7 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    3
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_time_Display
  5254 ;;		_bin2bcd
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function ___awmod
  5260  0D66                     ___awmod:	
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5264  0D66  0020               	movlb	0	; select bank0
  5265  0D67  01A1               	clrf	___awmod@sign
  5266  0D68  1FF6               	btfss	___awmod@dividend+1,7
  5267  0D69  2D71               	goto	l5071
  5268  0D6A  09F5               	comf	___awmod@dividend,f
  5269  0D6B  09F6               	comf	___awmod@dividend+1,f
  5270  0D6C  0AF5               	incf	___awmod@dividend,f
  5271  0D6D  1903               	skipnz
  5272  0D6E  0AF6               	incf	___awmod@dividend+1,f
  5273  0D6F  01A1               	clrf	___awmod@sign
  5274  0D70  0AA1               	incf	___awmod@sign,f
  5275  0D71                     l5071:	
  5276  0D71  1FF4               	btfss	___awmod@divisor+1,7
  5277  0D72  2D78               	goto	l5075
  5278  0D73  09F3               	comf	___awmod@divisor,f
  5279  0D74  09F4               	comf	___awmod@divisor+1,f
  5280  0D75  0AF3               	incf	___awmod@divisor,f
  5281  0D76  1903               	skipnz
  5282  0D77  0AF4               	incf	___awmod@divisor+1,f
  5283  0D78                     l5075:	
  5284  0D78  0873               	movf	___awmod@divisor,w
  5285  0D79  0474               	iorwf	___awmod@divisor+1,w
  5286  0D7A  1903               	btfsc	3,2
  5287  0D7B  2D9F               	goto	l5093
  5288  0D7C  01A0               	clrf	___awmod@counter
  5289  0D7D  0AA0               	incf	___awmod@counter,f
  5290  0D7E                     l5083:	
  5291  0D7E  1BF4               	btfsc	___awmod@divisor+1,7
  5292  0D7F  2D8A               	goto	l5085
  5293  0D80  3001               	movlw	1
  5294  0D81                     u4635:	
  5295  0D81  35F3               	lslf	___awmod@divisor,f
  5296  0D82  0DF4               	rlf	___awmod@divisor+1,f
  5297  0D83  0B89               	decfsz	9,f
  5298  0D84  2D81               	goto	u4635
  5299  0D85  3001               	movlw	1
  5300  0D86  00F7               	movwf	??___awmod
  5301  0D87  0877               	movf	??___awmod,w
  5302  0D88  07A0               	addwf	___awmod@counter,f
  5303  0D89  2D7E               	goto	l5083
  5304  0D8A                     l5085:	
  5305  0D8A  0874               	movf	___awmod@divisor+1,w
  5306  0D8B  0276               	subwf	___awmod@dividend+1,w
  5307  0D8C  1D03               	skipz
  5308  0D8D  2D90               	goto	u4655
  5309  0D8E  0873               	movf	___awmod@divisor,w
  5310  0D8F  0275               	subwf	___awmod@dividend,w
  5311  0D90                     u4655:	
  5312  0D90  1C03               	skipc
  5313  0D91  2D96               	goto	l5089
  5314  0D92  0873               	movf	___awmod@divisor,w
  5315  0D93  02F5               	subwf	___awmod@dividend,f
  5316  0D94  0874               	movf	___awmod@divisor+1,w
  5317  0D95  3BF6               	subwfb	___awmod@dividend+1,f
  5318  0D96                     l5089:	
  5319  0D96  3001               	movlw	1
  5320  0D97                     u4665:	
  5321  0D97  36F4               	lsrf	___awmod@divisor+1,f
  5322  0D98  0CF3               	rrf	___awmod@divisor,f
  5323  0D99  0B89               	decfsz	9,f
  5324  0D9A  2D97               	goto	u4665
  5325  0D9B  3001               	movlw	1
  5326  0D9C  02A0               	subwf	___awmod@counter,f
  5327  0D9D  1D03               	btfss	3,2
  5328  0D9E  2D8A               	goto	l5085
  5329  0D9F                     l5093:	
  5330  0D9F  0821               	movf	___awmod@sign,w
  5331  0DA0  1903               	btfsc	3,2
  5332  0DA1  2DA7               	goto	l5097
  5333  0DA2  09F5               	comf	___awmod@dividend,f
  5334  0DA3  09F6               	comf	___awmod@dividend+1,f
  5335  0DA4  0AF5               	incf	___awmod@dividend,f
  5336  0DA5  1903               	skipnz
  5337  0DA6  0AF6               	incf	___awmod@dividend+1,f
  5338  0DA7                     l5097:	
  5339  0DA7  0876               	movf	___awmod@dividend+1,w
  5340  0DA8  00F4               	movwf	?___awmod+1
  5341  0DA9  0875               	movf	___awmod@dividend,w
  5342  0DAA  00F3               	movwf	?___awmod
  5343  0DAB  0008               	return
  5344  0DAC                     __end_of___awmod:	
  5345                           
  5346                           	psect	text17
  5347  0E93                     __ptext17:	
  5348 ;; *************** function ___awdiv *****************
  5349 ;; Defined at:
  5350 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  divisor         2    3[COMMON] int 
  5353 ;;  dividend        2    5[COMMON] int 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  quotient        2    2[BANK0 ] int 
  5356 ;;  sign            1    1[BANK0 ] unsigned char 
  5357 ;;  counter         1    0[BANK0 ] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  2    3[COMMON] int 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2, status,0
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;Total ram usage:        9 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    3
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_time_Display
  5378 ;;		_bin2bcd
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function ___awdiv
  5384  0E93                     ___awdiv:	
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5388  0E93  0020               	movlb	0	; select bank0
  5389  0E94  01A1               	clrf	___awdiv@sign
  5390  0E95  1FF4               	btfss	___awdiv@divisor+1,7
  5391  0E96  2E9E               	goto	l5027
  5392  0E97  09F3               	comf	___awdiv@divisor,f
  5393  0E98  09F4               	comf	___awdiv@divisor+1,f
  5394  0E99  0AF3               	incf	___awdiv@divisor,f
  5395  0E9A  1903               	skipnz
  5396  0E9B  0AF4               	incf	___awdiv@divisor+1,f
  5397  0E9C  01A1               	clrf	___awdiv@sign
  5398  0E9D  0AA1               	incf	___awdiv@sign,f
  5399  0E9E                     l5027:	
  5400  0E9E  1FF6               	btfss	___awdiv@dividend+1,7
  5401  0E9F  2EA9               	goto	l5033
  5402  0EA0  09F5               	comf	___awdiv@dividend,f
  5403  0EA1  09F6               	comf	___awdiv@dividend+1,f
  5404  0EA2  0AF5               	incf	___awdiv@dividend,f
  5405  0EA3  1903               	skipnz
  5406  0EA4  0AF6               	incf	___awdiv@dividend+1,f
  5407  0EA5  3001               	movlw	1
  5408  0EA6  00F7               	movwf	??___awdiv
  5409  0EA7  0877               	movf	??___awdiv,w
  5410  0EA8  06A1               	xorwf	___awdiv@sign,f
  5411  0EA9                     l5033:	
  5412  0EA9  01A2               	clrf	___awdiv@quotient
  5413  0EAA  01A3               	clrf	___awdiv@quotient+1
  5414  0EAB  0873               	movf	___awdiv@divisor,w
  5415  0EAC  0474               	iorwf	___awdiv@divisor+1,w
  5416  0EAD  1903               	btfsc	3,2
  5417  0EAE  2ED8               	goto	l5055
  5418  0EAF  01A0               	clrf	___awdiv@counter
  5419  0EB0  0AA0               	incf	___awdiv@counter,f
  5420  0EB1                     l5043:	
  5421  0EB1  1BF4               	btfsc	___awdiv@divisor+1,7
  5422  0EB2  2EBD               	goto	l5045
  5423  0EB3  3001               	movlw	1
  5424  0EB4                     u4535:	
  5425  0EB4  35F3               	lslf	___awdiv@divisor,f
  5426  0EB5  0DF4               	rlf	___awdiv@divisor+1,f
  5427  0EB6  0B89               	decfsz	9,f
  5428  0EB7  2EB4               	goto	u4535
  5429  0EB8  3001               	movlw	1
  5430  0EB9  00F7               	movwf	??___awdiv
  5431  0EBA  0877               	movf	??___awdiv,w
  5432  0EBB  07A0               	addwf	___awdiv@counter,f
  5433  0EBC  2EB1               	goto	l5043
  5434  0EBD                     l5045:	
  5435  0EBD  3001               	movlw	1
  5436  0EBE                     u4555:	
  5437  0EBE  35A2               	lslf	___awdiv@quotient,f
  5438  0EBF  0DA3               	rlf	___awdiv@quotient+1,f
  5439  0EC0  0B89               	decfsz	9,f
  5440  0EC1  2EBE               	goto	u4555
  5441  0EC2  0874               	movf	___awdiv@divisor+1,w
  5442  0EC3  0276               	subwf	___awdiv@dividend+1,w
  5443  0EC4  1D03               	skipz
  5444  0EC5  2EC8               	goto	u4565
  5445  0EC6  0873               	movf	___awdiv@divisor,w
  5446  0EC7  0275               	subwf	___awdiv@dividend,w
  5447  0EC8                     u4565:	
  5448  0EC8  1C03               	skipc
  5449  0EC9  2ECF               	goto	l5051
  5450  0ECA  0873               	movf	___awdiv@divisor,w
  5451  0ECB  02F5               	subwf	___awdiv@dividend,f
  5452  0ECC  0874               	movf	___awdiv@divisor+1,w
  5453  0ECD  3BF6               	subwfb	___awdiv@dividend+1,f
  5454  0ECE  1422               	bsf	___awdiv@quotient,0
  5455  0ECF                     l5051:	
  5456  0ECF  3001               	movlw	1
  5457  0ED0                     u4575:	
  5458  0ED0  36F4               	lsrf	___awdiv@divisor+1,f
  5459  0ED1  0CF3               	rrf	___awdiv@divisor,f
  5460  0ED2  0B89               	decfsz	9,f
  5461  0ED3  2ED0               	goto	u4575
  5462  0ED4  3001               	movlw	1
  5463  0ED5  02A0               	subwf	___awdiv@counter,f
  5464  0ED6  1D03               	btfss	3,2
  5465  0ED7  2EBD               	goto	l5045
  5466  0ED8                     l5055:	
  5467  0ED8  0821               	movf	___awdiv@sign,w
  5468  0ED9  1903               	btfsc	3,2
  5469  0EDA  2EE0               	goto	l5059
  5470  0EDB  09A2               	comf	___awdiv@quotient,f
  5471  0EDC  09A3               	comf	___awdiv@quotient+1,f
  5472  0EDD  0AA2               	incf	___awdiv@quotient,f
  5473  0EDE  1903               	skipnz
  5474  0EDF  0AA3               	incf	___awdiv@quotient+1,f
  5475  0EE0                     l5059:	
  5476  0EE0  0823               	movf	___awdiv@quotient+1,w
  5477  0EE1  00F4               	movwf	?___awdiv+1
  5478  0EE2  0822               	movf	___awdiv@quotient,w
  5479  0EE3  00F3               	movwf	?___awdiv
  5480  0EE4  0008               	return
  5481  0EE5                     __end_of___awdiv:	
  5482                           
  5483                           	psect	text18
  5484  0CE4                     __ptext18:	
  5485 ;; *************** function _temperature_display *****************
  5486 ;; Defined at:
  5487 ;;		line 343 in file "mcc_generated_files/max31856.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;		None
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;Total ram usage:        1 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:   10
  5508 ;; This function calls:
  5509 ;;		_Tc_Display
  5510 ;;		_err_Display
  5511 ;;		_maxim_31856_write_register
  5512 ;;		_maxim_clear_fault_status
  5513 ;;		_tc_temperature_trans
  5514 ;; This function is called by:
  5515 ;;		_temperature_process
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function _temperature_display
  5521  0CE4                     _temperature_display:	
  5522                           
  5523                           ;max31856.c: 345: if(uch_sr==(uint8_t)0x00)
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _temperature_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5527  0CE4  0021               	movlb	1	; select bank1
  5528  0CE5  0843               	movf	_uch_sr^(0+128),w
  5529  0CE6  1D03               	btfss	3,2
  5530  0CE7  2CFD               	goto	l5137
  5531                           
  5532                           ;max31856.c: 346: {
  5533                           ;max31856.c: 347: tc_temperature_trans();
  5534  0CE8  3180  203F  318C   	fcall	_tc_temperature_trans
  5535                           
  5536                           ;max31856.c: 348: Tc_Display();
  5537  0CEB  3184  247D  318C   	fcall	_Tc_Display
  5538                           
  5539                           ;max31856.c: 349: if(time_count == 1)
  5540  0CEE  0020               	movlb	0	; select bank0
  5541  0CEF  036D               	decf	_time_count,w
  5542  0CF0  1D03               	btfss	3,2
  5543  0CF1  2CF5               	goto	l5133
  5544                           
  5545                           ;max31856.c: 350: {
  5546                           ;max31856.c: 351: CH1_state = 0;
  5547  0CF2  0021               	movlb	1	; select bank1
  5548  0CF3  01B4               	clrf	_CH1_state^(0+128)
  5549                           
  5550                           ;max31856.c: 352: }
  5551  0CF4  0008               	return
  5552  0CF5                     l5133:	
  5553                           
  5554                           ;max31856.c: 353: else if(time_count == 3)
  5555  0CF5  3003               	movlw	3
  5556  0CF6  0020               	movlb	0	; select bank0
  5557  0CF7  066D               	xorwf	_time_count,w
  5558  0CF8  1D03               	btfss	3,2
  5559  0CF9  0008               	return
  5560                           
  5561                           ;max31856.c: 354: {
  5562                           ;max31856.c: 355: CH2_state = 0;
  5563  0CFA  0021               	movlb	1	; select bank1
  5564  0CFB  01B5               	clrf	_CH2_state^(0+128)
  5565                           
  5566                           ;max31856.c: 356: }
  5567                           ;max31856.c: 357: }
  5568  0CFC  0008               	return
  5569  0CFD                     l5137:	
  5570                           
  5571                           ;max31856.c: 358: else
  5572                           ;max31856.c: 359: {
  5573                           ;max31856.c: 360: if(time_count == 1)
  5574  0CFD  0020               	movlb	0	; select bank0
  5575  0CFE  036D               	decf	_time_count,w
  5576  0CFF  1D03               	btfss	3,2
  5577  0D00  2D05               	goto	l5141
  5578                           
  5579                           ;max31856.c: 361: {
  5580                           ;max31856.c: 362: CH1_state = 1;
  5581  0D01  0021               	movlb	1	; select bank1
  5582  0D02  01B4               	clrf	_CH1_state^(0+128)
  5583  0D03  0AB4               	incf	_CH1_state^(0+128),f
  5584                           
  5585                           ;max31856.c: 363: }
  5586  0D04  2D0D               	goto	l5145
  5587  0D05                     l5141:	
  5588                           
  5589                           ;max31856.c: 364: else if(time_count == 3)
  5590  0D05  3003               	movlw	3
  5591  0D06  0020               	movlb	0	; select bank0
  5592  0D07  066D               	xorwf	_time_count,w
  5593  0D08  1D03               	btfss	3,2
  5594  0D09  2D0D               	goto	l5145
  5595                           
  5596                           ;max31856.c: 365: {
  5597                           ;max31856.c: 366: CH2_state = 1;
  5598  0D0A  0021               	movlb	1	; select bank1
  5599  0D0B  01B5               	clrf	_CH2_state^(0+128)
  5600  0D0C  0AB5               	incf	_CH2_state^(0+128),f
  5601  0D0D                     l5145:	
  5602                           
  5603                           ;max31856.c: 367: }
  5604                           ;max31856.c: 368: err_Display();
  5605  0D0D  318B  2326  318C   	fcall	_err_Display
  5606                           
  5607                           ;max31856.c: 369: maxim_31856_write_register(0x82, 0xFF);
  5608  0D10  30FF               	movlw	255
  5609  0D11  0020               	movlb	0	; select bank0
  5610  0D12  00DB               	movwf	??_temperature_display
  5611  0D13  085B               	movf	??_temperature_display,w
  5612  0D14  00F4               	movwf	maxim_31856_write_register@uch_register_value
  5613  0D15  3082               	movlw	130
  5614  0D16  3188  208B  318C   	fcall	_maxim_31856_write_register
  5615                           
  5616                           ;max31856.c: 370: maxim_clear_fault_status();
  5617  0D19  3188  2098  318C   	fcall	_maxim_clear_fault_status
  5618                           
  5619                           ;max31856.c: 371: maxim_31856_write_register(0x82, 0x00);
  5620  0D1C  01F4               	clrf	maxim_31856_write_register@uch_register_value
  5621  0D1D  3082               	movlw	130
  5622  0D1E  3188  208B         	fcall	_maxim_31856_write_register
  5623  0D20  0008               	return
  5624  0D21                     __end_of_temperature_display:	
  5625                           
  5626                           	psect	text19
  5627  003F                     __ptext19:	
  5628 ;; *************** function _tc_temperature_trans *****************
  5629 ;; Defined at:
  5630 ;;		line 168 in file "mcc_generated_files/max31856.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;		None
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;  temperature_    2   57[BANK0 ] unsigned int 
  5635 ;;  var_time        2   55[BANK0 ] unsigned int 
  5636 ;;  temperature_    2   53[BANK0 ] unsigned int 
  5637 ;;  temperature_    2   51[BANK0 ] unsigned int 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  1    wreg      void 
  5640 ;; Registers used:
  5641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5650 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5651 ;;Total ram usage:       12 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    9
  5654 ;; This function calls:
  5655 ;;		_Calculate_Time
  5656 ;;		_Save_Write_word
  5657 ;; This function is called by:
  5658 ;;		_temperature_display
  5659 ;; This function uses a non-reentrant model
  5660 ;;
  5661                           
  5662                           
  5663                           ;psect for function _tc_temperature_trans
  5664  003F                     _tc_temperature_trans:	
  5665                           
  5666                           ;max31856.c: 170: unsigned int temperature_absolute = 0;
  5667                           
  5668                           ;incstack = 0
  5669                           ; Regs used in _tc_temperature_trans: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5670  003F  0020               	movlb	0	; select bank0
  5671  0040  01D5               	clrf	tc_temperature_trans@temperature_absolute
  5672  0041  01D6               	clrf	tc_temperature_trans@temperature_absolute+1
  5673                           
  5674                           ;max31856.c: 171: unsigned int temperature_temp = 0;
  5675  0042  01D9               	clrf	tc_temperature_trans@temperature_temp
  5676  0043  01DA               	clrf	tc_temperature_trans@temperature_temp+1
  5677                           
  5678                           ;max31856.c: 172: unsigned int temperature_back = 0;
  5679  0044  01D3               	clrf	tc_temperature_trans@temperature_back
  5680  0045  01D4               	clrf	tc_temperature_trans@temperature_back+1
  5681                           
  5682                           ;max31856.c: 173: unsigned int var_time=0;
  5683  0046  01D7               	clrf	tc_temperature_trans@var_time
  5684  0047  01D8               	clrf	tc_temperature_trans@var_time+1
  5685                           
  5686                           ;max31856.c: 174: temperature_value = 0;
  5687  0048  3000               	movlw	0
  5688  0049  00E8               	movwf	_temperature_value+3
  5689  004A  3000               	movlw	0
  5690  004B  00E7               	movwf	_temperature_value+2
  5691  004C  3000               	movlw	0
  5692  004D  00E6               	movwf	_temperature_value+1
  5693  004E  3000               	movlw	0
  5694  004F  00E5               	movwf	_temperature_value
  5695                           
  5696                           ;max31856.c: 175: temperature_value = (((uch_ltcbh&0x3f)<<8) | (uch_ltcbm) )>>1;
  5697  0050  303F               	movlw	63
  5698  0051  0021               	movlb	1	; select bank1
  5699  0052  053F               	andwf	_uch_ltcbh^(0+128),w
  5700  0053  0020               	movlb	0	; select bank0
  5701  0054  00CF               	movwf	??_tc_temperature_trans
  5702  0055  084F               	movf	??_tc_temperature_trans,w
  5703  0056  00D1               	movwf	??_tc_temperature_trans+2
  5704  0057  0021               	movlb	1	; select bank1
  5705  0058  0841               	movf	_uch_ltcbm^(0+128),w
  5706  0059  0020               	movlb	0	; select bank0
  5707  005A  00D0               	movwf	??_tc_temperature_trans+1
  5708  005B  0D51               	rlf	??_tc_temperature_trans+2,w
  5709  005C  0CD1               	rrf	??_tc_temperature_trans+2,f
  5710  005D  0CD0               	rrf	??_tc_temperature_trans+1,f
  5711  005E  0850               	movf	??_tc_temperature_trans+1,w
  5712  005F  00E5               	movwf	_temperature_value
  5713  0060  0851               	movf	??_tc_temperature_trans+2,w
  5714  0061  00E6               	movwf	_temperature_value+1
  5715  0062  0D89               	rlf	9,f
  5716  0063  3B89               	subwfb	9,f
  5717  0064  0989               	comf	9,f
  5718  0065  00E7               	movwf	_temperature_value+2
  5719  0066  00E8               	movwf	_temperature_value+3
  5720                           
  5721                           ;max31856.c: 176: if(uch_ltcbh & 0x80) temperature_value |=0x2000;
  5722  0067  0021               	movlb	1	; select bank1
  5723  0068  1FBF               	btfss	_uch_ltcbh^(0+128),7
  5724  0069  286C               	goto	l4847
  5725  006A  0020               	movlb	0	; select bank0
  5726  006B  16E6               	bsf	_temperature_value+1,5
  5727  006C                     l4847:	
  5728                           
  5729                           ;max31856.c: 177: temperature_temp = temperature_value;
  5730  006C  0020               	movlb	0	; select bank0
  5731  006D  0866               	movf	_temperature_value+1,w
  5732  006E  00DA               	movwf	tc_temperature_trans@temperature_temp+1
  5733  006F  0865               	movf	_temperature_value,w
  5734  0070  00D9               	movwf	tc_temperature_trans@temperature_temp
  5735                           
  5736                           ;max31856.c: 180: if(time_count == 1 && Record_flag == 1)
  5737  0071  036D               	decf	_time_count,w
  5738  0072  1D03               	btfss	3,2
  5739  0073  2901               	goto	l4901
  5740  0074  036B               	decf	_Record_flag,w
  5741  0075  1D03               	btfss	3,2
  5742  0076  2901               	goto	l4901
  5743                           
  5744                           ;max31856.c: 181: {
  5745                           ;max31856.c: 182: temperature_back = CH1_temperature;
  5746  0077  086A               	movf	_CH1_temperature+1,w
  5747  0078  00D4               	movwf	tc_temperature_trans@temperature_back+1
  5748  0079  0869               	movf	_CH1_temperature,w
  5749  007A  00D3               	movwf	tc_temperature_trans@temperature_back
  5750                           
  5751                           ;max31856.c: 183: if( CH1_temperature & 0x2000 != temperature_temp & 0x2000)
  5752  007B  3020               	movlw	32
  5753  007C  065A               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5754  007D  0459               	iorwf	tc_temperature_trans@temperature_temp,w
  5755  007E  1903               	btfsc	3,2
  5756  007F  2882               	goto	u4190
  5757  0080  3001               	movlw	1
  5758  0081  2883               	goto	u4200
  5759  0082                     u4190:	
  5760  0082  3000               	movlw	0
  5761  0083                     u4200:	
  5762  0083  00CF               	movwf	??_tc_temperature_trans
  5763  0084  01D0               	clrf	??_tc_temperature_trans+1
  5764  0085  0869               	movf	_CH1_temperature,w
  5765  0086  054F               	andwf	??_tc_temperature_trans,w
  5766  0087  00D1               	movwf	??_tc_temperature_trans+2
  5767  0088  086A               	movf	_CH1_temperature+1,w
  5768  0089  0550               	andwf	??_tc_temperature_trans+1,w
  5769  008A  00D2               	movwf	??_tc_temperature_trans+3
  5770  008B  1AD2               	btfsc	??_tc_temperature_trans+3,5
  5771  008C  28D3               	goto	L7
  5772                           
  5773                           ;max31856.c: 196: else
  5774                           ;max31856.c: 197: {
  5775                           ;max31856.c: 198: if(CH1_temperature & 0x2000) CH1_temperature=0x3FFF-CH1_temperature + 
      +                          1 ;
  5776                           
  5777                           ;max31856.c: 195: }
  5778                           
  5779                           ;max31856.c: 194: CH1_temperature = temperature_value;
  5780                           
  5781                           ;max31856.c: 193: Cur_temperature_time_ch1 = 0;
  5782                           
  5783                           ;max31856.c: 192: Save_Write_word(temperature_value);
  5784                           
  5785                           ;max31856.c: 191: Save_Write_word(var_time);
  5786                           
  5787                           ;max31856.c: 189: var_time |= 0x2000;
  5788                           
  5789                           ;max31856.c: 187: if(CH1_state == 1) var_time |= 0x400;
  5790                           
  5791                           ;max31856.c: 186: var_time |= 0x100;
  5792                           
  5793                           ;max31856.c: 184: {
  5794                           ;max31856.c: 185: var_time = Calculate_Time();
  5795  008D  1EEA               	btfss	_CH1_temperature+1,5
  5796  008E  289C               	goto	l4873
  5797  008F  0969               	comf	_CH1_temperature,w
  5798  0090  00CF               	movwf	??_tc_temperature_trans
  5799  0091  096A               	comf	_CH1_temperature+1,w
  5800  0092  00D0               	movwf	??_tc_temperature_trans+1
  5801  0093  0ACF               	incf	??_tc_temperature_trans,f
  5802  0094  1903               	skipnz
  5803  0095  0AD0               	incf	??_tc_temperature_trans+1,f
  5804  0096  084F               	movf	??_tc_temperature_trans,w
  5805  0097  3E00               	addlw	0
  5806  0098  00E9               	movwf	_CH1_temperature
  5807  0099  3040               	movlw	64
  5808  009A  3D50               	addwfc	??_tc_temperature_trans+1,w
  5809  009B  00EA               	movwf	_CH1_temperature+1
  5810  009C                     l4873:	
  5811                           
  5812                           ;max31856.c: 199: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  5813  009C  1EDA               	btfss	tc_temperature_trans@temperature_temp+1,5
  5814  009D  28AB               	goto	l4877
  5815  009E  0959               	comf	tc_temperature_trans@temperature_temp,w
  5816  009F  00CF               	movwf	??_tc_temperature_trans
  5817  00A0  095A               	comf	tc_temperature_trans@temperature_temp+1,w
  5818  00A1  00D0               	movwf	??_tc_temperature_trans+1
  5819  00A2  0ACF               	incf	??_tc_temperature_trans,f
  5820  00A3  1903               	skipnz
  5821  00A4  0AD0               	incf	??_tc_temperature_trans+1,f
  5822  00A5  084F               	movf	??_tc_temperature_trans,w
  5823  00A6  3E00               	addlw	0
  5824  00A7  00D9               	movwf	tc_temperature_trans@temperature_temp
  5825  00A8  3040               	movlw	64
  5826  00A9  3D50               	addwfc	??_tc_temperature_trans+1,w
  5827  00AA  00DA               	movwf	tc_temperature_trans@temperature_temp+1
  5828  00AB                     l4877:	
  5829                           
  5830                           ;max31856.c: 200: if( temperature_temp > CH1_temperature ) temperature_absolute = temper
      +                          ature_temp - CH1_temperature;
  5831  00AB  085A               	movf	tc_temperature_trans@temperature_temp+1,w
  5832  00AC  026A               	subwf	_CH1_temperature+1,w
  5833  00AD  1D03               	skipz
  5834  00AE  28B1               	goto	u4255
  5835  00AF  0859               	movf	tc_temperature_trans@temperature_temp,w
  5836  00B0  0269               	subwf	_CH1_temperature,w
  5837  00B1                     u4255:	
  5838  00B1  1803               	skipnc
  5839  00B2  28BF               	goto	l4881
  5840  00B3  0969               	comf	_CH1_temperature,w
  5841  00B4  00CF               	movwf	??_tc_temperature_trans
  5842  00B5  096A               	comf	_CH1_temperature+1,w
  5843  00B6  00D0               	movwf	??_tc_temperature_trans+1
  5844  00B7  0ACF               	incf	??_tc_temperature_trans,f
  5845  00B8  1903               	skipnz
  5846  00B9  0AD0               	incf	??_tc_temperature_trans+1,f
  5847  00BA  0859               	movf	tc_temperature_trans@temperature_temp,w
  5848  00BB  074F               	addwf	??_tc_temperature_trans,w
  5849  00BC  00D5               	movwf	tc_temperature_trans@temperature_absolute
  5850  00BD  085A               	movf	tc_temperature_trans@temperature_temp+1,w
  5851  00BE  28CA               	goto	L3
  5852  00BF                     l4881:	
  5853                           
  5854                           ;max31856.c: 201: else temperature_absolute = CH1_temperature - temperature_temp;
  5855  00BF  0959               	comf	tc_temperature_trans@temperature_temp,w
  5856  00C0  00CF               	movwf	??_tc_temperature_trans
  5857  00C1  095A               	comf	tc_temperature_trans@temperature_temp+1,w
  5858  00C2  00D0               	movwf	??_tc_temperature_trans+1
  5859  00C3  0ACF               	incf	??_tc_temperature_trans,f
  5860  00C4  1903               	skipnz
  5861  00C5  0AD0               	incf	??_tc_temperature_trans+1,f
  5862  00C6  0869               	movf	_CH1_temperature,w
  5863  00C7  074F               	addwf	??_tc_temperature_trans,w
  5864  00C8  00D5               	movwf	tc_temperature_trans@temperature_absolute
  5865  00C9  086A               	movf	_CH1_temperature+1,w
  5866  00CA                     L3:	
  5867  00CA  3D50               	addwfc	??_tc_temperature_trans+1,w
  5868  00CB  00D6               	movwf	tc_temperature_trans@temperature_absolute+1
  5869                           
  5870                           ;max31856.c: 202: if( temperature_absolute > 4)
  5871  00CC  3000               	movlw	0
  5872  00CD  0256               	subwf	tc_temperature_trans@temperature_absolute+1,w
  5873  00CE  3005               	movlw	5
  5874  00CF  1903               	skipnz
  5875  00D0  0255               	subwf	tc_temperature_trans@temperature_absolute,w
  5876  00D1  1C03               	skipc
  5877  00D2  28FC               	goto	l4899
  5878  00D3                     L7:	
  5879                           
  5880                           ;max31856.c: 203: {
  5881                           ;max31856.c: 204: var_time = Calculate_Time();
  5882  00D3  3182  220B  3180   	fcall	_Calculate_Time
  5883  00D6  0020               	movlb	0	; select bank0
  5884  00D7  00CF               	movwf	??_tc_temperature_trans
  5885  00D8  01D0               	clrf	??_tc_temperature_trans+1
  5886  00D9  084F               	movf	??_tc_temperature_trans,w
  5887  00DA  00D7               	movwf	tc_temperature_trans@var_time
  5888  00DB  0850               	movf	??_tc_temperature_trans+1,w
  5889  00DC  00D8               	movwf	tc_temperature_trans@var_time+1
  5890                           
  5891                           ;max31856.c: 205: var_time |= 0x100;
  5892  00DD  1458               	bsf	tc_temperature_trans@var_time+1,0
  5893                           
  5894                           ;max31856.c: 206: if(CH1_state == 1) var_time |= 0x400;
  5895  00DE  0021               	movlb	1	; select bank1
  5896  00DF  0334               	decf	_CH1_state^(0+128),w
  5897  00E0  1D03               	btfss	3,2
  5898  00E1  28E4               	goto	l517
  5899  00E2  0020               	movlb	0	; select bank0
  5900  00E3  1558               	bsf	tc_temperature_trans@var_time+1,2
  5901  00E4                     l517:	
  5902                           
  5903                           ;max31856.c: 208: var_time |= 0x2000;
  5904  00E4  0020               	movlb	0	; select bank0
  5905  00E5  16D8               	bsf	tc_temperature_trans@var_time+1,5
  5906                           
  5907                           ;max31856.c: 210: Save_Write_word(var_time);
  5908  00E6  0858               	movf	tc_temperature_trans@var_time+1,w
  5909  00E7  00B4               	movwf	Save_Write_word@data+1
  5910  00E8  0857               	movf	tc_temperature_trans@var_time,w
  5911  00E9  00B3               	movwf	Save_Write_word@data
  5912  00EA  318C  2477  3180   	fcall	_Save_Write_word
  5913                           
  5914                           ;max31856.c: 211: Save_Write_word(temperature_value);
  5915  00ED  0020               	movlb	0	; select bank0
  5916  00EE  0866               	movf	_temperature_value+1,w
  5917  00EF  00B4               	movwf	Save_Write_word@data+1
  5918  00F0  0865               	movf	_temperature_value,w
  5919  00F1  00B3               	movwf	Save_Write_word@data
  5920  00F2  318C  2477  3180   	fcall	_Save_Write_word
  5921                           
  5922                           ;max31856.c: 212: Cur_temperature_time_ch1 = 0;
  5923  00F5  0021               	movlb	1	; select bank1
  5924  00F6  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  5925                           
  5926                           ;max31856.c: 213: CH1_temperature = temperature_value;
  5927  00F7  0020               	movlb	0	; select bank0
  5928  00F8  0866               	movf	_temperature_value+1,w
  5929  00F9  00EA               	movwf	_CH1_temperature+1
  5930  00FA  0865               	movf	_temperature_value,w
  5931  00FB  28FF               	goto	L4
  5932  00FC                     l4899:	
  5933                           ;max31856.c: 214: }
  5934                           
  5935                           
  5936                           ;max31856.c: 215: else
  5937                           ;max31856.c: 216: {
  5938                           ;max31856.c: 217: CH1_temperature = temperature_back;
  5939  00FC  0854               	movf	tc_temperature_trans@temperature_back+1,w
  5940  00FD  00EA               	movwf	_CH1_temperature+1
  5941  00FE  0853               	movf	tc_temperature_trans@temperature_back,w
  5942  00FF                     L4:	
  5943  00FF  00E9               	movwf	_CH1_temperature
  5944                           
  5945                           ;max31856.c: 218: }
  5946                           ;max31856.c: 219: }
  5947                           ;max31856.c: 221: }
  5948  0100  2991               	goto	l519
  5949  0101                     l4901:	
  5950                           
  5951                           ;max31856.c: 222: else if( time_count == 3 && Record_flag == 1)
  5952  0101  3003               	movlw	3
  5953  0102  066D               	xorwf	_time_count,w
  5954  0103  1D03               	btfss	3,2
  5955  0104  2991               	goto	l519
  5956  0105  036B               	decf	_Record_flag,w
  5957  0106  1D03               	btfss	3,2
  5958  0107  2991               	goto	l519
  5959                           
  5960                           ;max31856.c: 223: {
  5961                           ;max31856.c: 224: temperature_back = CH2_temperature;
  5962  0108  0879               	movf	_CH2_temperature+1,w
  5963  0109  00D4               	movwf	tc_temperature_trans@temperature_back+1
  5964  010A  0878               	movf	_CH2_temperature,w
  5965  010B  00D3               	movwf	tc_temperature_trans@temperature_back
  5966                           
  5967                           ;max31856.c: 225: if( CH2_temperature & 0x2000 != temperature_temp & 0x2000)
  5968  010C  3020               	movlw	32
  5969  010D  065A               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5970  010E  0459               	iorwf	tc_temperature_trans@temperature_temp,w
  5971  010F  1903               	btfsc	3,2
  5972  0110  2913               	goto	u4300
  5973  0111  3001               	movlw	1
  5974  0112  2914               	goto	u4310
  5975  0113                     u4300:	
  5976  0113  3000               	movlw	0
  5977  0114                     u4310:	
  5978  0114  00CF               	movwf	??_tc_temperature_trans
  5979  0115  01D0               	clrf	??_tc_temperature_trans+1
  5980  0116  0878               	movf	_CH2_temperature,w
  5981  0117  054F               	andwf	??_tc_temperature_trans,w
  5982  0118  00D1               	movwf	??_tc_temperature_trans+2
  5983  0119  0879               	movf	_CH2_temperature+1,w
  5984  011A  0550               	andwf	??_tc_temperature_trans+1,w
  5985  011B  00D2               	movwf	??_tc_temperature_trans+3
  5986  011C  1AD2               	btfsc	??_tc_temperature_trans+3,5
  5987  011D  2964               	goto	L8
  5988                           
  5989                           ;max31856.c: 238: else
  5990                           ;max31856.c: 239: {
  5991                           ;max31856.c: 240: if(CH2_temperature & 0x2000) CH2_temperature=0x3FFF-CH2_temperature + 
      +                          1 ;
  5992                           
  5993                           ;max31856.c: 237: }
  5994                           
  5995                           ;max31856.c: 236: CH2_temperature = temperature_value;
  5996                           
  5997                           ;max31856.c: 235: Cur_temperature_time_ch2 = 0;
  5998                           
  5999                           ;max31856.c: 234: Save_Write_word(temperature_value);
  6000                           
  6001                           ;max31856.c: 233: Save_Write_word(var_time);
  6002                           
  6003                           ;max31856.c: 231: var_time |= 0x2000;
  6004                           
  6005                           ;max31856.c: 229: if(CH2_state == 1) var_time |= 0x800;
  6006                           
  6007                           ;max31856.c: 228: var_time |= 0x200;
  6008                           
  6009                           ;max31856.c: 226: {
  6010                           ;max31856.c: 227: var_time = Calculate_Time();
  6011  011E  1EF9               	btfss	_CH2_temperature+1,5
  6012  011F  292D               	goto	l4925
  6013  0120  0978               	comf	_CH2_temperature,w
  6014  0121  00CF               	movwf	??_tc_temperature_trans
  6015  0122  0979               	comf	_CH2_temperature+1,w
  6016  0123  00D0               	movwf	??_tc_temperature_trans+1
  6017  0124  0ACF               	incf	??_tc_temperature_trans,f
  6018  0125  1903               	skipnz
  6019  0126  0AD0               	incf	??_tc_temperature_trans+1,f
  6020  0127  084F               	movf	??_tc_temperature_trans,w
  6021  0128  3E00               	addlw	0
  6022  0129  00F8               	movwf	_CH2_temperature
  6023  012A  3040               	movlw	64
  6024  012B  3D50               	addwfc	??_tc_temperature_trans+1,w
  6025  012C  00F9               	movwf	_CH2_temperature+1
  6026  012D                     l4925:	
  6027                           
  6028                           ;max31856.c: 241: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  6029  012D  1EDA               	btfss	tc_temperature_trans@temperature_temp+1,5
  6030  012E  293C               	goto	l4929
  6031  012F  0959               	comf	tc_temperature_trans@temperature_temp,w
  6032  0130  00CF               	movwf	??_tc_temperature_trans
  6033  0131  095A               	comf	tc_temperature_trans@temperature_temp+1,w
  6034  0132  00D0               	movwf	??_tc_temperature_trans+1
  6035  0133  0ACF               	incf	??_tc_temperature_trans,f
  6036  0134  1903               	skipnz
  6037  0135  0AD0               	incf	??_tc_temperature_trans+1,f
  6038  0136  084F               	movf	??_tc_temperature_trans,w
  6039  0137  3E00               	addlw	0
  6040  0138  00D9               	movwf	tc_temperature_trans@temperature_temp
  6041  0139  3040               	movlw	64
  6042  013A  3D50               	addwfc	??_tc_temperature_trans+1,w
  6043  013B  00DA               	movwf	tc_temperature_trans@temperature_temp+1
  6044  013C                     l4929:	
  6045                           
  6046                           ;max31856.c: 242: if( temperature_temp > CH2_temperature ) temperature_absolute = temper
      +                          ature_temp - CH2_temperature;
  6047  013C  085A               	movf	tc_temperature_trans@temperature_temp+1,w
  6048  013D  0279               	subwf	_CH2_temperature+1,w
  6049  013E  1D03               	skipz
  6050  013F  2942               	goto	u4365
  6051  0140  0859               	movf	tc_temperature_trans@temperature_temp,w
  6052  0141  0278               	subwf	_CH2_temperature,w
  6053  0142                     u4365:	
  6054  0142  1803               	skipnc
  6055  0143  2950               	goto	l4933
  6056  0144  0978               	comf	_CH2_temperature,w
  6057  0145  00CF               	movwf	??_tc_temperature_trans
  6058  0146  0979               	comf	_CH2_temperature+1,w
  6059  0147  00D0               	movwf	??_tc_temperature_trans+1
  6060  0148  0ACF               	incf	??_tc_temperature_trans,f
  6061  0149  1903               	skipnz
  6062  014A  0AD0               	incf	??_tc_temperature_trans+1,f
  6063  014B  0859               	movf	tc_temperature_trans@temperature_temp,w
  6064  014C  074F               	addwf	??_tc_temperature_trans,w
  6065  014D  00D5               	movwf	tc_temperature_trans@temperature_absolute
  6066  014E  085A               	movf	tc_temperature_trans@temperature_temp+1,w
  6067  014F  295B               	goto	L5
  6068  0150                     l4933:	
  6069                           
  6070                           ;max31856.c: 243: else temperature_absolute = CH2_temperature - temperature_temp;
  6071  0150  0959               	comf	tc_temperature_trans@temperature_temp,w
  6072  0151  00CF               	movwf	??_tc_temperature_trans
  6073  0152  095A               	comf	tc_temperature_trans@temperature_temp+1,w
  6074  0153  00D0               	movwf	??_tc_temperature_trans+1
  6075  0154  0ACF               	incf	??_tc_temperature_trans,f
  6076  0155  1903               	skipnz
  6077  0156  0AD0               	incf	??_tc_temperature_trans+1,f
  6078  0157  0878               	movf	_CH2_temperature,w
  6079  0158  074F               	addwf	??_tc_temperature_trans,w
  6080  0159  00D5               	movwf	tc_temperature_trans@temperature_absolute
  6081  015A  0879               	movf	_CH2_temperature+1,w
  6082  015B                     L5:	
  6083  015B  3D50               	addwfc	??_tc_temperature_trans+1,w
  6084  015C  00D6               	movwf	tc_temperature_trans@temperature_absolute+1
  6085                           
  6086                           ;max31856.c: 244: if( temperature_absolute > 4)
  6087  015D  3000               	movlw	0
  6088  015E  0256               	subwf	tc_temperature_trans@temperature_absolute+1,w
  6089  015F  3005               	movlw	5
  6090  0160  1903               	skipnz
  6091  0161  0255               	subwf	tc_temperature_trans@temperature_absolute,w
  6092  0162  1C03               	skipc
  6093  0163  298D               	goto	l4951
  6094  0164                     L8:	
  6095                           
  6096                           ;max31856.c: 245: {
  6097                           ;max31856.c: 246: var_time = Calculate_Time();
  6098  0164  3182  220B  3180   	fcall	_Calculate_Time
  6099  0167  0020               	movlb	0	; select bank0
  6100  0168  00CF               	movwf	??_tc_temperature_trans
  6101  0169  01D0               	clrf	??_tc_temperature_trans+1
  6102  016A  084F               	movf	??_tc_temperature_trans,w
  6103  016B  00D7               	movwf	tc_temperature_trans@var_time
  6104  016C  0850               	movf	??_tc_temperature_trans+1,w
  6105  016D  00D8               	movwf	tc_temperature_trans@var_time+1
  6106                           
  6107                           ;max31856.c: 247: var_time |= 0x200;
  6108  016E  14D8               	bsf	tc_temperature_trans@var_time+1,1
  6109                           
  6110                           ;max31856.c: 248: if(CH2_state == 1) var_time |= 0x800;
  6111  016F  0021               	movlb	1	; select bank1
  6112  0170  0335               	decf	_CH2_state^(0+128),w
  6113  0171  1D03               	btfss	3,2
  6114  0172  2975               	goto	l529
  6115  0173  0020               	movlb	0	; select bank0
  6116  0174  15D8               	bsf	tc_temperature_trans@var_time+1,3
  6117  0175                     l529:	
  6118                           
  6119                           ;max31856.c: 250: var_time |= 0x2000;
  6120  0175  0020               	movlb	0	; select bank0
  6121  0176  16D8               	bsf	tc_temperature_trans@var_time+1,5
  6122                           
  6123                           ;max31856.c: 252: Save_Write_word(var_time);
  6124  0177  0858               	movf	tc_temperature_trans@var_time+1,w
  6125  0178  00B4               	movwf	Save_Write_word@data+1
  6126  0179  0857               	movf	tc_temperature_trans@var_time,w
  6127  017A  00B3               	movwf	Save_Write_word@data
  6128  017B  318C  2477  3180   	fcall	_Save_Write_word
  6129                           
  6130                           ;max31856.c: 253: Save_Write_word(temperature_value);
  6131  017E  0020               	movlb	0	; select bank0
  6132  017F  0866               	movf	_temperature_value+1,w
  6133  0180  00B4               	movwf	Save_Write_word@data+1
  6134  0181  0865               	movf	_temperature_value,w
  6135  0182  00B3               	movwf	Save_Write_word@data
  6136  0183  318C  2477  3180   	fcall	_Save_Write_word
  6137                           
  6138                           ;max31856.c: 254: Cur_temperature_time_ch2 = 0;
  6139  0186  0021               	movlb	1	; select bank1
  6140  0187  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  6141                           
  6142                           ;max31856.c: 255: CH2_temperature = temperature_value;
  6143  0188  0020               	movlb	0	; select bank0
  6144  0189  0866               	movf	_temperature_value+1,w
  6145  018A  00F9               	movwf	_CH2_temperature+1
  6146  018B  0865               	movf	_temperature_value,w
  6147  018C  2990               	goto	L6
  6148  018D                     l4951:	
  6149                           ;max31856.c: 256: }
  6150                           
  6151                           
  6152                           ;max31856.c: 257: else
  6153                           ;max31856.c: 258: {
  6154                           ;max31856.c: 259: CH2_temperature = temperature_back;
  6155  018D  0854               	movf	tc_temperature_trans@temperature_back+1,w
  6156  018E  00F9               	movwf	_CH2_temperature+1
  6157  018F  0853               	movf	tc_temperature_trans@temperature_back,w
  6158  0190                     L6:	
  6159  0190  00F8               	movwf	_CH2_temperature
  6160  0191                     l519:	
  6161                           
  6162                           ;max31856.c: 260: }
  6163                           ;max31856.c: 261: }
  6164                           ;max31856.c: 263: }
  6165                           ;max31856.c: 265: temperature_temp = temperature_value;
  6166  0191  0866               	movf	_temperature_value+1,w
  6167  0192  00DA               	movwf	tc_temperature_trans@temperature_temp+1
  6168  0193  0865               	movf	_temperature_value,w
  6169  0194  00D9               	movwf	tc_temperature_trans@temperature_temp
  6170                           
  6171                           ;max31856.c: 266: if((uch_ltcbh&0x80)==0x80)
  6172  0195  0021               	movlb	1	; select bank1
  6173  0196  1FBF               	btfss	_uch_ltcbh^(0+128),7
  6174  0197  29D8               	goto	l4969
  6175                           
  6176                           ;max31856.c: 267: {
  6177                           ;max31856.c: 268: temperature_sign = 1;
  6178  0198  01BA               	clrf	_temperature_sign^(0+128)
  6179  0199  0ABA               	incf	_temperature_sign^(0+128),f
  6180                           
  6181                           ;max31856.c: 269: temperature_temp=0x3FFF-temperature_temp + 1 ;
  6182  019A  0020               	movlb	0	; select bank0
  6183  019B  0959               	comf	tc_temperature_trans@temperature_temp,w
  6184  019C  00CF               	movwf	??_tc_temperature_trans
  6185  019D  095A               	comf	tc_temperature_trans@temperature_temp+1,w
  6186  019E  00D0               	movwf	??_tc_temperature_trans+1
  6187  019F  0ACF               	incf	??_tc_temperature_trans,f
  6188  01A0  1903               	skipnz
  6189  01A1  0AD0               	incf	??_tc_temperature_trans+1,f
  6190  01A2  084F               	movf	??_tc_temperature_trans,w
  6191  01A3  3E00               	addlw	0
  6192  01A4  00D9               	movwf	tc_temperature_trans@temperature_temp
  6193  01A5  3040               	movlw	64
  6194  01A6  3D50               	addwfc	??_tc_temperature_trans+1,w
  6195  01A7  00DA               	movwf	tc_temperature_trans@temperature_temp+1
  6196                           
  6197                           ;max31856.c: 271: temperature_int = temperature_temp>>3;
  6198  01A8  085A               	movf	tc_temperature_trans@temperature_temp+1,w
  6199  01A9  00D0               	movwf	??_tc_temperature_trans+1
  6200  01AA  0859               	movf	tc_temperature_trans@temperature_temp,w
  6201  01AB  00CF               	movwf	??_tc_temperature_trans
  6202  01AC  36D0               	lsrf	??_tc_temperature_trans+1,f
  6203  01AD  0CCF               	rrf	??_tc_temperature_trans,f
  6204  01AE  36D0               	lsrf	??_tc_temperature_trans+1,f
  6205  01AF  0CCF               	rrf	??_tc_temperature_trans,f
  6206  01B0  36D0               	lsrf	??_tc_temperature_trans+1,f
  6207  01B1  0CCF               	rrf	??_tc_temperature_trans,f
  6208  01B2  084F               	movf	??_tc_temperature_trans,w
  6209  01B3  0021               	movlb	1	; select bank1
  6210  01B4  00B2               	movwf	_temperature_int^(0+128)
  6211  01B5  0020               	movlb	0	; select bank0
  6212  01B6  0850               	movf	??_tc_temperature_trans+1,w
  6213  01B7  0021               	movlb	1	; select bank1
  6214  01B8  00B3               	movwf	(_temperature_int+1)^(0+128)
  6215                           
  6216                           ;max31856.c: 272: temperature_decimal = temperature_temp & 0x07;
  6217  01B9  0020               	movlb	0	; select bank0
  6218  01BA  0859               	movf	tc_temperature_trans@temperature_temp,w
  6219  01BB  3907               	andlw	7
  6220  01BC  00CF               	movwf	??_tc_temperature_trans
  6221  01BD  084F               	movf	??_tc_temperature_trans,w
  6222  01BE  00EC               	movwf	_temperature_decimal
  6223                           
  6224                           ;max31856.c: 273: if(temperature_decimal > 3) temperature_decimal++;
  6225  01BF  3004               	movlw	4
  6226  01C0  026C               	subwf	_temperature_decimal,w
  6227  01C1  1C03               	skipc
  6228  01C2  29C7               	goto	l532
  6229  01C3  3001               	movlw	1
  6230  01C4  00CF               	movwf	??_tc_temperature_trans
  6231  01C5  084F               	movf	??_tc_temperature_trans,w
  6232  01C6  07EC               	addwf	_temperature_decimal,f
  6233  01C7                     l532:	
  6234                           
  6235                           ;max31856.c: 274: if(( temperature_decimal == 3 || temperature_decimal == 8 ) && (temper
      +                          ature_int & 0x01)) temperature_decimal++;
  6236  01C7  3003               	movlw	3
  6237  01C8  066C               	xorwf	_temperature_decimal,w
  6238  01C9  1903               	btfsc	3,2
  6239  01CA  29CF               	goto	l535
  6240  01CB  3008               	movlw	8
  6241  01CC  066C               	xorwf	_temperature_decimal,w
  6242  01CD  1D03               	btfss	3,2
  6243  01CE  0008               	return
  6244  01CF                     l535:	
  6245  01CF  0021               	movlb	1	; select bank1
  6246  01D0  1C32               	btfss	_temperature_int^(0+128),0
  6247  01D1  0008               	return
  6248  01D2  3001               	movlw	1
  6249  01D3  0020               	movlb	0	; select bank0
  6250  01D4  00CF               	movwf	??_tc_temperature_trans
  6251  01D5  084F               	movf	??_tc_temperature_trans,w
  6252  01D6  07EC               	addwf	_temperature_decimal,f
  6253                           
  6254                           ;max31856.c: 275: }
  6255  01D7  0008               	return
  6256  01D8                     l4969:	
  6257                           
  6258                           ;max31856.c: 276: else
  6259                           ;max31856.c: 277: {
  6260                           ;max31856.c: 278: temperature_sign = 0;
  6261  01D8  0021               	movlb	1	; select bank1
  6262  01D9  01BA               	clrf	_temperature_sign^(0+128)
  6263                           
  6264                           ;max31856.c: 279: temperature_int = temperature_temp>>3;
  6265  01DA  0020               	movlb	0	; select bank0
  6266  01DB  085A               	movf	tc_temperature_trans@temperature_temp+1,w
  6267  01DC  00D0               	movwf	??_tc_temperature_trans+1
  6268  01DD  0859               	movf	tc_temperature_trans@temperature_temp,w
  6269  01DE  00CF               	movwf	??_tc_temperature_trans
  6270  01DF  36D0               	lsrf	??_tc_temperature_trans+1,f
  6271  01E0  0CCF               	rrf	??_tc_temperature_trans,f
  6272  01E1  36D0               	lsrf	??_tc_temperature_trans+1,f
  6273  01E2  0CCF               	rrf	??_tc_temperature_trans,f
  6274  01E3  36D0               	lsrf	??_tc_temperature_trans+1,f
  6275  01E4  0CCF               	rrf	??_tc_temperature_trans,f
  6276  01E5  084F               	movf	??_tc_temperature_trans,w
  6277  01E6  0021               	movlb	1	; select bank1
  6278  01E7  00B2               	movwf	_temperature_int^(0+128)
  6279  01E8  0020               	movlb	0	; select bank0
  6280  01E9  0850               	movf	??_tc_temperature_trans+1,w
  6281  01EA  0021               	movlb	1	; select bank1
  6282  01EB  00B3               	movwf	(_temperature_int+1)^(0+128)
  6283                           
  6284                           ;max31856.c: 280: temperature_decimal = temperature_temp & 0x07;
  6285  01EC  0020               	movlb	0	; select bank0
  6286  01ED  0859               	movf	tc_temperature_trans@temperature_temp,w
  6287  01EE  3907               	andlw	7
  6288  01EF  00CF               	movwf	??_tc_temperature_trans
  6289  01F0  084F               	movf	??_tc_temperature_trans,w
  6290  01F1  00EC               	movwf	_temperature_decimal
  6291                           
  6292                           ;max31856.c: 281: if(temperature_decimal > 3) temperature_decimal++;
  6293  01F2  3004               	movlw	4
  6294  01F3  026C               	subwf	_temperature_decimal,w
  6295  01F4  1C03               	skipc
  6296  01F5  29FA               	goto	l537
  6297  01F6  3001               	movlw	1
  6298  01F7  00CF               	movwf	??_tc_temperature_trans
  6299  01F8  084F               	movf	??_tc_temperature_trans,w
  6300  01F9  07EC               	addwf	_temperature_decimal,f
  6301  01FA                     l537:	
  6302                           
  6303                           ;max31856.c: 282: if((temperature_decimal == 4 || temperature_decimal == 8) && (temperat
      +                          ure_int & 0x01)) temperature_decimal++;
  6304  01FA  3004               	movlw	4
  6305  01FB  066C               	xorwf	_temperature_decimal,w
  6306  01FC  1903               	btfsc	3,2
  6307  01FD  2A02               	goto	l540
  6308  01FE  3008               	movlw	8
  6309  01FF  066C               	xorwf	_temperature_decimal,w
  6310  0200  1D03               	btfss	3,2
  6311  0201  0008               	return
  6312  0202                     l540:	
  6313  0202  0021               	movlb	1	; select bank1
  6314  0203  1C32               	btfss	_temperature_int^(0+128),0
  6315  0204  0008               	return
  6316  0205  3001               	movlw	1
  6317  0206  0020               	movlb	0	; select bank0
  6318  0207  00CF               	movwf	??_tc_temperature_trans
  6319  0208  084F               	movf	??_tc_temperature_trans,w
  6320  0209  07EC               	addwf	_temperature_decimal,f
  6321  020A  0008               	return
  6322  020B                     __end_of_tc_temperature_trans:	
  6323                           
  6324                           	psect	text20
  6325  020B                     __ptext20:	
  6326 ;; *************** function _Calculate_Time *****************
  6327 ;; Defined at:
  6328 ;;		line 163 in file "mcc_generated_files/save.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;		None
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;  temp2           4   43[BANK0 ] unsigned long 
  6333 ;;  temp1           4   39[BANK0 ] unsigned long 
  6334 ;;  temp            4   35[BANK0 ] unsigned long 
  6335 ;; Return value:  Size  Location     Type
  6336 ;;                  1    wreg      unsigned char 
  6337 ;; Registers used:
  6338 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6339 ;; Tracked objects:
  6340 ;;		On entry : 0/0
  6341 ;;		On exit  : 0/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6345 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;Total ram usage:       22 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:    8
  6351 ;; This function calls:
  6352 ;;		_Bq32k_Rtc_Read_Time
  6353 ;;		_Save_Write_time
  6354 ;;		_Write_Flash_finish
  6355 ;;		_Write_Flash_head
  6356 ;;		___wmul
  6357 ;; This function is called by:
  6358 ;;		_tc_temperature_trans
  6359 ;;		_Save_process
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _Calculate_Time
  6365  020B                     _Calculate_Time:	
  6366                           
  6367                           ;save.c: 165: unsigned long temp = 0 ;
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _Calculate_Time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6371  020B  3000               	movlw	0
  6372  020C  0020               	movlb	0	; select bank0
  6373  020D  00C6               	movwf	Calculate_Time@temp+3
  6374  020E  3000               	movlw	0
  6375  020F  00C5               	movwf	Calculate_Time@temp+2
  6376  0210  3000               	movlw	0
  6377  0211  00C4               	movwf	Calculate_Time@temp+1
  6378  0212  3000               	movlw	0
  6379  0213  00C3               	movwf	Calculate_Time@temp
  6380                           
  6381                           ;save.c: 166: unsigned long temp1 = 0 ;
  6382  0214  3000               	movlw	0
  6383  0215  00CA               	movwf	Calculate_Time@temp1+3
  6384  0216  3000               	movlw	0
  6385  0217  00C9               	movwf	Calculate_Time@temp1+2
  6386  0218  3000               	movlw	0
  6387  0219  00C8               	movwf	Calculate_Time@temp1+1
  6388  021A  3000               	movlw	0
  6389  021B  00C7               	movwf	Calculate_Time@temp1
  6390                           
  6391                           ;save.c: 167: unsigned long temp2 = 0 ;
  6392  021C  3000               	movlw	0
  6393  021D  00CE               	movwf	Calculate_Time@temp2+3
  6394  021E  3000               	movlw	0
  6395  021F  00CD               	movwf	Calculate_Time@temp2+2
  6396  0220  3000               	movlw	0
  6397  0221  00CC               	movwf	Calculate_Time@temp2+1
  6398  0222  3000               	movlw	0
  6399  0223  00CB               	movwf	Calculate_Time@temp2
  6400                           
  6401                           ;save.c: 168: Bq32k_Rtc_Read_Time(&rtc_tm);
  6402  0224  30DA               	movlw	(low (_rtc_tm| 0))& (0+255)
  6403  0225  318F  279C  3182   	fcall	_Bq32k_Rtc_Read_Time
  6404                           
  6405                           ;save.c: 169: if( time_count == 1 )
  6406  0228  0020               	movlb	0	; select bank0
  6407  0229  036D               	decf	_time_count,w
  6408  022A  1D03               	btfss	3,2
  6409  022B  2AE0               	goto	l4737
  6410                           
  6411                           ;save.c: 170: {
  6412                           ;save.c: 171: if(rtc_tm.date != rtc_save_ch1.date)
  6413  022C  0021               	movlb	1	; select bank1
  6414  022D  085E               	movf	(_rtc_tm^(0+128)+4),w
  6415  022E  0650               	xorwf	(_rtc_save_ch1^(0+128)+4),w
  6416  022F  1D03               	btfss	3,2
  6417  0230  2AE9               	goto	l4741
  6418                           
  6419                           ;save.c: 183: else
  6420                           ;save.c: 184: {
  6421                           ;save.c: 185: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6422                           
  6423                           ;save.c: 182: }
  6424                           
  6425                           ;save.c: 181: time_count = 0;
  6426                           
  6427                           ;save.c: 178: Cur_temperature_time_ch2 = 0;
  6428                           
  6429                           ;save.c: 177: Cur_temperature_time_ch1 = 0;
  6430                           
  6431                           ;save.c: 176: Save_Write_time();
  6432                           
  6433                           ;save.c: 175: Write_Flash_head();
  6434                           
  6435                           ;save.c: 172: {
  6436                           ;save.c: 174: Write_Flash_finish();
  6437  0231  0021               	movlb	1	; select bank1
  6438  0232  085A               	movf	_rtc_tm^(0+128),w
  6439  0233  0020               	movlb	0	; select bank0
  6440  0234  00B9               	movwf	??_Calculate_Time
  6441  0235  01BA               	clrf	??_Calculate_Time+1
  6442  0236  0021               	movlb	1	; select bank1
  6443  0237  085C               	movf	(_rtc_tm^(0+128)+2),w
  6444  0238  0020               	movlb	0	; select bank0
  6445  0239  00BB               	movwf	??_Calculate_Time+2
  6446  023A  01BC               	clrf	??_Calculate_Time+3
  6447  023B  083B               	movf	??_Calculate_Time+2,w
  6448  023C  00F3               	movwf	___wmul@multiplier
  6449  023D  083C               	movf	??_Calculate_Time+3,w
  6450  023E  00F4               	movwf	___wmul@multiplier+1
  6451  023F  3010               	movlw	16
  6452  0240  00F5               	movwf	___wmul@multiplicand
  6453  0241  300E               	movlw	14
  6454  0242  00F6               	movwf	___wmul@multiplicand+1
  6455  0243  318A  2259  3182   	fcall	___wmul
  6456  0246  0873               	movf	?___wmul,w
  6457  0247  0020               	movlb	0	; select bank0
  6458  0248  00BD               	movwf	??_Calculate_Time+4
  6459  0249  0874               	movf	?___wmul+1,w
  6460  024A  00BE               	movwf	??_Calculate_Time+5
  6461  024B  0021               	movlb	1	; select bank1
  6462  024C  085B               	movf	(_rtc_tm^(0+128)+1),w
  6463  024D  0020               	movlb	0	; select bank0
  6464  024E  00BF               	movwf	??_Calculate_Time+6
  6465  024F  01C0               	clrf	??_Calculate_Time+7
  6466  0250  083F               	movf	??_Calculate_Time+6,w
  6467  0251  00F3               	movwf	___wmul@multiplier
  6468  0252  0840               	movf	??_Calculate_Time+7,w
  6469  0253  00F4               	movwf	___wmul@multiplier+1
  6470  0254  303C               	movlw	60
  6471  0255  00F5               	movwf	___wmul@multiplicand
  6472  0256  3000               	movlw	0
  6473  0257  00F6               	movwf	___wmul@multiplicand+1
  6474  0258  318A  2259  3182   	fcall	___wmul
  6475  025B  0873               	movf	?___wmul,w
  6476  025C  0020               	movlb	0	; select bank0
  6477  025D  073D               	addwf	??_Calculate_Time+4,w
  6478  025E  00C1               	movwf	??_Calculate_Time+8
  6479  025F  0874               	movf	?___wmul+1,w
  6480  0260  3D3E               	addwfc	??_Calculate_Time+5,w
  6481  0261  00C2               	movwf	??_Calculate_Time+9
  6482  0262  0839               	movf	??_Calculate_Time,w
  6483  0263  0741               	addwf	??_Calculate_Time+8,w
  6484  0264  00C7               	movwf	Calculate_Time@temp1
  6485  0265  083A               	movf	??_Calculate_Time+1,w
  6486  0266  3D42               	addwfc	??_Calculate_Time+9,w
  6487  0267  00C8               	movwf	Calculate_Time@temp1+1
  6488  0268  01C9               	clrf	Calculate_Time@temp1+2
  6489  0269  1BC8               	btfsc	Calculate_Time@temp1+1,7
  6490  026A  03C9               	decf	Calculate_Time@temp1+2,f
  6491  026B  0849               	movf	Calculate_Time@temp1+2,w
  6492  026C  00CA               	movwf	Calculate_Time@temp1+3
  6493                           
  6494                           ;save.c: 186: temp2 = rtc_save_ch1.hours*3600+rtc_save_ch1.minutes*60+rtc_save_ch1.secon
      +                          ds;
  6495  026D  0021               	movlb	1	; select bank1
  6496  026E  084C               	movf	_rtc_save_ch1^(0+128),w
  6497  026F  0020               	movlb	0	; select bank0
  6498  0270  00B9               	movwf	??_Calculate_Time
  6499  0271  01BA               	clrf	??_Calculate_Time+1
  6500  0272  0021               	movlb	1	; select bank1
  6501  0273  084E               	movf	(_rtc_save_ch1^(0+128)+2),w
  6502  0274  0020               	movlb	0	; select bank0
  6503  0275  00BB               	movwf	??_Calculate_Time+2
  6504  0276  01BC               	clrf	??_Calculate_Time+3
  6505  0277  083B               	movf	??_Calculate_Time+2,w
  6506  0278  00F3               	movwf	___wmul@multiplier
  6507  0279  083C               	movf	??_Calculate_Time+3,w
  6508  027A  00F4               	movwf	___wmul@multiplier+1
  6509  027B  3010               	movlw	16
  6510  027C  00F5               	movwf	___wmul@multiplicand
  6511  027D  300E               	movlw	14
  6512  027E  00F6               	movwf	___wmul@multiplicand+1
  6513  027F  318A  2259  3182   	fcall	___wmul
  6514  0282  0873               	movf	?___wmul,w
  6515  0283  0020               	movlb	0	; select bank0
  6516  0284  00BD               	movwf	??_Calculate_Time+4
  6517  0285  0874               	movf	?___wmul+1,w
  6518  0286  00BE               	movwf	??_Calculate_Time+5
  6519  0287  0021               	movlb	1	; select bank1
  6520  0288  084D               	movf	(_rtc_save_ch1^(0+128)+1),w
  6521  0289  0020               	movlb	0	; select bank0
  6522  028A  00BF               	movwf	??_Calculate_Time+6
  6523  028B  01C0               	clrf	??_Calculate_Time+7
  6524  028C  083F               	movf	??_Calculate_Time+6,w
  6525  028D  00F3               	movwf	___wmul@multiplier
  6526  028E  0840               	movf	??_Calculate_Time+7,w
  6527  028F  00F4               	movwf	___wmul@multiplier+1
  6528  0290  303C               	movlw	60
  6529  0291  00F5               	movwf	___wmul@multiplicand
  6530  0292  3000               	movlw	0
  6531  0293  00F6               	movwf	___wmul@multiplicand+1
  6532  0294  318A  2259  3182   	fcall	___wmul
  6533  0297  0873               	movf	?___wmul,w
  6534  0298  0020               	movlb	0	; select bank0
  6535  0299  073D               	addwf	??_Calculate_Time+4,w
  6536  029A  00C1               	movwf	??_Calculate_Time+8
  6537  029B  0874               	movf	?___wmul+1,w
  6538  029C  3D3E               	addwfc	??_Calculate_Time+5,w
  6539  029D  00C2               	movwf	??_Calculate_Time+9
  6540  029E  0839               	movf	??_Calculate_Time,w
  6541  029F  0741               	addwf	??_Calculate_Time+8,w
  6542  02A0  00CB               	movwf	Calculate_Time@temp2
  6543  02A1  083A               	movf	??_Calculate_Time+1,w
  6544  02A2  3D42               	addwfc	??_Calculate_Time+9,w
  6545  02A3  00CC               	movwf	Calculate_Time@temp2+1
  6546  02A4  01CD               	clrf	Calculate_Time@temp2+2
  6547  02A5  1BCC               	btfsc	Calculate_Time@temp2+1,7
  6548  02A6  03CD               	decf	Calculate_Time@temp2+2,f
  6549  02A7  084D               	movf	Calculate_Time@temp2+2,w
  6550  02A8  00CE               	movwf	Calculate_Time@temp2+3
  6551                           
  6552                           ;save.c: 187: temp = temp1 - temp2;
  6553  02A9  0847               	movf	Calculate_Time@temp1,w
  6554  02AA  00B9               	movwf	??_Calculate_Time
  6555  02AB  0848               	movf	Calculate_Time@temp1+1,w
  6556  02AC  00BA               	movwf	??_Calculate_Time+1
  6557  02AD  0849               	movf	Calculate_Time@temp1+2,w
  6558  02AE  00BB               	movwf	??_Calculate_Time+2
  6559  02AF  084A               	movf	Calculate_Time@temp1+3,w
  6560  02B0  00BC               	movwf	??_Calculate_Time+3
  6561  02B1  094B               	comf	Calculate_Time@temp2,w
  6562  02B2  00BD               	movwf	??_Calculate_Time+4
  6563  02B3  094C               	comf	Calculate_Time@temp2+1,w
  6564  02B4  00BE               	movwf	??_Calculate_Time+5
  6565  02B5  094D               	comf	Calculate_Time@temp2+2,w
  6566  02B6  00BF               	movwf	??_Calculate_Time+6
  6567  02B7  094E               	comf	Calculate_Time@temp2+3,w
  6568  02B8  00C0               	movwf	??_Calculate_Time+7
  6569  02B9  0ABD               	incf	??_Calculate_Time+4,f
  6570  02BA  1903               	skipnz
  6571  02BB  0ABE               	incf	??_Calculate_Time+5,f
  6572  02BC  1903               	skipnz
  6573  02BD  0ABF               	incf	??_Calculate_Time+6,f
  6574  02BE  1903               	skipnz
  6575  02BF  0AC0               	incf	??_Calculate_Time+7,f
  6576  02C0  083D               	movf	??_Calculate_Time+4,w
  6577  02C1  07B9               	addwf	??_Calculate_Time,f
  6578  02C2  083E               	movf	??_Calculate_Time+5,w
  6579  02C3  3DBA               	addwfc	??_Calculate_Time+1,f
  6580  02C4  083F               	movf	??_Calculate_Time+6,w
  6581  02C5  3DBB               	addwfc	??_Calculate_Time+2,f
  6582  02C6  0840               	movf	??_Calculate_Time+7,w
  6583  02C7  3DBC               	addwfc	??_Calculate_Time+3,f
  6584  02C8  083C               	movf	??_Calculate_Time+3,w
  6585  02C9  00C6               	movwf	Calculate_Time@temp+3
  6586  02CA  083B               	movf	??_Calculate_Time+2,w
  6587  02CB  00C5               	movwf	Calculate_Time@temp+2
  6588  02CC  083A               	movf	??_Calculate_Time+1,w
  6589  02CD  00C4               	movwf	Calculate_Time@temp+1
  6590  02CE  0839               	movf	??_Calculate_Time,w
  6591  02CF  00C3               	movwf	Calculate_Time@temp
  6592                           
  6593                           ;save.c: 188: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  6594  02D0  30CC               	movlw	low (_rtc_save_ch1| 0)
  6595  02D1  0086               	movwf	6
  6596  02D2  0187               	clrf	7
  6597  02D3  30DA               	movlw	low (_rtc_tm| 0)
  6598  02D4  0084               	movwf	4
  6599  02D5  0185               	clrf	5
  6600  02D6  3007               	movlw	7
  6601  02D7  0020               	movlb	0	; select bank0
  6602  02D8  00B9               	movwf	??_Calculate_Time
  6603  02D9                     u398m0:	
  6604  02D9  0012               	moviw fsr0++
  6605  02DA  001E               	movwi fsr1++
  6606  02DB  0BB9               	decfsz	??_Calculate_Time,f
  6607  02DC  2AD9               	goto	u398m0
  6608                           
  6609                           ;save.c: 189: return temp;
  6610  02DD  0020               	movlb	0	; select bank0
  6611  02DE  0843               	movf	Calculate_Time@temp,w
  6612  02DF  0008               	return
  6613  02E0                     l4737:	
  6614                           ;save.c: 190: }
  6615                           ;save.c: 191: }
  6616                           
  6617                           
  6618                           ;save.c: 192: else if( time_count == 3 )
  6619  02E0  3003               	movlw	3
  6620  02E1  066D               	xorwf	_time_count,w
  6621  02E2  1D03               	btfss	3,2
  6622  02E3  2BA7               	goto	l4761
  6623                           
  6624                           ;save.c: 193: {
  6625                           ;save.c: 194: if(rtc_tm.date != rtc_save_ch2.date)
  6626  02E4  0021               	movlb	1	; select bank1
  6627  02E5  085E               	movf	(_rtc_tm^(0+128)+4),w
  6628  02E6  0657               	xorwf	(_rtc_save_ch2^(0+128)+4),w
  6629  02E7  1903               	skipnz
  6630  02E8  2AF8               	goto	l4751
  6631  02E9                     l4741:	
  6632                           
  6633                           ;save.c: 195: {
  6634                           ;save.c: 197: Write_Flash_finish();
  6635  02E9  318B  237F  3182   	fcall	_Write_Flash_finish
  6636                           
  6637                           ;save.c: 198: Write_Flash_head();
  6638  02EC  318B  23AE  3182   	fcall	_Write_Flash_head
  6639                           
  6640                           ;save.c: 199: Save_Write_time();
  6641  02EF  3186  26E7  3182   	fcall	_Save_Write_time
  6642                           
  6643                           ;save.c: 200: Cur_temperature_time_ch1 = 0;
  6644  02F2  0021               	movlb	1	; select bank1
  6645  02F3  01B6               	clrf	_Cur_temperature_time_ch1^(0+128)
  6646                           
  6647                           ;save.c: 201: Cur_temperature_time_ch2 = 0;
  6648  02F4  01B7               	clrf	_Cur_temperature_time_ch2^(0+128)
  6649                           
  6650                           ;save.c: 204: time_count = 0;
  6651  02F5  0020               	movlb	0	; select bank0
  6652  02F6  01ED               	clrf	_time_count
  6653                           
  6654                           ;save.c: 205: }
  6655  02F7  2BA7               	goto	l4761
  6656  02F8                     l4751:	
  6657                           
  6658                           ;save.c: 206: else
  6659                           ;save.c: 207: {
  6660                           ;save.c: 208: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6661  02F8  0021               	movlb	1	; select bank1
  6662  02F9  085A               	movf	_rtc_tm^(0+128),w
  6663  02FA  0020               	movlb	0	; select bank0
  6664  02FB  00B9               	movwf	??_Calculate_Time
  6665  02FC  01BA               	clrf	??_Calculate_Time+1
  6666  02FD  0021               	movlb	1	; select bank1
  6667  02FE  085C               	movf	(_rtc_tm^(0+128)+2),w
  6668  02FF  0020               	movlb	0	; select bank0
  6669  0300  00BB               	movwf	??_Calculate_Time+2
  6670  0301  01BC               	clrf	??_Calculate_Time+3
  6671  0302  083B               	movf	??_Calculate_Time+2,w
  6672  0303  00F3               	movwf	___wmul@multiplier
  6673  0304  083C               	movf	??_Calculate_Time+3,w
  6674  0305  00F4               	movwf	___wmul@multiplier+1
  6675  0306  3010               	movlw	16
  6676  0307  00F5               	movwf	___wmul@multiplicand
  6677  0308  300E               	movlw	14
  6678  0309  00F6               	movwf	___wmul@multiplicand+1
  6679  030A  318A  2259  3182   	fcall	___wmul
  6680  030D  0873               	movf	?___wmul,w
  6681  030E  0020               	movlb	0	; select bank0
  6682  030F  00BD               	movwf	??_Calculate_Time+4
  6683  0310  0874               	movf	?___wmul+1,w
  6684  0311  00BE               	movwf	??_Calculate_Time+5
  6685  0312  0021               	movlb	1	; select bank1
  6686  0313  085B               	movf	(_rtc_tm^(0+128)+1),w
  6687  0314  0020               	movlb	0	; select bank0
  6688  0315  00BF               	movwf	??_Calculate_Time+6
  6689  0316  01C0               	clrf	??_Calculate_Time+7
  6690  0317  083F               	movf	??_Calculate_Time+6,w
  6691  0318  00F3               	movwf	___wmul@multiplier
  6692  0319  0840               	movf	??_Calculate_Time+7,w
  6693  031A  00F4               	movwf	___wmul@multiplier+1
  6694  031B  303C               	movlw	60
  6695  031C  00F5               	movwf	___wmul@multiplicand
  6696  031D  3000               	movlw	0
  6697  031E  00F6               	movwf	___wmul@multiplicand+1
  6698  031F  318A  2259  3182   	fcall	___wmul
  6699  0322  0873               	movf	?___wmul,w
  6700  0323  0020               	movlb	0	; select bank0
  6701  0324  073D               	addwf	??_Calculate_Time+4,w
  6702  0325  00C1               	movwf	??_Calculate_Time+8
  6703  0326  0874               	movf	?___wmul+1,w
  6704  0327  3D3E               	addwfc	??_Calculate_Time+5,w
  6705  0328  00C2               	movwf	??_Calculate_Time+9
  6706  0329  0839               	movf	??_Calculate_Time,w
  6707  032A  0741               	addwf	??_Calculate_Time+8,w
  6708  032B  00C7               	movwf	Calculate_Time@temp1
  6709  032C  083A               	movf	??_Calculate_Time+1,w
  6710  032D  3D42               	addwfc	??_Calculate_Time+9,w
  6711  032E  00C8               	movwf	Calculate_Time@temp1+1
  6712  032F  01C9               	clrf	Calculate_Time@temp1+2
  6713  0330  1BC8               	btfsc	Calculate_Time@temp1+1,7
  6714  0331  03C9               	decf	Calculate_Time@temp1+2,f
  6715  0332  0849               	movf	Calculate_Time@temp1+2,w
  6716  0333  00CA               	movwf	Calculate_Time@temp1+3
  6717                           
  6718                           ;save.c: 209: temp2 = rtc_save_ch2.hours*3600+rtc_save_ch2.minutes*60+rtc_save_ch2.secon
      +                          ds;
  6719  0334  0021               	movlb	1	; select bank1
  6720  0335  0853               	movf	_rtc_save_ch2^(0+128),w
  6721  0336  0020               	movlb	0	; select bank0
  6722  0337  00B9               	movwf	??_Calculate_Time
  6723  0338  01BA               	clrf	??_Calculate_Time+1
  6724  0339  0021               	movlb	1	; select bank1
  6725  033A  0855               	movf	(_rtc_save_ch2^(0+128)+2),w
  6726  033B  0020               	movlb	0	; select bank0
  6727  033C  00BB               	movwf	??_Calculate_Time+2
  6728  033D  01BC               	clrf	??_Calculate_Time+3
  6729  033E  083B               	movf	??_Calculate_Time+2,w
  6730  033F  00F3               	movwf	___wmul@multiplier
  6731  0340  083C               	movf	??_Calculate_Time+3,w
  6732  0341  00F4               	movwf	___wmul@multiplier+1
  6733  0342  3010               	movlw	16
  6734  0343  00F5               	movwf	___wmul@multiplicand
  6735  0344  300E               	movlw	14
  6736  0345  00F6               	movwf	___wmul@multiplicand+1
  6737  0346  318A  2259  3182   	fcall	___wmul
  6738  0349  0873               	movf	?___wmul,w
  6739  034A  0020               	movlb	0	; select bank0
  6740  034B  00BD               	movwf	??_Calculate_Time+4
  6741  034C  0874               	movf	?___wmul+1,w
  6742  034D  00BE               	movwf	??_Calculate_Time+5
  6743  034E  0021               	movlb	1	; select bank1
  6744  034F  0854               	movf	(_rtc_save_ch2^(0+128)+1),w
  6745  0350  0020               	movlb	0	; select bank0
  6746  0351  00BF               	movwf	??_Calculate_Time+6
  6747  0352  01C0               	clrf	??_Calculate_Time+7
  6748  0353  083F               	movf	??_Calculate_Time+6,w
  6749  0354  00F3               	movwf	___wmul@multiplier
  6750  0355  0840               	movf	??_Calculate_Time+7,w
  6751  0356  00F4               	movwf	___wmul@multiplier+1
  6752  0357  303C               	movlw	60
  6753  0358  00F5               	movwf	___wmul@multiplicand
  6754  0359  3000               	movlw	0
  6755  035A  00F6               	movwf	___wmul@multiplicand+1
  6756  035B  318A  2259  3182   	fcall	___wmul
  6757  035E  0873               	movf	?___wmul,w
  6758  035F  0020               	movlb	0	; select bank0
  6759  0360  073D               	addwf	??_Calculate_Time+4,w
  6760  0361  00C1               	movwf	??_Calculate_Time+8
  6761  0362  0874               	movf	?___wmul+1,w
  6762  0363  3D3E               	addwfc	??_Calculate_Time+5,w
  6763  0364  00C2               	movwf	??_Calculate_Time+9
  6764  0365  0839               	movf	??_Calculate_Time,w
  6765  0366  0741               	addwf	??_Calculate_Time+8,w
  6766  0367  00CB               	movwf	Calculate_Time@temp2
  6767  0368  083A               	movf	??_Calculate_Time+1,w
  6768  0369  3D42               	addwfc	??_Calculate_Time+9,w
  6769  036A  00CC               	movwf	Calculate_Time@temp2+1
  6770  036B  01CD               	clrf	Calculate_Time@temp2+2
  6771  036C  1BCC               	btfsc	Calculate_Time@temp2+1,7
  6772  036D  03CD               	decf	Calculate_Time@temp2+2,f
  6773  036E  084D               	movf	Calculate_Time@temp2+2,w
  6774  036F  00CE               	movwf	Calculate_Time@temp2+3
  6775                           
  6776                           ;save.c: 210: temp = temp1 - temp2;
  6777  0370  0847               	movf	Calculate_Time@temp1,w
  6778  0371  00B9               	movwf	??_Calculate_Time
  6779  0372  0848               	movf	Calculate_Time@temp1+1,w
  6780  0373  00BA               	movwf	??_Calculate_Time+1
  6781  0374  0849               	movf	Calculate_Time@temp1+2,w
  6782  0375  00BB               	movwf	??_Calculate_Time+2
  6783  0376  084A               	movf	Calculate_Time@temp1+3,w
  6784  0377  00BC               	movwf	??_Calculate_Time+3
  6785  0378  094B               	comf	Calculate_Time@temp2,w
  6786  0379  00BD               	movwf	??_Calculate_Time+4
  6787  037A  094C               	comf	Calculate_Time@temp2+1,w
  6788  037B  00BE               	movwf	??_Calculate_Time+5
  6789  037C  094D               	comf	Calculate_Time@temp2+2,w
  6790  037D  00BF               	movwf	??_Calculate_Time+6
  6791  037E  094E               	comf	Calculate_Time@temp2+3,w
  6792  037F  00C0               	movwf	??_Calculate_Time+7
  6793  0380  0ABD               	incf	??_Calculate_Time+4,f
  6794  0381  1903               	skipnz
  6795  0382  0ABE               	incf	??_Calculate_Time+5,f
  6796  0383  1903               	skipnz
  6797  0384  0ABF               	incf	??_Calculate_Time+6,f
  6798  0385  1903               	skipnz
  6799  0386  0AC0               	incf	??_Calculate_Time+7,f
  6800  0387  083D               	movf	??_Calculate_Time+4,w
  6801  0388  07B9               	addwf	??_Calculate_Time,f
  6802  0389  083E               	movf	??_Calculate_Time+5,w
  6803  038A  3DBA               	addwfc	??_Calculate_Time+1,f
  6804  038B  083F               	movf	??_Calculate_Time+6,w
  6805  038C  3DBB               	addwfc	??_Calculate_Time+2,f
  6806  038D  0840               	movf	??_Calculate_Time+7,w
  6807  038E  3DBC               	addwfc	??_Calculate_Time+3,f
  6808  038F  083C               	movf	??_Calculate_Time+3,w
  6809  0390  00C6               	movwf	Calculate_Time@temp+3
  6810  0391  083B               	movf	??_Calculate_Time+2,w
  6811  0392  00C5               	movwf	Calculate_Time@temp+2
  6812  0393  083A               	movf	??_Calculate_Time+1,w
  6813  0394  00C4               	movwf	Calculate_Time@temp+1
  6814  0395  0839               	movf	??_Calculate_Time,w
  6815  0396  00C3               	movwf	Calculate_Time@temp
  6816                           
  6817                           ;save.c: 211: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  6818  0397  30D3               	movlw	low (_rtc_save_ch2| 0)
  6819  0398  0086               	movwf	6
  6820  0399  0187               	clrf	7
  6821  039A  30DA               	movlw	low (_rtc_tm| 0)
  6822  039B  0084               	movwf	4
  6823  039C  0185               	clrf	5
  6824  039D  3007               	movlw	7
  6825  039E  0020               	movlb	0	; select bank0
  6826  039F  00B9               	movwf	??_Calculate_Time
  6827  03A0                     u401m0:	
  6828  03A0  0012               	moviw fsr0++
  6829  03A1  001E               	movwi fsr1++
  6830  03A2  0BB9               	decfsz	??_Calculate_Time,f
  6831  03A3  2BA0               	goto	u401m0
  6832                           
  6833                           ;save.c: 212: return temp;
  6834  03A4  0020               	movlb	0	; select bank0
  6835  03A5  0843               	movf	Calculate_Time@temp,w
  6836  03A6  0008               	return
  6837  03A7                     l4761:	
  6838                           
  6839                           ;save.c: 213: }
  6840                           ;save.c: 214: }
  6841                           ;save.c: 215: return 0;
  6842  03A7  3000               	movlw	0
  6843  03A8  0008               	return
  6844  03A9                     __end_of_Calculate_Time:	
  6845                           
  6846                           	psect	text21
  6847  0A59                     __ptext21:	
  6848 ;; *************** function ___wmul *****************
  6849 ;; Defined at:
  6850 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  multiplier      2    3[COMMON] unsigned int 
  6853 ;;  multiplicand    2    5[COMMON] unsigned int 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  product         2    0[BANK0 ] unsigned int 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  2    3[COMMON] unsigned int 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;Total ram usage:        6 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    3
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_Calculate_Time
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function ___wmul
  6881  0A59                     ___wmul:	
  6882                           
  6883                           ;incstack = 0
  6884                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6885  0A59  0020               	movlb	0	; select bank0
  6886  0A5A  01A0               	clrf	___wmul@product
  6887  0A5B  01A1               	clrf	___wmul@product+1
  6888  0A5C                     l4643:	
  6889  0A5C  1C73               	btfss	___wmul@multiplier,0
  6890  0A5D  2A63               	goto	l1105
  6891  0A5E  0875               	movf	___wmul@multiplicand,w
  6892  0A5F  0020               	movlb	0	; select bank0
  6893  0A60  07A0               	addwf	___wmul@product,f
  6894  0A61  0876               	movf	___wmul@multiplicand+1,w
  6895  0A62  3DA1               	addwfc	___wmul@product+1,f
  6896  0A63                     l1105:	
  6897  0A63  3001               	movlw	1
  6898  0A64                     u3865:	
  6899  0A64  35F5               	lslf	___wmul@multiplicand,f
  6900  0A65  0DF6               	rlf	___wmul@multiplicand+1,f
  6901  0A66  0B89               	decfsz	9,f
  6902  0A67  2A64               	goto	u3865
  6903  0A68  3001               	movlw	1
  6904  0A69                     u3875:	
  6905  0A69  36F4               	lsrf	___wmul@multiplier+1,f
  6906  0A6A  0CF3               	rrf	___wmul@multiplier,f
  6907  0A6B  0B89               	decfsz	9,f
  6908  0A6C  2A69               	goto	u3875
  6909  0A6D  0873               	movf	___wmul@multiplier,w
  6910  0A6E  0474               	iorwf	___wmul@multiplier+1,w
  6911  0A6F  1D03               	btfss	3,2
  6912  0A70  2A5C               	goto	l4643
  6913  0A71  0020               	movlb	0	; select bank0
  6914  0A72  0821               	movf	___wmul@product+1,w
  6915  0A73  00F4               	movwf	?___wmul+1
  6916  0A74  0820               	movf	___wmul@product,w
  6917  0A75  00F3               	movwf	?___wmul
  6918  0A76  0008               	return
  6919  0A77                     __end_of___wmul:	
  6920                           
  6921                           	psect	text22
  6922  0BAE                     __ptext22:	
  6923 ;; *************** function _Write_Flash_head *****************
  6924 ;; Defined at:
  6925 ;;		line 92 in file "mcc_generated_files/save.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;		None
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;		None
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  1    wreg      void 
  6932 ;; Registers used:
  6933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;Total ram usage:        1 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    6
  6946 ;; This function calls:
  6947 ;;		_FLASH_WriteWord
  6948 ;; This function is called by:
  6949 ;;		_Key_Process
  6950 ;;		_Calculate_Time
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           
  6955                           ;psect for function _Write_Flash_head
  6956  0BAE                     _Write_Flash_head:	
  6957                           
  6958                           ;save.c: 94: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0xAAAA);
  6959                           
  6960                           ;incstack = 0
  6961                           ; Regs used in _Write_Flash_head: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6962  0BAE  0021               	movlb	1	; select bank1
  6963  0BAF  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  6964  0BB0  0020               	movlb	0	; select bank0
  6965  0BB1  00AB               	movwf	FLASH_WriteWord@flashAddr+1
  6966  0BB2  0021               	movlb	1	; select bank1
  6967  0BB3  082E               	movf	_Cur_Save_Index^(0+128),w
  6968  0BB4  0020               	movlb	0	; select bank0
  6969  0BB5  00AA               	movwf	FLASH_WriteWord@flashAddr
  6970  0BB6  3020               	movlw	(low (_Flash_buff| (0+256)))& (0+255)
  6971  0BB7  00F7               	movwf	??_Write_Flash_head
  6972  0BB8  0877               	movf	??_Write_Flash_head,w
  6973  0BB9  00AC               	movwf	FLASH_WriteWord@ramBuf
  6974  0BBA  30AA               	movlw	170
  6975  0BBB  00AD               	movwf	FLASH_WriteWord@word
  6976  0BBC  30AA               	movlw	170
  6977  0BBD  00AE               	movwf	FLASH_WriteWord@word+1
  6978  0BBE  318D  2521  318B   	fcall	_FLASH_WriteWord
  6979                           
  6980                           ;save.c: 95: Cur_Save_Index++;
  6981  0BC1  3001               	movlw	1
  6982  0BC2  0021               	movlb	1	; select bank1
  6983  0BC3  07AE               	addwf	_Cur_Save_Index^(0+128),f
  6984  0BC4  3000               	movlw	0
  6985  0BC5  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  6986                           
  6987                           ;save.c: 96: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0xAAAA);
  6988  0BC6  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  6989  0BC7  0020               	movlb	0	; select bank0
  6990  0BC8  00AB               	movwf	FLASH_WriteWord@flashAddr+1
  6991  0BC9  0021               	movlb	1	; select bank1
  6992  0BCA  082E               	movf	_Cur_Save_Index^(0+128),w
  6993  0BCB  0020               	movlb	0	; select bank0
  6994  0BCC  00AA               	movwf	FLASH_WriteWord@flashAddr
  6995  0BCD  3020               	movlw	(low (_Flash_buff| (0+256)))& (0+255)
  6996  0BCE  00F7               	movwf	??_Write_Flash_head
  6997  0BCF  0877               	movf	??_Write_Flash_head,w
  6998  0BD0  00AC               	movwf	FLASH_WriteWord@ramBuf
  6999  0BD1  30AA               	movlw	170
  7000  0BD2  00AD               	movwf	FLASH_WriteWord@word
  7001  0BD3  30AA               	movlw	170
  7002  0BD4  00AE               	movwf	FLASH_WriteWord@word+1
  7003  0BD5  318D  2521         	fcall	_FLASH_WriteWord
  7004                           
  7005                           ;save.c: 97: Cur_Save_Index++;
  7006  0BD7  3001               	movlw	1
  7007  0BD8  0021               	movlb	1	; select bank1
  7008  0BD9  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7009  0BDA  3000               	movlw	0
  7010  0BDB  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7011  0BDC  0008               	return
  7012  0BDD                     __end_of_Write_Flash_head:	
  7013                           
  7014                           	psect	text23
  7015  0B7F                     __ptext23:	
  7016 ;; *************** function _Write_Flash_finish *****************
  7017 ;; Defined at:
  7018 ;;		line 106 in file "mcc_generated_files/save.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;Total ram usage:        1 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    6
  7039 ;; This function calls:
  7040 ;;		_FLASH_WriteWord
  7041 ;; This function is called by:
  7042 ;;		_Key_Process
  7043 ;;		_Serach_Flash_Head
  7044 ;;		_Calculate_Time
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           
  7049                           ;psect for function _Write_Flash_finish
  7050  0B7F                     _Write_Flash_finish:	
  7051                           
  7052                           ;save.c: 108: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x5555);
  7053                           
  7054                           ;incstack = 0
  7055                           ; Regs used in _Write_Flash_finish: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7056  0B7F  0021               	movlb	1	; select bank1
  7057  0B80  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7058  0B81  0020               	movlb	0	; select bank0
  7059  0B82  00AB               	movwf	FLASH_WriteWord@flashAddr+1
  7060  0B83  0021               	movlb	1	; select bank1
  7061  0B84  082E               	movf	_Cur_Save_Index^(0+128),w
  7062  0B85  0020               	movlb	0	; select bank0
  7063  0B86  00AA               	movwf	FLASH_WriteWord@flashAddr
  7064  0B87  3020               	movlw	(low (_Flash_buff| (0+256)))& (0+255)
  7065  0B88  00F7               	movwf	??_Write_Flash_finish
  7066  0B89  0877               	movf	??_Write_Flash_finish,w
  7067  0B8A  00AC               	movwf	FLASH_WriteWord@ramBuf
  7068  0B8B  3055               	movlw	85
  7069  0B8C  00AD               	movwf	FLASH_WriteWord@word
  7070  0B8D  3055               	movlw	85
  7071  0B8E  00AE               	movwf	FLASH_WriteWord@word+1
  7072  0B8F  318D  2521  318B   	fcall	_FLASH_WriteWord
  7073                           
  7074                           ;save.c: 109: Cur_Save_Index++;
  7075  0B92  3001               	movlw	1
  7076  0B93  0021               	movlb	1	; select bank1
  7077  0B94  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7078  0B95  3000               	movlw	0
  7079  0B96  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7080                           
  7081                           ;save.c: 110: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x5555);
  7082  0B97  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7083  0B98  0020               	movlb	0	; select bank0
  7084  0B99  00AB               	movwf	FLASH_WriteWord@flashAddr+1
  7085  0B9A  0021               	movlb	1	; select bank1
  7086  0B9B  082E               	movf	_Cur_Save_Index^(0+128),w
  7087  0B9C  0020               	movlb	0	; select bank0
  7088  0B9D  00AA               	movwf	FLASH_WriteWord@flashAddr
  7089  0B9E  3020               	movlw	(low (_Flash_buff| (0+256)))& (0+255)
  7090  0B9F  00F7               	movwf	??_Write_Flash_finish
  7091  0BA0  0877               	movf	??_Write_Flash_finish,w
  7092  0BA1  00AC               	movwf	FLASH_WriteWord@ramBuf
  7093  0BA2  3055               	movlw	85
  7094  0BA3  00AD               	movwf	FLASH_WriteWord@word
  7095  0BA4  3055               	movlw	85
  7096  0BA5  00AE               	movwf	FLASH_WriteWord@word+1
  7097  0BA6  318D  2521         	fcall	_FLASH_WriteWord
  7098                           
  7099                           ;save.c: 111: Cur_Save_Index++;
  7100  0BA8  3001               	movlw	1
  7101  0BA9  0021               	movlb	1	; select bank1
  7102  0BAA  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7103  0BAB  3000               	movlw	0
  7104  0BAC  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7105  0BAD  0008               	return
  7106  0BAE                     __end_of_Write_Flash_finish:	
  7107                           
  7108                           	psect	text24
  7109  06E7                     __ptext24:	
  7110 ;; *************** function _Save_Write_time *****************
  7111 ;; Defined at:
  7112 ;;		line 239 in file "mcc_generated_files/save.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;		None
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  i               1    0        unsigned char 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  1    wreg      void 
  7119 ;; Registers used:
  7120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;Total ram usage:        2 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    7
  7133 ;; This function calls:
  7134 ;;		_Bq32k_Rtc_Read_Time
  7135 ;;		_Save_Write_word
  7136 ;; This function is called by:
  7137 ;;		_Key_Process
  7138 ;;		_Calculate_Time
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           
  7143                           ;psect for function _Save_Write_time
  7144  06E7                     _Save_Write_time:	
  7145                           
  7146                           ;save.c: 241: unsigned char i;
  7147                           ;save.c: 242: Bq32k_Rtc_Read_Time(&rtc_tm);
  7148                           
  7149                           ;incstack = 0
  7150                           ; Regs used in _Save_Write_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7151  06E7  30DA               	movlw	(low (_rtc_tm| 0))& (0+255)
  7152  06E8  318F  279C  3186   	fcall	_Bq32k_Rtc_Read_Time
  7153                           
  7154                           ;save.c: 243: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  7155  06EB  30CC               	movlw	low (_rtc_save_ch1| 0)
  7156  06EC  0086               	movwf	6
  7157  06ED  0187               	clrf	7
  7158  06EE  30DA               	movlw	low (_rtc_tm| 0)
  7159  06EF  0084               	movwf	4
  7160  06F0  0185               	clrf	5
  7161  06F1  3007               	movlw	7
  7162  06F2  0020               	movlb	0	; select bank0
  7163  06F3  00B7               	movwf	??_Save_Write_time
  7164  06F4                     u383m0:	
  7165  06F4  0012               	moviw fsr0++
  7166  06F5  001E               	movwi fsr1++
  7167  06F6  0BB7               	decfsz	??_Save_Write_time,f
  7168  06F7  2EF4               	goto	u383m0
  7169                           
  7170                           ;save.c: 244: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7171  06F8  30D3               	movlw	low (_rtc_save_ch2| 0)
  7172  06F9  0086               	movwf	6
  7173  06FA  0187               	clrf	7
  7174  06FB  30DA               	movlw	low (_rtc_tm| 0)
  7175  06FC  0084               	movwf	4
  7176  06FD  0185               	clrf	5
  7177  06FE  3007               	movlw	7
  7178  06FF  0020               	movlb	0	; select bank0
  7179  0700  00B7               	movwf	??_Save_Write_time
  7180  0701                     u384m0:	
  7181  0701  0012               	moviw fsr0++
  7182  0702  001E               	movwi fsr1++
  7183  0703  0BB7               	decfsz	??_Save_Write_time,f
  7184  0704  2F01               	goto	u384m0
  7185                           
  7186                           ;save.c: 245: Save_Write_word( rtc_tm.years);
  7187  0705  0021               	movlb	1	; select bank1
  7188  0706  0860               	movf	(_rtc_tm^(0+128)+6),w
  7189  0707  0020               	movlb	0	; select bank0
  7190  0708  00B7               	movwf	??_Save_Write_time
  7191  0709  01B8               	clrf	??_Save_Write_time+1
  7192  070A  0837               	movf	??_Save_Write_time,w
  7193  070B  00B3               	movwf	Save_Write_word@data
  7194  070C  0838               	movf	??_Save_Write_time+1,w
  7195  070D  00B4               	movwf	Save_Write_word@data+1
  7196  070E  318C  2477  3186   	fcall	_Save_Write_word
  7197                           
  7198                           ;save.c: 246: Save_Write_word( rtc_tm.month);
  7199  0711  0021               	movlb	1	; select bank1
  7200  0712  085F               	movf	(_rtc_tm^(0+128)+5),w
  7201  0713  0020               	movlb	0	; select bank0
  7202  0714  00B7               	movwf	??_Save_Write_time
  7203  0715  01B8               	clrf	??_Save_Write_time+1
  7204  0716  0837               	movf	??_Save_Write_time,w
  7205  0717  00B3               	movwf	Save_Write_word@data
  7206  0718  0838               	movf	??_Save_Write_time+1,w
  7207  0719  00B4               	movwf	Save_Write_word@data+1
  7208  071A  318C  2477  3186   	fcall	_Save_Write_word
  7209                           
  7210                           ;save.c: 247: Save_Write_word( rtc_tm.date);
  7211  071D  0021               	movlb	1	; select bank1
  7212  071E  085E               	movf	(_rtc_tm^(0+128)+4),w
  7213  071F  0020               	movlb	0	; select bank0
  7214  0720  00B7               	movwf	??_Save_Write_time
  7215  0721  01B8               	clrf	??_Save_Write_time+1
  7216  0722  0837               	movf	??_Save_Write_time,w
  7217  0723  00B3               	movwf	Save_Write_word@data
  7218  0724  0838               	movf	??_Save_Write_time+1,w
  7219  0725  00B4               	movwf	Save_Write_word@data+1
  7220  0726  318C  2477  3186   	fcall	_Save_Write_word
  7221                           
  7222                           ;save.c: 248: Save_Write_word( rtc_tm.hours);
  7223  0729  0021               	movlb	1	; select bank1
  7224  072A  085C               	movf	(_rtc_tm^(0+128)+2),w
  7225  072B  0020               	movlb	0	; select bank0
  7226  072C  00B7               	movwf	??_Save_Write_time
  7227  072D  01B8               	clrf	??_Save_Write_time+1
  7228  072E  0837               	movf	??_Save_Write_time,w
  7229  072F  00B3               	movwf	Save_Write_word@data
  7230  0730  0838               	movf	??_Save_Write_time+1,w
  7231  0731  00B4               	movwf	Save_Write_word@data+1
  7232  0732  318C  2477  3186   	fcall	_Save_Write_word
  7233                           
  7234                           ;save.c: 249: Save_Write_word( rtc_tm.minutes);
  7235  0735  0021               	movlb	1	; select bank1
  7236  0736  085B               	movf	(_rtc_tm^(0+128)+1),w
  7237  0737  0020               	movlb	0	; select bank0
  7238  0738  00B7               	movwf	??_Save_Write_time
  7239  0739  01B8               	clrf	??_Save_Write_time+1
  7240  073A  0837               	movf	??_Save_Write_time,w
  7241  073B  00B3               	movwf	Save_Write_word@data
  7242  073C  0838               	movf	??_Save_Write_time+1,w
  7243  073D  00B4               	movwf	Save_Write_word@data+1
  7244  073E  318C  2477  3186   	fcall	_Save_Write_word
  7245                           
  7246                           ;save.c: 250: Save_Write_word( rtc_tm.seconds);
  7247  0741  0021               	movlb	1	; select bank1
  7248  0742  085A               	movf	_rtc_tm^(0+128),w
  7249  0743  0020               	movlb	0	; select bank0
  7250  0744  00B7               	movwf	??_Save_Write_time
  7251  0745  01B8               	clrf	??_Save_Write_time+1
  7252  0746  0837               	movf	??_Save_Write_time,w
  7253  0747  00B3               	movwf	Save_Write_word@data
  7254  0748  0838               	movf	??_Save_Write_time+1,w
  7255  0749  00B4               	movwf	Save_Write_word@data+1
  7256  074A  318C  2477  3186   	fcall	_Save_Write_word
  7257                           
  7258                           ;save.c: 251: Save_Write_word( rtc_tm.wday);
  7259  074D  0021               	movlb	1	; select bank1
  7260  074E  085D               	movf	(_rtc_tm^(0+128)+3),w
  7261  074F  0020               	movlb	0	; select bank0
  7262  0750  00B7               	movwf	??_Save_Write_time
  7263  0751  01B8               	clrf	??_Save_Write_time+1
  7264  0752  0837               	movf	??_Save_Write_time,w
  7265  0753  00B3               	movwf	Save_Write_word@data
  7266  0754  0838               	movf	??_Save_Write_time+1,w
  7267  0755  00B4               	movwf	Save_Write_word@data+1
  7268  0756  318C  2477         	fcall	_Save_Write_word
  7269  0758  0008               	return
  7270  0759                     __end_of_Save_Write_time:	
  7271                           
  7272                           	psect	text25
  7273  0C77                     __ptext25:	
  7274 ;; *************** function _Save_Write_word *****************
  7275 ;; Defined at:
  7276 ;;		line 224 in file "mcc_generated_files/save.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  data            2   19[BANK0 ] unsigned int 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7290 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;Total ram usage:        4 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    6
  7297 ;; This function calls:
  7298 ;;		_FLASH_WriteWord
  7299 ;; This function is called by:
  7300 ;;		_tc_temperature_trans
  7301 ;;		_Save_process
  7302 ;;		_Save_Write_time
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _Save_Write_word
  7308  0C77                     _Save_Write_word:	
  7309                           
  7310                           ;save.c: 226: if( (data & 0x3fff) == 0x3fff)
  7311                           
  7312                           ;incstack = 0
  7313                           ; Regs used in _Save_Write_word: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7314  0C77  30FF               	movlw	255
  7315  0C78  0020               	movlb	0	; select bank0
  7316  0C79  0533               	andwf	Save_Write_word@data,w
  7317  0C7A  00B5               	movwf	??_Save_Write_word
  7318  0C7B  303F               	movlw	63
  7319  0C7C  0534               	andwf	Save_Write_word@data+1,w
  7320  0C7D  00B6               	movwf	??_Save_Write_word+1
  7321  0C7E  0A35               	incf	??_Save_Write_word,w
  7322  0C7F  303F               	movlw	63
  7323  0C80  1903               	skipnz
  7324  0C81  0636               	xorwf	??_Save_Write_word+1,w
  7325  0C82  1D03               	btfss	3,2
  7326  0C83  2C95               	goto	l4585
  7327                           
  7328                           ;save.c: 227: FLASH_WriteWord(Cur_Save_Index, Flash_buff, 0x3ffe);
  7329  0C84  0021               	movlb	1	; select bank1
  7330  0C85  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7331  0C86  0020               	movlb	0	; select bank0
  7332  0C87  00AB               	movwf	FLASH_WriteWord@flashAddr+1
  7333  0C88  0021               	movlb	1	; select bank1
  7334  0C89  082E               	movf	_Cur_Save_Index^(0+128),w
  7335  0C8A  0020               	movlb	0	; select bank0
  7336  0C8B  00AA               	movwf	FLASH_WriteWord@flashAddr
  7337  0C8C  3020               	movlw	(low (_Flash_buff| (0+256)))& (0+255)
  7338  0C8D  00B5               	movwf	??_Save_Write_word
  7339  0C8E  0835               	movf	??_Save_Write_word,w
  7340  0C8F  00AC               	movwf	FLASH_WriteWord@ramBuf
  7341  0C90  30FE               	movlw	254
  7342  0C91  00AD               	movwf	FLASH_WriteWord@word
  7343  0C92  303F               	movlw	63
  7344  0C93  00AE               	movwf	FLASH_WriteWord@word+1
  7345  0C94  2CA5               	goto	L9
  7346  0C95                     l4585:	
  7347                           
  7348                           ;save.c: 228: else
  7349                           ;save.c: 229: FLASH_WriteWord(Cur_Save_Index, Flash_buff, data);
  7350  0C95  0021               	movlb	1	; select bank1
  7351  0C96  082F               	movf	(_Cur_Save_Index+1)^(0+128),w
  7352  0C97  0020               	movlb	0	; select bank0
  7353  0C98  00AB               	movwf	FLASH_WriteWord@flashAddr+1
  7354  0C99  0021               	movlb	1	; select bank1
  7355  0C9A  082E               	movf	_Cur_Save_Index^(0+128),w
  7356  0C9B  0020               	movlb	0	; select bank0
  7357  0C9C  00AA               	movwf	FLASH_WriteWord@flashAddr
  7358  0C9D  3020               	movlw	(low (_Flash_buff| (0+256)))& (0+255)
  7359  0C9E  00B5               	movwf	??_Save_Write_word
  7360  0C9F  0835               	movf	??_Save_Write_word,w
  7361  0CA0  00AC               	movwf	FLASH_WriteWord@ramBuf
  7362  0CA1  0834               	movf	Save_Write_word@data+1,w
  7363  0CA2  00AE               	movwf	FLASH_WriteWord@word+1
  7364  0CA3  0833               	movf	Save_Write_word@data,w
  7365  0CA4  00AD               	movwf	FLASH_WriteWord@word
  7366  0CA5                     L9:	
  7367  0CA5  318D  2521         	fcall	_FLASH_WriteWord
  7368                           
  7369                           ;save.c: 230: Cur_Save_Index++;
  7370  0CA7  3001               	movlw	1
  7371  0CA8  0021               	movlb	1	; select bank1
  7372  0CA9  07AE               	addwf	_Cur_Save_Index^(0+128),f
  7373  0CAA  3000               	movlw	0
  7374  0CAB  3DAF               	addwfc	(_Cur_Save_Index+1)^(0+128),f
  7375  0CAC  0008               	return
  7376  0CAD                     __end_of_Save_Write_word:	
  7377                           
  7378                           	psect	text26
  7379  0D21                     __ptext26:	
  7380 ;; *************** function _FLASH_WriteWord *****************
  7381 ;; Defined at:
  7382 ;;		line 74 in file "mcc_generated_files/memory.c"
  7383 ;; Parameters:    Size  Location     Type
  7384 ;;  flashAddr       2   10[BANK0 ] unsigned int 
  7385 ;;  ramBuf          1   12[BANK0 ] PTR unsigned int 
  7386 ;;		 -> Flash_buff(64), 
  7387 ;;  word            2   13[BANK0 ] unsigned int 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;  blockStartAd    2   16[BANK0 ] unsigned int 
  7390 ;;  i               1   18[BANK0 ] unsigned char 
  7391 ;;  offset          1   15[BANK0 ] unsigned char 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      void 
  7394 ;; Registers used:
  7395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7401 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Totals:         1       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;Total ram usage:       10 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    5
  7408 ;; This function calls:
  7409 ;;		_FLASH_ReadWord
  7410 ;;		_FLASH_WriteBlock
  7411 ;; This function is called by:
  7412 ;;		_Write_Flash_head
  7413 ;;		_Write_Flash_finish
  7414 ;;		_Save_Write_word
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _FLASH_WriteWord
  7420  0D21                     _FLASH_WriteWord:	
  7421                           
  7422                           ;memory.c: 75: uint16_t blockStartAddr = (uint16_t) (flashAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in _FLASH_WriteWord: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7426  0D21  30E0               	movlw	224
  7427  0D22  0020               	movlb	0	; select bank0
  7428  0D23  052A               	andwf	FLASH_WriteWord@flashAddr,w
  7429  0D24  00B0               	movwf	FLASH_WriteWord@blockStartAddr
  7430  0D25  303F               	movlw	63
  7431  0D26  052B               	andwf	FLASH_WriteWord@flashAddr+1,w
  7432  0D27  00B1               	movwf	FLASH_WriteWord@blockStartAddr+1
  7433                           
  7434                           ;memory.c: 76: uint8_t offset = (uint8_t) (flashAddr & (32 - 1));
  7435  0D28  082A               	movf	FLASH_WriteWord@flashAddr,w
  7436  0D29  391F               	andlw	31
  7437  0D2A  00F6               	movwf	??_FLASH_WriteWord
  7438  0D2B  0876               	movf	??_FLASH_WriteWord,w
  7439  0D2C  00AF               	movwf	FLASH_WriteWord@offset
  7440                           
  7441                           ;memory.c: 77: uint8_t i;
  7442                           ;memory.c: 80: for (i = 0; i < 32; i++) {
  7443  0D2D  01B2               	clrf	FLASH_WriteWord@i
  7444  0D2E  3020               	movlw	32
  7445  0D2F  0232               	subwf	FLASH_WriteWord@i,w
  7446  0D30  1803               	btfsc	3,0
  7447  0D31  2D50               	goto	l4515
  7448  0D32                     l4509:	
  7449                           
  7450                           ;memory.c: 81: ramBuf[i] = FLASH_ReadWord((blockStartAddr + i));
  7451  0D32  0832               	movf	FLASH_WriteWord@i,w
  7452  0D33  0730               	addwf	FLASH_WriteWord@blockStartAddr,w
  7453  0D34  00F3               	movwf	FLASH_ReadWord@flashAddr
  7454  0D35  0831               	movf	FLASH_WriteWord@blockStartAddr+1,w
  7455  0D36  1803               	skipnc
  7456  0D37  0A31               	incf	FLASH_WriteWord@blockStartAddr+1,w
  7457  0D38  00F4               	movwf	FLASH_ReadWord@flashAddr+1
  7458  0D39  3189  217D  318D   	fcall	_FLASH_ReadWord
  7459  0D3C  0020               	movlb	0	; select bank0
  7460  0D3D  3532               	lslf	FLASH_WriteWord@i,w
  7461  0D3E  072C               	addwf	FLASH_WriteWord@ramBuf,w
  7462  0D3F  00F6               	movwf	??_FLASH_WriteWord
  7463  0D40  0876               	movf	??_FLASH_WriteWord,w
  7464  0D41  0086               	movwf	6
  7465  0D42  3001               	movlw	1	; select bank2/3
  7466  0D43  0087               	movwf	7
  7467  0D44  0873               	movf	?_FLASH_ReadWord,w
  7468  0D45  3FC0               	movwi [0]fsr1
  7469  0D46  0874               	movf	?_FLASH_ReadWord+1,w
  7470  0D47  3FC1               	movwi [1]fsr1
  7471  0D48  3001               	movlw	1
  7472  0D49  00F6               	movwf	??_FLASH_WriteWord
  7473  0D4A  0876               	movf	??_FLASH_WriteWord,w
  7474  0D4B  07B2               	addwf	FLASH_WriteWord@i,f
  7475  0D4C  3020               	movlw	32
  7476  0D4D  0232               	subwf	FLASH_WriteWord@i,w
  7477  0D4E  1C03               	skipc
  7478  0D4F  2D32               	goto	l4509
  7479  0D50                     l4515:	
  7480                           
  7481                           ;memory.c: 82: }
  7482                           ;memory.c: 85: ramBuf[offset] = word;
  7483  0D50  352F               	lslf	FLASH_WriteWord@offset,w
  7484  0D51  072C               	addwf	FLASH_WriteWord@ramBuf,w
  7485  0D52  00F6               	movwf	??_FLASH_WriteWord
  7486  0D53  0876               	movf	??_FLASH_WriteWord,w
  7487  0D54  0086               	movwf	6
  7488  0D55  3001               	movlw	1	; select bank2/3
  7489  0D56  0087               	movwf	7
  7490  0D57  082D               	movf	FLASH_WriteWord@word,w
  7491  0D58  3FC0               	movwi [0]fsr1
  7492  0D59  082E               	movf	FLASH_WriteWord@word+1,w
  7493  0D5A  3FC1               	movwi [1]fsr1
  7494                           
  7495                           ;memory.c: 88: FLASH_WriteBlock(blockStartAddr, ramBuf);
  7496  0D5B  0831               	movf	FLASH_WriteWord@blockStartAddr+1,w
  7497  0D5C  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  7498  0D5D  0830               	movf	FLASH_WriteWord@blockStartAddr,w
  7499  0D5E  00A0               	movwf	FLASH_WriteBlock@writeAddr
  7500  0D5F  082C               	movf	FLASH_WriteWord@ramBuf,w
  7501  0D60  00F6               	movwf	??_FLASH_WriteWord
  7502  0D61  0876               	movf	??_FLASH_WriteWord,w
  7503  0D62  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  7504  0D63  3187  2759         	fcall	_FLASH_WriteBlock
  7505  0D65  0008               	return
  7506  0D66                     __end_of_FLASH_WriteWord:	
  7507                           
  7508                           	psect	text27
  7509  0759                     __ptext27:	
  7510 ;; *************** function _FLASH_WriteBlock *****************
  7511 ;; Defined at:
  7512 ;;		line 91 in file "mcc_generated_files/memory.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  writeAddr       2    0[BANK0 ] unsigned int 
  7515 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned int 
  7516 ;;		 -> Flash_buff(64), 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  blockStartAd    2    6[BANK0 ] unsigned int 
  7519 ;;  i               1    9[BANK0 ] unsigned char 
  7520 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  1    wreg      char 
  7523 ;; Registers used:
  7524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7530 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;Total ram usage:       10 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    4
  7537 ;; This function calls:
  7538 ;;		_FLASH_EraseBlock
  7539 ;; This function is called by:
  7540 ;;		_FLASH_WriteWord
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _FLASH_WriteBlock
  7546  0759                     _FLASH_WriteBlock:	
  7547                           
  7548                           ;memory.c: 92: uint16_t blockStartAddr = (uint16_t) (writeAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
  7549                           
  7550                           ;incstack = 0
  7551                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7552  0759  30E0               	movlw	224
  7553  075A  0020               	movlb	0	; select bank0
  7554  075B  0520               	andwf	FLASH_WriteBlock@writeAddr,w
  7555  075C  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
  7556  075D  303F               	movlw	63
  7557  075E  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
  7558  075F  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
  7559                           
  7560                           ;memory.c: 93: uint8_t GIEBitValue = INTCONbits.GIE;
  7561  0760  3000               	movlw	0
  7562  0761  1B8B               	btfsc	11,7	;volatile
  7563  0762  3001               	movlw	1
  7564  0763  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
  7565                           
  7566                           ;memory.c: 94: uint8_t i;
  7567                           ;memory.c: 97: if (writeAddr != blockStartAddr) {
  7568  0764  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  7569  0765  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  7570  0766  1D03               	skipz
  7571  0767  2F6A               	goto	u3575
  7572  0768  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
  7573  0769  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
  7574  076A                     u3575:	
  7575  076A  1D03               	btfss	3,2
  7576  076B  0008               	return
  7577                           
  7578                           ;memory.c: 99: }
  7579                           ;memory.c: 101: INTCONbits.GIE = 0;
  7580                           
  7581                           ;memory.c: 98: return -1;
  7582                           ;	Return value of _FLASH_WriteBlock is never used
  7583  076C  138B               	bcf	11,7	;volatile
  7584                           
  7585                           ;memory.c: 104: FLASH_EraseBlock(writeAddr);
  7586  076D  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  7587  076E  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  7588  076F  0820               	movf	FLASH_WriteBlock@writeAddr,w
  7589  0770  00F3               	movwf	FLASH_EraseBlock@startAddr
  7590  0771  318A  2201  3187   	fcall	_FLASH_EraseBlock
  7591                           
  7592                           ;memory.c: 107: PMCON1bits.CFGS = 0;
  7593  0774  0023               	movlb	3	; select bank3
  7594  0775  1315               	bcf	21,6	;volatile
  7595                           
  7596                           ;memory.c: 108: PMCON1bits.WREN = 1;
  7597  0776  1515               	bsf	21,2	;volatile
  7598                           
  7599                           ;memory.c: 109: PMCON1bits.LWLO = 1;
  7600  0777  1695               	bsf	21,5	;volatile
  7601                           
  7602                           ;memory.c: 111: for (i = 0; i < 32; i++) {
  7603  0778  0020               	movlb	0	; select bank0
  7604  0779  01A9               	clrf	FLASH_WriteBlock@i
  7605  077A  3020               	movlw	32
  7606  077B  0229               	subwf	FLASH_WriteBlock@i,w
  7607  077C  1803               	btfsc	3,0
  7608  077D  2FBB               	goto	l166
  7609  077E                     l4383:	
  7610                           
  7611                           ;memory.c: 113: PMADRL = (writeAddr & 0xFF);
  7612  077E  0820               	movf	FLASH_WriteBlock@writeAddr,w
  7613  077F  0023               	movlb	3	; select bank3
  7614  0780  0091               	movwf	17	;volatile
  7615                           
  7616                           ;memory.c: 115: PMADRH = ((writeAddr & 0xFF00) >> 8);
  7617  0781  0020               	movlb	0	; select bank0
  7618  0782  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  7619  0783  0023               	movlb	3	; select bank3
  7620  0784  0092               	movwf	18	;volatile
  7621                           
  7622                           ;memory.c: 118: PMDATL = flashWordArray[i];
  7623  0785  0020               	movlb	0	; select bank0
  7624  0786  3529               	lslf	FLASH_WriteBlock@i,w
  7625  0787  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  7626  0788  00A3               	movwf	??_FLASH_WriteBlock
  7627  0789  0823               	movf	??_FLASH_WriteBlock,w
  7628  078A  0086               	movwf	6
  7629  078B  3001               	movlw	1	; select bank2/3
  7630  078C  0087               	movwf	7
  7631  078D  0801               	movf	1,w
  7632  078E  0023               	movlb	3	; select bank3
  7633  078F  0093               	movwf	19	;volatile
  7634                           
  7635                           ;memory.c: 119: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  7636  0790  0020               	movlb	0	; select bank0
  7637  0791  3529               	lslf	FLASH_WriteBlock@i,w
  7638  0792  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  7639  0793  00A3               	movwf	??_FLASH_WriteBlock
  7640  0794  0823               	movf	??_FLASH_WriteBlock,w
  7641  0795  0086               	movwf	6
  7642  0796  3001               	movlw	1	; select bank2/3
  7643  0797  0087               	movwf	7
  7644  0798  3F40               	moviw [0]fsr1
  7645  0799  00A4               	movwf	??_FLASH_WriteBlock+1
  7646  079A  3F41               	moviw [1]fsr1
  7647  079B  00A5               	movwf	??_FLASH_WriteBlock+2
  7648  079C  0825               	movf	??_FLASH_WriteBlock+2,w
  7649  079D  0023               	movlb	3	; select bank3
  7650  079E  0094               	movwf	20	;volatile
  7651                           
  7652                           ;memory.c: 121: if (i == (32 - 1)) {
  7653  079F  301F               	movlw	31
  7654  07A0  0020               	movlb	0	; select bank0
  7655  07A1  0629               	xorwf	FLASH_WriteBlock@i,w
  7656  07A2  1D03               	btfss	3,2
  7657  07A3  2FA6               	goto	l4395
  7658                           
  7659                           ;memory.c: 123: PMCON1bits.LWLO = 0;
  7660  07A4  0023               	movlb	3	; select bank3
  7661  07A5  1295               	bcf	21,5	;volatile
  7662  07A6                     l4395:	
  7663                           
  7664                           ;memory.c: 124: }
  7665                           ;memory.c: 126: PMCON2 = 0x55;
  7666  07A6  3055               	movlw	85
  7667  07A7  0023               	movlb	3	; select bank3
  7668  07A8  0096               	movwf	22	;volsfr
  7669                           
  7670                           ;memory.c: 127: PMCON2 = 0xAA;
  7671  07A9  30AA               	movlw	170
  7672  07AA  0096               	movwf	22	;volsfr
  7673                           
  7674                           ;memory.c: 128: PMCON1bits.WR = 1;
  7675  07AB  1495               	bsf	21,1	;volatile
  7676                           
  7677                           ;memory.c: 129: __nop();
  7678  07AC  0000               	nop
  7679                           
  7680                           ;memory.c: 130: __nop();
  7681  07AD  0000               	nop
  7682                           
  7683                           ;memory.c: 132: writeAddr++;
  7684  07AE  3001               	movlw	1
  7685  07AF  0020               	movlb	0	; select bank0
  7686  07B0  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  7687  07B1  3000               	movlw	0
  7688  07B2  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  7689  07B3  3001               	movlw	1
  7690  07B4  00A3               	movwf	??_FLASH_WriteBlock
  7691  07B5  0823               	movf	??_FLASH_WriteBlock,w
  7692  07B6  07A9               	addwf	FLASH_WriteBlock@i,f
  7693  07B7  3020               	movlw	32
  7694  07B8  0229               	subwf	FLASH_WriteBlock@i,w
  7695  07B9  1C03               	skipc
  7696  07BA  2F7E               	goto	l4383
  7697  07BB                     l166:	
  7698                           
  7699                           ;memory.c: 133: }
  7700                           ;memory.c: 135: PMCON1bits.WREN = 0;
  7701  07BB  0023               	movlb	3	; select bank3
  7702  07BC  1115               	bcf	21,2	;volatile
  7703                           
  7704                           ;memory.c: 136: INTCONbits.GIE = GIEBitValue;
  7705  07BD  0020               	movlb	0	; select bank0
  7706  07BE  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
  7707  07BF  1C03               	skipc
  7708  07C0  138B               	bcf	11,7	;volatile
  7709  07C1  1803               	skipnc
  7710  07C2  178B               	bsf	11,7	;volatile
  7711  07C3  0008               	return
  7712  07C4                     __end_of_FLASH_WriteBlock:	
  7713                           ;memory.c: 138: return 0;
  7714                           ;	Return value of _FLASH_WriteBlock is never used
  7715                           
  7716                           
  7717                           	psect	text28
  7718  0A01                     __ptext28:	
  7719 ;; *************** function _FLASH_EraseBlock *****************
  7720 ;; Defined at:
  7721 ;;		line 141 in file "mcc_generated_files/memory.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  startAddr       2    3[COMMON] unsigned int 
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      void 
  7728 ;; Registers used:
  7729 ;;		wreg, status,2, status,0
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7735 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;Total ram usage:        3 bytes
  7740 ;; Hardware stack levels used:    1
  7741 ;; Hardware stack levels required when called:    3
  7742 ;; This function calls:
  7743 ;;		Nothing
  7744 ;; This function is called by:
  7745 ;;		_FLASH_WriteBlock
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           
  7750                           ;psect for function _FLASH_EraseBlock
  7751  0A01                     _FLASH_EraseBlock:	
  7752                           
  7753                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  7754                           
  7755                           ;incstack = 0
  7756                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  7757  0A01  3000               	movlw	0
  7758  0A02  1B8B               	btfsc	11,7	;volatile
  7759  0A03  3001               	movlw	1
  7760  0A04  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  7761                           
  7762                           ;memory.c: 145: INTCONbits.GIE = 0;
  7763  0A05  138B               	bcf	11,7	;volatile
  7764                           
  7765                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  7766  0A06  0873               	movf	FLASH_EraseBlock@startAddr,w
  7767  0A07  0023               	movlb	3	; select bank3
  7768  0A08  0091               	movwf	17	;volatile
  7769                           
  7770                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  7771  0A09  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  7772  0A0A  0092               	movwf	18	;volatile
  7773                           
  7774                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  7775  0A0B  1315               	bcf	21,6	;volatile
  7776                           
  7777                           ;memory.c: 153: PMCON1bits.FREE = 1;
  7778  0A0C  1615               	bsf	21,4	;volatile
  7779                           
  7780                           ;memory.c: 154: PMCON1bits.WREN = 1;
  7781  0A0D  1515               	bsf	21,2	;volatile
  7782                           
  7783                           ;memory.c: 157: PMCON2 = 0x55;
  7784  0A0E  3055               	movlw	85
  7785  0A0F  0096               	movwf	22	;volsfr
  7786                           
  7787                           ;memory.c: 158: PMCON2 = 0xAA;
  7788  0A10  30AA               	movlw	170
  7789  0A11  0096               	movwf	22	;volsfr
  7790                           
  7791                           ;memory.c: 159: PMCON1bits.WR = 1;
  7792  0A12  1495               	bsf	21,1	;volatile
  7793                           
  7794                           ;memory.c: 160: __nop();
  7795  0A13  0000               	nop
  7796                           
  7797                           ;memory.c: 161: __nop();
  7798  0A14  0000               	nop
  7799                           
  7800                           ;memory.c: 163: PMCON1bits.WREN = 0;
  7801  0A15  0023               	movlb	3	; select bank3
  7802  0A16  1115               	bcf	21,2	;volatile
  7803                           
  7804                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  7805  0A17  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  7806  0A18  1C03               	skipc
  7807  0A19  138B               	bcf	11,7	;volatile
  7808  0A1A  1803               	skipnc
  7809  0A1B  178B               	bsf	11,7	;volatile
  7810  0A1C  0008               	return
  7811  0A1D                     __end_of_FLASH_EraseBlock:	
  7812                           
  7813                           	psect	text29
  7814  097D                     __ptext29:	
  7815 ;; *************** function _FLASH_ReadWord *****************
  7816 ;; Defined at:
  7817 ;;		line 58 in file "mcc_generated_files/memory.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  flashAddr       2    3[COMMON] unsigned int 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  2    3[COMMON] unsigned int 
  7824 ;; Registers used:
  7825 ;;		wreg, status,2, status,0
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7831 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;Total ram usage:        3 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    3
  7838 ;; This function calls:
  7839 ;;		Nothing
  7840 ;; This function is called by:
  7841 ;;		_FLASH_WriteWord
  7842 ;;		_Key_Process
  7843 ;;		_Serach_Flash_Head
  7844 ;; This function uses a non-reentrant model
  7845 ;;
  7846                           
  7847                           
  7848                           ;psect for function _FLASH_ReadWord
  7849  097D                     _FLASH_ReadWord:	
  7850                           
  7851                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  7852                           
  7853                           ;incstack = 0
  7854                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  7855  097D  3000               	movlw	0
  7856  097E  1B8B               	btfsc	11,7	;volatile
  7857  097F  3001               	movlw	1
  7858  0980  00F5               	movwf	FLASH_ReadWord@GIEBitValue
  7859                           
  7860                           ;memory.c: 61: INTCONbits.GIE = 0;
  7861  0981  138B               	bcf	11,7	;volatile
  7862                           
  7863                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  7864  0982  0873               	movf	FLASH_ReadWord@flashAddr,w
  7865  0983  0023               	movlb	3	; select bank3
  7866  0984  0091               	movwf	17	;volatile
  7867                           
  7868                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  7869  0985  0874               	movf	FLASH_ReadWord@flashAddr+1,w
  7870  0986  0092               	movwf	18	;volatile
  7871                           
  7872                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  7873  0987  1315               	bcf	21,6	;volatile
  7874                           
  7875                           ;memory.c: 66: PMCON1bits.RD = 1;
  7876  0988  1415               	bsf	21,0	;volatile
  7877                           
  7878                           ;memory.c: 67: __nop();
  7879  0989  0000               	nop
  7880                           
  7881                           ;memory.c: 68: __nop();
  7882  098A  0000               	nop
  7883                           
  7884                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  7885  098B  0C75               	rrf	FLASH_ReadWord@GIEBitValue,w
  7886  098C  1C03               	skipc
  7887  098D  138B               	bcf	11,7	;volatile
  7888  098E  1803               	skipnc
  7889  098F  178B               	bsf	11,7	;volatile
  7890                           
  7891                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  7892  0990  0023               	movlb	3	; select bank3
  7893  0991  0814               	movf	20,w	;volatile
  7894  0992  00F4               	movwf	?_FLASH_ReadWord+1
  7895  0993  0813               	movf	19,w	;volatile
  7896  0994  00F3               	movwf	?_FLASH_ReadWord
  7897  0995  0008               	return
  7898  0996                     __end_of_FLASH_ReadWord:	
  7899                           
  7900                           	psect	text30
  7901  0F9C                     __ptext30:	
  7902 ;; *************** function _Bq32k_Rtc_Read_Time *****************
  7903 ;; Defined at:
  7904 ;;		line 30 in file "mcc_generated_files/bq32k.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  p               1    wreg     PTR struct bq32k_regs
  7907 ;;		 -> rtc_tm(7), 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  p               1   15[BANK0 ] PTR struct bq32k_regs
  7910 ;;		 -> rtc_tm(7), 
  7911 ;;  temp           10    5[BANK0 ] unsigned char [10]
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  1    wreg      void 
  7914 ;; Registers used:
  7915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7925 ;;Total ram usage:       13 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; Hardware stack levels required when called:    5
  7928 ;; This function calls:
  7929 ;;		_I2C_Read_Buffer
  7930 ;;		_bcd2bin
  7931 ;; This function is called by:
  7932 ;;		_time_Display
  7933 ;;		_Calculate_Time
  7934 ;;		_Save_Write_time
  7935 ;; This function uses a non-reentrant model
  7936 ;;
  7937                           
  7938                           
  7939                           ;psect for function _Bq32k_Rtc_Read_Time
  7940  0F9C                     _Bq32k_Rtc_Read_Time:	
  7941                           
  7942                           ;incstack = 0
  7943                           ; Regs used in _Bq32k_Rtc_Read_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7944                           ;Bq32k_Rtc_Read_Time@p stored from wreg
  7945  0F9C  0020               	movlb	0	; select bank0
  7946  0F9D  00AF               	movwf	Bq32k_Rtc_Read_Time@p
  7947                           
  7948                           ;bq32k.c: 32: unsigned char temp[10] ;
  7949                           ;bq32k.c: 33: I2C_Read_Buffer( 0 , temp , 7);
  7950  0F9E  3025               	movlw	(low (Bq32k_Rtc_Read_Time@temp| 0))& (0+255)
  7951  0F9F  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7952  0FA0  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7953  0FA1  00F6               	movwf	I2C_Read_Buffer@buff
  7954  0FA2  3007               	movlw	7
  7955  0FA3  00A4               	movwf	??_Bq32k_Rtc_Read_Time+1
  7956  0FA4  0824               	movf	??_Bq32k_Rtc_Read_Time+1,w
  7957  0FA5  00F7               	movwf	I2C_Read_Buffer@Length
  7958  0FA6  3000               	movlw	0
  7959  0FA7  3186  266F  318F   	fcall	_I2C_Read_Buffer
  7960                           
  7961                           ;bq32k.c: 34: p->seconds = bcd2bin(temp[0] & 0x7F);
  7962  0FAA  0020               	movlb	0	; select bank0
  7963  0FAB  0825               	movf	Bq32k_Rtc_Read_Time@temp,w
  7964  0FAC  397F               	andlw	127
  7965  0FAD  3188  20DA  318F   	fcall	_bcd2bin
  7966  0FB0  0020               	movlb	0	; select bank0
  7967  0FB1  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7968  0FB2  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  7969  0FB3  0086               	movwf	6
  7970  0FB4  0187               	clrf	7
  7971  0FB5  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7972  0FB6  0081               	movwf	1
  7973                           
  7974                           ;bq32k.c: 35: p->minutes = bcd2bin(temp[1] & 0x7F);
  7975  0FB7  0826               	movf	Bq32k_Rtc_Read_Time@temp+1,w
  7976  0FB8  397F               	andlw	127
  7977  0FB9  3188  20DA  318F   	fcall	_bcd2bin
  7978  0FBC  0020               	movlb	0	; select bank0
  7979  0FBD  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7980  0FBE  0A2F               	incf	Bq32k_Rtc_Read_Time@p,w
  7981  0FBF  0086               	movwf	6
  7982  0FC0  0187               	clrf	7
  7983  0FC1  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7984  0FC2  0081               	movwf	1
  7985                           
  7986                           ;bq32k.c: 36: p->hours = bcd2bin(temp[2] & 0x3F);
  7987  0FC3  0827               	movf	Bq32k_Rtc_Read_Time@temp+2,w
  7988  0FC4  393F               	andlw	63
  7989  0FC5  3188  20DA  318F   	fcall	_bcd2bin
  7990  0FC8  0020               	movlb	0	; select bank0
  7991  0FC9  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  7992  0FCA  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  7993  0FCB  3E02               	addlw	2
  7994  0FCC  0086               	movwf	6
  7995  0FCD  0187               	clrf	7
  7996  0FCE  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  7997  0FCF  0081               	movwf	1
  7998                           
  7999                           ;bq32k.c: 37: p->wday = bcd2bin(temp[3]);
  8000  0FD0  0828               	movf	Bq32k_Rtc_Read_Time@temp+3,w
  8001  0FD1  3188  20DA  318F   	fcall	_bcd2bin
  8002  0FD4  0020               	movlb	0	; select bank0
  8003  0FD5  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  8004  0FD6  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  8005  0FD7  3E03               	addlw	3
  8006  0FD8  0086               	movwf	6
  8007  0FD9  0187               	clrf	7
  8008  0FDA  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  8009  0FDB  0081               	movwf	1
  8010                           
  8011                           ;bq32k.c: 38: p->date = bcd2bin(temp[4]);
  8012  0FDC  0829               	movf	Bq32k_Rtc_Read_Time@temp+4,w
  8013  0FDD  3188  20DA  318F   	fcall	_bcd2bin
  8014  0FE0  0020               	movlb	0	; select bank0
  8015  0FE1  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  8016  0FE2  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  8017  0FE3  3E04               	addlw	4
  8018  0FE4  0086               	movwf	6
  8019  0FE5  0187               	clrf	7
  8020  0FE6  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  8021  0FE7  0081               	movwf	1
  8022                           
  8023                           ;bq32k.c: 39: p->month = bcd2bin(temp[5]);
  8024  0FE8  082A               	movf	Bq32k_Rtc_Read_Time@temp+5,w
  8025  0FE9  3188  20DA  318F   	fcall	_bcd2bin
  8026  0FEC  0020               	movlb	0	; select bank0
  8027  0FED  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  8028  0FEE  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  8029  0FEF  3E05               	addlw	5
  8030  0FF0  0086               	movwf	6
  8031  0FF1  0187               	clrf	7
  8032  0FF2  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  8033  0FF3  0081               	movwf	1
  8034                           
  8035                           ;bq32k.c: 40: p->years= bcd2bin(temp[6]);
  8036  0FF4  082B               	movf	Bq32k_Rtc_Read_Time@temp+6,w
  8037  0FF5  3188  20DA         	fcall	_bcd2bin
  8038  0FF7  0020               	movlb	0	; select bank0
  8039  0FF8  00A3               	movwf	??_Bq32k_Rtc_Read_Time
  8040  0FF9  082F               	movf	Bq32k_Rtc_Read_Time@p,w
  8041  0FFA  3E06               	addlw	6
  8042  0FFB  0086               	movwf	6
  8043  0FFC  0187               	clrf	7
  8044  0FFD  0823               	movf	??_Bq32k_Rtc_Read_Time,w
  8045  0FFE  0081               	movwf	1
  8046  0FFF  0008               	return
  8047  1000                     __end_of_Bq32k_Rtc_Read_Time:	
  8048                           
  8049                           	psect	text31
  8050  08DA                     __ptext31:	
  8051 ;; *************** function _bcd2bin *****************
  8052 ;; Defined at:
  8053 ;;		line 68 in file "mcc_generated_files/bq32k.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  val             1    wreg     unsigned char 
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  val             1    7[COMMON] unsigned char 
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      unsigned char 
  8060 ;; Registers used:
  8061 ;;		wreg, status,2, status,0, pclath, cstack
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;Total ram usage:        4 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; Hardware stack levels required when called:    4
  8074 ;; This function calls:
  8075 ;;		___bmul
  8076 ;; This function is called by:
  8077 ;;		_Bq32k_Rtc_Read_Time
  8078 ;; This function uses a non-reentrant model
  8079 ;;
  8080                           
  8081                           
  8082                           ;psect for function _bcd2bin
  8083  08DA                     _bcd2bin:	
  8084                           
  8085                           ;incstack = 0
  8086                           ; Regs used in _bcd2bin: [wreg+status,2+status,0+pclath+cstack]
  8087                           ;bcd2bin@val stored from wreg
  8088  08DA  00F7               	movwf	bcd2bin@val
  8089                           
  8090                           ;bq32k.c: 70: return (val & 0x0f) + (val >> 4) * 10;
  8091  08DB  300F               	movlw	15
  8092  08DC  0577               	andwf	bcd2bin@val,w
  8093  08DD  0020               	movlb	0	; select bank0
  8094  08DE  00A0               	movwf	??_bcd2bin
  8095  08DF  300A               	movlw	10
  8096  08E0  00A1               	movwf	??_bcd2bin+1
  8097  08E1  0821               	movf	??_bcd2bin+1,w
  8098  08E2  00F3               	movwf	___bmul@multiplicand
  8099  08E3  0877               	movf	bcd2bin@val,w
  8100  08E4  00A2               	movwf	??_bcd2bin+2
  8101  08E5  3004               	movlw	4
  8102  08E6                     u3765:	
  8103  08E6  36A2               	lsrf	??_bcd2bin+2,f
  8104  08E7  0B89               	decfsz	9,f
  8105  08E8  28E6               	goto	u3765
  8106  08E9  0822               	movf	??_bcd2bin+2,w
  8107  08EA  3188  20C9         	fcall	___bmul
  8108  08EC  0020               	movlb	0	; select bank0
  8109  08ED  0720               	addwf	??_bcd2bin,w
  8110  08EE  0008               	return
  8111  08EF                     __end_of_bcd2bin:	
  8112                           
  8113                           	psect	text32
  8114  08C9                     __ptext32:	
  8115 ;; *************** function ___bmul *****************
  8116 ;; Defined at:
  8117 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;  multiplier      1    wreg     unsigned char 
  8120 ;;  multiplicand    1    3[COMMON] unsigned char 
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  multiplier      1    6[COMMON] unsigned char 
  8123 ;;  product         1    5[COMMON] unsigned char 
  8124 ;; Return value:  Size  Location     Type
  8125 ;;                  1    wreg      unsigned char 
  8126 ;; Registers used:
  8127 ;;		wreg, status,2, status,0
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8133 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;Total ram usage:        4 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    3
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_bcd2bin
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           
  8148                           ;psect for function ___bmul
  8149  08C9                     ___bmul:	
  8150                           
  8151                           ;incstack = 0
  8152                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8153                           ;___bmul@multiplier stored from wreg
  8154  08C9  00F6               	movwf	___bmul@multiplier
  8155  08CA  01F5               	clrf	___bmul@product
  8156  08CB                     l4489:	
  8157  08CB  1C76               	btfss	___bmul@multiplier,0
  8158  08CC  28D1               	goto	l4493
  8159  08CD  0873               	movf	___bmul@multiplicand,w
  8160  08CE  00F4               	movwf	??___bmul
  8161  08CF  0874               	movf	??___bmul,w
  8162  08D0  07F5               	addwf	___bmul@product,f
  8163  08D1                     l4493:	
  8164  08D1  1003               	clrc
  8165  08D2  0DF3               	rlf	___bmul@multiplicand,f
  8166  08D3  1003               	clrc
  8167  08D4  0CF6               	rrf	___bmul@multiplier,f
  8168  08D5  0876               	movf	___bmul@multiplier,w
  8169  08D6  1D03               	btfss	3,2
  8170  08D7  28CB               	goto	l4489
  8171  08D8  0875               	movf	___bmul@product,w
  8172  08D9  0008               	return
  8173  08DA                     __end_of___bmul:	
  8174                           
  8175                           	psect	text33
  8176  066F                     __ptext33:	
  8177 ;; *************** function _I2C_Read_Buffer *****************
  8178 ;; Defined at:
  8179 ;;		line 120 in file "mcc_generated_files/i2c.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  ADD             1    wreg     unsigned char 
  8182 ;;  buff            1    6[COMMON] PTR unsigned char 
  8183 ;;		 -> Bq32k_Rtc_Read_Time@temp(10), 
  8184 ;;  Length          1    7[COMMON] unsigned char 
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;  ADD             1    1[BANK0 ] unsigned char 
  8187 ;;  Flag            1    2[BANK0 ] unsigned char 
  8188 ;; Return value:  Size  Location     Type
  8189 ;;                  1    wreg      unsigned char 
  8190 ;; Registers used:
  8191 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8192 ;; Tracked objects:
  8193 ;;		On entry : 0/0
  8194 ;;		On exit  : 0/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8197 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;Total ram usage:        5 bytes
  8202 ;; Hardware stack levels used:    1
  8203 ;; Hardware stack levels required when called:    4
  8204 ;; This function calls:
  8205 ;;		_I2C_Receive_Byte
  8206 ;;		_I2C_Send_Byte
  8207 ;;		_I2C_Start
  8208 ;;		_I2C_Stop
  8209 ;; This function is called by:
  8210 ;;		_Bq32k_Rtc_Read_Time
  8211 ;; This function uses a non-reentrant model
  8212 ;;
  8213                           
  8214                           
  8215                           ;psect for function _I2C_Read_Buffer
  8216  066F                     _I2C_Read_Buffer:	
  8217                           
  8218                           ;incstack = 0
  8219                           ; Regs used in _I2C_Read_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8220                           ;I2C_Read_Buffer@ADD stored from wreg
  8221  066F  0020               	movlb	0	; select bank0
  8222  0670  00A1               	movwf	I2C_Read_Buffer@ADD
  8223                           
  8224                           ;i2c.c: 122: unsigned char Flag=1;
  8225  0671  01A2               	clrf	I2C_Read_Buffer@Flag
  8226  0672  0AA2               	incf	I2C_Read_Buffer@Flag,f
  8227                           
  8228                           ;i2c.c: 124: I2C_Start();
  8229  0673  3189  214B  3186   	fcall	_I2C_Start
  8230                           
  8231                           ;i2c.c: 126: Flag=I2C_Send_Byte(0XD0);
  8232  0676  30D0               	movlw	208
  8233  0677  318D  25F6  3186   	fcall	_I2C_Send_Byte
  8234  067A  0020               	movlb	0	; select bank0
  8235  067B  00A0               	movwf	??_I2C_Read_Buffer
  8236  067C  0820               	movf	??_I2C_Read_Buffer,w
  8237  067D  00A2               	movwf	I2C_Read_Buffer@Flag
  8238                           
  8239                           ;i2c.c: 127: if(Flag)
  8240  067E  0822               	movf	I2C_Read_Buffer@Flag,w
  8241  067F  1D03               	btfss	3,2
  8242  0680  0008               	return
  8243                           
  8244                           ;i2c.c: 130: Flag=I2C_Send_Byte(ADD);
  8245                           
  8246                           ;i2c.c: 128: return 0x01;
  8247                           ;	Return value of _I2C_Read_Buffer is never used
  8248  0681  0821               	movf	I2C_Read_Buffer@ADD,w
  8249  0682  318D  25F6  3186   	fcall	_I2C_Send_Byte
  8250  0685  0020               	movlb	0	; select bank0
  8251  0686  00A0               	movwf	??_I2C_Read_Buffer
  8252  0687  0820               	movf	??_I2C_Read_Buffer,w
  8253  0688  00A2               	movwf	I2C_Read_Buffer@Flag
  8254                           
  8255                           ;i2c.c: 131: if(Flag)
  8256  0689  0822               	movf	I2C_Read_Buffer@Flag,w
  8257  068A  1D03               	btfss	3,2
  8258  068B  0008               	return
  8259                           
  8260                           ;i2c.c: 134: I2C_Start();
  8261                           
  8262                           ;i2c.c: 132: return 0x01;
  8263                           ;	Return value of _I2C_Read_Buffer is never used
  8264  068C  3189  214B  3186   	fcall	_I2C_Start
  8265                           
  8266                           ;i2c.c: 135: Flag=I2C_Send_Byte(0XD0+1);
  8267  068F  30D1               	movlw	209
  8268  0690  318D  25F6  3186   	fcall	_I2C_Send_Byte
  8269  0693  0020               	movlb	0	; select bank0
  8270  0694  00A0               	movwf	??_I2C_Read_Buffer
  8271  0695  0820               	movf	??_I2C_Read_Buffer,w
  8272  0696  00A2               	movwf	I2C_Read_Buffer@Flag
  8273                           
  8274                           ;i2c.c: 136: if(Flag)
  8275  0697  0822               	movf	I2C_Read_Buffer@Flag,w
  8276  0698  1D03               	btfss	3,2
  8277  0699  0008               	return
  8278  069A                     l4557:	
  8279  069A  3002               	movlw	2
  8280  069B  0277               	subwf	I2C_Read_Buffer@Length,w
  8281  069C  1C03               	btfss	3,0
  8282  069D  2EC5               	goto	l4559
  8283                           
  8284                           ;i2c.c: 140: {
  8285                           ;i2c.c: 141: *buff = I2C_Receive_Byte();
  8286                           
  8287                           ;i2c.c: 139: while(Length>1)
  8288                           
  8289                           ;i2c.c: 137: return 0x01;
  8290                           ;	Return value of _I2C_Read_Buffer is never used
  8291  069E  318A  22FC  3186   	fcall	_I2C_Receive_Byte
  8292  06A1  0020               	movlb	0	; select bank0
  8293  06A2  00A0               	movwf	??_I2C_Read_Buffer
  8294  06A3  0876               	movf	I2C_Read_Buffer@buff,w
  8295  06A4  0086               	movwf	6
  8296  06A5  0187               	clrf	7
  8297  06A6  0820               	movf	??_I2C_Read_Buffer,w
  8298  06A7  0081               	movwf	1
  8299                           
  8300                           ;i2c.c: 143: do { LATB1 = 0; } while(0);
  8301  06A8  0022               	movlb	2	; select bank2
  8302  06A9  108D               	bcf	13,1	;volatile
  8303                           
  8304                           ;i2c.c: 144: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8305  06AA  3003               	movlw	3
  8306  06AB  0020               	movlb	0	; select bank0
  8307  06AC  00A0               	movwf	??_I2C_Read_Buffer
  8308  06AD                     u5327:	
  8309  06AD  0BA0               	decfsz	??_I2C_Read_Buffer,f
  8310  06AE  2EAD               	goto	u5327
  8311                           
  8312                           ;i2c.c: 145: do { LATB0 = 1; } while(0);
  8313  06AF  0022               	movlb	2	; select bank2
  8314  06B0  140D               	bsf	13,0	;volatile
  8315                           
  8316                           ;i2c.c: 146: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8317  06B1  3003               	movlw	3
  8318  06B2  0020               	movlb	0	; select bank0
  8319  06B3  00A0               	movwf	??_I2C_Read_Buffer
  8320  06B4                     u5337:	
  8321  06B4  0BA0               	decfsz	??_I2C_Read_Buffer,f
  8322  06B5  2EB4               	goto	u5337
  8323                           
  8324                           ;i2c.c: 147: do { LATB0 = 0; } while(0);
  8325  06B6  0022               	movlb	2	; select bank2
  8326  06B7  100D               	bcf	13,0	;volatile
  8327                           
  8328                           ;i2c.c: 148: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8329  06B8  3003               	movlw	3
  8330  06B9  0020               	movlb	0	; select bank0
  8331  06BA  00A0               	movwf	??_I2C_Read_Buffer
  8332  06BB                     u5347:	
  8333  06BB  0BA0               	decfsz	??_I2C_Read_Buffer,f
  8334  06BC  2EBB               	goto	u5347
  8335                           
  8336                           ;i2c.c: 150: buff++;
  8337  06BD  3001               	movlw	1
  8338  06BE  0020               	movlb	0	; select bank0
  8339  06BF  00A0               	movwf	??_I2C_Read_Buffer
  8340  06C0  0820               	movf	??_I2C_Read_Buffer,w
  8341  06C1  07F6               	addwf	I2C_Read_Buffer@buff,f
  8342                           
  8343                           ;i2c.c: 151: Length--;
  8344  06C2  3001               	movlw	1
  8345  06C3  02F7               	subwf	I2C_Read_Buffer@Length,f
  8346  06C4  2E9A               	goto	l4557
  8347  06C5                     l4559:	
  8348                           
  8349                           ;i2c.c: 152: }
  8350                           ;i2c.c: 153: *buff = I2C_Receive_Byte();
  8351  06C5  318A  22FC  3186   	fcall	_I2C_Receive_Byte
  8352  06C8  0020               	movlb	0	; select bank0
  8353  06C9  00A0               	movwf	??_I2C_Read_Buffer
  8354  06CA  0876               	movf	I2C_Read_Buffer@buff,w
  8355  06CB  0086               	movwf	6
  8356  06CC  0187               	clrf	7
  8357  06CD  0820               	movf	??_I2C_Read_Buffer,w
  8358  06CE  0081               	movwf	1
  8359                           
  8360                           ;i2c.c: 155: do { LATB1 = 1; } while(0);
  8361  06CF  0022               	movlb	2	; select bank2
  8362  06D0  148D               	bsf	13,1	;volatile
  8363                           
  8364                           ;i2c.c: 156: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8365  06D1  3003               	movlw	3
  8366  06D2  0020               	movlb	0	; select bank0
  8367  06D3  00A0               	movwf	??_I2C_Read_Buffer
  8368  06D4                     u5357:	
  8369  06D4  0BA0               	decfsz	??_I2C_Read_Buffer,f
  8370  06D5  2ED4               	goto	u5357
  8371                           
  8372                           ;i2c.c: 157: do { LATB0 = 1; } while(0);
  8373  06D6  0022               	movlb	2	; select bank2
  8374  06D7  140D               	bsf	13,0	;volatile
  8375                           
  8376                           ;i2c.c: 158: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8377  06D8  3003               	movlw	3
  8378  06D9  0020               	movlb	0	; select bank0
  8379  06DA  00A0               	movwf	??_I2C_Read_Buffer
  8380  06DB                     u5367:	
  8381  06DB  0BA0               	decfsz	??_I2C_Read_Buffer,f
  8382  06DC  2EDB               	goto	u5367
  8383                           
  8384                           ;i2c.c: 159: do { LATB0 = 0; } while(0);
  8385  06DD  0022               	movlb	2	; select bank2
  8386  06DE  100D               	bcf	13,0	;volatile
  8387                           
  8388                           ;i2c.c: 160: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8389  06DF  3003               	movlw	3
  8390  06E0  0020               	movlb	0	; select bank0
  8391  06E1  00A0               	movwf	??_I2C_Read_Buffer
  8392  06E2                     u5377:	
  8393  06E2  0BA0               	decfsz	??_I2C_Read_Buffer,f
  8394  06E3  2EE2               	goto	u5377
  8395                           
  8396                           ;i2c.c: 162: I2C_Stop();
  8397  06E4  3189  2164         	fcall	_I2C_Stop
  8398  06E6  0008               	return
  8399  06E7                     __end_of_I2C_Read_Buffer:	
  8400                           ;i2c.c: 164: return 0x00;
  8401                           ;	Return value of _I2C_Read_Buffer is never used
  8402                           
  8403                           
  8404                           	psect	text34
  8405  0AFC                     __ptext34:	
  8406 ;; *************** function _I2C_Receive_Byte *****************
  8407 ;; Defined at:
  8408 ;;		line 74 in file "mcc_generated_files/i2c.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;		None
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;  i               1    5[COMMON] unsigned char 
  8413 ;;  Data            1    4[COMMON] unsigned char 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      unsigned char 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;Total ram usage:        3 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    3
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_I2C_Read_Buffer
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           
  8438                           ;psect for function _I2C_Receive_Byte
  8439  0AFC                     _I2C_Receive_Byte:	
  8440                           
  8441                           ;i2c.c: 76: unsigned char i,Data=0;
  8442                           
  8443                           ;incstack = 0
  8444                           ; Regs used in _I2C_Receive_Byte: [wreg+status,2+status,0]
  8445  0AFC  01F4               	clrf	I2C_Receive_Byte@Data
  8446                           
  8447                           ;i2c.c: 77: do { LATB1 = 1; } while(0);
  8448  0AFD  0022               	movlb	2	; select bank2
  8449  0AFE  148D               	bsf	13,1	;volatile
  8450                           
  8451                           ;i2c.c: 78: for(i=0;i<8;i++)
  8452  0AFF  01F5               	clrf	I2C_Receive_Byte@i
  8453  0B00  3008               	movlw	8
  8454  0B01  0275               	subwf	I2C_Receive_Byte@i,w
  8455  0B02  1803               	btfsc	3,0
  8456  0B03  2B24               	goto	l4475
  8457                           
  8458                           ;i2c.c: 79: {
  8459                           ;i2c.c: 80: Data <<= 1;
  8460  0B04  1003               	clrc
  8461  0B05                     L10:	
  8462  0B05  0DF4               	rlf	I2C_Receive_Byte@Data,f
  8463                           
  8464                           ;i2c.c: 81: do { LATB0 = 1; } while(0);
  8465  0B06  0022               	movlb	2	; select bank2
  8466  0B07  140D               	bsf	13,0	;volatile
  8467                           
  8468                           ;i2c.c: 82: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8469  0B08  3003               	movlw	3
  8470  0B09  00F3               	movwf	??_I2C_Receive_Byte
  8471  0B0A                     u5387:	
  8472  0B0A  0BF3               	decfsz	??_I2C_Receive_Byte,f
  8473  0B0B  2B0A               	goto	u5387
  8474                           
  8475                           ;i2c.c: 83: do { TRISB1 = 1; } while(0);
  8476  0B0C  0021               	movlb	1	; select bank1
  8477  0B0D  148D               	bsf	13,1	;volatile
  8478                           
  8479                           ;i2c.c: 84: if(RB1)
  8480  0B0E  0020               	movlb	0	; select bank0
  8481  0B0F  1C8D               	btfss	13,1	;volatile
  8482  0B10  2B14               	goto	l773
  8483                           
  8484                           ;i2c.c: 85: {
  8485                           ;i2c.c: 86: do { TRISB1 = 0; } while(0);
  8486  0B11  0021               	movlb	1	; select bank1
  8487  0B12  108D               	bcf	13,1	;volatile
  8488                           
  8489                           ;i2c.c: 87: Data |= 0x01;
  8490  0B13  1474               	bsf	I2C_Receive_Byte@Data,0
  8491  0B14                     l773:	
  8492                           ;i2c.c: 88: }
  8493                           ;i2c.c: 89: do { TRISB1 = 0; } while(0);
  8494                           
  8495  0B14  0021               	movlb	1	; select bank1
  8496  0B15  108D               	bcf	13,1	;volatile
  8497                           
  8498                           ;i2c.c: 90: do { LATB0 = 0; } while(0);
  8499  0B16  0022               	movlb	2	; select bank2
  8500  0B17  100D               	bcf	13,0	;volatile
  8501                           
  8502                           ;i2c.c: 91: _delay((unsigned long)((10)*(4000000/4000000.0)));
  8503  0B18  3003               	movlw	3
  8504  0B19  00F3               	movwf	??_I2C_Receive_Byte
  8505  0B1A                     u5397:	
  8506  0B1A  0BF3               	decfsz	??_I2C_Receive_Byte,f
  8507  0B1B  2B1A               	goto	u5397
  8508  0B1C  3001               	movlw	1
  8509  0B1D  00F3               	movwf	??_I2C_Receive_Byte
  8510  0B1E  0873               	movf	??_I2C_Receive_Byte,w
  8511  0B1F  07F5               	addwf	I2C_Receive_Byte@i,f
  8512  0B20  3008               	movlw	8
  8513  0B21  0275               	subwf	I2C_Receive_Byte@i,w
  8514  0B22  1C03               	skipc
  8515  0B23  2B05               	goto	L10
  8516  0B24                     l4475:	
  8517                           
  8518                           ;i2c.c: 92: }
  8519                           ;i2c.c: 93: return Data;
  8520  0B24  0874               	movf	I2C_Receive_Byte@Data,w
  8521  0B25  0008               	return
  8522  0B26                     __end_of_I2C_Receive_Byte:	
  8523                           
  8524                           	psect	text35
  8525  0898                     __ptext35:	
  8526 ;; *************** function _maxim_clear_fault_status *****************
  8527 ;; Defined at:
  8528 ;;		line 155 in file "mcc_generated_files/max31856.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;		None
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;		None
  8533 ;; Return value:  Size  Location     Type
  8534 ;;                  1    wreg      void 
  8535 ;; Registers used:
  8536 ;;		wreg, status,2, status,0, pclath, cstack
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 0/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;Total ram usage:        1 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; Hardware stack levels required when called:    5
  8549 ;; This function calls:
  8550 ;;		_maxim_31856_read_register
  8551 ;;		_maxim_31856_write_register
  8552 ;; This function is called by:
  8553 ;;		_temperature_display
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           
  8558                           ;psect for function _maxim_clear_fault_status
  8559  0898                     _maxim_clear_fault_status:	
  8560                           
  8561                           ;max31856.c: 157: uch_cr0= maxim_31856_read_register(0x00);
  8562                           
  8563                           ;incstack = 0
  8564                           ; Regs used in _maxim_clear_fault_status: [wreg+status,2+status,0+pclath+cstack]
  8565  0898  3000               	movlw	0
  8566  0899  3188  20B8  3188   	fcall	_maxim_31856_read_register
  8567  089C  00F7               	movwf	??_maxim_clear_fault_status
  8568  089D  0877               	movf	??_maxim_clear_fault_status,w
  8569  089E  00FA               	movwf	_uch_cr0
  8570                           
  8571                           ;max31856.c: 158: uch_cr0|= (uint8_t) 0x02 ;
  8572  089F  14FA               	bsf	_uch_cr0,1
  8573                           
  8574                           ;max31856.c: 159: maxim_31856_write_register(0x80, uch_cr0);
  8575  08A0  087A               	movf	_uch_cr0,w
  8576  08A1  00F7               	movwf	??_maxim_clear_fault_status
  8577  08A2  0877               	movf	??_maxim_clear_fault_status,w
  8578  08A3  00F4               	movwf	maxim_31856_write_register@uch_register_value
  8579  08A4  3080               	movlw	128
  8580  08A5  3188  208B         	fcall	_maxim_31856_write_register
  8581  08A7  0008               	return
  8582  08A8                     __end_of_maxim_clear_fault_status:	
  8583                           
  8584                           	psect	text36
  8585  0B26                     __ptext36:	
  8586 ;; *************** function _err_Display *****************
  8587 ;; Defined at:
  8588 ;;		line 153 in file "mcc_generated_files/ht1621.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;		None
  8591 ;; Auto vars:     Size  Location     Type
  8592 ;;  num             4    6[BANK0 ] unsigned char [4]
  8593 ;; Return value:  Size  Location     Type
  8594 ;;                  1    wreg      void 
  8595 ;; Registers used:
  8596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8597 ;; Tracked objects:
  8598 ;;		On entry : 0/0
  8599 ;;		On exit  : 0/0
  8600 ;;		Unchanged: 0/0
  8601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;Total ram usage:        5 bytes
  8607 ;; Hardware stack levels used:    1
  8608 ;; Hardware stack levels required when called:    5
  8609 ;; This function calls:
  8610 ;;		_WriteAll_1621
  8611 ;; This function is called by:
  8612 ;;		_temperature_display
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           
  8617                           ;psect for function _err_Display
  8618  0B26                     _err_Display:	
  8619                           
  8620                           ;ht1621.c: 155: unsigned char num[4]={0};
  8621                           
  8622                           ;incstack = 0
  8623                           ; Regs used in _err_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8624  0B26  0021               	movlb	1	; select bank1
  8625  0B27  0827               	movf	(err_Display@F2126+3)^(0+128),w
  8626  0B28  0020               	movlb	0	; select bank0
  8627  0B29  00A9               	movwf	err_Display@num+3
  8628  0B2A  0021               	movlb	1	; select bank1
  8629  0B2B  0826               	movf	(err_Display@F2126+2)^(0+128),w
  8630  0B2C  0020               	movlb	0	; select bank0
  8631  0B2D  00A8               	movwf	err_Display@num+2
  8632  0B2E  0021               	movlb	1	; select bank1
  8633  0B2F  0825               	movf	(err_Display@F2126+1)^(0+128),w
  8634  0B30  0020               	movlb	0	; select bank0
  8635  0B31  00A7               	movwf	err_Display@num+1
  8636  0B32  0021               	movlb	1	; select bank1
  8637  0B33  0824               	movf	err_Display@F2126^(0+128),w
  8638  0B34  0020               	movlb	0	; select bank0
  8639  0B35  00A6               	movwf	err_Display@num
  8640                           
  8641                           ;ht1621.c: 156: num[1] = Dis_TAB[0x10];
  8642  0B36  3010               	movlw	low ((_Dis_TAB+16)| (0+32768))
  8643  0B37  0084               	movwf	4
  8644  0B38  3090               	movlw	high ((_Dis_TAB+16)| (0+32768))
  8645  0B39  0085               	movwf	5
  8646  0B3A  0800               	movf	0,w	;code access
  8647  0B3B  00A5               	movwf	??_err_Display
  8648  0B3C  0825               	movf	??_err_Display,w
  8649  0B3D  00A7               	movwf	err_Display@num+1
  8650                           
  8651                           ;ht1621.c: 157: num[2] = Dis_TAB[0x0c];
  8652  0B3E  300C               	movlw	low ((_Dis_TAB+12)| (0+32768))
  8653  0B3F  0084               	movwf	4
  8654  0B40  3090               	movlw	high ((_Dis_TAB+12)| (0+32768))
  8655  0B41  0085               	movwf	5
  8656  0B42  0800               	movf	0,w	;code access
  8657  0B43  00A5               	movwf	??_err_Display
  8658  0B44  0825               	movf	??_err_Display,w
  8659  0B45  00A8               	movwf	err_Display@num+2
  8660                           
  8661                           ;ht1621.c: 158: WriteAll_1621(0, num, 4);
  8662  0B46  3026               	movlw	low err_Display@num
  8663  0B47  00A0               	movwf	WriteAll_1621@p
  8664  0B48  3000               	movlw	high err_Display@num
  8665  0B49  00A1               	movwf	WriteAll_1621@p+1
  8666  0B4A  3004               	movlw	4
  8667  0B4B  00A5               	movwf	??_err_Display
  8668  0B4C  0825               	movf	??_err_Display,w
  8669  0B4D  00A2               	movwf	WriteAll_1621@cnt
  8670  0B4E  3000               	movlw	0
  8671  0B4F  318C  240E         	fcall	_WriteAll_1621
  8672  0B51  0008               	return
  8673  0B52                     __end_of_err_Display:	
  8674                           
  8675                           	psect	text37
  8676  047D                     __ptext37:	
  8677 ;; *************** function _Tc_Display *****************
  8678 ;; Defined at:
  8679 ;;		line 110 in file "mcc_generated_files/ht1621.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;		None
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  data            2   11[BANK0 ] unsigned int 
  8684 ;;  count           1   10[BANK0 ] unsigned char 
  8685 ;; Return value:  Size  Location     Type
  8686 ;;                  1    wreg      void 
  8687 ;; Registers used:
  8688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8698 ;;Total ram usage:        4 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:    5
  8701 ;; This function calls:
  8702 ;;		_WriteAll_1621
  8703 ;;		___lwdiv
  8704 ;;		___lwmod
  8705 ;;		_memset
  8706 ;; This function is called by:
  8707 ;;		_temperature_display
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           
  8712                           ;psect for function _Tc_Display
  8713  047D                     _Tc_Display:	
  8714                           
  8715                           ;ht1621.c: 112: unsigned char count = 0;
  8716                           
  8717                           ;incstack = 0
  8718                           ; Regs used in _Tc_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8719  047D  0020               	movlb	0	; select bank0
  8720  047E  01AA               	clrf	Tc_Display@count
  8721                           
  8722                           ;ht1621.c: 113: unsigned int data = temperature_int;
  8723  047F  0021               	movlb	1	; select bank1
  8724  0480  0833               	movf	(_temperature_int+1)^(0+128),w
  8725  0481  0020               	movlb	0	; select bank0
  8726  0482  00AC               	movwf	Tc_Display@data+1
  8727  0483  0021               	movlb	1	; select bank1
  8728  0484  0832               	movf	_temperature_int^(0+128),w
  8729  0485  0020               	movlb	0	; select bank0
  8730  0486  00AB               	movwf	Tc_Display@data
  8731                           
  8732                           ;ht1621.c: 114: memset(display_buff,0,4);
  8733  0487  3000               	movlw	0
  8734  0488  00F3               	movwf	memset@c
  8735  0489  00F4               	movwf	memset@c+1
  8736  048A  3004               	movlw	4
  8737  048B  00F5               	movwf	memset@n
  8738  048C  3000               	movlw	0
  8739  048D  00F6               	movwf	memset@n+1
  8740  048E  30E1               	movlw	(low (_display_buff| 0))& (0+255)
  8741  048F  3189  21E6  3184   	fcall	_memset
  8742  0492                     l4993:	
  8743                           ;ht1621.c: 115: while(data)
  8744                           
  8745  0492  0020               	movlb	0	; select bank0
  8746  0493  082B               	movf	Tc_Display@data,w
  8747  0494  042C               	iorwf	Tc_Display@data+1,w
  8748  0495  1903               	btfsc	3,2
  8749  0496  2D11               	goto	l5001
  8750                           
  8751                           ;ht1621.c: 116: {
  8752                           ;ht1621.c: 117: count++;
  8753  0497  3001               	movlw	1
  8754  0498  0020               	movlb	0	; select bank0
  8755  0499  00A9               	movwf	??_Tc_Display
  8756  049A  0829               	movf	??_Tc_Display,w
  8757  049B  07AA               	addwf	Tc_Display@count,f
  8758                           
  8759                           ;ht1621.c: 118: data /=10;
  8760  049C  300A               	movlw	10
  8761  049D  00A1               	movwf	___lwdiv@divisor
  8762  049E  3000               	movlw	0
  8763  049F  00A2               	movwf	___lwdiv@divisor+1
  8764  04A0  082C               	movf	Tc_Display@data+1,w
  8765  04A1  00A4               	movwf	___lwdiv@dividend+1
  8766  04A2  082B               	movf	Tc_Display@data,w
  8767  04A3  00A3               	movwf	___lwdiv@dividend
  8768  04A4  318C  2442  3184   	fcall	___lwdiv
  8769  04A7  0020               	movlb	0	; select bank0
  8770  04A8  0822               	movf	?___lwdiv+1,w
  8771  04A9  00AC               	movwf	Tc_Display@data+1
  8772  04AA  0821               	movf	?___lwdiv,w
  8773  04AB  00AB               	movwf	Tc_Display@data
  8774  04AC  2C92               	goto	l4993
  8775  04AD                     l4995:	
  8776                           ;ht1621.c: 121: {
  8777                           ;ht1621.c: 122: case 3:display_buff[0] = Dis_TAB[temperature_int/100];
  8778                           
  8779                           ;ht1621.c: 119: }
  8780                           ;ht1621.c: 120: switch(count)
  8781                           
  8782  04AD  3064               	movlw	100
  8783  04AE  00A1               	movwf	___lwdiv@divisor
  8784  04AF  3000               	movlw	0
  8785  04B0  00A2               	movwf	___lwdiv@divisor+1
  8786  04B1  0021               	movlb	1	; select bank1
  8787  04B2  0833               	movf	(_temperature_int+1)^(0+128),w
  8788  04B3  0020               	movlb	0	; select bank0
  8789  04B4  00A4               	movwf	___lwdiv@dividend+1
  8790  04B5  0021               	movlb	1	; select bank1
  8791  04B6  0832               	movf	_temperature_int^(0+128),w
  8792  04B7  0020               	movlb	0	; select bank0
  8793  04B8  00A3               	movwf	___lwdiv@dividend
  8794  04B9  318C  2442  3184   	fcall	___lwdiv
  8795  04BC  0020               	movlb	0	; select bank0
  8796  04BD  0822               	movf	?___lwdiv+1,w
  8797  04BE  0085               	movwf	5
  8798  04BF  0821               	movf	?___lwdiv,w
  8799  04C0  0084               	movwf	4
  8800  04C1  3000               	movlw	low (_Dis_TAB| (0+32768))
  8801  04C2  0784               	addwf	4,f
  8802  04C3  3090               	movlw	high (_Dis_TAB| (0+32768))
  8803  04C4  3D85               	addwfc	5,f
  8804  04C5  0800               	movf	0,w	;code access
  8805  04C6  00A9               	movwf	??_Tc_Display
  8806  04C7  0829               	movf	??_Tc_Display,w
  8807  04C8  0021               	movlb	1	; select bank1
  8808  04C9  00E1               	movwf	_display_buff^(0+128)
  8809  04CA                     l687:	
  8810                           ;ht1621.c: 123: case 2:display_buff[1] = Dis_TAB[temperature_int%100/10];
  8811                           
  8812  04CA  300A               	movlw	10
  8813  04CB  0020               	movlb	0	; select bank0
  8814  04CC  00A1               	movwf	___lwdiv@divisor
  8815  04CD  3000               	movlw	0
  8816  04CE  00A2               	movwf	___lwdiv@divisor+1
  8817  04CF  0021               	movlb	1	; select bank1
  8818  04D0  0833               	movf	(_temperature_int+1)^(0+128),w
  8819  04D1  00F6               	movwf	___lwmod@dividend+1
  8820  04D2  0832               	movf	_temperature_int^(0+128),w
  8821  04D3  00F5               	movwf	___lwmod@dividend
  8822  04D4  3064               	movlw	100
  8823  04D5  00F3               	movwf	___lwmod@divisor
  8824  04D6  3000               	movlw	0
  8825  04D7  00F4               	movwf	___lwmod@divisor+1
  8826  04D8  318B  2352  3184   	fcall	___lwmod
  8827  04DB  0874               	movf	?___lwmod+1,w
  8828  04DC  0020               	movlb	0	; select bank0
  8829  04DD  00A4               	movwf	___lwdiv@dividend+1
  8830  04DE  0873               	movf	?___lwmod,w
  8831  04DF  00A3               	movwf	___lwdiv@dividend
  8832  04E0  318C  2442  3184   	fcall	___lwdiv
  8833  04E3  0020               	movlb	0	; select bank0
  8834  04E4  0822               	movf	?___lwdiv+1,w
  8835  04E5  0085               	movwf	5
  8836  04E6  0821               	movf	?___lwdiv,w
  8837  04E7  0084               	movwf	4
  8838  04E8  3000               	movlw	low (_Dis_TAB| (0+32768))
  8839  04E9  0784               	addwf	4,f
  8840  04EA  3090               	movlw	high (_Dis_TAB| (0+32768))
  8841  04EB  3D85               	addwfc	5,f
  8842  04EC  0800               	movf	0,w	;code access
  8843  04ED  00A9               	movwf	??_Tc_Display
  8844  04EE  0829               	movf	??_Tc_Display,w
  8845  04EF  0021               	movlb	1	; select bank1
  8846  04F0  00E2               	movwf	(_display_buff^(0+128)+1)
  8847  04F1                     l688:	
  8848                           ;ht1621.c: 124: case 1:display_buff[2] = Dis_TAB[temperature_int%10]; break;
  8849                           
  8850  04F1  300A               	movlw	10
  8851  04F2  00F3               	movwf	___lwmod@divisor
  8852  04F3  3000               	movlw	0
  8853  04F4  00F4               	movwf	___lwmod@divisor+1
  8854  04F5  0021               	movlb	1	; select bank1
  8855  04F6  0833               	movf	(_temperature_int+1)^(0+128),w
  8856  04F7  00F6               	movwf	___lwmod@dividend+1
  8857  04F8  0832               	movf	_temperature_int^(0+128),w
  8858  04F9  00F5               	movwf	___lwmod@dividend
  8859  04FA  318B  2352  3184   	fcall	___lwmod
  8860  04FD  0874               	movf	?___lwmod+1,w
  8861  04FE  0085               	movwf	5
  8862  04FF  0873               	movf	?___lwmod,w
  8863  0500  0084               	movwf	4
  8864  0501  3000               	movlw	low (_Dis_TAB| (0+32768))
  8865  0502  0784               	addwf	4,f
  8866  0503  3090               	movlw	high (_Dis_TAB| (0+32768))
  8867  0504  3D85               	addwfc	5,f
  8868  0505  2D0A               	goto	L11
  8869  0506                     l4997:	
  8870                           ;ht1621.c: 125: case 0:display_buff[2] = Dis_TAB[0];
  8871                           
  8872  0506  3000               	movlw	low (_Dis_TAB| (0+32768))
  8873  0507  0084               	movwf	4
  8874  0508  3090               	movlw	high (_Dis_TAB| (0+32768))
  8875  0509  0085               	movwf	5
  8876  050A                     L11:	
  8877  050A  0800               	movf	0,w	;code access
  8878  050B  0020               	movlb	0	; select bank0
  8879  050C  00A9               	movwf	??_Tc_Display
  8880  050D  0829               	movf	??_Tc_Display,w
  8881  050E  0021               	movlb	1	; select bank1
  8882  050F  00E3               	movwf	(_display_buff^(0+128)+2)
  8883                           
  8884                           ;ht1621.c: 127: }
  8885                           
  8886                           ;ht1621.c: 126: default:break;
  8887  0510  2D20               	goto	l5003
  8888  0511                     l5001:	
  8889  0511  0020               	movlb	0	; select bank0
  8890  0512  082A               	movf	Tc_Display@count,w
  8891                           
  8892                           ; Switch size 1, requested type "space"
  8893                           ; Number of cases is 4, Range of values is 0 to 3
  8894                           ; switch strategies available:
  8895                           ; Name         Instructions Cycles
  8896                           ; simple_byte           13     7 (average)
  8897                           ; direct_byte           14     6 (fixed)
  8898                           ; jumptable            260     6 (fixed)
  8899                           ;	Chosen strategy is simple_byte
  8900  0513  3A00               	xorlw	0	; case 0
  8901  0514  1903               	skipnz
  8902  0515  2D06               	goto	l4997
  8903  0516  3A01               	xorlw	1	; case 1
  8904  0517  1903               	skipnz
  8905  0518  2CF1               	goto	l688
  8906  0519  3A03               	xorlw	3	; case 2
  8907  051A  1903               	skipnz
  8908  051B  2CCA               	goto	l687
  8909  051C  3A01               	xorlw	1	; case 3
  8910  051D  1903               	skipnz
  8911  051E  2CAD               	goto	l4995
  8912  051F  2D20               	goto	l5003
  8913  0520                     l5003:	
  8914                           
  8915                           ;ht1621.c: 128: if(temperature_sign == 1) display_buff[0]=0x20;
  8916  0520  0021               	movlb	1	; select bank1
  8917  0521  033A               	decf	_temperature_sign^(0+128),w
  8918  0522  1D03               	btfss	3,2
  8919  0523  2D2A               	goto	l5007
  8920  0524  3020               	movlw	32
  8921  0525  0020               	movlb	0	; select bank0
  8922  0526  00A9               	movwf	??_Tc_Display
  8923  0527  0829               	movf	??_Tc_Display,w
  8924  0528  0021               	movlb	1	; select bank1
  8925  0529  00E1               	movwf	_display_buff^(0+128)
  8926  052A                     l5007:	
  8927                           
  8928                           ;ht1621.c: 129: display_buff[3] = Dis_TAB[temperature_decimal] | 0x08;
  8929  052A  0020               	movlb	0	; select bank0
  8930  052B  086C               	movf	_temperature_decimal,w
  8931  052C  3E00               	addlw	low (_Dis_TAB| (0+32768))
  8932  052D  0084               	movwf	4
  8933  052E  3090               	movlw	high (_Dis_TAB| (0+32768))
  8934  052F  1803               	skipnc
  8935  0530  3E01               	addlw	1
  8936  0531  0085               	movwf	5
  8937  0532  0800               	movf	0,w	;code access
  8938  0533  3808               	iorlw	8
  8939  0534  00A9               	movwf	??_Tc_Display
  8940  0535  0829               	movf	??_Tc_Display,w
  8941  0536  0021               	movlb	1	; select bank1
  8942  0537  00E4               	movwf	(_display_buff^(0+128)+3)
  8943                           
  8944                           ;ht1621.c: 130: WriteAll_1621(0,display_buff,4);
  8945  0538  30E1               	movlw	low _display_buff
  8946  0539  0020               	movlb	0	; select bank0
  8947  053A  00A0               	movwf	WriteAll_1621@p
  8948  053B  3000               	movlw	high _display_buff
  8949  053C  00A1               	movwf	WriteAll_1621@p+1
  8950  053D  3004               	movlw	4
  8951  053E  00A9               	movwf	??_Tc_Display
  8952  053F  0829               	movf	??_Tc_Display,w
  8953  0540  00A2               	movwf	WriteAll_1621@cnt
  8954  0541  3000               	movlw	0
  8955  0542  318C  240E         	fcall	_WriteAll_1621
  8956  0544  0008               	return
  8957  0545                     __end_of_Tc_Display:	
  8958                           
  8959                           	psect	text38
  8960  09E6                     __ptext38:	
  8961 ;; *************** function _memset *****************
  8962 ;; Defined at:
  8963 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;  p1              1    wreg     PTR void 
  8966 ;;		 -> display_buff(4), 
  8967 ;;  c               2    3[COMMON] int 
  8968 ;;  n               2    5[COMMON] unsigned int 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  p1              1    0[BANK0 ] PTR void 
  8971 ;;		 -> display_buff(4), 
  8972 ;;  p               1    1[BANK0 ] PTR unsigned char 
  8973 ;;		 -> display_buff(4), 
  8974 ;; Return value:  Size  Location     Type
  8975 ;;                  1    wreg      PTR void 
  8976 ;; Registers used:
  8977 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8983 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;Total ram usage:        7 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:    3
  8990 ;; This function calls:
  8991 ;;		Nothing
  8992 ;; This function is called by:
  8993 ;;		_Tc_Display
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           
  8998                           ;psect for function _memset
  8999  09E6                     _memset:	
  9000                           
  9001                           ;incstack = 0
  9002                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9003                           ;memset@p1 stored from wreg
  9004  09E6  0020               	movlb	0	; select bank0
  9005  09E7  00A0               	movwf	memset@p1
  9006  09E8  0820               	movf	memset@p1,w
  9007  09E9  00F7               	movwf	??_memset
  9008  09EA  0877               	movf	??_memset,w
  9009  09EB  00A1               	movwf	memset@p
  9010  09EC                     l4771:	
  9011  09EC  3001               	movlw	1
  9012  09ED  02F5               	subwf	memset@n,f
  9013  09EE  3000               	movlw	0
  9014  09EF  3BF6               	subwfb	memset@n+1,f
  9015  09F0  0A75               	incf	memset@n,w
  9016  09F1  1903               	btfsc	3,2
  9017  09F2  0A76               	incf	memset@n+1,w
  9018  09F3  1903               	btfsc	3,2
  9019  09F4  0008               	return
  9020  09F5  0873               	movf	memset@c,w
  9021  09F6  00F7               	movwf	??_memset
  9022  09F7  0821               	movf	memset@p,w
  9023  09F8  0086               	movwf	6
  9024  09F9  0187               	clrf	7
  9025  09FA  0877               	movf	??_memset,w
  9026  09FB  0081               	movwf	1
  9027  09FC  3001               	movlw	1
  9028  09FD  00F7               	movwf	??_memset
  9029  09FE  0877               	movf	??_memset,w
  9030  09FF  07A1               	addwf	memset@p,f
  9031  0A00  29EC               	goto	l4771
  9032  0A01                     __end_of_memset:	
  9033                           ;	Return value of _memset is never used
  9034                           
  9035                           
  9036                           	psect	text39
  9037  0B52                     __ptext39:	
  9038 ;; *************** function ___lwmod *****************
  9039 ;; Defined at:
  9040 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  divisor         2    3[COMMON] unsigned int 
  9043 ;;  dividend        2    5[COMMON] unsigned int 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  counter         1    0[BANK0 ] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  2    3[COMMON] unsigned int 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9055 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;Total ram usage:        6 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    3
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_Tc_Display
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function ___lwmod
  9071  0B52                     ___lwmod:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9075  0B52  0873               	movf	___lwmod@divisor,w
  9076  0B53  0474               	iorwf	___lwmod@divisor+1,w
  9077  0B54  1903               	btfsc	3,2
  9078  0B55  2B7A               	goto	l4817
  9079  0B56  0020               	movlb	0	; select bank0
  9080  0B57  01A0               	clrf	___lwmod@counter
  9081  0B58  0AA0               	incf	___lwmod@counter,f
  9082  0B59                     l4807:	
  9083  0B59  1BF4               	btfsc	___lwmod@divisor+1,7
  9084  0B5A  2B65               	goto	l4809
  9085  0B5B  3001               	movlw	1
  9086  0B5C                     u4115:	
  9087  0B5C  35F3               	lslf	___lwmod@divisor,f
  9088  0B5D  0DF4               	rlf	___lwmod@divisor+1,f
  9089  0B5E  0B89               	decfsz	9,f
  9090  0B5F  2B5C               	goto	u4115
  9091  0B60  3001               	movlw	1
  9092  0B61  00F7               	movwf	??___lwmod
  9093  0B62  0877               	movf	??___lwmod,w
  9094  0B63  07A0               	addwf	___lwmod@counter,f
  9095  0B64  2B59               	goto	l4807
  9096  0B65                     l4809:	
  9097  0B65  0874               	movf	___lwmod@divisor+1,w
  9098  0B66  0276               	subwf	___lwmod@dividend+1,w
  9099  0B67  1D03               	skipz
  9100  0B68  2B6B               	goto	u4135
  9101  0B69  0873               	movf	___lwmod@divisor,w
  9102  0B6A  0275               	subwf	___lwmod@dividend,w
  9103  0B6B                     u4135:	
  9104  0B6B  1C03               	skipc
  9105  0B6C  2B71               	goto	l4813
  9106  0B6D  0873               	movf	___lwmod@divisor,w
  9107  0B6E  02F5               	subwf	___lwmod@dividend,f
  9108  0B6F  0874               	movf	___lwmod@divisor+1,w
  9109  0B70  3BF6               	subwfb	___lwmod@dividend+1,f
  9110  0B71                     l4813:	
  9111  0B71  3001               	movlw	1
  9112  0B72                     u4145:	
  9113  0B72  36F4               	lsrf	___lwmod@divisor+1,f
  9114  0B73  0CF3               	rrf	___lwmod@divisor,f
  9115  0B74  0B89               	decfsz	9,f
  9116  0B75  2B72               	goto	u4145
  9117  0B76  3001               	movlw	1
  9118  0B77  02A0               	subwf	___lwmod@counter,f
  9119  0B78  1D03               	btfss	3,2
  9120  0B79  2B65               	goto	l4809
  9121  0B7A                     l4817:	
  9122  0B7A  0876               	movf	___lwmod@dividend+1,w
  9123  0B7B  00F4               	movwf	?___lwmod+1
  9124  0B7C  0875               	movf	___lwmod@dividend,w
  9125  0B7D  00F3               	movwf	?___lwmod
  9126  0B7E  0008               	return
  9127  0B7F                     __end_of___lwmod:	
  9128                           
  9129                           	psect	text40
  9130  0C42                     __ptext40:	
  9131 ;; *************** function ___lwdiv *****************
  9132 ;; Defined at:
  9133 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;  divisor         2    1[BANK0 ] unsigned int 
  9136 ;;  dividend        2    3[BANK0 ] unsigned int 
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;  quotient        2    7[BANK0 ] unsigned int 
  9139 ;;  counter         1    6[BANK0 ] unsigned char 
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  2    1[BANK0 ] unsigned int 
  9142 ;; Registers used:
  9143 ;;		wreg, status,2, status,0
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9149 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;Total ram usage:        8 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    3
  9156 ;; This function calls:
  9157 ;;		Nothing
  9158 ;; This function is called by:
  9159 ;;		_Tc_Display
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           
  9164                           ;psect for function ___lwdiv
  9165  0C42                     ___lwdiv:	
  9166                           
  9167                           ;incstack = 0
  9168                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9169  0C42  0020               	movlb	0	; select bank0
  9170  0C43  01A7               	clrf	___lwdiv@quotient
  9171  0C44  01A8               	clrf	___lwdiv@quotient+1
  9172  0C45  0821               	movf	___lwdiv@divisor,w
  9173  0C46  0422               	iorwf	___lwdiv@divisor+1,w
  9174  0C47  1903               	btfsc	3,2
  9175  0C48  2C72               	goto	l4795
  9176  0C49  01A6               	clrf	___lwdiv@counter
  9177  0C4A  0AA6               	incf	___lwdiv@counter,f
  9178  0C4B                     l4783:	
  9179  0C4B  1BA2               	btfsc	___lwdiv@divisor+1,7
  9180  0C4C  2C57               	goto	l4785
  9181  0C4D  3001               	movlw	1
  9182  0C4E                     u4045:	
  9183  0C4E  35A1               	lslf	___lwdiv@divisor,f
  9184  0C4F  0DA2               	rlf	___lwdiv@divisor+1,f
  9185  0C50  0B89               	decfsz	9,f
  9186  0C51  2C4E               	goto	u4045
  9187  0C52  3001               	movlw	1
  9188  0C53  00A5               	movwf	??___lwdiv
  9189  0C54  0825               	movf	??___lwdiv,w
  9190  0C55  07A6               	addwf	___lwdiv@counter,f
  9191  0C56  2C4B               	goto	l4783
  9192  0C57                     l4785:	
  9193  0C57  3001               	movlw	1
  9194  0C58                     u4065:	
  9195  0C58  35A7               	lslf	___lwdiv@quotient,f
  9196  0C59  0DA8               	rlf	___lwdiv@quotient+1,f
  9197  0C5A  0B89               	decfsz	9,f
  9198  0C5B  2C58               	goto	u4065
  9199  0C5C  0822               	movf	___lwdiv@divisor+1,w
  9200  0C5D  0224               	subwf	___lwdiv@dividend+1,w
  9201  0C5E  1D03               	skipz
  9202  0C5F  2C62               	goto	u4075
  9203  0C60  0821               	movf	___lwdiv@divisor,w
  9204  0C61  0223               	subwf	___lwdiv@dividend,w
  9205  0C62                     u4075:	
  9206  0C62  1C03               	skipc
  9207  0C63  2C69               	goto	l4791
  9208  0C64  0821               	movf	___lwdiv@divisor,w
  9209  0C65  02A3               	subwf	___lwdiv@dividend,f
  9210  0C66  0822               	movf	___lwdiv@divisor+1,w
  9211  0C67  3BA4               	subwfb	___lwdiv@dividend+1,f
  9212  0C68  1427               	bsf	___lwdiv@quotient,0
  9213  0C69                     l4791:	
  9214  0C69  3001               	movlw	1
  9215  0C6A                     u4085:	
  9216  0C6A  36A2               	lsrf	___lwdiv@divisor+1,f
  9217  0C6B  0CA1               	rrf	___lwdiv@divisor,f
  9218  0C6C  0B89               	decfsz	9,f
  9219  0C6D  2C6A               	goto	u4085
  9220  0C6E  3001               	movlw	1
  9221  0C6F  02A6               	subwf	___lwdiv@counter,f
  9222  0C70  1D03               	btfss	3,2
  9223  0C71  2C57               	goto	l4785
  9224  0C72                     l4795:	
  9225  0C72  0828               	movf	___lwdiv@quotient+1,w
  9226  0C73  00A2               	movwf	?___lwdiv+1
  9227  0C74  0827               	movf	___lwdiv@quotient,w
  9228  0C75  00A1               	movwf	?___lwdiv
  9229  0C76  0008               	return
  9230  0C77                     __end_of___lwdiv:	
  9231                           
  9232                           	psect	text41
  9233  0DAC                     __ptext41:	
  9234 ;; *************** function _one_temperature_trans *****************
  9235 ;; Defined at:
  9236 ;;		line 292 in file "mcc_generated_files/max31856.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;		None
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;		None
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      void 
  9243 ;; Registers used:
  9244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;Total ram usage:        2 bytes
  9255 ;; Hardware stack levels used:    1
  9256 ;; Hardware stack levels required when called:    6
  9257 ;; This function calls:
  9258 ;;		_maxim_31856_read_nregisters
  9259 ;;		_maxim_start_conversion
  9260 ;; This function is called by:
  9261 ;;		_temperature_process
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           
  9266                           ;psect for function _one_temperature_trans
  9267  0DAC                     _one_temperature_trans:	
  9268                           
  9269                           ;max31856.c: 294: maxim_start_conversion((uint8_t) 0x40);
  9270                           
  9271                           ;incstack = 0
  9272                           ; Regs used in _one_temperature_trans: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9273  0DAC  3040               	movlw	64
  9274  0DAD  3189  2196  318D   	fcall	_maxim_start_conversion
  9275                           
  9276                           ;max31856.c: 296: MAX31856Sec = 0;
  9277  0DB0  0021               	movlb	1	; select bank1
  9278  0DB1  01B9               	clrf	_MAX31856Sec^(0+128)
  9279                           
  9280                           ;max31856.c: 297: while( !(RB3 == 0 || MAX31856Sec > 30) ) asm("clrwdt");
  9281  0DB2  2DB4               	goto	l544
  9282  0DB3                     l545:	
  9283  0DB3  0064               	clrwdt	;# 
  9284  0DB4                     l544:	
  9285  0DB4  0020               	movlb	0	; select bank0
  9286  0DB5  1D8D               	btfss	13,3	;volatile
  9287  0DB6  2DBC               	goto	l5107
  9288  0DB7  301F               	movlw	31
  9289  0DB8  0021               	movlb	1	; select bank1
  9290  0DB9  0239               	subwf	_MAX31856Sec^(0+128),w
  9291  0DBA  1C03               	skipc
  9292  0DBB  2DB3               	goto	l545
  9293  0DBC                     l5107:	
  9294                           
  9295                           ;max31856.c: 298: if( MAX31856Sec > 30)
  9296  0DBC  301F               	movlw	31
  9297  0DBD  0021               	movlb	1	; select bank1
  9298  0DBE  0239               	subwf	_MAX31856Sec^(0+128),w
  9299  0DBF  1C03               	skipc
  9300  0DC0  2DC4               	goto	l5111
  9301                           
  9302                           ;max31856.c: 299: {
  9303                           ;max31856.c: 300: uch_sr = 0x01;
  9304  0DC1  01C3               	clrf	_uch_sr^(0+128)
  9305  0DC2  0AC3               	incf	_uch_sr^(0+128),f
  9306                           
  9307                           ;max31856.c: 301: }
  9308  0DC3  0008               	return
  9309  0DC4                     l5111:	
  9310                           
  9311                           ;max31856.c: 328: else
  9312                           ;max31856.c: 329: {
  9313                           ;max31856.c: 330: maxim_31856_read_nregisters(0x0A, uch_reg,6);
  9314  0DC4  30C4               	movlw	(low (_uch_reg| 0))& (0+255)
  9315  0DC5  0020               	movlb	0	; select bank0
  9316  0DC6  00A8               	movwf	??_one_temperature_trans
  9317  0DC7  0828               	movf	??_one_temperature_trans,w
  9318  0DC8  00A3               	movwf	maxim_31856_read_nregisters@uch_buff
  9319  0DC9  3006               	movlw	6
  9320  0DCA  00A9               	movwf	??_one_temperature_trans+1
  9321  0DCB  0829               	movf	??_one_temperature_trans+1,w
  9322  0DCC  00A4               	movwf	maxim_31856_read_nregisters@uch_nBytes
  9323  0DCD  300A               	movlw	10
  9324  0DCE  3189  2133         	fcall	_maxim_31856_read_nregisters
  9325                           
  9326                           ;max31856.c: 331: uch_cjth=uch_reg[0];uch_cjtl=uch_reg[1];
  9327  0DD0  0021               	movlb	1	; select bank1
  9328  0DD1  0844               	movf	_uch_reg^(0+128),w
  9329  0DD2  0020               	movlb	0	; select bank0
  9330  0DD3  00A8               	movwf	??_one_temperature_trans
  9331  0DD4  0828               	movf	??_one_temperature_trans,w
  9332  0DD5  0021               	movlb	1	; select bank1
  9333  0DD6  00BC               	movwf	_uch_cjth^(0+128)
  9334  0DD7  0845               	movf	(_uch_reg^(0+128)+1),w
  9335  0DD8  0020               	movlb	0	; select bank0
  9336  0DD9  00A8               	movwf	??_one_temperature_trans
  9337  0DDA  0828               	movf	??_one_temperature_trans,w
  9338  0DDB  0021               	movlb	1	; select bank1
  9339  0DDC  00BD               	movwf	_uch_cjtl^(0+128)
  9340                           
  9341                           ;max31856.c: 332: uch_ltcbh=uch_reg[2];uch_ltcbm=uch_reg[3];uch_ltcbl=uch_reg[4];
  9342  0DDD  0846               	movf	(_uch_reg^(0+128)+2),w
  9343  0DDE  0020               	movlb	0	; select bank0
  9344  0DDF  00A8               	movwf	??_one_temperature_trans
  9345  0DE0  0828               	movf	??_one_temperature_trans,w
  9346  0DE1  0021               	movlb	1	; select bank1
  9347  0DE2  00BF               	movwf	_uch_ltcbh^(0+128)
  9348  0DE3  0847               	movf	(_uch_reg^(0+128)+3),w
  9349  0DE4  0020               	movlb	0	; select bank0
  9350  0DE5  00A8               	movwf	??_one_temperature_trans
  9351  0DE6  0828               	movf	??_one_temperature_trans,w
  9352  0DE7  0021               	movlb	1	; select bank1
  9353  0DE8  00C1               	movwf	_uch_ltcbm^(0+128)
  9354  0DE9  0848               	movf	(_uch_reg^(0+128)+4),w
  9355  0DEA  0020               	movlb	0	; select bank0
  9356  0DEB  00A8               	movwf	??_one_temperature_trans
  9357  0DEC  0828               	movf	??_one_temperature_trans,w
  9358  0DED  0021               	movlb	1	; select bank1
  9359  0DEE  00C0               	movwf	_uch_ltcbl^(0+128)
  9360                           
  9361                           ;max31856.c: 333: uch_sr=uch_reg[5];
  9362  0DEF  0849               	movf	(_uch_reg^(0+128)+5),w
  9363  0DF0  0020               	movlb	0	; select bank0
  9364  0DF1  00A8               	movwf	??_one_temperature_trans
  9365  0DF2  0828               	movf	??_one_temperature_trans,w
  9366  0DF3  0021               	movlb	1	; select bank1
  9367  0DF4  00C3               	movwf	_uch_sr^(0+128)
  9368  0DF5  0008               	return
  9369  0DF6                     __end_of_one_temperature_trans:	
  9370                           
  9371                           	psect	text42
  9372  0996                     __ptext42:	
  9373 ;; *************** function _maxim_start_conversion *****************
  9374 ;; Defined at:
  9375 ;;		line 114 in file "mcc_generated_files/max31856.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;  uch_conversi    1    wreg     unsigned char 
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;  uch_conversi    1    0[BANK0 ] unsigned char 
  9380 ;; Return value:  Size  Location     Type
  9381 ;;                  1    wreg      void 
  9382 ;; Registers used:
  9383 ;;		wreg, status,2, status,0, pclath, cstack
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;Total ram usage:        2 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    5
  9396 ;; This function calls:
  9397 ;;		_maxim_31856_read_register
  9398 ;;		_maxim_31856_write_register
  9399 ;; This function is called by:
  9400 ;;		_one_temperature_trans
  9401 ;; This function uses a non-reentrant model
  9402 ;;
  9403                           
  9404                           
  9405                           ;psect for function _maxim_start_conversion
  9406  0996                     _maxim_start_conversion:	
  9407                           
  9408                           ;incstack = 0
  9409                           ; Regs used in _maxim_start_conversion: [wreg+status,2+status,0+pclath+cstack]
  9410                           ;maxim_start_conversion@uch_conversion_mode stored from wreg
  9411  0996  0020               	movlb	0	; select bank0
  9412  0997  00A0               	movwf	maxim_start_conversion@uch_conversion_mode
  9413                           
  9414                           ;max31856.c: 116: uch_cr0=maxim_31856_read_register(0x00);
  9415  0998  3000               	movlw	0
  9416  0999  3188  20B8  3189   	fcall	_maxim_31856_read_register
  9417  099C  00F7               	movwf	??_maxim_start_conversion
  9418  099D  0877               	movf	??_maxim_start_conversion,w
  9419  099E  00FA               	movwf	_uch_cr0
  9420                           
  9421                           ;max31856.c: 117: uch_cr0&=(uint8_t) 0x3F;
  9422  099F  303F               	movlw	63
  9423  09A0  00F7               	movwf	??_maxim_start_conversion
  9424  09A1  0877               	movf	??_maxim_start_conversion,w
  9425  09A2  05FA               	andwf	_uch_cr0,f
  9426                           
  9427                           ;max31856.c: 118: uch_cr0|=uch_conversion_mode;
  9428  09A3  0020               	movlb	0	; select bank0
  9429  09A4  0820               	movf	maxim_start_conversion@uch_conversion_mode,w
  9430  09A5  00F7               	movwf	??_maxim_start_conversion
  9431  09A6  0877               	movf	??_maxim_start_conversion,w
  9432  09A7  04FA               	iorwf	_uch_cr0,f
  9433                           
  9434                           ;max31856.c: 119: maxim_31856_write_register(0x80, uch_cr0);
  9435  09A8  087A               	movf	_uch_cr0,w
  9436  09A9  00F7               	movwf	??_maxim_start_conversion
  9437  09AA  0877               	movf	??_maxim_start_conversion,w
  9438  09AB  00F4               	movwf	maxim_31856_write_register@uch_register_value
  9439  09AC  3080               	movlw	128
  9440  09AD  3188  208B         	fcall	_maxim_31856_write_register
  9441  09AF  0008               	return
  9442  09B0                     __end_of_maxim_start_conversion:	
  9443                           
  9444                           	psect	text43
  9445  088B                     __ptext43:	
  9446 ;; *************** function _maxim_31856_write_register *****************
  9447 ;; Defined at:
  9448 ;;		line 20 in file "mcc_generated_files/max31856.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  uch_register    1    wreg     unsigned char 
  9451 ;;  uch_register    1    4[COMMON] unsigned char 
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;  uch_register    1    5[COMMON] unsigned char 
  9454 ;; Return value:  Size  Location     Type
  9455 ;;                  1    wreg      void 
  9456 ;; Registers used:
  9457 ;;		wreg, status,2, status,0, pclath, cstack
  9458 ;; Tracked objects:
  9459 ;;		On entry : 0/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9463 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;Total ram usage:        2 bytes
  9468 ;; Hardware stack levels used:    1
  9469 ;; Hardware stack levels required when called:    4
  9470 ;; This function calls:
  9471 ;;		_SPI_Exchange8bit
  9472 ;; This function is called by:
  9473 ;;		_maxim_start_conversion
  9474 ;;		_maxim_clear_fault_status
  9475 ;;		_temperature_display
  9476 ;;		_maxim_31856_init
  9477 ;;		_maxim_stop_conversion
  9478 ;;		_maxim_disable_oc_fault_detection
  9479 ;;		_maxim_set_oc_fault_detection
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _maxim_31856_write_register
  9485  088B                     _maxim_31856_write_register:	
  9486                           
  9487                           ;incstack = 0
  9488                           ; Regs used in _maxim_31856_write_register: [wreg+status,2+status,0+pclath+cstack]
  9489                           ;maxim_31856_write_register@uch_register_address stored from wreg
  9490  088B  00F5               	movwf	maxim_31856_write_register@uch_register_address
  9491                           
  9492                           ;max31856.c: 22: do { LATA5 = 0; } while(0);
  9493  088C  0022               	movlb	2	; select bank2
  9494  088D  128C               	bcf	12,5	;volatile
  9495                           
  9496                           ;max31856.c: 23: SPI_Exchange8bit(uch_register_address);
  9497  088E  0875               	movf	maxim_31856_write_register@uch_register_address,w
  9498  088F  3188  206D  3188   	fcall	_SPI_Exchange8bit
  9499                           
  9500                           ;max31856.c: 24: SPI_Exchange8bit(uch_register_value);
  9501  0892  0874               	movf	maxim_31856_write_register@uch_register_value,w
  9502  0893  3188  206D         	fcall	_SPI_Exchange8bit
  9503                           
  9504                           ;max31856.c: 25: do { LATA5 = 1; } while(0);
  9505  0895  0022               	movlb	2	; select bank2
  9506  0896  168C               	bsf	12,5	;volatile
  9507  0897  0008               	return
  9508  0898                     __end_of_maxim_31856_write_register:	
  9509                           
  9510                           	psect	text44
  9511  08B8                     __ptext44:	
  9512 ;; *************** function _maxim_31856_read_register *****************
  9513 ;; Defined at:
  9514 ;;		line 34 in file "mcc_generated_files/max31856.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  uch_register    1    wreg     unsigned char 
  9517 ;; Auto vars:     Size  Location     Type
  9518 ;;  uch_register    1    5[COMMON] unsigned char 
  9519 ;;  uch_register    1    6[COMMON] unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      unsigned char 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2, status,0, pclath, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;Total ram usage:        3 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    4
  9536 ;; This function calls:
  9537 ;;		_SPI_Exchange8bit
  9538 ;; This function is called by:
  9539 ;;		_maxim_start_conversion
  9540 ;;		_maxim_clear_fault_status
  9541 ;;		_maxim_stop_conversion
  9542 ;;		_maxim_disable_oc_fault_detection
  9543 ;;		_maxim_set_oc_fault_detection
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           
  9548                           ;psect for function _maxim_31856_read_register
  9549  08B8                     _maxim_31856_read_register:	
  9550                           
  9551                           ;incstack = 0
  9552                           ; Regs used in _maxim_31856_read_register: [wreg+status,2+status,0+pclath+cstack]
  9553                           ;maxim_31856_read_register@uch_register_address stored from wreg
  9554  08B8  00F5               	movwf	maxim_31856_read_register@uch_register_address
  9555                           
  9556                           ;max31856.c: 36: uint8_t uch_register_data;
  9557                           ;max31856.c: 37: do { LATA5 = 0; } while(0);
  9558  08B9  0022               	movlb	2	; select bank2
  9559  08BA  128C               	bcf	12,5	;volatile
  9560                           
  9561                           ;max31856.c: 38: SPI_Exchange8bit(uch_register_address);
  9562  08BB  0875               	movf	maxim_31856_read_register@uch_register_address,w
  9563  08BC  3188  206D  3188   	fcall	_SPI_Exchange8bit
  9564                           
  9565                           ;max31856.c: 39: uch_register_data=SPI_Exchange8bit(0xff);
  9566  08BF  30FF               	movlw	255
  9567  08C0  3188  206D         	fcall	_SPI_Exchange8bit
  9568  08C2  00F4               	movwf	??_maxim_31856_read_register
  9569  08C3  0874               	movf	??_maxim_31856_read_register,w
  9570  08C4  00F6               	movwf	maxim_31856_read_register@uch_register_data
  9571                           
  9572                           ;max31856.c: 40: do { LATA5 = 1; } while(0);
  9573  08C5  0022               	movlb	2	; select bank2
  9574  08C6  168C               	bsf	12,5	;volatile
  9575                           
  9576                           ;max31856.c: 41: return (uch_register_data);
  9577  08C7  0876               	movf	maxim_31856_read_register@uch_register_data,w
  9578  08C8  0008               	return
  9579  08C9                     __end_of_maxim_31856_read_register:	
  9580                           
  9581                           	psect	text45
  9582  0933                     __ptext45:	
  9583 ;; *************** function _maxim_31856_read_nregisters *****************
  9584 ;; Defined at:
  9585 ;;		line 50 in file "mcc_generated_files/max31856.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  uch_register    1    wreg     unsigned char 
  9588 ;;  uch_buff        1    3[BANK0 ] PTR unsigned char 
  9589 ;;		 -> uch_reg(8), 
  9590 ;;  uch_nBytes      1    4[BANK0 ] unsigned char 
  9591 ;; Auto vars:     Size  Location     Type
  9592 ;;  uch_register    1    7[BANK0 ] unsigned char 
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  1    wreg      void 
  9595 ;; Registers used:
  9596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9597 ;; Tracked objects:
  9598 ;;		On entry : 0/0
  9599 ;;		On exit  : 0/0
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9602 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;Total ram usage:        5 bytes
  9607 ;; Hardware stack levels used:    1
  9608 ;; Hardware stack levels required when called:    5
  9609 ;; This function calls:
  9610 ;;		_SPI_Exchange8bit
  9611 ;;		_SPI_Exchange8bitBuffer
  9612 ;; This function is called by:
  9613 ;;		_one_temperature_trans
  9614 ;; This function uses a non-reentrant model
  9615 ;;
  9616                           
  9617                           
  9618                           ;psect for function _maxim_31856_read_nregisters
  9619  0933                     _maxim_31856_read_nregisters:	
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _maxim_31856_read_nregisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9623                           ;maxim_31856_read_nregisters@uch_register_address stored from wreg
  9624  0933  0020               	movlb	0	; select bank0
  9625  0934  00A7               	movwf	maxim_31856_read_nregisters@uch_register_address
  9626                           
  9627                           ;max31856.c: 52: do { LATA5 = 0; } while(0);
  9628  0935  0022               	movlb	2	; select bank2
  9629  0936  128C               	bcf	12,5	;volatile
  9630                           
  9631                           ;max31856.c: 53: SPI_Exchange8bit(uch_register_address);
  9632  0937  0020               	movlb	0	; select bank0
  9633  0938  0827               	movf	maxim_31856_read_nregisters@uch_register_address,w
  9634  0939  3188  206D  3189   	fcall	_SPI_Exchange8bit
  9635                           
  9636                           ;max31856.c: 54: SPI_Exchange8bitBuffer((0), uch_nBytes, uch_buff);
  9637  093C  0020               	movlb	0	; select bank0
  9638  093D  0824               	movf	maxim_31856_read_nregisters@uch_nBytes,w
  9639  093E  00A5               	movwf	??_maxim_31856_read_nregisters
  9640  093F  0825               	movf	??_maxim_31856_read_nregisters,w
  9641  0940  00F4               	movwf	SPI_Exchange8bitBuffer@bufLen
  9642  0941  0823               	movf	maxim_31856_read_nregisters@uch_buff,w
  9643  0942  00A6               	movwf	??_maxim_31856_read_nregisters+1
  9644  0943  0826               	movf	??_maxim_31856_read_nregisters+1,w
  9645  0944  00F5               	movwf	SPI_Exchange8bitBuffer@dataOut
  9646  0945  3000               	movlw	0
  9647  0946  318E  2642         	fcall	_SPI_Exchange8bitBuffer
  9648                           
  9649                           ;max31856.c: 55: do { LATA5 = 1; } while(0);
  9650  0948  0022               	movlb	2	; select bank2
  9651  0949  168C               	bsf	12,5	;volatile
  9652  094A  0008               	return
  9653  094B                     __end_of_maxim_31856_read_nregisters:	
  9654                           
  9655                           	psect	text46
  9656  0E42                     __ptext46:	
  9657 ;; *************** function _SPI_Exchange8bitBuffer *****************
  9658 ;; Defined at:
  9659 ;;		line 89 in file "mcc_generated_files/spi.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  dataIn          1    wreg     PTR unsigned char 
  9662 ;;		 -> NULL(0), 
  9663 ;;  bufLen          1    4[COMMON] unsigned char 
  9664 ;;  dataOut         1    5[COMMON] PTR unsigned char 
  9665 ;;		 -> uch_reg(8), 
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  9668 ;;		 -> NULL(0), 
  9669 ;;  bytesWritten    1    7[COMMON] unsigned char 
  9670 ;; Return value:  Size  Location     Type
  9671 ;;                  1    wreg      unsigned char 
  9672 ;; Registers used:
  9673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9679 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;Total ram usage:        7 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    4
  9686 ;; This function calls:
  9687 ;;		_SPI_Exchange8bit
  9688 ;; This function is called by:
  9689 ;;		_maxim_31856_read_nregisters
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           
  9694                           ;psect for function _SPI_Exchange8bitBuffer
  9695  0E42                     _SPI_Exchange8bitBuffer:	
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9699                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  9700  0E42  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  9701                           
  9702                           ;spi.c: 90: uint8_t bytesWritten = 0;
  9703  0E43  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  9704                           
  9705                           ;spi.c: 92: if (bufLen != 0) {
  9706  0E44  0874               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9707  0E45  1903               	btfsc	3,2
  9708  0E46  0008               	return
  9709                           
  9710                           ;spi.c: 93: if (dataIn != (0)) {
  9711  0E47  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  9712  0E48  1D03               	btfss	3,2
  9713  0E49  2E74               	goto	l4671
  9714  0E4A  2E79               	goto	l4673
  9715  0E4B                     l4663:	
  9716                           ;spi.c: 94: while (bytesWritten < bufLen) {
  9717                           
  9718                           
  9719                           ;spi.c: 95: if (dataOut == (0)) {
  9720  0E4B  0875               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9721  0E4C  1D03               	btfss	3,2
  9722  0E4D  2E5A               	goto	l4667
  9723                           
  9724                           ;spi.c: 96: SPI_Exchange8bit(dataIn[bytesWritten]);
  9725  0E4E  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9726  0E4F  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9727  0E50  0020               	movlb	0	; select bank0
  9728  0E51  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9729  0E52  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9730  0E53  0086               	movwf	6
  9731  0E54  0187               	clrf	7
  9732  0E55  0801               	movf	1,w
  9733  0E56  3188  206D  318E   	fcall	_SPI_Exchange8bit
  9734                           
  9735                           ;spi.c: 97: } else {
  9736  0E59  2E6F               	goto	l4669
  9737  0E5A                     l4667:	
  9738                           
  9739                           ;spi.c: 98: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  9740  0E5A  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9741  0E5B  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  9742  0E5C  0020               	movlb	0	; select bank0
  9743  0E5D  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9744  0E5E  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9745  0E5F  0086               	movwf	6
  9746  0E60  0187               	clrf	7
  9747  0E61  0801               	movf	1,w
  9748  0E62  3188  206D  318E   	fcall	_SPI_Exchange8bit
  9749  0E65  0020               	movlb	0	; select bank0
  9750  0E66  00A1               	movwf	??_SPI_Exchange8bitBuffer+1
  9751  0E67  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9752  0E68  0775               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9753  0E69  00A2               	movwf	??_SPI_Exchange8bitBuffer+2
  9754  0E6A  0822               	movf	??_SPI_Exchange8bitBuffer+2,w
  9755  0E6B  0086               	movwf	6
  9756  0E6C  0187               	clrf	7
  9757  0E6D  0821               	movf	??_SPI_Exchange8bitBuffer+1,w
  9758  0E6E  0081               	movwf	1
  9759  0E6F                     l4669:	
  9760                           
  9761                           ;spi.c: 99: }
  9762                           ;spi.c: 101: bytesWritten++;
  9763  0E6F  3001               	movlw	1
  9764  0E70  0020               	movlb	0	; select bank0
  9765  0E71  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9766  0E72  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9767  0E73  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9768  0E74                     l4671:	
  9769  0E74  0874               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9770  0E75  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9771  0E76  1803               	btfsc	3,0
  9772  0E77  0008               	return
  9773  0E78  2E4B               	goto	l4663
  9774  0E79                     l4673:	
  9775                           ;spi.c: 102: }
  9776                           ;spi.c: 103: } else {
  9777                           
  9778                           
  9779                           ;spi.c: 104: if (dataOut != (0)) {
  9780  0E79  0875               	movf	SPI_Exchange8bitBuffer@dataOut,w
  9781  0E7A  1903               	btfsc	3,2
  9782  0E7B  0008               	return
  9783  0E7C                     l4681:	
  9784  0E7C  0874               	movf	SPI_Exchange8bitBuffer@bufLen,w
  9785  0E7D  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  9786  0E7E  1803               	btfsc	3,0
  9787  0E7F  0008               	return
  9788                           
  9789                           ;spi.c: 106: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  9790                           
  9791                           ;spi.c: 105: while (bytesWritten < bufLen) {
  9792  0E80  3000               	movlw	0
  9793  0E81  3188  206D  318E   	fcall	_SPI_Exchange8bit
  9794  0E84  0020               	movlb	0	; select bank0
  9795  0E85  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9796  0E86  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  9797  0E87  0775               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  9798  0E88  00A1               	movwf	??_SPI_Exchange8bitBuffer+1
  9799  0E89  0821               	movf	??_SPI_Exchange8bitBuffer+1,w
  9800  0E8A  0086               	movwf	6
  9801  0E8B  0187               	clrf	7
  9802  0E8C  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9803  0E8D  0081               	movwf	1
  9804                           
  9805                           ;spi.c: 108: bytesWritten++;
  9806  0E8E  3001               	movlw	1
  9807  0E8F  00A0               	movwf	??_SPI_Exchange8bitBuffer
  9808  0E90  0820               	movf	??_SPI_Exchange8bitBuffer,w
  9809  0E91  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  9810  0E92  2E7C               	goto	l4681
  9811  0E93                     __end_of_SPI_Exchange8bitBuffer:	
  9812                           ;spi.c: 109: }
  9813                           ;spi.c: 110: }
  9814                           ;spi.c: 111: }
  9815                           ;spi.c: 112: }
  9816                           ;spi.c: 114: return bytesWritten;
  9817                           ;	Return value of _SPI_Exchange8bitBuffer is never used
  9818                           
  9819                           
  9820                           	psect	text47
  9821  086D                     __ptext47:	
  9822 ;; *************** function _SPI_Exchange8bit *****************
  9823 ;; Defined at:
  9824 ;;		line 77 in file "mcc_generated_files/spi.c"
  9825 ;; Parameters:    Size  Location     Type
  9826 ;;  data            1    wreg     unsigned char 
  9827 ;; Auto vars:     Size  Location     Type
  9828 ;;  data            1    3[COMMON] unsigned char 
  9829 ;; Return value:  Size  Location     Type
  9830 ;;                  1    wreg      unsigned char 
  9831 ;; Registers used:
  9832 ;;		wreg
  9833 ;; Tracked objects:
  9834 ;;		On entry : 0/0
  9835 ;;		On exit  : 0/0
  9836 ;;		Unchanged: 0/0
  9837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;Total ram usage:        1 bytes
  9843 ;; Hardware stack levels used:    1
  9844 ;; Hardware stack levels required when called:    3
  9845 ;; This function calls:
  9846 ;;		Nothing
  9847 ;; This function is called by:
  9848 ;;		_SPI_Exchange8bitBuffer
  9849 ;;		_maxim_31856_write_register
  9850 ;;		_maxim_31856_read_register
  9851 ;;		_maxim_31856_read_nregisters
  9852 ;; This function uses a non-reentrant model
  9853 ;;
  9854                           
  9855                           
  9856                           ;psect for function _SPI_Exchange8bit
  9857  086D                     _SPI_Exchange8bit:	
  9858                           
  9859                           ;incstack = 0
  9860                           ; Regs used in _SPI_Exchange8bit: [wreg]
  9861                           ;SPI_Exchange8bit@data stored from wreg
  9862  086D  00F3               	movwf	SPI_Exchange8bit@data
  9863                           
  9864                           ;spi.c: 79: SSP1CON1bits.WCOL = 0;
  9865  086E  0024               	movlb	4	; select bank4
  9866  086F  1395               	bcf	21,7	;volatile
  9867                           
  9868                           ;spi.c: 81: SSPBUF = data;
  9869  0870  0873               	movf	SPI_Exchange8bit@data,w
  9870  0871  0091               	movwf	17	;volatile
  9871  0872                     l71:	
  9872                           ;spi.c: 83: while (SSP1STATbits.BF == 0x0) {
  9873                           
  9874  0872  1C14               	btfss	20,0	;volatile
  9875  0873  2872               	goto	l71
  9876                           
  9877                           ;spi.c: 84: }
  9878                           ;spi.c: 86: return (SSPBUF);
  9879  0874  0811               	movf	17,w	;volatile
  9880  0875  0008               	return
  9881  0876                     __end_of_SPI_Exchange8bit:	
  9882                           
  9883                           	psect	text48
  9884  0BDD                     __ptext48:	
  9885 ;; *************** function _Two_Display *****************
  9886 ;; Defined at:
  9887 ;;		line 139 in file "mcc_generated_files/ht1621.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  number          1    wreg     unsigned char 
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;  number          1   10[BANK0 ] unsigned char 
  9892 ;;  num             4    6[BANK0 ] unsigned char [4]
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  1    wreg      void 
  9895 ;; Registers used:
  9896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;Total ram usage:        6 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:    5
  9909 ;; This function calls:
  9910 ;;		_WriteAll_1621
  9911 ;; This function is called by:
  9912 ;;		_temperature_process
  9913 ;; This function uses a non-reentrant model
  9914 ;;
  9915                           
  9916                           
  9917                           ;psect for function _Two_Display
  9918  0BDD                     _Two_Display:	
  9919                           
  9920                           ;incstack = 0
  9921                           ; Regs used in _Two_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9922                           ;Two_Display@number stored from wreg
  9923  0BDD  0020               	movlb	0	; select bank0
  9924  0BDE  00AA               	movwf	Two_Display@number
  9925                           
  9926                           ;ht1621.c: 141: unsigned char num[4]={0};
  9927  0BDF  0021               	movlb	1	; select bank1
  9928  0BE0  0823               	movf	(Two_Display@F2123+3)^(0+128),w
  9929  0BE1  0020               	movlb	0	; select bank0
  9930  0BE2  00A9               	movwf	Two_Display@num+3
  9931  0BE3  0021               	movlb	1	; select bank1
  9932  0BE4  0822               	movf	(Two_Display@F2123+2)^(0+128),w
  9933  0BE5  0020               	movlb	0	; select bank0
  9934  0BE6  00A8               	movwf	Two_Display@num+2
  9935  0BE7  0021               	movlb	1	; select bank1
  9936  0BE8  0821               	movf	(Two_Display@F2123+1)^(0+128),w
  9937  0BE9  0020               	movlb	0	; select bank0
  9938  0BEA  00A7               	movwf	Two_Display@num+1
  9939  0BEB  0021               	movlb	1	; select bank1
  9940  0BEC  0820               	movf	Two_Display@F2123^(0+128),w
  9941  0BED  0020               	movlb	0	; select bank0
  9942  0BEE  00A6               	movwf	Two_Display@num
  9943                           
  9944                           ;ht1621.c: 142: num[1] = Dis_TAB[0];
  9945  0BEF  3000               	movlw	low (_Dis_TAB| (0+32768))
  9946  0BF0  0084               	movwf	4
  9947  0BF1  3090               	movlw	high (_Dis_TAB| (0+32768))
  9948  0BF2  0085               	movwf	5
  9949  0BF3  0800               	movf	0,w	;code access
  9950  0BF4  00A5               	movwf	??_Two_Display
  9951  0BF5  0825               	movf	??_Two_Display,w
  9952  0BF6  00A7               	movwf	Two_Display@num+1
  9953                           
  9954                           ;ht1621.c: 143: num[2] = Dis_TAB[number];
  9955  0BF7  082A               	movf	Two_Display@number,w
  9956  0BF8  3E00               	addlw	low (_Dis_TAB| (0+32768))
  9957  0BF9  0084               	movwf	4
  9958  0BFA  3090               	movlw	high (_Dis_TAB| (0+32768))
  9959  0BFB  1803               	skipnc
  9960  0BFC  3E01               	addlw	1
  9961  0BFD  0085               	movwf	5
  9962  0BFE  0800               	movf	0,w	;code access
  9963  0BFF  00A5               	movwf	??_Two_Display
  9964  0C00  0825               	movf	??_Two_Display,w
  9965  0C01  00A8               	movwf	Two_Display@num+2
  9966                           
  9967                           ;ht1621.c: 144: WriteAll_1621(0, num, 4);
  9968  0C02  3026               	movlw	low Two_Display@num
  9969  0C03  00A0               	movwf	WriteAll_1621@p
  9970  0C04  3000               	movlw	high Two_Display@num
  9971  0C05  00A1               	movwf	WriteAll_1621@p+1
  9972  0C06  3004               	movlw	4
  9973  0C07  00A5               	movwf	??_Two_Display
  9974  0C08  0825               	movf	??_Two_Display,w
  9975  0C09  00A2               	movwf	WriteAll_1621@cnt
  9976  0C0A  3000               	movlw	0
  9977  0C0B  318C  240E         	fcall	_WriteAll_1621
  9978  0C0D  0008               	return
  9979  0C0E                     __end_of_Two_Display:	
  9980                           
  9981                           	psect	text49
  9982  0C0E                     __ptext49:	
  9983 ;; *************** function _WriteAll_1621 *****************
  9984 ;; Defined at:
  9985 ;;		line 91 in file "mcc_generated_files/ht1621.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;  addr            1    wreg     unsigned char 
  9988 ;;  p               2    0[BANK0 ] PTR unsigned char 
  9989 ;;		 -> time_Display@num(4), err_Display@num(4), Two_Display@num(4), display_buff(4), 
  9990 ;;		 -> Dis_TAB(21), 
  9991 ;;  cnt             1    2[BANK0 ] unsigned char 
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;  addr            1    3[BANK0 ] unsigned char 
  9994 ;;  i               1    4[BANK0 ] unsigned char 
  9995 ;; Return value:  Size  Location     Type
  9996 ;;                  1    wreg      void 
  9997 ;; Registers used:
  9998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10004 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;Total ram usage:        6 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    4
 10011 ;; This function calls:
 10012 ;;		_SendBit_1621
 10013 ;;		_SendDataBit_1621
 10014 ;; This function is called by:
 10015 ;;		_main
 10016 ;;		_Tc_Display
 10017 ;;		_Two_Display
 10018 ;;		_err_Display
 10019 ;;		_time_Display
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           
 10024                           ;psect for function _WriteAll_1621
 10025  0C0E                     _WriteAll_1621:	
 10026                           
 10027                           ;incstack = 0
 10028                           ; Regs used in _WriteAll_1621: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10029                           ;WriteAll_1621@addr stored from wreg
 10030  0C0E  0020               	movlb	0	; select bank0
 10031  0C0F  00A3               	movwf	WriteAll_1621@addr
 10032                           
 10033                           ;ht1621.c: 93: unsigned char i;
 10034                           ;ht1621.c: 94: do { LATC0 = 0; } while(0);
 10035  0C10  0022               	movlb	2	; select bank2
 10036  0C11  100E               	bcf	14,0	;volatile
 10037                           
 10038                           ;ht1621.c: 95: SendBit_1621(0xa0,3);
 10039  0C12  3003               	movlw	3
 10040  0C13  00F7               	movwf	??_WriteAll_1621
 10041  0C14  0877               	movf	??_WriteAll_1621,w
 10042  0C15  00F3               	movwf	SendBit_1621@cnt
 10043  0C16  30A0               	movlw	160
 10044  0C17  318A  221D  318C   	fcall	_SendBit_1621
 10045                           
 10046                           ;ht1621.c: 96: SendBit_1621(addr,6);
 10047  0C1A  3006               	movlw	6
 10048  0C1B  00F7               	movwf	??_WriteAll_1621
 10049  0C1C  0877               	movf	??_WriteAll_1621,w
 10050  0C1D  00F3               	movwf	SendBit_1621@cnt
 10051  0C1E  0020               	movlb	0	; select bank0
 10052  0C1F  0823               	movf	WriteAll_1621@addr,w
 10053  0C20  318A  221D  318C   	fcall	_SendBit_1621
 10054                           
 10055                           ;ht1621.c: 97: for(i =0; i <cnt; i ++,p++)
 10056  0C23  0020               	movlb	0	; select bank0
 10057  0C24  01A4               	clrf	WriteAll_1621@i
 10058  0C25                     l4693:	
 10059  0C25  0822               	movf	WriteAll_1621@cnt,w
 10060  0C26  0224               	subwf	WriteAll_1621@i,w
 10061  0C27  1803               	btfsc	3,0
 10062  0C28  2C3F               	goto	l677
 10063                           
 10064                           ;ht1621.c: 98: {
 10065                           ;ht1621.c: 99: SendDataBit_1621(*p,8);
 10066  0C29  3008               	movlw	8
 10067  0C2A  00F7               	movwf	??_WriteAll_1621
 10068  0C2B  0877               	movf	??_WriteAll_1621,w
 10069  0C2C  00F3               	movwf	SendDataBit_1621@cnt
 10070  0C2D  0820               	movf	WriteAll_1621@p,w
 10071  0C2E  0084               	movwf	4
 10072  0C2F  0821               	movf	WriteAll_1621@p+1,w
 10073  0C30  0085               	movwf	5
 10074  0C31  0800               	movf	0,w	;code access
 10075  0C32  318A  223B  318C   	fcall	_SendDataBit_1621
 10076  0C35  3001               	movlw	1
 10077  0C36  00F7               	movwf	??_WriteAll_1621
 10078  0C37  0877               	movf	??_WriteAll_1621,w
 10079  0C38  0020               	movlb	0	; select bank0
 10080  0C39  07A4               	addwf	WriteAll_1621@i,f
 10081  0C3A  3001               	movlw	1
 10082  0C3B  07A0               	addwf	WriteAll_1621@p,f
 10083  0C3C  3000               	movlw	0
 10084  0C3D  3DA1               	addwfc	WriteAll_1621@p+1,f
 10085  0C3E  2C25               	goto	l4693
 10086  0C3F                     l677:	
 10087                           ;ht1621.c: 100: }
 10088                           ;ht1621.c: 101: do { LATC0 = 1; } while(0);
 10089                           
 10090  0C3F  0022               	movlb	2	; select bank2
 10091  0C40  140E               	bsf	14,0	;volatile
 10092  0C41  0008               	return
 10093  0C42                     __end_of_WriteAll_1621:	
 10094                           
 10095                           	psect	text50
 10096  0A3B                     __ptext50:	
 10097 ;; *************** function _SendDataBit_1621 *****************
 10098 ;; Defined at:
 10099 ;;		line 42 in file "mcc_generated_files/ht1621.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;  data            1    wreg     unsigned char 
 10102 ;;  cnt             1    3[COMMON] unsigned char 
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;  data            1    5[COMMON] unsigned char 
 10105 ;;  i               1    6[COMMON] unsigned char 
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      void 
 10108 ;; Registers used:
 10109 ;;		wreg, status,2, status,0
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10115 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;Total ram usage:        4 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    3
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_WriteAll_1621
 10126 ;;		_Write_1621
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           
 10131                           ;psect for function _SendDataBit_1621
 10132  0A3B                     _SendDataBit_1621:	
 10133                           
 10134                           ;incstack = 0
 10135                           ; Regs used in _SendDataBit_1621: [wreg+status,2+status,0]
 10136                           ;SendDataBit_1621@data stored from wreg
 10137  0A3B  00F5               	movwf	SendDataBit_1621@data
 10138                           
 10139                           ;ht1621.c: 44: unsigned char i;
 10140                           ;ht1621.c: 45: for(i =0; i <cnt; i ++)
 10141  0A3C  01F6               	clrf	SendDataBit_1621@i
 10142  0A3D                     l4621:	
 10143  0A3D  0873               	movf	SendDataBit_1621@cnt,w
 10144  0A3E  0276               	subwf	SendDataBit_1621@i,w
 10145  0A3F  1803               	btfsc	3,0
 10146  0A40  0008               	return
 10147                           
 10148                           ;ht1621.c: 46: {
 10149                           ;ht1621.c: 47: if((data&0x01)==0) do { LATC2 = 0; } while(0);
 10150  0A41  1875               	btfsc	SendDataBit_1621@data,0
 10151  0A42  2A46               	goto	l648
 10152  0A43  0022               	movlb	2	; select bank2
 10153  0A44  110E               	bcf	14,2	;volatile
 10154  0A45  2A48               	goto	l650
 10155  0A46                     l648:	
 10156                           ;ht1621.c: 48: else do { LATC2 = 1; } while(0);
 10157                           
 10158  0A46  0022               	movlb	2	; select bank2
 10159  0A47  150E               	bsf	14,2	;volatile
 10160  0A48                     l650:	
 10161                           ;ht1621.c: 49: do { LATC1 = 0; } while(0);
 10162                           
 10163  0A48  108E               	bcf	14,1	;volatile
 10164                           
 10165                           ;ht1621.c: 50: _delay((unsigned long)((1)*(4000000/4000.0)));
 10166  0A49  30F9               	movlw	249
 10167  0A4A  00F4               	movwf	??_SendDataBit_1621
 10168  0A4B                     u5407:	
 10169  0A4B  0000               	nop
 10170  0A4C  0BF4               	decfsz	??_SendDataBit_1621,f
 10171  0A4D  2A4B               	goto	u5407
 10172  0A4E  3200               	nop2	;nop
 10173  0A4F  0000               	nop
 10174                           
 10175                           ;ht1621.c: 51: do { LATC1 = 1; } while(0);
 10176  0A50  0022               	movlb	2	; select bank2
 10177  0A51  148E               	bsf	14,1	;volatile
 10178                           
 10179                           ;ht1621.c: 52: data>>=1;
 10180  0A52  1003               	clrc
 10181  0A53  0CF5               	rrf	SendDataBit_1621@data,f
 10182  0A54  3001               	movlw	1
 10183  0A55  00F4               	movwf	??_SendDataBit_1621
 10184  0A56  0874               	movf	??_SendDataBit_1621,w
 10185  0A57  07F6               	addwf	SendDataBit_1621@i,f
 10186  0A58  2A3D               	goto	l4621
 10187  0A59                     __end_of_SendDataBit_1621:	
 10188                           
 10189                           	psect	text51
 10190  0845                     __ptext51:	
 10191 ;; *************** function _Set_start_flag *****************
 10192 ;; Defined at:
 10193 ;;		line 18 in file "mcc_generated_files/save.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;		None
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;		None
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  1    wreg      void 
 10200 ;; Registers used:
 10201 ;;		None
 10202 ;; Tracked objects:
 10203 ;;		On entry : 0/0
 10204 ;;		On exit  : 0/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;Total ram usage:        0 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:    3
 10214 ;; This function calls:
 10215 ;;		Nothing
 10216 ;; This function is called by:
 10217 ;;		_Key_Process
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           
 10222                           ;psect for function _Set_start_flag
 10223  0845                     _Set_start_flag:	
 10224                           
 10225                           ;save.c: 20: Record_flag = 1;
 10226                           
 10227                           ;incstack = 0
 10228                           ; Regs used in _Set_start_flag: []
 10229  0845  0020               	movlb	0	; select bank0
 10230  0846  01EB               	clrf	_Record_flag
 10231  0847  0AEB               	incf	_Record_flag,f
 10232                           
 10233                           ;save.c: 21: do { LATA4 = 0; } while(0);
 10234  0848  0022               	movlb	2	; select bank2
 10235  0849  120C               	bcf	12,4	;volatile
 10236  084A  0008               	return
 10237  084B                     __end_of_Set_start_flag:	
 10238                           
 10239                           	psect	text52
 10240  0835                     __ptext52:	
 10241 ;; *************** function _Set_finish_flag *****************
 10242 ;; Defined at:
 10243 ;;		line 30 in file "mcc_generated_files/save.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;		None
 10246 ;; Auto vars:     Size  Location     Type
 10247 ;;		None
 10248 ;; Return value:  Size  Location     Type
 10249 ;;                  1    wreg      void 
 10250 ;; Registers used:
 10251 ;;		status,2
 10252 ;; Tracked objects:
 10253 ;;		On entry : 0/0
 10254 ;;		On exit  : 0/0
 10255 ;;		Unchanged: 0/0
 10256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;Total ram usage:        0 bytes
 10262 ;; Hardware stack levels used:    1
 10263 ;; Hardware stack levels required when called:    3
 10264 ;; This function calls:
 10265 ;;		Nothing
 10266 ;; This function is called by:
 10267 ;;		_Key_Process
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           
 10272                           ;psect for function _Set_finish_flag
 10273  0835                     _Set_finish_flag:	
 10274                           
 10275                           ;save.c: 32: Record_flag = 0;
 10276                           
 10277                           ;incstack = 0
 10278                           ; Regs used in _Set_finish_flag: [status,2]
 10279  0835  0020               	movlb	0	; select bank0
 10280  0836  01EB               	clrf	_Record_flag
 10281                           
 10282                           ;save.c: 33: do { LATA4 = 1; } while(0);
 10283  0837  0022               	movlb	2	; select bank2
 10284  0838  160C               	bsf	12,4	;volatile
 10285  0839  0008               	return
 10286  083A                     __end_of_Set_finish_flag:	
 10287                           
 10288                           	psect	text53
 10289  0904                     __ptext53:	
 10290 ;; *************** function _SendCmd_1621 *****************
 10291 ;; Defined at:
 10292 ;;		line 62 in file "mcc_generated_files/ht1621.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;  command         1    wreg     unsigned char 
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;  command         1    0[BANK0 ] unsigned char 
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  1    wreg      void 
 10299 ;; Registers used:
 10300 ;;		wreg, status,2, status,0, pclath, cstack
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;Total ram usage:        2 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; Hardware stack levels required when called:    4
 10313 ;; This function calls:
 10314 ;;		_SendBit_1621
 10315 ;; This function is called by:
 10316 ;;		_main
 10317 ;;		_Key_Process
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321                           
 10322                           ;psect for function _SendCmd_1621
 10323  0904                     _SendCmd_1621:	
 10324                           
 10325                           ;incstack = 0
 10326                           ; Regs used in _SendCmd_1621: [wreg+status,2+status,0+pclath+cstack]
 10327                           ;SendCmd_1621@command stored from wreg
 10328  0904  0020               	movlb	0	; select bank0
 10329  0905  00A0               	movwf	SendCmd_1621@command
 10330                           
 10331                           ;ht1621.c: 64: do { LATC0 = 0; } while(0);
 10332  0906  0022               	movlb	2	; select bank2
 10333  0907  100E               	bcf	14,0	;volatile
 10334                           
 10335                           ;ht1621.c: 65: SendBit_1621(0x80,4);
 10336  0908  3004               	movlw	4
 10337  0909  00F7               	movwf	??_SendCmd_1621
 10338  090A  0877               	movf	??_SendCmd_1621,w
 10339  090B  00F3               	movwf	SendBit_1621@cnt
 10340  090C  3080               	movlw	128
 10341  090D  318A  221D  3189   	fcall	_SendBit_1621
 10342                           
 10343                           ;ht1621.c: 66: SendBit_1621(command,8);
 10344  0910  3008               	movlw	8
 10345  0911  00F7               	movwf	??_SendCmd_1621
 10346  0912  0877               	movf	??_SendCmd_1621,w
 10347  0913  00F3               	movwf	SendBit_1621@cnt
 10348  0914  0020               	movlb	0	; select bank0
 10349  0915  0820               	movf	SendCmd_1621@command,w
 10350  0916  318A  221D         	fcall	_SendBit_1621
 10351                           
 10352                           ;ht1621.c: 67: do { LATC0 = 1; } while(0);
 10353  0918  0022               	movlb	2	; select bank2
 10354  0919  140E               	bsf	14,0	;volatile
 10355  091A  0008               	return
 10356  091B                     __end_of_SendCmd_1621:	
 10357                           
 10358                           	psect	text54
 10359  0A1D                     __ptext54:	
 10360 ;; *************** function _SendBit_1621 *****************
 10361 ;; Defined at:
 10362 ;;		line 22 in file "mcc_generated_files/ht1621.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;  data            1    wreg     unsigned char 
 10365 ;;  cnt             1    3[COMMON] unsigned char 
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;  data            1    5[COMMON] unsigned char 
 10368 ;;  i               1    6[COMMON] unsigned char 
 10369 ;; Return value:  Size  Location     Type
 10370 ;;                  1    wreg      void 
 10371 ;; Registers used:
 10372 ;;		wreg, status,2, status,0
 10373 ;; Tracked objects:
 10374 ;;		On entry : 0/0
 10375 ;;		On exit  : 0/0
 10376 ;;		Unchanged: 0/0
 10377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10378 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;Total ram usage:        4 bytes
 10383 ;; Hardware stack levels used:    1
 10384 ;; Hardware stack levels required when called:    3
 10385 ;; This function calls:
 10386 ;;		Nothing
 10387 ;; This function is called by:
 10388 ;;		_SendCmd_1621
 10389 ;;		_WriteAll_1621
 10390 ;;		_Write_1621
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394                           
 10395                           ;psect for function _SendBit_1621
 10396  0A1D                     _SendBit_1621:	
 10397                           
 10398                           ;incstack = 0
 10399                           ; Regs used in _SendBit_1621: [wreg+status,2+status,0]
 10400                           ;SendBit_1621@data stored from wreg
 10401  0A1D  00F5               	movwf	SendBit_1621@data
 10402                           
 10403                           ;ht1621.c: 24: unsigned char i;
 10404                           ;ht1621.c: 25: for(i =0; i <cnt; i ++)
 10405  0A1E  01F6               	clrf	SendBit_1621@i
 10406  0A1F                     l4609:	
 10407  0A1F  0873               	movf	SendBit_1621@cnt,w
 10408  0A20  0276               	subwf	SendBit_1621@i,w
 10409  0A21  1803               	btfsc	3,0
 10410  0A22  0008               	return
 10411                           
 10412                           ;ht1621.c: 26: {
 10413                           ;ht1621.c: 27: if((data&0x80)==0) do { LATC2 = 0; } while(0);
 10414  0A23  1BF5               	btfsc	SendBit_1621@data,7
 10415  0A24  2A28               	goto	l632
 10416  0A25  0022               	movlb	2	; select bank2
 10417  0A26  110E               	bcf	14,2	;volatile
 10418  0A27  2A2A               	goto	l634
 10419  0A28                     l632:	
 10420                           ;ht1621.c: 28: else do { LATC2 = 1; } while(0);
 10421                           
 10422  0A28  0022               	movlb	2	; select bank2
 10423  0A29  150E               	bsf	14,2	;volatile
 10424  0A2A                     l634:	
 10425                           ;ht1621.c: 29: do { LATC1 = 0; } while(0);
 10426                           
 10427  0A2A  108E               	bcf	14,1	;volatile
 10428                           
 10429                           ;ht1621.c: 30: _delay((unsigned long)((1)*(4000000/4000.0)));
 10430  0A2B  30F9               	movlw	249
 10431  0A2C  00F4               	movwf	??_SendBit_1621
 10432  0A2D                     u5417:	
 10433  0A2D  0000               	nop
 10434  0A2E  0BF4               	decfsz	??_SendBit_1621,f
 10435  0A2F  2A2D               	goto	u5417
 10436  0A30  3200               	nop2	;nop
 10437  0A31  0000               	nop
 10438                           
 10439                           ;ht1621.c: 31: do { LATC1 = 1; } while(0);
 10440  0A32  0022               	movlb	2	; select bank2
 10441  0A33  148E               	bsf	14,1	;volatile
 10442                           
 10443                           ;ht1621.c: 32: data<<=1;
 10444  0A34  1003               	clrc
 10445  0A35  0DF5               	rlf	SendBit_1621@data,f
 10446  0A36  3001               	movlw	1
 10447  0A37  00F4               	movwf	??_SendBit_1621
 10448  0A38  0874               	movf	??_SendBit_1621,w
 10449  0A39  07F6               	addwf	SendBit_1621@i,f
 10450  0A3A  2A1F               	goto	l4609
 10451  0A3B                     __end_of_SendBit_1621:	
 10452                           
 10453                           	psect	text55
 10454  0AD9                     __ptext55:	
 10455 ;; *************** function _Key_Scan *****************
 10456 ;; Defined at:
 10457 ;;		line 20 in file "mcc_generated_files/key.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;		None
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;  Key_val         1    5[COMMON] unsigned char 
 10462 ;; Return value:  Size  Location     Type
 10463 ;;                  1    wreg      unsigned char 
 10464 ;; Registers used:
 10465 ;;		wreg
 10466 ;; Tracked objects:
 10467 ;;		On entry : 0/0
 10468 ;;		On exit  : 0/0
 10469 ;;		Unchanged: 0/0
 10470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;Total ram usage:        3 bytes
 10476 ;; Hardware stack levels used:    1
 10477 ;; Hardware stack levels required when called:    3
 10478 ;; This function calls:
 10479 ;;		Nothing
 10480 ;; This function is called by:
 10481 ;;		_Key_Process
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function _Key_Scan
 10487  0AD9                     _Key_Scan:	
 10488                           
 10489                           ;key.c: 22: unsigned char Key_val=0xff;
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in _Key_Scan: [wreg]
 10493  0AD9  30FF               	movlw	255
 10494  0ADA  00F3               	movwf	??_Key_Scan
 10495  0ADB  0873               	movf	??_Key_Scan,w
 10496  0ADC  00F5               	movwf	Key_Scan@Key_val
 10497                           
 10498                           ;key.c: 23: if( RA7 == 0 || RB5 == 0 )
 10499  0ADD  0020               	movlb	0	; select bank0
 10500  0ADE  1F8C               	btfss	12,7	;volatile
 10501  0ADF  2AE2               	goto	l5303
 10502  0AE0  1A8D               	btfsc	13,5	;volatile
 10503  0AE1  2AFA               	goto	l863
 10504  0AE2                     l5303:	
 10505                           
 10506                           ;key.c: 24: {
 10507                           ;key.c: 25: _delay((unsigned long)((10)*(4000000/4000.0)));
 10508  0AE2  300D               	movlw	13
 10509  0AE3  00F4               	movwf	??_Key_Scan+1
 10510  0AE4  30FB               	movlw	251
 10511  0AE5  00F3               	movwf	??_Key_Scan
 10512  0AE6                     u5427:	
 10513  0AE6  0BF3               	decfsz	??_Key_Scan,f
 10514  0AE7  2AE6               	goto	u5427
 10515  0AE8  0BF4               	decfsz	??_Key_Scan+1,f
 10516  0AE9  2AE6               	goto	u5427
 10517  0AEA  3200               	nop2
 10518                           
 10519                           ;key.c: 26: if( RA7 == 0 || RB5 == 0)
 10520  0AEB  0020               	movlb	0	; select bank0
 10521  0AEC  1F8C               	btfss	12,7	;volatile
 10522  0AED  2AF0               	goto	l868
 10523  0AEE  1A8D               	btfsc	13,5	;volatile
 10524  0AEF  2AFA               	goto	l863
 10525  0AF0                     l868:	
 10526                           
 10527                           ;key.c: 27: {
 10528                           ;key.c: 28: if(RB5 == 0 ) Key_val = 0x01;
 10529  0AF0  1A8D               	btfsc	13,5	;volatile
 10530  0AF1  2AF4               	goto	l869
 10531  0AF2  01F5               	clrf	Key_Scan@Key_val
 10532  0AF3  0AF5               	incf	Key_Scan@Key_val,f
 10533  0AF4                     l869:	
 10534                           
 10535                           ;key.c: 29: if(RA7 == 0 ) Key_val = 0x02;
 10536  0AF4  1B8C               	btfsc	12,7	;volatile
 10537  0AF5  2AFA               	goto	l863
 10538  0AF6  3002               	movlw	2
 10539  0AF7  00F3               	movwf	??_Key_Scan
 10540  0AF8  0873               	movf	??_Key_Scan,w
 10541  0AF9  00F5               	movwf	Key_Scan@Key_val
 10542  0AFA                     l863:	
 10543                           
 10544                           ;key.c: 30: }
 10545                           ;key.c: 31: }
 10546                           ;key.c: 32: return Key_val;
 10547  0AFA  0875               	movf	Key_Scan@Key_val,w
 10548  0AFB  0008               	return
 10549  0AFC                     __end_of_Key_Scan:	
 10550                           
 10551                           	psect	text56
 10552  085D                     __ptext56:	
 10553 ;; *************** function _EUSART_Write *****************
 10554 ;; Defined at:
 10555 ;;		line 91 in file "mcc_generated_files/eusart.c"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;  txData          1    wreg     unsigned char 
 10558 ;; Auto vars:     Size  Location     Type
 10559 ;;  txData          1    3[COMMON] unsigned char 
 10560 ;; Return value:  Size  Location     Type
 10561 ;;                  1    wreg      void 
 10562 ;; Registers used:
 10563 ;;		wreg
 10564 ;; Tracked objects:
 10565 ;;		On entry : 0/0
 10566 ;;		On exit  : 0/0
 10567 ;;		Unchanged: 0/0
 10568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;Total ram usage:        1 bytes
 10574 ;; Hardware stack levels used:    1
 10575 ;; Hardware stack levels required when called:    3
 10576 ;; This function calls:
 10577 ;;		Nothing
 10578 ;; This function is called by:
 10579 ;;		_Key_Process
 10580 ;;		_EUSART_SendString
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           
 10585                           ;psect for function _EUSART_Write
 10586  085D                     _EUSART_Write:	
 10587                           
 10588                           ;incstack = 0
 10589                           ; Regs used in _EUSART_Write: [wreg]
 10590                           ;EUSART_Write@txData stored from wreg
 10591  085D  00F3               	movwf	EUSART_Write@txData
 10592  085E                     l129:	
 10593                           ;eusart.c: 92: while (0 == PIR1bits.TXIF) {
 10594                           
 10595  085E  0020               	movlb	0	; select bank0
 10596  085F  1E11               	btfss	17,4	;volatile
 10597  0860  285E               	goto	l129
 10598                           
 10599                           ;eusart.c: 93: }
 10600                           ;eusart.c: 95: TXREG = txData;
 10601  0861  0873               	movf	EUSART_Write@txData,w
 10602  0862  0023               	movlb	3	; select bank3
 10603  0863  009A               	movwf	26	;volatile
 10604  0864  0008               	return
 10605  0865                     __end_of_EUSART_Write:	
 10606                           
 10607                           	psect	text57
 10608  09CB                     __ptext57:	
 10609 ;; *************** function _Bq32k_Time_Init *****************
 10610 ;; Defined at:
 10611 ;;		line 17 in file "mcc_generated_files/bq32k.c"
 10612 ;; Parameters:    Size  Location     Type
 10613 ;;		None
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;  temp           10    7[BANK0 ] unsigned char [10]
 10616 ;;  time            7    0        struct bq32k_regs
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;Total ram usage:       12 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    5
 10633 ;; This function calls:
 10634 ;;		_I2C_Send_Buffer
 10635 ;; This function is called by:
 10636 ;;		_main
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function _Bq32k_Time_Init
 10642  09CB                     _Bq32k_Time_Init:	
 10643                           
 10644                           ;bq32k.c: 19: bq32k_t time;
 10645                           ;bq32k.c: 20: unsigned char temp[10] = { 0x01,0x50,0x23,0x02,0x08,0x07,0x16 };
 10646                           
 10647                           ;incstack = 0
 10648                           ; Regs used in _Bq32k_Time_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10649  09CB  30E5               	movlw	low Bq32k_Time_Init@F2018
 10650  09CC  0086               	movwf	6
 10651  09CD  3000               	movlw	high Bq32k_Time_Init@F2018
 10652  09CE  0087               	movwf	7
 10653  09CF  3027               	movlw	low Bq32k_Time_Init@temp
 10654  09D0  0084               	movwf	4
 10655  09D1  3000               	movlw	high Bq32k_Time_Init@temp
 10656  09D2  0085               	movwf	5
 10657  09D3  300A               	movlw	10
 10658  09D4  0020               	movlb	0	; select bank0
 10659  09D5  00A5               	movwf	??_Bq32k_Time_Init
 10660  09D6                     u4930:	
 10661  09D6  0016               	moviw fsr1++
 10662  09D7  001A               	movwi fsr0++
 10663  09D8  0BA5               	decfsz	??_Bq32k_Time_Init,f
 10664  09D9  29D6               	goto	u4930
 10665                           
 10666                           ;bq32k.c: 21: I2C_Send_Buffer(0, temp, 7);
 10667  09DA  3027               	movlw	(low (Bq32k_Time_Init@temp| 0))& (0+255)
 10668  09DB  00A5               	movwf	??_Bq32k_Time_Init
 10669  09DC  0825               	movf	??_Bq32k_Time_Init,w
 10670  09DD  00F6               	movwf	I2C_Send_Buffer@buff
 10671  09DE  3007               	movlw	7
 10672  09DF  00A6               	movwf	??_Bq32k_Time_Init+1
 10673  09E0  0826               	movf	??_Bq32k_Time_Init+1,w
 10674  09E1  00F7               	movwf	I2C_Send_Buffer@Length
 10675  09E2  3000               	movlw	0
 10676  09E3  3187  27C4         	fcall	_I2C_Send_Buffer
 10677  09E5  0008               	return
 10678  09E6                     __end_of_Bq32k_Time_Init:	
 10679                           
 10680                           	psect	text58
 10681  07C4                     __ptext58:	
 10682 ;; *************** function _I2C_Send_Buffer *****************
 10683 ;; Defined at:
 10684 ;;		line 173 in file "mcc_generated_files/i2c.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;  ADD             1    wreg     unsigned char 
 10687 ;;  buff            1    6[COMMON] PTR unsigned char 
 10688 ;;		 -> Bq32k_Rtc_Write_Time@temp(10), Bq32k_Time_Init@temp(10), 
 10689 ;;  Length          1    7[COMMON] unsigned char 
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;  ADD             1    2[BANK0 ] unsigned char 
 10692 ;;  Flag            1    4[BANK0 ] unsigned char 
 10693 ;;  i               1    3[BANK0 ] unsigned char 
 10694 ;; Return value:  Size  Location     Type
 10695 ;;                  1    wreg      unsigned char 
 10696 ;; Registers used:
 10697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10698 ;; Tracked objects:
 10699 ;;		On entry : 0/0
 10700 ;;		On exit  : 0/0
 10701 ;;		Unchanged: 0/0
 10702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;Total ram usage:        7 bytes
 10708 ;; Hardware stack levels used:    1
 10709 ;; Hardware stack levels required when called:    4
 10710 ;; This function calls:
 10711 ;;		_I2C_Send_Byte
 10712 ;;		_I2C_Start
 10713 ;;		_I2C_Stop
 10714 ;; This function is called by:
 10715 ;;		_Bq32k_Time_Init
 10716 ;;		_Bq32k_Rtc_Write_Time
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           
 10721                           ;psect for function _I2C_Send_Buffer
 10722  07C4                     _I2C_Send_Buffer:	
 10723                           
 10724                           ;incstack = 0
 10725                           ; Regs used in _I2C_Send_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10726                           ;I2C_Send_Buffer@ADD stored from wreg
 10727  07C4  0020               	movlb	0	; select bank0
 10728  07C5  00A2               	movwf	I2C_Send_Buffer@ADD
 10729                           
 10730                           ;i2c.c: 175: unsigned char Flag=1;
 10731  07C6  01A4               	clrf	I2C_Send_Buffer@Flag
 10732  07C7  0AA4               	incf	I2C_Send_Buffer@Flag,f
 10733                           
 10734                           ;i2c.c: 176: unsigned char i;
 10735                           ;i2c.c: 178: I2C_Start();
 10736  07C8  3189  214B  3187   	fcall	_I2C_Start
 10737                           
 10738                           ;i2c.c: 180: Flag=I2C_Send_Byte(0XD0);
 10739  07CB  30D0               	movlw	208
 10740  07CC  318D  25F6  3187   	fcall	_I2C_Send_Byte
 10741  07CF  0020               	movlb	0	; select bank0
 10742  07D0  00A0               	movwf	??_I2C_Send_Buffer
 10743  07D1  0820               	movf	??_I2C_Send_Buffer,w
 10744  07D2  00A4               	movwf	I2C_Send_Buffer@Flag
 10745                           
 10746                           ;i2c.c: 181: if(Flag)
 10747  07D3  0824               	movf	I2C_Send_Buffer@Flag,w
 10748  07D4  1D03               	btfss	3,2
 10749  07D5  0008               	return
 10750                           
 10751                           ;i2c.c: 184: Flag=I2C_Send_Byte( ADD );
 10752                           
 10753                           ;i2c.c: 182: return 0x01;
 10754                           ;	Return value of _I2C_Send_Buffer is never used
 10755  07D6  0822               	movf	I2C_Send_Buffer@ADD,w
 10756  07D7  318D  25F6  3187   	fcall	_I2C_Send_Byte
 10757  07DA  0020               	movlb	0	; select bank0
 10758  07DB  00A0               	movwf	??_I2C_Send_Buffer
 10759  07DC  0820               	movf	??_I2C_Send_Buffer,w
 10760  07DD  00A4               	movwf	I2C_Send_Buffer@Flag
 10761                           
 10762                           ;i2c.c: 185: if(Flag)
 10763  07DE  0824               	movf	I2C_Send_Buffer@Flag,w
 10764  07DF  1D03               	btfss	3,2
 10765  07E0  0008               	return
 10766                           
 10767                           ;i2c.c: 188: for (i = 0; i<Length; i++)
 10768                           
 10769                           ;i2c.c: 186: return 0x01;
 10770                           ;	Return value of _I2C_Send_Buffer is never used
 10771  07E1  01A3               	clrf	I2C_Send_Buffer@i
 10772  07E2                     l5291:	
 10773  07E2  0877               	movf	I2C_Send_Buffer@Length,w
 10774  07E3  0223               	subwf	I2C_Send_Buffer@i,w
 10775  07E4  1803               	btfsc	3,0
 10776  07E5  2FFC               	goto	l5293
 10777                           
 10778                           ;i2c.c: 189: {
 10779                           ;i2c.c: 190: Flag=I2C_Send_Byte(*(buff+i));
 10780  07E6  0823               	movf	I2C_Send_Buffer@i,w
 10781  07E7  0776               	addwf	I2C_Send_Buffer@buff,w
 10782  07E8  00A0               	movwf	??_I2C_Send_Buffer
 10783  07E9  0820               	movf	??_I2C_Send_Buffer,w
 10784  07EA  0086               	movwf	6
 10785  07EB  0187               	clrf	7
 10786  07EC  0801               	movf	1,w
 10787  07ED  318D  25F6  3187   	fcall	_I2C_Send_Byte
 10788  07F0  0020               	movlb	0	; select bank0
 10789  07F1  00A1               	movwf	??_I2C_Send_Buffer+1
 10790  07F2  0821               	movf	??_I2C_Send_Buffer+1,w
 10791  07F3  00A4               	movwf	I2C_Send_Buffer@Flag
 10792                           
 10793                           ;i2c.c: 191: if(Flag)
 10794  07F4  0824               	movf	I2C_Send_Buffer@Flag,w
 10795  07F5  1D03               	btfss	3,2
 10796  07F6  0008               	return
 10797                           
 10798                           ;i2c.c: 192: return 0x01;
 10799                           ;	Return value of _I2C_Send_Buffer is never used
 10800  07F7  3001               	movlw	1
 10801  07F8  00A0               	movwf	??_I2C_Send_Buffer
 10802  07F9  0820               	movf	??_I2C_Send_Buffer,w
 10803  07FA  07A3               	addwf	I2C_Send_Buffer@i,f
 10804  07FB  2FE2               	goto	l5291
 10805  07FC                     l5293:	
 10806                           
 10807                           ;i2c.c: 193: }
 10808                           ;i2c.c: 194: I2C_Stop();
 10809  07FC  3189  2164         	fcall	_I2C_Stop
 10810  07FE  0008               	return
 10811  07FF                     __end_of_I2C_Send_Buffer:	
 10812                           ;i2c.c: 195: return 0x00;
 10813                           ;	Return value of _I2C_Send_Buffer is never used
 10814                           
 10815                           
 10816                           	psect	text59
 10817  0964                     __ptext59:	
 10818 ;; *************** function _I2C_Stop *****************
 10819 ;; Defined at:
 10820 ;;		line 102 in file "mcc_generated_files/i2c.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;		None
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;		None
 10825 ;; Return value:  Size  Location     Type
 10826 ;;                  1    wreg      void 
 10827 ;; Registers used:
 10828 ;;		wreg
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;Total ram usage:        1 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    3
 10841 ;; This function calls:
 10842 ;;		Nothing
 10843 ;; This function is called by:
 10844 ;;		_I2C_Read_Buffer
 10845 ;;		_I2C_Send_Buffer
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           
 10850                           ;psect for function _I2C_Stop
 10851  0964                     _I2C_Stop:	
 10852                           
 10853                           ;incstack = 0
 10854                           ; Regs used in _I2C_Stop: [wreg]
 10855                           ;i2c.c: 104: do { LATB0 = 0; } while(0);
 10856  0964  0022               	movlb	2	; select bank2
 10857  0965  100D               	bcf	13,0	;volatile
 10858                           
 10859                           ;i2c.c: 105: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10860  0966  3003               	movlw	3
 10861  0967  00F3               	movwf	??_I2C_Stop
 10862  0968                     u5437:	
 10863  0968  0BF3               	decfsz	??_I2C_Stop,f
 10864  0969  2968               	goto	u5437
 10865                           
 10866                           ;i2c.c: 106: do { LATB1 = 0; } while(0);
 10867  096A  0022               	movlb	2	; select bank2
 10868  096B  108D               	bcf	13,1	;volatile
 10869                           
 10870                           ;i2c.c: 107: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10871  096C  3003               	movlw	3
 10872  096D  00F3               	movwf	??_I2C_Stop
 10873  096E                     u5447:	
 10874  096E  0BF3               	decfsz	??_I2C_Stop,f
 10875  096F  296E               	goto	u5447
 10876                           
 10877                           ;i2c.c: 108: do { LATB0 = 1; } while(0);
 10878  0970  0022               	movlb	2	; select bank2
 10879  0971  140D               	bsf	13,0	;volatile
 10880                           
 10881                           ;i2c.c: 109: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10882  0972  3003               	movlw	3
 10883  0973  00F3               	movwf	??_I2C_Stop
 10884  0974                     u5457:	
 10885  0974  0BF3               	decfsz	??_I2C_Stop,f
 10886  0975  2974               	goto	u5457
 10887                           
 10888                           ;i2c.c: 110: do { LATB1 = 1; } while(0);
 10889  0976  0022               	movlb	2	; select bank2
 10890  0977  148D               	bsf	13,1	;volatile
 10891                           
 10892                           ;i2c.c: 111: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10893  0978  3003               	movlw	3
 10894  0979  00F3               	movwf	??_I2C_Stop
 10895  097A                     u5467:	
 10896  097A  0BF3               	decfsz	??_I2C_Stop,f
 10897  097B  297A               	goto	u5467
 10898  097C  0008               	return
 10899  097D                     __end_of_I2C_Stop:	
 10900                           
 10901                           	psect	text60
 10902  094B                     __ptext60:	
 10903 ;; *************** function _I2C_Start *****************
 10904 ;; Defined at:
 10905 ;;		line 16 in file "mcc_generated_files/i2c.c"
 10906 ;; Parameters:    Size  Location     Type
 10907 ;;		None
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;		None
 10910 ;; Return value:  Size  Location     Type
 10911 ;;                  1    wreg      void 
 10912 ;; Registers used:
 10913 ;;		wreg
 10914 ;; Tracked objects:
 10915 ;;		On entry : 0/0
 10916 ;;		On exit  : 0/0
 10917 ;;		Unchanged: 0/0
 10918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;Total ram usage:        1 bytes
 10924 ;; Hardware stack levels used:    1
 10925 ;; Hardware stack levels required when called:    3
 10926 ;; This function calls:
 10927 ;;		Nothing
 10928 ;; This function is called by:
 10929 ;;		_I2C_Read_Buffer
 10930 ;;		_I2C_Send_Buffer
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           
 10935                           ;psect for function _I2C_Start
 10936  094B                     _I2C_Start:	
 10937                           
 10938                           ;incstack = 0
 10939                           ; Regs used in _I2C_Start: [wreg]
 10940                           ;i2c.c: 18: do { LATB1 = 1; } while(0);
 10941  094B  0022               	movlb	2	; select bank2
 10942  094C  148D               	bsf	13,1	;volatile
 10943                           
 10944                           ;i2c.c: 19: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10945  094D  3003               	movlw	3
 10946  094E  00F3               	movwf	??_I2C_Start
 10947  094F                     u5477:	
 10948  094F  0BF3               	decfsz	??_I2C_Start,f
 10949  0950  294F               	goto	u5477
 10950                           
 10951                           ;i2c.c: 20: do { LATB0 = 1; } while(0);
 10952  0951  0022               	movlb	2	; select bank2
 10953  0952  140D               	bsf	13,0	;volatile
 10954                           
 10955                           ;i2c.c: 21: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10956  0953  3003               	movlw	3
 10957  0954  00F3               	movwf	??_I2C_Start
 10958  0955                     u5487:	
 10959  0955  0BF3               	decfsz	??_I2C_Start,f
 10960  0956  2955               	goto	u5487
 10961                           
 10962                           ;i2c.c: 22: do { LATB1 = 0; } while(0);
 10963  0957  0022               	movlb	2	; select bank2
 10964  0958  108D               	bcf	13,1	;volatile
 10965                           
 10966                           ;i2c.c: 23: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10967  0959  3003               	movlw	3
 10968  095A  00F3               	movwf	??_I2C_Start
 10969  095B                     u5497:	
 10970  095B  0BF3               	decfsz	??_I2C_Start,f
 10971  095C  295B               	goto	u5497
 10972                           
 10973                           ;i2c.c: 24: do { LATB0 = 0; } while(0);
 10974  095D  0022               	movlb	2	; select bank2
 10975  095E  100D               	bcf	13,0	;volatile
 10976                           
 10977                           ;i2c.c: 25: _delay((unsigned long)((10)*(4000000/4000000.0)));
 10978  095F  3003               	movlw	3
 10979  0960  00F3               	movwf	??_I2C_Start
 10980  0961                     u5507:	
 10981  0961  0BF3               	decfsz	??_I2C_Start,f
 10982  0962  2961               	goto	u5507
 10983  0963  0008               	return
 10984  0964                     __end_of_I2C_Start:	
 10985                           
 10986                           	psect	text61
 10987  0DF6                     __ptext61:	
 10988 ;; *************** function _I2C_Send_Byte *****************
 10989 ;; Defined at:
 10990 ;;		line 34 in file "mcc_generated_files/i2c.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;  Data            1    wreg     unsigned char 
 10993 ;; Auto vars:     Size  Location     Type
 10994 ;;  Data            1    4[COMMON] unsigned char 
 10995 ;;  i               1    5[COMMON] unsigned char 
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      unsigned char 
 10998 ;; Registers used:
 10999 ;;		wreg, status,2, status,0
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11007 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;Total ram usage:        3 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    3
 11012 ;; This function calls:
 11013 ;;		Nothing
 11014 ;; This function is called by:
 11015 ;;		_I2C_Read_Buffer
 11016 ;;		_I2C_Send_Buffer
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           
 11021                           ;psect for function _I2C_Send_Byte
 11022  0DF6                     _I2C_Send_Byte:	
 11023                           
 11024                           ;incstack = 0
 11025                           ; Regs used in _I2C_Send_Byte: [wreg+status,2+status,0]
 11026                           ;I2C_Send_Byte@Data stored from wreg
 11027  0DF6  00F4               	movwf	I2C_Send_Byte@Data
 11028                           
 11029                           ;i2c.c: 36: unsigned char i;
 11030                           ;i2c.c: 37: for(i=0;i<8;i++)
 11031  0DF7  01F5               	clrf	I2C_Send_Byte@i
 11032  0DF8  3008               	movlw	8
 11033  0DF9  0275               	subwf	I2C_Send_Byte@i,w
 11034  0DFA  1803               	btfsc	3,0
 11035  0DFB  2E1D               	goto	l744
 11036  0DFC                     l732:	
 11037                           
 11038                           ;i2c.c: 38: {
 11039                           ;i2c.c: 39: if(Data&0x80)
 11040  0DFC  1FF4               	btfss	I2C_Send_Byte@Data,7
 11041  0DFD  2E01               	goto	l738
 11042                           
 11043                           ;i2c.c: 40: do { LATB1 = 1; } while(0);
 11044  0DFE  0022               	movlb	2	; select bank2
 11045  0DFF  148D               	bsf	13,1	;volatile
 11046  0E00  2E03               	goto	l4425
 11047  0E01                     l738:	
 11048                           ;i2c.c: 41: else
 11049                           ;i2c.c: 42: do { LATB1 = 0; } while(0);
 11050                           
 11051  0E01  0022               	movlb	2	; select bank2
 11052  0E02  108D               	bcf	13,1	;volatile
 11053  0E03                     l4425:	
 11054                           
 11055                           ;i2c.c: 43: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11056  0E03  3003               	movlw	3
 11057  0E04  00F3               	movwf	??_I2C_Send_Byte
 11058  0E05                     u5517:	
 11059  0E05  0BF3               	decfsz	??_I2C_Send_Byte,f
 11060  0E06  2E05               	goto	u5517
 11061                           
 11062                           ;i2c.c: 44: do { LATB0 = 1; } while(0);
 11063  0E07  0022               	movlb	2	; select bank2
 11064  0E08  140D               	bsf	13,0	;volatile
 11065                           
 11066                           ;i2c.c: 45: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11067  0E09  3003               	movlw	3
 11068  0E0A  00F3               	movwf	??_I2C_Send_Byte
 11069  0E0B                     u5527:	
 11070  0E0B  0BF3               	decfsz	??_I2C_Send_Byte,f
 11071  0E0C  2E0B               	goto	u5527
 11072                           
 11073                           ;i2c.c: 46: Data<<=1;
 11074  0E0D  1003               	clrc
 11075  0E0E  0DF4               	rlf	I2C_Send_Byte@Data,f
 11076                           
 11077                           ;i2c.c: 47: do { LATB0 = 0; } while(0);
 11078  0E0F  0022               	movlb	2	; select bank2
 11079  0E10  100D               	bcf	13,0	;volatile
 11080                           
 11081                           ;i2c.c: 48: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11082  0E11  3003               	movlw	3
 11083  0E12  00F3               	movwf	??_I2C_Send_Byte
 11084  0E13                     u5537:	
 11085  0E13  0BF3               	decfsz	??_I2C_Send_Byte,f
 11086  0E14  2E13               	goto	u5537
 11087  0E15  3001               	movlw	1
 11088  0E16  00F3               	movwf	??_I2C_Send_Byte
 11089  0E17  0873               	movf	??_I2C_Send_Byte,w
 11090  0E18  07F5               	addwf	I2C_Send_Byte@i,f
 11091  0E19  3008               	movlw	8
 11092  0E1A  0275               	subwf	I2C_Send_Byte@i,w
 11093  0E1B  1C03               	skipc
 11094  0E1C  2DFC               	goto	l732
 11095  0E1D                     l744:	
 11096                           ;i2c.c: 49: }
 11097                           ;i2c.c: 50: do { LATB1 = 1; } while(0);
 11098                           
 11099  0E1D  0022               	movlb	2	; select bank2
 11100  0E1E  148D               	bsf	13,1	;volatile
 11101                           
 11102                           ;i2c.c: 51: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11103  0E1F  3003               	movlw	3
 11104  0E20  00F3               	movwf	??_I2C_Send_Byte
 11105  0E21                     u5547:	
 11106  0E21  0BF3               	decfsz	??_I2C_Send_Byte,f
 11107  0E22  2E21               	goto	u5547
 11108                           
 11109                           ;i2c.c: 52: do { LATB0 = 1; } while(0);
 11110  0E23  0022               	movlb	2	; select bank2
 11111  0E24  140D               	bsf	13,0	;volatile
 11112                           
 11113                           ;i2c.c: 53: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11114  0E25  3003               	movlw	3
 11115  0E26  00F3               	movwf	??_I2C_Send_Byte
 11116  0E27                     u5557:	
 11117  0E27  0BF3               	decfsz	??_I2C_Send_Byte,f
 11118  0E28  2E27               	goto	u5557
 11119                           
 11120                           ;i2c.c: 54: do { TRISB1 = 1; } while(0);
 11121  0E29  0021               	movlb	1	; select bank1
 11122  0E2A  148D               	bsf	13,1	;volatile
 11123                           
 11124                           ;i2c.c: 55: if(RB1)
 11125  0E2B  0020               	movlb	0	; select bank0
 11126  0E2C  1C8D               	btfss	13,1	;volatile
 11127  0E2D  2E32               	goto	l754
 11128                           
 11129                           ;i2c.c: 56: {
 11130                           ;i2c.c: 57: do { TRISB1 = 0; } while(0);
 11131  0E2E  0021               	movlb	1	; select bank1
 11132  0E2F  108D               	bcf	13,1	;volatile
 11133                           
 11134                           ;i2c.c: 58: return 0x01;
 11135  0E30  3001               	movlw	1
 11136  0E31  0008               	return
 11137  0E32                     l754:	
 11138                           ;i2c.c: 59: }
 11139                           ;i2c.c: 60: do { TRISB1 = 0; } while(0);
 11140                           
 11141  0E32  0021               	movlb	1	; select bank1
 11142  0E33  108D               	bcf	13,1	;volatile
 11143                           
 11144                           ;i2c.c: 61: do { LATB0 = 0; } while(0);
 11145  0E34  0022               	movlb	2	; select bank2
 11146  0E35  100D               	bcf	13,0	;volatile
 11147                           
 11148                           ;i2c.c: 62: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11149  0E36  3003               	movlw	3
 11150  0E37  00F3               	movwf	??_I2C_Send_Byte
 11151  0E38                     u5567:	
 11152  0E38  0BF3               	decfsz	??_I2C_Send_Byte,f
 11153  0E39  2E38               	goto	u5567
 11154                           
 11155                           ;i2c.c: 63: do { LATB1 = 0; } while(0);
 11156  0E3A  0022               	movlb	2	; select bank2
 11157  0E3B  108D               	bcf	13,1	;volatile
 11158                           
 11159                           ;i2c.c: 64: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11160  0E3C  3003               	movlw	3
 11161  0E3D  00F3               	movwf	??_I2C_Send_Byte
 11162  0E3E                     u5577:	
 11163  0E3E  0BF3               	decfsz	??_I2C_Send_Byte,f
 11164  0E3F  2E3E               	goto	u5577
 11165                           
 11166                           ;i2c.c: 65: return 0x00;
 11167  0E40  3000               	movlw	0
 11168  0E41  0008               	return
 11169  0E42                     __end_of_I2C_Send_Byte:	
 11170                           
 11171                           	psect	text62
 11172  091B                     __ptext62:	
 11173 ;; *************** function _ADC_GetConversion *****************
 11174 ;; Defined at:
 11175 ;;		line 106 in file "mcc_generated_files/adc.c"
 11176 ;; Parameters:    Size  Location     Type
 11177 ;;  channel         1    wreg     enum E1850
 11178 ;; Auto vars:     Size  Location     Type
 11179 ;;  channel         1    6[COMMON] enum E1850
 11180 ;; Return value:  Size  Location     Type
 11181 ;;                  2    3[COMMON] unsigned int 
 11182 ;; Registers used:
 11183 ;;		wreg, status,2, status,0
 11184 ;; Tracked objects:
 11185 ;;		On entry : 0/0
 11186 ;;		On exit  : 0/0
 11187 ;;		Unchanged: 0/0
 11188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11189 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;Total ram usage:        4 bytes
 11194 ;; Hardware stack levels used:    1
 11195 ;; Hardware stack levels required when called:    3
 11196 ;; This function calls:
 11197 ;;		Nothing
 11198 ;; This function is called by:
 11199 ;;		_main
 11200 ;; This function uses a non-reentrant model
 11201 ;;
 11202                           
 11203                           
 11204                           ;psect for function _ADC_GetConversion
 11205  091B                     _ADC_GetConversion:	
 11206                           
 11207                           ;incstack = 0
 11208                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 11209                           ;ADC_GetConversion@channel stored from wreg
 11210  091B  00F6               	movwf	ADC_GetConversion@channel
 11211                           
 11212                           ;adc.c: 108: ADCON0bits.CHS = channel;
 11213  091C  0876               	movf	ADC_GetConversion@channel,w
 11214  091D  00F5               	movwf	??_ADC_GetConversion
 11215  091E  0DF5               	rlf	??_ADC_GetConversion,f
 11216  091F  0DF5               	rlf	??_ADC_GetConversion,f
 11217  0920  0021               	movlb	1	; select bank1
 11218  0921  081D               	movf	29,w	;volatile
 11219  0922  0675               	xorwf	??_ADC_GetConversion,w
 11220  0923  3983               	andlw	-125
 11221  0924  0675               	xorwf	??_ADC_GetConversion,w
 11222  0925  009D               	movwf	29	;volatile
 11223                           
 11224                           ;adc.c: 111: ADCON0bits.ADON = 1;
 11225  0926  141D               	bsf	29,0	;volatile
 11226                           
 11227                           ;adc.c: 114: _delay((unsigned long)((5)*(4000000/4000000.0)));
 11228  0927  3200               	nop2	;2 cycle nop
 11229  0928  3200               	nop2	;2 cycle nop
 11230  0929  0000               	nop
 11231                           
 11232                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
 11233  092A  0021               	movlb	1	; select bank1
 11234  092B  149D               	bsf	29,1	;volatile
 11235  092C                     l197:	
 11236                           ;adc.c: 120: while (ADCON0bits.GO_nDONE) {
 11237                           
 11238  092C  189D               	btfsc	29,1	;volatile
 11239  092D  292C               	goto	l197
 11240                           
 11241                           ;adc.c: 121: }
 11242                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
 11243  092E  081C               	movf	28,w	;volatile
 11244  092F  00F4               	movwf	?_ADC_GetConversion+1
 11245  0930  081B               	movf	27,w	;volatile
 11246  0931  00F3               	movwf	?_ADC_GetConversion
 11247  0932  0008               	return
 11248  0933                     __end_of_ADC_GetConversion:	
 11249                           
 11250                           	psect	intentry
 11251  0004                     __pintentry:	
 11252 ;; *************** function _INTERRUPT_InterruptManager *****************
 11253 ;; Defined at:
 11254 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;		None
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;		None
 11259 ;; Return value:  Size  Location     Type
 11260 ;;                  1    wreg      void 
 11261 ;; Registers used:
 11262 ;;		wreg, status,2, status,0, pclath, cstack
 11263 ;; Tracked objects:
 11264 ;;		On entry : 0/0
 11265 ;;		On exit  : 0/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;Total ram usage:        1 bytes
 11273 ;; Hardware stack levels used:    1
 11274 ;; Hardware stack levels required when called:    2
 11275 ;; This function calls:
 11276 ;;		_TMR0_ISR
 11277 ;; This function is called by:
 11278 ;;		Interrupt level 1
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282  0004                     _INTERRUPT_InterruptManager:	
 11283                           
 11284                           ;incstack = 0
 11285                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 11286  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11287  0005  3180               	pagesel	$
 11288  0006  0020               	movlb	0	; select bank0
 11289  0007  087F               	movf	127,w
 11290  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
 11291                           
 11292                           ;interrupt_manager.c: 54: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 11293  0009  1A8B               	btfsc	11,5	;volatile
 11294  000A  1D0B               	btfss	11,2	;volatile
 11295  000B  280E               	goto	i1l254
 11296                           
 11297                           ;interrupt_manager.c: 55: TMR0_ISR();
 11298  000C  3189  21B0         	fcall	_TMR0_ISR
 11299  000E                     i1l254:	
 11300                           ;interrupt_manager.c: 56: } else {
 11301                           
 11302  000E  0872               	movf	??_INTERRUPT_InterruptManager,w
 11303  000F  0020               	movlb	0	; select bank0
 11304  0010  00FF               	movwf	127
 11305  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11306  0012  0009               	retfie
 11307  0013                     __end_of_INTERRUPT_InterruptManager:	
 11308                           
 11309                           	psect	text64
 11310  09B0                     __ptext64:	
 11311 ;; *************** function _TMR0_ISR *****************
 11312 ;; Defined at:
 11313 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;		None
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;		None
 11318 ;; Return value:  Size  Location     Type
 11319 ;;                  1    wreg      void 
 11320 ;; Registers used:
 11321 ;;		wreg, status,2, status,0, pclath, cstack
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;Total ram usage:        1 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; Hardware stack levels required when called:    1
 11334 ;; This function calls:
 11335 ;;		_TMR0_CallBack
 11336 ;; This function is called by:
 11337 ;;		_INTERRUPT_InterruptManager
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           
 11342                           ;psect for function _TMR0_ISR
 11343  09B0                     _TMR0_ISR:	
 11344                           
 11345                           ;tmr0.c: 104: static volatile unsigned int CountCallBack = 0;
 11346                           ;tmr0.c: 107: INTCONbits.TMR0IF = 0;
 11347                           
 11348                           ;incstack = 0
 11349                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11350  09B0  110B               	bcf	11,2	;volatile
 11351                           
 11352                           ;tmr0.c: 109: TMR0 = timer0ReloadVal;
 11353  09B1  0021               	movlb	1	; select bank1
 11354  09B2  086F               	movf	_timer0ReloadVal^(0+128),w	;volatile
 11355  09B3  0020               	movlb	0	; select bank0
 11356  09B4  0095               	movwf	21	;volatile
 11357                           
 11358                           ;tmr0.c: 111: MAX31856Sec++;
 11359  09B5  3001               	movlw	1
 11360  09B6  00F1               	movwf	??_TMR0_ISR
 11361  09B7  0871               	movf	??_TMR0_ISR,w
 11362  09B8  0021               	movlb	1	; select bank1
 11363  09B9  07B9               	addwf	_MAX31856Sec^(0+128),f
 11364                           
 11365                           ;tmr0.c: 114: if (++CountCallBack >= 100) {
 11366  09BA  3001               	movlw	1
 11367  09BB  07AC               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
 11368  09BC  3000               	movlw	0
 11369  09BD  3DAD               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
 11370  09BE  3000               	movlw	0
 11371  09BF  022D               	subwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
 11372  09C0  3064               	movlw	100
 11373  09C1  1903               	skipnz
 11374  09C2  022C               	subwf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
 11375  09C3  1C03               	skipc
 11376  09C4  0008               	return
 11377                           
 11378                           ;tmr0.c: 116: TMR0_CallBack();
 11379  09C5  3188  203F         	fcall	_TMR0_CallBack
 11380                           
 11381                           ;tmr0.c: 119: CountCallBack = 0;
 11382  09C7  0021               	movlb	1	; select bank1
 11383  09C8  01AC               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
 11384  09C9  01AD               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
 11385  09CA  0008               	return
 11386  09CB                     __end_of_TMR0_ISR:	
 11387                           
 11388                           	psect	text65
 11389  083F                     __ptext65:	
 11390 ;; *************** function _TMR0_CallBack *****************
 11391 ;; Defined at:
 11392 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 11393 ;; Parameters:    Size  Location     Type
 11394 ;;		None
 11395 ;; Auto vars:     Size  Location     Type
 11396 ;;		None
 11397 ;; Return value:  Size  Location     Type
 11398 ;;                  1    wreg      void 
 11399 ;; Registers used:
 11400 ;;		wreg, status,2, status,0
 11401 ;; Tracked objects:
 11402 ;;		On entry : 0/0
 11403 ;;		On exit  : 0/0
 11404 ;;		Unchanged: 0/0
 11405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11410 ;;Total ram usage:        1 bytes
 11411 ;; Hardware stack levels used:    1
 11412 ;; This function calls:
 11413 ;;		Nothing
 11414 ;; This function is called by:
 11415 ;;		_TMR0_ISR
 11416 ;; This function uses a non-reentrant model
 11417 ;;
 11418                           
 11419                           
 11420                           ;psect for function _TMR0_CallBack
 11421  083F                     _TMR0_CallBack:	
 11422                           
 11423                           ;tmr0.c: 128: LongPressSec++;
 11424                           
 11425                           ;incstack = 0
 11426                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0]
 11427  083F  3001               	movlw	1
 11428  0840  00F0               	movwf	??_TMR0_CallBack
 11429  0841  0870               	movf	??_TMR0_CallBack,w
 11430  0842  0021               	movlb	1	; select bank1
 11431  0843  07B8               	addwf	_LongPressSec^(0+128),f
 11432  0844  0008               	return
 11433  0845                     __end_of_TMR0_CallBack:	
 11434  007E                     btemp	set	126	;btemp
 11435  007E                     int$flags	set	126
 11436  007E                     wtemp	set	126
 11437  007E                     wtemp0	set	126
 11438  0080                     wtemp1	set	128
 11439  0082                     wtemp2	set	130
 11440  0084                     wtemp3	set	132
 11441  0086                     wtemp4	set	134
 11442  0088                     wtemp5	set	136
 11443  007F                     wtemp6	set	127
 11444  007E                     ttemp	set	126
 11445  007E                     ttemp0	set	126
 11446  0081                     ttemp1	set	129
 11447  0084                     ttemp2	set	132
 11448  0087                     ttemp3	set	135
 11449  007F                     ttemp4	set	127
 11450  007E                     ltemp	set	126
 11451  007E                     ltemp0	set	126
 11452  0082                     ltemp1	set	130
 11453  0086                     ltemp2	set	134
 11454  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    21
    Data        10
    BSS         145
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     69      78
    BANK1            80      0      80
    BANK2            80      5      69
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 7
		 -> rtc_save_ch2(BANK1[7]), rtc_save_ch1(BANK1[7]), 

    memset@p1	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    memset@p	PTR unsigned char  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    Bq32k_Rtc_Read_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    I2C_Send_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Write_Time@temp(COMMON[10]), Bq32k_Time_Init@temp(BANK0[10]), 

    I2C_Read_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Read_Time@temp(BANK0[10]), 

    sp__memset	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    WriteAll_1621@p	PTR unsigned char  size(2) Largest target is 21
		 -> time_Display@num(BANK0[4]), err_Display@num(BANK0[4]), Two_Display@num(BANK0[4]), display_buff(BANK1[4]), 
		 -> Dis_TAB(CODE[21]), 

    maxim_31856_read_nregisters@uch_buff	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 64
		 -> Flash_buff(BANK2[64]), 

    FLASH_WriteWord@ramBuf	PTR unsigned int  size(1) Largest target is 64
		 -> Flash_buff(BANK2[64]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _main->_SendCmd_1621
    _main->_WriteAll_1621
    _Sleep_process->_Step_control
    _Serach_Flash_Head->_Write_Flash_finish
    _SYSTEM_Initialize->_TMR0_Initialize
    _Key_Process->_SendCmd_1621
    _Key_Process->_Write_Flash_finish
    _Key_Process->_Write_Flash_head
    _time_Display->_WriteAll_1621
    _time_Display->___awdiv
    _time_Display->___awmod
    _temperature_display->_maxim_clear_fault_status
    _Calculate_Time->_Write_Flash_finish
    _Calculate_Time->_Write_Flash_head
    _Write_Flash_head->_FLASH_WriteWord
    _Write_Flash_finish->_FLASH_WriteWord
    _Save_Write_word->_FLASH_WriteWord
    _FLASH_WriteWord->_FLASH_ReadWord
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _bcd2bin->___bmul
    _I2C_Read_Buffer->_I2C_Receive_Byte
    _I2C_Read_Buffer->_I2C_Send_Byte
    _maxim_clear_fault_status->_maxim_31856_read_register
    _err_Display->_WriteAll_1621
    _Tc_Display->_WriteAll_1621
    _Tc_Display->___lwmod
    _Tc_Display->_memset
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_start_conversion
    _maxim_start_conversion->_maxim_31856_read_register
    _maxim_31856_write_register->_SPI_Exchange8bit
    _maxim_31856_read_register->_SPI_Exchange8bit
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _Two_Display->_WriteAll_1621
    _WriteAll_1621->_SendBit_1621
    _WriteAll_1621->_SendDataBit_1621
    _SendCmd_1621->_SendBit_1621
    _Bq32k_Time_Init->_I2C_Send_Buffer
    _I2C_Send_Buffer->_I2C_Send_Byte

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_TMR0_ISR
    _TMR0_ISR->_TMR0_CallBack

Critical Paths under _main in BANK0

    _main->_Key_Process
    _Save_process->_Calculate_Time
    _temperature_process->_temperature_display
    _time_Display->_Bq32k_Rtc_Read_Time
    _temperature_display->_tc_temperature_trans
    _tc_temperature_trans->_Calculate_Time
    _Calculate_Time->_Save_Write_time
    _Write_Flash_head->_FLASH_WriteWord
    _Write_Flash_finish->_FLASH_WriteWord
    _Save_Write_time->_Save_Write_word
    _Save_Write_word->_FLASH_WriteWord
    _FLASH_WriteWord->_FLASH_WriteBlock
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _err_Display->_WriteAll_1621
    _Tc_Display->___lwdiv
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_31856_read_nregisters
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _Two_Display->_WriteAll_1621
    _Bq32k_Time_Init->_I2C_Send_Buffer

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  115525
                                             66 BANK0      3     3      0
                                              0 BANK2      5     5      0
                  _ADC_GetConversion
                    _Bq32k_Time_Init
                        _Key_Process
                  _SYSTEM_Initialize
                       _Save_process
                       _SendCmd_1621
                  _Serach_Flash_Head
                      _Sleep_process
                      _WriteAll_1621
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _Sleep_process                                        0     0      0       0
                       _Step_control
 ---------------------------------------------------------------------------------
 (2) _Step_control                                         1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serach_Flash_Head                                    6     6      0    3534
                                             19 BANK0      6     6      0
                     _FLASH_ReadWord
                 _Write_Flash_finish
 ---------------------------------------------------------------------------------
 (1) _Save_process                                         4     4      0   19272
                                             47 BANK0      4     4      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Key_Process                                          6     6      0   51130
                                             60 BANK0      6     6      0
                       _EUSART_Write
                     _FLASH_ReadWord
                           _Key_Scan
                    _Save_Write_time
                       _SendCmd_1621
                    _Set_finish_flag
                     _Set_start_flag
                 _Write_Flash_finish
                   _Write_Flash_head
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _temperature_process                                  0     0      0   38200
                        _Two_Display
              _one_temperature_trans
                _temperature_display
                       _time_Display
 ---------------------------------------------------------------------------------
 (2) _time_Display                                         7     7      0    5147
                                             16 BANK0      7     7      0
                _Bq32k_Rtc_Read_Time
                      _WriteAll_1621
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     895
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     907
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _temperature_display                                  1     1      0   28488
                                             59 BANK0      1     1      0
                         _Tc_Display
                        _err_Display
         _maxim_31856_write_register
           _maxim_clear_fault_status
               _tc_temperature_trans
 ---------------------------------------------------------------------------------
 (3) _tc_temperature_trans                                12    12      0   20051
                                             47 BANK0     12    12      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Calculate_Time                                      22    22      0   14754
                                             25 BANK0     22    22      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_time
                 _Write_Flash_finish
                   _Write_Flash_head
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1368
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_head                                     1     1      0    2904
                                              7 COMMON     1     1      0
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_finish                                   1     1      0    2904
                                              7 COMMON     1     1      0
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Save_Write_time                                      3     3      0    5897
                                             23 BANK0      2     2      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Save_Write_word                                      4     2      2    4429
                                             19 BANK0      4     2      2
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteWord                                     10     5      5    2904
                                              6 COMMON     1     1      0
                                             10 BANK0      9     4      5
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_WriteBlock                                    10     7      3     776
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (7) _FLASH_EraseBlock                                     3     1      2     173
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (6) _FLASH_ReadWord                                       3     1      2     327
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Read_Time                                 13    13      0    1468
                                              3 BANK0     13    13      0
                    _I2C_Read_Buffer
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (4) _bcd2bin                                              4     4      0     275
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     213
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Buffer                                      5     3      2     599
                                              6 COMMON     2     0      2
                                              0 BANK0      3     3      0
                   _I2C_Receive_Byte
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Receive_Byte                                     3     3      0     108
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _maxim_clear_fault_status                             1     1      0    1652
                                              7 COMMON     1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (3) _err_Display                                          5     5      0    1834
                                              5 BANK0      5     5      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _Tc_Display                                           4     4      0    3395
                                              9 BANK0      4     4      0
                      _WriteAll_1621
                            ___lwdiv
                            ___lwmod
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     324
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     540
                                              3 COMMON     5     1      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     703
                                              1 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _one_temperature_trans                                2     2      0    2700
                                              8 BANK0      2     2      0
        _maxim_31856_read_nregisters
             _maxim_start_conversion
 ---------------------------------------------------------------------------------
 (3) _maxim_start_conversion                               2     2      0    1683
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_write_register                           2     1      1    1556
                                              4 COMMON     2     1      1
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_read_register                            3     3      0      96
                                              4 COMMON     3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _maxim_31856_read_nregisters                          5     3      2    1017
                                              3 BANK0      5     3      2
                   _SPI_Exchange8bit
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     739
                                              4 COMMON     4     2      2
                                              0 BANK0      3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Two_Display                                          6     6      0    1865
                                              5 BANK0      6     6      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _WriteAll_1621                                        6     3      3    1723
                                              7 COMMON     1     1      0
                                              0 BANK0      5     2      3
                       _SendBit_1621
                   _SendDataBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendDataBit_1621                                     4     3      1     256
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _Set_start_flag                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_finish_flag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendCmd_1621                                         2     2      0     595
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
                       _SendBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendBit_1621                                         4     3      1     564
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _Key_Scan                                             3     3      0      40
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Bq32k_Time_Init                                     19    19      0     713
                                              5 BANK0     12    12      0
                    _I2C_Send_Buffer
 ---------------------------------------------------------------------------------
 (2) _I2C_Send_Buffer                                      7     5      2     676
                                              6 COMMON     2     0      2
                                              0 BANK0      5     5      0
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_Byte                                        3     3      0     102
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      31
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0       0
                                              2 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            1     1      0       0
                                              1 COMMON     1     1      0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _Bq32k_Time_Init
     _I2C_Send_Buffer
       _I2C_Send_Byte
       _I2C_Start
       _I2C_Stop
   _Key_Process
     _EUSART_Write
     _FLASH_ReadWord
     _Key_Scan
     _Save_Write_time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_word
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
     _SendCmd_1621
       _SendBit_1621
     _Set_finish_flag
     _Set_start_flag
     _Write_Flash_finish
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _Write_Flash_head
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _temperature_process
       _Two_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _one_temperature_trans
         _maxim_31856_read_nregisters
           _SPI_Exchange8bit
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
         _maxim_start_conversion
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
       _temperature_display
         _Tc_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
           _memset
         _err_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
         _maxim_31856_write_register
           _SPI_Exchange8bit
         _maxim_clear_fault_status
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
         _tc_temperature_trans
           _Calculate_Time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_time
               _Bq32k_Rtc_Read_Time
                 _I2C_Read_Buffer
                   _I2C_Receive_Byte
                   _I2C_Send_Byte
                   _I2C_Start
                   _I2C_Stop
                 _bcd2bin
                   ___bmul
               _Save_Write_word
                 _FLASH_WriteWord
                   _FLASH_ReadWord
                   _FLASH_WriteBlock
                     _FLASH_EraseBlock
             _Write_Flash_finish
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
             _Write_Flash_head
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
             ___wmul
           _Save_Write_word
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
       _time_Display
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___awdiv
         ___awmod
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR0_Initialize
   _Save_process
     _Calculate_Time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_time
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _Save_Write_word
           _FLASH_WriteWord
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
       _Write_Flash_finish
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
       _Write_Flash_head
         _FLASH_WriteWord
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
       ___wmul
     _Save_Write_word
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
   _SendCmd_1621
     _SendBit_1621
   _Serach_Flash_Head
     _FLASH_ReadWord
     _Write_Flash_finish
       _FLASH_WriteWord
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
   _Sleep_process
     _Step_control
   _WriteAll_1621
     _SendBit_1621
     _SendDataBit_1621
   _temperature_process
     _Two_Display
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
     _one_temperature_trans
       _maxim_31856_read_nregisters
         _SPI_Exchange8bit
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _maxim_start_conversion
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
     _temperature_display
       _Tc_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         _memset
       _err_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _maxim_31856_write_register
         _SPI_Exchange8bit
       _maxim_clear_fault_status
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
       _tc_temperature_trans
         _Calculate_Time
           _Bq32k_Rtc_Read_Time
             _I2C_Read_Buffer
               _I2C_Receive_Byte
               _I2C_Send_Byte
               _I2C_Start
               _I2C_Stop
             _bcd2bin
               ___bmul
           _Save_Write_time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_word
               _FLASH_WriteWord
                 _FLASH_ReadWord
                 _FLASH_WriteBlock
                   _FLASH_EraseBlock
           _Write_Flash_finish
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
           _Write_Flash_head
             _FLASH_WriteWord
               _FLASH_ReadWord
               _FLASH_WriteBlock
                 _FLASH_EraseBlock
           ___wmul
         _Save_Write_word
           _FLASH_WriteWord
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
     _time_Display
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
       ___awdiv
       ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     45      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      5      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      EE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      EE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jul 15 11:13:08 2016

                        __end_of_I2C_Send_Buffer 07FF                                   _SPI_Initialize 084B  
                     ?_maxim_31856_read_register 0070    maxim_31856_read_register@uch_register_address 0075  
                                 ___bmul@product 0075                               __size_of_I2C_Start 0019  
                                    __CFG_CP$OFF 0000                                ?_Write_Flash_head 0070  
                                             l71 0872                                     ___awdiv@sign 0021  
                        ?_SPI_Exchange8bitBuffer 0074                           __end_of_FVR_Initialize 0835  
                            ___wmul@multiplicand 0075                                 ?_Save_Write_time 0070  
                               ?_Save_Write_word 0033                                  _timer0ReloadVal 00EF  
                             ??_Write_Flash_head 0077                             Bq32k_Rtc_Read_Time@p 002F  
                                            l129 085E                                              l166 07BB  
                                            l371 03CE                                              l540 0202  
                                            l532 01C7                                              l380 03FE  
                                            l197 092C                                              l517 00E4  
                                            l373 03D0                                              l390 046B  
                                            l535 01CF                                              l519 0191  
                                            l632 0A28                                              l544 0DB4  
                                            l545 0DB3                                              l537 01FA  
                                            l529 0175                                              l634 0A2A  
                                            l650 0A48                                              l732 0DFC  
                                            l744 0E1D                                              l648 0A46  
                                            l904 05CB                                              l754 0E32  
                                            l738 0E01                                              l908 05D9  
                                            l677 0C3F                                              l773 0B14  
                                            l589 0CE3                                              l863 0AFA  
                                            l687 04CA                                              l688 04F1  
                                            l890 0593                                              l891 0592  
                                            l868 0AF0                                              l869 0AF4  
                                            l878 0554                                              l896 0597  
                                            _RB1 0069                                              _RB3 006B  
                                            _RB5 006D                                              _RA7 0067  
                                   ?_err_Display 0070                                     ___awmod@sign 0021  
                             _Write_Flash_finish 0B7F                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                               ?_FLASH_WriteWord 002A                           _maxim_start_conversion 0996  
                 FLASH_WriteBlock@flashWordArray 0022                                     __CFG_LVP$OFF 0000  
                                           l1013 0F89                                             l1105 0A63  
                                           l1009 0F58                                             l1088 0A8B  
                                           l5001 0511                                             l5003 0520  
                                           l5111 0DC4                                             l5007 052A  
                                           l5033 0EA9                                             l5107 0DBC  
                                           l5051 0ECF                                             l5043 0EB1  
                                           l5027 0E9E                                             l5141 0D05  
                                           l5133 0CF5                                             l5045 0EBD  
                                           l5303 0AE2                                             l5055 0ED8  
                                           l5071 0D71                                             l4425 0E03  
                                           l5145 0D0D                                             l5137 0CFD  
                                           l5233 0CAE                                             l5401 0555  
                                           l4515 0D50                                             l5059 0EE0  
                                           l5083 0D7E                                             l5075 0D78  
                                           l4621 0A3D                                             l4509 0D32  
                                           l5085 0D8A                                             l5093 0D9F  
                                           l5261 0CCE                                             l5245 0CBB  
                                           l5405 055D                                             l5325 0AA3  
                                           l4383 077E                                             l5247 0CBE  
                                           l5423 05A0                                             l5327 0AA4  
                                           l4609 0A1F                                             l5097 0DA7  
                                           l5089 0D96                                             l5265 0CD1  
                                           l5409 056A                                             l5291 07E2  
                                           l4475 0B24                                             l4395 07A6  
                                           l4643 0A5C                                             l5259 0CCB  
                                           l5443 05BC                                             l5419 0598  
                                           l5371 0F0E                                             l5293 07FC  
                                           l4813 0B71                                             l4557 069A  
                                           l4493 08D1                                             l4741 02E9  
                                           l4901 0101                                             l5453 05D0  
                                           l5533 03ED                                             l4663 0E4B  
                                           l4671 0E74                                             l4807 0B59  
                                           l4559 06C5                                             l4751 02F8  
                                           l5447 05C3                                             l5527 03D8  
                                           l4681 0E7C                                             l4673 0E79  
                                           l4809 0B65                                             l4817 0B7A  
                                           l4489 08CB                                             l4585 0C95  
                                           l4761 03A7                                             l4737 02E0  
                                           l5537 0400                                             l4667 0E5A  
                                           l4771 09EC                                             l5475 0F6B  
                                           l5387 0F31                                             l5379 0F20  
                                           l4693 0C25                                             l4669 0E6F  
                                           l4933 0150                                             l4925 012D  
                                           l5389 0F33                                             l5581 0444  
                                           l4791 0C69                                             l4783 0C4B  
                                           l4951 018D                                             l4847 006C  
                                           l4785 0C57                                             l4929 013C  
                                           l4881 00BF                                             l4873 009C  
                                           l5593 046D                                             l4795 0C72  
                                           l5499 0A93                                             l5595 0470  
                                           l4877 00AB                                             l4993 0492  
                                           l4969 01D8                                             l4995 04AD  
                                           l4899 00FC                                             l4997 0506  
                            ?_Write_Flash_finish 0070                                             _LATA 010C  
                                           _LATB 010D                                             _LATC 010E  
                                           u4200 0083                                             u4115 0B5C  
                                           u4300 0113                                             u4045 0C4E  
                                           u4310 0114                                             u4135 0B6B  
                                           u4065 0C58                                             u4145 0B72  
                                           u4075 0C62                                             u4085 0C6A  
                                           u4190 0082                                             u4255 00B1  
                                           u4365 0142                                             u5317 03C1  
                                           u5407 0A4B                                             u5327 06AD  
                                           u3575 076A                                             u4535 0EB4  
                                           u5417 0A2D                                             u5337 06B4  
                                           u5507 0961                                             u5427 0AE6  
                                           u5347 06BB                                             u4555 0EBE  
                                           u4635 0D81                                             u5517 0E05  
                                           u5437 0968                                             u5357 06D4  
                                           u3765 08E6                                             u4565 0EC8  
                                           u5527 0E0B                                             u5447 096E  
                                           u5367 06DB                                             u4575 0ED0  
                                           u4655 0D90                                             u5537 0E13  
                                           u5457 0974                                             u5377 06E2  
                                           u3865 0A64                                             u4665 0D97  
                                           u4930 09D6                                             u5547 0E21  
                                           u5467 097A                                             u5387 0B0A  
                                           u3875 0A69                                             u5557 0E27  
                                           u5477 094F                                             u5397 0B1A  
                                           u5567 0E38                                             u5487 0955  
                                           u5577 0E3E                                             u5497 095B  
                                           _TMR0 0015                                             _WPUB 020D  
                                           _WPUE 0210                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                          __size_of_Set_start_flag 0006  
                         __size_of_WriteAll_1621 0034                                    ??_Key_Process 005C  
                                           _main 03A9                                             fsr0h 0005  
                                           fsr1h 0007                                             fsr0l 0004  
                                           indf0 0000                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                               __end_of_I2C_Stop 097D                                ?_FLASH_WriteBlock 0020  
                                  __CFG_BOREN$ON 0000                                             ltemp 007E  
                            SendCmd_1621@command 0020                                             start 0013  
                                           ttemp 007E                                             wtemp 007E  
                                __end_of_Dis_TAB 1015                           __end_of_SPI_Initialize 0851  
                             ??_FLASH_WriteBlock 0023                                 ?_I2C_Read_Buffer 0076  
                              ___bmul@multiplier 0076                                    __CFG_MCLRE$ON 0000  
                                   main@bat_data 0163                   __end_of_SPI_Exchange8bitBuffer 0E93  
                                time_Display@num 0033                             ??_Write_Flash_finish 0077  
                        __end_of_TMR0_Initialize 08B8                                  ?_FVR_Initialize 0070  
                                  ?_EUSART_Write 0070                   __size_of_OSCILLATOR_Initialize 0005  
                  __end_of_OSCILLATOR_Initialize 083F                                  __end_of_bcd2bin 08EF  
                                          ?_main 0070                                  __end_of___awdiv 0EE5  
                                __end_of___awmod 0DAC                                  ___awdiv@divisor 0073  
                                          _LATA0 0860                                            _LATA1 0861  
                                          _LATB0 0868                                            _LATA2 0862  
                                          _LATB1 0869                                            _LATA3 0863  
                                          _LATC0 0870                                            _LATA4 0864  
                                          _LATC1 0871                                            _LATA5 0865  
                                          _LATC2 0872                                            _LATA6 0866  
                                __end_of___lwdiv 0C77                                            i1l254 000E  
                                __end_of___lwmod 0B7F                                  ___awdiv@counter 0020  
                                          u401m0 03A0                                            _RCREG 0199  
                                          _RCSTA 019D                                       _Flash_buff 0120  
                                          u383m0 06F4                                            u384m0 0701  
                                          u398m0 02D9                          ??_one_temperature_trans 0028  
                              ?_SendDataBit_1621 0073                                            _TRISA 008C  
                                          _TRISB 008D                                            _TRISC 008E  
                                          _TXREG 019A                                            _TXSTA 019E  
                               __end_of_TMR0_ISR 09CB                               ??_SendDataBit_1621 0074  
                   __end_of_tc_temperature_trans 020B                                            main@i 0162  
                              __end_of_I2C_Start 0964                              _Bq32k_Rtc_Read_Time 0F9C  
                                Tc_Display@count 002A                                WriteAll_1621@addr 0023  
                                          ltemp0 007E                                            ltemp1 0082  
                                          ltemp2 0086                                            ltemp3 0080  
                                          ttemp0 007E                                            ttemp1 0081  
                                          ttemp2 0084                                            ttemp3 0087  
                                          ttemp4 007F                                            status 0003  
                                          wtemp0 007E                                            wtemp1 0080  
                                          wtemp2 0082                                            wtemp3 0084  
                                          wtemp4 0086                                            wtemp5 0088  
                                          wtemp6 007F                           __size_of_I2C_Send_Byte 004C  
                                _Cur_temperature 00B0                                       _Tc_Display 047D  
                                ?_SPI_Initialize 0070                      __end_of_temperature_display 0D21  
                                __initialization 0015                              __end_of_Key_Process 05DA  
                               ?_I2C_Send_Buffer 0076                                     __end_of_main 047D  
                                 WriteAll_1621@i 0024                                   WriteAll_1621@p 0020  
                               __end_of_Key_Scan 0AFC                                    main@data_temp 0160  
                                 ??_EUSART_Write 0073                             ?_Bq32k_Rtc_Read_Time 0070  
                    __end_of_temperature_process 0CE4                            __end_of_Sleep_process 0A96  
                                 __CFG_LPBOR$OFF 0000     maxim_31856_write_register@uch_register_value 0074  
                    ?_INTERRUPT_InterruptManager 0070                                    _WriteAll_1621 0C0E  
                                         ??_main 0062                                     Key_Process@i 0060  
 maxim_31856_write_register@uch_register_address 0075                          __size_of_FLASH_ReadWord 0019  
                        Bq32k_Rtc_Read_Time@temp 0025                                I2C_Receive_Byte@i 0075  
                       __end_of_SPI_Exchange8bit 0876                                           _ADCON0 009D  
                                         _ADCON1 009E                        FLASH_WriteBlock@writeAddr 0020  
                                         _ADRESH 009C                                           _ADRESL 009B  
                               ___awdiv@dividend 0075                                           _APFCON 011D  
                                         _ANSELA 018C                                           _ANSELB 018D  
                                         _ANSELC 018E                                           _FVRCON 0117  
                                         _PMADRH 0192                                           _PMADRL 0191  
                                         _PMDATH 0194                                           _PMDATL 0193  
                              _temperature_value 0065                                           _PMCON2 0196  
                      __size_of_FLASH_EraseBlock 001C                                           _OSCCON 0099  
                                         _SPBRGH 019C                                           _SPBRGL 019B  
                       _Cur_temperature_time_ch1 00B6                         _Cur_temperature_time_ch2 00B7  
                                         _WDTPS0 04B9                                           _WDTPS1 04BA  
                                         _WDTPS2 04BB                                           _WDTPS3 04BC  
                                         _WDTPS4 04BD                                           _TRISB1 0469  
                                         _TRISB3 046B                                           _SSPBUF 0211  
                                  ?_SendCmd_1621 0070                                           _SWDTEN 04B8  
                                  ?_SendBit_1621 0073                                   __CFG_PWRTE$OFF 0000  
                                _Bq32k_Time_Init 09CB                                 SendBit_1621@data 0075  
                                         ___bmul 08C9                                        ??_bcd2bin 0020  
                                         ___wmul 0A59                    FLASH_WriteWord@blockStartAddr 0030  
                                      ??___awdiv 0077                                   __CFG_STVREN$ON 0000  
                                      ??___awmod 0077                            ??_Bq32k_Rtc_Read_Time 0023  
                                      ??___lwdiv 0025                                        ??___lwmod 0077  
                   ?_maxim_31856_read_nregisters 0023                              FLASH_WriteWord@word 002D  
                                 ?_WriteAll_1621 0020                                 ?_TMR0_Initialize 0070  
                                         _memset 09E6                                ?_I2C_Receive_Byte 0070  
                               ___awdiv@quotient 0022                                  ___awmod@divisor 0073  
                                         _uch_sr 00C3                                  ___awmod@counter 0020  
                                         _rtc_tm 00DA                                  _Set_finish_flag 0835  
                                  _I2C_Send_Byte 0DF6                               ??_I2C_Receive_Byte 0073  
                        FLASH_ReadWord@flashAddr 0073                                        ?_I2C_Stop 0070  
                   ??_maxim_31856_write_register 0075                            I2C_Read_Buffer@Length 0077  
                       ADC_GetConversion@channel 0076                             __size_of_err_Display 002C  
                          __end_of_TMR0_CallBack 0845                                       bcd2bin@val 0077  
                     ??_maxim_clear_fault_status 0077                                   _Set_start_flag 0845  
                              _SYSTEM_Initialize 08EF                                   ??_SendCmd_1621 0077  
                        __end_of__initialization 003B                                   ??_SendBit_1621 0074  
                                    _Key_Process 0545                               ?_SYSTEM_Initialize 0070  
                                    ?_Tc_Display 0070                               Calculate_Time@temp 0043  
                            ___bmul@multiplicand 0073                                time_Display@F2129 00A8  
           tc_temperature_trans@temperature_back 0053                                   __pcstackCOMMON 0070  
           tc_temperature_trans@temperature_temp 0059                                     __pidataBANK1 0876  
                            ??_SYSTEM_Initialize 0074                             _tc_temperature_trans 003F  
                                      ?_TMR0_ISR 0070                      ??_maxim_31856_read_register 0074  
                               FLASH_WriteWord@i 0032              __size_of_maxim_31856_write_register 000D  
                                  ?_Save_process 0070                                   ?_I2C_Send_Byte 0070  
                  ??_maxim_31856_read_nregisters 0025                          ?_maxim_start_conversion 0070  
                                 _OPTION_REGbits 0095                            TMR0_ISR@CountCallBack 00AC  
                                _temperature_int 00B2                                       ??_I2C_Stop 0073  
                                  ??_Two_Display 0025                      FLASH_WriteBlock@GIEBitValue 0028  
                               Two_Display@F2123 00A0                             I2C_Receive_Byte@Data 0074  
                         __end_of_Set_start_flag 084B                              I2C_Read_Buffer@Flag 0022  
                      __end_of_SYSTEM_Initialize 0904                        __size_of_Write_Flash_head 002F  
                            I2C_Read_Buffer@buff 0076                          __end_of_Bq32k_Time_Init 09E6  
                                     __pbssBANK0 0065                                       __pbssBANK1 00A0  
                                     __pbssBANK2 0120                                        ?_Key_Scan 0070  
                           __end_of_EUSART_Write 0865                                  __CFG_VCAPEN$OFF 0000  
                               ??_FVR_Initialize 0073                                       __pmaintext 03A9  
                                        ?___bmul 0073                          __end_of_Set_finish_flag 083A  
                          ?_tc_temperature_trans 0070                                      _Record_flag 006B  
                                ??_WriteAll_1621 0077                                          ?___wmul 0073  
                                     ??_TMR0_ISR 0071                                   ??_Save_process 004F  
                                     __pintentry 0004                                          _BAUDCON 019F  
                                        ?_memset 0073                   __end_of_maxim_start_conversion 09B0  
                      __size_of_FLASH_WriteBlock 006B                          __size_of_ADC_Initialize 0008  
                                 _FLASH_ReadWord 097D                              __size_of_Tc_Display 00C8  
                 __size_of_one_temperature_trans 004A                    __end_of_one_temperature_trans 0DF6  
                                        _OSCSTAT 009A                         __size_of_Save_Write_time 0072  
                                        _SSP1ADD 0212                         __size_of_Save_Write_word 0036  
                      _maxim_31856_read_register 08B8                                  ?_Set_start_flag 0070  
           __size_of_maxim_31856_read_nregisters 0018                                       ??_Key_Scan 0073  
                                        _Dis_TAB 1000                                 _FLASH_EraseBlock 0A01  
                               ??_SPI_Initialize 0073                         __size_of_FLASH_WriteWord 0045  
                        __size_of_Calculate_Time 019E                              __end_of_Two_Display 0C0E  
                      __size_of_SendDataBit_1621 001E                                        _I2C_Start 094B  
maxim_31856_read_nregisters@uch_register_address 0027                                        _CH1_state 00B4  
                                      _CH2_state 00B5                                          _bcd2bin 08DA  
                                __size_of___bmul 0011                                    ?_time_Display 0070  
                                        ___awdiv 0E93                                          ___awmod 0D66  
                                __size_of___wmul 001E                                          ___lwdiv 0C42  
                                        ___lwmod 0B52                                  ??_I2C_Send_Byte 0073  
                    __size_of_Write_Flash_finish 002F                                I2C_Send_Byte@Data 0074  
                         __end_of_FLASH_ReadWord 0996                                  __size_of_memset 001B  
                       __size_of_I2C_Read_Buffer 0078                                          __ptext1 0A77  
                                        __ptext2 0A96                                          __ptext3 0EE5  
                                        __ptext4 0F39                                          __ptext5 08EF  
                                        __ptext6 08A8                                          __ptext7 084B  
                                        __ptext8 0AB7                                          __ptext9 083A  
                           __end_of_SendCmd_1621 091B                             SendDataBit_1621@data 0075  
                           __end_of_SendBit_1621 0A3B               __end_of_maxim_31856_write_register 0898  
                     _maxim_31856_write_register 088B                            _OSCILLATOR_Initialize 083A  
                                 I2C_Send_Byte@i 0075                                 ___awmod@dividend 0075  
                                        _uch_cr0 007A                                          _uch_cr1 00BE  
                       ??_PIN_MANAGER_Initialize 0073                                          _uch_reg 00C4  
               __end_of_maxim_clear_fault_status 08A8                                ?_SPI_Exchange8bit 0070  
                          I2C_Send_Buffer@Length 0077                       __size_of_SYSTEM_Initialize 0015  
                                        clrloop0 0858                             end_of_initialization 003B  
                             ??_SPI_Exchange8bit 0073                             SPI_Exchange8bit@data 0073  
                               ?_Bq32k_Time_Init 0070                                          init_ram 0851  
                                        memset@c 0073                                          memset@n 0075  
                                        memset@p 0021                                          initloop 0852  
                                     ?_I2C_Start 0070                                _EUSART_Initialize 0880  
                         ??_tc_temperature_trans 004F                               ?_EUSART_Initialize 0070  
                                 ??_time_Display 0030                                        _RCSTAbits 019D  
                               ?_Set_finish_flag 0070                            Serach_Flash_Head@data 0035  
                                   __pstringtext 1000                        FLASH_ReadWord@GIEBitValue 0075  
                                     _time_count 006D                                  ?_FLASH_ReadWord 0073  
                   __size_of_temperature_display 003D                              ??_EUSART_Initialize 0073  
                                  ?_Step_control 0070                                     _display_buff 00E1  
                       __size_of_I2C_Send_Buffer 003B                                 __CFG_FOSC$INTOSC 0000  
                   __size_of_temperature_process 0037                            __size_of_EUSART_Write 0008  
                                    _Two_Display 0BDD                                __size_of_I2C_Stop 0019  
                               _Write_Flash_head 0BAE                              Bq32k_Time_Init@temp 0027  
                           __end_of_Save_process 0F9C                        __size_of_I2C_Receive_Byte 002A  
                           Key_Process@gKeyValue 005F                           __size_of_Sleep_process 001F  
                      __end_of_EUSART_Initialize 088B                              Calculate_Time@temp1 0047  
                            Calculate_Time@temp2 004B                                ??_Save_Write_time 0037  
                                   ?_Key_Process 0070                                ??_Save_Write_word 0035  
                       ??_SPI_Exchange8bitBuffer 0020                                     ??_Tc_Display 0029  
                    __end_of_Bq32k_Rtc_Read_Time 1000                                FLASH_WriteBlock@i 0029  
                              ??_FLASH_WriteWord 0076                     tc_temperature_trans@var_time 0057  
      maxim_start_conversion@uch_conversion_mode 0020                                   __end_of___bmul 08DA  
                                 __end_of___wmul 0A77                                     _EUSART_Write 085D  
                              __size_of_TMR0_ISR 001B                                   _ADC_Initialize 0865  
                               _FLASH_WriteBlock 0759                                   ??_Step_control 0073  
                           Key_Process@data_temp 005D                           ?_OSCILLATOR_Initialize 0070  
                                 __end_of_memset 0A01                                   Tc_Display@data 002B  
                               WriteAll_1621@cnt 0022                                    ??_err_Display 0025  
                            start_initialization 0015                         __size_of_TMR0_Initialize 0010  
                             __end_of_Tc_Display 0545                  __size_of_PIN_MANAGER_Initialize 0022  
                              ??_I2C_Read_Buffer 0020                                   Two_Display@num 0026  
                                 _Calculate_Time 020B                                 _SendDataBit_1621 0A3B  
                                    ??_I2C_Start 0073                                __size_of_Key_Scan 0023  
                               _temperature_sign 00BA               __size_of_maxim_31856_read_register 0011  
                                SendBit_1621@cnt 0073                                         ??___bmul 0074  
              __size_of_maxim_clear_fault_status 0010                        ?_maxim_clear_fault_status 0070  
                                       ??___wmul 0077                            __size_of_SendCmd_1621 0017  
                          __size_of_SendBit_1621 001E                              I2C_Send_Buffer@Flag 0024  
                         __size_of_TMR0_CallBack 0006                           __end_of_ADC_Initialize 086D  
                                    __pdataBANK1 00E5                              I2C_Send_Buffer@buff 0076  
                                       ??_memset 0077                      FLASH_EraseBlock@GIEBitValue 0075  
                       __end_of_FLASH_EraseBlock 0A1D                                    _Sleep_process 0A77  
                               ??_Set_start_flag 0073                                      __pbssCOMMON 0078  
                                _CH1_temperature 0069                                        ___latbits 0003  
                                  __pcstackBANK0 0020                                    __pcstackBANK2 0160  
                           __end_of_time_Display 066F                    SPI_Exchange8bitBuffer@dataOut 0075  
                         __end_of_Calculate_Time 03A9                                ??_I2C_Send_Buffer 0020  
                            __end_of_err_Display 0B52                       __size_of_EUSART_Initialize 000B  
                             I2C_Read_Buffer@ADD 0021                                     _LongPressSec 00B8  
                              Two_Display@number 002A                                     _SendCmd_1621 0904  
                                   _SendBit_1621 0A1D                                        __pnvBANK1 00EF  
                __size_of_SPI_Exchange8bitBuffer 0051                                 ___lwdiv@dividend 0023  
                         _PIN_MANAGER_Initialize 0AB7                                      _MAX31856Sec 00B9  
              __end_of_maxim_31856_read_register 08C9                                         ?_bcd2bin 0070  
                                       ?___awdiv 0073                                         ?___awmod 0073  
            __end_of_maxim_31856_read_nregisters 094B                      _maxim_31856_read_nregisters 0933  
                                       ?___lwdiv 0021                                         ?___lwmod 0073  
                                ?_ADC_Initialize 0070                                SendDataBit_1621@i 0076  
                                 ?_Sleep_process 0070                            __end_of_WriteAll_1621 0C42  
                   ??_INTERRUPT_InterruptManager 0072                      ?_maxim_31856_write_register 0074  
                                       _I2C_Stop 0964                            __size_of_Save_process 0063  
                                _CH2_temperature 0078                                 I2C_Send_Buffer@i 0023  
                               __CFG_WDTE$SWDTEN 0000                                 ___lwdiv@quotient 0027  
                                  _TMR0_CallBack 083F                                  ?_Calculate_Time 0070  
                            _temperature_decimal 006C                            _one_temperature_trans 0DAC  
                               _I2C_Receive_Byte 0AFC                              SendDataBit_1621@cnt 0073  
                       FLASH_WriteWord@flashAddr 002A                                   err_Display@num 0026  
                 FLASH_WriteBlock@blockStartAddr 0026            maxim_31856_read_nregisters@uch_nBytes 0024  
                            _temperature_display 0CE4                                ??_TMR0_Initialize 0073  
                                 ___wmul@product 0020                             __end_of_Step_control 0AB7  
                                      clear_ram0 0857                                        _uch_ltcbh 00BF  
                                      _uch_ltcbl 00C0                                        _uch_ltcbm 00C1  
                           __size_of_Key_Process 0095              __size_of_INTERRUPT_InterruptManager 000F  
                            _temperature_process 0CAD                                         _PIR1bits 0011  
                      FLASH_EraseBlock@startAddr 0073                                 ??_FLASH_ReadWord 0075  
                      __size_of_SPI_Exchange8bit 0009                       __end_of_Write_Flash_finish 0BAE  
                                       _SSP1CON1 0215                                         _TMR0_ISR 09B0  
                       __end_of_Write_Flash_head 0BDD                                         _SSP1STAT 0214  
                                   _Save_process 0F39                             ?_temperature_display 0070  
                          __end_of_I2C_Send_Byte 0E42                                       _ADCON0bits 009D  
                              ___wmul@multiplier 0073                          __size_of_FVR_Initialize 0004  
                         _SPI_Exchange8bitBuffer 0E42                                   _Cur_Save_Index 00AE  
                                    _err_Display 0B26                              Save_Write_word@data 0033  
                           ?_temperature_process 0070                                  _Save_Write_time 06E7  
                                _Save_Write_word 0C77                                     ?_Two_Display 0070  
                                 ?_TMR0_CallBack 0070                                  _FLASH_WriteWord 0D21  
                                       _Key_Scan 0AD9              maxim_31856_read_nregisters@uch_buff 0023  
                       __end_of_FLASH_WriteBlock 07C4                                _Serach_Flash_Head 0EE5  
                       __size_of_Bq32k_Time_Init 001B                               ?_Serach_Flash_Head 0070  
                              _ADC_GetConversion 091B                         ??_maxim_start_conversion 0077  
                             I2C_Send_Buffer@ADD 0022                                  ??_Sleep_process 0074  
                  __size_of_tc_temperature_trans 01CC                          __size_of_SPI_Initialize 0006  
                               __size_of_bcd2bin 0015                          ??_OSCILLATOR_Initialize 0073  
                             Serach_Flash_Head@i 0037                               ?_ADC_GetConversion 0073  
                               __size_of___awdiv 0052                            ??_temperature_display 005B  
                               __size_of___awmod 0046                                  _I2C_Read_Buffer 066F  
                               __size_of___lwdiv 0035                                 __size_of___lwmod 002D  
                            ??_Serach_Flash_Head 0033                     SPI_Exchange8bitBuffer@dataIn 0076  
                   SPI_Exchange8bitBuffer@bufLen 0074                                 err_Display@F2126 00A4  
                       __end_of_SendDataBit_1621 0A59                         __size_of_Set_finish_flag 0005  
                          __size_of_time_Display 0095                              ??_ADC_GetConversion 0075  
                          ??_temperature_process 0078                                  ___lwdiv@divisor 0021  
                                ___lwdiv@counter 0026                                         __ptext10 0831  
                                       __ptext11 0880                                         __ptext20 020B  
                                       __ptext12 0865                                         __ptext21 0A59  
                                       __ptext13 0545                                         __ptext30 0F9C  
                                       __ptext22 0BAE                                         __ptext14 0CAD  
                                       __ptext31 08DA                                         __ptext23 0B7F  
                                       __ptext15 05DA                                         __ptext40 0C42  
                                       __ptext32 08C9                                         __ptext24 06E7  
                                       __ptext16 0D66                                         __ptext41 0DAC  
                                       __ptext33 066F                                         __ptext25 0C77  
                                       __ptext17 0E93                                         __ptext50 0A3B  
                                       __ptext42 0996                                         __ptext34 0AFC  
                                       __ptext26 0D21                                         __ptext18 0CE4  
                                       __ptext51 0845                                         __ptext43 088B  
                                       __ptext35 0898                                         __ptext27 0759  
                                       __ptext19 003F                                         __ptext60 094B  
                                       __ptext52 0835                                         __ptext44 08B8  
                                       __ptext36 0B26                                         __ptext28 0A01  
                                       __ptext61 0DF6                                         __ptext53 0904  
                                       __ptext45 0933                                         __ptext37 047D  
                                       __ptext29 097D                                         __ptext62 091B  
                                       __ptext54 0A1D                                         __ptext46 0E42  
                                       __ptext38 09E6                                         __ptext55 0AD9  
                                       __ptext47 086D                                         __ptext39 0B52  
                                       __ptext64 09B0                                         __ptext56 085D  
                                       __ptext48 0BDD                                         __ptext65 083F  
                                       __ptext57 09CB                                         __ptext49 0C0E  
                                       __ptext58 07C4                                         __ptext59 0964  
                         ?_one_temperature_trans 0070                                     _SSP1CON1bits 0215  
                          FLASH_WriteWord@ramBuf 002C                            FLASH_WriteWord@offset 002F  
                      __end_of_Serach_Flash_Head 0F39                                    __size_of_main 00D4  
     maxim_31856_read_register@uch_register_data 0076                        __end_of_ADC_GetConversion 0933  
                                       _uch_cjth 00BC                                         _uch_cjtl 00BD  
                                       _uch_mask 00C2                             Save_process@var_time 0051  
                                       int$flags 007E                                     _time_Display 05DA  
                                       _tmr_flag 00BB               __end_of_INTERRUPT_InterruptManager 0013  
                     _INTERRUPT_InterruptManager 0004                     __size_of_Bq32k_Rtc_Read_Time 0064  
                                   _SSP1STATbits 0214                          __end_of_Save_Write_time 0759  
                        __end_of_Save_Write_word 0CAD                                  _I2C_Send_Buffer 07C4  
                              ?_FLASH_EraseBlock 0073                               ??_FLASH_EraseBlock 0075  
                                     _INTCONbits 000B                          __end_of_FLASH_WriteWord 0D66  
                                ??_TMR0_CallBack 0070                                       _FVRCONbits 0117  
                                Key_Scan@Key_val 0075                                    SendBit_1621@i 0076  
                                       memset@p1 0020                            __size_of_Step_control 0021  
                                       intlevel1 0000                                       _PMCON1bits 0195  
                               ___lwmod@dividend 0075                          ?_PIN_MANAGER_Initialize 0070  
                              __CFG_CLKOUTEN$OFF 0000               SPI_Exchange8bitBuffer@bytesWritten 0077  
                               ??_ADC_Initialize 0073                          __end_of_I2C_Read_Buffer 06E7  
                               _SPI_Exchange8bit 086D                  __size_of_maxim_start_conversion 001A  
                       __end_of_I2C_Receive_Byte 0B26                           Serach_Flash_Head@count 0034  
                              ??_Bq32k_Time_Init 0025                                   _FVR_Initialize 0831  
                                   _rtc_save_ch1 00CC                                     _rtc_save_ch2 00D3  
                                     _OPTION_REG 0095                                     _Step_control 0A96  
                               ??_Calculate_Time 0039                                  ___lwmod@divisor 0073  
                                _TMR0_Initialize 08A8                                  ___lwmod@counter 0020  
       tc_temperature_trans@temperature_absolute 0055                                ??_Set_finish_flag 0073  
                             EUSART_Write@txData 0073                             __size_of_Two_Display 0031  
                 __end_of_PIN_MANAGER_Initialize 0AD9                       __size_of_Serach_Flash_Head 0054  
                           Bq32k_Time_Init@F2018 00E5                       __size_of_ADC_GetConversion 0018  
                       _maxim_clear_fault_status 0898  
