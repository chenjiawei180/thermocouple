

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Jun 28 08:48:16 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  008C                     	;# 
    79  008D                     	;# 
    80  008E                     	;# 
    81  0090                     	;# 
    82  0091                     	;# 
    83  0092                     	;# 
    84  0095                     	;# 
    85  0096                     	;# 
    86  0097                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  0116                     	;# 
    98  0117                     	;# 
    99  011D                     	;# 
   100  018C                     	;# 
   101  018D                     	;# 
   102  018E                     	;# 
   103  0191                     	;# 
   104  0191                     	;# 
   105  0192                     	;# 
   106  0193                     	;# 
   107  0193                     	;# 
   108  0194                     	;# 
   109  0195                     	;# 
   110  0196                     	;# 
   111  0197                     	;# 
   112  0199                     	;# 
   113  019A                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019C                     	;# 
   119  019C                     	;# 
   120  019D                     	;# 
   121  019E                     	;# 
   122  019F                     	;# 
   123  020D                     	;# 
   124  0210                     	;# 
   125  0211                     	;# 
   126  0211                     	;# 
   127  0212                     	;# 
   128  0212                     	;# 
   129  0213                     	;# 
   130  0213                     	;# 
   131  0214                     	;# 
   132  0214                     	;# 
   133  0215                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0216                     	;# 
   137  0216                     	;# 
   138  0217                     	;# 
   139  0217                     	;# 
   140  0291                     	;# 
   141  0291                     	;# 
   142  0292                     	;# 
   143  0293                     	;# 
   144  0298                     	;# 
   145  0298                     	;# 
   146  0299                     	;# 
   147  029A                     	;# 
   148  0394                     	;# 
   149  0395                     	;# 
   150  0396                     	;# 
   151  0FE4                     	;# 
   152  0FE5                     	;# 
   153  0FE6                     	;# 
   154  0FE7                     	;# 
   155  0FE8                     	;# 
   156  0FE9                     	;# 
   157  0FEA                     	;# 
   158  0FEB                     	;# 
   159  0FED                     	;# 
   160  0FEE                     	;# 
   161  0FEF                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  0116                     	;# 
   209  0117                     	;# 
   210  011D                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  018E                     	;# 
   214  0191                     	;# 
   215  0191                     	;# 
   216  0192                     	;# 
   217  0193                     	;# 
   218  0193                     	;# 
   219  0194                     	;# 
   220  0195                     	;# 
   221  0196                     	;# 
   222  0197                     	;# 
   223  0199                     	;# 
   224  019A                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019C                     	;# 
   230  019C                     	;# 
   231  019D                     	;# 
   232  019E                     	;# 
   233  019F                     	;# 
   234  020D                     	;# 
   235  0210                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  0291                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0293                     	;# 
   255  0298                     	;# 
   256  0298                     	;# 
   257  0299                     	;# 
   258  029A                     	;# 
   259  0394                     	;# 
   260  0395                     	;# 
   261  0396                     	;# 
   262  0FE4                     	;# 
   263  0FE5                     	;# 
   264  0FE6                     	;# 
   265  0FE7                     	;# 
   266  0FE8                     	;# 
   267  0FE9                     	;# 
   268  0FEA                     	;# 
   269  0FEB                     	;# 
   270  0FED                     	;# 
   271  0FEE                     	;# 
   272  0FEF                     	;# 
   273  0000                     	;# 
   274  0001                     	;# 
   275  0002                     	;# 
   276  0003                     	;# 
   277  0004                     	;# 
   278  0005                     	;# 
   279  0006                     	;# 
   280  0007                     	;# 
   281  0008                     	;# 
   282  0009                     	;# 
   283  000A                     	;# 
   284  000B                     	;# 
   285  000C                     	;# 
   286  000D                     	;# 
   287  000E                     	;# 
   288  0010                     	;# 
   289  0011                     	;# 
   290  0012                     	;# 
   291  0015                     	;# 
   292  0016                     	;# 
   293  0016                     	;# 
   294  0017                     	;# 
   295  0018                     	;# 
   296  0019                     	;# 
   297  001A                     	;# 
   298  001B                     	;# 
   299  001C                     	;# 
   300  008C                     	;# 
   301  008D                     	;# 
   302  008E                     	;# 
   303  0090                     	;# 
   304  0091                     	;# 
   305  0092                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0099                     	;# 
   310  009A                     	;# 
   311  009B                     	;# 
   312  009B                     	;# 
   313  009C                     	;# 
   314  009D                     	;# 
   315  009E                     	;# 
   316  010C                     	;# 
   317  010D                     	;# 
   318  010E                     	;# 
   319  0116                     	;# 
   320  0117                     	;# 
   321  011D                     	;# 
   322  018C                     	;# 
   323  018D                     	;# 
   324  018E                     	;# 
   325  0191                     	;# 
   326  0191                     	;# 
   327  0192                     	;# 
   328  0193                     	;# 
   329  0193                     	;# 
   330  0194                     	;# 
   331  0195                     	;# 
   332  0196                     	;# 
   333  0197                     	;# 
   334  0199                     	;# 
   335  019A                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019D                     	;# 
   343  019E                     	;# 
   344  019F                     	;# 
   345  020D                     	;# 
   346  0210                     	;# 
   347  0211                     	;# 
   348  0211                     	;# 
   349  0212                     	;# 
   350  0212                     	;# 
   351  0213                     	;# 
   352  0213                     	;# 
   353  0214                     	;# 
   354  0214                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0216                     	;# 
   359  0216                     	;# 
   360  0217                     	;# 
   361  0217                     	;# 
   362  0291                     	;# 
   363  0291                     	;# 
   364  0292                     	;# 
   365  0293                     	;# 
   366  0298                     	;# 
   367  0298                     	;# 
   368  0299                     	;# 
   369  029A                     	;# 
   370  0394                     	;# 
   371  0395                     	;# 
   372  0396                     	;# 
   373  0FE4                     	;# 
   374  0FE5                     	;# 
   375  0FE6                     	;# 
   376  0FE7                     	;# 
   377  0FE8                     	;# 
   378  0FE9                     	;# 
   379  0FEA                     	;# 
   380  0FEB                     	;# 
   381  0FED                     	;# 
   382  0FEE                     	;# 
   383  0FEF                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000D                     	;# 
   398  000E                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  0090                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  010C                     	;# 
   428  010D                     	;# 
   429  010E                     	;# 
   430  0116                     	;# 
   431  0117                     	;# 
   432  011D                     	;# 
   433  018C                     	;# 
   434  018D                     	;# 
   435  018E                     	;# 
   436  0191                     	;# 
   437  0191                     	;# 
   438  0192                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0197                     	;# 
   445  0199                     	;# 
   446  019A                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019C                     	;# 
   452  019C                     	;# 
   453  019D                     	;# 
   454  019E                     	;# 
   455  019F                     	;# 
   456  020D                     	;# 
   457  0210                     	;# 
   458  0211                     	;# 
   459  0211                     	;# 
   460  0212                     	;# 
   461  0212                     	;# 
   462  0213                     	;# 
   463  0213                     	;# 
   464  0214                     	;# 
   465  0214                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0216                     	;# 
   470  0216                     	;# 
   471  0217                     	;# 
   472  0217                     	;# 
   473  0291                     	;# 
   474  0291                     	;# 
   475  0292                     	;# 
   476  0293                     	;# 
   477  0298                     	;# 
   478  0298                     	;# 
   479  0299                     	;# 
   480  029A                     	;# 
   481  0394                     	;# 
   482  0395                     	;# 
   483  0396                     	;# 
   484  0FE4                     	;# 
   485  0FE5                     	;# 
   486  0FE6                     	;# 
   487  0FE7                     	;# 
   488  0FE8                     	;# 
   489  0FE9                     	;# 
   490  0FEA                     	;# 
   491  0FEB                     	;# 
   492  0FED                     	;# 
   493  0FEE                     	;# 
   494  0FEF                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0008                     	;# 
   504  0009                     	;# 
   505  000A                     	;# 
   506  000B                     	;# 
   507  000C                     	;# 
   508  000D                     	;# 
   509  000E                     	;# 
   510  0010                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0015                     	;# 
   514  0016                     	;# 
   515  0016                     	;# 
   516  0017                     	;# 
   517  0018                     	;# 
   518  0019                     	;# 
   519  001A                     	;# 
   520  001B                     	;# 
   521  001C                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  0090                     	;# 
   526  0091                     	;# 
   527  0092                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0099                     	;# 
   532  009A                     	;# 
   533  009B                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  010C                     	;# 
   539  010D                     	;# 
   540  010E                     	;# 
   541  0116                     	;# 
   542  0117                     	;# 
   543  011D                     	;# 
   544  018C                     	;# 
   545  018D                     	;# 
   546  018E                     	;# 
   547  0191                     	;# 
   548  0191                     	;# 
   549  0192                     	;# 
   550  0193                     	;# 
   551  0193                     	;# 
   552  0194                     	;# 
   553  0195                     	;# 
   554  0196                     	;# 
   555  0197                     	;# 
   556  0199                     	;# 
   557  019A                     	;# 
   558  019B                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019C                     	;# 
   563  019C                     	;# 
   564  019D                     	;# 
   565  019E                     	;# 
   566  019F                     	;# 
   567  020D                     	;# 
   568  0210                     	;# 
   569  0211                     	;# 
   570  0211                     	;# 
   571  0212                     	;# 
   572  0212                     	;# 
   573  0213                     	;# 
   574  0213                     	;# 
   575  0214                     	;# 
   576  0214                     	;# 
   577  0215                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0216                     	;# 
   581  0216                     	;# 
   582  0217                     	;# 
   583  0217                     	;# 
   584  0291                     	;# 
   585  0291                     	;# 
   586  0292                     	;# 
   587  0293                     	;# 
   588  0298                     	;# 
   589  0298                     	;# 
   590  0299                     	;# 
   591  029A                     	;# 
   592  0394                     	;# 
   593  0395                     	;# 
   594  0396                     	;# 
   595  0FE4                     	;# 
   596  0FE5                     	;# 
   597  0FE6                     	;# 
   598  0FE7                     	;# 
   599  0FE8                     	;# 
   600  0FE9                     	;# 
   601  0FEA                     	;# 
   602  0FEB                     	;# 
   603  0FED                     	;# 
   604  0FEE                     	;# 
   605  0FEF                     	;# 
   606  0000                     	;# 
   607  0001                     	;# 
   608  0002                     	;# 
   609  0003                     	;# 
   610  0004                     	;# 
   611  0005                     	;# 
   612  0006                     	;# 
   613  0007                     	;# 
   614  0008                     	;# 
   615  0009                     	;# 
   616  000A                     	;# 
   617  000B                     	;# 
   618  000C                     	;# 
   619  000D                     	;# 
   620  000E                     	;# 
   621  0010                     	;# 
   622  0011                     	;# 
   623  0012                     	;# 
   624  0015                     	;# 
   625  0016                     	;# 
   626  0016                     	;# 
   627  0017                     	;# 
   628  0018                     	;# 
   629  0019                     	;# 
   630  001A                     	;# 
   631  001B                     	;# 
   632  001C                     	;# 
   633  008C                     	;# 
   634  008D                     	;# 
   635  008E                     	;# 
   636  0090                     	;# 
   637  0091                     	;# 
   638  0092                     	;# 
   639  0095                     	;# 
   640  0096                     	;# 
   641  0097                     	;# 
   642  0099                     	;# 
   643  009A                     	;# 
   644  009B                     	;# 
   645  009B                     	;# 
   646  009C                     	;# 
   647  009D                     	;# 
   648  009E                     	;# 
   649  010C                     	;# 
   650  010D                     	;# 
   651  010E                     	;# 
   652  0116                     	;# 
   653  0117                     	;# 
   654  011D                     	;# 
   655  018C                     	;# 
   656  018D                     	;# 
   657  018E                     	;# 
   658  0191                     	;# 
   659  0191                     	;# 
   660  0192                     	;# 
   661  0193                     	;# 
   662  0193                     	;# 
   663  0194                     	;# 
   664  0195                     	;# 
   665  0196                     	;# 
   666  0197                     	;# 
   667  0199                     	;# 
   668  019A                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019C                     	;# 
   674  019C                     	;# 
   675  019D                     	;# 
   676  019E                     	;# 
   677  019F                     	;# 
   678  020D                     	;# 
   679  0210                     	;# 
   680  0211                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0212                     	;# 
   684  0213                     	;# 
   685  0213                     	;# 
   686  0214                     	;# 
   687  0214                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0216                     	;# 
   692  0216                     	;# 
   693  0217                     	;# 
   694  0217                     	;# 
   695  0291                     	;# 
   696  0291                     	;# 
   697  0292                     	;# 
   698  0293                     	;# 
   699  0298                     	;# 
   700  0298                     	;# 
   701  0299                     	;# 
   702  029A                     	;# 
   703  0394                     	;# 
   704  0395                     	;# 
   705  0396                     	;# 
   706  0FE4                     	;# 
   707  0FE5                     	;# 
   708  0FE6                     	;# 
   709  0FE7                     	;# 
   710  0FE8                     	;# 
   711  0FE9                     	;# 
   712  0FEA                     	;# 
   713  0FEB                     	;# 
   714  0FED                     	;# 
   715  0FEE                     	;# 
   716  0FEF                     	;# 
   717  0000                     	;# 
   718  0001                     	;# 
   719  0002                     	;# 
   720  0003                     	;# 
   721  0004                     	;# 
   722  0005                     	;# 
   723  0006                     	;# 
   724  0007                     	;# 
   725  0008                     	;# 
   726  0009                     	;# 
   727  000A                     	;# 
   728  000B                     	;# 
   729  000C                     	;# 
   730  000D                     	;# 
   731  000E                     	;# 
   732  0010                     	;# 
   733  0011                     	;# 
   734  0012                     	;# 
   735  0015                     	;# 
   736  0016                     	;# 
   737  0016                     	;# 
   738  0017                     	;# 
   739  0018                     	;# 
   740  0019                     	;# 
   741  001A                     	;# 
   742  001B                     	;# 
   743  001C                     	;# 
   744  008C                     	;# 
   745  008D                     	;# 
   746  008E                     	;# 
   747  0090                     	;# 
   748  0091                     	;# 
   749  0092                     	;# 
   750  0095                     	;# 
   751  0096                     	;# 
   752  0097                     	;# 
   753  0099                     	;# 
   754  009A                     	;# 
   755  009B                     	;# 
   756  009B                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009E                     	;# 
   760  010C                     	;# 
   761  010D                     	;# 
   762  010E                     	;# 
   763  0116                     	;# 
   764  0117                     	;# 
   765  011D                     	;# 
   766  018C                     	;# 
   767  018D                     	;# 
   768  018E                     	;# 
   769  0191                     	;# 
   770  0191                     	;# 
   771  0192                     	;# 
   772  0193                     	;# 
   773  0193                     	;# 
   774  0194                     	;# 
   775  0195                     	;# 
   776  0196                     	;# 
   777  0197                     	;# 
   778  0199                     	;# 
   779  019A                     	;# 
   780  019B                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019C                     	;# 
   785  019C                     	;# 
   786  019D                     	;# 
   787  019E                     	;# 
   788  019F                     	;# 
   789  020D                     	;# 
   790  0210                     	;# 
   791  0211                     	;# 
   792  0211                     	;# 
   793  0212                     	;# 
   794  0212                     	;# 
   795  0213                     	;# 
   796  0213                     	;# 
   797  0214                     	;# 
   798  0214                     	;# 
   799  0215                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0216                     	;# 
   803  0216                     	;# 
   804  0217                     	;# 
   805  0217                     	;# 
   806  0291                     	;# 
   807  0291                     	;# 
   808  0292                     	;# 
   809  0293                     	;# 
   810  0298                     	;# 
   811  0298                     	;# 
   812  0299                     	;# 
   813  029A                     	;# 
   814  0394                     	;# 
   815  0395                     	;# 
   816  0396                     	;# 
   817  0FE4                     	;# 
   818  0FE5                     	;# 
   819  0FE6                     	;# 
   820  0FE7                     	;# 
   821  0FE8                     	;# 
   822  0FE9                     	;# 
   823  0FEA                     	;# 
   824  0FEB                     	;# 
   825  0FED                     	;# 
   826  0FEE                     	;# 
   827  0FEF                     	;# 
   828                           
   829                           	psect	stringtext
   830  1000                     __pstringtext:	
   831  1000                     _dpowers:	
   832  1000  3401               	retlw	1
   833  1001  3400               	retlw	0
   834  1002  3400               	retlw	0
   835  1003  3400               	retlw	0
   836  1004  340A               	retlw	10
   837  1005  3400               	retlw	0
   838  1006  3400               	retlw	0
   839  1007  3400               	retlw	0
   840  1008  3464               	retlw	100
   841  1009  3400               	retlw	0
   842  100A  3400               	retlw	0
   843  100B  3400               	retlw	0
   844  100C  34E8               	retlw	232
   845  100D  3403               	retlw	3
   846  100E  3400               	retlw	0
   847  100F  3400               	retlw	0
   848  1010  3410               	retlw	16
   849  1011  3427               	retlw	39
   850  1012  3400               	retlw	0
   851  1013  3400               	retlw	0
   852  1014  34A0               	retlw	160
   853  1015  3486               	retlw	134
   854  1016  3401               	retlw	1
   855  1017  3400               	retlw	0
   856  1018  3440               	retlw	64
   857  1019  3442               	retlw	66
   858  101A  340F               	retlw	15
   859  101B  3400               	retlw	0
   860  101C  3480               	retlw	128
   861  101D  3496               	retlw	150
   862  101E  3498               	retlw	152
   863  101F  3400               	retlw	0
   864  1020  3400               	retlw	0
   865  1021  34E1               	retlw	225
   866  1022  34F5               	retlw	245
   867  1023  3405               	retlw	5
   868  1024  3400               	retlw	0
   869  1025  34CA               	retlw	202
   870  1026  349A               	retlw	154
   871  1027  343B               	retlw	59
   872  1028                     __end_of_dpowers:	
   873  1028                     __npowers_:	
   874  1028  3400               	retlw	0
   875  1029  3480               	retlw	128
   876  102A  343F               	retlw	63
   877  102B  34CD               	retlw	205
   878  102C  34CC               	retlw	204
   879  102D  343D               	retlw	61
   880  102E  34D7               	retlw	215
   881  102F  3423               	retlw	35
   882  1030  343C               	retlw	60
   883  1031  3412               	retlw	18
   884  1032  3483               	retlw	131
   885  1033  343A               	retlw	58
   886  1034  34B7               	retlw	183
   887  1035  34D1               	retlw	209
   888  1036  3438               	retlw	56
   889  1037  34C6               	retlw	198
   890  1038  3427               	retlw	39
   891  1039  3437               	retlw	55
   892  103A  3438               	retlw	56
   893  103B  3486               	retlw	134
   894  103C  3435               	retlw	53
   895  103D  34C0               	retlw	192
   896  103E  34D6               	retlw	214
   897  103F  3433               	retlw	51
   898  1040  34CC               	retlw	204
   899  1041  342B               	retlw	43
   900  1042  3432               	retlw	50
   901  1043  3470               	retlw	112
   902  1044  3489               	retlw	137
   903  1045  3430               	retlw	48
   904  1046  34E7               	retlw	231
   905  1047  34DB               	retlw	219
   906  1048  342E               	retlw	46
   907  1049  34E5               	retlw	229
   908  104A  343C               	retlw	60
   909  104B  341E               	retlw	30
   910  104C  3442               	retlw	66
   911  104D  34A2               	retlw	162
   912  104E  340D               	retlw	13
   913  104F                     __end_of__npowers_:	
   914  104F                     __powers_:	
   915  104F  3400               	retlw	0
   916  1050  3480               	retlw	128
   917  1051  343F               	retlw	63
   918  1052  3400               	retlw	0
   919  1053  3420               	retlw	32
   920  1054  3441               	retlw	65
   921  1055  3400               	retlw	0
   922  1056  34C8               	retlw	200
   923  1057  3442               	retlw	66
   924  1058  3400               	retlw	0
   925  1059  347A               	retlw	122
   926  105A  3444               	retlw	68
   927  105B  3440               	retlw	64
   928  105C  341C               	retlw	28
   929  105D  3446               	retlw	70
   930  105E  3450               	retlw	80
   931  105F  34C3               	retlw	195
   932  1060  3447               	retlw	71
   933  1061  3424               	retlw	36
   934  1062  3474               	retlw	116
   935  1063  3449               	retlw	73
   936  1064  3497               	retlw	151
   937  1065  3418               	retlw	24
   938  1066  344B               	retlw	75
   939  1067  34BC               	retlw	188
   940  1068  34BE               	retlw	190
   941  1069  344C               	retlw	76
   942  106A  346B               	retlw	107
   943  106B  346E               	retlw	110
   944  106C  344E               	retlw	78
   945  106D  3403               	retlw	3
   946  106E  3415               	retlw	21
   947  106F  3450               	retlw	80
   948  1070  3479               	retlw	121
   949  1071  34AD               	retlw	173
   950  1072  3460               	retlw	96
   951  1073  34F3               	retlw	243
   952  1074  3449               	retlw	73
   953  1075  3471               	retlw	113
   954  1076                     __end_of__powers_:	
   955  1076                     STR_13:	
   956  1076  344F               	retlw	79	;'O'
   957  1077  3476               	retlw	118	;'v'
   958  1078  3465               	retlw	101	;'e'
   959  1079  3472               	retlw	114	;'r'
   960  107A  3476               	retlw	118	;'v'
   961  107B  346F               	retlw	111	;'o'
   962  107C  346C               	retlw	108	;'l'
   963  107D  3474               	retlw	116	;'t'
   964  107E  3461               	retlw	97	;'a'
   965  107F  3467               	retlw	103	;'g'
   966  1080  3465               	retlw	101	;'e'
   967  1081  3420               	retlw	32	;' '
   968  1082  346F               	retlw	111	;'o'
   969  1083  3472               	retlw	114	;'r'
   970  1084  3420               	retlw	32	;' '
   971  1085  3455               	retlw	85	;'U'
   972  1086  346E               	retlw	110	;'n'
   973  1087  3464               	retlw	100	;'d'
   974  1088  3465               	retlw	101	;'e'
   975  1089  3472               	retlw	114	;'r'
   976  108A  3476               	retlw	118	;'v'
   977  108B  346F               	retlw	111	;'o'
   978  108C  346C               	retlw	108	;'l'
   979  108D  3474               	retlw	116	;'t'
   980  108E  3461               	retlw	97	;'a'
   981  108F  3467               	retlw	103	;'g'
   982  1090  3465               	retlw	101	;'e'
   983  1091  3420               	retlw	32	;' '
   984  1092  3449               	retlw	73	;'I'
   985  1093  346E               	retlw	110	;'n'
   986  1094  3470               	retlw	112	;'p'
   987  1095  3475               	retlw	117	;'u'
   988  1096  3474               	retlw	116	;'t'
   989  1097  3420               	retlw	32	;' '
   990  1098  3446               	retlw	70	;'F'
   991  1099  3461               	retlw	97	;'a'
   992  109A  3475               	retlw	117	;'u'
   993  109B  346C               	retlw	108	;'l'
   994  109C  3474               	retlw	116	;'t'
   995  109D  340A               	retlw	10
   996  109E  340D               	retlw	13
   997  109F  3400               	retlw	0
   998  10A0                     STR_11:	
   999  10A0  3454               	retlw	84	;'T'
  1000  10A1  3468               	retlw	104	;'h'
  1001  10A2  3465               	retlw	101	;'e'
  1002  10A3  3472               	retlw	114	;'r'
  1003  10A4  346D               	retlw	109	;'m'
  1004  10A5  346F               	retlw	111	;'o'
  1005  10A6  3463               	retlw	99	;'c'
  1006  10A7  346F               	retlw	111	;'o'
  1007  10A8  3475               	retlw	117	;'u'
  1008  10A9  3470               	retlw	112	;'p'
  1009  10AA  346C               	retlw	108	;'l'
  1010  10AB  3465               	retlw	101	;'e'
  1011  10AC  3420               	retlw	32	;' '
  1012  10AD  3454               	retlw	84	;'T'
  1013  10AE  3465               	retlw	101	;'e'
  1014  10AF  346D               	retlw	109	;'m'
  1015  10B0  3470               	retlw	112	;'p'
  1016  10B1  3465               	retlw	101	;'e'
  1017  10B2  3472               	retlw	114	;'r'
  1018  10B3  3461               	retlw	97	;'a'
  1019  10B4  3474               	retlw	116	;'t'
  1020  10B5  3475               	retlw	117	;'u'
  1021  10B6  3472               	retlw	114	;'r'
  1022  10B7  3465               	retlw	101	;'e'
  1023  10B8  3420               	retlw	32	;' '
  1024  10B9  3448               	retlw	72	;'H'
  1025  10BA  3469               	retlw	105	;'i'
  1026  10BB  3467               	retlw	103	;'g'
  1027  10BC  3468               	retlw	104	;'h'
  1028  10BD  3420               	retlw	32	;' '
  1029  10BE  3446               	retlw	70	;'F'
  1030  10BF  3461               	retlw	97	;'a'
  1031  10C0  3475               	retlw	117	;'u'
  1032  10C1  346C               	retlw	108	;'l'
  1033  10C2  3474               	retlw	116	;'t'
  1034  10C3  340A               	retlw	10
  1035  10C4  340D               	retlw	13
  1036  10C5  3400               	retlw	0
  1037  10C6                     STR_12:	
  1038  10C6  3454               	retlw	84	;'T'
  1039  10C7  3468               	retlw	104	;'h'
  1040  10C8  3465               	retlw	101	;'e'
  1041  10C9  3472               	retlw	114	;'r'
  1042  10CA  346D               	retlw	109	;'m'
  1043  10CB  346F               	retlw	111	;'o'
  1044  10CC  3463               	retlw	99	;'c'
  1045  10CD  346F               	retlw	111	;'o'
  1046  10CE  3475               	retlw	117	;'u'
  1047  10CF  3470               	retlw	112	;'p'
  1048  10D0  346C               	retlw	108	;'l'
  1049  10D1  3465               	retlw	101	;'e'
  1050  10D2  3420               	retlw	32	;' '
  1051  10D3  3454               	retlw	84	;'T'
  1052  10D4  3465               	retlw	101	;'e'
  1053  10D5  346D               	retlw	109	;'m'
  1054  10D6  3470               	retlw	112	;'p'
  1055  10D7  3465               	retlw	101	;'e'
  1056  10D8  3472               	retlw	114	;'r'
  1057  10D9  3461               	retlw	97	;'a'
  1058  10DA  3474               	retlw	116	;'t'
  1059  10DB  3475               	retlw	117	;'u'
  1060  10DC  3472               	retlw	114	;'r'
  1061  10DD  3465               	retlw	101	;'e'
  1062  10DE  3420               	retlw	32	;' '
  1063  10DF  344C               	retlw	76	;'L'
  1064  10E0  346F               	retlw	111	;'o'
  1065  10E1  3477               	retlw	119	;'w'
  1066  10E2  3420               	retlw	32	;' '
  1067  10E3  3446               	retlw	70	;'F'
  1068  10E4  3461               	retlw	97	;'a'
  1069  10E5  3475               	retlw	117	;'u'
  1070  10E6  346C               	retlw	108	;'l'
  1071  10E7  3474               	retlw	116	;'t'
  1072  10E8  340A               	retlw	10
  1073  10E9  340D               	retlw	13
  1074  10EA  3400               	retlw	0
  1075  10EB                     STR_14:	
  1076  10EB  3454               	retlw	84	;'T'
  1077  10EC  3468               	retlw	104	;'h'
  1078  10ED  3465               	retlw	101	;'e'
  1079  10EE  3472               	retlw	114	;'r'
  1080  10EF  346D               	retlw	109	;'m'
  1081  10F0  346F               	retlw	111	;'o'
  1082  10F1  3463               	retlw	99	;'c'
  1083  10F2  346F               	retlw	111	;'o'
  1084  10F3  3475               	retlw	117	;'u'
  1085  10F4  3470               	retlw	112	;'p'
  1086  10F5  346C               	retlw	108	;'l'
  1087  10F6  3465               	retlw	101	;'e'
  1088  10F7  3420               	retlw	32	;' '
  1089  10F8  344F               	retlw	79	;'O'
  1090  10F9  3470               	retlw	112	;'p'
  1091  10FA  3465               	retlw	101	;'e'
  1092  10FB  346E               	retlw	110	;'n'
  1093  10FC  342D               	retlw	45	;'-'
  1094  10FD  3443               	retlw	67	;'C'
  1095  10FE  3469               	retlw	105	;'i'
  1096  10FF  3472               	retlw	114	;'r'
  1097  1100  3463               	retlw	99	;'c'
  1098  1101  3475               	retlw	117	;'u'
  1099  1102  3469               	retlw	105	;'i'
  1100  1103  3474               	retlw	116	;'t'
  1101  1104  3420               	retlw	32	;' '
  1102  1105  3446               	retlw	70	;'F'
  1103  1106  3461               	retlw	97	;'a'
  1104  1107  3475               	retlw	117	;'u'
  1105  1108  346C               	retlw	108	;'l'
  1106  1109  3474               	retlw	116	;'t'
  1107  110A  340A               	retlw	10
  1108  110B  340D               	retlw	13
  1109  110C  3400               	retlw	0
  1110  110D                     STR_5:	
  1111  110D  3454               	retlw	84	;'T'
  1112  110E  3468               	retlw	104	;'h'
  1113  110F  3465               	retlw	101	;'e'
  1114  1110  3472               	retlw	114	;'r'
  1115  1111  346D               	retlw	109	;'m'
  1116  1112  346F               	retlw	111	;'o'
  1117  1113  3463               	retlw	99	;'c'
  1118  1114  346F               	retlw	111	;'o'
  1119  1115  3475               	retlw	117	;'u'
  1120  1116  3470               	retlw	112	;'p'
  1121  1117  346C               	retlw	108	;'l'
  1122  1118  3465               	retlw	101	;'e'
  1123  1119  3420               	retlw	32	;' '
  1124  111A  3454               	retlw	84	;'T'
  1125  111B  3465               	retlw	101	;'e'
  1126  111C  346D               	retlw	109	;'m'
  1127  111D  3470               	retlw	112	;'p'
  1128  111E  3465               	retlw	101	;'e'
  1129  111F  3472               	retlw	114	;'r'
  1130  1120  3461               	retlw	97	;'a'
  1131  1121  3474               	retlw	116	;'t'
  1132  1122  3475               	retlw	117	;'u'
  1133  1123  3472               	retlw	114	;'r'
  1134  1124  3465               	retlw	101	;'e'
  1135  1125  3420               	retlw	32	;' '
  1136  1126  3469               	retlw	105	;'i'
  1137  1127  3473               	retlw	115	;'s'
  1138  1128  343A               	retlw	58	;':'
  1139  1129  3420               	retlw	32	;' '
  1140  112A  3420               	retlw	32	;' '
  1141  112B  3400               	retlw	0
  1142  112C                     STR_2:	
  1143  112C  3443               	retlw	67	;'C'
  1144  112D  346F               	retlw	111	;'o'
  1145  112E  346C               	retlw	108	;'l'
  1146  112F  3464               	retlw	100	;'d'
  1147  1130  345F               	retlw	95	;'_'
  1148  1131  344A               	retlw	74	;'J'
  1149  1132  3475               	retlw	117	;'u'
  1150  1133  346E               	retlw	110	;'n'
  1151  1134  3463               	retlw	99	;'c'
  1152  1135  3474               	retlw	116	;'t'
  1153  1136  3469               	retlw	105	;'i'
  1154  1137  346F               	retlw	111	;'o'
  1155  1138  346E               	retlw	110	;'n'
  1156  1139  3420               	retlw	32	;' '
  1157  113A  3474               	retlw	116	;'t'
  1158  113B  3465               	retlw	101	;'e'
  1159  113C  346D               	retlw	109	;'m'
  1160  113D  3470               	retlw	112	;'p'
  1161  113E  3465               	retlw	101	;'e'
  1162  113F  3472               	retlw	114	;'r'
  1163  1140  3461               	retlw	97	;'a'
  1164  1141  3474               	retlw	116	;'t'
  1165  1142  3475               	retlw	117	;'u'
  1166  1143  3472               	retlw	114	;'r'
  1167  1144  3465               	retlw	101	;'e'
  1168  1145  3420               	retlw	32	;' '
  1169  1146  3469               	retlw	105	;'i'
  1170  1147  3473               	retlw	115	;'s'
  1171  1148  343A               	retlw	58	;':'
  1172  1149  3420               	retlw	32	;' '
  1173  114A  3400               	retlw	0
  1174  114B                     STR_7:	
  1175  114B  3443               	retlw	67	;'C'
  1176  114C  346F               	retlw	111	;'o'
  1177  114D  346C               	retlw	108	;'l'
  1178  114E  3464               	retlw	100	;'d'
  1179  114F  3420               	retlw	32	;' '
  1180  1150  344A               	retlw	74	;'J'
  1181  1151  3475               	retlw	117	;'u'
  1182  1152  346E               	retlw	110	;'n'
  1183  1153  3463               	retlw	99	;'c'
  1184  1154  3474               	retlw	116	;'t'
  1185  1155  3469               	retlw	105	;'i'
  1186  1156  346F               	retlw	111	;'o'
  1187  1157  346E               	retlw	110	;'n'
  1188  1158  3420               	retlw	32	;' '
  1189  1159  344F               	retlw	79	;'O'
  1190  115A  3475               	retlw	117	;'u'
  1191  115B  3474               	retlw	116	;'t'
  1192  115C  342D               	retlw	45	;'-'
  1193  115D  346F               	retlw	111	;'o'
  1194  115E  3466               	retlw	102	;'f'
  1195  115F  342D               	retlw	45	;'-'
  1196  1160  3452               	retlw	82	;'R'
  1197  1161  3461               	retlw	97	;'a'
  1198  1162  346E               	retlw	110	;'n'
  1199  1163  3467               	retlw	103	;'g'
  1200  1164  3465               	retlw	101	;'e'
  1201  1165  340A               	retlw	10
  1202  1166  340D               	retlw	13
  1203  1167  3400               	retlw	0
  1204  1168                     STR_8:	
  1205  1168  3454               	retlw	84	;'T'
  1206  1169  3468               	retlw	104	;'h'
  1207  116A  3465               	retlw	101	;'e'
  1208  116B  3472               	retlw	114	;'r'
  1209  116C  346D               	retlw	109	;'m'
  1210  116D  346F               	retlw	111	;'o'
  1211  116E  3463               	retlw	99	;'c'
  1212  116F  346F               	retlw	111	;'o'
  1213  1170  3475               	retlw	117	;'u'
  1214  1171  3470               	retlw	112	;'p'
  1215  1172  346C               	retlw	108	;'l'
  1216  1173  3465               	retlw	101	;'e'
  1217  1174  3420               	retlw	32	;' '
  1218  1175  344F               	retlw	79	;'O'
  1219  1176  3475               	retlw	117	;'u'
  1220  1177  3474               	retlw	116	;'t'
  1221  1178  342D               	retlw	45	;'-'
  1222  1179  346F               	retlw	111	;'o'
  1223  117A  3466               	retlw	102	;'f'
  1224  117B  342D               	retlw	45	;'-'
  1225  117C  3452               	retlw	82	;'R'
  1226  117D  3461               	retlw	97	;'a'
  1227  117E  346E               	retlw	110	;'n'
  1228  117F  3467               	retlw	103	;'g'
  1229  1180  3465               	retlw	101	;'e'
  1230  1181  340A               	retlw	10
  1231  1182  340D               	retlw	13
  1232  1183  3400               	retlw	0
  1233  1184                     STR_9:	
  1234  1184  3443               	retlw	67	;'C'
  1235  1185  346F               	retlw	111	;'o'
  1236  1186  346C               	retlw	108	;'l'
  1237  1187  3464               	retlw	100	;'d'
  1238  1188  3420               	retlw	32	;' '
  1239  1189  344A               	retlw	74	;'J'
  1240  118A  3475               	retlw	117	;'u'
  1241  118B  346E               	retlw	110	;'n'
  1242  118C  3463               	retlw	99	;'c'
  1243  118D  3474               	retlw	116	;'t'
  1244  118E  3469               	retlw	105	;'i'
  1245  118F  346F               	retlw	111	;'o'
  1246  1190  346E               	retlw	110	;'n'
  1247  1191  3420               	retlw	32	;' '
  1248  1192  3448               	retlw	72	;'H'
  1249  1193  3469               	retlw	105	;'i'
  1250  1194  3467               	retlw	103	;'g'
  1251  1195  3468               	retlw	104	;'h'
  1252  1196  3420               	retlw	32	;' '
  1253  1197  3446               	retlw	70	;'F'
  1254  1198  3461               	retlw	97	;'a'
  1255  1199  3475               	retlw	117	;'u'
  1256  119A  346C               	retlw	108	;'l'
  1257  119B  3474               	retlw	116	;'t'
  1258  119C  340A               	retlw	10
  1259  119D  340D               	retlw	13
  1260  119E  3400               	retlw	0
  1261  119F                     STR_10:	
  1262  119F  3443               	retlw	67	;'C'
  1263  11A0  346F               	retlw	111	;'o'
  1264  11A1  346C               	retlw	108	;'l'
  1265  11A2  3464               	retlw	100	;'d'
  1266  11A3  3420               	retlw	32	;' '
  1267  11A4  344A               	retlw	74	;'J'
  1268  11A5  3475               	retlw	117	;'u'
  1269  11A6  346E               	retlw	110	;'n'
  1270  11A7  3463               	retlw	99	;'c'
  1271  11A8  3474               	retlw	116	;'t'
  1272  11A9  3469               	retlw	105	;'i'
  1273  11AA  346F               	retlw	111	;'o'
  1274  11AB  346E               	retlw	110	;'n'
  1275  11AC  3420               	retlw	32	;' '
  1276  11AD  344C               	retlw	76	;'L'
  1277  11AE  346F               	retlw	111	;'o'
  1278  11AF  3477               	retlw	119	;'w'
  1279  11B0  3420               	retlw	32	;' '
  1280  11B1  3446               	retlw	70	;'F'
  1281  11B2  3461               	retlw	97	;'a'
  1282  11B3  3475               	retlw	117	;'u'
  1283  11B4  346C               	retlw	108	;'l'
  1284  11B5  3474               	retlw	116	;'t'
  1285  11B6  340A               	retlw	10
  1286  11B7  340D               	retlw	13
  1287  11B8  3400               	retlw	0
  1288  11B9                     STR_1:	
  1289  11B9  3425               	retlw	37	;'%'
  1290  11BA  3438               	retlw	56	;'8'
  1291  11BB  342E               	retlw	46	;'.'
  1292  11BC  3434               	retlw	52	;'4'
  1293  11BD  3466               	retlw	102	;'f'
  1294  11BE  3400               	retlw	0
  1295  11BF                     STR_4:	
  1296  11BF  3425               	retlw	37	;'%'
  1297  11C0  3466               	retlw	102	;'f'
  1298  11C1  3400               	retlw	0
  1299  1181                     
  1300                           ; #config settings
  1301  0000                     
  1302                           	psect	nvBANK0
  1303  006F                     __pnvBANK0:	
  1304  006F                     _uch_cr0:	
  1305  006F                     	ds	1
  1306  0011                     _PIR1bits	set	17
  1307  006B                     _RB3	set	107
  1308  0095                     _OPTION_REGbits	set	149
  1309  0099                     _OSCCON	set	153
  1310  009A                     _OSCSTAT	set	154
  1311  008C                     _TRISA	set	140
  1312  008D                     _TRISB	set	141
  1313  008E                     _TRISC	set	142
  1314  046B                     _TRISB3	set	1131
  1315  011D                     _APFCON	set	285
  1316  010C                     _LATA	set	268
  1317  010D                     _LATB	set	269
  1318  010E                     _LATC	set	270
  1319  0860                     _LATA0	set	2144
  1320  0863                     _LATA3	set	2147
  1321  0864                     _LATA4	set	2148
  1322  0865                     _LATA5	set	2149
  1323  018C                     _ANSELA	set	396
  1324  018D                     _ANSELB	set	397
  1325  018E                     _ANSELC	set	398
  1326  019F                     _BAUDCON	set	415
  1327  0199                     _RCREG	set	409
  1328  019D                     _RCSTA	set	413
  1329  019D                     _RCSTAbits	set	413
  1330  019C                     _SPBRGH	set	412
  1331  019B                     _SPBRGL	set	411
  1332  019A                     _TXREG	set	410
  1333  019E                     _TXSTA	set	414
  1334  0212                     _SSP1ADD	set	530
  1335  0215                     _SSP1CON1	set	533
  1336  0215                     _SSP1CON1bits	set	533
  1337  0214                     _SSP1STAT	set	532
  1338  0214                     _SSP1STATbits	set	532
  1339  0211                     _SSPBUF	set	529
  1340  020D                     _WPUB	set	525
  1341  0210                     _WPUE	set	528
  1342                           
  1343                           	psect	cinit
  1344  07EB                     start_initialization:	
  1345  07EB                     __initialization:	
  1346                           
  1347                           ; Clear objects allocated to BANK0
  1348  07EB  01EC               	clrf	__pbssBANK0& (0+127)
  1349  07EC  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  1350  07ED  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  1351                           
  1352                           ; Clear objects allocated to BANK1
  1353  07EE  30B9               	movlw	low __pbssBANK1
  1354  07EF  0084               	movwf	4
  1355  07F0  3000               	movlw	high __pbssBANK1
  1356  07F1  0085               	movwf	5
  1357  07F2  3017               	movlw	23
  1358  07F3  3193  23B5  3187   	fcall	clear_ram0
  1359                           
  1360                           ; Clear objects allocated to BANK2
  1361  07F6  3020               	movlw	low __pbssBANK2
  1362  07F7  0084               	movwf	4
  1363  07F8  3001               	movlw	high __pbssBANK2
  1364  07F9  0085               	movwf	5
  1365  07FA  3040               	movlw	64
  1366  07FB  3193  23B5         	fcall	clear_ram0
  1367  07FD                     end_of_initialization:	
  1368                           ;End of C runtime variable initialization code
  1369                           
  1370  07FD                     __end_of__initialization:	
  1371  07FD  0020               	movlb	0
  1372  07FE  318D  2D8D         	ljmp	_main	;jump to C main() function
  1373                           
  1374                           	psect	bssBANK0
  1375  006C                     __pbssBANK0:	
  1376  006C                     _uch_cjth:	
  1377  006C                     	ds	1
  1378  006D                     _uch_ltcbh:	
  1379  006D                     	ds	1
  1380  006E                     _uch_sr:	
  1381  006E                     	ds	1
  1382                           
  1383                           	psect	bssBANK1
  1384  00B9                     __pbssBANK1:	
  1385  00B9                     _temperature_value:	
  1386  00B9                     	ds	4
  1387  00BD                     _f_cold_junction_temperature:	
  1388  00BD                     	ds	3
  1389  00C0                     _f_linearized_tc_temperature:	
  1390  00C0                     	ds	3
  1391  00C3                     _uch_cjtl:	
  1392  00C3                     	ds	1
  1393  00C4                     _uch_cr1:	
  1394  00C4                     	ds	1
  1395  00C5                     _uch_ltcbl:	
  1396  00C5                     	ds	1
  1397  00C6                     _uch_ltcbm:	
  1398  00C6                     	ds	1
  1399  00C7                     _uch_mask:	
  1400  00C7                     	ds	1
  1401  00C8                     _uch_reg:	
  1402  00C8                     	ds	8
  1403                           
  1404                           	psect	bssBANK2
  1405  0120                     __pbssBANK2:	
  1406  0120                     _s:	
  1407  0120                     	ds	64
  1408                           
  1409                           	psect	clrtext
  1410  13B5                     clear_ram0:	
  1411                           ;	Called with FSR0 containing the base address, and
  1412                           ;	WREG with the size to clear
  1413                           
  1414  13B5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1415  13B6                     clrloop0:	
  1416  13B6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1417  13B7  3101               	addfsr 0,1
  1418  13B8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1419  13B9  2BB6               	goto	clrloop0	;have we reached the end yet?
  1420  13BA  3400               	retlw	0	;all done for this memory range, return
  1421                           
  1422                           	psect	cstackBANK1
  1423  00A0                     __pcstackBANK1:	
  1424  00A0                     _sprintf$750:	
  1425                           
  1426                           ; 3 bytes @ 0x0
  1427  00A0                     	ds	3
  1428  00A3                     sprintf@ap:	
  1429                           
  1430                           ; 1 bytes @ 0x3
  1431  00A3                     	ds	1
  1432  00A4                     sprintf@val:	
  1433                           
  1434                           ; 4 bytes @ 0x4
  1435  00A4                     	ds	4
  1436  00A8                     sprintf@flag:	
  1437                           
  1438                           ; 2 bytes @ 0x8
  1439  00A8                     	ds	2
  1440  00AA                     sprintf@width:	
  1441                           
  1442                           ; 2 bytes @ 0xA
  1443  00AA                     	ds	2
  1444  00AC                     sprintf@tmpval:	
  1445                           
  1446                           ; 4 bytes @ 0xC
  1447  00AC                     	ds	4
  1448  00B0                     sprintf@exp:	
  1449                           
  1450                           ; 2 bytes @ 0x10
  1451  00B0                     	ds	2
  1452  00B2                     sprintf@fval:	
  1453                           
  1454                           ; 3 bytes @ 0x12
  1455  00B2                     	ds	3
  1456  00B5                     sprintf@sp:	
  1457                           
  1458                           ; 1 bytes @ 0x15
  1459  00B5                     	ds	1
  1460  00B6                     sprintf@prec:	
  1461                           
  1462                           ; 2 bytes @ 0x16
  1463  00B6                     	ds	2
  1464  00B8                     sprintf@c:	
  1465                           
  1466                           ; 1 bytes @ 0x18
  1467  00B8                     	ds	1
  1468                           
  1469                           	psect	cstackCOMMON
  1470  0070                     __pcstackCOMMON:	
  1471  0070                     ?_isdigit:	
  1472  0070                     ?___ftge:	
  1473                           ; 1 bit 
  1474                           
  1475  0070                     ?_OSCILLATOR_Initialize:	
  1476                           ; 1 bit 
  1477                           
  1478  0070                     ??_OSCILLATOR_Initialize:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0070                     ?_SPI_Initialize:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0070                     ??_SPI_Initialize:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ?_EUSART_Initialize:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ??_EUSART_Initialize:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ?_maxim_31856_init:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     ?_maxim_start_conversion:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ?_maxim_clear_fault_status:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ??_isdigit:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_PIN_MANAGER_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ??_PIN_MANAGER_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_SYSTEM_Initialize:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ??_SYSTEM_Initialize:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_SPI_Exchange8bit:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ??_SPI_Exchange8bit:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_EUSART_Write:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_EUSART_Write:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_main:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_maxim_31856_read_register:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ?_strlen:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?___awmod:	
  1539                           ; 2 bytes @ 0x0
  1540                           
  1541  0070                     ?___ftpack:	
  1542                           ; 2 bytes @ 0x0
  1543                           
  1544  0070                     ?__tdiv_to_l_:	
  1545                           ; 3 bytes @ 0x0
  1546                           
  1547  0070                     ?__div_to_l_:	
  1548                           ; 4 bytes @ 0x0
  1549                           
  1550  0070                     ?___lldiv:	
  1551                           ; 4 bytes @ 0x0
  1552                           
  1553  0070                     ?___llmod:	
  1554                           ; 4 bytes @ 0x0
  1555                           
  1556  0070                     SPI_Exchange8bit@data:	
  1557                           ; 4 bytes @ 0x0
  1558                           
  1559  0070                     EUSART_Write@txData:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     _isdigit$547:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ___awmod@divisor:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     strlen@s:	
  1569                           ; 2 bytes @ 0x0
  1570                           
  1571  0070                     __div_to_l_@f1:	
  1572                           ; 2 bytes @ 0x0
  1573                           
  1574  0070                     ___ftpack@arg:	
  1575                           ; 3 bytes @ 0x0
  1576                           
  1577  0070                     __tdiv_to_l_@f1:	
  1578                           ; 3 bytes @ 0x0
  1579                           
  1580  0070                     ___ftge@ff1:	
  1581                           ; 3 bytes @ 0x0
  1582                           
  1583  0070                     ___lldiv@divisor:	
  1584                           ; 3 bytes @ 0x0
  1585                           
  1586  0070                     ___llmod@divisor:	
  1587                           ; 4 bytes @ 0x0
  1588                           
  1589                           
  1590                           ; 4 bytes @ 0x0
  1591  0070                     	ds	1
  1592  0071                     ?_maxim_31856_write_register:	
  1593  0071                     ?_SPI_Exchange8bitBuffer:	
  1594                           ; 1 bytes @ 0x1
  1595                           
  1596  0071                     ??_maxim_31856_read_register:	
  1597                           ; 1 bytes @ 0x1
  1598                           
  1599  0071                     SPI_Exchange8bitBuffer@bufLen:	
  1600                           ; 1 bytes @ 0x1
  1601                           
  1602  0071                     maxim_31856_write_register@uch_register_value:	
  1603                           ; 1 bytes @ 0x1
  1604                           
  1605  0071                     isdigit@c:	
  1606                           ; 1 bytes @ 0x1
  1607                           
  1608                           
  1609                           ; 1 bytes @ 0x1
  1610  0071                     	ds	1
  1611  0072                     ??_maxim_31856_write_register:	
  1612  0072                     ??_strlen:	
  1613                           ; 1 bytes @ 0x2
  1614                           
  1615  0072                     SPI_Exchange8bitBuffer@dataOut:	
  1616                           ; 1 bytes @ 0x2
  1617                           
  1618  0072                     maxim_31856_write_register@uch_register_address:	
  1619                           ; 1 bytes @ 0x2
  1620                           
  1621  0072                     maxim_31856_read_register@uch_register_address:	
  1622                           ; 1 bytes @ 0x2
  1623                           
  1624  0072                     ___awmod@dividend:	
  1625                           ; 1 bytes @ 0x2
  1626                           
  1627                           
  1628                           ; 2 bytes @ 0x2
  1629  0072                     	ds	1
  1630  0073                     ??_maxim_31856_init:	
  1631  0073                     ??_SPI_Exchange8bitBuffer:	
  1632                           ; 1 bytes @ 0x3
  1633                           
  1634  0073                     maxim_31856_read_register@uch_register_data:	
  1635                           ; 1 bytes @ 0x3
  1636                           
  1637  0073                     ___ftpack@exp:	
  1638                           ; 1 bytes @ 0x3
  1639                           
  1640  0073                     __div_to_l_@f2:	
  1641                           ; 1 bytes @ 0x3
  1642                           
  1643  0073                     __tdiv_to_l_@f2:	
  1644                           ; 3 bytes @ 0x3
  1645                           
  1646  0073                     ___ftge@ff2:	
  1647                           ; 3 bytes @ 0x3
  1648                           
  1649                           
  1650                           ; 3 bytes @ 0x3
  1651  0073                     	ds	1
  1652  0074                     ??_maxim_start_conversion:	
  1653  0074                     ??_maxim_clear_fault_status:	
  1654                           ; 1 bytes @ 0x4
  1655                           
  1656  0074                     ??___awmod:	
  1657                           ; 1 bytes @ 0x4
  1658                           
  1659  0074                     ___ftpack@sign:	
  1660                           ; 1 bytes @ 0x4
  1661                           
  1662  0074                     strlen@cp:	
  1663                           ; 1 bytes @ 0x4
  1664                           
  1665  0074                     ___lldiv@dividend:	
  1666                           ; 2 bytes @ 0x4
  1667                           
  1668  0074                     ___llmod@dividend:	
  1669                           ; 4 bytes @ 0x4
  1670                           
  1671                           
  1672                           ; 4 bytes @ 0x4
  1673  0074                     	ds	1
  1674  0075                     ??___ftpack:	
  1675  0075                     maxim_start_conversion@uch_conversion_mode:	
  1676                           ; 1 bytes @ 0x5
  1677                           
  1678  0075                     ___awmod@counter:	
  1679                           ; 1 bytes @ 0x5
  1680                           
  1681                           
  1682                           ; 1 bytes @ 0x5
  1683  0075                     	ds	1
  1684  0076                     ?_EUSART_SendString:	
  1685  0076                     ??__tdiv_to_l_:	
  1686                           ; 1 bytes @ 0x6
  1687                           
  1688  0076                     ??__div_to_l_:	
  1689                           ; 1 bytes @ 0x6
  1690                           
  1691  0076                     ??___ftge:	
  1692                           ; 1 bytes @ 0x6
  1693                           
  1694  0076                     SPI_Exchange8bitBuffer@dataIn:	
  1695                           ; 1 bytes @ 0x6
  1696                           
  1697  0076                     ___awmod@sign:	
  1698                           ; 1 bytes @ 0x6
  1699                           
  1700  0076                     EUSART_SendString@s:	
  1701                           ; 1 bytes @ 0x6
  1702                           
  1703                           
  1704                           ; 2 bytes @ 0x6
  1705  0076                     	ds	1
  1706  0077                     ?___awdiv:	
  1707  0077                     SPI_Exchange8bitBuffer@bytesWritten:	
  1708                           ; 2 bytes @ 0x7
  1709                           
  1710  0077                     ___awdiv@divisor:	
  1711                           ; 1 bytes @ 0x7
  1712                           
  1713                           
  1714                           ; 2 bytes @ 0x7
  1715  0077                     	ds	1
  1716  0078                     ?_maxim_31856_read_nregisters:	
  1717  0078                     ??_EUSART_SendString:	
  1718                           ; 1 bytes @ 0x8
  1719                           
  1720  0078                     ??___lldiv:	
  1721                           ; 1 bytes @ 0x8
  1722                           
  1723  0078                     ??___llmod:	
  1724                           ; 1 bytes @ 0x8
  1725                           
  1726  0078                     ?___lltoft:	
  1727                           ; 1 bytes @ 0x8
  1728                           
  1729  0078                     maxim_31856_read_nregisters@uch_buff:	
  1730                           ; 3 bytes @ 0x8
  1731                           
  1732  0078                     ___lltoft@c:	
  1733                           ; 1 bytes @ 0x8
  1734                           
  1735                           
  1736                           ; 4 bytes @ 0x8
  1737  0078                     	ds	1
  1738  0079                     maxim_31856_read_nregisters@uch_nBytes:	
  1739  0079                     ___llmod@counter:	
  1740                           ; 1 bytes @ 0x9
  1741                           
  1742  0079                     ___awdiv@dividend:	
  1743                           ; 1 bytes @ 0x9
  1744                           
  1745  0079                     ___lldiv@quotient:	
  1746                           ; 2 bytes @ 0x9
  1747                           
  1748                           
  1749                           ; 4 bytes @ 0x9
  1750  0079                     	ds	1
  1751  007A                     ??_maxim_31856_read_nregisters:	
  1752                           
  1753                           ; 1 bytes @ 0xA
  1754  007A                     	ds	1
  1755  007B                     ??___awdiv:	
  1756                           
  1757                           ; 1 bytes @ 0xB
  1758  007B                     	ds	1
  1759  007C                     ??___wmul:	
  1760  007C                     ??___lltoft:	
  1761                           ; 1 bytes @ 0xC
  1762                           
  1763  007C                     maxim_31856_read_nregisters@uch_register_address:	
  1764                           ; 1 bytes @ 0xC
  1765                           
  1766  007C                     ___wmul@product:	
  1767                           ; 1 bytes @ 0xC
  1768                           
  1769                           
  1770                           ; 2 bytes @ 0xC
  1771  007C                     	ds	1
  1772  007D                     ___lldiv@counter:	
  1773  007D                     ___lltoft@exp:	
  1774                           ; 1 bytes @ 0xD
  1775                           
  1776                           
  1777                           ; 1 bytes @ 0xD
  1778  007D                     	ds	1
  1779  007E                     ??___ftneg:	
  1780  007E                     ??___ftsub:	
  1781                           ; 1 bytes @ 0xE
  1782                           
  1783                           
  1784                           	psect	cstackBANK0
  1785  0020                     __pcstackBANK0:	
  1786                           ; 1 bytes @ 0xE
  1787                           
  1788  0020                     ___awdiv@counter:	
  1789  0020                     EUSART_SendString@length:	
  1790                           ; 1 bytes @ 0x0
  1791                           
  1792  0020                     __div_to_l_@quot:	
  1793                           ; 2 bytes @ 0x0
  1794                           
  1795  0020                     __tdiv_to_l_@quot:	
  1796                           ; 4 bytes @ 0x0
  1797                           
  1798                           
  1799                           ; 4 bytes @ 0x0
  1800  0020                     	ds	1
  1801  0021                     ___awdiv@sign:	
  1802                           
  1803                           ; 1 bytes @ 0x1
  1804  0021                     	ds	1
  1805  0022                     EUSART_SendString@i:	
  1806  0022                     ___awdiv@quotient:	
  1807                           ; 2 bytes @ 0x2
  1808                           
  1809                           
  1810                           ; 2 bytes @ 0x2
  1811  0022                     	ds	2
  1812  0024                     ?___wmul:	
  1813  0024                     __div_to_l_@cntr:	
  1814                           ; 2 bytes @ 0x4
  1815                           
  1816  0024                     __tdiv_to_l_@cntr:	
  1817                           ; 1 bytes @ 0x4
  1818                           
  1819  0024                     EUSART_SendString@pointer:	
  1820                           ; 1 bytes @ 0x4
  1821                           
  1822  0024                     ___wmul@multiplier:	
  1823                           ; 2 bytes @ 0x4
  1824                           
  1825                           
  1826                           ; 2 bytes @ 0x4
  1827  0024                     	ds	1
  1828  0025                     __div_to_l_@exp1:	
  1829  0025                     __tdiv_to_l_@exp1:	
  1830                           ; 1 bytes @ 0x5
  1831                           
  1832                           
  1833                           ; 1 bytes @ 0x5
  1834  0025                     	ds	1
  1835  0026                     EUSART_SendString@x:	
  1836  0026                     ___wmul@multiplicand:	
  1837                           ; 1 bytes @ 0x6
  1838                           
  1839                           
  1840                           ; 2 bytes @ 0x6
  1841  0026                     	ds	2
  1842  0028                     ?___ftmul:	
  1843  0028                     ___ftmul@f1:	
  1844                           ; 3 bytes @ 0x8
  1845                           
  1846                           
  1847                           ; 3 bytes @ 0x8
  1848  0028                     	ds	3
  1849  002B                     ___ftmul@f2:	
  1850                           
  1851                           ; 3 bytes @ 0xB
  1852  002B                     	ds	3
  1853  002E                     ??___ftmul:	
  1854                           
  1855                           ; 1 bytes @ 0xE
  1856  002E                     	ds	4
  1857  0032                     ___ftmul@exp:	
  1858                           
  1859                           ; 1 bytes @ 0x12
  1860  0032                     	ds	1
  1861  0033                     ___ftmul@f3_as_product:	
  1862                           
  1863                           ; 3 bytes @ 0x13
  1864  0033                     	ds	3
  1865  0036                     ___ftmul@cntr:	
  1866                           
  1867                           ; 1 bytes @ 0x16
  1868  0036                     	ds	1
  1869  0037                     ___ftmul@sign:	
  1870                           
  1871                           ; 1 bytes @ 0x17
  1872  0037                     	ds	1
  1873  0038                     ?_fround:	
  1874  0038                     ?_scale:	
  1875                           ; 3 bytes @ 0x18
  1876                           
  1877  0038                     ?___ftneg:	
  1878                           ; 3 bytes @ 0x18
  1879                           
  1880  0038                     ___ftneg@f1:	
  1881                           ; 3 bytes @ 0x18
  1882                           
  1883                           
  1884                           ; 3 bytes @ 0x18
  1885  0038                     	ds	3
  1886  003B                     ??_fround:	
  1887  003B                     ??_scale:	
  1888                           ; 1 bytes @ 0x1B
  1889                           
  1890                           
  1891                           ; 1 bytes @ 0x1B
  1892  003B                     	ds	2
  1893  003D                     _scale$749:	
  1894                           
  1895                           ; 3 bytes @ 0x1D
  1896  003D                     	ds	2
  1897  003F                     _fround$748:	
  1898                           
  1899                           ; 3 bytes @ 0x1F
  1900  003F                     	ds	1
  1901  0040                     scale@scl:	
  1902                           
  1903                           ; 1 bytes @ 0x20
  1904  0040                     	ds	1
  1905  0041                     ?___fttol:	
  1906  0041                     ___fttol@f1:	
  1907                           ; 4 bytes @ 0x21
  1908                           
  1909                           
  1910                           ; 3 bytes @ 0x21
  1911  0041                     	ds	1
  1912  0042                     _fround$747:	
  1913                           
  1914                           ; 3 bytes @ 0x22
  1915  0042                     	ds	3
  1916  0045                     ??___fttol:	
  1917  0045                     fround@prec:	
  1918                           ; 1 bytes @ 0x25
  1919                           
  1920                           
  1921                           ; 1 bytes @ 0x25
  1922  0045                     	ds	1
  1923  0046                     ?___ftadd:	
  1924  0046                     ___ftadd@f1:	
  1925                           ; 3 bytes @ 0x26
  1926                           
  1927                           
  1928                           ; 3 bytes @ 0x26
  1929  0046                     	ds	3
  1930  0049                     ___fttol@sign1:	
  1931  0049                     ___ftadd@f2:	
  1932                           ; 1 bytes @ 0x29
  1933                           
  1934                           
  1935                           ; 3 bytes @ 0x29
  1936  0049                     	ds	1
  1937  004A                     ___fttol@lval:	
  1938                           
  1939                           ; 4 bytes @ 0x2A
  1940  004A                     	ds	2
  1941  004C                     ??___ftadd:	
  1942                           
  1943                           ; 1 bytes @ 0x2C
  1944  004C                     	ds	2
  1945  004E                     ___fttol@exp1:	
  1946                           
  1947                           ; 1 bytes @ 0x2E
  1948  004E                     	ds	2
  1949  0050                     ___ftadd@sign:	
  1950                           
  1951                           ; 1 bytes @ 0x30
  1952  0050                     	ds	1
  1953  0051                     ___ftadd@exp2:	
  1954                           
  1955                           ; 1 bytes @ 0x31
  1956  0051                     	ds	1
  1957  0052                     ___ftadd@exp1:	
  1958                           
  1959                           ; 1 bytes @ 0x32
  1960  0052                     	ds	1
  1961  0053                     ?___ftsub:	
  1962  0053                     ___ftsub@f2:	
  1963                           ; 3 bytes @ 0x33
  1964                           
  1965                           
  1966                           ; 3 bytes @ 0x33
  1967  0053                     	ds	3
  1968  0056                     ___ftsub@f1:	
  1969                           
  1970                           ; 3 bytes @ 0x36
  1971  0056                     	ds	3
  1972  0059                     ?_sprintf:	
  1973  0059                     sprintf@f:	
  1974                           ; 2 bytes @ 0x39
  1975                           
  1976                           
  1977                           ; 2 bytes @ 0x39
  1978  0059                     	ds	5
  1979  005E                     ??_sprintf:	
  1980                           
  1981                           ; 1 bytes @ 0x3E
  1982  005E                     	ds	6
  1983  0064                     ??_main:	
  1984                           
  1985                           ; 1 bytes @ 0x44
  1986  0064                     	ds	8
  1987                           
  1988                           	psect	maintext
  1989  0D8D                     __pmaintext:	
  1990 ;;
  1991 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1992 ;;
  1993 ;; *************** function _main *****************
  1994 ;; Defined at:
  1995 ;;		line 58 in file "main.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;		None
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : B1F/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2011 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2012 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2013 ;;Total ram usage:        8 bytes
  2014 ;; Hardware stack levels required when called:    4
  2015 ;; This function calls:
  2016 ;;		_EUSART_SendString
  2017 ;;		_SYSTEM_Initialize
  2018 ;;		___ftmul
  2019 ;;		___ftneg
  2020 ;;		___lltoft
  2021 ;;		_maxim_31856_init
  2022 ;;		_maxim_31856_read_nregisters
  2023 ;;		_maxim_31856_write_register
  2024 ;;		_maxim_clear_fault_status
  2025 ;;		_maxim_start_conversion
  2026 ;;		_sprintf
  2027 ;; This function is called by:
  2028 ;;		Startup code after reset
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           
  2033                           ;psect for function _main
  2034  0D8D                     _main:	
  2035                           
  2036                           ;main.c: 60: SYSTEM_Initialize();
  2037                           
  2038                           ;incstack = 0
  2039                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2040  0D8D  3193  23E1  318D   	fcall	_SYSTEM_Initialize
  2041                           
  2042                           ;main.c: 61: do { LATA3 = 0; } while(0);
  2043  0D90  0022               	movlb	2	; select bank2
  2044  0D91  118C               	bcf	12,3	;volatile
  2045                           
  2046                           ;main.c: 62: do { LATA4 = 0; } while(0);
  2047  0D92  120C               	bcf	12,4	;volatile
  2048                           
  2049                           ;main.c: 63: do { LATA0 = 0; } while(0);
  2050  0D93  100C               	bcf	12,0	;volatile
  2051                           
  2052                           ;main.c: 64: maxim_31856_init();
  2053  0D94  3180  2007  318D   	fcall	_maxim_31856_init
  2054                           
  2055                           ;main.c: 65: do { TRISB3 = 1; } while(0);
  2056  0D97  0021               	movlb	1	; select bank1
  2057  0D98  158D               	bsf	13,3	;volatile
  2058  0D99                     l2931:	
  2059                           ;main.c: 86: while (1)
  2060                           
  2061                           
  2062                           ;main.c: 87: {
  2063                           ;main.c: 89: _delay((unsigned long)((5000)*(16000000/4000.0)));
  2064  0D99  3066               	movlw	102
  2065  0D9A  0020               	movlb	0	; select bank0
  2066  0D9B  00E6               	movwf	??_main+2
  2067  0D9C  3077               	movlw	119
  2068  0D9D  00E5               	movwf	??_main+1
  2069  0D9E  3024               	movlw	36
  2070  0D9F  00E4               	movwf	??_main
  2071  0DA0                     u4137:	
  2072  0DA0  0BE4               	decfsz	??_main,f
  2073  0DA1  2DA0               	goto	u4137
  2074  0DA2  0BE5               	decfsz	??_main+1,f
  2075  0DA3  2DA0               	goto	u4137
  2076  0DA4  0BE6               	decfsz	??_main+2,f
  2077  0DA5  2DA0               	goto	u4137
  2078  0DA6  0000               	nop
  2079                           
  2080                           ;main.c: 91: maxim_start_conversion((uint8_t) 0x40);
  2081  0DA7  3040               	movlw	64
  2082  0DA8  3194  243F  318D   	fcall	_maxim_start_conversion
  2083  0DAB                     l194:	
  2084                           ;main.c: 92: while(RB3);
  2085                           
  2086  0DAB  0020               	movlb	0	; select bank0
  2087  0DAC  198D               	btfsc	13,3	;volatile
  2088  0DAD  2DAB               	goto	l194
  2089                           
  2090                           ;main.c: 93: maxim_31856_read_nregisters(0x0A, uch_reg,6);
  2091  0DAE  30C8               	movlw	(low (_uch_reg| 0))& (0+255)
  2092  0DAF  00E4               	movwf	??_main
  2093  0DB0  0864               	movf	??_main,w
  2094  0DB1  00F8               	movwf	maxim_31856_read_nregisters@uch_buff
  2095  0DB2  3006               	movlw	6
  2096  0DB3  00E5               	movwf	??_main+1
  2097  0DB4  0865               	movf	??_main+1,w
  2098  0DB5  00F9               	movwf	maxim_31856_read_nregisters@uch_nBytes
  2099  0DB6  300A               	movlw	10
  2100  0DB7  3194  242A  318D   	fcall	_maxim_31856_read_nregisters
  2101                           
  2102                           ;main.c: 94: uch_cjth=uch_reg[0];uch_cjtl=uch_reg[1];
  2103  0DBA  0021               	movlb	1	; select bank1
  2104  0DBB  0848               	movf	_uch_reg^(0+128),w
  2105  0DBC  0020               	movlb	0	; select bank0
  2106  0DBD  00E4               	movwf	??_main
  2107  0DBE  0864               	movf	??_main,w
  2108  0DBF  00EC               	movwf	_uch_cjth
  2109  0DC0  0021               	movlb	1	; select bank1
  2110  0DC1  0849               	movf	(_uch_reg^(0+128)+1),w
  2111  0DC2  0020               	movlb	0	; select bank0
  2112  0DC3  00E4               	movwf	??_main
  2113  0DC4  0864               	movf	??_main,w
  2114  0DC5  0021               	movlb	1	; select bank1
  2115  0DC6  00C3               	movwf	_uch_cjtl^(0+128)
  2116                           
  2117                           ;main.c: 95: uch_ltcbh=uch_reg[2];uch_ltcbm=uch_reg[3];uch_ltcbl=uch_reg[4];
  2118  0DC7  084A               	movf	(_uch_reg^(0+128)+2),w
  2119  0DC8  0020               	movlb	0	; select bank0
  2120  0DC9  00E4               	movwf	??_main
  2121  0DCA  0864               	movf	??_main,w
  2122  0DCB  00ED               	movwf	_uch_ltcbh
  2123  0DCC  0021               	movlb	1	; select bank1
  2124  0DCD  084B               	movf	(_uch_reg^(0+128)+3),w
  2125  0DCE  0020               	movlb	0	; select bank0
  2126  0DCF  00E4               	movwf	??_main
  2127  0DD0  0864               	movf	??_main,w
  2128  0DD1  0021               	movlb	1	; select bank1
  2129  0DD2  00C6               	movwf	_uch_ltcbm^(0+128)
  2130  0DD3  084C               	movf	(_uch_reg^(0+128)+4),w
  2131  0DD4  0020               	movlb	0	; select bank0
  2132  0DD5  00E4               	movwf	??_main
  2133  0DD6  0864               	movf	??_main,w
  2134  0DD7  0021               	movlb	1	; select bank1
  2135  0DD8  00C5               	movwf	_uch_ltcbl^(0+128)
  2136                           
  2137                           ;main.c: 96: uch_sr=uch_reg[5];
  2138  0DD9  084D               	movf	(_uch_reg^(0+128)+5),w
  2139  0DDA  0020               	movlb	0	; select bank0
  2140  0DDB  00E4               	movwf	??_main
  2141  0DDC  0864               	movf	??_main,w
  2142  0DDD  00EE               	movwf	_uch_sr
  2143                           
  2144                           ;main.c: 107: if(uch_sr==(uint8_t)0x00)
  2145  0DDE  086E               	movf	_uch_sr,w
  2146  0DDF  1D03               	btfss	3,2
  2147  0DE0  2F9F               	goto	l197
  2148                           
  2149                           ;main.c: 108: {
  2150                           ;main.c: 110: temperature_value=(uch_cjth<<8|uch_cjtl)>>2;
  2151  0DE1  086C               	movf	_uch_cjth,w
  2152  0DE2  00E5               	movwf	??_main+1
  2153  0DE3  0021               	movlb	1	; select bank1
  2154  0DE4  0843               	movf	_uch_cjtl^(0+128),w
  2155  0DE5  0020               	movlb	0	; select bank0
  2156  0DE6  00E4               	movwf	??_main
  2157  0DE7  0D65               	rlf	??_main+1,w
  2158  0DE8  0CE5               	rrf	??_main+1,f
  2159  0DE9  0CE4               	rrf	??_main,f
  2160  0DEA  0D65               	rlf	??_main+1,w
  2161  0DEB  0CE5               	rrf	??_main+1,f
  2162  0DEC  0CE4               	rrf	??_main,f
  2163  0DED  0864               	movf	??_main,w
  2164  0DEE  0021               	movlb	1	; select bank1
  2165  0DEF  00B9               	movwf	_temperature_value^(0+128)
  2166  0DF0  0020               	movlb	0	; select bank0
  2167  0DF1  0865               	movf	??_main+1,w
  2168  0DF2  0021               	movlb	1	; select bank1
  2169  0DF3  00BA               	movwf	(_temperature_value+1)^(0+128)
  2170  0DF4  0D89               	rlf	9,f
  2171  0DF5  3B89               	subwfb	9,f
  2172  0DF6  0989               	comf	9,f
  2173  0DF7  00BB               	movwf	(_temperature_value+2)^(0+128)
  2174  0DF8  00BC               	movwf	(_temperature_value+3)^(0+128)
  2175                           
  2176                           ;main.c: 112: if((uch_cjth&0x80)==0x80)
  2177  0DF9  0020               	movlb	0	; select bank0
  2178  0DFA  1FEC               	btfss	_uch_cjth,7
  2179  0DFB  2E62               	goto	l2959
  2180                           
  2181                           ;main.c: 113: {
  2182                           ;main.c: 114: temperature_value=0x3FFF-temperature_value+1;
  2183  0DFC  3000               	movlw	0
  2184  0DFD  00E4               	movwf	??_main
  2185  0DFE  3040               	movlw	64
  2186  0DFF  00E5               	movwf	??_main+1
  2187  0E00  3000               	movlw	0
  2188  0E01  00E6               	movwf	??_main+2
  2189  0E02  3000               	movlw	0
  2190  0E03  00E7               	movwf	??_main+3
  2191  0E04  0021               	movlb	1	; select bank1
  2192  0E05  0939               	comf	_temperature_value^(0+128),w
  2193  0E06  0020               	movlb	0	; select bank0
  2194  0E07  00E8               	movwf	??_main+4
  2195  0E08  0021               	movlb	1	; select bank1
  2196  0E09  093A               	comf	(_temperature_value+1)^(0+128),w
  2197  0E0A  0020               	movlb	0	; select bank0
  2198  0E0B  00E9               	movwf	??_main+5
  2199  0E0C  0021               	movlb	1	; select bank1
  2200  0E0D  093B               	comf	(_temperature_value+2)^(0+128),w
  2201  0E0E  0020               	movlb	0	; select bank0
  2202  0E0F  00EA               	movwf	??_main+6
  2203  0E10  0021               	movlb	1	; select bank1
  2204  0E11  093C               	comf	(_temperature_value+3)^(0+128),w
  2205  0E12  0020               	movlb	0	; select bank0
  2206  0E13  00EB               	movwf	??_main+7
  2207  0E14  0AE8               	incf	??_main+4,f
  2208  0E15  1903               	skipnz
  2209  0E16  0AE9               	incf	??_main+5,f
  2210  0E17  1903               	skipnz
  2211  0E18  0AEA               	incf	??_main+6,f
  2212  0E19  1903               	skipnz
  2213  0E1A  0AEB               	incf	??_main+7,f
  2214  0E1B  0868               	movf	??_main+4,w
  2215  0E1C  07E4               	addwf	??_main,f
  2216  0E1D  0869               	movf	??_main+5,w
  2217  0E1E  3DE5               	addwfc	??_main+1,f
  2218  0E1F  086A               	movf	??_main+6,w
  2219  0E20  3DE6               	addwfc	??_main+2,f
  2220  0E21  086B               	movf	??_main+7,w
  2221  0E22  3DE7               	addwfc	??_main+3,f
  2222  0E23  0867               	movf	??_main+3,w
  2223  0E24  0021               	movlb	1	; select bank1
  2224  0E25  00BC               	movwf	(_temperature_value+3)^(0+128)
  2225  0E26  0020               	movlb	0	; select bank0
  2226  0E27  0866               	movf	??_main+2,w
  2227  0E28  0021               	movlb	1	; select bank1
  2228  0E29  00BB               	movwf	(_temperature_value+2)^(0+128)
  2229  0E2A  0020               	movlb	0	; select bank0
  2230  0E2B  0865               	movf	??_main+1,w
  2231  0E2C  0021               	movlb	1	; select bank1
  2232  0E2D  00BA               	movwf	(_temperature_value+1)^(0+128)
  2233  0E2E  0020               	movlb	0	; select bank0
  2234  0E2F  0864               	movf	??_main,w
  2235  0E30  0021               	movlb	1	; select bank1
  2236  0E31  00B9               	movwf	_temperature_value^(0+128)
  2237                           
  2238                           ;main.c: 115: f_cold_junction_temperature=0-temperature_value*0.015625;
  2239  0E32  083C               	movf	(_temperature_value+3)^(0+128),w
  2240  0E33  00FB               	movwf	___lltoft@c+3
  2241  0E34  083B               	movf	(_temperature_value+2)^(0+128),w
  2242  0E35  00FA               	movwf	___lltoft@c+2
  2243  0E36  083A               	movf	(_temperature_value+1)^(0+128),w
  2244  0E37  00F9               	movwf	___lltoft@c+1
  2245  0E38  0839               	movf	_temperature_value^(0+128),w
  2246  0E39  00F8               	movwf	___lltoft@c
  2247  0E3A  3194  24B6  318D   	fcall	___lltoft
  2248  0E3D  0878               	movf	?___lltoft,w
  2249  0E3E  0020               	movlb	0	; select bank0
  2250  0E3F  00AB               	movwf	___ftmul@f2
  2251  0E40  0879               	movf	?___lltoft+1,w
  2252  0E41  00AC               	movwf	___ftmul@f2+1
  2253  0E42  087A               	movf	?___lltoft+2,w
  2254  0E43  00AD               	movwf	___ftmul@f2+2
  2255  0E44  3000               	movlw	0
  2256  0E45  00A8               	movwf	___ftmul@f1
  2257  0E46  3080               	movlw	128
  2258  0E47  00A9               	movwf	___ftmul@f1+1
  2259  0E48  303C               	movlw	60
  2260  0E49  00AA               	movwf	___ftmul@f1+2
  2261  0E4A  3197  274C  318D   	fcall	___ftmul
  2262  0E4D  0020               	movlb	0	; select bank0
  2263  0E4E  0828               	movf	?___ftmul,w
  2264  0E4F  00B8               	movwf	___ftneg@f1
  2265  0E50  0829               	movf	?___ftmul+1,w
  2266  0E51  00B9               	movwf	___ftneg@f1+1
  2267  0E52  082A               	movf	?___ftmul+2,w
  2268  0E53  00BA               	movwf	___ftneg@f1+2
  2269  0E54  3193  23CC  318D   	fcall	___ftneg
  2270  0E57  0020               	movlb	0	; select bank0
  2271  0E58  0838               	movf	?___ftneg,w
  2272  0E59  0021               	movlb	1	; select bank1
  2273  0E5A  00BD               	movwf	_f_cold_junction_temperature^(0+128)
  2274  0E5B  0020               	movlb	0	; select bank0
  2275  0E5C  0839               	movf	?___ftneg+1,w
  2276  0E5D  0021               	movlb	1	; select bank1
  2277  0E5E  00BE               	movwf	(_f_cold_junction_temperature+1)^(0+128)
  2278  0E5F  0020               	movlb	0	; select bank0
  2279  0E60  083A               	movf	?___ftneg+2,w
  2280  0E61  2E89               	goto	L1
  2281  0E62                     l2959:	
  2282                           ;main.c: 116: }
  2283                           
  2284                           
  2285                           ;main.c: 117: else
  2286                           ;main.c: 118: f_cold_junction_temperature=temperature_value*0.015625;
  2287  0E62  3000               	movlw	0
  2288  0E63  0020               	movlb	0	; select bank0
  2289  0E64  00A8               	movwf	___ftmul@f1
  2290  0E65  3080               	movlw	128
  2291  0E66  00A9               	movwf	___ftmul@f1+1
  2292  0E67  303C               	movlw	60
  2293  0E68  00AA               	movwf	___ftmul@f1+2
  2294  0E69  0021               	movlb	1	; select bank1
  2295  0E6A  083C               	movf	(_temperature_value+3)^(0+128),w
  2296  0E6B  00FB               	movwf	___lltoft@c+3
  2297  0E6C  083B               	movf	(_temperature_value+2)^(0+128),w
  2298  0E6D  00FA               	movwf	___lltoft@c+2
  2299  0E6E  083A               	movf	(_temperature_value+1)^(0+128),w
  2300  0E6F  00F9               	movwf	___lltoft@c+1
  2301  0E70  0839               	movf	_temperature_value^(0+128),w
  2302  0E71  00F8               	movwf	___lltoft@c
  2303  0E72  3194  24B6  318D   	fcall	___lltoft
  2304  0E75  0878               	movf	?___lltoft,w
  2305  0E76  0020               	movlb	0	; select bank0
  2306  0E77  00AB               	movwf	___ftmul@f2
  2307  0E78  0879               	movf	?___lltoft+1,w
  2308  0E79  00AC               	movwf	___ftmul@f2+1
  2309  0E7A  087A               	movf	?___lltoft+2,w
  2310  0E7B  00AD               	movwf	___ftmul@f2+2
  2311  0E7C  3197  274C  318D   	fcall	___ftmul
  2312  0E7F  0020               	movlb	0	; select bank0
  2313  0E80  0828               	movf	?___ftmul,w
  2314  0E81  0021               	movlb	1	; select bank1
  2315  0E82  00BD               	movwf	_f_cold_junction_temperature^(0+128)
  2316  0E83  0020               	movlb	0	; select bank0
  2317  0E84  0829               	movf	?___ftmul+1,w
  2318  0E85  0021               	movlb	1	; select bank1
  2319  0E86  00BE               	movwf	(_f_cold_junction_temperature+1)^(0+128)
  2320  0E87  0020               	movlb	0	; select bank0
  2321  0E88  082A               	movf	?___ftmul+2,w
  2322  0E89                     L1:	
  2323  0E89  0021               	movlb	1	; select bank1
  2324  0E8A  00BF               	movwf	(_f_cold_junction_temperature+2)^(0+128)
  2325                           
  2326                           ;main.c: 120: sprintf(s,"%8.4f",f_cold_junction_temperature);
  2327  0E8B  30B9               	movlw	low (STR_1| (0+32768))
  2328  0E8C  0020               	movlb	0	; select bank0
  2329  0E8D  00D9               	movwf	sprintf@f
  2330  0E8E  3091               	movlw	high (STR_1| (0+32768))
  2331  0E8F  00DA               	movwf	sprintf@f+1
  2332  0E90  0021               	movlb	1	; select bank1
  2333  0E91  083D               	movf	_f_cold_junction_temperature^(0+128),w
  2334  0E92  0020               	movlb	0	; select bank0
  2335  0E93  00DB               	movwf	?_sprintf+2
  2336  0E94  0021               	movlb	1	; select bank1
  2337  0E95  083E               	movf	(_f_cold_junction_temperature+1)^(0+128),w
  2338  0E96  0020               	movlb	0	; select bank0
  2339  0E97  00DC               	movwf	?_sprintf+3
  2340  0E98  0021               	movlb	1	; select bank1
  2341  0E99  083F               	movf	(_f_cold_junction_temperature+2)^(0+128),w
  2342  0E9A  0020               	movlb	0	; select bank0
  2343  0E9B  00DD               	movwf	?_sprintf+4
  2344  0E9C  3020               	movlw	(low (_s| (0+256)))& (0+255)
  2345  0E9D  3181  21D2  318D   	fcall	_sprintf
  2346                           
  2347                           ;main.c: 121: EUSART_SendString("Cold_Junction temperature is: ");
  2348  0EA0  302C               	movlw	low (STR_2| (0+32768))
  2349  0EA1  00F6               	movwf	EUSART_SendString@s
  2350  0EA2  3091               	movlw	high (STR_2| (0+32768))
  2351  0EA3  00F7               	movwf	EUSART_SendString@s+1
  2352  0EA4  3194  24DE  318D   	fcall	_EUSART_SendString
  2353                           
  2354                           ;main.c: 122: EUSART_SendString(s);
  2355  0EA7  3020               	movlw	low _s
  2356  0EA8  00F6               	movwf	EUSART_SendString@s
  2357  0EA9  3001               	movlw	high _s
  2358  0EAA  00F7               	movwf	EUSART_SendString@s+1
  2359  0EAB  3194  24DE  318D   	fcall	_EUSART_SendString
  2360                           
  2361                           ;main.c: 123: EUSART_SendString("\n\r");
  2362  0EAE  3081               	movlw	low ((STR_8+25)| (0+32768))
  2363  0EAF  00F6               	movwf	EUSART_SendString@s
  2364  0EB0  3091               	movlw	high ((STR_8+25)| (0+32768))
  2365  0EB1  00F7               	movwf	EUSART_SendString@s+1
  2366  0EB2  3194  24DE  318D   	fcall	_EUSART_SendString
  2367                           
  2368                           ;main.c: 125: temperature_value = 0;
  2369  0EB5  3000               	movlw	0
  2370  0EB6  0021               	movlb	1	; select bank1
  2371  0EB7  00BC               	movwf	(_temperature_value+3)^(0+128)
  2372  0EB8  3000               	movlw	0
  2373  0EB9  00BB               	movwf	(_temperature_value+2)^(0+128)
  2374  0EBA  3000               	movlw	0
  2375  0EBB  00BA               	movwf	(_temperature_value+1)^(0+128)
  2376  0EBC  3000               	movlw	0
  2377  0EBD  00B9               	movwf	_temperature_value^(0+128)
  2378                           
  2379                           ;main.c: 127: temperature_value <<=8;
  2380  0EBE  3008               	movlw	8
  2381  0EBF                     u4005:	
  2382  0EBF  35B9               	lslf	_temperature_value^(0+128),f
  2383  0EC0  0DBA               	rlf	(_temperature_value+1)^(0+128),f
  2384  0EC1  0DBB               	rlf	(_temperature_value+2)^(0+128),f
  2385  0EC2  0DBC               	rlf	(_temperature_value+3)^(0+128),f
  2386  0EC3  0B89               	decfsz	9,f
  2387  0EC4  2EBF               	goto	u4005
  2388                           
  2389                           ;main.c: 128: temperature_value |= uch_ltcbh ;
  2390  0EC5  0020               	movlb	0	; select bank0
  2391  0EC6  086D               	movf	_uch_ltcbh,w
  2392  0EC7  0021               	movlb	1	; select bank1
  2393  0EC8  04B9               	iorwf	_temperature_value^(0+128),f
  2394                           
  2395                           ;main.c: 129: temperature_value <<=8;
  2396  0EC9  3008               	movlw	8
  2397  0ECA                     u4015:	
  2398  0ECA  35B9               	lslf	_temperature_value^(0+128),f
  2399  0ECB  0DBA               	rlf	(_temperature_value+1)^(0+128),f
  2400  0ECC  0DBB               	rlf	(_temperature_value+2)^(0+128),f
  2401  0ECD  0DBC               	rlf	(_temperature_value+3)^(0+128),f
  2402  0ECE  0B89               	decfsz	9,f
  2403  0ECF  2ECA               	goto	u4015
  2404                           
  2405                           ;main.c: 130: temperature_value |= uch_ltcbm ;
  2406  0ED0  0846               	movf	_uch_ltcbm^(0+128),w
  2407  0ED1  04B9               	iorwf	_temperature_value^(0+128),f
  2408                           
  2409                           ;main.c: 131: temperature_value <<=8;
  2410  0ED2  3008               	movlw	8
  2411  0ED3                     u4025:	
  2412  0ED3  35B9               	lslf	_temperature_value^(0+128),f
  2413  0ED4  0DBA               	rlf	(_temperature_value+1)^(0+128),f
  2414  0ED5  0DBB               	rlf	(_temperature_value+2)^(0+128),f
  2415  0ED6  0DBC               	rlf	(_temperature_value+3)^(0+128),f
  2416  0ED7  0B89               	decfsz	9,f
  2417  0ED8  2ED3               	goto	u4025
  2418                           
  2419                           ;main.c: 132: temperature_value |= uch_ltcbl ;
  2420  0ED9  0845               	movf	_uch_ltcbl^(0+128),w
  2421  0EDA  04B9               	iorwf	_temperature_value^(0+128),f
  2422                           
  2423                           ;main.c: 133: temperature_value>>=5;
  2424  0EDB  3005               	movlw	5
  2425  0EDC                     u4035:	
  2426  0EDC  36BC               	lsrf	(_temperature_value+3)^(0+128),f
  2427  0EDD  0CBB               	rrf	(_temperature_value+2)^(0+128),f
  2428  0EDE  0CBA               	rrf	(_temperature_value+1)^(0+128),f
  2429  0EDF  0CB9               	rrf	_temperature_value^(0+128),f
  2430  0EE0  0B89               	decfsz	9,f
  2431  0EE1  2EDC               	goto	u4035
  2432                           
  2433                           ;main.c: 134: if((uch_ltcbh&0x80)==0x80)
  2434  0EE2  0020               	movlb	0	; select bank0
  2435  0EE3  1FED               	btfss	_uch_ltcbh,7
  2436  0EE4  2F4B               	goto	l2991
  2437                           
  2438                           ;main.c: 135: {
  2439                           ;main.c: 136: temperature_value=0x7FFFF-temperature_value+1;
  2440  0EE5  3000               	movlw	0
  2441  0EE6  00E4               	movwf	??_main
  2442  0EE7  3000               	movlw	0
  2443  0EE8  00E5               	movwf	??_main+1
  2444  0EE9  3008               	movlw	8
  2445  0EEA  00E6               	movwf	??_main+2
  2446  0EEB  3000               	movlw	0
  2447  0EEC  00E7               	movwf	??_main+3
  2448  0EED  0021               	movlb	1	; select bank1
  2449  0EEE  0939               	comf	_temperature_value^(0+128),w
  2450  0EEF  0020               	movlb	0	; select bank0
  2451  0EF0  00E8               	movwf	??_main+4
  2452  0EF1  0021               	movlb	1	; select bank1
  2453  0EF2  093A               	comf	(_temperature_value+1)^(0+128),w
  2454  0EF3  0020               	movlb	0	; select bank0
  2455  0EF4  00E9               	movwf	??_main+5
  2456  0EF5  0021               	movlb	1	; select bank1
  2457  0EF6  093B               	comf	(_temperature_value+2)^(0+128),w
  2458  0EF7  0020               	movlb	0	; select bank0
  2459  0EF8  00EA               	movwf	??_main+6
  2460  0EF9  0021               	movlb	1	; select bank1
  2461  0EFA  093C               	comf	(_temperature_value+3)^(0+128),w
  2462  0EFB  0020               	movlb	0	; select bank0
  2463  0EFC  00EB               	movwf	??_main+7
  2464  0EFD  0AE8               	incf	??_main+4,f
  2465  0EFE  1903               	skipnz
  2466  0EFF  0AE9               	incf	??_main+5,f
  2467  0F00  1903               	skipnz
  2468  0F01  0AEA               	incf	??_main+6,f
  2469  0F02  1903               	skipnz
  2470  0F03  0AEB               	incf	??_main+7,f
  2471  0F04  0868               	movf	??_main+4,w
  2472  0F05  07E4               	addwf	??_main,f
  2473  0F06  0869               	movf	??_main+5,w
  2474  0F07  3DE5               	addwfc	??_main+1,f
  2475  0F08  086A               	movf	??_main+6,w
  2476  0F09  3DE6               	addwfc	??_main+2,f
  2477  0F0A  086B               	movf	??_main+7,w
  2478  0F0B  3DE7               	addwfc	??_main+3,f
  2479  0F0C  0867               	movf	??_main+3,w
  2480  0F0D  0021               	movlb	1	; select bank1
  2481  0F0E  00BC               	movwf	(_temperature_value+3)^(0+128)
  2482  0F0F  0020               	movlb	0	; select bank0
  2483  0F10  0866               	movf	??_main+2,w
  2484  0F11  0021               	movlb	1	; select bank1
  2485  0F12  00BB               	movwf	(_temperature_value+2)^(0+128)
  2486  0F13  0020               	movlb	0	; select bank0
  2487  0F14  0865               	movf	??_main+1,w
  2488  0F15  0021               	movlb	1	; select bank1
  2489  0F16  00BA               	movwf	(_temperature_value+1)^(0+128)
  2490  0F17  0020               	movlb	0	; select bank0
  2491  0F18  0864               	movf	??_main,w
  2492  0F19  0021               	movlb	1	; select bank1
  2493  0F1A  00B9               	movwf	_temperature_value^(0+128)
  2494                           
  2495                           ;main.c: 137: f_linearized_tc_temperature=0-temperature_value*0.0078125;
  2496  0F1B  083C               	movf	(_temperature_value+3)^(0+128),w
  2497  0F1C  00FB               	movwf	___lltoft@c+3
  2498  0F1D  083B               	movf	(_temperature_value+2)^(0+128),w
  2499  0F1E  00FA               	movwf	___lltoft@c+2
  2500  0F1F  083A               	movf	(_temperature_value+1)^(0+128),w
  2501  0F20  00F9               	movwf	___lltoft@c+1
  2502  0F21  0839               	movf	_temperature_value^(0+128),w
  2503  0F22  00F8               	movwf	___lltoft@c
  2504  0F23  3194  24B6  318D   	fcall	___lltoft
  2505  0F26  0878               	movf	?___lltoft,w
  2506  0F27  0020               	movlb	0	; select bank0
  2507  0F28  00AB               	movwf	___ftmul@f2
  2508  0F29  0879               	movf	?___lltoft+1,w
  2509  0F2A  00AC               	movwf	___ftmul@f2+1
  2510  0F2B  087A               	movf	?___lltoft+2,w
  2511  0F2C  00AD               	movwf	___ftmul@f2+2
  2512  0F2D  3000               	movlw	0
  2513  0F2E  00A8               	movwf	___ftmul@f1
  2514  0F2F  3000               	movlw	0
  2515  0F30  00A9               	movwf	___ftmul@f1+1
  2516  0F31  303C               	movlw	60
  2517  0F32  00AA               	movwf	___ftmul@f1+2
  2518  0F33  3197  274C  318D   	fcall	___ftmul
  2519  0F36  0020               	movlb	0	; select bank0
  2520  0F37  0828               	movf	?___ftmul,w
  2521  0F38  00B8               	movwf	___ftneg@f1
  2522  0F39  0829               	movf	?___ftmul+1,w
  2523  0F3A  00B9               	movwf	___ftneg@f1+1
  2524  0F3B  082A               	movf	?___ftmul+2,w
  2525  0F3C  00BA               	movwf	___ftneg@f1+2
  2526  0F3D  3193  23CC  318D   	fcall	___ftneg
  2527  0F40  0020               	movlb	0	; select bank0
  2528  0F41  0838               	movf	?___ftneg,w
  2529  0F42  0021               	movlb	1	; select bank1
  2530  0F43  00C0               	movwf	_f_linearized_tc_temperature^(0+128)
  2531  0F44  0020               	movlb	0	; select bank0
  2532  0F45  0839               	movf	?___ftneg+1,w
  2533  0F46  0021               	movlb	1	; select bank1
  2534  0F47  00C1               	movwf	(_f_linearized_tc_temperature+1)^(0+128)
  2535  0F48  0020               	movlb	0	; select bank0
  2536  0F49  083A               	movf	?___ftneg+2,w
  2537  0F4A  2F72               	goto	L2
  2538  0F4B                     l2991:	
  2539                           ;main.c: 138: }
  2540                           
  2541                           
  2542                           ;main.c: 139: else
  2543                           ;main.c: 140: f_linearized_tc_temperature=temperature_value*0.0078125;
  2544  0F4B  3000               	movlw	0
  2545  0F4C  0020               	movlb	0	; select bank0
  2546  0F4D  00A8               	movwf	___ftmul@f1
  2547  0F4E  3000               	movlw	0
  2548  0F4F  00A9               	movwf	___ftmul@f1+1
  2549  0F50  303C               	movlw	60
  2550  0F51  00AA               	movwf	___ftmul@f1+2
  2551  0F52  0021               	movlb	1	; select bank1
  2552  0F53  083C               	movf	(_temperature_value+3)^(0+128),w
  2553  0F54  00FB               	movwf	___lltoft@c+3
  2554  0F55  083B               	movf	(_temperature_value+2)^(0+128),w
  2555  0F56  00FA               	movwf	___lltoft@c+2
  2556  0F57  083A               	movf	(_temperature_value+1)^(0+128),w
  2557  0F58  00F9               	movwf	___lltoft@c+1
  2558  0F59  0839               	movf	_temperature_value^(0+128),w
  2559  0F5A  00F8               	movwf	___lltoft@c
  2560  0F5B  3194  24B6  318D   	fcall	___lltoft
  2561  0F5E  0878               	movf	?___lltoft,w
  2562  0F5F  0020               	movlb	0	; select bank0
  2563  0F60  00AB               	movwf	___ftmul@f2
  2564  0F61  0879               	movf	?___lltoft+1,w
  2565  0F62  00AC               	movwf	___ftmul@f2+1
  2566  0F63  087A               	movf	?___lltoft+2,w
  2567  0F64  00AD               	movwf	___ftmul@f2+2
  2568  0F65  3197  274C  318D   	fcall	___ftmul
  2569  0F68  0020               	movlb	0	; select bank0
  2570  0F69  0828               	movf	?___ftmul,w
  2571  0F6A  0021               	movlb	1	; select bank1
  2572  0F6B  00C0               	movwf	_f_linearized_tc_temperature^(0+128)
  2573  0F6C  0020               	movlb	0	; select bank0
  2574  0F6D  0829               	movf	?___ftmul+1,w
  2575  0F6E  0021               	movlb	1	; select bank1
  2576  0F6F  00C1               	movwf	(_f_linearized_tc_temperature+1)^(0+128)
  2577  0F70  0020               	movlb	0	; select bank0
  2578  0F71  082A               	movf	?___ftmul+2,w
  2579  0F72                     L2:	
  2580  0F72  0021               	movlb	1	; select bank1
  2581  0F73  00C2               	movwf	(_f_linearized_tc_temperature+2)^(0+128)
  2582                           
  2583                           ;main.c: 143: sprintf(s,"%f",f_linearized_tc_temperature);
  2584  0F74  30BF               	movlw	low (STR_4| (0+32768))
  2585  0F75  0020               	movlb	0	; select bank0
  2586  0F76  00D9               	movwf	sprintf@f
  2587  0F77  3091               	movlw	high (STR_4| (0+32768))
  2588  0F78  00DA               	movwf	sprintf@f+1
  2589  0F79  0021               	movlb	1	; select bank1
  2590  0F7A  0840               	movf	_f_linearized_tc_temperature^(0+128),w
  2591  0F7B  0020               	movlb	0	; select bank0
  2592  0F7C  00DB               	movwf	?_sprintf+2
  2593  0F7D  0021               	movlb	1	; select bank1
  2594  0F7E  0841               	movf	(_f_linearized_tc_temperature+1)^(0+128),w
  2595  0F7F  0020               	movlb	0	; select bank0
  2596  0F80  00DC               	movwf	?_sprintf+3
  2597  0F81  0021               	movlb	1	; select bank1
  2598  0F82  0842               	movf	(_f_linearized_tc_temperature+2)^(0+128),w
  2599  0F83  0020               	movlb	0	; select bank0
  2600  0F84  00DD               	movwf	?_sprintf+4
  2601  0F85  3020               	movlw	(low (_s| (0+256)))& (0+255)
  2602  0F86  3181  21D2  318D   	fcall	_sprintf
  2603                           
  2604                           ;main.c: 144: EUSART_SendString("Thermocouple Temperature is:  ");
  2605  0F89  300D               	movlw	low (STR_5| (0+32768))
  2606  0F8A  00F6               	movwf	EUSART_SendString@s
  2607  0F8B  3091               	movlw	high (STR_5| (0+32768))
  2608  0F8C  00F7               	movwf	EUSART_SendString@s+1
  2609  0F8D  3194  24DE  318D   	fcall	_EUSART_SendString
  2610                           
  2611                           ;main.c: 145: EUSART_SendString(s);
  2612  0F90  3020               	movlw	low _s
  2613  0F91  00F6               	movwf	EUSART_SendString@s
  2614  0F92  3001               	movlw	high _s
  2615  0F93  00F7               	movwf	EUSART_SendString@s+1
  2616  0F94  3194  24DE  318D   	fcall	_EUSART_SendString
  2617                           
  2618                           ;main.c: 146: EUSART_SendString("\n\r");
  2619  0F97  3081               	movlw	low ((STR_8+25)| (0+32768))
  2620  0F98  00F6               	movwf	EUSART_SendString@s
  2621  0F99  3091               	movlw	high ((STR_8+25)| (0+32768))
  2622  0F9A  00F7               	movwf	EUSART_SendString@s+1
  2623  0F9B  3194  24DE  318D   	fcall	_EUSART_SendString
  2624                           
  2625                           ;main.c: 147: }
  2626  0F9E  2D99               	goto	l2931
  2627  0F9F                     l197:	
  2628                           
  2629                           ;main.c: 148: else
  2630                           ;main.c: 149: {
  2631                           ;main.c: 150: if((uch_sr&(uint8_t)0x80)==(uint8_t)0x80)
  2632  0F9F  1FEE               	btfss	_uch_sr,7
  2633  0FA0  2FA8               	goto	l3003
  2634                           
  2635                           ;main.c: 151: EUSART_SendString("Cold Junction Out-of-Range\n\r");
  2636  0FA1  304B               	movlw	low (STR_7| (0+32768))
  2637  0FA2  00F6               	movwf	EUSART_SendString@s
  2638  0FA3  3091               	movlw	high (STR_7| (0+32768))
  2639  0FA4  00F7               	movwf	EUSART_SendString@s+1
  2640  0FA5  3194  24DE  318D   	fcall	_EUSART_SendString
  2641  0FA8                     l3003:	
  2642                           
  2643                           ;main.c: 152: if((uch_sr&(uint8_t)0x40)==(uint8_t)0x40)
  2644  0FA8  0020               	movlb	0	; select bank0
  2645  0FA9  1F6E               	btfss	_uch_sr,6
  2646  0FAA  2FB2               	goto	l3007
  2647                           
  2648                           ;main.c: 153: EUSART_SendString("Thermocouple Out-of-Range\n\r");
  2649  0FAB  3068               	movlw	low (STR_8| (0+32768))
  2650  0FAC  00F6               	movwf	EUSART_SendString@s
  2651  0FAD  3091               	movlw	high (STR_8| (0+32768))
  2652  0FAE  00F7               	movwf	EUSART_SendString@s+1
  2653  0FAF  3194  24DE  318D   	fcall	_EUSART_SendString
  2654  0FB2                     l3007:	
  2655                           
  2656                           ;main.c: 154: if((uch_sr&(uint8_t)0x20)==(uint8_t)0x20)
  2657  0FB2  0020               	movlb	0	; select bank0
  2658  0FB3  1EEE               	btfss	_uch_sr,5
  2659  0FB4  2FBC               	goto	l3011
  2660                           
  2661                           ;main.c: 155: EUSART_SendString("Cold Junction High Fault\n\r");
  2662  0FB5  3084               	movlw	low (STR_9| (0+32768))
  2663  0FB6  00F6               	movwf	EUSART_SendString@s
  2664  0FB7  3091               	movlw	high (STR_9| (0+32768))
  2665  0FB8  00F7               	movwf	EUSART_SendString@s+1
  2666  0FB9  3194  24DE  318D   	fcall	_EUSART_SendString
  2667  0FBC                     l3011:	
  2668                           
  2669                           ;main.c: 156: if((uch_sr&(uint8_t)0x10)==(uint8_t)0x10)
  2670  0FBC  0020               	movlb	0	; select bank0
  2671  0FBD  1E6E               	btfss	_uch_sr,4
  2672  0FBE  2FC6               	goto	l3015
  2673                           
  2674                           ;main.c: 157: EUSART_SendString("Cold Junction Low Fault\n\r");
  2675  0FBF  309F               	movlw	low (STR_10| (0+32768))
  2676  0FC0  00F6               	movwf	EUSART_SendString@s
  2677  0FC1  3091               	movlw	high (STR_10| (0+32768))
  2678  0FC2  00F7               	movwf	EUSART_SendString@s+1
  2679  0FC3  3194  24DE  318D   	fcall	_EUSART_SendString
  2680  0FC6                     l3015:	
  2681                           
  2682                           ;main.c: 158: if((uch_sr&(uint8_t)0x08)==(uint8_t)0x08)
  2683  0FC6  0020               	movlb	0	; select bank0
  2684  0FC7  1DEE               	btfss	_uch_sr,3
  2685  0FC8  2FD0               	goto	l3019
  2686                           
  2687                           ;main.c: 159: EUSART_SendString("Thermocouple Temperature High Fault\n\r");
  2688  0FC9  30A0               	movlw	low (STR_11| (0+32768))
  2689  0FCA  00F6               	movwf	EUSART_SendString@s
  2690  0FCB  3090               	movlw	high (STR_11| (0+32768))
  2691  0FCC  00F7               	movwf	EUSART_SendString@s+1
  2692  0FCD  3194  24DE  318D   	fcall	_EUSART_SendString
  2693  0FD0                     l3019:	
  2694                           
  2695                           ;main.c: 160: if((uch_sr&(uint8_t)0x04)==(uint8_t)0x04)
  2696  0FD0  0020               	movlb	0	; select bank0
  2697  0FD1  1D6E               	btfss	_uch_sr,2
  2698  0FD2  2FDA               	goto	l3023
  2699                           
  2700                           ;main.c: 161: EUSART_SendString("Thermocouple Temperature Low Fault\n\r");
  2701  0FD3  30C6               	movlw	low (STR_12| (0+32768))
  2702  0FD4  00F6               	movwf	EUSART_SendString@s
  2703  0FD5  3090               	movlw	high (STR_12| (0+32768))
  2704  0FD6  00F7               	movwf	EUSART_SendString@s+1
  2705  0FD7  3194  24DE  318D   	fcall	_EUSART_SendString
  2706  0FDA                     l3023:	
  2707                           
  2708                           ;main.c: 162: if((uch_sr&(uint8_t)0x02)==(uint8_t)0x02)
  2709  0FDA  0020               	movlb	0	; select bank0
  2710  0FDB  1CEE               	btfss	_uch_sr,1
  2711  0FDC  2FE4               	goto	l3027
  2712                           
  2713                           ;main.c: 163: EUSART_SendString("Overvoltage or Undervoltage Input Fault\n\r");
  2714  0FDD  3076               	movlw	low (STR_13| (0+32768))
  2715  0FDE  00F6               	movwf	EUSART_SendString@s
  2716  0FDF  3090               	movlw	high (STR_13| (0+32768))
  2717  0FE0  00F7               	movwf	EUSART_SendString@s+1
  2718  0FE1  3194  24DE  318D   	fcall	_EUSART_SendString
  2719  0FE4                     l3027:	
  2720                           
  2721                           ;main.c: 164: if((uch_sr&(uint8_t)0x01)==(uint8_t)0x01)
  2722  0FE4  0020               	movlb	0	; select bank0
  2723  0FE5  1C6E               	btfss	_uch_sr,0
  2724  0FE6  2FEE               	goto	l3031
  2725                           
  2726                           ;main.c: 165: EUSART_SendString("Thermocouple Open-Circuit Fault\n\r");
  2727  0FE7  30EB               	movlw	low (STR_14| (0+32768))
  2728  0FE8  00F6               	movwf	EUSART_SendString@s
  2729  0FE9  3090               	movlw	high (STR_14| (0+32768))
  2730  0FEA  00F7               	movwf	EUSART_SendString@s+1
  2731  0FEB  3194  24DE  318D   	fcall	_EUSART_SendString
  2732  0FEE                     l3031:	
  2733                           
  2734                           ;main.c: 168: maxim_31856_write_register(0x82, 0xFF);
  2735  0FEE  30FF               	movlw	255
  2736  0FEF  0020               	movlb	0	; select bank0
  2737  0FF0  00E4               	movwf	??_main
  2738  0FF1  0864               	movf	??_main,w
  2739  0FF2  00F1               	movwf	maxim_31856_write_register@uch_register_value
  2740  0FF3  3082               	movlw	130
  2741  0FF4  3193  23ED  318D   	fcall	_maxim_31856_write_register
  2742                           
  2743                           ;main.c: 169: maxim_clear_fault_status();
  2744  0FF7  3194  2419  318D   	fcall	_maxim_clear_fault_status
  2745                           
  2746                           ;main.c: 170: maxim_31856_write_register(0x82, 0x00);
  2747  0FFA  01F1               	clrf	maxim_31856_write_register@uch_register_value
  2748  0FFB  3082               	movlw	130
  2749  0FFC  3193  23ED  318D   	fcall	_maxim_31856_write_register
  2750  0FFF  2D99               	goto	l2931
  2751  1000                     __end_of_main:	
  2752                           
  2753                           	psect	text1
  2754  01D2                     __ptext1:	
  2755 ;; *************** function _sprintf *****************
  2756 ;; Defined at:
  2757 ;;		line 492 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  sp              1    wreg     PTR unsigned char 
  2760 ;;		 -> s(64), 
  2761 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  2762 ;;		 -> STR_4(3), STR_1(6), 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  2765 ;;		 -> s(64), 
  2766 ;;  tmpval          4   12[BANK1 ] struct .
  2767 ;;  val             4    4[BANK1 ] unsigned long 
  2768 ;;  fval            3   18[BANK1 ] unsigned long 
  2769 ;;  prec            2   22[BANK1 ] int 
  2770 ;;  exp             2   16[BANK1 ] int 
  2771 ;;  width           2   10[BANK1 ] int 
  2772 ;;  flag            2    8[BANK1 ] unsigned short 
  2773 ;;  cp              2    0        PTR const unsigned char 
  2774 ;;  len             2    0        unsigned int 
  2775 ;;  c               1   24[BANK1 ] char 
  2776 ;;  ap              1    3[BANK1 ] PTR void [1]
  2777 ;;		 -> ?_sprintf(2), 
  2778 ;;  d               1    0        unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  2   57[BANK0 ] int 
  2781 ;; Registers used:
  2782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2788 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2789 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  2790 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2791 ;;      Totals:         0      11      25       0       0       0       0       0       0       0       0       0       
      +0       0
  2792 ;;Total ram usage:       36 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    3
  2795 ;; This function calls:
  2796 ;;		___awdiv
  2797 ;;		___ftadd
  2798 ;;		___ftge
  2799 ;;		___ftmul
  2800 ;;		___ftneg
  2801 ;;		___ftsub
  2802 ;;		___fttol
  2803 ;;		___lldiv
  2804 ;;		___llmod
  2805 ;;		___lltoft
  2806 ;;		___wmul
  2807 ;;		__div_to_l_
  2808 ;;		__tdiv_to_l_
  2809 ;;		_fround
  2810 ;;		_isdigit
  2811 ;;		_scale
  2812 ;; This function is called by:
  2813 ;;		_main
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _sprintf
  2819  01D2                     _sprintf:	
  2820                           
  2821                           ;incstack = 0
  2822                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2823                           ;sprintf@sp stored from wreg
  2824  01D2  0021               	movlb	1	; select bank1
  2825  01D3  00B5               	movwf	sprintf@sp^(0+128)
  2826                           
  2827                           ;doprnt.c: 494: va_list ap;
  2828                           ;doprnt.c: 499: signed char c;
  2829                           ;doprnt.c: 501: int width;
  2830                           ;doprnt.c: 504: int prec;
  2831                           ;doprnt.c: 508: unsigned short flag;
  2832                           ;doprnt.c: 515: char d;
  2833                           ;doprnt.c: 516: double fval;
  2834                           ;doprnt.c: 517: int exp;
  2835                           ;doprnt.c: 523: union {
  2836                           ;doprnt.c: 524: unsigned long vd;
  2837                           ;doprnt.c: 525: double integ;
  2838                           ;doprnt.c: 526: } tmpval;
  2839                           ;doprnt.c: 528: unsigned long val;
  2840                           ;doprnt.c: 529: unsigned len;
  2841                           ;doprnt.c: 530: const char * cp;
  2842                           ;doprnt.c: 533: *ap = __va_start();
  2843  01D4  305B               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2844  01D5  0020               	movlb	0	; select bank0
  2845  01D6  00DE               	movwf	??_sprintf
  2846  01D7  085E               	movf	??_sprintf,w
  2847  01D8  0021               	movlb	1	; select bank1
  2848  01D9  00A3               	movwf	sprintf@ap^(0+128)
  2849  01DA                     l2895:	
  2850                           ;doprnt.c: 536: while(c = *f++) {
  2851                           
  2852  01DA  0020               	movlb	0	; select bank0
  2853  01DB  085A               	movf	sprintf@f+1,w
  2854  01DC  00DF               	movwf	??_sprintf+1
  2855  01DD  0859               	movf	sprintf@f,w
  2856  01DE  00DE               	movwf	??_sprintf
  2857  01DF  0AD9               	incf	sprintf@f,f
  2858  01E0  1903               	skipnz
  2859  01E1  0ADA               	incf	sprintf@f+1,f
  2860  01E2  085E               	movf	??_sprintf,w
  2861  01E3  0084               	movwf	4
  2862  01E4  085F               	movf	??_sprintf+1,w
  2863  01E5  0085               	movwf	5
  2864  01E6  0800               	movf	0,w	;code access
  2865  01E7  00E0               	movwf	??_sprintf+2
  2866  01E8  0860               	movf	??_sprintf+2,w
  2867  01E9  0021               	movlb	1	; select bank1
  2868  01EA  00B8               	movwf	sprintf@c^(0+128)
  2869  01EB  0838               	movf	sprintf@c^(0+128),w
  2870  01EC  1903               	btfsc	3,2
  2871  01ED  2FE5               	goto	l2897
  2872                           
  2873                           ;doprnt.c: 538: if(c != '%')
  2874  01EE  3025               	movlw	37
  2875  01EF  0638               	xorwf	sprintf@c^(0+128),w
  2876  01F0  1903               	btfsc	3,2
  2877  01F1  29F5               	goto	l2655
  2878                           
  2879                           ;doprnt.c: 540: {
  2880                           ;doprnt.c: 541: ((*sp++ = (c)));
  2881  01F2  0838               	movf	sprintf@c^(0+128),w
  2882  01F3  0020               	movlb	0	; select bank0
  2883  01F4  2FD6               	goto	L8
  2884  01F5                     l2655:	
  2885                           ;doprnt.c: 542: continue;
  2886                           
  2887                           
  2888                           ;doprnt.c: 543: }
  2889                           ;doprnt.c: 546: width = 0;
  2890  01F5  01AA               	clrf	sprintf@width^(0+128)
  2891  01F6  01AB               	clrf	(sprintf@width+1)^(0+128)
  2892                           
  2893                           ;doprnt.c: 548: flag = 0;
  2894  01F7  01A8               	clrf	sprintf@flag^(0+128)
  2895  01F8  01A9               	clrf	(sprintf@flag+1)^(0+128)
  2896                           
  2897                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2898  01F9  0020               	movlb	0	; select bank0
  2899  01FA  0859               	movf	sprintf@f,w
  2900  01FB  0084               	movwf	4
  2901  01FC  085A               	movf	sprintf@f+1,w
  2902  01FD  0085               	movwf	5
  2903  01FE  0800               	movf	0,w	;code access
  2904  01FF  3193  23FA  3181   	fcall	_isdigit
  2905  0202  1C03               	btfss	3,0
  2906  0203  2A41               	goto	l2669
  2907                           
  2908                           ;doprnt.c: 598: width = 0;
  2909  0204  0021               	movlb	1	; select bank1
  2910  0205  01AA               	clrf	sprintf@width^(0+128)
  2911  0206  01AB               	clrf	(sprintf@width+1)^(0+128)
  2912  0207                     l2661:	
  2913                           ;doprnt.c: 599: do {
  2914                           
  2915                           
  2916                           ;doprnt.c: 600: width *= 10;
  2917  0207  300A               	movlw	10
  2918  0208  0020               	movlb	0	; select bank0
  2919  0209  00A4               	movwf	___wmul@multiplier
  2920  020A  3000               	movlw	0
  2921  020B  00A5               	movwf	___wmul@multiplier+1
  2922  020C  0021               	movlb	1	; select bank1
  2923  020D  082B               	movf	(sprintf@width+1)^(0+128),w
  2924  020E  0020               	movlb	0	; select bank0
  2925  020F  00A7               	movwf	___wmul@multiplicand+1
  2926  0210  0021               	movlb	1	; select bank1
  2927  0211  082A               	movf	sprintf@width^(0+128),w
  2928  0212  0020               	movlb	0	; select bank0
  2929  0213  00A6               	movwf	___wmul@multiplicand
  2930  0214  3188  2000  3181   	fcall	___wmul
  2931  0217  0020               	movlb	0	; select bank0
  2932  0218  0825               	movf	?___wmul+1,w
  2933  0219  0021               	movlb	1	; select bank1
  2934  021A  00AB               	movwf	(sprintf@width+1)^(0+128)
  2935  021B  0020               	movlb	0	; select bank0
  2936  021C  0824               	movf	?___wmul,w
  2937  021D  0021               	movlb	1	; select bank1
  2938  021E  00AA               	movwf	sprintf@width^(0+128)
  2939                           
  2940                           ;doprnt.c: 601: width += *f++ - '0';
  2941  021F  0020               	movlb	0	; select bank0
  2942  0220  0859               	movf	sprintf@f,w
  2943  0221  0084               	movwf	4
  2944  0222  085A               	movf	sprintf@f+1,w
  2945  0223  0085               	movwf	5
  2946  0224  0800               	movf	0,w	;code access
  2947  0225  3ED0               	addlw	208
  2948  0226  00DE               	movwf	??_sprintf
  2949  0227  30FF               	movlw	255
  2950  0228  1803               	skipnc
  2951  0229  3000               	movlw	0
  2952  022A  00DF               	movwf	??_sprintf+1
  2953  022B  085E               	movf	??_sprintf,w
  2954  022C  0021               	movlb	1	; select bank1
  2955  022D  07AA               	addwf	sprintf@width^(0+128),f
  2956  022E  0020               	movlb	0	; select bank0
  2957  022F  085F               	movf	??_sprintf+1,w
  2958  0230  0021               	movlb	1	; select bank1
  2959  0231  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  2960  0232  3001               	movlw	1
  2961  0233  0020               	movlb	0	; select bank0
  2962  0234  07D9               	addwf	sprintf@f,f
  2963  0235  3000               	movlw	0
  2964  0236  3DDA               	addwfc	sprintf@f+1,f
  2965                           
  2966                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2967  0237  0859               	movf	sprintf@f,w
  2968  0238  0084               	movwf	4
  2969  0239  085A               	movf	sprintf@f+1,w
  2970  023A  0085               	movwf	5
  2971  023B  0800               	movf	0,w	;code access
  2972  023C  3193  23FA  3181   	fcall	_isdigit
  2973  023F  1803               	btfsc	3,0
  2974  0240  2A07               	goto	l2661
  2975  0241                     l2669:	
  2976                           
  2977                           ;doprnt.c: 608: }
  2978                           ;doprnt.c: 611: if(*f == '.') {
  2979  0241  0020               	movlb	0	; select bank0
  2980  0242  0859               	movf	sprintf@f,w
  2981  0243  0084               	movwf	4
  2982  0244  085A               	movf	sprintf@f+1,w
  2983  0245  0085               	movwf	5
  2984  0246  0012               	moviw fsr0++
  2985  0247  3A2E               	xorlw	46
  2986  0248  1D03               	btfss	3,2
  2987  0249  2A8C               	goto	l2683
  2988                           
  2989                           ;doprnt.c: 612: flag |= 0x4000;
  2990  024A  0021               	movlb	1	; select bank1
  2991  024B  1729               	bsf	(sprintf@flag^(0+128)+1),6
  2992                           
  2993                           ;doprnt.c: 613: f++;
  2994  024C  3001               	movlw	1
  2995  024D  0020               	movlb	0	; select bank0
  2996  024E  07D9               	addwf	sprintf@f,f
  2997  024F  3000               	movlw	0
  2998  0250  3DDA               	addwfc	sprintf@f+1,f
  2999                           
  3000                           ;doprnt.c: 620: {
  3001                           ;doprnt.c: 621: prec = 0;
  3002  0251  0021               	movlb	1	; select bank1
  3003  0252  01B6               	clrf	sprintf@prec^(0+128)
  3004  0253  01B7               	clrf	(sprintf@prec+1)^(0+128)
  3005  0254                     l2681:	
  3006                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3007                           
  3008  0254  0020               	movlb	0	; select bank0
  3009  0255  0859               	movf	sprintf@f,w
  3010  0256  0084               	movwf	4
  3011  0257  085A               	movf	sprintf@f+1,w
  3012  0258  0085               	movwf	5
  3013  0259  0800               	movf	0,w	;code access
  3014  025A  3193  23FA  3181   	fcall	_isdigit
  3015  025D  1C03               	btfss	3,0
  3016  025E  2A93               	goto	l2689
  3017                           
  3018                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3019  025F  0020               	movlb	0	; select bank0
  3020  0260  0859               	movf	sprintf@f,w
  3021  0261  0084               	movwf	4
  3022  0262  085A               	movf	sprintf@f+1,w
  3023  0263  0085               	movwf	5
  3024  0264  0800               	movf	0,w	;code access
  3025  0265  00DE               	movwf	??_sprintf
  3026  0266  01DF               	clrf	??_sprintf+1
  3027  0267  0021               	movlb	1	; select bank1
  3028  0268  0837               	movf	(sprintf@prec+1)^(0+128),w
  3029  0269  0020               	movlb	0	; select bank0
  3030  026A  00A5               	movwf	___wmul@multiplier+1
  3031  026B  0021               	movlb	1	; select bank1
  3032  026C  0836               	movf	sprintf@prec^(0+128),w
  3033  026D  0020               	movlb	0	; select bank0
  3034  026E  00A4               	movwf	___wmul@multiplier
  3035  026F  300A               	movlw	10
  3036  0270  00A6               	movwf	___wmul@multiplicand
  3037  0271  3000               	movlw	0
  3038  0272  00A7               	movwf	___wmul@multiplicand+1
  3039  0273  3188  2000  3181   	fcall	___wmul
  3040  0276  0020               	movlb	0	; select bank0
  3041  0277  085E               	movf	??_sprintf,w
  3042  0278  0724               	addwf	?___wmul,w
  3043  0279  00E0               	movwf	??_sprintf+2
  3044  027A  085F               	movf	??_sprintf+1,w
  3045  027B  3D25               	addwfc	?___wmul+1,w
  3046  027C  00E1               	movwf	??_sprintf+3
  3047  027D  0860               	movf	??_sprintf+2,w
  3048  027E  3ED0               	addlw	208
  3049  027F  0021               	movlb	1	; select bank1
  3050  0280  00B6               	movwf	sprintf@prec^(0+128)
  3051  0281  30FF               	movlw	255
  3052  0282  0020               	movlb	0	; select bank0
  3053  0283  3D61               	addwfc	??_sprintf+3,w
  3054  0284  0021               	movlb	1	; select bank1
  3055  0285  00B7               	movwf	(sprintf@prec+1)^(0+128)
  3056  0286  3001               	movlw	1
  3057  0287  0020               	movlb	0	; select bank0
  3058  0288  07D9               	addwf	sprintf@f,f
  3059  0289  3000               	movlw	0
  3060  028A  3DDA               	addwfc	sprintf@f+1,f
  3061  028B  2A54               	goto	l2681
  3062  028C                     l2683:	
  3063                           ;doprnt.c: 624: }
  3064                           ;doprnt.c: 625: } else {
  3065                           
  3066                           
  3067                           ;doprnt.c: 626: prec = 0;
  3068  028C  0021               	movlb	1	; select bank1
  3069  028D  01B6               	clrf	sprintf@prec^(0+128)
  3070  028E  01B7               	clrf	(sprintf@prec+1)^(0+128)
  3071                           
  3072                           ;doprnt.c: 628: flag |= 0x1000;
  3073  028F  1629               	bsf	(sprintf@flag^(0+128)+1),4
  3074                           
  3075                           ;doprnt.c: 630: }
  3076                           ;doprnt.c: 635: switch(c = *f++) {
  3077  0290  2A93               	goto	l2689
  3078  0291                     l323:	
  3079                           ;doprnt.c: 662: case 'f':
  3080                           
  3081                           ;doprnt.c: 638: goto alldone;
  3082                           
  3083                           ;doprnt.c: 637: case 0:
  3084                           
  3085                           
  3086                           ;doprnt.c: 663: flag |= 0x400;
  3087  0291  1529               	bsf	(sprintf@flag^(0+128)+1),2
  3088                           
  3089                           ;doprnt.c: 664: break;
  3090  0292  2AA9               	goto	l2691
  3091  0293                     l2689:	
  3092                           ;doprnt.c: 822: }
  3093                           
  3094                           ;doprnt.c: 813: continue;
  3095                           
  3096                           ;doprnt.c: 802: default:
  3097                           
  3098  0293  0020               	movlb	0	; select bank0
  3099  0294  085A               	movf	sprintf@f+1,w
  3100  0295  00DF               	movwf	??_sprintf+1
  3101  0296  0859               	movf	sprintf@f,w
  3102  0297  00DE               	movwf	??_sprintf
  3103  0298  0AD9               	incf	sprintf@f,f
  3104  0299  1903               	skipnz
  3105  029A  0ADA               	incf	sprintf@f+1,f
  3106  029B  085E               	movf	??_sprintf,w
  3107  029C  0084               	movwf	4
  3108  029D  085F               	movf	??_sprintf+1,w
  3109  029E  0085               	movwf	5
  3110  029F  0800               	movf	0,w	;code access
  3111  02A0  0021               	movlb	1	; select bank1
  3112  02A1  00B8               	movwf	sprintf@c^(0+128)
  3113                           
  3114                           ; Switch size 1, requested type "space"
  3115                           ; Number of cases is 2, Range of values is 0 to 102
  3116                           ; switch strategies available:
  3117                           ; Name         Instructions Cycles
  3118                           ; simple_byte            7     4 (average)
  3119                           ; direct_byte          212     6 (fixed)
  3120                           ; jumptable            260     6 (fixed)
  3121                           ;	Chosen strategy is simple_byte
  3122  02A2  3A00               	xorlw	0	; case 0
  3123  02A3  1903               	skipnz
  3124  02A4  2FE5               	goto	l2897
  3125  02A5  3A66               	xorlw	102	; case 102
  3126  02A6  1903               	skipnz
  3127  02A7  2A91               	goto	l323
  3128  02A8  29DA               	goto	l2895
  3129  02A9                     l2691:	
  3130                           
  3131                           ;doprnt.c: 825: if(flag & (0x700)) {
  3132  02A9  3000               	movlw	0
  3133  02AA  0528               	andwf	sprintf@flag^(0+128),w
  3134  02AB  0020               	movlb	0	; select bank0
  3135  02AC  00DE               	movwf	??_sprintf
  3136  02AD  3007               	movlw	7
  3137  02AE  0021               	movlb	1	; select bank1
  3138  02AF  0529               	andwf	(sprintf@flag+1)^(0+128),w
  3139  02B0  0020               	movlb	0	; select bank0
  3140  02B1  00DF               	movwf	??_sprintf+1
  3141  02B2  085E               	movf	??_sprintf,w
  3142  02B3  045F               	iorwf	??_sprintf+1,w
  3143  02B4  1903               	btfsc	3,2
  3144  02B5  2F08               	goto	l2851
  3145                           
  3146                           ;doprnt.c: 827: if(flag & 0x1000)
  3147  02B6  0021               	movlb	1	; select bank1
  3148  02B7  1E29               	btfss	(sprintf@flag+1)^(0+128),4
  3149  02B8  2ABD               	goto	l2697
  3150                           
  3151                           ;doprnt.c: 829: prec = 6;
  3152  02B9  3006               	movlw	6
  3153  02BA  00B6               	movwf	sprintf@prec^(0+128)
  3154  02BB  3000               	movlw	0
  3155  02BC  00B7               	movwf	(sprintf@prec^(0+128)+1)
  3156  02BD                     l2697:	
  3157                           
  3158                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3159  02BD  0823               	movf	sprintf@ap^(0+128),w
  3160  02BE  0086               	movwf	6
  3161  02BF  0187               	clrf	7
  3162  02C0  3F40               	moviw [0]fsr1
  3163  02C1  00B2               	movwf	sprintf@fval^(0+128)
  3164  02C2  3F41               	moviw [1]fsr1
  3165  02C3  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3166  02C4  3F42               	moviw [2]fsr1
  3167  02C5  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3168  02C6  3003               	movlw	3
  3169  02C7  0020               	movlb	0	; select bank0
  3170  02C8  00DE               	movwf	??_sprintf
  3171  02C9  085E               	movf	??_sprintf,w
  3172  02CA  0021               	movlb	1	; select bank1
  3173  02CB  07A3               	addwf	sprintf@ap^(0+128),f
  3174                           
  3175                           ;doprnt.c: 831: if(fval < 0.0) {
  3176  02CC  0832               	movf	sprintf@fval^(0+128),w
  3177  02CD  00F0               	movwf	___ftge@ff1
  3178  02CE  0833               	movf	(sprintf@fval+1)^(0+128),w
  3179  02CF  00F1               	movwf	___ftge@ff1+1
  3180  02D0  0834               	movf	(sprintf@fval+2)^(0+128),w
  3181  02D1  00F2               	movwf	___ftge@ff1+2
  3182  02D2  3000               	movlw	0
  3183  02D3  00F3               	movwf	___ftge@ff2
  3184  02D4  3000               	movlw	0
  3185  02D5  00F4               	movwf	___ftge@ff2+1
  3186  02D6  3000               	movlw	0
  3187  02D7  00F5               	movwf	___ftge@ff2+2
  3188  02D8  3195  2513  3181   	fcall	___ftge
  3189  02DB  1803               	btfsc	3,0
  3190  02DC  2AFC               	goto	l2707
  3191                           
  3192                           ;doprnt.c: 832: fval = -fval;
  3193  02DD  0021               	movlb	1	; select bank1
  3194  02DE  0832               	movf	sprintf@fval^(0+128),w
  3195  02DF  0020               	movlb	0	; select bank0
  3196  02E0  00B8               	movwf	___ftneg@f1
  3197  02E1  0021               	movlb	1	; select bank1
  3198  02E2  0833               	movf	(sprintf@fval+1)^(0+128),w
  3199  02E3  0020               	movlb	0	; select bank0
  3200  02E4  00B9               	movwf	___ftneg@f1+1
  3201  02E5  0021               	movlb	1	; select bank1
  3202  02E6  0834               	movf	(sprintf@fval+2)^(0+128),w
  3203  02E7  0020               	movlb	0	; select bank0
  3204  02E8  00BA               	movwf	___ftneg@f1+2
  3205  02E9  3193  23CC  3181   	fcall	___ftneg
  3206  02EC  0020               	movlb	0	; select bank0
  3207  02ED  0838               	movf	?___ftneg,w
  3208  02EE  0021               	movlb	1	; select bank1
  3209  02EF  00B2               	movwf	sprintf@fval^(0+128)
  3210  02F0  0020               	movlb	0	; select bank0
  3211  02F1  0839               	movf	?___ftneg+1,w
  3212  02F2  0021               	movlb	1	; select bank1
  3213  02F3  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3214  02F4  0020               	movlb	0	; select bank0
  3215  02F5  083A               	movf	?___ftneg+2,w
  3216  02F6  0021               	movlb	1	; select bank1
  3217  02F7  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3218                           
  3219                           ;doprnt.c: 833: flag |= 0x03;
  3220  02F8  3003               	movlw	3
  3221  02F9  04A8               	iorwf	sprintf@flag^(0+128),f
  3222  02FA  3000               	movlw	0
  3223  02FB  04A9               	iorwf	(sprintf@flag+1)^(0+128),f
  3224  02FC                     l2707:	
  3225                           
  3226                           ;doprnt.c: 834: }
  3227                           ;doprnt.c: 835: exp = 0;
  3228  02FC  0021               	movlb	1	; select bank1
  3229  02FD  01B0               	clrf	sprintf@exp^(0+128)
  3230  02FE  01B1               	clrf	(sprintf@exp+1)^(0+128)
  3231                           
  3232                           ;doprnt.c: 836: if( fval!=0) {
  3233  02FF  0834               	movf	(sprintf@fval+2)^(0+128),w
  3234  0300  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  3235  0301  0432               	iorwf	sprintf@fval^(0+128),w
  3236  0302  1903               	skipnz
  3237  0303  2BBC               	goto	l329
  3238                           
  3239                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3240  0304  30B2               	movlw	low (sprintf@fval| 0)
  3241  0305  0086               	movwf	6
  3242  0306  0187               	clrf	7
  3243  0307  3F40               	moviw [0]fsr1
  3244  0308  0020               	movlb	0	; select bank0
  3245  0309  00DE               	movwf	??_sprintf
  3246  030A  3F41               	moviw [1]fsr1
  3247  030B  00DF               	movwf	??_sprintf+1
  3248  030C  3F42               	moviw [2]fsr1
  3249  030D  00E0               	movwf	??_sprintf+2
  3250  030E  3F43               	moviw [3]fsr1
  3251  030F  00E1               	movwf	??_sprintf+3
  3252  0310  300F               	movlw	15
  3253  0311                     u3605:	
  3254  0311  36E1               	lsrf	??_sprintf+3,f
  3255  0312  0CE0               	rrf	??_sprintf+2,f
  3256  0313  0CDF               	rrf	??_sprintf+1,f
  3257  0314  0CDE               	rrf	??_sprintf,f
  3258  0315  0B89               	decfsz	9,f
  3259  0316  2B11               	goto	u3605
  3260  0317  30FF               	movlw	255
  3261  0318  055E               	andwf	??_sprintf,w
  3262  0319  00E2               	movwf	??_sprintf+4
  3263  031A  3000               	movlw	0
  3264  031B  055F               	andwf	??_sprintf+1,w
  3265  031C  00E3               	movwf	??_sprintf+5
  3266  031D  0862               	movf	??_sprintf+4,w
  3267  031E  3E82               	addlw	130
  3268  031F  0021               	movlb	1	; select bank1
  3269  0320  00B0               	movwf	sprintf@exp^(0+128)
  3270  0321  30FF               	movlw	255
  3271  0322  0020               	movlb	0	; select bank0
  3272  0323  3D63               	addwfc	??_sprintf+5,w
  3273  0324  0021               	movlb	1	; select bank1
  3274  0325  00B1               	movwf	(sprintf@exp+1)^(0+128)
  3275                           
  3276                           ;doprnt.c: 838: exp--;
  3277  0326  30FF               	movlw	255
  3278  0327  07B0               	addwf	sprintf@exp^(0+128),f
  3279  0328  30FF               	movlw	255
  3280  0329  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  3281                           
  3282                           ;doprnt.c: 839: exp *= 3;
  3283  032A  3003               	movlw	3
  3284  032B  0020               	movlb	0	; select bank0
  3285  032C  00A4               	movwf	___wmul@multiplier
  3286  032D  3000               	movlw	0
  3287  032E  00A5               	movwf	___wmul@multiplier+1
  3288  032F  0021               	movlb	1	; select bank1
  3289  0330  0831               	movf	(sprintf@exp+1)^(0+128),w
  3290  0331  0020               	movlb	0	; select bank0
  3291  0332  00A7               	movwf	___wmul@multiplicand+1
  3292  0333  0021               	movlb	1	; select bank1
  3293  0334  0830               	movf	sprintf@exp^(0+128),w
  3294  0335  0020               	movlb	0	; select bank0
  3295  0336  00A6               	movwf	___wmul@multiplicand
  3296  0337  3188  2000  3181   	fcall	___wmul
  3297  033A  0020               	movlb	0	; select bank0
  3298  033B  0825               	movf	?___wmul+1,w
  3299  033C  0021               	movlb	1	; select bank1
  3300  033D  00B1               	movwf	(sprintf@exp+1)^(0+128)
  3301  033E  0020               	movlb	0	; select bank0
  3302  033F  0824               	movf	?___wmul,w
  3303  0340  0021               	movlb	1	; select bank1
  3304  0341  00B0               	movwf	sprintf@exp^(0+128)
  3305                           
  3306                           ;doprnt.c: 840: exp /= 10;
  3307  0342  300A               	movlw	10
  3308  0343  00F7               	movwf	___awdiv@divisor
  3309  0344  3000               	movlw	0
  3310  0345  00F8               	movwf	___awdiv@divisor+1
  3311  0346  0831               	movf	(sprintf@exp+1)^(0+128),w
  3312  0347  00FA               	movwf	___awdiv@dividend+1
  3313  0348  0830               	movf	sprintf@exp^(0+128),w
  3314  0349  00F9               	movwf	___awdiv@dividend
  3315  034A  3196  2673  3181   	fcall	___awdiv
  3316  034D  0878               	movf	?___awdiv+1,w
  3317  034E  0021               	movlb	1	; select bank1
  3318  034F  00B1               	movwf	(sprintf@exp+1)^(0+128)
  3319  0350  0877               	movf	?___awdiv,w
  3320  0351  00B0               	movwf	sprintf@exp^(0+128)
  3321                           
  3322                           ;doprnt.c: 841: if(exp < 0)
  3323  0352  1FB1               	btfss	(sprintf@exp+1)^(0+128),7
  3324  0353  2B58               	goto	l2723
  3325                           
  3326                           ;doprnt.c: 842: exp--;
  3327  0354  30FF               	movlw	255
  3328  0355  07B0               	addwf	sprintf@exp^(0+128),f
  3329  0356  30FF               	movlw	255
  3330  0357  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  3331  0358                     l2723:	
  3332                           
  3333                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3334  0358  0330               	decf	sprintf@exp^(0+128),w
  3335  0359  3AFF               	xorlw	255
  3336  035A  318B  2349  3181   	fcall	_scale
  3337  035D  0020               	movlb	0	; select bank0
  3338  035E  0838               	movf	?_scale,w
  3339  035F  0021               	movlb	1	; select bank1
  3340  0360  00AC               	movwf	sprintf@tmpval^(0+128)
  3341  0361  0020               	movlb	0	; select bank0
  3342  0362  0839               	movf	?_scale+1,w
  3343  0363  0021               	movlb	1	; select bank1
  3344  0364  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3345  0365  0020               	movlb	0	; select bank0
  3346  0366  083A               	movf	?_scale+2,w
  3347  0367  0021               	movlb	1	; select bank1
  3348  0368  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3349                           
  3350                           ;doprnt.c: 847: tmpval.integ *= fval;
  3351  0369  0832               	movf	sprintf@fval^(0+128),w
  3352  036A  0020               	movlb	0	; select bank0
  3353  036B  00A8               	movwf	___ftmul@f1
  3354  036C  0021               	movlb	1	; select bank1
  3355  036D  0833               	movf	(sprintf@fval+1)^(0+128),w
  3356  036E  0020               	movlb	0	; select bank0
  3357  036F  00A9               	movwf	___ftmul@f1+1
  3358  0370  0021               	movlb	1	; select bank1
  3359  0371  0834               	movf	(sprintf@fval+2)^(0+128),w
  3360  0372  0020               	movlb	0	; select bank0
  3361  0373  00AA               	movwf	___ftmul@f1+2
  3362  0374  0021               	movlb	1	; select bank1
  3363  0375  082C               	movf	sprintf@tmpval^(0+128),w
  3364  0376  0020               	movlb	0	; select bank0
  3365  0377  00AB               	movwf	___ftmul@f2
  3366  0378  0021               	movlb	1	; select bank1
  3367  0379  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3368  037A  0020               	movlb	0	; select bank0
  3369  037B  00AC               	movwf	___ftmul@f2+1
  3370  037C  0021               	movlb	1	; select bank1
  3371  037D  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3372  037E  0020               	movlb	0	; select bank0
  3373  037F  00AD               	movwf	___ftmul@f2+2
  3374  0380  3197  274C  3181   	fcall	___ftmul
  3375  0383  0020               	movlb	0	; select bank0
  3376  0384  0828               	movf	?___ftmul,w
  3377  0385  0021               	movlb	1	; select bank1
  3378  0386  00AC               	movwf	sprintf@tmpval^(0+128)
  3379  0387  0020               	movlb	0	; select bank0
  3380  0388  0829               	movf	?___ftmul+1,w
  3381  0389  0021               	movlb	1	; select bank1
  3382  038A  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3383  038B  0020               	movlb	0	; select bank0
  3384  038C  082A               	movf	?___ftmul+2,w
  3385  038D  0021               	movlb	1	; select bank1
  3386  038E  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3387                           
  3388                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3389  038F  082C               	movf	sprintf@tmpval^(0+128),w
  3390  0390  00F0               	movwf	___ftge@ff1
  3391  0391  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3392  0392  00F1               	movwf	___ftge@ff1+1
  3393  0393  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3394  0394  00F2               	movwf	___ftge@ff1+2
  3395  0395  3000               	movlw	0
  3396  0396  00F3               	movwf	___ftge@ff2
  3397  0397  3080               	movlw	128
  3398  0398  00F4               	movwf	___ftge@ff2+1
  3399  0399  303F               	movlw	63
  3400  039A  00F5               	movwf	___ftge@ff2+2
  3401  039B  3195  2513  3181   	fcall	___ftge
  3402  039E  1803               	btfsc	3,0
  3403  039F  2BA5               	goto	l2731
  3404                           
  3405                           ;doprnt.c: 849: exp--;
  3406  03A0  30FF               	movlw	255
  3407  03A1  0021               	movlb	1	; select bank1
  3408  03A2  07B0               	addwf	sprintf@exp^(0+128),f
  3409  03A3  30FF               	movlw	255
  3410  03A4  2BBB               	goto	L3
  3411  03A5                     l2731:	
  3412                           
  3413                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3414  03A5  0021               	movlb	1	; select bank1
  3415  03A6  082C               	movf	sprintf@tmpval^(0+128),w
  3416  03A7  00F0               	movwf	___ftge@ff1
  3417  03A8  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3418  03A9  00F1               	movwf	___ftge@ff1+1
  3419  03AA  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3420  03AB  00F2               	movwf	___ftge@ff1+2
  3421  03AC  3000               	movlw	0
  3422  03AD  00F3               	movwf	___ftge@ff2
  3423  03AE  3020               	movlw	32
  3424  03AF  00F4               	movwf	___ftge@ff2+1
  3425  03B0  3041               	movlw	65
  3426  03B1  00F5               	movwf	___ftge@ff2+2
  3427  03B2  3195  2513  3181   	fcall	___ftge
  3428  03B5  1C03               	btfss	3,0
  3429  03B6  2BBC               	goto	l329
  3430                           
  3431                           ;doprnt.c: 851: exp++;
  3432  03B7  3001               	movlw	1
  3433  03B8  0021               	movlb	1	; select bank1
  3434  03B9  07B0               	addwf	sprintf@exp^(0+128),f
  3435  03BA  3000               	movlw	0
  3436  03BB                     L3:	
  3437  03BB  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  3438  03BC                     l329:	
  3439                           
  3440                           ;doprnt.c: 852: }
  3441                           ;doprnt.c: 1112: if(prec <= 12)
  3442  03BC  0021               	movlb	1	; select bank1
  3443  03BD  0837               	movf	(sprintf@prec+1)^(0+128),w
  3444  03BE  3A80               	xorlw	128
  3445  03BF  0020               	movlb	0	; select bank0
  3446  03C0  00DE               	movwf	??_sprintf
  3447  03C1  3080               	movlw	128
  3448  03C2  025E               	subwf	??_sprintf,w
  3449  03C3  1D03               	skipz
  3450  03C4  2BC8               	goto	u3645
  3451  03C5  300D               	movlw	13
  3452  03C6  0021               	movlb	1	; select bank1
  3453  03C7  0236               	subwf	sprintf@prec^(0+128),w
  3454  03C8                     u3645:	
  3455  03C8  1803               	skipnc
  3456  03C9  2BF1               	goto	l2737
  3457                           
  3458                           ;doprnt.c: 1113: fval += fround(prec);
  3459  03CA  0021               	movlb	1	; select bank1
  3460  03CB  0836               	movf	sprintf@prec^(0+128),w
  3461  03CC  3180  206D  3181   	fcall	_fround
  3462  03CF  0020               	movlb	0	; select bank0
  3463  03D0  0838               	movf	?_fround,w
  3464  03D1  00C6               	movwf	___ftadd@f1
  3465  03D2  0839               	movf	?_fround+1,w
  3466  03D3  00C7               	movwf	___ftadd@f1+1
  3467  03D4  083A               	movf	?_fround+2,w
  3468  03D5  00C8               	movwf	___ftadd@f1+2
  3469  03D6  0021               	movlb	1	; select bank1
  3470  03D7  0832               	movf	sprintf@fval^(0+128),w
  3471  03D8  0020               	movlb	0	; select bank0
  3472  03D9  00C9               	movwf	___ftadd@f2
  3473  03DA  0021               	movlb	1	; select bank1
  3474  03DB  0833               	movf	(sprintf@fval+1)^(0+128),w
  3475  03DC  0020               	movlb	0	; select bank0
  3476  03DD  00CA               	movwf	___ftadd@f2+1
  3477  03DE  0021               	movlb	1	; select bank1
  3478  03DF  0834               	movf	(sprintf@fval+2)^(0+128),w
  3479  03E0  0020               	movlb	0	; select bank0
  3480  03E1  00CB               	movwf	___ftadd@f2+2
  3481  03E2  3189  2136  3181   	fcall	___ftadd
  3482  03E5  0020               	movlb	0	; select bank0
  3483  03E6  0846               	movf	?___ftadd,w
  3484  03E7  0021               	movlb	1	; select bank1
  3485  03E8  00B2               	movwf	sprintf@fval^(0+128)
  3486  03E9  0020               	movlb	0	; select bank0
  3487  03EA  0847               	movf	?___ftadd+1,w
  3488  03EB  0021               	movlb	1	; select bank1
  3489  03EC  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3490  03ED  0020               	movlb	0	; select bank0
  3491  03EE  0848               	movf	?___ftadd+2,w
  3492  03EF  0021               	movlb	1	; select bank1
  3493  03F0  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3494  03F1                     l2737:	
  3495                           
  3496                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3497  03F1  0021               	movlb	1	; select bank1
  3498  03F2  0831               	movf	(sprintf@exp+1)^(0+128),w
  3499  03F3  3A80               	xorlw	128
  3500  03F4  0020               	movlb	0	; select bank0
  3501  03F5  00DE               	movwf	??_sprintf
  3502  03F6  3080               	movlw	128
  3503  03F7  025E               	subwf	??_sprintf,w
  3504  03F8  1D03               	skipz
  3505  03F9  2BFD               	goto	u3655
  3506  03FA  300A               	movlw	10
  3507  03FB  0021               	movlb	1	; select bank1
  3508  03FC  0230               	subwf	sprintf@exp^(0+128),w
  3509  03FD                     u3655:	
  3510  03FD  1803               	skipnc
  3511  03FE  2C28               	goto	l2745
  3512  03FF  0021               	movlb	1	; select bank1
  3513  0400  0834               	movf	(sprintf@fval+2)^(0+128),w
  3514  0401  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  3515  0402  0432               	iorwf	sprintf@fval^(0+128),w
  3516  0403  1903               	skipnz
  3517  0404  2C70               	goto	l2759
  3518  0405  0832               	movf	sprintf@fval^(0+128),w
  3519  0406  0020               	movlb	0	; select bank0
  3520  0407  00C1               	movwf	___fttol@f1
  3521  0408  0021               	movlb	1	; select bank1
  3522  0409  0833               	movf	(sprintf@fval+1)^(0+128),w
  3523  040A  0020               	movlb	0	; select bank0
  3524  040B  00C2               	movwf	___fttol@f1+1
  3525  040C  0021               	movlb	1	; select bank1
  3526  040D  0834               	movf	(sprintf@fval+2)^(0+128),w
  3527  040E  0020               	movlb	0	; select bank0
  3528  040F  00C3               	movwf	___fttol@f1+2
  3529  0410  3196  26C5  3181   	fcall	___fttol
  3530  0413  0020               	movlb	0	; select bank0
  3531  0414  0844               	movf	?___fttol+3,w
  3532  0415  0443               	iorwf	?___fttol+2,w
  3533  0416  0442               	iorwf	?___fttol+1,w
  3534  0417  0441               	iorwf	?___fttol,w
  3535  0418  1D03               	skipz
  3536  0419  2C70               	goto	l2759
  3537  041A  0021               	movlb	1	; select bank1
  3538  041B  0831               	movf	(sprintf@exp+1)^(0+128),w
  3539  041C  3A80               	xorlw	128
  3540  041D  0020               	movlb	0	; select bank0
  3541  041E  00DE               	movwf	??_sprintf
  3542  041F  3080               	movlw	128
  3543  0420  025E               	subwf	??_sprintf,w
  3544  0421  1D03               	skipz
  3545  0422  2C26               	goto	u3685
  3546  0423  3002               	movlw	2
  3547  0424  0021               	movlb	1	; select bank1
  3548  0425  0230               	subwf	sprintf@exp^(0+128),w
  3549  0426                     u3685:	
  3550  0426  1C03               	skipc
  3551  0427  2C70               	goto	l2759
  3552  0428                     l2745:	
  3553                           
  3554                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3555  0428  0021               	movlb	1	; select bank1
  3556  0429  082C               	movf	sprintf@tmpval^(0+128),w
  3557  042A  00F0               	movwf	___ftge@ff1
  3558  042B  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3559  042C  00F1               	movwf	___ftge@ff1+1
  3560  042D  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3561  042E  00F2               	movwf	___ftge@ff1+2
  3562  042F  3070               	movlw	112
  3563  0430  00F3               	movwf	___ftge@ff2
  3564  0431  3089               	movlw	137
  3565  0432  00F4               	movwf	___ftge@ff2+1
  3566  0433  3040               	movlw	64
  3567  0434  00F5               	movwf	___ftge@ff2+2
  3568  0435  3195  2513  3181   	fcall	___ftge
  3569  0438  1803               	btfsc	3,0
  3570  0439  2C3C               	goto	l2749
  3571                           
  3572                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3573  043A  30F7               	movlw	247
  3574  043B  2C3D               	goto	L4
  3575  043C                     l2749:	
  3576                           ;doprnt.c: 1122: }else{
  3577                           
  3578                           
  3579                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3580  043C  30F8               	movlw	248
  3581  043D                     L4:	
  3582  043D  0021               	movlb	1	; select bank1
  3583  043E  07B0               	addwf	sprintf@exp^(0+128),f
  3584  043F  30FF               	movlw	255
  3585  0440  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  3586                           
  3587                           ;doprnt.c: 1124: }
  3588                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3589  0441  0830               	movf	sprintf@exp^(0+128),w
  3590  0442  318B  2349  3181   	fcall	_scale
  3591  0445  0020               	movlb	0	; select bank0
  3592  0446  0838               	movf	?_scale,w
  3593  0447  0021               	movlb	1	; select bank1
  3594  0448  00AC               	movwf	sprintf@tmpval^(0+128)
  3595  0449  0020               	movlb	0	; select bank0
  3596  044A  0839               	movf	?_scale+1,w
  3597  044B  0021               	movlb	1	; select bank1
  3598  044C  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3599  044D  0020               	movlb	0	; select bank0
  3600  044E  083A               	movf	?_scale+2,w
  3601  044F  0021               	movlb	1	; select bank1
  3602  0450  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3603                           
  3604                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3605  0451  0832               	movf	sprintf@fval^(0+128),w
  3606  0452  00F0               	movwf	__tdiv_to_l_@f1
  3607  0453  0833               	movf	(sprintf@fval+1)^(0+128),w
  3608  0454  00F1               	movwf	__tdiv_to_l_@f1+1
  3609  0455  0834               	movf	(sprintf@fval+2)^(0+128),w
  3610  0456  00F2               	movwf	__tdiv_to_l_@f1+2
  3611  0457  082C               	movf	sprintf@tmpval^(0+128),w
  3612  0458  00F3               	movwf	__tdiv_to_l_@f2
  3613  0459  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3614  045A  00F4               	movwf	__tdiv_to_l_@f2+1
  3615  045B  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3616  045C  00F5               	movwf	__tdiv_to_l_@f2+2
  3617  045D  3188  2080  3181   	fcall	__tdiv_to_l_
  3618  0460  0873               	movf	?__tdiv_to_l_+3,w
  3619  0461  0021               	movlb	1	; select bank1
  3620  0462  00A7               	movwf	(sprintf@val+3)^(0+128)
  3621  0463  0872               	movf	?__tdiv_to_l_+2,w
  3622  0464  00A6               	movwf	(sprintf@val+2)^(0+128)
  3623  0465  0871               	movf	?__tdiv_to_l_+1,w
  3624  0466  00A5               	movwf	(sprintf@val+1)^(0+128)
  3625  0467  0870               	movf	?__tdiv_to_l_,w
  3626  0468  00A4               	movwf	sprintf@val^(0+128)
  3627                           
  3628                           ;doprnt.c: 1129: fval = 0.0;
  3629  0469  3000               	movlw	0
  3630  046A  00B2               	movwf	sprintf@fval^(0+128)
  3631  046B  3000               	movlw	0
  3632  046C  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3633  046D  3000               	movlw	0
  3634  046E  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3635                           
  3636                           ;doprnt.c: 1130: } else {
  3637  046F  2CBE               	goto	l2763
  3638  0470                     l2759:	
  3639                           
  3640                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3641  0470  0021               	movlb	1	; select bank1
  3642  0471  0832               	movf	sprintf@fval^(0+128),w
  3643  0472  0020               	movlb	0	; select bank0
  3644  0473  00C1               	movwf	___fttol@f1
  3645  0474  0021               	movlb	1	; select bank1
  3646  0475  0833               	movf	(sprintf@fval+1)^(0+128),w
  3647  0476  0020               	movlb	0	; select bank0
  3648  0477  00C2               	movwf	___fttol@f1+1
  3649  0478  0021               	movlb	1	; select bank1
  3650  0479  0834               	movf	(sprintf@fval+2)^(0+128),w
  3651  047A  0020               	movlb	0	; select bank0
  3652  047B  00C3               	movwf	___fttol@f1+2
  3653  047C  3196  26C5  3181   	fcall	___fttol
  3654  047F  0020               	movlb	0	; select bank0
  3655  0480  0844               	movf	?___fttol+3,w
  3656  0481  0021               	movlb	1	; select bank1
  3657  0482  00A7               	movwf	(sprintf@val+3)^(0+128)
  3658  0483  0020               	movlb	0	; select bank0
  3659  0484  0843               	movf	?___fttol+2,w
  3660  0485  0021               	movlb	1	; select bank1
  3661  0486  00A6               	movwf	(sprintf@val+2)^(0+128)
  3662  0487  0020               	movlb	0	; select bank0
  3663  0488  0842               	movf	?___fttol+1,w
  3664  0489  0021               	movlb	1	; select bank1
  3665  048A  00A5               	movwf	(sprintf@val+1)^(0+128)
  3666  048B  0020               	movlb	0	; select bank0
  3667  048C  0841               	movf	?___fttol,w
  3668  048D  0021               	movlb	1	; select bank1
  3669  048E  00A4               	movwf	sprintf@val^(0+128)
  3670                           
  3671                           ;doprnt.c: 1132: fval -= (double)val;
  3672  048F  0827               	movf	(sprintf@val+3)^(0+128),w
  3673  0490  00FB               	movwf	___lltoft@c+3
  3674  0491  0826               	movf	(sprintf@val+2)^(0+128),w
  3675  0492  00FA               	movwf	___lltoft@c+2
  3676  0493  0825               	movf	(sprintf@val+1)^(0+128),w
  3677  0494  00F9               	movwf	___lltoft@c+1
  3678  0495  0824               	movf	sprintf@val^(0+128),w
  3679  0496  00F8               	movwf	___lltoft@c
  3680  0497  3194  24B6  3181   	fcall	___lltoft
  3681  049A  0878               	movf	?___lltoft,w
  3682  049B  0020               	movlb	0	; select bank0
  3683  049C  00D3               	movwf	___ftsub@f2
  3684  049D  0879               	movf	?___lltoft+1,w
  3685  049E  00D4               	movwf	___ftsub@f2+1
  3686  049F  087A               	movf	?___lltoft+2,w
  3687  04A0  00D5               	movwf	___ftsub@f2+2
  3688  04A1  0021               	movlb	1	; select bank1
  3689  04A2  0832               	movf	sprintf@fval^(0+128),w
  3690  04A3  0020               	movlb	0	; select bank0
  3691  04A4  00D6               	movwf	___ftsub@f1
  3692  04A5  0021               	movlb	1	; select bank1
  3693  04A6  0833               	movf	(sprintf@fval+1)^(0+128),w
  3694  04A7  0020               	movlb	0	; select bank0
  3695  04A8  00D7               	movwf	___ftsub@f1+1
  3696  04A9  0021               	movlb	1	; select bank1
  3697  04AA  0834               	movf	(sprintf@fval+2)^(0+128),w
  3698  04AB  0020               	movlb	0	; select bank0
  3699  04AC  00D8               	movwf	___ftsub@f1+2
  3700  04AD  3194  2476  3181   	fcall	___ftsub
  3701  04B0  0020               	movlb	0	; select bank0
  3702  04B1  0853               	movf	?___ftsub,w
  3703  04B2  0021               	movlb	1	; select bank1
  3704  04B3  00B2               	movwf	sprintf@fval^(0+128)
  3705  04B4  0020               	movlb	0	; select bank0
  3706  04B5  0854               	movf	?___ftsub+1,w
  3707  04B6  0021               	movlb	1	; select bank1
  3708  04B7  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3709  04B8  0020               	movlb	0	; select bank0
  3710  04B9  0855               	movf	?___ftsub+2,w
  3711  04BA  0021               	movlb	1	; select bank1
  3712  04BB  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3713                           
  3714                           ;doprnt.c: 1133: exp = 0;
  3715  04BC  01B0               	clrf	sprintf@exp^(0+128)
  3716  04BD  01B1               	clrf	(sprintf@exp+1)^(0+128)
  3717  04BE                     l2763:	
  3718                           
  3719                           ;doprnt.c: 1134: }
  3720                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3721  04BE  01B8               	clrf	sprintf@c^(0+128)
  3722  04BF  0AB8               	incf	sprintf@c^(0+128),f
  3723  04C0  300A               	movlw	10
  3724  04C1  0638               	xorwf	sprintf@c^(0+128),w
  3725  04C2  1903               	btfsc	3,2
  3726  04C3  2CFB               	goto	l2775
  3727  04C4                     l2769:	
  3728                           
  3729                           ;doprnt.c: 1137: if(val < dpowers[c])
  3730  04C4  0838               	movf	sprintf@c^(0+128),w
  3731  04C5  0020               	movlb	0	; select bank0
  3732  04C6  00DE               	movwf	??_sprintf
  3733  04C7  01DF               	clrf	??_sprintf+1
  3734  04C8  35DE               	lslf	??_sprintf,f
  3735  04C9  0DDF               	rlf	??_sprintf+1,f
  3736  04CA  35DE               	lslf	??_sprintf,f
  3737  04CB  0DDF               	rlf	??_sprintf+1,f
  3738  04CC  3000               	movlw	low (_dpowers| (0+32768))
  3739  04CD  075E               	addwf	??_sprintf,w
  3740  04CE  0084               	movwf	4
  3741  04CF  3090               	movlw	high (_dpowers| (0+32768))
  3742  04D0  3D5F               	addwfc	??_sprintf+1,w
  3743  04D1  0085               	movwf	5
  3744  04D2  3F00               	moviw [0]fsr0
  3745  04D3  00E0               	movwf	??_sprintf+2
  3746  04D4  3F01               	moviw [1]fsr0
  3747  04D5  00E1               	movwf	??_sprintf+3
  3748  04D6  3F02               	moviw [2]fsr0
  3749  04D7  00E2               	movwf	??_sprintf+4
  3750  04D8  3F03               	moviw [3]fsr0
  3751  04D9  00E3               	movwf	??_sprintf+5
  3752  04DA  0863               	movf	??_sprintf+5,w
  3753  04DB  0021               	movlb	1	; select bank1
  3754  04DC  0227               	subwf	(sprintf@val+3)^(0+128),w
  3755  04DD  1D03               	skipz
  3756  04DE  2CEF               	goto	u3715
  3757  04DF  0020               	movlb	0	; select bank0
  3758  04E0  0862               	movf	??_sprintf+4,w
  3759  04E1  0021               	movlb	1	; select bank1
  3760  04E2  0226               	subwf	(sprintf@val+2)^(0+128),w
  3761  04E3  1D03               	skipz
  3762  04E4  2CEF               	goto	u3715
  3763  04E5  0020               	movlb	0	; select bank0
  3764  04E6  0861               	movf	??_sprintf+3,w
  3765  04E7  0021               	movlb	1	; select bank1
  3766  04E8  0225               	subwf	(sprintf@val+1)^(0+128),w
  3767  04E9  1D03               	skipz
  3768  04EA  2CEF               	goto	u3715
  3769  04EB  0020               	movlb	0	; select bank0
  3770  04EC  0860               	movf	??_sprintf+2,w
  3771  04ED  0021               	movlb	1	; select bank1
  3772  04EE  0224               	subwf	sprintf@val^(0+128),w
  3773  04EF                     u3715:	
  3774  04EF  1C03               	btfss	3,0
  3775  04F0  2CFB               	goto	l2775
  3776                           
  3777                           ;doprnt.c: 1138: break;
  3778  04F1  3001               	movlw	1
  3779  04F2  0020               	movlb	0	; select bank0
  3780  04F3  00DE               	movwf	??_sprintf
  3781  04F4  085E               	movf	??_sprintf,w
  3782  04F5  0021               	movlb	1	; select bank1
  3783  04F6  07B8               	addwf	sprintf@c^(0+128),f
  3784  04F7  300A               	movlw	10
  3785  04F8  0638               	xorwf	sprintf@c^(0+128),w
  3786  04F9  1D03               	btfss	3,2
  3787  04FA  2CC4               	goto	l2769
  3788  04FB                     l2775:	
  3789                           
  3790                           ;doprnt.c: 1142: width -= prec + c + exp;
  3791  04FB  0838               	movf	sprintf@c^(0+128),w
  3792  04FC  0020               	movlb	0	; select bank0
  3793  04FD  00DE               	movwf	??_sprintf
  3794  04FE  01DF               	clrf	??_sprintf+1
  3795  04FF  1BDE               	btfsc	??_sprintf,7
  3796  0500  03DF               	decf	??_sprintf+1,f
  3797  0501  0021               	movlb	1	; select bank1
  3798  0502  0836               	movf	sprintf@prec^(0+128),w
  3799  0503  0020               	movlb	0	; select bank0
  3800  0504  075E               	addwf	??_sprintf,w
  3801  0505  00E0               	movwf	??_sprintf+2
  3802  0506  0021               	movlb	1	; select bank1
  3803  0507  0837               	movf	(sprintf@prec+1)^(0+128),w
  3804  0508  0020               	movlb	0	; select bank0
  3805  0509  3D5F               	addwfc	??_sprintf+1,w
  3806  050A  00E1               	movwf	??_sprintf+3
  3807  050B  0021               	movlb	1	; select bank1
  3808  050C  0830               	movf	sprintf@exp^(0+128),w
  3809  050D  0020               	movlb	0	; select bank0
  3810  050E  0760               	addwf	??_sprintf+2,w
  3811  050F  00E2               	movwf	??_sprintf+4
  3812  0510  0021               	movlb	1	; select bank1
  3813  0511  0831               	movf	(sprintf@exp+1)^(0+128),w
  3814  0512  0020               	movlb	0	; select bank0
  3815  0513  3D61               	addwfc	??_sprintf+3,w
  3816  0514  00E3               	movwf	??_sprintf+5
  3817  0515  0862               	movf	??_sprintf+4,w
  3818  0516  0021               	movlb	1	; select bank1
  3819  0517  02AA               	subwf	sprintf@width^(0+128),f
  3820  0518  0020               	movlb	0	; select bank0
  3821  0519  0863               	movf	??_sprintf+5,w
  3822  051A  0021               	movlb	1	; select bank1
  3823  051B  3BAB               	subwfb	(sprintf@width+1)^(0+128),f
  3824                           
  3825                           ;doprnt.c: 1143: if(
  3826                           ;doprnt.c: 1147: prec)
  3827  051C  0836               	movf	sprintf@prec^(0+128),w
  3828  051D  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  3829  051E  1903               	btfsc	3,2
  3830  051F  2D24               	goto	l2779
  3831                           
  3832                           ;doprnt.c: 1148: width--;
  3833  0520  30FF               	movlw	255
  3834  0521  07AA               	addwf	sprintf@width^(0+128),f
  3835  0522  30FF               	movlw	255
  3836  0523  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  3837  0524                     l2779:	
  3838                           
  3839                           ;doprnt.c: 1149: if(flag & 0x03)
  3840  0524  3003               	movlw	3
  3841  0525  0528               	andwf	sprintf@flag^(0+128),w
  3842  0526  0020               	movlb	0	; select bank0
  3843  0527  00DE               	movwf	??_sprintf
  3844  0528  3000               	movlw	0
  3845  0529  0021               	movlb	1	; select bank1
  3846  052A  0529               	andwf	(sprintf@flag+1)^(0+128),w
  3847  052B  0020               	movlb	0	; select bank0
  3848  052C  00DF               	movwf	??_sprintf+1
  3849  052D  085E               	movf	??_sprintf,w
  3850  052E  045F               	iorwf	??_sprintf+1,w
  3851  052F  1903               	btfsc	3,2
  3852  0530  2D36               	goto	l2789
  3853                           
  3854                           ;doprnt.c: 1150: width--;
  3855  0531  30FF               	movlw	255
  3856  0532  0021               	movlb	1	; select bank1
  3857  0533                     L5:	
  3858  0533  07AA               	addwf	sprintf@width^(0+128),f
  3859  0534  30FF               	movlw	255
  3860  0535  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  3861  0536                     l2789:	
  3862  0536  0021               	movlb	1	; select bank1
  3863  0537  082B               	movf	(sprintf@width+1)^(0+128),w
  3864  0538  3A80               	xorlw	128
  3865  0539  0020               	movlb	0	; select bank0
  3866  053A  00DE               	movwf	??_sprintf
  3867  053B  3080               	movlw	128
  3868  053C  025E               	subwf	??_sprintf,w
  3869  053D  1D03               	skipz
  3870  053E  2D42               	goto	u3755
  3871  053F  3001               	movlw	1
  3872  0540  0021               	movlb	1	; select bank1
  3873  0541  022A               	subwf	sprintf@width^(0+128),w
  3874  0542                     u3755:	
  3875  0542  1C03               	btfss	3,0
  3876  0543  2D56               	goto	l2791
  3877                           
  3878                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3879                           
  3880                           ;doprnt.c: 1175: {
  3881                           ;doprnt.c: 1180: while(width > 0) {
  3882  0544  3020               	movlw	32
  3883  0545  0020               	movlb	0	; select bank0
  3884  0546  00DE               	movwf	??_sprintf
  3885  0547  0021               	movlb	1	; select bank1
  3886  0548  0835               	movf	sprintf@sp^(0+128),w
  3887  0549  0086               	movwf	6
  3888  054A  3001               	movlw	1	; select bank2/3
  3889  054B  0087               	movwf	7
  3890  054C  0020               	movlb	0	; select bank0
  3891  054D  085E               	movf	??_sprintf,w
  3892  054E  0081               	movwf	1
  3893  054F  3001               	movlw	1
  3894  0550  00DE               	movwf	??_sprintf
  3895  0551  085E               	movf	??_sprintf,w
  3896  0552  0021               	movlb	1	; select bank1
  3897  0553  07B5               	addwf	sprintf@sp^(0+128),f
  3898                           
  3899                           ;doprnt.c: 1182: width--;
  3900  0554  30FF               	movlw	255
  3901  0555  2D33               	goto	L5
  3902  0556                     l2791:	
  3903                           
  3904                           ;doprnt.c: 1183: }
  3905                           ;doprnt.c: 1188: if(flag & 0x03)
  3906  0556  3003               	movlw	3
  3907  0557  0021               	movlb	1	; select bank1
  3908  0558  0528               	andwf	sprintf@flag^(0+128),w
  3909  0559  0020               	movlb	0	; select bank0
  3910  055A  00DE               	movwf	??_sprintf
  3911  055B  3000               	movlw	0
  3912  055C  0021               	movlb	1	; select bank1
  3913  055D  0529               	andwf	(sprintf@flag+1)^(0+128),w
  3914  055E  0020               	movlb	0	; select bank0
  3915  055F  00DF               	movwf	??_sprintf+1
  3916  0560  085E               	movf	??_sprintf,w
  3917  0561  045F               	iorwf	??_sprintf+1,w
  3918  0562  1903               	btfsc	3,2
  3919  0563  2D73               	goto	l2805
  3920                           
  3921                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3922  0564  302D               	movlw	45
  3923  0565                     L9:	
  3924  0565  00DE               	movwf	??_sprintf
  3925  0566  0021               	movlb	1	; select bank1
  3926  0567  0835               	movf	sprintf@sp^(0+128),w
  3927  0568  0086               	movwf	6
  3928  0569  3001               	movlw	1	; select bank2/3
  3929  056A  0087               	movwf	7
  3930  056B  0020               	movlb	0	; select bank0
  3931  056C  085E               	movf	??_sprintf,w
  3932  056D  0081               	movwf	1
  3933  056E  3001               	movlw	1
  3934  056F  00DE               	movwf	??_sprintf
  3935  0570  085E               	movf	??_sprintf,w
  3936  0571  0021               	movlb	1	; select bank1
  3937  0572  07B5               	addwf	sprintf@sp^(0+128),f
  3938  0573                     l2805:	
  3939  0573  30FF               	movlw	255
  3940  0574  0020               	movlb	0	; select bank0
  3941  0575  00DE               	movwf	??_sprintf
  3942  0576  085E               	movf	??_sprintf,w
  3943  0577  0021               	movlb	1	; select bank1
  3944  0578  07B8               	addwf	sprintf@c^(0+128),f
  3945  0579  0A38               	incf	sprintf@c^(0+128),w
  3946  057A  1903               	btfsc	3,2
  3947  057B  2DDB               	goto	l2813
  3948                           
  3949                           ;doprnt.c: 1200: {
  3950                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3951                           
  3952                           ;doprnt.c: 1195: }
  3953                           ;doprnt.c: 1196: while(c--) {
  3954  057C  0838               	movf	sprintf@c^(0+128),w
  3955  057D  0020               	movlb	0	; select bank0
  3956  057E  00DE               	movwf	??_sprintf
  3957  057F  01DF               	clrf	??_sprintf+1
  3958  0580  35DE               	lslf	??_sprintf,f
  3959  0581  0DDF               	rlf	??_sprintf+1,f
  3960  0582  35DE               	lslf	??_sprintf,f
  3961  0583  0DDF               	rlf	??_sprintf+1,f
  3962  0584  3000               	movlw	low (_dpowers| (0+32768))
  3963  0585  075E               	addwf	??_sprintf,w
  3964  0586  0084               	movwf	4
  3965  0587  3090               	movlw	high (_dpowers| (0+32768))
  3966  0588  3D5F               	addwfc	??_sprintf+1,w
  3967  0589  0085               	movwf	5
  3968  058A  3F00               	moviw [0]fsr0
  3969  058B  00F0               	movwf	___lldiv@divisor
  3970  058C  3F01               	moviw [1]fsr0
  3971  058D  00F1               	movwf	___lldiv@divisor+1
  3972  058E  3F02               	moviw [2]fsr0
  3973  058F  00F2               	movwf	___lldiv@divisor+2
  3974  0590  3F03               	moviw [3]fsr0
  3975  0591  00F3               	movwf	___lldiv@divisor+3
  3976  0592  0021               	movlb	1	; select bank1
  3977  0593  0827               	movf	(sprintf@val+3)^(0+128),w
  3978  0594  00F7               	movwf	___lldiv@dividend+3
  3979  0595  0826               	movf	(sprintf@val+2)^(0+128),w
  3980  0596  00F6               	movwf	___lldiv@dividend+2
  3981  0597  0825               	movf	(sprintf@val+1)^(0+128),w
  3982  0598  00F5               	movwf	___lldiv@dividend+1
  3983  0599  0824               	movf	sprintf@val^(0+128),w
  3984  059A  00F4               	movwf	___lldiv@dividend
  3985  059B  3196  2621  3181   	fcall	___lldiv
  3986  059E  0873               	movf	?___lldiv+3,w
  3987  059F  0021               	movlb	1	; select bank1
  3988  05A0  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  3989  05A1  0872               	movf	?___lldiv+2,w
  3990  05A2  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3991  05A3  0871               	movf	?___lldiv+1,w
  3992  05A4  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3993  05A5  0870               	movf	?___lldiv,w
  3994  05A6  00AC               	movwf	sprintf@tmpval^(0+128)
  3995                           
  3996                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3997  05A7  3000               	movlw	0
  3998  05A8  00F3               	movwf	___llmod@divisor+3
  3999  05A9  3000               	movlw	0
  4000  05AA  00F2               	movwf	___llmod@divisor+2
  4001  05AB  3000               	movlw	0
  4002  05AC  00F1               	movwf	___llmod@divisor+1
  4003  05AD  300A               	movlw	10
  4004  05AE  00F0               	movwf	___llmod@divisor
  4005  05AF  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  4006  05B0  00F7               	movwf	___llmod@dividend+3
  4007  05B1  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  4008  05B2  00F6               	movwf	___llmod@dividend+2
  4009  05B3  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  4010  05B4  00F5               	movwf	___llmod@dividend+1
  4011  05B5  082C               	movf	sprintf@tmpval^(0+128),w
  4012  05B6  00F4               	movwf	___llmod@dividend
  4013  05B7  3195  254E  3181   	fcall	___llmod
  4014  05BA  0873               	movf	?___llmod+3,w
  4015  05BB  0021               	movlb	1	; select bank1
  4016  05BC  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  4017  05BD  0872               	movf	?___llmod+2,w
  4018  05BE  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  4019  05BF  0871               	movf	?___llmod+1,w
  4020  05C0  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  4021  05C1  0870               	movf	?___llmod,w
  4022  05C2  00AC               	movwf	sprintf@tmpval^(0+128)
  4023                           
  4024                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4025  05C3  082C               	movf	sprintf@tmpval^(0+128),w
  4026  05C4  3E30               	addlw	48
  4027  05C5  0020               	movlb	0	; select bank0
  4028  05C6  2D65               	goto	L9
  4029  05C7                     l2807:	
  4030                           ;doprnt.c: 1204: }
  4031                           ;doprnt.c: 1206: }
  4032                           ;doprnt.c: 1207: while(exp > 0) {
  4033                           
  4034                           
  4035                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4036  05C7  3030               	movlw	48
  4037  05C8  0020               	movlb	0	; select bank0
  4038  05C9  00DE               	movwf	??_sprintf
  4039  05CA  0021               	movlb	1	; select bank1
  4040  05CB  0835               	movf	sprintf@sp^(0+128),w
  4041  05CC  0086               	movwf	6
  4042  05CD  3001               	movlw	1	; select bank2/3
  4043  05CE  0087               	movwf	7
  4044  05CF  0020               	movlb	0	; select bank0
  4045  05D0  085E               	movf	??_sprintf,w
  4046  05D1  0081               	movwf	1
  4047  05D2  3001               	movlw	1
  4048  05D3  00DE               	movwf	??_sprintf
  4049  05D4  085E               	movf	??_sprintf,w
  4050  05D5  0021               	movlb	1	; select bank1
  4051  05D6  07B5               	addwf	sprintf@sp^(0+128),f
  4052                           
  4053                           ;doprnt.c: 1209: exp--;
  4054  05D7  30FF               	movlw	255
  4055  05D8  07B0               	addwf	sprintf@exp^(0+128),f
  4056  05D9  30FF               	movlw	255
  4057  05DA  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  4058  05DB                     l2813:	
  4059  05DB  0831               	movf	(sprintf@exp+1)^(0+128),w
  4060  05DC  3A80               	xorlw	128
  4061  05DD  0020               	movlb	0	; select bank0
  4062  05DE  00DE               	movwf	??_sprintf
  4063  05DF  3080               	movlw	128
  4064  05E0  025E               	subwf	??_sprintf,w
  4065  05E1  1D03               	skipz
  4066  05E2  2DE6               	goto	u3785
  4067  05E3  3001               	movlw	1
  4068  05E4  0021               	movlb	1	; select bank1
  4069  05E5  0230               	subwf	sprintf@exp^(0+128),w
  4070  05E6                     u3785:	
  4071  05E6  1803               	skipnc
  4072  05E7  2DC7               	goto	l2807
  4073                           
  4074                           ;doprnt.c: 1210: }
  4075                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4076  05E8  0021               	movlb	1	; select bank1
  4077  05E9  0837               	movf	(sprintf@prec+1)^(0+128),w
  4078  05EA  3A80               	xorlw	128
  4079  05EB  0020               	movlb	0	; select bank0
  4080  05EC  00DE               	movwf	??_sprintf
  4081  05ED  3080               	movlw	128
  4082  05EE  025E               	subwf	??_sprintf,w
  4083  05EF  1D03               	skipz
  4084  05F0  2DF4               	goto	u3795
  4085  05F1  3009               	movlw	9
  4086  05F2  0021               	movlb	1	; select bank1
  4087  05F3  0236               	subwf	sprintf@prec^(0+128),w
  4088  05F4                     u3795:	
  4089  05F4  1C03               	skipc
  4090  05F5  2DF8               	goto	l2819
  4091                           
  4092                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4093  05F6  3008               	movlw	8
  4094  05F7  2DFA               	goto	L6
  4095  05F8                     l2819:	
  4096                           
  4097                           ;doprnt.c: 1213: else
  4098                           ;doprnt.c: 1214: c = prec;
  4099  05F8  0021               	movlb	1	; select bank1
  4100  05F9  0836               	movf	sprintf@prec^(0+128),w
  4101  05FA                     L6:	
  4102  05FA  0020               	movlb	0	; select bank0
  4103  05FB  00DE               	movwf	??_sprintf
  4104  05FC  085E               	movf	??_sprintf,w
  4105  05FD  0021               	movlb	1	; select bank1
  4106  05FE  00B8               	movwf	sprintf@c^(0+128)
  4107                           
  4108                           ;doprnt.c: 1215: prec -= c;
  4109  05FF  0838               	movf	sprintf@c^(0+128),w
  4110  0600  0020               	movlb	0	; select bank0
  4111  0601  00DE               	movwf	??_sprintf
  4112  0602  01DF               	clrf	??_sprintf+1
  4113  0603  1BDE               	btfsc	??_sprintf,7
  4114  0604  03DF               	decf	??_sprintf+1,f
  4115  0605  085E               	movf	??_sprintf,w
  4116  0606  0021               	movlb	1	; select bank1
  4117  0607  02B6               	subwf	sprintf@prec^(0+128),f
  4118  0608  0020               	movlb	0	; select bank0
  4119  0609  085F               	movf	??_sprintf+1,w
  4120  060A  0021               	movlb	1	; select bank1
  4121  060B  3BB7               	subwfb	(sprintf@prec+1)^(0+128),f
  4122                           
  4123                           ;doprnt.c: 1219: if(c)
  4124  060C  0838               	movf	sprintf@c^(0+128),w
  4125  060D  1903               	btfsc	3,2
  4126  060E  2E1F               	goto	l2827
  4127                           
  4128                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4129  060F  302E               	movlw	46
  4130  0610  0020               	movlb	0	; select bank0
  4131  0611  00DE               	movwf	??_sprintf
  4132  0612  0021               	movlb	1	; select bank1
  4133  0613  0835               	movf	sprintf@sp^(0+128),w
  4134  0614  0086               	movwf	6
  4135  0615  3001               	movlw	1	; select bank2/3
  4136  0616  0087               	movwf	7
  4137  0617  0020               	movlb	0	; select bank0
  4138  0618  085E               	movf	??_sprintf,w
  4139  0619  0081               	movwf	1
  4140  061A  3001               	movlw	1
  4141  061B  00DE               	movwf	??_sprintf
  4142  061C  085E               	movf	??_sprintf,w
  4143  061D  0021               	movlb	1	; select bank1
  4144  061E  07B5               	addwf	sprintf@sp^(0+128),f
  4145  061F                     l2827:	
  4146                           
  4147                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4148  061F  0838               	movf	sprintf@c^(0+128),w
  4149  0620  318B  2349  3181   	fcall	_scale
  4150  0623  0020               	movlb	0	; select bank0
  4151  0624  0838               	movf	?_scale,w
  4152  0625  0021               	movlb	1	; select bank1
  4153  0626  00A0               	movwf	_sprintf$750^(0+128)
  4154  0627  0020               	movlb	0	; select bank0
  4155  0628  0839               	movf	?_scale+1,w
  4156  0629  0021               	movlb	1	; select bank1
  4157  062A  00A1               	movwf	(_sprintf$750+1)^(0+128)
  4158  062B  0020               	movlb	0	; select bank0
  4159  062C  083A               	movf	?_scale+2,w
  4160  062D  0021               	movlb	1	; select bank1
  4161  062E  00A2               	movwf	(_sprintf$750+2)^(0+128)
  4162                           
  4163                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4164  062F  0820               	movf	_sprintf$750^(0+128),w
  4165  0630  0020               	movlb	0	; select bank0
  4166  0631  00AB               	movwf	___ftmul@f2
  4167  0632  0021               	movlb	1	; select bank1
  4168  0633  0821               	movf	(_sprintf$750+1)^(0+128),w
  4169  0634  0020               	movlb	0	; select bank0
  4170  0635  00AC               	movwf	___ftmul@f2+1
  4171  0636  0021               	movlb	1	; select bank1
  4172  0637  0822               	movf	(_sprintf$750+2)^(0+128),w
  4173  0638  0020               	movlb	0	; select bank0
  4174  0639  00AD               	movwf	___ftmul@f2+2
  4175  063A  0021               	movlb	1	; select bank1
  4176  063B  0832               	movf	sprintf@fval^(0+128),w
  4177  063C  0020               	movlb	0	; select bank0
  4178  063D  00A8               	movwf	___ftmul@f1
  4179  063E  0021               	movlb	1	; select bank1
  4180  063F  0833               	movf	(sprintf@fval+1)^(0+128),w
  4181  0640  0020               	movlb	0	; select bank0
  4182  0641  00A9               	movwf	___ftmul@f1+1
  4183  0642  0021               	movlb	1	; select bank1
  4184  0643  0834               	movf	(sprintf@fval+2)^(0+128),w
  4185  0644  0020               	movlb	0	; select bank0
  4186  0645  00AA               	movwf	___ftmul@f1+2
  4187  0646  3197  274C  3181   	fcall	___ftmul
  4188  0649  0020               	movlb	0	; select bank0
  4189  064A  0828               	movf	?___ftmul,w
  4190  064B  00C1               	movwf	___fttol@f1
  4191  064C  0829               	movf	?___ftmul+1,w
  4192  064D  00C2               	movwf	___fttol@f1+1
  4193  064E  082A               	movf	?___ftmul+2,w
  4194  064F  00C3               	movwf	___fttol@f1+2
  4195  0650  3196  26C5  3181   	fcall	___fttol
  4196  0653  0020               	movlb	0	; select bank0
  4197  0654  0844               	movf	?___fttol+3,w
  4198  0655  0021               	movlb	1	; select bank1
  4199  0656  00A7               	movwf	(sprintf@val+3)^(0+128)
  4200  0657  0020               	movlb	0	; select bank0
  4201  0658  0843               	movf	?___fttol+2,w
  4202  0659  0021               	movlb	1	; select bank1
  4203  065A  00A6               	movwf	(sprintf@val+2)^(0+128)
  4204  065B  0020               	movlb	0	; select bank0
  4205  065C  0842               	movf	?___fttol+1,w
  4206  065D  0021               	movlb	1	; select bank1
  4207  065E  00A5               	movwf	(sprintf@val+1)^(0+128)
  4208  065F  0020               	movlb	0	; select bank0
  4209  0660  0841               	movf	?___fttol,w
  4210  0661  0021               	movlb	1	; select bank1
  4211  0662                     L7:	
  4212  0662  00A4               	movwf	sprintf@val^(0+128)
  4213  0663  30FF               	movlw	255
  4214  0664  0020               	movlb	0	; select bank0
  4215  0665  00DE               	movwf	??_sprintf
  4216  0666  085E               	movf	??_sprintf,w
  4217  0667  0021               	movlb	1	; select bank1
  4218  0668  07B8               	addwf	sprintf@c^(0+128),f
  4219  0669  0A38               	incf	sprintf@c^(0+128),w
  4220  066A  1903               	btfsc	3,2
  4221  066B  2F03               	goto	l2849
  4222                           
  4223                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4224                           
  4225                           ;doprnt.c: 1228: while(c--) {
  4226  066C  0838               	movf	sprintf@c^(0+128),w
  4227  066D  0020               	movlb	0	; select bank0
  4228  066E  00DE               	movwf	??_sprintf
  4229  066F  01DF               	clrf	??_sprintf+1
  4230  0670  35DE               	lslf	??_sprintf,f
  4231  0671  0DDF               	rlf	??_sprintf+1,f
  4232  0672  35DE               	lslf	??_sprintf,f
  4233  0673  0DDF               	rlf	??_sprintf+1,f
  4234  0674  3000               	movlw	low (_dpowers| (0+32768))
  4235  0675  075E               	addwf	??_sprintf,w
  4236  0676  0084               	movwf	4
  4237  0677  3090               	movlw	high (_dpowers| (0+32768))
  4238  0678  3D5F               	addwfc	??_sprintf+1,w
  4239  0679  0085               	movwf	5
  4240  067A  3F00               	moviw [0]fsr0
  4241  067B  00F0               	movwf	___lldiv@divisor
  4242  067C  3F01               	moviw [1]fsr0
  4243  067D  00F1               	movwf	___lldiv@divisor+1
  4244  067E  3F02               	moviw [2]fsr0
  4245  067F  00F2               	movwf	___lldiv@divisor+2
  4246  0680  3F03               	moviw [3]fsr0
  4247  0681  00F3               	movwf	___lldiv@divisor+3
  4248  0682  0021               	movlb	1	; select bank1
  4249  0683  0827               	movf	(sprintf@val+3)^(0+128),w
  4250  0684  00F7               	movwf	___lldiv@dividend+3
  4251  0685  0826               	movf	(sprintf@val+2)^(0+128),w
  4252  0686  00F6               	movwf	___lldiv@dividend+2
  4253  0687  0825               	movf	(sprintf@val+1)^(0+128),w
  4254  0688  00F5               	movwf	___lldiv@dividend+1
  4255  0689  0824               	movf	sprintf@val^(0+128),w
  4256  068A  00F4               	movwf	___lldiv@dividend
  4257  068B  3196  2621  3181   	fcall	___lldiv
  4258  068E  0873               	movf	?___lldiv+3,w
  4259  068F  0021               	movlb	1	; select bank1
  4260  0690  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  4261  0691  0872               	movf	?___lldiv+2,w
  4262  0692  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  4263  0693  0871               	movf	?___lldiv+1,w
  4264  0694  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  4265  0695  0870               	movf	?___lldiv,w
  4266  0696  00AC               	movwf	sprintf@tmpval^(0+128)
  4267                           
  4268                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4269  0697  3000               	movlw	0
  4270  0698  00F3               	movwf	___llmod@divisor+3
  4271  0699  3000               	movlw	0
  4272  069A  00F2               	movwf	___llmod@divisor+2
  4273  069B  3000               	movlw	0
  4274  069C  00F1               	movwf	___llmod@divisor+1
  4275  069D  300A               	movlw	10
  4276  069E  00F0               	movwf	___llmod@divisor
  4277  069F  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  4278  06A0  00F7               	movwf	___llmod@dividend+3
  4279  06A1  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  4280  06A2  00F6               	movwf	___llmod@dividend+2
  4281  06A3  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  4282  06A4  00F5               	movwf	___llmod@dividend+1
  4283  06A5  082C               	movf	sprintf@tmpval^(0+128),w
  4284  06A6  00F4               	movwf	___llmod@dividend
  4285  06A7  3195  254E  3181   	fcall	___llmod
  4286  06AA  0873               	movf	?___llmod+3,w
  4287  06AB  0021               	movlb	1	; select bank1
  4288  06AC  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  4289  06AD  0872               	movf	?___llmod+2,w
  4290  06AE  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  4291  06AF  0871               	movf	?___llmod+1,w
  4292  06B0  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  4293  06B1  0870               	movf	?___llmod,w
  4294  06B2  00AC               	movwf	sprintf@tmpval^(0+128)
  4295                           
  4296                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4297  06B3  082C               	movf	sprintf@tmpval^(0+128),w
  4298  06B4  3E30               	addlw	48
  4299  06B5  0020               	movlb	0	; select bank0
  4300  06B6  00DE               	movwf	??_sprintf
  4301  06B7  0021               	movlb	1	; select bank1
  4302  06B8  0835               	movf	sprintf@sp^(0+128),w
  4303  06B9  0086               	movwf	6
  4304  06BA  3001               	movlw	1	; select bank2/3
  4305  06BB  0087               	movwf	7
  4306  06BC  0020               	movlb	0	; select bank0
  4307  06BD  085E               	movf	??_sprintf,w
  4308  06BE  0081               	movwf	1
  4309  06BF  3001               	movlw	1
  4310  06C0  00DE               	movwf	??_sprintf
  4311  06C1  085E               	movf	??_sprintf,w
  4312  06C2  0021               	movlb	1	; select bank1
  4313  06C3  07B5               	addwf	sprintf@sp^(0+128),f
  4314                           
  4315                           ;doprnt.c: 1232: val %= dpowers[c];
  4316  06C4  0838               	movf	sprintf@c^(0+128),w
  4317  06C5  0020               	movlb	0	; select bank0
  4318  06C6  00DE               	movwf	??_sprintf
  4319  06C7  01DF               	clrf	??_sprintf+1
  4320  06C8  35DE               	lslf	??_sprintf,f
  4321  06C9  0DDF               	rlf	??_sprintf+1,f
  4322  06CA  35DE               	lslf	??_sprintf,f
  4323  06CB  0DDF               	rlf	??_sprintf+1,f
  4324  06CC  3000               	movlw	low (_dpowers| (0+32768))
  4325  06CD  075E               	addwf	??_sprintf,w
  4326  06CE  0084               	movwf	4
  4327  06CF  3090               	movlw	high (_dpowers| (0+32768))
  4328  06D0  3D5F               	addwfc	??_sprintf+1,w
  4329  06D1  0085               	movwf	5
  4330  06D2  3F00               	moviw [0]fsr0
  4331  06D3  00F0               	movwf	___llmod@divisor
  4332  06D4  3F01               	moviw [1]fsr0
  4333  06D5  00F1               	movwf	___llmod@divisor+1
  4334  06D6  3F02               	moviw [2]fsr0
  4335  06D7  00F2               	movwf	___llmod@divisor+2
  4336  06D8  3F03               	moviw [3]fsr0
  4337  06D9  00F3               	movwf	___llmod@divisor+3
  4338  06DA  0021               	movlb	1	; select bank1
  4339  06DB  0827               	movf	(sprintf@val+3)^(0+128),w
  4340  06DC  00F7               	movwf	___llmod@dividend+3
  4341  06DD  0826               	movf	(sprintf@val+2)^(0+128),w
  4342  06DE  00F6               	movwf	___llmod@dividend+2
  4343  06DF  0825               	movf	(sprintf@val+1)^(0+128),w
  4344  06E0  00F5               	movwf	___llmod@dividend+1
  4345  06E1  0824               	movf	sprintf@val^(0+128),w
  4346  06E2  00F4               	movwf	___llmod@dividend
  4347  06E3  3195  254E  3181   	fcall	___llmod
  4348  06E6  0873               	movf	?___llmod+3,w
  4349  06E7  0021               	movlb	1	; select bank1
  4350  06E8  00A7               	movwf	(sprintf@val+3)^(0+128)
  4351  06E9  0872               	movf	?___llmod+2,w
  4352  06EA  00A6               	movwf	(sprintf@val+2)^(0+128)
  4353  06EB  0871               	movf	?___llmod+1,w
  4354  06EC  00A5               	movwf	(sprintf@val+1)^(0+128)
  4355  06ED  0870               	movf	?___llmod,w
  4356  06EE  2E62               	goto	L7
  4357  06EF                     l2843:	
  4358                           ;doprnt.c: 1233: }
  4359                           ;doprnt.c: 1235: while(prec) {
  4360                           
  4361                           
  4362                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4363  06EF  3030               	movlw	48
  4364  06F0  0020               	movlb	0	; select bank0
  4365  06F1  00DE               	movwf	??_sprintf
  4366  06F2  0021               	movlb	1	; select bank1
  4367  06F3  0835               	movf	sprintf@sp^(0+128),w
  4368  06F4  0086               	movwf	6
  4369  06F5  3001               	movlw	1	; select bank2/3
  4370  06F6  0087               	movwf	7
  4371  06F7  0020               	movlb	0	; select bank0
  4372  06F8  085E               	movf	??_sprintf,w
  4373  06F9  0081               	movwf	1
  4374  06FA  3001               	movlw	1
  4375  06FB  00DE               	movwf	??_sprintf
  4376  06FC  085E               	movf	??_sprintf,w
  4377  06FD  0021               	movlb	1	; select bank1
  4378  06FE  07B5               	addwf	sprintf@sp^(0+128),f
  4379                           
  4380                           ;doprnt.c: 1237: prec--;
  4381  06FF  30FF               	movlw	255
  4382  0700  07B6               	addwf	sprintf@prec^(0+128),f
  4383  0701  30FF               	movlw	255
  4384  0702  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  4385  0703                     l2849:	
  4386  0703  0836               	movf	sprintf@prec^(0+128),w
  4387  0704  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  4388  0705  1903               	btfsc	3,2
  4389  0706  29DA               	goto	l2895
  4390  0707  2EEF               	goto	l2843
  4391  0708                     l2851:	
  4392                           ;doprnt.c: 1238: }
  4393                           ;doprnt.c: 1245: continue;
  4394                           
  4395                           
  4396                           ;doprnt.c: 1246: }
  4397                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4398  0708  0021               	movlb	1	; select bank1
  4399  0709  0836               	movf	sprintf@prec^(0+128),w
  4400  070A  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  4401  070B  1D03               	btfss	3,2
  4402  070C  2F17               	goto	l369
  4403  070D  0827               	movf	(sprintf@val+3)^(0+128),w
  4404  070E  0426               	iorwf	(sprintf@val+2)^(0+128),w
  4405  070F  0425               	iorwf	(sprintf@val+1)^(0+128),w
  4406  0710  0424               	iorwf	sprintf@val^(0+128),w
  4407  0711  1D03               	skipz
  4408  0712  2F17               	goto	l369
  4409                           
  4410                           ;doprnt.c: 1291: prec++;
  4411  0713  3001               	movlw	1
  4412  0714  07B6               	addwf	sprintf@prec^(0+128),f
  4413  0715  3000               	movlw	0
  4414  0716  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  4415  0717                     l369:	
  4416                           
  4417                           ;doprnt.c: 1339: if(c < prec)
  4418  0717  0838               	movf	sprintf@c^(0+128),w
  4419  0718  0020               	movlb	0	; select bank0
  4420  0719  00DE               	movwf	??_sprintf
  4421  071A  01DF               	clrf	??_sprintf+1
  4422  071B  1BDE               	btfsc	??_sprintf,7
  4423  071C  03DF               	decf	??_sprintf+1,f
  4424  071D  085F               	movf	??_sprintf+1,w
  4425  071E  3A80               	xorlw	128
  4426  071F  00E0               	movwf	??_sprintf+2
  4427  0720  0021               	movlb	1	; select bank1
  4428  0721  0837               	movf	(sprintf@prec+1)^(0+128),w
  4429  0722  3A80               	xorlw	128
  4430  0723  0020               	movlb	0	; select bank0
  4431  0724  0260               	subwf	??_sprintf+2,w
  4432  0725  1D03               	skipz
  4433  0726  2F2B               	goto	u3855
  4434  0727  0021               	movlb	1	; select bank1
  4435  0728  0836               	movf	sprintf@prec^(0+128),w
  4436  0729  0020               	movlb	0	; select bank0
  4437  072A  025E               	subwf	??_sprintf,w
  4438  072B                     u3855:	
  4439  072B  1803               	skipnc
  4440  072C  2F35               	goto	l2859
  4441                           
  4442                           ;doprnt.c: 1340: c = prec;
  4443  072D  0021               	movlb	1	; select bank1
  4444  072E  0836               	movf	sprintf@prec^(0+128),w
  4445  072F  0020               	movlb	0	; select bank0
  4446  0730  00DE               	movwf	??_sprintf
  4447  0731  085E               	movf	??_sprintf,w
  4448  0732  0021               	movlb	1	; select bank1
  4449  0733  00B8               	movwf	sprintf@c^(0+128)
  4450  0734  2F51               	goto	l371
  4451  0735                     l2859:	
  4452                           
  4453                           ;doprnt.c: 1341: else if(prec < c)
  4454  0735  0021               	movlb	1	; select bank1
  4455  0736  0838               	movf	sprintf@c^(0+128),w
  4456  0737  0020               	movlb	0	; select bank0
  4457  0738  00DE               	movwf	??_sprintf
  4458  0739  01DF               	clrf	??_sprintf+1
  4459  073A  1BDE               	btfsc	??_sprintf,7
  4460  073B  03DF               	decf	??_sprintf+1,f
  4461  073C  0021               	movlb	1	; select bank1
  4462  073D  0837               	movf	(sprintf@prec+1)^(0+128),w
  4463  073E  3A80               	xorlw	128
  4464  073F  0020               	movlb	0	; select bank0
  4465  0740  00E0               	movwf	??_sprintf+2
  4466  0741  085F               	movf	??_sprintf+1,w
  4467  0742  3A80               	xorlw	128
  4468  0743  0260               	subwf	??_sprintf+2,w
  4469  0744  1D03               	skipz
  4470  0745  2F49               	goto	u3865
  4471  0746  085E               	movf	??_sprintf,w
  4472  0747  0021               	movlb	1	; select bank1
  4473  0748  0236               	subwf	sprintf@prec^(0+128),w
  4474  0749                     u3865:	
  4475  0749  1803               	skipnc
  4476  074A  2F51               	goto	l371
  4477                           
  4478                           ;doprnt.c: 1342: prec = c;
  4479  074B  0021               	movlb	1	; select bank1
  4480  074C  0838               	movf	sprintf@c^(0+128),w
  4481  074D  00B6               	movwf	sprintf@prec^(0+128)
  4482  074E  01B7               	clrf	(sprintf@prec+1)^(0+128)
  4483  074F  1BB6               	btfsc	sprintf@prec^(0+128),7
  4484  0750  03B7               	decf	(sprintf@prec+1)^(0+128),f
  4485  0751                     l371:	
  4486                           
  4487                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4488  0751  0021               	movlb	1	; select bank1
  4489  0752  082A               	movf	sprintf@width^(0+128),w
  4490  0753  042B               	iorwf	(sprintf@width+1)^(0+128),w
  4491  0754  1903               	btfsc	3,2
  4492  0755  2F68               	goto	l2867
  4493  0756  3003               	movlw	3
  4494  0757  0528               	andwf	sprintf@flag^(0+128),w
  4495  0758  0020               	movlb	0	; select bank0
  4496  0759  00DE               	movwf	??_sprintf
  4497  075A  3000               	movlw	0
  4498  075B  0021               	movlb	1	; select bank1
  4499  075C  0529               	andwf	(sprintf@flag+1)^(0+128),w
  4500  075D  0020               	movlb	0	; select bank0
  4501  075E  00DF               	movwf	??_sprintf+1
  4502  075F  085E               	movf	??_sprintf,w
  4503  0760  045F               	iorwf	??_sprintf+1,w
  4504  0761  1903               	btfsc	3,2
  4505  0762  2F68               	goto	l2867
  4506                           
  4507                           ;doprnt.c: 1346: width--;
  4508  0763  30FF               	movlw	255
  4509  0764  0021               	movlb	1	; select bank1
  4510  0765  07AA               	addwf	sprintf@width^(0+128),f
  4511  0766  30FF               	movlw	255
  4512  0767  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  4513  0768                     l2867:	
  4514                           
  4515                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4516  0768  0021               	movlb	1	; select bank1
  4517  0769  1F29               	btfss	(sprintf@flag+1)^(0+128),6
  4518  076A  2F84               	goto	l2875
  4519                           
  4520                           ;doprnt.c: 1349: if(width > prec)
  4521  076B  0837               	movf	(sprintf@prec+1)^(0+128),w
  4522  076C  3A80               	xorlw	128
  4523  076D  0020               	movlb	0	; select bank0
  4524  076E  00DE               	movwf	??_sprintf
  4525  076F  0021               	movlb	1	; select bank1
  4526  0770  082B               	movf	(sprintf@width+1)^(0+128),w
  4527  0771  3A80               	xorlw	128
  4528  0772  0020               	movlb	0	; select bank0
  4529  0773  025E               	subwf	??_sprintf,w
  4530  0774  1D03               	skipz
  4531  0775  2F79               	goto	u3905
  4532  0776  0021               	movlb	1	; select bank1
  4533  0777  082A               	movf	sprintf@width^(0+128),w
  4534  0778  0236               	subwf	sprintf@prec^(0+128),w
  4535  0779                     u3905:	
  4536  0779  1803               	skipnc
  4537  077A  2F81               	goto	l2873
  4538                           
  4539                           ;doprnt.c: 1350: width -= prec;
  4540  077B  0021               	movlb	1	; select bank1
  4541  077C  0836               	movf	sprintf@prec^(0+128),w
  4542  077D  02AA               	subwf	sprintf@width^(0+128),f
  4543  077E  0837               	movf	(sprintf@prec+1)^(0+128),w
  4544  077F  3BAB               	subwfb	(sprintf@width+1)^(0+128),f
  4545  0780  2F84               	goto	l2875
  4546  0781                     l2873:	
  4547                           
  4548                           ;doprnt.c: 1351: else
  4549                           ;doprnt.c: 1352: width = 0;
  4550  0781  0021               	movlb	1	; select bank1
  4551  0782  01AA               	clrf	sprintf@width^(0+128)
  4552  0783  01AB               	clrf	(sprintf@width+1)^(0+128)
  4553  0784                     l2875:	
  4554                           
  4555                           ;doprnt.c: 1353: }
  4556                           ;doprnt.c: 1381: if(width > c)
  4557  0784  0838               	movf	sprintf@c^(0+128),w
  4558  0785  0020               	movlb	0	; select bank0
  4559  0786  00DE               	movwf	??_sprintf
  4560  0787  01DF               	clrf	??_sprintf+1
  4561  0788  1BDE               	btfsc	??_sprintf,7
  4562  0789  03DF               	decf	??_sprintf+1,f
  4563  078A  085F               	movf	??_sprintf+1,w
  4564  078B  3A80               	xorlw	128
  4565  078C  00E0               	movwf	??_sprintf+2
  4566  078D  0021               	movlb	1	; select bank1
  4567  078E  082B               	movf	(sprintf@width+1)^(0+128),w
  4568  078F  3A80               	xorlw	128
  4569  0790  0020               	movlb	0	; select bank0
  4570  0791  0260               	subwf	??_sprintf+2,w
  4571  0792  1D03               	skipz
  4572  0793  2F98               	goto	u3915
  4573  0794  0021               	movlb	1	; select bank1
  4574  0795  082A               	movf	sprintf@width^(0+128),w
  4575  0796  0020               	movlb	0	; select bank0
  4576  0797  025E               	subwf	??_sprintf,w
  4577  0798                     u3915:	
  4578  0798  1803               	skipnc
  4579  0799  2FA9               	goto	l2879
  4580                           
  4581                           ;doprnt.c: 1382: width -= c;
  4582  079A  0021               	movlb	1	; select bank1
  4583  079B  0838               	movf	sprintf@c^(0+128),w
  4584  079C  0020               	movlb	0	; select bank0
  4585  079D  00DE               	movwf	??_sprintf
  4586  079E  01DF               	clrf	??_sprintf+1
  4587  079F  1BDE               	btfsc	??_sprintf,7
  4588  07A0  03DF               	decf	??_sprintf+1,f
  4589  07A1  085E               	movf	??_sprintf,w
  4590  07A2  0021               	movlb	1	; select bank1
  4591  07A3  02AA               	subwf	sprintf@width^(0+128),f
  4592  07A4  0020               	movlb	0	; select bank0
  4593  07A5  085F               	movf	??_sprintf+1,w
  4594  07A6  0021               	movlb	1	; select bank1
  4595  07A7  3BAB               	subwfb	(sprintf@width+1)^(0+128),f
  4596  07A8  2FAC               	goto	l2881
  4597  07A9                     l2879:	
  4598                           
  4599                           ;doprnt.c: 1383: else
  4600                           ;doprnt.c: 1384: width = 0;
  4601  07A9  0021               	movlb	1	; select bank1
  4602  07AA  01AA               	clrf	sprintf@width^(0+128)
  4603  07AB  01AB               	clrf	(sprintf@width+1)^(0+128)
  4604  07AC                     l2881:	
  4605                           
  4606                           ;doprnt.c: 1422: {
  4607                           ;doprnt.c: 1424: if(width
  4608                           ;doprnt.c: 1428: )
  4609  07AC  082A               	movf	sprintf@width^(0+128),w
  4610  07AD  042B               	iorwf	(sprintf@width+1)^(0+128),w
  4611  07AE  1903               	btfsc	3,2
  4612  07AF  2FC8               	goto	l2889
  4613  07B0                     l2883:	
  4614                           ;doprnt.c: 1429: do
  4615                           
  4616                           
  4617                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4618  07B0  3020               	movlw	32
  4619  07B1  0020               	movlb	0	; select bank0
  4620  07B2  00DE               	movwf	??_sprintf
  4621  07B3  0021               	movlb	1	; select bank1
  4622  07B4  0835               	movf	sprintf@sp^(0+128),w
  4623  07B5  0086               	movwf	6
  4624  07B6  3001               	movlw	1	; select bank2/3
  4625  07B7  0087               	movwf	7
  4626  07B8  0020               	movlb	0	; select bank0
  4627  07B9  085E               	movf	??_sprintf,w
  4628  07BA  0081               	movwf	1
  4629  07BB  3001               	movlw	1
  4630  07BC  00DE               	movwf	??_sprintf
  4631  07BD  085E               	movf	??_sprintf,w
  4632  07BE  0021               	movlb	1	; select bank1
  4633  07BF  07B5               	addwf	sprintf@sp^(0+128),f
  4634                           
  4635                           ;doprnt.c: 1431: while(--width);
  4636  07C0  30FF               	movlw	255
  4637  07C1  07AA               	addwf	sprintf@width^(0+128),f
  4638  07C2  30FF               	movlw	255
  4639  07C3  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  4640  07C4  082A               	movf	sprintf@width^(0+128),w
  4641  07C5  042B               	iorwf	(sprintf@width+1)^(0+128),w
  4642  07C6  1D03               	btfss	3,2
  4643  07C7  2FB0               	goto	l2883
  4644  07C8                     l2889:	
  4645                           
  4646                           ;doprnt.c: 1438: if(flag & 0x03)
  4647  07C8  3003               	movlw	3
  4648  07C9  0528               	andwf	sprintf@flag^(0+128),w
  4649  07CA  0020               	movlb	0	; select bank0
  4650  07CB  00DE               	movwf	??_sprintf
  4651  07CC  3000               	movlw	0
  4652  07CD  0021               	movlb	1	; select bank1
  4653  07CE  0529               	andwf	(sprintf@flag+1)^(0+128),w
  4654  07CF  0020               	movlb	0	; select bank0
  4655  07D0  00DF               	movwf	??_sprintf+1
  4656  07D1  085E               	movf	??_sprintf,w
  4657  07D2  045F               	iorwf	??_sprintf+1,w
  4658  07D3  1903               	btfsc	3,2
  4659  07D4  29DA               	goto	l2895
  4660                           
  4661                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4662  07D5  302D               	movlw	45
  4663  07D6                     L8:	
  4664  07D6  00DE               	movwf	??_sprintf
  4665  07D7  0021               	movlb	1	; select bank1
  4666  07D8  0835               	movf	sprintf@sp^(0+128),w
  4667  07D9  0086               	movwf	6
  4668  07DA  3001               	movlw	1	; select bank2/3
  4669  07DB  0087               	movwf	7
  4670  07DC  0020               	movlb	0	; select bank0
  4671  07DD  085E               	movf	??_sprintf,w
  4672  07DE  0081               	movwf	1
  4673  07DF  3001               	movlw	1
  4674  07E0  00DE               	movwf	??_sprintf
  4675  07E1  085E               	movf	??_sprintf,w
  4676  07E2  0021               	movlb	1	; select bank1
  4677  07E3  07B5               	addwf	sprintf@sp^(0+128),f
  4678  07E4  29DA               	goto	l2895
  4679  07E5                     l2897:	
  4680                           ;doprnt.c: 1469: }
  4681                           ;doprnt.c: 1533: }
  4682                           ;doprnt.c: 1535: alldone:
  4683                           
  4684                           
  4685                           ;doprnt.c: 1538: *sp = 0;
  4686  07E5  0835               	movf	sprintf@sp^(0+128),w
  4687  07E6  0086               	movwf	6
  4688  07E7  3001               	movlw	1	; select bank2/3
  4689  07E8  0087               	movwf	7
  4690  07E9  0181               	clrf	1
  4691  07EA  0008               	return
  4692  07EB                     __end_of_sprintf:	
  4693                           ;doprnt.c: 1540: return 0;
  4694                           ;	Return value of _sprintf is never used
  4695                           
  4696                           
  4697                           	psect	text2
  4698  0B49                     __ptext2:	
  4699 ;; *************** function _scale *****************
  4700 ;; Defined at:
  4701 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  scl             1    wreg     char 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  scl             1   32[BANK0 ] char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  3   24[BANK0 ] char 
  4708 ;; Registers used:
  4709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4715 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;Total ram usage:        9 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    2
  4722 ;; This function calls:
  4723 ;;		___awdiv
  4724 ;;		___awmod
  4725 ;;		___ftmul
  4726 ;;		___wmul
  4727 ;; This function is called by:
  4728 ;;		_sprintf
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _scale
  4734  0B49                     _scale:	
  4735                           
  4736                           ;incstack = 0
  4737                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4738                           ;scale@scl stored from wreg
  4739  0B49  0020               	movlb	0	; select bank0
  4740  0B4A  00C0               	movwf	scale@scl
  4741                           
  4742                           ;doprnt.c: 428: if(scl < 0) {
  4743  0B4B  1FC0               	btfss	scale@scl,7
  4744  0B4C  2C6E               	goto	l2333
  4745                           
  4746                           ;doprnt.c: 429: scl = -scl;
  4747  0B4D  09C0               	comf	scale@scl,f
  4748  0B4E  0AC0               	incf	scale@scl,f
  4749                           
  4750                           ;doprnt.c: 430: if(scl>=110)
  4751  0B4F  0840               	movf	scale@scl,w
  4752  0B50  3A80               	xorlw	128
  4753  0B51  3E12               	addlw	-238
  4754  0B52  1C03               	skipc
  4755  0B53  2BF2               	goto	l2323
  4756                           
  4757                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4758  0B54  300A               	movlw	10
  4759  0B55  00F7               	movwf	___awdiv@divisor
  4760  0B56  3000               	movlw	0
  4761  0B57  00F8               	movwf	___awdiv@divisor+1
  4762  0B58  0840               	movf	scale@scl,w
  4763  0B59  00F2               	movwf	___awmod@dividend
  4764  0B5A  01F3               	clrf	___awmod@dividend+1
  4765  0B5B  1BF2               	btfsc	___awmod@dividend,7
  4766  0B5C  03F3               	decf	___awmod@dividend+1,f
  4767  0B5D  3064               	movlw	100
  4768  0B5E  00F0               	movwf	___awmod@divisor
  4769  0B5F  3000               	movlw	0
  4770  0B60  00F1               	movwf	___awmod@divisor+1
  4771  0B61  3195  2590  318B   	fcall	___awmod
  4772  0B64  0871               	movf	?___awmod+1,w
  4773  0B65  00FA               	movwf	___awdiv@dividend+1
  4774  0B66  0870               	movf	?___awmod,w
  4775  0B67  00F9               	movwf	___awdiv@dividend
  4776  0B68  3196  2673  318B   	fcall	___awdiv
  4777  0B6B  0877               	movf	?___awdiv,w
  4778  0B6C  3E09               	addlw	9
  4779  0B6D  0020               	movlb	0	; select bank0
  4780  0B6E  00A4               	movwf	___wmul@multiplier
  4781  0B6F  3000               	movlw	0
  4782  0B70  3D78               	addwfc	?___awdiv+1,w
  4783  0B71  00A5               	movwf	___wmul@multiplier+1
  4784  0B72  3003               	movlw	3
  4785  0B73  00A6               	movwf	___wmul@multiplicand
  4786  0B74  3000               	movlw	0
  4787  0B75  00A7               	movwf	___wmul@multiplicand+1
  4788  0B76  3188  2000  318B   	fcall	___wmul
  4789  0B79  0020               	movlb	0	; select bank0
  4790  0B7A  0825               	movf	?___wmul+1,w
  4791  0B7B  0085               	movwf	5
  4792  0B7C  0824               	movf	?___wmul,w
  4793  0B7D  0084               	movwf	4
  4794  0B7E  3028               	movlw	low (__npowers_| (0+32768))
  4795  0B7F  0784               	addwf	4,f
  4796  0B80  3090               	movlw	high (__npowers_| (0+32768))
  4797  0B81  3D85               	addwfc	5,f
  4798  0B82  3F00               	moviw [0]fsr0
  4799  0B83  00A8               	movwf	___ftmul@f1
  4800  0B84  3F01               	moviw [1]fsr0
  4801  0B85  00A9               	movwf	___ftmul@f1+1
  4802  0B86  3F02               	moviw [2]fsr0
  4803  0B87  00AA               	movwf	___ftmul@f1+2
  4804  0B88  3064               	movlw	100
  4805  0B89  00F7               	movwf	___awdiv@divisor
  4806  0B8A  3000               	movlw	0
  4807  0B8B  00F8               	movwf	___awdiv@divisor+1
  4808  0B8C  0840               	movf	scale@scl,w
  4809  0B8D  00F9               	movwf	___awdiv@dividend
  4810  0B8E  01FA               	clrf	___awdiv@dividend+1
  4811  0B8F  1BF9               	btfsc	___awdiv@dividend,7
  4812  0B90  03FA               	decf	___awdiv@dividend+1,f
  4813  0B91  3196  2673  318B   	fcall	___awdiv
  4814  0B94  0877               	movf	?___awdiv,w
  4815  0B95  3E12               	addlw	18
  4816  0B96  0020               	movlb	0	; select bank0
  4817  0B97  00A4               	movwf	___wmul@multiplier
  4818  0B98  3000               	movlw	0
  4819  0B99  3D78               	addwfc	?___awdiv+1,w
  4820  0B9A  00A5               	movwf	___wmul@multiplier+1
  4821  0B9B  3003               	movlw	3
  4822  0B9C  00A6               	movwf	___wmul@multiplicand
  4823  0B9D  3000               	movlw	0
  4824  0B9E  00A7               	movwf	___wmul@multiplicand+1
  4825  0B9F  3188  2000  318B   	fcall	___wmul
  4826  0BA2  0020               	movlb	0	; select bank0
  4827  0BA3  0825               	movf	?___wmul+1,w
  4828  0BA4  0085               	movwf	5
  4829  0BA5  0824               	movf	?___wmul,w
  4830  0BA6  0084               	movwf	4
  4831  0BA7  3028               	movlw	low (__npowers_| (0+32768))
  4832  0BA8  0784               	addwf	4,f
  4833  0BA9  3090               	movlw	high (__npowers_| (0+32768))
  4834  0BAA  3D85               	addwfc	5,f
  4835  0BAB  3F00               	moviw [0]fsr0
  4836  0BAC  00AB               	movwf	___ftmul@f2
  4837  0BAD  3F01               	moviw [1]fsr0
  4838  0BAE  00AC               	movwf	___ftmul@f2+1
  4839  0BAF  3F02               	moviw [2]fsr0
  4840  0BB0  00AD               	movwf	___ftmul@f2+2
  4841  0BB1  3197  274C  318B   	fcall	___ftmul
  4842  0BB4  0020               	movlb	0	; select bank0
  4843  0BB5  0828               	movf	?___ftmul,w
  4844  0BB6  00BD               	movwf	_scale$749
  4845  0BB7  0829               	movf	?___ftmul+1,w
  4846  0BB8  00BE               	movwf	_scale$749+1
  4847  0BB9  082A               	movf	?___ftmul+2,w
  4848  0BBA  00BF               	movwf	_scale$749+2
  4849                           
  4850                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4851  0BBB  0840               	movf	scale@scl,w
  4852  0BBC  00F2               	movwf	___awmod@dividend
  4853  0BBD  01F3               	clrf	___awmod@dividend+1
  4854  0BBE  1BF2               	btfsc	___awmod@dividend,7
  4855  0BBF  03F3               	decf	___awmod@dividend+1,f
  4856  0BC0  300A               	movlw	10
  4857  0BC1  00F0               	movwf	___awmod@divisor
  4858  0BC2  3000               	movlw	0
  4859  0BC3  00F1               	movwf	___awmod@divisor+1
  4860  0BC4  3195  2590  318B   	fcall	___awmod
  4861  0BC7  0871               	movf	?___awmod+1,w
  4862  0BC8  0020               	movlb	0	; select bank0
  4863  0BC9  00A5               	movwf	___wmul@multiplier+1
  4864  0BCA  0870               	movf	?___awmod,w
  4865  0BCB  00A4               	movwf	___wmul@multiplier
  4866  0BCC  3003               	movlw	3
  4867  0BCD  00A6               	movwf	___wmul@multiplicand
  4868  0BCE  3000               	movlw	0
  4869  0BCF  00A7               	movwf	___wmul@multiplicand+1
  4870  0BD0  3188  2000  318B   	fcall	___wmul
  4871  0BD3  0020               	movlb	0	; select bank0
  4872  0BD4  0825               	movf	?___wmul+1,w
  4873  0BD5  0085               	movwf	5
  4874  0BD6  0824               	movf	?___wmul,w
  4875  0BD7  0084               	movwf	4
  4876  0BD8  3028               	movlw	low (__npowers_| (0+32768))
  4877  0BD9  0784               	addwf	4,f
  4878  0BDA  3090               	movlw	high (__npowers_| (0+32768))
  4879  0BDB  3D85               	addwfc	5,f
  4880  0BDC  3F00               	moviw [0]fsr0
  4881  0BDD  00A8               	movwf	___ftmul@f1
  4882  0BDE  3F01               	moviw [1]fsr0
  4883  0BDF  00A9               	movwf	___ftmul@f1+1
  4884  0BE0  3F02               	moviw [2]fsr0
  4885  0BE1  00AA               	movwf	___ftmul@f1+2
  4886  0BE2  083D               	movf	_scale$749,w
  4887  0BE3  00AB               	movwf	___ftmul@f2
  4888  0BE4  083E               	movf	_scale$749+1,w
  4889  0BE5  00AC               	movwf	___ftmul@f2+1
  4890  0BE6  083F               	movf	_scale$749+2,w
  4891  0BE7  00AD               	movwf	___ftmul@f2+2
  4892  0BE8  3197  274C         	fcall	___ftmul
  4893  0BEA  0020               	movlb	0	; select bank0
  4894  0BEB  0828               	movf	?___ftmul,w
  4895  0BEC  00B8               	movwf	?_scale
  4896  0BED  0829               	movf	?___ftmul+1,w
  4897  0BEE  00B9               	movwf	?_scale+1
  4898  0BEF  082A               	movf	?___ftmul+2,w
  4899  0BF0  00BA               	movwf	?_scale+2
  4900  0BF1  0008               	return
  4901  0BF2                     l2323:	
  4902                           
  4903                           ;doprnt.c: 432: else if(scl > 10)
  4904  0BF2  0840               	movf	scale@scl,w
  4905  0BF3  3A80               	xorlw	128
  4906  0BF4  3E75               	addlw	-139
  4907  0BF5  1C03               	skipc
  4908  0BF6  2C51               	goto	l2329
  4909                           
  4910                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4911  0BF7  0840               	movf	scale@scl,w
  4912  0BF8  00F2               	movwf	___awmod@dividend
  4913  0BF9  01F3               	clrf	___awmod@dividend+1
  4914  0BFA  1BF2               	btfsc	___awmod@dividend,7
  4915  0BFB  03F3               	decf	___awmod@dividend+1,f
  4916  0BFC  300A               	movlw	10
  4917  0BFD  00F0               	movwf	___awmod@divisor
  4918  0BFE  3000               	movlw	0
  4919  0BFF  00F1               	movwf	___awmod@divisor+1
  4920  0C00  3195  2590  318B   	fcall	___awmod
  4921  0C03  0871               	movf	?___awmod+1,w
  4922  0C04  0020               	movlb	0	; select bank0
  4923  0C05  00A5               	movwf	___wmul@multiplier+1
  4924  0C06  0870               	movf	?___awmod,w
  4925  0C07  00A4               	movwf	___wmul@multiplier
  4926  0C08  3003               	movlw	3
  4927  0C09  00A6               	movwf	___wmul@multiplicand
  4928  0C0A  3000               	movlw	0
  4929  0C0B  00A7               	movwf	___wmul@multiplicand+1
  4930  0C0C  3188  2000  318B   	fcall	___wmul
  4931  0C0F  0020               	movlb	0	; select bank0
  4932  0C10  0825               	movf	?___wmul+1,w
  4933  0C11  0085               	movwf	5
  4934  0C12  0824               	movf	?___wmul,w
  4935  0C13  0084               	movwf	4
  4936  0C14  3028               	movlw	low (__npowers_| (0+32768))
  4937  0C15  0784               	addwf	4,f
  4938  0C16  3090               	movlw	high (__npowers_| (0+32768))
  4939  0C17  3D85               	addwfc	5,f
  4940  0C18  3F00               	moviw [0]fsr0
  4941  0C19  00A8               	movwf	___ftmul@f1
  4942  0C1A  3F01               	moviw [1]fsr0
  4943  0C1B  00A9               	movwf	___ftmul@f1+1
  4944  0C1C  3F02               	moviw [2]fsr0
  4945  0C1D  00AA               	movwf	___ftmul@f1+2
  4946  0C1E  300A               	movlw	10
  4947  0C1F  00F7               	movwf	___awdiv@divisor
  4948  0C20  3000               	movlw	0
  4949  0C21  00F8               	movwf	___awdiv@divisor+1
  4950  0C22  0840               	movf	scale@scl,w
  4951  0C23  00F9               	movwf	___awdiv@dividend
  4952  0C24  01FA               	clrf	___awdiv@dividend+1
  4953  0C25  1BF9               	btfsc	___awdiv@dividend,7
  4954  0C26  03FA               	decf	___awdiv@dividend+1,f
  4955  0C27  3196  2673  318B   	fcall	___awdiv
  4956  0C2A  0877               	movf	?___awdiv,w
  4957  0C2B  3E09               	addlw	9
  4958  0C2C  0020               	movlb	0	; select bank0
  4959  0C2D  00A4               	movwf	___wmul@multiplier
  4960  0C2E  3000               	movlw	0
  4961  0C2F  3D78               	addwfc	?___awdiv+1,w
  4962  0C30  00A5               	movwf	___wmul@multiplier+1
  4963  0C31  3003               	movlw	3
  4964  0C32  00A6               	movwf	___wmul@multiplicand
  4965  0C33  3000               	movlw	0
  4966  0C34  00A7               	movwf	___wmul@multiplicand+1
  4967  0C35  3188  2000  318B   	fcall	___wmul
  4968  0C38  0020               	movlb	0	; select bank0
  4969  0C39  0825               	movf	?___wmul+1,w
  4970  0C3A  0085               	movwf	5
  4971  0C3B  0824               	movf	?___wmul,w
  4972  0C3C  0084               	movwf	4
  4973  0C3D  3028               	movlw	low (__npowers_| (0+32768))
  4974  0C3E  0784               	addwf	4,f
  4975  0C3F  3090               	movlw	high (__npowers_| (0+32768))
  4976  0C40  3D85               	addwfc	5,f
  4977  0C41  3F00               	moviw [0]fsr0
  4978  0C42  00AB               	movwf	___ftmul@f2
  4979  0C43  3F01               	moviw [1]fsr0
  4980  0C44  00AC               	movwf	___ftmul@f2+1
  4981  0C45  3F02               	moviw [2]fsr0
  4982  0C46  00AD               	movwf	___ftmul@f2+2
  4983  0C47  3197  274C         	fcall	___ftmul
  4984  0C49  0020               	movlb	0	; select bank0
  4985  0C4A  0828               	movf	?___ftmul,w
  4986  0C4B  00B8               	movwf	?_scale
  4987  0C4C  0829               	movf	?___ftmul+1,w
  4988  0C4D  00B9               	movwf	?_scale+1
  4989  0C4E  082A               	movf	?___ftmul+2,w
  4990  0C4F  00BA               	movwf	?_scale+2
  4991  0C50  0008               	return
  4992  0C51                     l2329:	
  4993                           
  4994                           ;doprnt.c: 434: return _npowers_[scl];
  4995  0C51  0840               	movf	scale@scl,w
  4996  0C52  00BB               	movwf	??_scale
  4997  0C53  01BC               	clrf	??_scale+1
  4998  0C54  083B               	movf	??_scale,w
  4999  0C55  00A4               	movwf	___wmul@multiplier
  5000  0C56  083C               	movf	??_scale+1,w
  5001  0C57  00A5               	movwf	___wmul@multiplier+1
  5002  0C58  3003               	movlw	3
  5003  0C59  00A6               	movwf	___wmul@multiplicand
  5004  0C5A  3000               	movlw	0
  5005  0C5B  00A7               	movwf	___wmul@multiplicand+1
  5006  0C5C  3188  2000         	fcall	___wmul
  5007  0C5E  0020               	movlb	0	; select bank0
  5008  0C5F  0825               	movf	?___wmul+1,w
  5009  0C60  0085               	movwf	5
  5010  0C61  0824               	movf	?___wmul,w
  5011  0C62  0084               	movwf	4
  5012  0C63  3028               	movlw	low (__npowers_| (0+32768))
  5013  0C64  0784               	addwf	4,f
  5014  0C65  3090               	movlw	high (__npowers_| (0+32768))
  5015  0C66  3D85               	addwfc	5,f
  5016  0C67  3F00               	moviw [0]fsr0
  5017  0C68  00B8               	movwf	?_scale
  5018  0C69  3F01               	moviw [1]fsr0
  5019  0C6A  00B9               	movwf	?_scale+1
  5020  0C6B  3F02               	moviw [2]fsr0
  5021  0C6C  00BA               	movwf	?_scale+2
  5022  0C6D  0008               	return
  5023  0C6E                     l2333:	
  5024                           
  5025                           ;doprnt.c: 435: }
  5026                           ;doprnt.c: 436: if(scl>=110)
  5027  0C6E  0840               	movf	scale@scl,w
  5028  0C6F  3A80               	xorlw	128
  5029  0C70  3E12               	addlw	-238
  5030  0C71  1C03               	skipc
  5031  0C72  2D11               	goto	l2341
  5032                           
  5033                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5034  0C73  300A               	movlw	10
  5035  0C74  00F7               	movwf	___awdiv@divisor
  5036  0C75  3000               	movlw	0
  5037  0C76  00F8               	movwf	___awdiv@divisor+1
  5038  0C77  0840               	movf	scale@scl,w
  5039  0C78  00F2               	movwf	___awmod@dividend
  5040  0C79  01F3               	clrf	___awmod@dividend+1
  5041  0C7A  1BF2               	btfsc	___awmod@dividend,7
  5042  0C7B  03F3               	decf	___awmod@dividend+1,f
  5043  0C7C  3064               	movlw	100
  5044  0C7D  00F0               	movwf	___awmod@divisor
  5045  0C7E  3000               	movlw	0
  5046  0C7F  00F1               	movwf	___awmod@divisor+1
  5047  0C80  3195  2590  318B   	fcall	___awmod
  5048  0C83  0871               	movf	?___awmod+1,w
  5049  0C84  00FA               	movwf	___awdiv@dividend+1
  5050  0C85  0870               	movf	?___awmod,w
  5051  0C86  00F9               	movwf	___awdiv@dividend
  5052  0C87  3196  2673  318B   	fcall	___awdiv
  5053  0C8A  0877               	movf	?___awdiv,w
  5054  0C8B  3E09               	addlw	9
  5055  0C8C  0020               	movlb	0	; select bank0
  5056  0C8D  00A4               	movwf	___wmul@multiplier
  5057  0C8E  3000               	movlw	0
  5058  0C8F  3D78               	addwfc	?___awdiv+1,w
  5059  0C90  00A5               	movwf	___wmul@multiplier+1
  5060  0C91  3003               	movlw	3
  5061  0C92  00A6               	movwf	___wmul@multiplicand
  5062  0C93  3000               	movlw	0
  5063  0C94  00A7               	movwf	___wmul@multiplicand+1
  5064  0C95  3188  2000  318B   	fcall	___wmul
  5065  0C98  0020               	movlb	0	; select bank0
  5066  0C99  0825               	movf	?___wmul+1,w
  5067  0C9A  0085               	movwf	5
  5068  0C9B  0824               	movf	?___wmul,w
  5069  0C9C  0084               	movwf	4
  5070  0C9D  304F               	movlw	low (__powers_| (0+32768))
  5071  0C9E  0784               	addwf	4,f
  5072  0C9F  3090               	movlw	high (__powers_| (0+32768))
  5073  0CA0  3D85               	addwfc	5,f
  5074  0CA1  3F00               	moviw [0]fsr0
  5075  0CA2  00A8               	movwf	___ftmul@f1
  5076  0CA3  3F01               	moviw [1]fsr0
  5077  0CA4  00A9               	movwf	___ftmul@f1+1
  5078  0CA5  3F02               	moviw [2]fsr0
  5079  0CA6  00AA               	movwf	___ftmul@f1+2
  5080  0CA7  3064               	movlw	100
  5081  0CA8  00F7               	movwf	___awdiv@divisor
  5082  0CA9  3000               	movlw	0
  5083  0CAA  00F8               	movwf	___awdiv@divisor+1
  5084  0CAB  0840               	movf	scale@scl,w
  5085  0CAC  00F9               	movwf	___awdiv@dividend
  5086  0CAD  01FA               	clrf	___awdiv@dividend+1
  5087  0CAE  1BF9               	btfsc	___awdiv@dividend,7
  5088  0CAF  03FA               	decf	___awdiv@dividend+1,f
  5089  0CB0  3196  2673  318B   	fcall	___awdiv
  5090  0CB3  0877               	movf	?___awdiv,w
  5091  0CB4  3E12               	addlw	18
  5092  0CB5  0020               	movlb	0	; select bank0
  5093  0CB6  00A4               	movwf	___wmul@multiplier
  5094  0CB7  3000               	movlw	0
  5095  0CB8  3D78               	addwfc	?___awdiv+1,w
  5096  0CB9  00A5               	movwf	___wmul@multiplier+1
  5097  0CBA  3003               	movlw	3
  5098  0CBB  00A6               	movwf	___wmul@multiplicand
  5099  0CBC  3000               	movlw	0
  5100  0CBD  00A7               	movwf	___wmul@multiplicand+1
  5101  0CBE  3188  2000  318B   	fcall	___wmul
  5102  0CC1  0020               	movlb	0	; select bank0
  5103  0CC2  0825               	movf	?___wmul+1,w
  5104  0CC3  0085               	movwf	5
  5105  0CC4  0824               	movf	?___wmul,w
  5106  0CC5  0084               	movwf	4
  5107  0CC6  304F               	movlw	low (__powers_| (0+32768))
  5108  0CC7  0784               	addwf	4,f
  5109  0CC8  3090               	movlw	high (__powers_| (0+32768))
  5110  0CC9  3D85               	addwfc	5,f
  5111  0CCA  3F00               	moviw [0]fsr0
  5112  0CCB  00AB               	movwf	___ftmul@f2
  5113  0CCC  3F01               	moviw [1]fsr0
  5114  0CCD  00AC               	movwf	___ftmul@f2+1
  5115  0CCE  3F02               	moviw [2]fsr0
  5116  0CCF  00AD               	movwf	___ftmul@f2+2
  5117  0CD0  3197  274C  318B   	fcall	___ftmul
  5118  0CD3  0020               	movlb	0	; select bank0
  5119  0CD4  0828               	movf	?___ftmul,w
  5120  0CD5  00BD               	movwf	_scale$749
  5121  0CD6  0829               	movf	?___ftmul+1,w
  5122  0CD7  00BE               	movwf	_scale$749+1
  5123  0CD8  082A               	movf	?___ftmul+2,w
  5124  0CD9  00BF               	movwf	_scale$749+2
  5125                           
  5126                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5127  0CDA  0840               	movf	scale@scl,w
  5128  0CDB  00F2               	movwf	___awmod@dividend
  5129  0CDC  01F3               	clrf	___awmod@dividend+1
  5130  0CDD  1BF2               	btfsc	___awmod@dividend,7
  5131  0CDE  03F3               	decf	___awmod@dividend+1,f
  5132  0CDF  300A               	movlw	10
  5133  0CE0  00F0               	movwf	___awmod@divisor
  5134  0CE1  3000               	movlw	0
  5135  0CE2  00F1               	movwf	___awmod@divisor+1
  5136  0CE3  3195  2590  318B   	fcall	___awmod
  5137  0CE6  0871               	movf	?___awmod+1,w
  5138  0CE7  0020               	movlb	0	; select bank0
  5139  0CE8  00A5               	movwf	___wmul@multiplier+1
  5140  0CE9  0870               	movf	?___awmod,w
  5141  0CEA  00A4               	movwf	___wmul@multiplier
  5142  0CEB  3003               	movlw	3
  5143  0CEC  00A6               	movwf	___wmul@multiplicand
  5144  0CED  3000               	movlw	0
  5145  0CEE  00A7               	movwf	___wmul@multiplicand+1
  5146  0CEF  3188  2000  318B   	fcall	___wmul
  5147  0CF2  0020               	movlb	0	; select bank0
  5148  0CF3  0825               	movf	?___wmul+1,w
  5149  0CF4  0085               	movwf	5
  5150  0CF5  0824               	movf	?___wmul,w
  5151  0CF6  0084               	movwf	4
  5152  0CF7  304F               	movlw	low (__powers_| (0+32768))
  5153  0CF8  0784               	addwf	4,f
  5154  0CF9  3090               	movlw	high (__powers_| (0+32768))
  5155  0CFA  3D85               	addwfc	5,f
  5156  0CFB  3F00               	moviw [0]fsr0
  5157  0CFC  00A8               	movwf	___ftmul@f1
  5158  0CFD  3F01               	moviw [1]fsr0
  5159  0CFE  00A9               	movwf	___ftmul@f1+1
  5160  0CFF  3F02               	moviw [2]fsr0
  5161  0D00  00AA               	movwf	___ftmul@f1+2
  5162  0D01  083D               	movf	_scale$749,w
  5163  0D02  00AB               	movwf	___ftmul@f2
  5164  0D03  083E               	movf	_scale$749+1,w
  5165  0D04  00AC               	movwf	___ftmul@f2+1
  5166  0D05  083F               	movf	_scale$749+2,w
  5167  0D06  00AD               	movwf	___ftmul@f2+2
  5168  0D07  3197  274C         	fcall	___ftmul
  5169  0D09  0020               	movlb	0	; select bank0
  5170  0D0A  0828               	movf	?___ftmul,w
  5171  0D0B  00B8               	movwf	?_scale
  5172  0D0C  0829               	movf	?___ftmul+1,w
  5173  0D0D  00B9               	movwf	?_scale+1
  5174  0D0E  082A               	movf	?___ftmul+2,w
  5175  0D0F  00BA               	movwf	?_scale+2
  5176  0D10  0008               	return
  5177  0D11                     l2341:	
  5178                           
  5179                           ;doprnt.c: 438: else if(scl > 10)
  5180  0D11  0840               	movf	scale@scl,w
  5181  0D12  3A80               	xorlw	128
  5182  0D13  3E75               	addlw	-139
  5183  0D14  1C03               	skipc
  5184  0D15  2D70               	goto	l2347
  5185                           
  5186                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5187  0D16  0840               	movf	scale@scl,w
  5188  0D17  00F2               	movwf	___awmod@dividend
  5189  0D18  01F3               	clrf	___awmod@dividend+1
  5190  0D19  1BF2               	btfsc	___awmod@dividend,7
  5191  0D1A  03F3               	decf	___awmod@dividend+1,f
  5192  0D1B  300A               	movlw	10
  5193  0D1C  00F0               	movwf	___awmod@divisor
  5194  0D1D  3000               	movlw	0
  5195  0D1E  00F1               	movwf	___awmod@divisor+1
  5196  0D1F  3195  2590  318B   	fcall	___awmod
  5197  0D22  0871               	movf	?___awmod+1,w
  5198  0D23  0020               	movlb	0	; select bank0
  5199  0D24  00A5               	movwf	___wmul@multiplier+1
  5200  0D25  0870               	movf	?___awmod,w
  5201  0D26  00A4               	movwf	___wmul@multiplier
  5202  0D27  3003               	movlw	3
  5203  0D28  00A6               	movwf	___wmul@multiplicand
  5204  0D29  3000               	movlw	0
  5205  0D2A  00A7               	movwf	___wmul@multiplicand+1
  5206  0D2B  3188  2000  318B   	fcall	___wmul
  5207  0D2E  0020               	movlb	0	; select bank0
  5208  0D2F  0825               	movf	?___wmul+1,w
  5209  0D30  0085               	movwf	5
  5210  0D31  0824               	movf	?___wmul,w
  5211  0D32  0084               	movwf	4
  5212  0D33  304F               	movlw	low (__powers_| (0+32768))
  5213  0D34  0784               	addwf	4,f
  5214  0D35  3090               	movlw	high (__powers_| (0+32768))
  5215  0D36  3D85               	addwfc	5,f
  5216  0D37  3F00               	moviw [0]fsr0
  5217  0D38  00A8               	movwf	___ftmul@f1
  5218  0D39  3F01               	moviw [1]fsr0
  5219  0D3A  00A9               	movwf	___ftmul@f1+1
  5220  0D3B  3F02               	moviw [2]fsr0
  5221  0D3C  00AA               	movwf	___ftmul@f1+2
  5222  0D3D  300A               	movlw	10
  5223  0D3E  00F7               	movwf	___awdiv@divisor
  5224  0D3F  3000               	movlw	0
  5225  0D40  00F8               	movwf	___awdiv@divisor+1
  5226  0D41  0840               	movf	scale@scl,w
  5227  0D42  00F9               	movwf	___awdiv@dividend
  5228  0D43  01FA               	clrf	___awdiv@dividend+1
  5229  0D44  1BF9               	btfsc	___awdiv@dividend,7
  5230  0D45  03FA               	decf	___awdiv@dividend+1,f
  5231  0D46  3196  2673  318B   	fcall	___awdiv
  5232  0D49  0877               	movf	?___awdiv,w
  5233  0D4A  3E09               	addlw	9
  5234  0D4B  0020               	movlb	0	; select bank0
  5235  0D4C  00A4               	movwf	___wmul@multiplier
  5236  0D4D  3000               	movlw	0
  5237  0D4E  3D78               	addwfc	?___awdiv+1,w
  5238  0D4F  00A5               	movwf	___wmul@multiplier+1
  5239  0D50  3003               	movlw	3
  5240  0D51  00A6               	movwf	___wmul@multiplicand
  5241  0D52  3000               	movlw	0
  5242  0D53  00A7               	movwf	___wmul@multiplicand+1
  5243  0D54  3188  2000  318B   	fcall	___wmul
  5244  0D57  0020               	movlb	0	; select bank0
  5245  0D58  0825               	movf	?___wmul+1,w
  5246  0D59  0085               	movwf	5
  5247  0D5A  0824               	movf	?___wmul,w
  5248  0D5B  0084               	movwf	4
  5249  0D5C  304F               	movlw	low (__powers_| (0+32768))
  5250  0D5D  0784               	addwf	4,f
  5251  0D5E  3090               	movlw	high (__powers_| (0+32768))
  5252  0D5F  3D85               	addwfc	5,f
  5253  0D60  3F00               	moviw [0]fsr0
  5254  0D61  00AB               	movwf	___ftmul@f2
  5255  0D62  3F01               	moviw [1]fsr0
  5256  0D63  00AC               	movwf	___ftmul@f2+1
  5257  0D64  3F02               	moviw [2]fsr0
  5258  0D65  00AD               	movwf	___ftmul@f2+2
  5259  0D66  3197  274C         	fcall	___ftmul
  5260  0D68  0020               	movlb	0	; select bank0
  5261  0D69  0828               	movf	?___ftmul,w
  5262  0D6A  00B8               	movwf	?_scale
  5263  0D6B  0829               	movf	?___ftmul+1,w
  5264  0D6C  00B9               	movwf	?_scale+1
  5265  0D6D  082A               	movf	?___ftmul+2,w
  5266  0D6E  00BA               	movwf	?_scale+2
  5267  0D6F  0008               	return
  5268  0D70                     l2347:	
  5269                           
  5270                           ;doprnt.c: 440: return _powers_[scl];
  5271  0D70  0840               	movf	scale@scl,w
  5272  0D71  00BB               	movwf	??_scale
  5273  0D72  01BC               	clrf	??_scale+1
  5274  0D73  083B               	movf	??_scale,w
  5275  0D74  00A4               	movwf	___wmul@multiplier
  5276  0D75  083C               	movf	??_scale+1,w
  5277  0D76  00A5               	movwf	___wmul@multiplier+1
  5278  0D77  3003               	movlw	3
  5279  0D78  00A6               	movwf	___wmul@multiplicand
  5280  0D79  3000               	movlw	0
  5281  0D7A  00A7               	movwf	___wmul@multiplicand+1
  5282  0D7B  3188  2000         	fcall	___wmul
  5283  0D7D  0020               	movlb	0	; select bank0
  5284  0D7E  0825               	movf	?___wmul+1,w
  5285  0D7F  0085               	movwf	5
  5286  0D80  0824               	movf	?___wmul,w
  5287  0D81  0084               	movwf	4
  5288  0D82  304F               	movlw	low (__powers_| (0+32768))
  5289  0D83  0784               	addwf	4,f
  5290  0D84  3090               	movlw	high (__powers_| (0+32768))
  5291  0D85  3D85               	addwfc	5,f
  5292  0D86  3F00               	moviw [0]fsr0
  5293  0D87  00B8               	movwf	?_scale
  5294  0D88  3F01               	moviw [1]fsr0
  5295  0D89  00B9               	movwf	?_scale+1
  5296  0D8A  3F02               	moviw [2]fsr0
  5297  0D8B  00BA               	movwf	?_scale+2
  5298  0D8C  0008               	return
  5299  0D8D                     __end_of_scale:	
  5300                           
  5301                           	psect	text3
  5302  13FA                     __ptext3:	
  5303 ;; *************** function _isdigit *****************
  5304 ;; Defined at:
  5305 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  c               1    wreg     unsigned char 
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;  c               1    1[COMMON] unsigned char 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;		None               void
  5312 ;; Registers used:
  5313 ;;		wreg, status,2, status,0
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;Total ram usage:        2 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; This function calls:
  5326 ;;		Nothing
  5327 ;; This function is called by:
  5328 ;;		_sprintf
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           
  5333                           ;psect for function _isdigit
  5334  13FA                     _isdigit:	
  5335                           
  5336                           ;incstack = 0
  5337                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5338                           ;isdigit@c stored from wreg
  5339  13FA  00F1               	movwf	isdigit@c
  5340  13FB  01F0               	clrf	_isdigit$547
  5341  13FC  303A               	movlw	58
  5342  13FD  0271               	subwf	isdigit@c,w
  5343  13FE  1803               	skipnc
  5344  13FF  2C06               	goto	l2359
  5345  1400  3030               	movlw	48
  5346  1401  0271               	subwf	isdigit@c,w
  5347  1402  1C03               	skipc
  5348  1403  2C06               	goto	l2359
  5349  1404  01F0               	clrf	_isdigit$547
  5350  1405  0AF0               	incf	_isdigit$547,f
  5351  1406                     l2359:	
  5352  1406  0C70               	rrf	_isdigit$547,w
  5353  1407  0008               	return
  5354  1408                     __end_of_isdigit:	
  5355                           
  5356                           	psect	text4
  5357  006D                     __ptext4:	
  5358 ;; *************** function _fround *****************
  5359 ;; Defined at:
  5360 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  prec            1    wreg     unsigned char 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  prec            1   37[BANK0 ] unsigned char 
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  3   24[BANK0 ] unsigned char 
  5367 ;; Registers used:
  5368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5374 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;Total ram usage:       14 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    2
  5381 ;; This function calls:
  5382 ;;		___awdiv
  5383 ;;		___awmod
  5384 ;;		___ftmul
  5385 ;;		___wmul
  5386 ;; This function is called by:
  5387 ;;		_sprintf
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           
  5392                           ;psect for function _fround
  5393  006D                     _fround:	
  5394                           
  5395                           ;incstack = 0
  5396                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5397                           ;fround@prec stored from wreg
  5398  006D  0020               	movlb	0	; select bank0
  5399  006E  00C5               	movwf	fround@prec
  5400                           
  5401                           ;doprnt.c: 413: if(prec>=110)
  5402  006F  306E               	movlw	110
  5403  0070  0245               	subwf	fround@prec,w
  5404  0071  1C03               	skipc
  5405  0072  292D               	goto	l2299
  5406                           
  5407                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5408  0073  300A               	movlw	10
  5409  0074  00F7               	movwf	___awdiv@divisor
  5410  0075  3000               	movlw	0
  5411  0076  00F8               	movwf	___awdiv@divisor+1
  5412  0077  0845               	movf	fround@prec,w
  5413  0078  00BB               	movwf	??_fround
  5414  0079  01BC               	clrf	??_fround+1
  5415  007A  083B               	movf	??_fround,w
  5416  007B  00F2               	movwf	___awmod@dividend
  5417  007C  083C               	movf	??_fround+1,w
  5418  007D  00F3               	movwf	___awmod@dividend+1
  5419  007E  3064               	movlw	100
  5420  007F  00F0               	movwf	___awmod@divisor
  5421  0080  3000               	movlw	0
  5422  0081  00F1               	movwf	___awmod@divisor+1
  5423  0082  3195  2590  3180   	fcall	___awmod
  5424  0085  0871               	movf	?___awmod+1,w
  5425  0086  00FA               	movwf	___awdiv@dividend+1
  5426  0087  0870               	movf	?___awmod,w
  5427  0088  00F9               	movwf	___awdiv@dividend
  5428  0089  3196  2673  3180   	fcall	___awdiv
  5429  008C  0877               	movf	?___awdiv,w
  5430  008D  3E09               	addlw	9
  5431  008E  0020               	movlb	0	; select bank0
  5432  008F  00A4               	movwf	___wmul@multiplier
  5433  0090  3000               	movlw	0
  5434  0091  3D78               	addwfc	?___awdiv+1,w
  5435  0092  00A5               	movwf	___wmul@multiplier+1
  5436  0093  3003               	movlw	3
  5437  0094  00A6               	movwf	___wmul@multiplicand
  5438  0095  3000               	movlw	0
  5439  0096  00A7               	movwf	___wmul@multiplicand+1
  5440  0097  3188  2000  3180   	fcall	___wmul
  5441  009A  0020               	movlb	0	; select bank0
  5442  009B  0825               	movf	?___wmul+1,w
  5443  009C  0085               	movwf	5
  5444  009D  0824               	movf	?___wmul,w
  5445  009E  0084               	movwf	4
  5446  009F  3028               	movlw	low (__npowers_| (0+32768))
  5447  00A0  0784               	addwf	4,f
  5448  00A1  3090               	movlw	high (__npowers_| (0+32768))
  5449  00A2  3D85               	addwfc	5,f
  5450  00A3  3F00               	moviw [0]fsr0
  5451  00A4  00A8               	movwf	___ftmul@f1
  5452  00A5  3F01               	moviw [1]fsr0
  5453  00A6  00A9               	movwf	___ftmul@f1+1
  5454  00A7  3F02               	moviw [2]fsr0
  5455  00A8  00AA               	movwf	___ftmul@f1+2
  5456  00A9  3064               	movlw	100
  5457  00AA  00F7               	movwf	___awdiv@divisor
  5458  00AB  3000               	movlw	0
  5459  00AC  00F8               	movwf	___awdiv@divisor+1
  5460  00AD  0845               	movf	fround@prec,w
  5461  00AE  00BD               	movwf	??_fround+2
  5462  00AF  01BE               	clrf	??_fround+3
  5463  00B0  083D               	movf	??_fround+2,w
  5464  00B1  00F9               	movwf	___awdiv@dividend
  5465  00B2  083E               	movf	??_fround+3,w
  5466  00B3  00FA               	movwf	___awdiv@dividend+1
  5467  00B4  3196  2673  3180   	fcall	___awdiv
  5468  00B7  0877               	movf	?___awdiv,w
  5469  00B8  3E12               	addlw	18
  5470  00B9  0020               	movlb	0	; select bank0
  5471  00BA  00A4               	movwf	___wmul@multiplier
  5472  00BB  3000               	movlw	0
  5473  00BC  3D78               	addwfc	?___awdiv+1,w
  5474  00BD  00A5               	movwf	___wmul@multiplier+1
  5475  00BE  3003               	movlw	3
  5476  00BF  00A6               	movwf	___wmul@multiplicand
  5477  00C0  3000               	movlw	0
  5478  00C1  00A7               	movwf	___wmul@multiplicand+1
  5479  00C2  3188  2000  3180   	fcall	___wmul
  5480  00C5  0020               	movlb	0	; select bank0
  5481  00C6  0825               	movf	?___wmul+1,w
  5482  00C7  0085               	movwf	5
  5483  00C8  0824               	movf	?___wmul,w
  5484  00C9  0084               	movwf	4
  5485  00CA  3028               	movlw	low (__npowers_| (0+32768))
  5486  00CB  0784               	addwf	4,f
  5487  00CC  3090               	movlw	high (__npowers_| (0+32768))
  5488  00CD  3D85               	addwfc	5,f
  5489  00CE  3F00               	moviw [0]fsr0
  5490  00CF  00AB               	movwf	___ftmul@f2
  5491  00D0  3F01               	moviw [1]fsr0
  5492  00D1  00AC               	movwf	___ftmul@f2+1
  5493  00D2  3F02               	moviw [2]fsr0
  5494  00D3  00AD               	movwf	___ftmul@f2+2
  5495  00D4  3197  274C  3180   	fcall	___ftmul
  5496  00D7  0020               	movlb	0	; select bank0
  5497  00D8  0828               	movf	?___ftmul,w
  5498  00D9  00C2               	movwf	_fround$747
  5499  00DA  0829               	movf	?___ftmul+1,w
  5500  00DB  00C3               	movwf	_fround$747+1
  5501  00DC  082A               	movf	?___ftmul+2,w
  5502  00DD  00C4               	movwf	_fround$747+2
  5503                           
  5504                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5505  00DE  0845               	movf	fround@prec,w
  5506  00DF  00BB               	movwf	??_fround
  5507  00E0  01BC               	clrf	??_fround+1
  5508  00E1  083B               	movf	??_fround,w
  5509  00E2  00F2               	movwf	___awmod@dividend
  5510  00E3  083C               	movf	??_fround+1,w
  5511  00E4  00F3               	movwf	___awmod@dividend+1
  5512  00E5  300A               	movlw	10
  5513  00E6  00F0               	movwf	___awmod@divisor
  5514  00E7  3000               	movlw	0
  5515  00E8  00F1               	movwf	___awmod@divisor+1
  5516  00E9  3195  2590  3180   	fcall	___awmod
  5517  00EC  0871               	movf	?___awmod+1,w
  5518  00ED  0020               	movlb	0	; select bank0
  5519  00EE  00A5               	movwf	___wmul@multiplier+1
  5520  00EF  0870               	movf	?___awmod,w
  5521  00F0  00A4               	movwf	___wmul@multiplier
  5522  00F1  3003               	movlw	3
  5523  00F2  00A6               	movwf	___wmul@multiplicand
  5524  00F3  3000               	movlw	0
  5525  00F4  00A7               	movwf	___wmul@multiplicand+1
  5526  00F5  3188  2000  3180   	fcall	___wmul
  5527  00F8  0020               	movlb	0	; select bank0
  5528  00F9  0825               	movf	?___wmul+1,w
  5529  00FA  0085               	movwf	5
  5530  00FB  0824               	movf	?___wmul,w
  5531  00FC  0084               	movwf	4
  5532  00FD  3028               	movlw	low (__npowers_| (0+32768))
  5533  00FE  0784               	addwf	4,f
  5534  00FF  3090               	movlw	high (__npowers_| (0+32768))
  5535  0100  3D85               	addwfc	5,f
  5536  0101  3F00               	moviw [0]fsr0
  5537  0102  00A8               	movwf	___ftmul@f1
  5538  0103  3F01               	moviw [1]fsr0
  5539  0104  00A9               	movwf	___ftmul@f1+1
  5540  0105  3F02               	moviw [2]fsr0
  5541  0106  00AA               	movwf	___ftmul@f1+2
  5542  0107  0842               	movf	_fround$747,w
  5543  0108  00AB               	movwf	___ftmul@f2
  5544  0109  0843               	movf	_fround$747+1,w
  5545  010A  00AC               	movwf	___ftmul@f2+1
  5546  010B  0844               	movf	_fround$747+2,w
  5547  010C  00AD               	movwf	___ftmul@f2+2
  5548  010D  3197  274C  3180   	fcall	___ftmul
  5549  0110  0020               	movlb	0	; select bank0
  5550  0111  0828               	movf	?___ftmul,w
  5551  0112  00BF               	movwf	_fround$748
  5552  0113  0829               	movf	?___ftmul+1,w
  5553  0114  00C0               	movwf	_fround$748+1
  5554  0115  082A               	movf	?___ftmul+2,w
  5555  0116  00C1               	movwf	_fround$748+2
  5556                           
  5557                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5558  0117  3000               	movlw	0
  5559  0118  00A8               	movwf	___ftmul@f1
  5560  0119  3000               	movlw	0
  5561  011A  00A9               	movwf	___ftmul@f1+1
  5562  011B  303F               	movlw	63
  5563  011C  00AA               	movwf	___ftmul@f1+2
  5564  011D  083F               	movf	_fround$748,w
  5565  011E  00AB               	movwf	___ftmul@f2
  5566  011F  0840               	movf	_fround$748+1,w
  5567  0120  00AC               	movwf	___ftmul@f2+1
  5568  0121  0841               	movf	_fround$748+2,w
  5569  0122  00AD               	movwf	___ftmul@f2+2
  5570  0123  3197  274C         	fcall	___ftmul
  5571  0125  0020               	movlb	0	; select bank0
  5572  0126  0828               	movf	?___ftmul,w
  5573  0127  00B8               	movwf	?_fround
  5574  0128  0829               	movf	?___ftmul+1,w
  5575  0129  00B9               	movwf	?_fround+1
  5576  012A  082A               	movf	?___ftmul+2,w
  5577  012B  00BA               	movwf	?_fround+2
  5578  012C  0008               	return
  5579  012D                     l2299:	
  5580                           
  5581                           ;doprnt.c: 415: else if(prec > 10)
  5582  012D  300B               	movlw	11
  5583  012E  0245               	subwf	fround@prec,w
  5584  012F  1C03               	skipc
  5585  0130  29A5               	goto	l2307
  5586                           
  5587                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5588  0131  0845               	movf	fround@prec,w
  5589  0132  00BB               	movwf	??_fround
  5590  0133  01BC               	clrf	??_fround+1
  5591  0134  083B               	movf	??_fround,w
  5592  0135  00F2               	movwf	___awmod@dividend
  5593  0136  083C               	movf	??_fround+1,w
  5594  0137  00F3               	movwf	___awmod@dividend+1
  5595  0138  300A               	movlw	10
  5596  0139  00F0               	movwf	___awmod@divisor
  5597  013A  3000               	movlw	0
  5598  013B  00F1               	movwf	___awmod@divisor+1
  5599  013C  3195  2590  3180   	fcall	___awmod
  5600  013F  0871               	movf	?___awmod+1,w
  5601  0140  0020               	movlb	0	; select bank0
  5602  0141  00A5               	movwf	___wmul@multiplier+1
  5603  0142  0870               	movf	?___awmod,w
  5604  0143  00A4               	movwf	___wmul@multiplier
  5605  0144  3003               	movlw	3
  5606  0145  00A6               	movwf	___wmul@multiplicand
  5607  0146  3000               	movlw	0
  5608  0147  00A7               	movwf	___wmul@multiplicand+1
  5609  0148  3188  2000  3180   	fcall	___wmul
  5610  014B  0020               	movlb	0	; select bank0
  5611  014C  0825               	movf	?___wmul+1,w
  5612  014D  0085               	movwf	5
  5613  014E  0824               	movf	?___wmul,w
  5614  014F  0084               	movwf	4
  5615  0150  3028               	movlw	low (__npowers_| (0+32768))
  5616  0151  0784               	addwf	4,f
  5617  0152  3090               	movlw	high (__npowers_| (0+32768))
  5618  0153  3D85               	addwfc	5,f
  5619  0154  3F00               	moviw [0]fsr0
  5620  0155  00A8               	movwf	___ftmul@f1
  5621  0156  3F01               	moviw [1]fsr0
  5622  0157  00A9               	movwf	___ftmul@f1+1
  5623  0158  3F02               	moviw [2]fsr0
  5624  0159  00AA               	movwf	___ftmul@f1+2
  5625  015A  300A               	movlw	10
  5626  015B  00F7               	movwf	___awdiv@divisor
  5627  015C  3000               	movlw	0
  5628  015D  00F8               	movwf	___awdiv@divisor+1
  5629  015E  0845               	movf	fround@prec,w
  5630  015F  00BD               	movwf	??_fround+2
  5631  0160  01BE               	clrf	??_fround+3
  5632  0161  083D               	movf	??_fround+2,w
  5633  0162  00F9               	movwf	___awdiv@dividend
  5634  0163  083E               	movf	??_fround+3,w
  5635  0164  00FA               	movwf	___awdiv@dividend+1
  5636  0165  3196  2673  3180   	fcall	___awdiv
  5637  0168  0877               	movf	?___awdiv,w
  5638  0169  3E09               	addlw	9
  5639  016A  0020               	movlb	0	; select bank0
  5640  016B  00A4               	movwf	___wmul@multiplier
  5641  016C  3000               	movlw	0
  5642  016D  3D78               	addwfc	?___awdiv+1,w
  5643  016E  00A5               	movwf	___wmul@multiplier+1
  5644  016F  3003               	movlw	3
  5645  0170  00A6               	movwf	___wmul@multiplicand
  5646  0171  3000               	movlw	0
  5647  0172  00A7               	movwf	___wmul@multiplicand+1
  5648  0173  3188  2000  3180   	fcall	___wmul
  5649  0176  0020               	movlb	0	; select bank0
  5650  0177  0825               	movf	?___wmul+1,w
  5651  0178  0085               	movwf	5
  5652  0179  0824               	movf	?___wmul,w
  5653  017A  0084               	movwf	4
  5654  017B  3028               	movlw	low (__npowers_| (0+32768))
  5655  017C  0784               	addwf	4,f
  5656  017D  3090               	movlw	high (__npowers_| (0+32768))
  5657  017E  3D85               	addwfc	5,f
  5658  017F  3F00               	moviw [0]fsr0
  5659  0180  00AB               	movwf	___ftmul@f2
  5660  0181  3F01               	moviw [1]fsr0
  5661  0182  00AC               	movwf	___ftmul@f2+1
  5662  0183  3F02               	moviw [2]fsr0
  5663  0184  00AD               	movwf	___ftmul@f2+2
  5664  0185  3197  274C  3180   	fcall	___ftmul
  5665  0188  0020               	movlb	0	; select bank0
  5666  0189  0828               	movf	?___ftmul,w
  5667  018A  00C2               	movwf	_fround$747
  5668  018B  0829               	movf	?___ftmul+1,w
  5669  018C  00C3               	movwf	_fround$747+1
  5670  018D  082A               	movf	?___ftmul+2,w
  5671  018E  00C4               	movwf	_fround$747+2
  5672                           
  5673                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5674  018F  3000               	movlw	0
  5675  0190  00A8               	movwf	___ftmul@f1
  5676  0191  3000               	movlw	0
  5677  0192  00A9               	movwf	___ftmul@f1+1
  5678  0193  303F               	movlw	63
  5679  0194  00AA               	movwf	___ftmul@f1+2
  5680  0195  0842               	movf	_fround$747,w
  5681  0196  00AB               	movwf	___ftmul@f2
  5682  0197  0843               	movf	_fround$747+1,w
  5683  0198  00AC               	movwf	___ftmul@f2+1
  5684  0199  0844               	movf	_fround$747+2,w
  5685  019A  00AD               	movwf	___ftmul@f2+2
  5686  019B  3197  274C         	fcall	___ftmul
  5687  019D  0020               	movlb	0	; select bank0
  5688  019E  0828               	movf	?___ftmul,w
  5689  019F  00B8               	movwf	?_fround
  5690  01A0  0829               	movf	?___ftmul+1,w
  5691  01A1  00B9               	movwf	?_fround+1
  5692  01A2  082A               	movf	?___ftmul+2,w
  5693  01A3  00BA               	movwf	?_fround+2
  5694  01A4  0008               	return
  5695  01A5                     l2307:	
  5696                           
  5697                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5698  01A5  3000               	movlw	0
  5699  01A6  00A8               	movwf	___ftmul@f1
  5700  01A7  3000               	movlw	0
  5701  01A8  00A9               	movwf	___ftmul@f1+1
  5702  01A9  303F               	movlw	63
  5703  01AA  00AA               	movwf	___ftmul@f1+2
  5704  01AB  0845               	movf	fround@prec,w
  5705  01AC  00BB               	movwf	??_fround
  5706  01AD  01BC               	clrf	??_fround+1
  5707  01AE  083B               	movf	??_fround,w
  5708  01AF  00A4               	movwf	___wmul@multiplier
  5709  01B0  083C               	movf	??_fround+1,w
  5710  01B1  00A5               	movwf	___wmul@multiplier+1
  5711  01B2  3003               	movlw	3
  5712  01B3  00A6               	movwf	___wmul@multiplicand
  5713  01B4  3000               	movlw	0
  5714  01B5  00A7               	movwf	___wmul@multiplicand+1
  5715  01B6  3188  2000  3180   	fcall	___wmul
  5716  01B9  0020               	movlb	0	; select bank0
  5717  01BA  0825               	movf	?___wmul+1,w
  5718  01BB  0085               	movwf	5
  5719  01BC  0824               	movf	?___wmul,w
  5720  01BD  0084               	movwf	4
  5721  01BE  3028               	movlw	low (__npowers_| (0+32768))
  5722  01BF  0784               	addwf	4,f
  5723  01C0  3090               	movlw	high (__npowers_| (0+32768))
  5724  01C1  3D85               	addwfc	5,f
  5725  01C2  3F00               	moviw [0]fsr0
  5726  01C3  00AB               	movwf	___ftmul@f2
  5727  01C4  3F01               	moviw [1]fsr0
  5728  01C5  00AC               	movwf	___ftmul@f2+1
  5729  01C6  3F02               	moviw [2]fsr0
  5730  01C7  00AD               	movwf	___ftmul@f2+2
  5731  01C8  3197  274C         	fcall	___ftmul
  5732  01CA  0020               	movlb	0	; select bank0
  5733  01CB  0828               	movf	?___ftmul,w
  5734  01CC  00B8               	movwf	?_fround
  5735  01CD  0829               	movf	?___ftmul+1,w
  5736  01CE  00B9               	movwf	?_fround+1
  5737  01CF  082A               	movf	?___ftmul+2,w
  5738  01D0  00BA               	movwf	?_fround+2
  5739  01D1  0008               	return
  5740  01D2                     __end_of_fround:	
  5741                           
  5742                           	psect	text5
  5743  0800                     __ptext5:	
  5744 ;; *************** function ___wmul *****************
  5745 ;; Defined at:
  5746 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  multiplier      2    4[BANK0 ] unsigned int 
  5749 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  product         2   12[COMMON] unsigned int 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  2    4[BANK0 ] unsigned int 
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5761 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5765 ;;Total ram usage:        6 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_fround
  5771 ;;		_scale
  5772 ;;		_sprintf
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           
  5777                           ;psect for function ___wmul
  5778  0800                     ___wmul:	
  5779                           
  5780                           ;incstack = 0
  5781                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5782  0800  01FC               	clrf	___wmul@product
  5783  0801  01FD               	clrf	___wmul@product+1
  5784  0802                     l1993:	
  5785  0802  0020               	movlb	0	; select bank0
  5786  0803  1C24               	btfss	___wmul@multiplier,0
  5787  0804  2809               	goto	l388
  5788  0805  0826               	movf	___wmul@multiplicand,w
  5789  0806  07FC               	addwf	___wmul@product,f
  5790  0807  0827               	movf	___wmul@multiplicand+1,w
  5791  0808  3DFD               	addwfc	___wmul@product+1,f
  5792  0809                     l388:	
  5793  0809  3001               	movlw	1
  5794  080A                     u2225:	
  5795  080A  35A6               	lslf	___wmul@multiplicand,f
  5796  080B  0DA7               	rlf	___wmul@multiplicand+1,f
  5797  080C  0B89               	decfsz	9,f
  5798  080D  280A               	goto	u2225
  5799  080E  3001               	movlw	1
  5800  080F                     u2235:	
  5801  080F  36A5               	lsrf	___wmul@multiplier+1,f
  5802  0810  0CA4               	rrf	___wmul@multiplier,f
  5803  0811  0B89               	decfsz	9,f
  5804  0812  280F               	goto	u2235
  5805  0813  0824               	movf	___wmul@multiplier,w
  5806  0814  0425               	iorwf	___wmul@multiplier+1,w
  5807  0815  1D03               	btfss	3,2
  5808  0816  2802               	goto	l1993
  5809  0817  087D               	movf	___wmul@product+1,w
  5810  0818  00A5               	movwf	?___wmul+1
  5811  0819  087C               	movf	___wmul@product,w
  5812  081A  00A4               	movwf	?___wmul
  5813  081B  0008               	return
  5814  081C                     __end_of___wmul:	
  5815                           
  5816                           	psect	text6
  5817  174C                     __ptext6:	
  5818 ;; *************** function ___ftmul *****************
  5819 ;; Defined at:
  5820 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  f1              3    8[BANK0 ] float 
  5823 ;;  f2              3   11[BANK0 ] float 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  5826 ;;  sign            1   23[BANK0 ] unsigned char 
  5827 ;;  cntr            1   22[BANK0 ] unsigned char 
  5828 ;;  exp             1   18[BANK0 ] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  3    8[BANK0 ] float 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0, pclath, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5838 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;Total ram usage:       16 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    1
  5845 ;; This function calls:
  5846 ;;		___ftpack
  5847 ;; This function is called by:
  5848 ;;		_main
  5849 ;;		_fround
  5850 ;;		_scale
  5851 ;;		_sprintf
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           
  5856                           ;psect for function ___ftmul
  5857  174C                     ___ftmul:	
  5858                           
  5859                           ;incstack = 0
  5860                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5861  174C  0020               	movlb	0	; select bank0
  5862  174D  0828               	movf	___ftmul@f1,w
  5863  174E  00AE               	movwf	??___ftmul
  5864  174F  0829               	movf	___ftmul@f1+1,w
  5865  1750  00AF               	movwf	??___ftmul+1
  5866  1751  082A               	movf	___ftmul@f1+2,w
  5867  1752  00B0               	movwf	??___ftmul+2
  5868  1753  1003               	clrc
  5869  1754  0D2F               	rlf	??___ftmul+1,w
  5870  1755  0D30               	rlf	??___ftmul+2,w
  5871  1756  00B1               	movwf	??___ftmul+3
  5872  1757  0831               	movf	??___ftmul+3,w
  5873  1758  00B2               	movwf	___ftmul@exp
  5874  1759  0832               	movf	___ftmul@exp,w
  5875  175A  1D03               	btfss	3,2
  5876  175B  2F63               	goto	l2163
  5877  175C  3000               	movlw	0
  5878  175D  00A8               	movwf	?___ftmul
  5879  175E  3000               	movlw	0
  5880  175F  00A9               	movwf	?___ftmul+1
  5881  1760  3000               	movlw	0
  5882  1761  00AA               	movwf	?___ftmul+2
  5883  1762  0008               	return
  5884  1763                     l2163:	
  5885  1763  082B               	movf	___ftmul@f2,w
  5886  1764  00AE               	movwf	??___ftmul
  5887  1765  082C               	movf	___ftmul@f2+1,w
  5888  1766  00AF               	movwf	??___ftmul+1
  5889  1767  082D               	movf	___ftmul@f2+2,w
  5890  1768  00B0               	movwf	??___ftmul+2
  5891  1769  1003               	clrc
  5892  176A  0D2F               	rlf	??___ftmul+1,w
  5893  176B  0D30               	rlf	??___ftmul+2,w
  5894  176C  00B1               	movwf	??___ftmul+3
  5895  176D  0831               	movf	??___ftmul+3,w
  5896  176E  00B7               	movwf	___ftmul@sign
  5897  176F  0837               	movf	___ftmul@sign,w
  5898  1770  1D03               	btfss	3,2
  5899  1771  2F79               	goto	l2169
  5900  1772  3000               	movlw	0
  5901  1773  00A8               	movwf	?___ftmul
  5902  1774  3000               	movlw	0
  5903  1775  00A9               	movwf	?___ftmul+1
  5904  1776  3000               	movlw	0
  5905  1777  00AA               	movwf	?___ftmul+2
  5906  1778  0008               	return
  5907  1779                     l2169:	
  5908  1779  0837               	movf	___ftmul@sign,w
  5909  177A  3E7B               	addlw	123
  5910  177B  00AE               	movwf	??___ftmul
  5911  177C  082E               	movf	??___ftmul,w
  5912  177D  07B2               	addwf	___ftmul@exp,f
  5913  177E  0828               	movf	___ftmul@f1,w
  5914  177F  00AE               	movwf	??___ftmul
  5915  1780  0829               	movf	___ftmul@f1+1,w
  5916  1781  00AF               	movwf	??___ftmul+1
  5917  1782  082A               	movf	___ftmul@f1+2,w
  5918  1783  00B0               	movwf	??___ftmul+2
  5919  1784  3010               	movlw	16
  5920  1785                     u2695:	
  5921  1785  36B0               	lsrf	??___ftmul+2,f
  5922  1786  0CAF               	rrf	??___ftmul+1,f
  5923  1787  0CAE               	rrf	??___ftmul,f
  5924  1788  0B89               	decfsz	9,f
  5925  1789  2F85               	goto	u2695
  5926  178A  082E               	movf	??___ftmul,w
  5927  178B  00B1               	movwf	??___ftmul+3
  5928  178C  0831               	movf	??___ftmul+3,w
  5929  178D  00B7               	movwf	___ftmul@sign
  5930  178E  082B               	movf	___ftmul@f2,w
  5931  178F  00AE               	movwf	??___ftmul
  5932  1790  082C               	movf	___ftmul@f2+1,w
  5933  1791  00AF               	movwf	??___ftmul+1
  5934  1792  082D               	movf	___ftmul@f2+2,w
  5935  1793  00B0               	movwf	??___ftmul+2
  5936  1794  3010               	movlw	16
  5937  1795                     u2705:	
  5938  1795  36B0               	lsrf	??___ftmul+2,f
  5939  1796  0CAF               	rrf	??___ftmul+1,f
  5940  1797  0CAE               	rrf	??___ftmul,f
  5941  1798  0B89               	decfsz	9,f
  5942  1799  2F95               	goto	u2705
  5943  179A  082E               	movf	??___ftmul,w
  5944  179B  00B1               	movwf	??___ftmul+3
  5945  179C  0831               	movf	??___ftmul+3,w
  5946  179D  06B7               	xorwf	___ftmul@sign,f
  5947  179E  3080               	movlw	128
  5948  179F  00AE               	movwf	??___ftmul
  5949  17A0  082E               	movf	??___ftmul,w
  5950  17A1  05B7               	andwf	___ftmul@sign,f
  5951  17A2  17A9               	bsf	___ftmul@f1+1,7
  5952  17A3  17AC               	bsf	___ftmul@f2+1,7
  5953  17A4  30FF               	movlw	255
  5954  17A5  05AB               	andwf	___ftmul@f2,f
  5955  17A6  30FF               	movlw	255
  5956  17A7  05AC               	andwf	___ftmul@f2+1,f
  5957  17A8  3000               	movlw	0
  5958  17A9  05AD               	andwf	___ftmul@f2+2,f
  5959  17AA  3000               	movlw	0
  5960  17AB  00B3               	movwf	___ftmul@f3_as_product
  5961  17AC  3000               	movlw	0
  5962  17AD  00B4               	movwf	___ftmul@f3_as_product+1
  5963  17AE  3000               	movlw	0
  5964  17AF  00B5               	movwf	___ftmul@f3_as_product+2
  5965  17B0  3007               	movlw	7
  5966  17B1  00AE               	movwf	??___ftmul
  5967  17B2  082E               	movf	??___ftmul,w
  5968  17B3  00B6               	movwf	___ftmul@cntr
  5969  17B4                     l2181:	
  5970  17B4  1C28               	btfss	___ftmul@f1,0
  5971  17B5  2FBC               	goto	l2185
  5972  17B6  082B               	movf	___ftmul@f2,w
  5973  17B7  07B3               	addwf	___ftmul@f3_as_product,f
  5974  17B8  082C               	movf	___ftmul@f2+1,w
  5975  17B9  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  5976  17BA  082D               	movf	___ftmul@f2+2,w
  5977  17BB  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  5978  17BC                     l2185:	
  5979  17BC  3001               	movlw	1
  5980  17BD                     u2725:	
  5981  17BD  36AA               	lsrf	___ftmul@f1+2,f
  5982  17BE  0CA9               	rrf	___ftmul@f1+1,f
  5983  17BF  0CA8               	rrf	___ftmul@f1,f
  5984  17C0  0B89               	decfsz	9,f
  5985  17C1  2FBD               	goto	u2725
  5986  17C2  3001               	movlw	1
  5987  17C3                     u2735:	
  5988  17C3  35AB               	lslf	___ftmul@f2,f
  5989  17C4  0DAC               	rlf	___ftmul@f2+1,f
  5990  17C5  0DAD               	rlf	___ftmul@f2+2,f
  5991  17C6  0B89               	decfsz	9,f
  5992  17C7  2FC3               	goto	u2735
  5993  17C8  3001               	movlw	1
  5994  17C9  02B6               	subwf	___ftmul@cntr,f
  5995  17CA  1D03               	btfss	3,2
  5996  17CB  2FB4               	goto	l2181
  5997  17CC  3009               	movlw	9
  5998  17CD  00AE               	movwf	??___ftmul
  5999  17CE  082E               	movf	??___ftmul,w
  6000  17CF  00B6               	movwf	___ftmul@cntr
  6001  17D0                     l2193:	
  6002  17D0  1C28               	btfss	___ftmul@f1,0
  6003  17D1  2FD8               	goto	l2197
  6004  17D2  082B               	movf	___ftmul@f2,w
  6005  17D3  07B3               	addwf	___ftmul@f3_as_product,f
  6006  17D4  082C               	movf	___ftmul@f2+1,w
  6007  17D5  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  6008  17D6  082D               	movf	___ftmul@f2+2,w
  6009  17D7  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  6010  17D8                     l2197:	
  6011  17D8  3001               	movlw	1
  6012  17D9                     u2765:	
  6013  17D9  36AA               	lsrf	___ftmul@f1+2,f
  6014  17DA  0CA9               	rrf	___ftmul@f1+1,f
  6015  17DB  0CA8               	rrf	___ftmul@f1,f
  6016  17DC  0B89               	decfsz	9,f
  6017  17DD  2FD9               	goto	u2765
  6018  17DE  3001               	movlw	1
  6019  17DF                     u2775:	
  6020  17DF  36B5               	lsrf	___ftmul@f3_as_product+2,f
  6021  17E0  0CB4               	rrf	___ftmul@f3_as_product+1,f
  6022  17E1  0CB3               	rrf	___ftmul@f3_as_product,f
  6023  17E2  0B89               	decfsz	9,f
  6024  17E3  2FDF               	goto	u2775
  6025  17E4  3001               	movlw	1
  6026  17E5  02B6               	subwf	___ftmul@cntr,f
  6027  17E6  1D03               	btfss	3,2
  6028  17E7  2FD0               	goto	l2193
  6029  17E8  0833               	movf	___ftmul@f3_as_product,w
  6030  17E9  00F0               	movwf	___ftpack@arg
  6031  17EA  0834               	movf	___ftmul@f3_as_product+1,w
  6032  17EB  00F1               	movwf	___ftpack@arg+1
  6033  17EC  0835               	movf	___ftmul@f3_as_product+2,w
  6034  17ED  00F2               	movwf	___ftpack@arg+2
  6035  17EE  0832               	movf	___ftmul@exp,w
  6036  17EF  00AE               	movwf	??___ftmul
  6037  17F0  082E               	movf	??___ftmul,w
  6038  17F1  00F3               	movwf	___ftpack@exp
  6039  17F2  0837               	movf	___ftmul@sign,w
  6040  17F3  00AF               	movwf	??___ftmul+1
  6041  17F4  082F               	movf	??___ftmul+1,w
  6042  17F5  00F4               	movwf	___ftpack@sign
  6043  17F6  3188  201C         	fcall	___ftpack
  6044  17F8  0870               	movf	?___ftpack,w
  6045  17F9  0020               	movlb	0	; select bank0
  6046  17FA  00A8               	movwf	?___ftmul
  6047  17FB  0871               	movf	?___ftpack+1,w
  6048  17FC  00A9               	movwf	?___ftmul+1
  6049  17FD  0872               	movf	?___ftpack+2,w
  6050  17FE  00AA               	movwf	?___ftmul+2
  6051  17FF  0008               	return
  6052  1800                     __end_of___ftmul:	
  6053                           
  6054                           	psect	text7
  6055  1590                     __ptext7:	
  6056 ;; *************** function ___awmod *****************
  6057 ;; Defined at:
  6058 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  divisor         2    0[COMMON] int 
  6061 ;;  dividend        2    2[COMMON] int 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  sign            1    6[COMMON] unsigned char 
  6064 ;;  counter         1    5[COMMON] unsigned char 
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  2    0[COMMON] int 
  6067 ;; Registers used:
  6068 ;;		wreg, status,2, status,0
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6074 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;Total ram usage:        7 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; This function calls:
  6081 ;;		Nothing
  6082 ;; This function is called by:
  6083 ;;		_fround
  6084 ;;		_scale
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           
  6089                           ;psect for function ___awmod
  6090  1590                     ___awmod:	
  6091                           
  6092                           ;incstack = 0
  6093                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6094  1590  01F6               	clrf	___awmod@sign
  6095  1591  1FF3               	btfss	___awmod@dividend+1,7
  6096  1592  2D9A               	goto	l2057
  6097  1593  09F2               	comf	___awmod@dividend,f
  6098  1594  09F3               	comf	___awmod@dividend+1,f
  6099  1595  0AF2               	incf	___awmod@dividend,f
  6100  1596  1903               	skipnz
  6101  1597  0AF3               	incf	___awmod@dividend+1,f
  6102  1598  01F6               	clrf	___awmod@sign
  6103  1599  0AF6               	incf	___awmod@sign,f
  6104  159A                     l2057:	
  6105  159A  1FF1               	btfss	___awmod@divisor+1,7
  6106  159B  2DA1               	goto	l2061
  6107  159C  09F0               	comf	___awmod@divisor,f
  6108  159D  09F1               	comf	___awmod@divisor+1,f
  6109  159E  0AF0               	incf	___awmod@divisor,f
  6110  159F  1903               	skipnz
  6111  15A0  0AF1               	incf	___awmod@divisor+1,f
  6112  15A1                     l2061:	
  6113  15A1  0870               	movf	___awmod@divisor,w
  6114  15A2  0471               	iorwf	___awmod@divisor+1,w
  6115  15A3  1903               	btfsc	3,2
  6116  15A4  2DC8               	goto	l2079
  6117  15A5  01F5               	clrf	___awmod@counter
  6118  15A6  0AF5               	incf	___awmod@counter,f
  6119  15A7                     l2069:	
  6120  15A7  1BF1               	btfsc	___awmod@divisor+1,7
  6121  15A8  2DB3               	goto	l2071
  6122  15A9  3001               	movlw	1
  6123  15AA                     u2385:	
  6124  15AA  35F0               	lslf	___awmod@divisor,f
  6125  15AB  0DF1               	rlf	___awmod@divisor+1,f
  6126  15AC  0B89               	decfsz	9,f
  6127  15AD  2DAA               	goto	u2385
  6128  15AE  3001               	movlw	1
  6129  15AF  00F4               	movwf	??___awmod
  6130  15B0  0874               	movf	??___awmod,w
  6131  15B1  07F5               	addwf	___awmod@counter,f
  6132  15B2  2DA7               	goto	l2069
  6133  15B3                     l2071:	
  6134  15B3  0871               	movf	___awmod@divisor+1,w
  6135  15B4  0273               	subwf	___awmod@dividend+1,w
  6136  15B5  1D03               	skipz
  6137  15B6  2DB9               	goto	u2405
  6138  15B7  0870               	movf	___awmod@divisor,w
  6139  15B8  0272               	subwf	___awmod@dividend,w
  6140  15B9                     u2405:	
  6141  15B9  1C03               	skipc
  6142  15BA  2DBF               	goto	l2075
  6143  15BB  0870               	movf	___awmod@divisor,w
  6144  15BC  02F2               	subwf	___awmod@dividend,f
  6145  15BD  0871               	movf	___awmod@divisor+1,w
  6146  15BE  3BF3               	subwfb	___awmod@dividend+1,f
  6147  15BF                     l2075:	
  6148  15BF  3001               	movlw	1
  6149  15C0                     u2415:	
  6150  15C0  36F1               	lsrf	___awmod@divisor+1,f
  6151  15C1  0CF0               	rrf	___awmod@divisor,f
  6152  15C2  0B89               	decfsz	9,f
  6153  15C3  2DC0               	goto	u2415
  6154  15C4  3001               	movlw	1
  6155  15C5  02F5               	subwf	___awmod@counter,f
  6156  15C6  1D03               	btfss	3,2
  6157  15C7  2DB3               	goto	l2071
  6158  15C8                     l2079:	
  6159  15C8  0876               	movf	___awmod@sign,w
  6160  15C9  1903               	btfsc	3,2
  6161  15CA  2DD0               	goto	l2083
  6162  15CB  09F2               	comf	___awmod@dividend,f
  6163  15CC  09F3               	comf	___awmod@dividend+1,f
  6164  15CD  0AF2               	incf	___awmod@dividend,f
  6165  15CE  1903               	skipnz
  6166  15CF  0AF3               	incf	___awmod@dividend+1,f
  6167  15D0                     l2083:	
  6168  15D0  0873               	movf	___awmod@dividend+1,w
  6169  15D1  00F1               	movwf	?___awmod+1
  6170  15D2  0872               	movf	___awmod@dividend,w
  6171  15D3  00F0               	movwf	?___awmod
  6172  15D4  0008               	return
  6173  15D5                     __end_of___awmod:	
  6174                           
  6175                           	psect	text8
  6176  1673                     __ptext8:	
  6177 ;; *************** function ___awdiv *****************
  6178 ;; Defined at:
  6179 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  divisor         2    7[COMMON] int 
  6182 ;;  dividend        2    9[COMMON] int 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  quotient        2    2[BANK0 ] int 
  6185 ;;  sign            1    1[BANK0 ] unsigned char 
  6186 ;;  counter         1    0[BANK0 ] unsigned char 
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  2    7[COMMON] int 
  6189 ;; Registers used:
  6190 ;;		wreg, status,2, status,0
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;Total ram usage:        9 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		_fround
  6206 ;;		_scale
  6207 ;;		_sprintf
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function ___awdiv
  6213  1673                     ___awdiv:	
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6217  1673  0020               	movlb	0	; select bank0
  6218  1674  01A1               	clrf	___awdiv@sign
  6219  1675  1FF8               	btfss	___awdiv@divisor+1,7
  6220  1676  2E7E               	goto	l2013
  6221  1677  09F7               	comf	___awdiv@divisor,f
  6222  1678  09F8               	comf	___awdiv@divisor+1,f
  6223  1679  0AF7               	incf	___awdiv@divisor,f
  6224  167A  1903               	skipnz
  6225  167B  0AF8               	incf	___awdiv@divisor+1,f
  6226  167C  01A1               	clrf	___awdiv@sign
  6227  167D  0AA1               	incf	___awdiv@sign,f
  6228  167E                     l2013:	
  6229  167E  1FFA               	btfss	___awdiv@dividend+1,7
  6230  167F  2E89               	goto	l2019
  6231  1680  09F9               	comf	___awdiv@dividend,f
  6232  1681  09FA               	comf	___awdiv@dividend+1,f
  6233  1682  0AF9               	incf	___awdiv@dividend,f
  6234  1683  1903               	skipnz
  6235  1684  0AFA               	incf	___awdiv@dividend+1,f
  6236  1685  3001               	movlw	1
  6237  1686  00FB               	movwf	??___awdiv
  6238  1687  087B               	movf	??___awdiv,w
  6239  1688  06A1               	xorwf	___awdiv@sign,f
  6240  1689                     l2019:	
  6241  1689  01A2               	clrf	___awdiv@quotient
  6242  168A  01A3               	clrf	___awdiv@quotient+1
  6243  168B  0877               	movf	___awdiv@divisor,w
  6244  168C  0478               	iorwf	___awdiv@divisor+1,w
  6245  168D  1903               	btfsc	3,2
  6246  168E  2EB8               	goto	l2041
  6247  168F  01A0               	clrf	___awdiv@counter
  6248  1690  0AA0               	incf	___awdiv@counter,f
  6249  1691                     l2029:	
  6250  1691  1BF8               	btfsc	___awdiv@divisor+1,7
  6251  1692  2E9D               	goto	l2031
  6252  1693  3001               	movlw	1
  6253  1694                     u2285:	
  6254  1694  35F7               	lslf	___awdiv@divisor,f
  6255  1695  0DF8               	rlf	___awdiv@divisor+1,f
  6256  1696  0B89               	decfsz	9,f
  6257  1697  2E94               	goto	u2285
  6258  1698  3001               	movlw	1
  6259  1699  00FB               	movwf	??___awdiv
  6260  169A  087B               	movf	??___awdiv,w
  6261  169B  07A0               	addwf	___awdiv@counter,f
  6262  169C  2E91               	goto	l2029
  6263  169D                     l2031:	
  6264  169D  3001               	movlw	1
  6265  169E                     u2305:	
  6266  169E  35A2               	lslf	___awdiv@quotient,f
  6267  169F  0DA3               	rlf	___awdiv@quotient+1,f
  6268  16A0  0B89               	decfsz	9,f
  6269  16A1  2E9E               	goto	u2305
  6270  16A2  0878               	movf	___awdiv@divisor+1,w
  6271  16A3  027A               	subwf	___awdiv@dividend+1,w
  6272  16A4  1D03               	skipz
  6273  16A5  2EA8               	goto	u2315
  6274  16A6  0877               	movf	___awdiv@divisor,w
  6275  16A7  0279               	subwf	___awdiv@dividend,w
  6276  16A8                     u2315:	
  6277  16A8  1C03               	skipc
  6278  16A9  2EAF               	goto	l2037
  6279  16AA  0877               	movf	___awdiv@divisor,w
  6280  16AB  02F9               	subwf	___awdiv@dividend,f
  6281  16AC  0878               	movf	___awdiv@divisor+1,w
  6282  16AD  3BFA               	subwfb	___awdiv@dividend+1,f
  6283  16AE  1422               	bsf	___awdiv@quotient,0
  6284  16AF                     l2037:	
  6285  16AF  3001               	movlw	1
  6286  16B0                     u2325:	
  6287  16B0  36F8               	lsrf	___awdiv@divisor+1,f
  6288  16B1  0CF7               	rrf	___awdiv@divisor,f
  6289  16B2  0B89               	decfsz	9,f
  6290  16B3  2EB0               	goto	u2325
  6291  16B4  3001               	movlw	1
  6292  16B5  02A0               	subwf	___awdiv@counter,f
  6293  16B6  1D03               	btfss	3,2
  6294  16B7  2E9D               	goto	l2031
  6295  16B8                     l2041:	
  6296  16B8  0821               	movf	___awdiv@sign,w
  6297  16B9  1903               	btfsc	3,2
  6298  16BA  2EC0               	goto	l2045
  6299  16BB  09A2               	comf	___awdiv@quotient,f
  6300  16BC  09A3               	comf	___awdiv@quotient+1,f
  6301  16BD  0AA2               	incf	___awdiv@quotient,f
  6302  16BE  1903               	skipnz
  6303  16BF  0AA3               	incf	___awdiv@quotient+1,f
  6304  16C0                     l2045:	
  6305  16C0  0823               	movf	___awdiv@quotient+1,w
  6306  16C1  00F8               	movwf	?___awdiv+1
  6307  16C2  0822               	movf	___awdiv@quotient,w
  6308  16C3  00F7               	movwf	?___awdiv
  6309  16C4  0008               	return
  6310  16C5                     __end_of___awdiv:	
  6311                           
  6312                           	psect	text9
  6313  0880                     __ptext9:	
  6314 ;; *************** function __tdiv_to_l_ *****************
  6315 ;; Defined at:
  6316 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  f1              3    0[COMMON] float 
  6319 ;;  f2              3    3[COMMON] float 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  quot            4    0[BANK0 ] unsigned long 
  6322 ;;  exp1            1    5[BANK0 ] unsigned char 
  6323 ;;  cntr            1    4[BANK0 ] unsigned char 
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  4    0[COMMON] unsigned long 
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, status,0
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6333 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;Total ram usage:       16 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_sprintf
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function __tdiv_to_l_
  6348  0880                     __tdiv_to_l_:	
  6349                           
  6350                           ;incstack = 0
  6351                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  6352  0880  0870               	movf	__tdiv_to_l_@f1,w
  6353  0881  00F6               	movwf	??__tdiv_to_l_
  6354  0882  0871               	movf	__tdiv_to_l_@f1+1,w
  6355  0883  00F7               	movwf	??__tdiv_to_l_+1
  6356  0884  0872               	movf	__tdiv_to_l_@f1+2,w
  6357  0885  00F8               	movwf	??__tdiv_to_l_+2
  6358  0886  1003               	clrc
  6359  0887  0D77               	rlf	??__tdiv_to_l_+1,w
  6360  0888  0D78               	rlf	??__tdiv_to_l_+2,w
  6361  0889  00F9               	movwf	??__tdiv_to_l_+3
  6362  088A  0879               	movf	??__tdiv_to_l_+3,w
  6363  088B  0020               	movlb	0	; select bank0
  6364  088C  00A5               	movwf	__tdiv_to_l_@exp1
  6365  088D  0825               	movf	__tdiv_to_l_@exp1,w
  6366  088E  1D03               	btfss	3,2
  6367  088F  2899               	goto	l2369
  6368  0890  3000               	movlw	0
  6369  0891  00F3               	movwf	?__tdiv_to_l_+3
  6370  0892  3000               	movlw	0
  6371  0893  00F2               	movwf	?__tdiv_to_l_+2
  6372  0894  3000               	movlw	0
  6373  0895  00F1               	movwf	?__tdiv_to_l_+1
  6374  0896  3000               	movlw	0
  6375  0897  00F0               	movwf	?__tdiv_to_l_
  6376  0898  0008               	return
  6377  0899                     l2369:	
  6378  0899  0873               	movf	__tdiv_to_l_@f2,w
  6379  089A  00F6               	movwf	??__tdiv_to_l_
  6380  089B  0874               	movf	__tdiv_to_l_@f2+1,w
  6381  089C  00F7               	movwf	??__tdiv_to_l_+1
  6382  089D  0875               	movf	__tdiv_to_l_@f2+2,w
  6383  089E  00F8               	movwf	??__tdiv_to_l_+2
  6384  089F  1003               	clrc
  6385  08A0  0D77               	rlf	??__tdiv_to_l_+1,w
  6386  08A1  0D78               	rlf	??__tdiv_to_l_+2,w
  6387  08A2  00F9               	movwf	??__tdiv_to_l_+3
  6388  08A3  0879               	movf	??__tdiv_to_l_+3,w
  6389  08A4  00A4               	movwf	__tdiv_to_l_@cntr
  6390  08A5  0824               	movf	__tdiv_to_l_@cntr,w
  6391  08A6  1D03               	btfss	3,2
  6392  08A7  28B1               	goto	l623
  6393  08A8  3000               	movlw	0
  6394  08A9  00F3               	movwf	?__tdiv_to_l_+3
  6395  08AA  3000               	movlw	0
  6396  08AB  00F2               	movwf	?__tdiv_to_l_+2
  6397  08AC  3000               	movlw	0
  6398  08AD  00F1               	movwf	?__tdiv_to_l_+1
  6399  08AE  3000               	movlw	0
  6400  08AF  00F0               	movwf	?__tdiv_to_l_
  6401  08B0  0008               	return
  6402  08B1                     l623:	
  6403  08B1  17F1               	bsf	__tdiv_to_l_@f1+1,7
  6404  08B2  30FF               	movlw	255
  6405  08B3  05F0               	andwf	__tdiv_to_l_@f1,f
  6406  08B4  30FF               	movlw	255
  6407  08B5  05F1               	andwf	__tdiv_to_l_@f1+1,f
  6408  08B6  3000               	movlw	0
  6409  08B7  05F2               	andwf	__tdiv_to_l_@f1+2,f
  6410  08B8  17F4               	bsf	__tdiv_to_l_@f2+1,7
  6411  08B9  30FF               	movlw	255
  6412  08BA  05F3               	andwf	__tdiv_to_l_@f2,f
  6413  08BB  30FF               	movlw	255
  6414  08BC  05F4               	andwf	__tdiv_to_l_@f2+1,f
  6415  08BD  3000               	movlw	0
  6416  08BE  05F5               	andwf	__tdiv_to_l_@f2+2,f
  6417  08BF  3000               	movlw	0
  6418  08C0  00A3               	movwf	__tdiv_to_l_@quot+3
  6419  08C1  3000               	movlw	0
  6420  08C2  00A2               	movwf	__tdiv_to_l_@quot+2
  6421  08C3  3000               	movlw	0
  6422  08C4  00A1               	movwf	__tdiv_to_l_@quot+1
  6423  08C5  3000               	movlw	0
  6424  08C6  00A0               	movwf	__tdiv_to_l_@quot
  6425  08C7  307F               	movlw	127
  6426  08C8  02A5               	subwf	__tdiv_to_l_@exp1,f
  6427  08C9  3098               	movlw	152
  6428  08CA  0724               	addwf	__tdiv_to_l_@cntr,w
  6429  08CB  00F6               	movwf	??__tdiv_to_l_
  6430  08CC  0876               	movf	??__tdiv_to_l_,w
  6431  08CD  02A5               	subwf	__tdiv_to_l_@exp1,f
  6432  08CE  3018               	movlw	24
  6433  08CF  00F6               	movwf	??__tdiv_to_l_
  6434  08D0  0876               	movf	??__tdiv_to_l_,w
  6435  08D1  00A4               	movwf	__tdiv_to_l_@cntr
  6436  08D2                     l2383:	
  6437  08D2  3001               	movlw	1
  6438  08D3                     u2985:	
  6439  08D3  35A0               	lslf	__tdiv_to_l_@quot,f
  6440  08D4  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6441  08D5  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6442  08D6  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6443  08D7  0B89               	decfsz	9,f
  6444  08D8  28D3               	goto	u2985
  6445  08D9  0875               	movf	__tdiv_to_l_@f2+2,w
  6446  08DA  0272               	subwf	__tdiv_to_l_@f1+2,w
  6447  08DB  1D03               	skipz
  6448  08DC  28E3               	goto	u2995
  6449  08DD  0874               	movf	__tdiv_to_l_@f2+1,w
  6450  08DE  0271               	subwf	__tdiv_to_l_@f1+1,w
  6451  08DF  1D03               	skipz
  6452  08E0  28E3               	goto	u2995
  6453  08E1  0873               	movf	__tdiv_to_l_@f2,w
  6454  08E2  0270               	subwf	__tdiv_to_l_@f1,w
  6455  08E3                     u2995:	
  6456  08E3  1C03               	skipc
  6457  08E4  28EC               	goto	l2391
  6458  08E5  0873               	movf	__tdiv_to_l_@f2,w
  6459  08E6  02F0               	subwf	__tdiv_to_l_@f1,f
  6460  08E7  0874               	movf	__tdiv_to_l_@f2+1,w
  6461  08E8  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  6462  08E9  0875               	movf	__tdiv_to_l_@f2+2,w
  6463  08EA  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  6464  08EB  1420               	bsf	__tdiv_to_l_@quot,0
  6465  08EC                     l2391:	
  6466  08EC  3001               	movlw	1
  6467  08ED                     u3005:	
  6468  08ED  35F0               	lslf	__tdiv_to_l_@f1,f
  6469  08EE  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  6470  08EF  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  6471  08F0  0B89               	decfsz	9,f
  6472  08F1  28ED               	goto	u3005
  6473  08F2  3001               	movlw	1
  6474  08F3  02A4               	subwf	__tdiv_to_l_@cntr,f
  6475  08F4  1D03               	btfss	3,2
  6476  08F5  28D2               	goto	l2383
  6477  08F6  1FA5               	btfss	__tdiv_to_l_@exp1,7
  6478  08F7  2914               	goto	l2403
  6479  08F8  0825               	movf	__tdiv_to_l_@exp1,w
  6480  08F9  3A80               	xorlw	128
  6481  08FA  3E97               	addlw	151
  6482  08FB  1803               	skipnc
  6483  08FC  2906               	goto	l2401
  6484  08FD  3000               	movlw	0
  6485  08FE  00F3               	movwf	?__tdiv_to_l_+3
  6486  08FF  3000               	movlw	0
  6487  0900  00F2               	movwf	?__tdiv_to_l_+2
  6488  0901  3000               	movlw	0
  6489  0902  00F1               	movwf	?__tdiv_to_l_+1
  6490  0903  3000               	movlw	0
  6491  0904  00F0               	movwf	?__tdiv_to_l_
  6492  0905  0008               	return
  6493  0906                     l2401:	
  6494  0906  3001               	movlw	1
  6495  0907                     u3045:	
  6496  0907  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  6497  0908  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  6498  0909  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  6499  090A  0CA0               	rrf	__tdiv_to_l_@quot,f
  6500  090B  0B89               	decfsz	9,f
  6501  090C  2907               	goto	u3045
  6502  090D  3001               	movlw	1
  6503  090E  00F6               	movwf	??__tdiv_to_l_
  6504  090F  0876               	movf	??__tdiv_to_l_,w
  6505  0910  07A5               	addwf	__tdiv_to_l_@exp1,f
  6506  0911  1903               	btfsc	3,2
  6507  0912  292D               	goto	l2411
  6508  0913  2906               	goto	l2401
  6509  0914                     l2403:	
  6510  0914  3018               	movlw	24
  6511  0915  0225               	subwf	__tdiv_to_l_@exp1,w
  6512  0916  1C03               	skipc
  6513  0917  292A               	goto	l633
  6514  0918  3000               	movlw	0
  6515  0919  00F3               	movwf	?__tdiv_to_l_+3
  6516  091A  3000               	movlw	0
  6517  091B  00F2               	movwf	?__tdiv_to_l_+2
  6518  091C  3000               	movlw	0
  6519  091D  00F1               	movwf	?__tdiv_to_l_+1
  6520  091E  3000               	movlw	0
  6521  091F  00F0               	movwf	?__tdiv_to_l_
  6522  0920  0008               	return
  6523  0921                     l2409:	
  6524  0921  3001               	movlw	1
  6525  0922                     u3075:	
  6526  0922  35A0               	lslf	__tdiv_to_l_@quot,f
  6527  0923  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6528  0924  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6529  0925  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6530  0926  0B89               	decfsz	9,f
  6531  0927  2922               	goto	u3075
  6532  0928  3001               	movlw	1
  6533  0929  02A5               	subwf	__tdiv_to_l_@exp1,f
  6534  092A                     l633:	
  6535  092A  0825               	movf	__tdiv_to_l_@exp1,w
  6536  092B  1D03               	btfss	3,2
  6537  092C  2921               	goto	l2409
  6538  092D                     l2411:	
  6539  092D  0823               	movf	__tdiv_to_l_@quot+3,w
  6540  092E  00F3               	movwf	?__tdiv_to_l_+3
  6541  092F  0822               	movf	__tdiv_to_l_@quot+2,w
  6542  0930  00F2               	movwf	?__tdiv_to_l_+2
  6543  0931  0821               	movf	__tdiv_to_l_@quot+1,w
  6544  0932  00F1               	movwf	?__tdiv_to_l_+1
  6545  0933  0820               	movf	__tdiv_to_l_@quot,w
  6546  0934  00F0               	movwf	?__tdiv_to_l_
  6547  0935  0008               	return
  6548  0936                     __end_of__tdiv_to_l_:	
  6549                           
  6550                           	psect	text10
  6551  0A2C                     __ptext10:	
  6552 ;; *************** function __div_to_l_ *****************
  6553 ;; Defined at:
  6554 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  f1              3    0[COMMON] unsigned long 
  6557 ;;  f2              3    3[COMMON] unsigned long 
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;  quot            4    0[BANK0 ] unsigned long 
  6560 ;;  exp1            1    5[BANK0 ] unsigned char 
  6561 ;;  cntr            1    4[BANK0 ] unsigned char 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  4    0[COMMON] unsigned long 
  6564 ;; Registers used:
  6565 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6571 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Totals:        14       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;Total ram usage:       20 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_sprintf
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           
  6585                           ;psect for function __div_to_l_
  6586  0A2C                     __div_to_l_:	
  6587                           
  6588                           ;incstack = 0
  6589                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  6590  0A2C  3070               	movlw	low (__div_to_l_@f1| 0)
  6591  0A2D  0086               	movwf	6
  6592  0A2E  0187               	clrf	7
  6593  0A2F  3F40               	moviw [0]fsr1
  6594  0A30  00F6               	movwf	??__div_to_l_
  6595  0A31  3F41               	moviw [1]fsr1
  6596  0A32  00F7               	movwf	??__div_to_l_+1
  6597  0A33  3F42               	moviw [2]fsr1
  6598  0A34  00F8               	movwf	??__div_to_l_+2
  6599  0A35  3F43               	moviw [3]fsr1
  6600  0A36  00F9               	movwf	??__div_to_l_+3
  6601  0A37  1003               	clrc
  6602  0A38  0D78               	rlf	??__div_to_l_+2,w
  6603  0A39  0D79               	rlf	??__div_to_l_+3,w
  6604  0A3A  00FA               	movwf	??__div_to_l_+4
  6605  0A3B  087A               	movf	??__div_to_l_+4,w
  6606  0A3C  0020               	movlb	0	; select bank0
  6607  0A3D  00A5               	movwf	__div_to_l_@exp1
  6608  0A3E  0825               	movf	__div_to_l_@exp1,w
  6609  0A3F  1D03               	btfss	3,2
  6610  0A40  2A4A               	goto	l2421
  6611  0A41  3000               	movlw	0
  6612  0A42  00F3               	movwf	?__div_to_l_+3
  6613  0A43  3000               	movlw	0
  6614  0A44  00F2               	movwf	?__div_to_l_+2
  6615  0A45  3000               	movlw	0
  6616  0A46  00F1               	movwf	?__div_to_l_+1
  6617  0A47  3000               	movlw	0
  6618  0A48  00F0               	movwf	?__div_to_l_
  6619  0A49  0008               	return
  6620  0A4A                     l2421:	
  6621  0A4A  3073               	movlw	low (__div_to_l_@f2| 0)
  6622  0A4B  0086               	movwf	6
  6623  0A4C  0187               	clrf	7
  6624  0A4D  3F40               	moviw [0]fsr1
  6625  0A4E  00F6               	movwf	??__div_to_l_
  6626  0A4F  3F41               	moviw [1]fsr1
  6627  0A50  00F7               	movwf	??__div_to_l_+1
  6628  0A51  3F42               	moviw [2]fsr1
  6629  0A52  00F8               	movwf	??__div_to_l_+2
  6630  0A53  3F43               	moviw [3]fsr1
  6631  0A54  00F9               	movwf	??__div_to_l_+3
  6632  0A55  1003               	clrc
  6633  0A56  0D78               	rlf	??__div_to_l_+2,w
  6634  0A57  0D79               	rlf	??__div_to_l_+3,w
  6635  0A58  00FA               	movwf	??__div_to_l_+4
  6636  0A59  087A               	movf	??__div_to_l_+4,w
  6637  0A5A  00A4               	movwf	__div_to_l_@cntr
  6638  0A5B  0824               	movf	__div_to_l_@cntr,w
  6639  0A5C  1D03               	btfss	3,2
  6640  0A5D  2A67               	goto	l2427
  6641  0A5E  3000               	movlw	0
  6642  0A5F  00F3               	movwf	?__div_to_l_+3
  6643  0A60  3000               	movlw	0
  6644  0A61  00F2               	movwf	?__div_to_l_+2
  6645  0A62  3000               	movlw	0
  6646  0A63  00F1               	movwf	?__div_to_l_+1
  6647  0A64  3000               	movlw	0
  6648  0A65  00F0               	movwf	?__div_to_l_
  6649  0A66  0008               	return
  6650  0A67                     l2427:	
  6651  0A67  3070               	movlw	low (__div_to_l_@f1| 0)
  6652  0A68  0086               	movwf	6
  6653  0A69  0187               	clrf	7
  6654  0A6A  3000               	movlw	0
  6655  0A6B  0481               	iorwf	1,f
  6656  0A6C  3141               	addfsr 1,1
  6657  0A6D  3000               	movlw	0
  6658  0A6E  0481               	iorwf	1,f
  6659  0A6F  3141               	addfsr 1,1
  6660  0A70  3080               	movlw	128
  6661  0A71  0481               	iorwf	1,f
  6662  0A72  3141               	addfsr 1,1
  6663  0A73  3000               	movlw	0
  6664  0A74  0481               	iorwf	1,f
  6665  0A75  3070               	movlw	low (__div_to_l_@f1| 0)
  6666  0A76  0086               	movwf	6
  6667  0A77  0187               	clrf	7
  6668  0A78  30FF               	movlw	255
  6669  0A79  0581               	andwf	1,f
  6670  0A7A  3141               	addfsr 1,1
  6671  0A7B  30FF               	movlw	255
  6672  0A7C  0581               	andwf	1,f
  6673  0A7D  3141               	addfsr 1,1
  6674  0A7E  30FF               	movlw	255
  6675  0A7F  0581               	andwf	1,f
  6676  0A80  3141               	addfsr 1,1
  6677  0A81  3000               	movlw	0
  6678  0A82  0581               	andwf	1,f
  6679  0A83  3073               	movlw	low (__div_to_l_@f2| 0)
  6680  0A84  0086               	movwf	6
  6681  0A85  0187               	clrf	7
  6682  0A86  3000               	movlw	0
  6683  0A87  0481               	iorwf	1,f
  6684  0A88  3141               	addfsr 1,1
  6685  0A89  3000               	movlw	0
  6686  0A8A  0481               	iorwf	1,f
  6687  0A8B  3141               	addfsr 1,1
  6688  0A8C  3080               	movlw	128
  6689  0A8D  0481               	iorwf	1,f
  6690  0A8E  3141               	addfsr 1,1
  6691  0A8F  3000               	movlw	0
  6692  0A90  0481               	iorwf	1,f
  6693  0A91  3073               	movlw	low (__div_to_l_@f2| 0)
  6694  0A92  0086               	movwf	6
  6695  0A93  0187               	clrf	7
  6696  0A94  30FF               	movlw	255
  6697  0A95  0581               	andwf	1,f
  6698  0A96  3141               	addfsr 1,1
  6699  0A97  30FF               	movlw	255
  6700  0A98  0581               	andwf	1,f
  6701  0A99  3141               	addfsr 1,1
  6702  0A9A  30FF               	movlw	255
  6703  0A9B  0581               	andwf	1,f
  6704  0A9C  3141               	addfsr 1,1
  6705  0A9D  3000               	movlw	0
  6706  0A9E  0581               	andwf	1,f
  6707  0A9F  3000               	movlw	0
  6708  0AA0  00A3               	movwf	__div_to_l_@quot+3
  6709  0AA1  3000               	movlw	0
  6710  0AA2  00A2               	movwf	__div_to_l_@quot+2
  6711  0AA3  3000               	movlw	0
  6712  0AA4  00A1               	movwf	__div_to_l_@quot+1
  6713  0AA5  3000               	movlw	0
  6714  0AA6  00A0               	movwf	__div_to_l_@quot
  6715  0AA7  307F               	movlw	127
  6716  0AA8  02A5               	subwf	__div_to_l_@exp1,f
  6717  0AA9  30A0               	movlw	160
  6718  0AAA  0724               	addwf	__div_to_l_@cntr,w
  6719  0AAB  00F6               	movwf	??__div_to_l_
  6720  0AAC  0876               	movf	??__div_to_l_,w
  6721  0AAD  02A5               	subwf	__div_to_l_@exp1,f
  6722  0AAE  3020               	movlw	32
  6723  0AAF  00F6               	movwf	??__div_to_l_
  6724  0AB0  0876               	movf	??__div_to_l_,w
  6725  0AB1  00A4               	movwf	__div_to_l_@cntr
  6726  0AB2                     l2437:	
  6727  0AB2  3001               	movlw	1
  6728  0AB3                     u3115:	
  6729  0AB3  35A0               	lslf	__div_to_l_@quot,f
  6730  0AB4  0DA1               	rlf	__div_to_l_@quot+1,f
  6731  0AB5  0DA2               	rlf	__div_to_l_@quot+2,f
  6732  0AB6  0DA3               	rlf	__div_to_l_@quot+3,f
  6733  0AB7  0B89               	decfsz	9,f
  6734  0AB8  2AB3               	goto	u3115
  6735  0AB9  3073               	movlw	low (__div_to_l_@f2| 0)
  6736  0ABA  0086               	movwf	6
  6737  0ABB  0187               	clrf	7
  6738  0ABC  3F40               	moviw [0]fsr1
  6739  0ABD  00F6               	movwf	??__div_to_l_
  6740  0ABE  3F41               	moviw [1]fsr1
  6741  0ABF  00F7               	movwf	??__div_to_l_+1
  6742  0AC0  3F42               	moviw [2]fsr1
  6743  0AC1  00F8               	movwf	??__div_to_l_+2
  6744  0AC2  3F43               	moviw [3]fsr1
  6745  0AC3  00F9               	movwf	??__div_to_l_+3
  6746  0AC4  3070               	movlw	low (__div_to_l_@f1| 0)
  6747  0AC5  0086               	movwf	6
  6748  0AC6  0187               	clrf	7
  6749  0AC7  3F40               	moviw [0]fsr1
  6750  0AC8  00FA               	movwf	??__div_to_l_+4
  6751  0AC9  3F41               	moviw [1]fsr1
  6752  0ACA  00FB               	movwf	??__div_to_l_+5
  6753  0ACB  3F42               	moviw [2]fsr1
  6754  0ACC  00FC               	movwf	??__div_to_l_+6
  6755  0ACD  3F43               	moviw [3]fsr1
  6756  0ACE  00FD               	movwf	??__div_to_l_+7
  6757  0ACF  0879               	movf	??__div_to_l_+3,w
  6758  0AD0  027D               	subwf	??__div_to_l_+7,w
  6759  0AD1  1D03               	skipz
  6760  0AD2  2ADD               	goto	u3125
  6761  0AD3  0878               	movf	??__div_to_l_+2,w
  6762  0AD4  027C               	subwf	??__div_to_l_+6,w
  6763  0AD5  1D03               	skipz
  6764  0AD6  2ADD               	goto	u3125
  6765  0AD7  0877               	movf	??__div_to_l_+1,w
  6766  0AD8  027B               	subwf	??__div_to_l_+5,w
  6767  0AD9  1D03               	skipz
  6768  0ADA  2ADD               	goto	u3125
  6769  0ADB  0876               	movf	??__div_to_l_,w
  6770  0ADC  027A               	subwf	??__div_to_l_+4,w
  6771  0ADD                     u3125:	
  6772  0ADD  1C03               	skipc
  6773  0ADE  2AFA               	goto	l2445
  6774  0ADF  3073               	movlw	low (__div_to_l_@f2| 0)
  6775  0AE0  0086               	movwf	6
  6776  0AE1  0187               	clrf	7
  6777  0AE2  3F40               	moviw [0]fsr1
  6778  0AE3  00F6               	movwf	??__div_to_l_
  6779  0AE4  3F41               	moviw [1]fsr1
  6780  0AE5  00F7               	movwf	??__div_to_l_+1
  6781  0AE6  3F42               	moviw [2]fsr1
  6782  0AE7  00F8               	movwf	??__div_to_l_+2
  6783  0AE8  3F43               	moviw [3]fsr1
  6784  0AE9  00F9               	movwf	??__div_to_l_+3
  6785  0AEA  3070               	movlw	low (__div_to_l_@f1| 0)
  6786  0AEB  0086               	movwf	6
  6787  0AEC  0187               	clrf	7
  6788  0AED  0876               	movf	??__div_to_l_,w
  6789  0AEE  0281               	subwf	1,f
  6790  0AEF  3141               	addfsr 1,1
  6791  0AF0  0877               	movf	??__div_to_l_+1,w
  6792  0AF1  3B81               	subwfb	1,f
  6793  0AF2  3141               	addfsr 1,1
  6794  0AF3  0878               	movf	??__div_to_l_+2,w
  6795  0AF4  3B81               	subwfb	1,f
  6796  0AF5  3141               	addfsr 1,1
  6797  0AF6  0879               	movf	??__div_to_l_+3,w
  6798  0AF7  3B81               	subwfb	1,f
  6799  0AF8  317D               	addfsr 1,-3
  6800  0AF9  1420               	bsf	__div_to_l_@quot,0
  6801  0AFA                     l2445:	
  6802  0AFA  3070               	movlw	low (__div_to_l_@f1| 0)
  6803  0AFB  0086               	movwf	6
  6804  0AFC  0187               	clrf	7
  6805  0AFD  3581               	lslf	1,f
  6806  0AFE  3141               	addfsr 1,1
  6807  0AFF  0D81               	rlf	1,f
  6808  0B00  3141               	addfsr 1,1
  6809  0B01  0D81               	rlf	1,f
  6810  0B02  3141               	addfsr 1,1
  6811  0B03  0D81               	rlf	1,f
  6812  0B04  317D               	addfsr 1,-3
  6813  0B05  3001               	movlw	1
  6814  0B06  02A4               	subwf	__div_to_l_@cntr,f
  6815  0B07  1D03               	btfss	3,2
  6816  0B08  2AB2               	goto	l2437
  6817  0B09  1FA5               	btfss	__div_to_l_@exp1,7
  6818  0B0A  2B27               	goto	l2457
  6819  0B0B  0825               	movf	__div_to_l_@exp1,w
  6820  0B0C  3A80               	xorlw	128
  6821  0B0D  3E9F               	addlw	159
  6822  0B0E  1803               	skipnc
  6823  0B0F  2B19               	goto	l2455
  6824  0B10  3000               	movlw	0
  6825  0B11  00F3               	movwf	?__div_to_l_+3
  6826  0B12  3000               	movlw	0
  6827  0B13  00F2               	movwf	?__div_to_l_+2
  6828  0B14  3000               	movlw	0
  6829  0B15  00F1               	movwf	?__div_to_l_+1
  6830  0B16  3000               	movlw	0
  6831  0B17  00F0               	movwf	?__div_to_l_
  6832  0B18  0008               	return
  6833  0B19                     l2455:	
  6834  0B19  3001               	movlw	1
  6835  0B1A                     u3165:	
  6836  0B1A  36A3               	lsrf	__div_to_l_@quot+3,f
  6837  0B1B  0CA2               	rrf	__div_to_l_@quot+2,f
  6838  0B1C  0CA1               	rrf	__div_to_l_@quot+1,f
  6839  0B1D  0CA0               	rrf	__div_to_l_@quot,f
  6840  0B1E  0B89               	decfsz	9,f
  6841  0B1F  2B1A               	goto	u3165
  6842  0B20  3001               	movlw	1
  6843  0B21  00F6               	movwf	??__div_to_l_
  6844  0B22  0876               	movf	??__div_to_l_,w
  6845  0B23  07A5               	addwf	__div_to_l_@exp1,f
  6846  0B24  1903               	btfsc	3,2
  6847  0B25  2B40               	goto	l2465
  6848  0B26  2B19               	goto	l2455
  6849  0B27                     l2457:	
  6850  0B27  3020               	movlw	32
  6851  0B28  0225               	subwf	__div_to_l_@exp1,w
  6852  0B29  1C03               	skipc
  6853  0B2A  2B3D               	goto	l554
  6854  0B2B  3000               	movlw	0
  6855  0B2C  00F3               	movwf	?__div_to_l_+3
  6856  0B2D  3000               	movlw	0
  6857  0B2E  00F2               	movwf	?__div_to_l_+2
  6858  0B2F  3000               	movlw	0
  6859  0B30  00F1               	movwf	?__div_to_l_+1
  6860  0B31  3000               	movlw	0
  6861  0B32  00F0               	movwf	?__div_to_l_
  6862  0B33  0008               	return
  6863  0B34                     l2463:	
  6864  0B34  3001               	movlw	1
  6865  0B35                     u3195:	
  6866  0B35  35A0               	lslf	__div_to_l_@quot,f
  6867  0B36  0DA1               	rlf	__div_to_l_@quot+1,f
  6868  0B37  0DA2               	rlf	__div_to_l_@quot+2,f
  6869  0B38  0DA3               	rlf	__div_to_l_@quot+3,f
  6870  0B39  0B89               	decfsz	9,f
  6871  0B3A  2B35               	goto	u3195
  6872  0B3B  3001               	movlw	1
  6873  0B3C  02A5               	subwf	__div_to_l_@exp1,f
  6874  0B3D                     l554:	
  6875  0B3D  0825               	movf	__div_to_l_@exp1,w
  6876  0B3E  1D03               	btfss	3,2
  6877  0B3F  2B34               	goto	l2463
  6878  0B40                     l2465:	
  6879  0B40  0823               	movf	__div_to_l_@quot+3,w
  6880  0B41  00F3               	movwf	?__div_to_l_+3
  6881  0B42  0822               	movf	__div_to_l_@quot+2,w
  6882  0B43  00F2               	movwf	?__div_to_l_+2
  6883  0B44  0821               	movf	__div_to_l_@quot+1,w
  6884  0B45  00F1               	movwf	?__div_to_l_+1
  6885  0B46  0820               	movf	__div_to_l_@quot,w
  6886  0B47  00F0               	movwf	?__div_to_l_
  6887  0B48  0008               	return
  6888  0B49                     __end_of__div_to_l_:	
  6889                           
  6890                           	psect	text11
  6891  14B6                     __ptext11:	
  6892 ;; *************** function ___lltoft *****************
  6893 ;; Defined at:
  6894 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;  c               4    8[COMMON] unsigned long 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  exp             1   13[COMMON] unsigned char 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  3    8[COMMON] float 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0, pclath, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;Total ram usage:        6 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    1
  6915 ;; This function calls:
  6916 ;;		___ftpack
  6917 ;; This function is called by:
  6918 ;;		_main
  6919 ;;		_sprintf
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function ___lltoft
  6925  14B6                     ___lltoft:	
  6926                           
  6927                           ;incstack = 0
  6928                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6929  14B6  308E               	movlw	142
  6930  14B7  00FC               	movwf	??___lltoft
  6931  14B8  087C               	movf	??___lltoft,w
  6932  14B9  00FD               	movwf	___lltoft@exp
  6933  14BA                     l2595:	
  6934  14BA  30FF               	movlw	255
  6935  14BB  057B               	andwf	___lltoft@c+3,w
  6936  14BC  1903               	btfsc	3,2
  6937  14BD  2CCA               	goto	l2597
  6938  14BE  3001               	movlw	1
  6939  14BF                     u3495:	
  6940  14BF  36FB               	lsrf	___lltoft@c+3,f
  6941  14C0  0CFA               	rrf	___lltoft@c+2,f
  6942  14C1  0CF9               	rrf	___lltoft@c+1,f
  6943  14C2  0CF8               	rrf	___lltoft@c,f
  6944  14C3  0B89               	decfsz	9,f
  6945  14C4  2CBF               	goto	u3495
  6946  14C5  3001               	movlw	1
  6947  14C6  00FC               	movwf	??___lltoft
  6948  14C7  087C               	movf	??___lltoft,w
  6949  14C8  07FD               	addwf	___lltoft@exp,f
  6950  14C9  2CBA               	goto	l2595
  6951  14CA                     l2597:	
  6952  14CA  0878               	movf	___lltoft@c,w
  6953  14CB  00F0               	movwf	___ftpack@arg
  6954  14CC  0879               	movf	___lltoft@c+1,w
  6955  14CD  00F1               	movwf	___ftpack@arg+1
  6956  14CE  087A               	movf	___lltoft@c+2,w
  6957  14CF  00F2               	movwf	___ftpack@arg+2
  6958  14D0  087D               	movf	___lltoft@exp,w
  6959  14D1  00FC               	movwf	??___lltoft
  6960  14D2  087C               	movf	??___lltoft,w
  6961  14D3  00F3               	movwf	___ftpack@exp
  6962  14D4  01F4               	clrf	___ftpack@sign
  6963  14D5  3188  201C         	fcall	___ftpack
  6964  14D7  0870               	movf	?___ftpack,w
  6965  14D8  00F8               	movwf	?___lltoft
  6966  14D9  0871               	movf	?___ftpack+1,w
  6967  14DA  00F9               	movwf	?___lltoft+1
  6968  14DB  0872               	movf	?___ftpack+2,w
  6969  14DC  00FA               	movwf	?___lltoft+2
  6970  14DD  0008               	return
  6971  14DE                     __end_of___lltoft:	
  6972                           
  6973                           	psect	text12
  6974  154E                     __ptext12:	
  6975 ;; *************** function ___llmod *****************
  6976 ;; Defined at:
  6977 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  divisor         4    0[COMMON] unsigned long 
  6980 ;;  dividend        4    4[COMMON] unsigned long 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  counter         1    9[COMMON] unsigned char 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  4    0[COMMON] unsigned long 
  6985 ;; Registers used:
  6986 ;;		wreg, status,2, status,0
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6992 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;Total ram usage:       10 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; This function calls:
  6999 ;;		Nothing
  7000 ;; This function is called by:
  7001 ;;		_sprintf
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           
  7006                           ;psect for function ___llmod
  7007  154E                     ___llmod:	
  7008                           
  7009                           ;incstack = 0
  7010                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7011  154E  0873               	movf	___llmod@divisor+3,w
  7012  154F  0472               	iorwf	___llmod@divisor+2,w
  7013  1550  0471               	iorwf	___llmod@divisor+1,w
  7014  1551  0470               	iorwf	___llmod@divisor,w
  7015  1552  1903               	skipnz
  7016  1553  2D87               	goto	l2587
  7017  1554  01F9               	clrf	___llmod@counter
  7018  1555  0AF9               	incf	___llmod@counter,f
  7019  1556                     l2577:	
  7020  1556  1BF3               	btfsc	___llmod@divisor+3,7
  7021  1557  2D64               	goto	l2579
  7022  1558  3001               	movlw	1
  7023  1559                     u3445:	
  7024  1559  35F0               	lslf	___llmod@divisor,f
  7025  155A  0DF1               	rlf	___llmod@divisor+1,f
  7026  155B  0DF2               	rlf	___llmod@divisor+2,f
  7027  155C  0DF3               	rlf	___llmod@divisor+3,f
  7028  155D  0B89               	decfsz	9,f
  7029  155E  2D59               	goto	u3445
  7030  155F  3001               	movlw	1
  7031  1560  00F8               	movwf	??___llmod
  7032  1561  0878               	movf	??___llmod,w
  7033  1562  07F9               	addwf	___llmod@counter,f
  7034  1563  2D56               	goto	l2577
  7035  1564                     l2579:	
  7036  1564  0873               	movf	___llmod@divisor+3,w
  7037  1565  0277               	subwf	___llmod@dividend+3,w
  7038  1566  1D03               	skipz
  7039  1567  2D72               	goto	u3465
  7040  1568  0872               	movf	___llmod@divisor+2,w
  7041  1569  0276               	subwf	___llmod@dividend+2,w
  7042  156A  1D03               	skipz
  7043  156B  2D72               	goto	u3465
  7044  156C  0871               	movf	___llmod@divisor+1,w
  7045  156D  0275               	subwf	___llmod@dividend+1,w
  7046  156E  1D03               	skipz
  7047  156F  2D72               	goto	u3465
  7048  1570  0870               	movf	___llmod@divisor,w
  7049  1571  0274               	subwf	___llmod@dividend,w
  7050  1572                     u3465:	
  7051  1572  1C03               	skipc
  7052  1573  2D7C               	goto	l2583
  7053  1574  0870               	movf	___llmod@divisor,w
  7054  1575  02F4               	subwf	___llmod@dividend,f
  7055  1576  0871               	movf	___llmod@divisor+1,w
  7056  1577  3BF5               	subwfb	___llmod@dividend+1,f
  7057  1578  0872               	movf	___llmod@divisor+2,w
  7058  1579  3BF6               	subwfb	___llmod@dividend+2,f
  7059  157A  0873               	movf	___llmod@divisor+3,w
  7060  157B  3BF7               	subwfb	___llmod@dividend+3,f
  7061  157C                     l2583:	
  7062  157C  3001               	movlw	1
  7063  157D                     u3475:	
  7064  157D  36F3               	lsrf	___llmod@divisor+3,f
  7065  157E  0CF2               	rrf	___llmod@divisor+2,f
  7066  157F  0CF1               	rrf	___llmod@divisor+1,f
  7067  1580  0CF0               	rrf	___llmod@divisor,f
  7068  1581  0B89               	decfsz	9,f
  7069  1582  2D7D               	goto	u3475
  7070  1583  3001               	movlw	1
  7071  1584  02F9               	subwf	___llmod@counter,f
  7072  1585  1D03               	btfss	3,2
  7073  1586  2D64               	goto	l2579
  7074  1587                     l2587:	
  7075  1587  0877               	movf	___llmod@dividend+3,w
  7076  1588  00F3               	movwf	?___llmod+3
  7077  1589  0876               	movf	___llmod@dividend+2,w
  7078  158A  00F2               	movwf	?___llmod+2
  7079  158B  0875               	movf	___llmod@dividend+1,w
  7080  158C  00F1               	movwf	?___llmod+1
  7081  158D  0874               	movf	___llmod@dividend,w
  7082  158E  00F0               	movwf	?___llmod
  7083  158F  0008               	return
  7084  1590                     __end_of___llmod:	
  7085                           
  7086                           	psect	text13
  7087  1621                     __ptext13:	
  7088 ;; *************** function ___lldiv *****************
  7089 ;; Defined at:
  7090 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;  divisor         4    0[COMMON] unsigned long 
  7093 ;;  dividend        4    4[COMMON] unsigned long 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;  quotient        4    9[COMMON] unsigned long 
  7096 ;;  counter         1   13[COMMON] unsigned char 
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  4    0[COMMON] unsigned long 
  7099 ;; Registers used:
  7100 ;;		wreg, status,2, status,0
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7106 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7107 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;Total ram usage:       14 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; This function calls:
  7113 ;;		Nothing
  7114 ;; This function is called by:
  7115 ;;		_sprintf
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           
  7120                           ;psect for function ___lldiv
  7121  1621                     ___lldiv:	
  7122                           
  7123                           ;incstack = 0
  7124                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7125  1621  3000               	movlw	0
  7126  1622  00FC               	movwf	___lldiv@quotient+3
  7127  1623  3000               	movlw	0
  7128  1624  00FB               	movwf	___lldiv@quotient+2
  7129  1625  3000               	movlw	0
  7130  1626  00FA               	movwf	___lldiv@quotient+1
  7131  1627  3000               	movlw	0
  7132  1628  00F9               	movwf	___lldiv@quotient
  7133  1629  0873               	movf	___lldiv@divisor+3,w
  7134  162A  0472               	iorwf	___lldiv@divisor+2,w
  7135  162B  0471               	iorwf	___lldiv@divisor+1,w
  7136  162C  0470               	iorwf	___lldiv@divisor,w
  7137  162D  1903               	skipnz
  7138  162E  2E6A               	goto	l2567
  7139  162F  01FD               	clrf	___lldiv@counter
  7140  1630  0AFD               	incf	___lldiv@counter,f
  7141  1631                     l2553:	
  7142  1631  1BF3               	btfsc	___lldiv@divisor+3,7
  7143  1632  2E3F               	goto	l2555
  7144  1633  3001               	movlw	1
  7145  1634                     u3375:	
  7146  1634  35F0               	lslf	___lldiv@divisor,f
  7147  1635  0DF1               	rlf	___lldiv@divisor+1,f
  7148  1636  0DF2               	rlf	___lldiv@divisor+2,f
  7149  1637  0DF3               	rlf	___lldiv@divisor+3,f
  7150  1638  0B89               	decfsz	9,f
  7151  1639  2E34               	goto	u3375
  7152  163A  3001               	movlw	1
  7153  163B  00F8               	movwf	??___lldiv
  7154  163C  0878               	movf	??___lldiv,w
  7155  163D  07FD               	addwf	___lldiv@counter,f
  7156  163E  2E31               	goto	l2553
  7157  163F                     l2555:	
  7158  163F  3001               	movlw	1
  7159  1640                     u3395:	
  7160  1640  35F9               	lslf	___lldiv@quotient,f
  7161  1641  0DFA               	rlf	___lldiv@quotient+1,f
  7162  1642  0DFB               	rlf	___lldiv@quotient+2,f
  7163  1643  0DFC               	rlf	___lldiv@quotient+3,f
  7164  1644  0B89               	decfsz	9,f
  7165  1645  2E40               	goto	u3395
  7166  1646  0873               	movf	___lldiv@divisor+3,w
  7167  1647  0277               	subwf	___lldiv@dividend+3,w
  7168  1648  1D03               	skipz
  7169  1649  2E54               	goto	u3405
  7170  164A  0872               	movf	___lldiv@divisor+2,w
  7171  164B  0276               	subwf	___lldiv@dividend+2,w
  7172  164C  1D03               	skipz
  7173  164D  2E54               	goto	u3405
  7174  164E  0871               	movf	___lldiv@divisor+1,w
  7175  164F  0275               	subwf	___lldiv@dividend+1,w
  7176  1650  1D03               	skipz
  7177  1651  2E54               	goto	u3405
  7178  1652  0870               	movf	___lldiv@divisor,w
  7179  1653  0274               	subwf	___lldiv@dividend,w
  7180  1654                     u3405:	
  7181  1654  1C03               	skipc
  7182  1655  2E5F               	goto	l2563
  7183  1656  0870               	movf	___lldiv@divisor,w
  7184  1657  02F4               	subwf	___lldiv@dividend,f
  7185  1658  0871               	movf	___lldiv@divisor+1,w
  7186  1659  3BF5               	subwfb	___lldiv@dividend+1,f
  7187  165A  0872               	movf	___lldiv@divisor+2,w
  7188  165B  3BF6               	subwfb	___lldiv@dividend+2,f
  7189  165C  0873               	movf	___lldiv@divisor+3,w
  7190  165D  3BF7               	subwfb	___lldiv@dividend+3,f
  7191  165E  1479               	bsf	___lldiv@quotient,0
  7192  165F                     l2563:	
  7193  165F  3001               	movlw	1
  7194  1660                     u3415:	
  7195  1660  36F3               	lsrf	___lldiv@divisor+3,f
  7196  1661  0CF2               	rrf	___lldiv@divisor+2,f
  7197  1662  0CF1               	rrf	___lldiv@divisor+1,f
  7198  1663  0CF0               	rrf	___lldiv@divisor,f
  7199  1664  0B89               	decfsz	9,f
  7200  1665  2E60               	goto	u3415
  7201  1666  3001               	movlw	1
  7202  1667  02FD               	subwf	___lldiv@counter,f
  7203  1668  1D03               	btfss	3,2
  7204  1669  2E3F               	goto	l2555
  7205  166A                     l2567:	
  7206  166A  087C               	movf	___lldiv@quotient+3,w
  7207  166B  00F3               	movwf	?___lldiv+3
  7208  166C  087B               	movf	___lldiv@quotient+2,w
  7209  166D  00F2               	movwf	?___lldiv+2
  7210  166E  087A               	movf	___lldiv@quotient+1,w
  7211  166F  00F1               	movwf	?___lldiv+1
  7212  1670  0879               	movf	___lldiv@quotient,w
  7213  1671  00F0               	movwf	?___lldiv
  7214  1672  0008               	return
  7215  1673                     __end_of___lldiv:	
  7216                           
  7217                           	psect	text14
  7218  16C5                     __ptext14:	
  7219 ;; *************** function ___fttol *****************
  7220 ;; Defined at:
  7221 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;  f1              3   33[BANK0 ] float 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  lval            4   42[BANK0 ] unsigned long 
  7226 ;;  exp1            1   46[BANK0 ] unsigned char 
  7227 ;;  sign1           1   41[BANK0 ] unsigned char 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  4   33[BANK0 ] long 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;Total ram usage:       14 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; This function calls:
  7244 ;;		Nothing
  7245 ;; This function is called by:
  7246 ;;		_sprintf
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           
  7251                           ;psect for function ___fttol
  7252  16C5                     ___fttol:	
  7253                           
  7254                           ;incstack = 0
  7255                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7256  16C5  0020               	movlb	0	; select bank0
  7257  16C6  0841               	movf	___fttol@f1,w
  7258  16C7  00C5               	movwf	??___fttol
  7259  16C8  0842               	movf	___fttol@f1+1,w
  7260  16C9  00C6               	movwf	??___fttol+1
  7261  16CA  0843               	movf	___fttol@f1+2,w
  7262  16CB  00C7               	movwf	??___fttol+2
  7263  16CC  1003               	clrc
  7264  16CD  0D46               	rlf	??___fttol+1,w
  7265  16CE  0D47               	rlf	??___fttol+2,w
  7266  16CF  00C8               	movwf	??___fttol+3
  7267  16D0  0848               	movf	??___fttol+3,w
  7268  16D1  00CE               	movwf	___fttol@exp1
  7269  16D2  084E               	movf	___fttol@exp1,w
  7270  16D3  1D03               	btfss	3,2
  7271  16D4  2EDE               	goto	l2511
  7272  16D5  3000               	movlw	0
  7273  16D6  00C4               	movwf	?___fttol+3
  7274  16D7  3000               	movlw	0
  7275  16D8  00C3               	movwf	?___fttol+2
  7276  16D9  3000               	movlw	0
  7277  16DA  00C2               	movwf	?___fttol+1
  7278  16DB  3000               	movlw	0
  7279  16DC  00C1               	movwf	?___fttol
  7280  16DD  0008               	return
  7281  16DE                     l2511:	
  7282  16DE  0841               	movf	___fttol@f1,w
  7283  16DF  00C5               	movwf	??___fttol
  7284  16E0  0842               	movf	___fttol@f1+1,w
  7285  16E1  00C6               	movwf	??___fttol+1
  7286  16E2  0843               	movf	___fttol@f1+2,w
  7287  16E3  00C7               	movwf	??___fttol+2
  7288  16E4  3017               	movlw	23
  7289  16E5                     u3275:	
  7290  16E5  36C7               	lsrf	??___fttol+2,f
  7291  16E6  0CC6               	rrf	??___fttol+1,f
  7292  16E7  0CC5               	rrf	??___fttol,f
  7293  16E8  0B89               	decfsz	9,f
  7294  16E9  2EE5               	goto	u3275
  7295  16EA  0845               	movf	??___fttol,w
  7296  16EB  00C8               	movwf	??___fttol+3
  7297  16EC  0848               	movf	??___fttol+3,w
  7298  16ED  00C9               	movwf	___fttol@sign1
  7299  16EE  17C2               	bsf	___fttol@f1+1,7
  7300  16EF  30FF               	movlw	255
  7301  16F0  05C1               	andwf	___fttol@f1,f
  7302  16F1  30FF               	movlw	255
  7303  16F2  05C2               	andwf	___fttol@f1+1,f
  7304  16F3  3000               	movlw	0
  7305  16F4  05C3               	andwf	___fttol@f1+2,f
  7306  16F5  0841               	movf	___fttol@f1,w
  7307  16F6  00CA               	movwf	___fttol@lval
  7308  16F7  0842               	movf	___fttol@f1+1,w
  7309  16F8  00CB               	movwf	___fttol@lval+1
  7310  16F9  0843               	movf	___fttol@f1+2,w
  7311  16FA  00CC               	movwf	___fttol@lval+2
  7312  16FB  01CD               	clrf	___fttol@lval+3
  7313  16FC  308E               	movlw	142
  7314  16FD  02CE               	subwf	___fttol@exp1,f
  7315  16FE  1FCE               	btfss	___fttol@exp1,7
  7316  16FF  2F1C               	goto	l2531
  7317  1700  084E               	movf	___fttol@exp1,w
  7318  1701  3A80               	xorlw	128
  7319  1702  3E8F               	addlw	143
  7320  1703  1803               	skipnc
  7321  1704  2F0E               	goto	l2529
  7322  1705  3000               	movlw	0
  7323  1706  00C4               	movwf	?___fttol+3
  7324  1707  3000               	movlw	0
  7325  1708  00C3               	movwf	?___fttol+2
  7326  1709  3000               	movlw	0
  7327  170A  00C2               	movwf	?___fttol+1
  7328  170B  3000               	movlw	0
  7329  170C  00C1               	movwf	?___fttol
  7330  170D  0008               	return
  7331  170E                     l2529:	
  7332  170E  3001               	movlw	1
  7333  170F                     u3305:	
  7334  170F  36CD               	lsrf	___fttol@lval+3,f
  7335  1710  0CCC               	rrf	___fttol@lval+2,f
  7336  1711  0CCB               	rrf	___fttol@lval+1,f
  7337  1712  0CCA               	rrf	___fttol@lval,f
  7338  1713  0B89               	decfsz	9,f
  7339  1714  2F0F               	goto	u3305
  7340  1715  3001               	movlw	1
  7341  1716  00C5               	movwf	??___fttol
  7342  1717  0845               	movf	??___fttol,w
  7343  1718  07CE               	addwf	___fttol@exp1,f
  7344  1719  1903               	btfsc	3,2
  7345  171A  2F35               	goto	l2539
  7346  171B  2F0E               	goto	l2529
  7347  171C                     l2531:	
  7348  171C  3018               	movlw	24
  7349  171D  024E               	subwf	___fttol@exp1,w
  7350  171E  1C03               	skipc
  7351  171F  2F32               	goto	l674
  7352  1720  3000               	movlw	0
  7353  1721  00C4               	movwf	?___fttol+3
  7354  1722  3000               	movlw	0
  7355  1723  00C3               	movwf	?___fttol+2
  7356  1724  3000               	movlw	0
  7357  1725  00C2               	movwf	?___fttol+1
  7358  1726  3000               	movlw	0
  7359  1727  00C1               	movwf	?___fttol
  7360  1728  0008               	return
  7361  1729                     l2537:	
  7362  1729  3001               	movlw	1
  7363  172A                     u3335:	
  7364  172A  35CA               	lslf	___fttol@lval,f
  7365  172B  0DCB               	rlf	___fttol@lval+1,f
  7366  172C  0DCC               	rlf	___fttol@lval+2,f
  7367  172D  0DCD               	rlf	___fttol@lval+3,f
  7368  172E  0B89               	decfsz	9,f
  7369  172F  2F2A               	goto	u3335
  7370  1730  3001               	movlw	1
  7371  1731  02CE               	subwf	___fttol@exp1,f
  7372  1732                     l674:	
  7373  1732  084E               	movf	___fttol@exp1,w
  7374  1733  1D03               	btfss	3,2
  7375  1734  2F29               	goto	l2537
  7376  1735                     l2539:	
  7377  1735  0849               	movf	___fttol@sign1,w
  7378  1736  1903               	btfsc	3,2
  7379  1737  2F43               	goto	l2543
  7380  1738  09CA               	comf	___fttol@lval,f
  7381  1739  09CB               	comf	___fttol@lval+1,f
  7382  173A  09CC               	comf	___fttol@lval+2,f
  7383  173B  09CD               	comf	___fttol@lval+3,f
  7384  173C  0ACA               	incf	___fttol@lval,f
  7385  173D  1903               	skipnz
  7386  173E  0ACB               	incf	___fttol@lval+1,f
  7387  173F  1903               	skipnz
  7388  1740  0ACC               	incf	___fttol@lval+2,f
  7389  1741  1903               	skipnz
  7390  1742  0ACD               	incf	___fttol@lval+3,f
  7391  1743                     l2543:	
  7392  1743  084D               	movf	___fttol@lval+3,w
  7393  1744  00C4               	movwf	?___fttol+3
  7394  1745  084C               	movf	___fttol@lval+2,w
  7395  1746  00C3               	movwf	?___fttol+2
  7396  1747  084B               	movf	___fttol@lval+1,w
  7397  1748  00C2               	movwf	?___fttol+1
  7398  1749  084A               	movf	___fttol@lval,w
  7399  174A  00C1               	movwf	?___fttol
  7400  174B  0008               	return
  7401  174C                     __end_of___fttol:	
  7402                           
  7403                           	psect	text15
  7404  1476                     __ptext15:	
  7405 ;; *************** function ___ftsub *****************
  7406 ;; Defined at:
  7407 ;;		line 18 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  f2              3   51[BANK0 ] float 
  7410 ;;  f1              3   54[BANK0 ] float 
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;		None
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  3   51[BANK0 ] float 
  7415 ;; Registers used:
  7416 ;;		wreg, status,2, status,0, pclath, cstack
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7422 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;Total ram usage:        6 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; Hardware stack levels required when called:    2
  7429 ;; This function calls:
  7430 ;;		___ftadd
  7431 ;; This function is called by:
  7432 ;;		_sprintf
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           
  7437                           ;psect for function ___ftsub
  7438  1476                     ___ftsub:	
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7442  1476  0020               	movlb	0	; select bank0
  7443  1477  0855               	movf	___ftsub@f2+2,w
  7444  1478  0454               	iorwf	___ftsub@f2+1,w
  7445  1479  0453               	iorwf	___ftsub@f2,w
  7446  147A  1903               	skipnz
  7447  147B  2C7E               	goto	l2501
  7448  147C  3080               	movlw	128
  7449  147D  06D5               	xorwf	___ftsub@f2+2,f
  7450  147E                     l2501:	
  7451  147E  0856               	movf	___ftsub@f1,w
  7452  147F  00C6               	movwf	___ftadd@f1
  7453  1480  0857               	movf	___ftsub@f1+1,w
  7454  1481  00C7               	movwf	___ftadd@f1+1
  7455  1482  0858               	movf	___ftsub@f1+2,w
  7456  1483  00C8               	movwf	___ftadd@f1+2
  7457  1484  0853               	movf	___ftsub@f2,w
  7458  1485  00C9               	movwf	___ftadd@f2
  7459  1486  0854               	movf	___ftsub@f2+1,w
  7460  1487  00CA               	movwf	___ftadd@f2+1
  7461  1488  0855               	movf	___ftsub@f2+2,w
  7462  1489  00CB               	movwf	___ftadd@f2+2
  7463  148A  3189  2136         	fcall	___ftadd
  7464  148C  0020               	movlb	0	; select bank0
  7465  148D  0846               	movf	?___ftadd,w
  7466  148E  00D3               	movwf	?___ftsub
  7467  148F  0847               	movf	?___ftadd+1,w
  7468  1490  00D4               	movwf	?___ftsub+1
  7469  1491  0848               	movf	?___ftadd+2,w
  7470  1492  00D5               	movwf	?___ftsub+2
  7471  1493  0008               	return
  7472  1494                     __end_of___ftsub:	
  7473                           
  7474                           	psect	text16
  7475  0936                     __ptext16:	
  7476 ;; *************** function ___ftadd *****************
  7477 ;; Defined at:
  7478 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;  f1              3   38[BANK0 ] float 
  7481 ;;  f2              3   41[BANK0 ] float 
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;  exp1            1   50[BANK0 ] unsigned char 
  7484 ;;  exp2            1   49[BANK0 ] unsigned char 
  7485 ;;  sign            1   48[BANK0 ] unsigned char 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  3   38[BANK0 ] float 
  7488 ;; Registers used:
  7489 ;;		wreg, status,2, status,0, pclath, cstack
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7495 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;Total ram usage:       13 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    1
  7502 ;; This function calls:
  7503 ;;		___ftpack
  7504 ;; This function is called by:
  7505 ;;		_sprintf
  7506 ;;		___ftsub
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function ___ftadd
  7512  0936                     ___ftadd:	
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7516  0936  0020               	movlb	0	; select bank0
  7517  0937  0846               	movf	___ftadd@f1,w
  7518  0938  00CC               	movwf	??___ftadd
  7519  0939  0847               	movf	___ftadd@f1+1,w
  7520  093A  00CD               	movwf	??___ftadd+1
  7521  093B  0848               	movf	___ftadd@f1+2,w
  7522  093C  00CE               	movwf	??___ftadd+2
  7523  093D  1003               	clrc
  7524  093E  0D4D               	rlf	??___ftadd+1,w
  7525  093F  0D4E               	rlf	??___ftadd+2,w
  7526  0940  00CF               	movwf	??___ftadd+3
  7527  0941  084F               	movf	??___ftadd+3,w
  7528  0942  00D2               	movwf	___ftadd@exp1
  7529  0943  0849               	movf	___ftadd@f2,w
  7530  0944  00CC               	movwf	??___ftadd
  7531  0945  084A               	movf	___ftadd@f2+1,w
  7532  0946  00CD               	movwf	??___ftadd+1
  7533  0947  084B               	movf	___ftadd@f2+2,w
  7534  0948  00CE               	movwf	??___ftadd+2
  7535  0949  1003               	clrc
  7536  094A  0D4D               	rlf	??___ftadd+1,w
  7537  094B  0D4E               	rlf	??___ftadd+2,w
  7538  094C  00CF               	movwf	??___ftadd+3
  7539  094D  084F               	movf	??___ftadd+3,w
  7540  094E  00D1               	movwf	___ftadd@exp2
  7541  094F  0852               	movf	___ftadd@exp1,w
  7542  0950  1903               	btfsc	3,2
  7543  0951  295E               	goto	l2093
  7544  0952  0851               	movf	___ftadd@exp2,w
  7545  0953  0252               	subwf	___ftadd@exp1,w
  7546  0954  1803               	skipnc
  7547  0955  2965               	goto	l2097
  7548  0956  0352               	decf	___ftadd@exp1,w
  7549  0957  3AFF               	xorlw	255
  7550  0958  0751               	addwf	___ftadd@exp2,w
  7551  0959  00CC               	movwf	??___ftadd
  7552  095A  3019               	movlw	25
  7553  095B  024C               	subwf	??___ftadd,w
  7554  095C  1C03               	skipc
  7555  095D  2965               	goto	l2097
  7556  095E                     l2093:	
  7557  095E  0849               	movf	___ftadd@f2,w
  7558  095F  00C6               	movwf	?___ftadd
  7559  0960  084A               	movf	___ftadd@f2+1,w
  7560  0961  00C7               	movwf	?___ftadd+1
  7561  0962  084B               	movf	___ftadd@f2+2,w
  7562  0963  00C8               	movwf	?___ftadd+2
  7563  0964  0008               	return
  7564  0965                     l2097:	
  7565  0965  0851               	movf	___ftadd@exp2,w
  7566  0966  1903               	btfsc	3,2
  7567  0967  0008               	return
  7568  0968  0852               	movf	___ftadd@exp1,w
  7569  0969  0251               	subwf	___ftadd@exp2,w
  7570  096A  1803               	skipnc
  7571  096B  2974               	goto	l2103
  7572  096C  0351               	decf	___ftadd@exp2,w
  7573  096D  3AFF               	xorlw	255
  7574  096E  0752               	addwf	___ftadd@exp1,w
  7575  096F  00CC               	movwf	??___ftadd
  7576  0970  3019               	movlw	25
  7577  0971  024C               	subwf	??___ftadd,w
  7578  0972  1803               	btfsc	3,0
  7579  0973  0008               	return
  7580  0974                     l2103:	
  7581  0974  3006               	movlw	6
  7582  0975  00CC               	movwf	??___ftadd
  7583  0976  084C               	movf	??___ftadd,w
  7584  0977  00D0               	movwf	___ftadd@sign
  7585  0978  1BC8               	btfsc	___ftadd@f1+2,7
  7586  0979  17D0               	bsf	___ftadd@sign,7
  7587  097A  1BCB               	btfsc	___ftadd@f2+2,7
  7588  097B  1750               	bsf	___ftadd@sign,6
  7589  097C  17C7               	bsf	___ftadd@f1+1,7
  7590  097D  30FF               	movlw	255
  7591  097E  05C6               	andwf	___ftadd@f1,f
  7592  097F  30FF               	movlw	255
  7593  0980  05C7               	andwf	___ftadd@f1+1,f
  7594  0981  3000               	movlw	0
  7595  0982  05C8               	andwf	___ftadd@f1+2,f
  7596  0983  17CA               	bsf	___ftadd@f2+1,7
  7597  0984  30FF               	movlw	255
  7598  0985  05C9               	andwf	___ftadd@f2,f
  7599  0986  30FF               	movlw	255
  7600  0987  05CA               	andwf	___ftadd@f2+1,f
  7601  0988  3000               	movlw	0
  7602  0989  05CB               	andwf	___ftadd@f2+2,f
  7603  098A  0851               	movf	___ftadd@exp2,w
  7604  098B  0252               	subwf	___ftadd@exp1,w
  7605  098C  1803               	skipnc
  7606  098D  29B0               	goto	l2125
  7607  098E                     l2115:	
  7608  098E  3001               	movlw	1
  7609  098F                     u2535:	
  7610  098F  35C9               	lslf	___ftadd@f2,f
  7611  0990  0DCA               	rlf	___ftadd@f2+1,f
  7612  0991  0DCB               	rlf	___ftadd@f2+2,f
  7613  0992  0B89               	decfsz	9,f
  7614  0993  298F               	goto	u2535
  7615  0994  3001               	movlw	1
  7616  0995  02D1               	subwf	___ftadd@exp2,f
  7617  0996  0851               	movf	___ftadd@exp2,w
  7618  0997  0652               	xorwf	___ftadd@exp1,w
  7619  0998  1903               	skipnz
  7620  0999  29AB               	goto	l2123
  7621  099A  3001               	movlw	1
  7622  099B  02D0               	subwf	___ftadd@sign,f
  7623  099C  0850               	movf	___ftadd@sign,w
  7624  099D  3907               	andlw	7
  7625  099E  1903               	btfsc	3,2
  7626  099F  29AB               	goto	l2123
  7627  09A0  298E               	goto	l2115
  7628  09A1                     l2121:	
  7629  09A1  3001               	movlw	1
  7630  09A2                     u2565:	
  7631  09A2  36C8               	lsrf	___ftadd@f1+2,f
  7632  09A3  0CC7               	rrf	___ftadd@f1+1,f
  7633  09A4  0CC6               	rrf	___ftadd@f1,f
  7634  09A5  0B89               	decfsz	9,f
  7635  09A6  29A2               	goto	u2565
  7636  09A7  3001               	movlw	1
  7637  09A8  00CC               	movwf	??___ftadd
  7638  09A9  084C               	movf	??___ftadd,w
  7639  09AA  07D2               	addwf	___ftadd@exp1,f
  7640  09AB                     l2123:	
  7641  09AB  0852               	movf	___ftadd@exp1,w
  7642  09AC  0651               	xorwf	___ftadd@exp2,w
  7643  09AD  1903               	btfsc	3,2
  7644  09AE  29D5               	goto	l597
  7645  09AF  29A1               	goto	l2121
  7646  09B0                     l2125:	
  7647  09B0  0852               	movf	___ftadd@exp1,w
  7648  09B1  0251               	subwf	___ftadd@exp2,w
  7649  09B2  1803               	skipnc
  7650  09B3  29D5               	goto	l597
  7651  09B4                     l2127:	
  7652  09B4  3001               	movlw	1
  7653  09B5                     u2595:	
  7654  09B5  35C6               	lslf	___ftadd@f1,f
  7655  09B6  0DC7               	rlf	___ftadd@f1+1,f
  7656  09B7  0DC8               	rlf	___ftadd@f1+2,f
  7657  09B8  0B89               	decfsz	9,f
  7658  09B9  29B5               	goto	u2595
  7659  09BA  3001               	movlw	1
  7660  09BB  02D2               	subwf	___ftadd@exp1,f
  7661  09BC  0851               	movf	___ftadd@exp2,w
  7662  09BD  0652               	xorwf	___ftadd@exp1,w
  7663  09BE  1903               	skipnz
  7664  09BF  29D1               	goto	l2135
  7665  09C0  3001               	movlw	1
  7666  09C1  02D0               	subwf	___ftadd@sign,f
  7667  09C2  0850               	movf	___ftadd@sign,w
  7668  09C3  3907               	andlw	7
  7669  09C4  1903               	btfsc	3,2
  7670  09C5  29D1               	goto	l2135
  7671  09C6  29B4               	goto	l2127
  7672  09C7                     l2133:	
  7673  09C7  3001               	movlw	1
  7674  09C8                     u2625:	
  7675  09C8  36CB               	lsrf	___ftadd@f2+2,f
  7676  09C9  0CCA               	rrf	___ftadd@f2+1,f
  7677  09CA  0CC9               	rrf	___ftadd@f2,f
  7678  09CB  0B89               	decfsz	9,f
  7679  09CC  29C8               	goto	u2625
  7680  09CD  3001               	movlw	1
  7681  09CE  00CC               	movwf	??___ftadd
  7682  09CF  084C               	movf	??___ftadd,w
  7683  09D0  07D1               	addwf	___ftadd@exp2,f
  7684  09D1                     l2135:	
  7685  09D1  0852               	movf	___ftadd@exp1,w
  7686  09D2  0651               	xorwf	___ftadd@exp2,w
  7687  09D3  1D03               	skipz
  7688  09D4  29C7               	goto	l2133
  7689  09D5                     l597:	
  7690  09D5  1FD0               	btfss	___ftadd@sign,7
  7691  09D6  29E7               	goto	l2139
  7692  09D7  30FF               	movlw	255
  7693  09D8  06C6               	xorwf	___ftadd@f1,f
  7694  09D9  30FF               	movlw	255
  7695  09DA  06C7               	xorwf	___ftadd@f1+1,f
  7696  09DB  30FF               	movlw	255
  7697  09DC  06C8               	xorwf	___ftadd@f1+2,f
  7698  09DD  3001               	movlw	1
  7699  09DE  07C6               	addwf	___ftadd@f1,f
  7700  09DF  3000               	movlw	0
  7701  09E0  1803               	skipnc
  7702  09E1  3001               	movlw	1
  7703  09E2  07C7               	addwf	___ftadd@f1+1,f
  7704  09E3  3000               	movlw	0
  7705  09E4  1803               	skipnc
  7706  09E5  3001               	movlw	1
  7707  09E6  07C8               	addwf	___ftadd@f1+2,f
  7708  09E7                     l2139:	
  7709  09E7  1F50               	btfss	___ftadd@sign,6
  7710  09E8  29F9               	goto	l2143
  7711  09E9  30FF               	movlw	255
  7712  09EA  06C9               	xorwf	___ftadd@f2,f
  7713  09EB  30FF               	movlw	255
  7714  09EC  06CA               	xorwf	___ftadd@f2+1,f
  7715  09ED  30FF               	movlw	255
  7716  09EE  06CB               	xorwf	___ftadd@f2+2,f
  7717  09EF  3001               	movlw	1
  7718  09F0  07C9               	addwf	___ftadd@f2,f
  7719  09F1  3000               	movlw	0
  7720  09F2  1803               	skipnc
  7721  09F3  3001               	movlw	1
  7722  09F4  07CA               	addwf	___ftadd@f2+1,f
  7723  09F5  3000               	movlw	0
  7724  09F6  1803               	skipnc
  7725  09F7  3001               	movlw	1
  7726  09F8  07CB               	addwf	___ftadd@f2+2,f
  7727  09F9                     l2143:	
  7728  09F9  01D0               	clrf	___ftadd@sign
  7729  09FA  0846               	movf	___ftadd@f1,w
  7730  09FB  07C9               	addwf	___ftadd@f2,f
  7731  09FC  0847               	movf	___ftadd@f1+1,w
  7732  09FD  3DCA               	addwfc	___ftadd@f2+1,f
  7733  09FE  0848               	movf	___ftadd@f1+2,w
  7734  09FF  3DCB               	addwfc	___ftadd@f2+2,f
  7735  0A00  1FCB               	btfss	___ftadd@f2+2,7
  7736  0A01  2A14               	goto	l2153
  7737  0A02  30FF               	movlw	255
  7738  0A03  06C9               	xorwf	___ftadd@f2,f
  7739  0A04  30FF               	movlw	255
  7740  0A05  06CA               	xorwf	___ftadd@f2+1,f
  7741  0A06  30FF               	movlw	255
  7742  0A07  06CB               	xorwf	___ftadd@f2+2,f
  7743  0A08  3001               	movlw	1
  7744  0A09  07C9               	addwf	___ftadd@f2,f
  7745  0A0A  3000               	movlw	0
  7746  0A0B  1803               	skipnc
  7747  0A0C  3001               	movlw	1
  7748  0A0D  07CA               	addwf	___ftadd@f2+1,f
  7749  0A0E  3000               	movlw	0
  7750  0A0F  1803               	skipnc
  7751  0A10  3001               	movlw	1
  7752  0A11  07CB               	addwf	___ftadd@f2+2,f
  7753  0A12  01D0               	clrf	___ftadd@sign
  7754  0A13  0AD0               	incf	___ftadd@sign,f
  7755  0A14                     l2153:	
  7756  0A14  0849               	movf	___ftadd@f2,w
  7757  0A15  00F0               	movwf	___ftpack@arg
  7758  0A16  084A               	movf	___ftadd@f2+1,w
  7759  0A17  00F1               	movwf	___ftpack@arg+1
  7760  0A18  084B               	movf	___ftadd@f2+2,w
  7761  0A19  00F2               	movwf	___ftpack@arg+2
  7762  0A1A  0852               	movf	___ftadd@exp1,w
  7763  0A1B  00CC               	movwf	??___ftadd
  7764  0A1C  084C               	movf	??___ftadd,w
  7765  0A1D  00F3               	movwf	___ftpack@exp
  7766  0A1E  0850               	movf	___ftadd@sign,w
  7767  0A1F  00CD               	movwf	??___ftadd+1
  7768  0A20  084D               	movf	??___ftadd+1,w
  7769  0A21  00F4               	movwf	___ftpack@sign
  7770  0A22  3188  201C         	fcall	___ftpack
  7771  0A24  0870               	movf	?___ftpack,w
  7772  0A25  0020               	movlb	0	; select bank0
  7773  0A26  00C6               	movwf	?___ftadd
  7774  0A27  0871               	movf	?___ftpack+1,w
  7775  0A28  00C7               	movwf	?___ftadd+1
  7776  0A29  0872               	movf	?___ftpack+2,w
  7777  0A2A  00C8               	movwf	?___ftadd+2
  7778  0A2B  0008               	return
  7779  0A2C                     __end_of___ftadd:	
  7780                           
  7781                           	psect	text17
  7782  081C                     __ptext17:	
  7783 ;; *************** function ___ftpack *****************
  7784 ;; Defined at:
  7785 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  arg             3    0[COMMON] unsigned um
  7788 ;;  exp             1    3[COMMON] unsigned char 
  7789 ;;  sign            1    4[COMMON] unsigned char 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;		None
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  3    0[COMMON] float 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7801 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;Total ram usage:        8 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		___ftadd
  7811 ;;		___ftmul
  7812 ;;		___lltoft
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           
  7817                           ;psect for function ___ftpack
  7818  081C                     ___ftpack:	
  7819                           
  7820                           ;incstack = 0
  7821                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7822  081C  0873               	movf	___ftpack@exp,w
  7823  081D  1903               	btfsc	3,2
  7824  081E  2824               	goto	l1955
  7825  081F  0872               	movf	___ftpack@arg+2,w
  7826  0820  0471               	iorwf	___ftpack@arg+1,w
  7827  0821  0470               	iorwf	___ftpack@arg,w
  7828  0822  1D03               	skipz
  7829  0823  2835               	goto	l1961
  7830  0824                     l1955:	
  7831  0824  3000               	movlw	0
  7832  0825  00F0               	movwf	?___ftpack
  7833  0826  3000               	movlw	0
  7834  0827  00F1               	movwf	?___ftpack+1
  7835  0828  3000               	movlw	0
  7836  0829  00F2               	movwf	?___ftpack+2
  7837  082A  0008               	return
  7838  082B                     l1959:	
  7839  082B  3001               	movlw	1
  7840  082C  00F5               	movwf	??___ftpack
  7841  082D  0875               	movf	??___ftpack,w
  7842  082E  07F3               	addwf	___ftpack@exp,f
  7843  082F  3001               	movlw	1
  7844  0830                     u2105:	
  7845  0830  36F2               	lsrf	___ftpack@arg+2,f
  7846  0831  0CF1               	rrf	___ftpack@arg+1,f
  7847  0832  0CF0               	rrf	___ftpack@arg,f
  7848  0833  0B89               	decfsz	9,f
  7849  0834  2830               	goto	u2105
  7850  0835                     l1961:	
  7851  0835  30FE               	movlw	254
  7852  0836  0572               	andwf	___ftpack@arg+2,w
  7853  0837  1903               	btfsc	3,2
  7854  0838  284E               	goto	l566
  7855  0839  282B               	goto	l1959
  7856  083A                     l1963:	
  7857  083A  3001               	movlw	1
  7858  083B  00F5               	movwf	??___ftpack
  7859  083C  0875               	movf	??___ftpack,w
  7860  083D  07F3               	addwf	___ftpack@exp,f
  7861  083E  3001               	movlw	1
  7862  083F  07F0               	addwf	___ftpack@arg,f
  7863  0840  3000               	movlw	0
  7864  0841  1803               	skipnc
  7865  0842  3001               	movlw	1
  7866  0843  07F1               	addwf	___ftpack@arg+1,f
  7867  0844  3000               	movlw	0
  7868  0845  1803               	skipnc
  7869  0846  3001               	movlw	1
  7870  0847  07F2               	addwf	___ftpack@arg+2,f
  7871  0848  3001               	movlw	1
  7872  0849                     u2125:	
  7873  0849  36F2               	lsrf	___ftpack@arg+2,f
  7874  084A  0CF1               	rrf	___ftpack@arg+1,f
  7875  084B  0CF0               	rrf	___ftpack@arg,f
  7876  084C  0B89               	decfsz	9,f
  7877  084D  2849               	goto	u2125
  7878  084E                     l566:	
  7879  084E  30FF               	movlw	255
  7880  084F  0572               	andwf	___ftpack@arg+2,w
  7881  0850  1903               	btfsc	3,2
  7882  0851  285B               	goto	l1971
  7883  0852  283A               	goto	l1963
  7884  0853                     l1969:	
  7885  0853  3001               	movlw	1
  7886  0854  02F3               	subwf	___ftpack@exp,f
  7887  0855  3001               	movlw	1
  7888  0856                     u2145:	
  7889  0856  35F0               	lslf	___ftpack@arg,f
  7890  0857  0DF1               	rlf	___ftpack@arg+1,f
  7891  0858  0DF2               	rlf	___ftpack@arg+2,f
  7892  0859  0B89               	decfsz	9,f
  7893  085A  2856               	goto	u2145
  7894  085B                     l1971:	
  7895  085B  1BF1               	btfsc	___ftpack@arg+1,7
  7896  085C  2861               	goto	l573
  7897  085D  3002               	movlw	2
  7898  085E  0273               	subwf	___ftpack@exp,w
  7899  085F  1803               	skipnc
  7900  0860  2853               	goto	l1969
  7901  0861                     l573:	
  7902  0861  1873               	btfsc	___ftpack@exp,0
  7903  0862  2869               	goto	l574
  7904  0863  30FF               	movlw	255
  7905  0864  05F0               	andwf	___ftpack@arg,f
  7906  0865  307F               	movlw	127
  7907  0866  05F1               	andwf	___ftpack@arg+1,f
  7908  0867  30FF               	movlw	255
  7909  0868  05F2               	andwf	___ftpack@arg+2,f
  7910  0869                     l574:	
  7911  0869  1003               	clrc
  7912  086A  0CF3               	rrf	___ftpack@exp,f
  7913  086B  0873               	movf	___ftpack@exp,w
  7914  086C  00F5               	movwf	??___ftpack
  7915  086D  01F6               	clrf	??___ftpack+1
  7916  086E  01F7               	clrf	??___ftpack+2
  7917  086F  3010               	movlw	16
  7918  0870                     u2185:	
  7919  0870  35F5               	lslf	??___ftpack,f
  7920  0871  0DF6               	rlf	??___ftpack+1,f
  7921  0872  0DF7               	rlf	??___ftpack+2,f
  7922  0873  0B89               	decfsz	9,f
  7923  0874  2870               	goto	u2185
  7924  0875  0875               	movf	??___ftpack,w
  7925  0876  04F0               	iorwf	___ftpack@arg,f
  7926  0877  0876               	movf	??___ftpack+1,w
  7927  0878  04F1               	iorwf	___ftpack@arg+1,f
  7928  0879  0877               	movf	??___ftpack+2,w
  7929  087A  04F2               	iorwf	___ftpack@arg+2,f
  7930  087B  0874               	movf	___ftpack@sign,w
  7931  087C  1903               	btfsc	3,2
  7932  087D  0008               	return
  7933  087E  17F2               	bsf	___ftpack@arg+2,7
  7934  087F  0008               	return
  7935  0880                     __end_of___ftpack:	
  7936                           
  7937                           	psect	text18
  7938  13CC                     __ptext18:	
  7939 ;; *************** function ___ftneg *****************
  7940 ;; Defined at:
  7941 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;  f1              3   24[BANK0 ] float 
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;		None
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  3   24[BANK0 ] float 
  7948 ;; Registers used:
  7949 ;;		wreg
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7955 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;Total ram usage:        3 bytes
  7960 ;; Hardware stack levels used:    1
  7961 ;; This function calls:
  7962 ;;		Nothing
  7963 ;; This function is called by:
  7964 ;;		_main
  7965 ;;		_sprintf
  7966 ;; This function uses a non-reentrant model
  7967 ;;
  7968                           
  7969                           
  7970                           ;psect for function ___ftneg
  7971  13CC                     ___ftneg:	
  7972                           
  7973                           ;incstack = 0
  7974                           ; Regs used in ___ftneg: [wreg]
  7975  13CC  0020               	movlb	0	; select bank0
  7976  13CD  083A               	movf	___ftneg@f1+2,w
  7977  13CE  0439               	iorwf	___ftneg@f1+1,w
  7978  13CF  0438               	iorwf	___ftneg@f1,w
  7979  13D0  1903               	skipnz
  7980  13D1  0008               	return
  7981  13D2  3080               	movlw	128
  7982  13D3  06BA               	xorwf	___ftneg@f1+2,f
  7983  13D4  0008               	return
  7984  13D5                     __end_of___ftneg:	
  7985                           
  7986                           	psect	text19
  7987  1513                     __ptext19:	
  7988 ;; *************** function ___ftge *****************
  7989 ;; Defined at:
  7990 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  ff1             3    0[COMMON] float 
  7993 ;;  ff2             3    3[COMMON] float 
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;		None
  7996 ;; Return value:  Size  Location     Type
  7997 ;;		None               void
  7998 ;; Registers used:
  7999 ;;		wreg, status,2, status,0
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8005 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;Total ram usage:        9 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; This function calls:
  8012 ;;		Nothing
  8013 ;; This function is called by:
  8014 ;;		_sprintf
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           
  8019                           ;psect for function ___ftge
  8020  1513                     ___ftge:	
  8021                           
  8022                           ;incstack = 0
  8023                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8024  1513  1FF2               	btfss	___ftge@ff1+2,7
  8025  1514  2D29               	goto	l2473
  8026  1515  0970               	comf	___ftge@ff1,w
  8027  1516  00F6               	movwf	??___ftge
  8028  1517  0971               	comf	___ftge@ff1+1,w
  8029  1518  00F7               	movwf	??___ftge+1
  8030  1519  0972               	comf	___ftge@ff1+2,w
  8031  151A  00F8               	movwf	??___ftge+2
  8032  151B  0AF6               	incf	??___ftge,f
  8033  151C  1903               	skipnz
  8034  151D  0AF7               	incf	??___ftge+1,f
  8035  151E  1903               	skipnz
  8036  151F  0AF8               	incf	??___ftge+2,f
  8037  1520  3000               	movlw	0
  8038  1521  0776               	addwf	??___ftge,w
  8039  1522  00F0               	movwf	___ftge@ff1
  8040  1523  3000               	movlw	0
  8041  1524  3D77               	addwfc	??___ftge+1,w
  8042  1525  00F1               	movwf	___ftge@ff1+1
  8043  1526  3080               	movlw	128
  8044  1527  3D78               	addwfc	??___ftge+2,w
  8045  1528  00F2               	movwf	___ftge@ff1+2
  8046  1529                     l2473:	
  8047  1529  1FF5               	btfss	___ftge@ff2+2,7
  8048  152A  2D3F               	goto	l2477
  8049  152B  0973               	comf	___ftge@ff2,w
  8050  152C  00F6               	movwf	??___ftge
  8051  152D  0974               	comf	___ftge@ff2+1,w
  8052  152E  00F7               	movwf	??___ftge+1
  8053  152F  0975               	comf	___ftge@ff2+2,w
  8054  1530  00F8               	movwf	??___ftge+2
  8055  1531  0AF6               	incf	??___ftge,f
  8056  1532  1903               	skipnz
  8057  1533  0AF7               	incf	??___ftge+1,f
  8058  1534  1903               	skipnz
  8059  1535  0AF8               	incf	??___ftge+2,f
  8060  1536  3000               	movlw	0
  8061  1537  0776               	addwf	??___ftge,w
  8062  1538  00F3               	movwf	___ftge@ff2
  8063  1539  3000               	movlw	0
  8064  153A  3D77               	addwfc	??___ftge+1,w
  8065  153B  00F4               	movwf	___ftge@ff2+1
  8066  153C  3080               	movlw	128
  8067  153D  3D78               	addwfc	??___ftge+2,w
  8068  153E  00F5               	movwf	___ftge@ff2+2
  8069  153F                     l2477:	
  8070  153F  3080               	movlw	128
  8071  1540  06F2               	xorwf	___ftge@ff1+2,f
  8072  1541  3080               	movlw	128
  8073  1542  06F5               	xorwf	___ftge@ff2+2,f
  8074  1543  0875               	movf	___ftge@ff2+2,w
  8075  1544  0272               	subwf	___ftge@ff1+2,w
  8076  1545  1D03               	skipz
  8077  1546  0008               	return
  8078  1547  0874               	movf	___ftge@ff2+1,w
  8079  1548  0271               	subwf	___ftge@ff1+1,w
  8080  1549  1D03               	skipz
  8081  154A  0008               	return
  8082  154B  0873               	movf	___ftge@ff2,w
  8083  154C  0270               	subwf	___ftge@ff1,w
  8084  154D  0008               	return
  8085  154E                     __end_of___ftge:	
  8086                           
  8087                           	psect	text20
  8088  143F                     __ptext20:	
  8089 ;; *************** function _maxim_start_conversion *****************
  8090 ;; Defined at:
  8091 ;;		line 113 in file "mcc_generated_files/max31856.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;  uch_conversi    1    wreg     unsigned char 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;  uch_conversi    1    5[COMMON] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0, pclath, cstack
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;Total ram usage:        2 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    2
  8112 ;; This function calls:
  8113 ;;		_maxim_31856_read_register
  8114 ;;		_maxim_31856_write_register
  8115 ;; This function is called by:
  8116 ;;		_main
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _maxim_start_conversion
  8122  143F                     _maxim_start_conversion:	
  8123                           
  8124                           ;incstack = 0
  8125                           ; Regs used in _maxim_start_conversion: [wreg+status,2+status,0+pclath+cstack]
  8126                           ;maxim_start_conversion@uch_conversion_mode stored from wreg
  8127  143F  00F5               	movwf	maxim_start_conversion@uch_conversion_mode
  8128                           
  8129                           ;max31856.c: 115: uch_cr0=maxim_31856_read_register(0x00);
  8130  1440  3000               	movlw	0
  8131  1441  3194  2408  3194   	fcall	_maxim_31856_read_register
  8132  1444  00F4               	movwf	??_maxim_start_conversion
  8133  1445  0874               	movf	??_maxim_start_conversion,w
  8134  1446  0020               	movlb	0	; select bank0
  8135  1447  00EF               	movwf	_uch_cr0
  8136                           
  8137                           ;max31856.c: 116: uch_cr0&=(uint8_t) 0x3F;
  8138  1448  303F               	movlw	63
  8139  1449  00F4               	movwf	??_maxim_start_conversion
  8140  144A  0874               	movf	??_maxim_start_conversion,w
  8141  144B  05EF               	andwf	_uch_cr0,f
  8142                           
  8143                           ;max31856.c: 117: uch_cr0|=uch_conversion_mode;
  8144  144C  0875               	movf	maxim_start_conversion@uch_conversion_mode,w
  8145  144D  00F4               	movwf	??_maxim_start_conversion
  8146  144E  0874               	movf	??_maxim_start_conversion,w
  8147  144F  04EF               	iorwf	_uch_cr0,f
  8148                           
  8149                           ;max31856.c: 118: maxim_31856_write_register(0x80, uch_cr0);
  8150  1450  086F               	movf	_uch_cr0,w
  8151  1451  00F4               	movwf	??_maxim_start_conversion
  8152  1452  0874               	movf	??_maxim_start_conversion,w
  8153  1453  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8154  1454  3080               	movlw	128
  8155  1455  3193  23ED         	fcall	_maxim_31856_write_register
  8156  1457  0008               	return
  8157  1458                     __end_of_maxim_start_conversion:	
  8158                           
  8159                           	psect	text21
  8160  1419                     __ptext21:	
  8161 ;; *************** function _maxim_clear_fault_status *****************
  8162 ;; Defined at:
  8163 ;;		line 154 in file "mcc_generated_files/max31856.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;		None
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;		None
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  1    wreg      void 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0, pclath, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;Total ram usage:        1 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    2
  8184 ;; This function calls:
  8185 ;;		_maxim_31856_read_register
  8186 ;;		_maxim_31856_write_register
  8187 ;; This function is called by:
  8188 ;;		_main
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           
  8193                           ;psect for function _maxim_clear_fault_status
  8194  1419                     _maxim_clear_fault_status:	
  8195                           
  8196                           ;max31856.c: 156: uch_cr0= maxim_31856_read_register(0x00);
  8197                           
  8198                           ;incstack = 0
  8199                           ; Regs used in _maxim_clear_fault_status: [wreg+status,2+status,0+pclath+cstack]
  8200  1419  3000               	movlw	0
  8201  141A  3194  2408  3194   	fcall	_maxim_31856_read_register
  8202  141D  00F4               	movwf	??_maxim_clear_fault_status
  8203  141E  0874               	movf	??_maxim_clear_fault_status,w
  8204  141F  0020               	movlb	0	; select bank0
  8205  1420  00EF               	movwf	_uch_cr0
  8206                           
  8207                           ;max31856.c: 157: uch_cr0|= (uint8_t) 0x02 ;
  8208  1421  14EF               	bsf	_uch_cr0,1
  8209                           
  8210                           ;max31856.c: 158: maxim_31856_write_register(0x80, uch_cr0);
  8211  1422  086F               	movf	_uch_cr0,w
  8212  1423  00F4               	movwf	??_maxim_clear_fault_status
  8213  1424  0874               	movf	??_maxim_clear_fault_status,w
  8214  1425  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8215  1426  3080               	movlw	128
  8216  1427  3193  23ED         	fcall	_maxim_31856_write_register
  8217  1429  0008               	return
  8218  142A                     __end_of_maxim_clear_fault_status:	
  8219                           
  8220                           	psect	text22
  8221  1408                     __ptext22:	
  8222 ;; *************** function _maxim_31856_read_register *****************
  8223 ;; Defined at:
  8224 ;;		line 32 in file "mcc_generated_files/max31856.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;  uch_register    1    wreg     unsigned char 
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;  uch_register    1    2[COMMON] unsigned char 
  8229 ;;  uch_register    1    3[COMMON] unsigned char 
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      unsigned char 
  8232 ;; Registers used:
  8233 ;;		wreg, status,2, status,0, pclath, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;Total ram usage:        3 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    1
  8246 ;; This function calls:
  8247 ;;		_SPI_Exchange8bit
  8248 ;; This function is called by:
  8249 ;;		_maxim_start_conversion
  8250 ;;		_maxim_clear_fault_status
  8251 ;;		_maxim_stop_conversion
  8252 ;;		_maxim_disable_oc_fault_detection
  8253 ;;		_maxim_set_oc_fault_detection
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function _maxim_31856_read_register
  8259  1408                     _maxim_31856_read_register:	
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in _maxim_31856_read_register: [wreg+status,2+status,0+pclath+cstack]
  8263                           ;maxim_31856_read_register@uch_register_address stored from wreg
  8264  1408  00F2               	movwf	maxim_31856_read_register@uch_register_address
  8265                           
  8266                           ;max31856.c: 34: uint8_t uch_register_data;
  8267                           ;max31856.c: 35: do { LATA5 = 0; } while(0);
  8268  1409  0022               	movlb	2	; select bank2
  8269  140A  128C               	bcf	12,5	;volatile
  8270                           
  8271                           ;max31856.c: 36: SPI_Exchange8bit(uch_register_address);
  8272  140B  0872               	movf	maxim_31856_read_register@uch_register_address,w
  8273  140C  3193  23C3  3194   	fcall	_SPI_Exchange8bit
  8274                           
  8275                           ;max31856.c: 37: uch_register_data=SPI_Exchange8bit(0xff);
  8276  140F  30FF               	movlw	255
  8277  1410  3193  23C3         	fcall	_SPI_Exchange8bit
  8278  1412  00F1               	movwf	??_maxim_31856_read_register
  8279  1413  0871               	movf	??_maxim_31856_read_register,w
  8280  1414  00F3               	movwf	maxim_31856_read_register@uch_register_data
  8281                           
  8282                           ;max31856.c: 38: do { LATA5 = 1; } while(0);
  8283  1415  0022               	movlb	2	; select bank2
  8284  1416  168C               	bsf	12,5	;volatile
  8285                           
  8286                           ;max31856.c: 39: return (uch_register_data);
  8287  1417  0873               	movf	maxim_31856_read_register@uch_register_data,w
  8288  1418  0008               	return
  8289  1419                     __end_of_maxim_31856_read_register:	
  8290                           
  8291                           	psect	text23
  8292  142A                     __ptext23:	
  8293 ;; *************** function _maxim_31856_read_nregisters *****************
  8294 ;; Defined at:
  8295 ;;		line 48 in file "mcc_generated_files/max31856.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  uch_register    1    wreg     unsigned char 
  8298 ;;  uch_buff        1    8[COMMON] PTR unsigned char 
  8299 ;;		 -> uch_reg(8), 
  8300 ;;  uch_nBytes      1    9[COMMON] unsigned char 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  uch_register    1   12[COMMON] unsigned char 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      void 
  8305 ;; Registers used:
  8306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8312 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;Total ram usage:        5 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    2
  8319 ;; This function calls:
  8320 ;;		_SPI_Exchange8bit
  8321 ;;		_SPI_Exchange8bitBuffer
  8322 ;; This function is called by:
  8323 ;;		_main
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           
  8328                           ;psect for function _maxim_31856_read_nregisters
  8329  142A                     _maxim_31856_read_nregisters:	
  8330                           
  8331                           ;incstack = 0
  8332                           ; Regs used in _maxim_31856_read_nregisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8333                           ;maxim_31856_read_nregisters@uch_register_address stored from wreg
  8334  142A  00FC               	movwf	maxim_31856_read_nregisters@uch_register_address
  8335                           
  8336                           ;max31856.c: 50: do { LATA5 = 0; } while(0);
  8337  142B  0022               	movlb	2	; select bank2
  8338  142C  128C               	bcf	12,5	;volatile
  8339                           
  8340                           ;max31856.c: 51: SPI_Exchange8bit(uch_register_address);
  8341  142D  087C               	movf	maxim_31856_read_nregisters@uch_register_address,w
  8342  142E  3193  23C3  3194   	fcall	_SPI_Exchange8bit
  8343                           
  8344                           ;max31856.c: 52: SPI_Exchange8bitBuffer((0), uch_nBytes, uch_buff);
  8345  1431  0879               	movf	maxim_31856_read_nregisters@uch_nBytes,w
  8346  1432  00FA               	movwf	??_maxim_31856_read_nregisters
  8347  1433  087A               	movf	??_maxim_31856_read_nregisters,w
  8348  1434  00F1               	movwf	SPI_Exchange8bitBuffer@bufLen
  8349  1435  0878               	movf	maxim_31856_read_nregisters@uch_buff,w
  8350  1436  00FB               	movwf	??_maxim_31856_read_nregisters+1
  8351  1437  087B               	movf	??_maxim_31856_read_nregisters+1,w
  8352  1438  00F2               	movwf	SPI_Exchange8bitBuffer@dataOut
  8353  1439  3000               	movlw	0
  8354  143A  3195  25D5         	fcall	_SPI_Exchange8bitBuffer
  8355                           
  8356                           ;max31856.c: 53: do { LATA5 = 1; } while(0);
  8357  143C  0022               	movlb	2	; select bank2
  8358  143D  168C               	bsf	12,5	;volatile
  8359  143E  0008               	return
  8360  143F                     __end_of_maxim_31856_read_nregisters:	
  8361                           
  8362                           	psect	text24
  8363  15D5                     __ptext24:	
  8364 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8365 ;; Defined at:
  8366 ;;		line 89 in file "mcc_generated_files/spi.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  dataIn          1    wreg     PTR unsigned char 
  8369 ;;		 -> NULL(0), 
  8370 ;;  bufLen          1    1[COMMON] unsigned char 
  8371 ;;  dataOut         1    2[COMMON] PTR unsigned char 
  8372 ;;		 -> uch_reg(8), 
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  dataIn          1    6[COMMON] PTR unsigned char 
  8375 ;;		 -> NULL(0), 
  8376 ;;  bytesWritten    1    7[COMMON] unsigned char 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      unsigned char 
  8379 ;; Registers used:
  8380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;Total ram usage:        7 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    1
  8393 ;; This function calls:
  8394 ;;		_SPI_Exchange8bit
  8395 ;; This function is called by:
  8396 ;;		_maxim_31856_read_nregisters
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           
  8401                           ;psect for function _SPI_Exchange8bitBuffer
  8402  15D5                     _SPI_Exchange8bitBuffer:	
  8403                           
  8404                           ;incstack = 0
  8405                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8406                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8407  15D5  00F6               	movwf	SPI_Exchange8bitBuffer@dataIn
  8408                           
  8409                           ;spi.c: 90: uint8_t bytesWritten = 0;
  8410  15D6  01F7               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8411                           
  8412                           ;spi.c: 92: if (bufLen != 0) {
  8413  15D7  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8414  15D8  1903               	btfsc	3,2
  8415  15D9  0008               	return
  8416                           
  8417                           ;spi.c: 93: if (dataIn != (0)) {
  8418  15DA  0876               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8419  15DB  1D03               	btfss	3,2
  8420  15DC  2E03               	goto	l2249
  8421  15DD  2E08               	goto	l2251
  8422  15DE                     l2241:	
  8423                           ;spi.c: 94: while (bytesWritten < bufLen) {
  8424                           
  8425                           
  8426                           ;spi.c: 95: if (dataOut == (0)) {
  8427  15DE  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8428  15DF  1D03               	btfss	3,2
  8429  15E0  2DEC               	goto	l2245
  8430                           
  8431                           ;spi.c: 96: SPI_Exchange8bit(dataIn[bytesWritten]);
  8432  15E1  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8433  15E2  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8434  15E3  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8435  15E4  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8436  15E5  0086               	movwf	6
  8437  15E6  0187               	clrf	7
  8438  15E7  0801               	movf	1,w
  8439  15E8  3193  23C3  3195   	fcall	_SPI_Exchange8bit
  8440                           
  8441                           ;spi.c: 97: } else {
  8442  15EB  2DFF               	goto	l2247
  8443  15EC                     l2245:	
  8444                           
  8445                           ;spi.c: 98: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  8446  15EC  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8447  15ED  0776               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8448  15EE  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8449  15EF  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8450  15F0  0086               	movwf	6
  8451  15F1  0187               	clrf	7
  8452  15F2  0801               	movf	1,w
  8453  15F3  3193  23C3  3195   	fcall	_SPI_Exchange8bit
  8454  15F6  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8455  15F7  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8456  15F8  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8457  15F9  00F5               	movwf	??_SPI_Exchange8bitBuffer+2
  8458  15FA  0875               	movf	??_SPI_Exchange8bitBuffer+2,w
  8459  15FB  0086               	movwf	6
  8460  15FC  0187               	clrf	7
  8461  15FD  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8462  15FE  0081               	movwf	1
  8463  15FF                     l2247:	
  8464                           
  8465                           ;spi.c: 99: }
  8466                           ;spi.c: 101: bytesWritten++;
  8467  15FF  3001               	movlw	1
  8468  1600  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8469  1601  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8470  1602  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8471  1603                     l2249:	
  8472  1603  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8473  1604  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8474  1605  1803               	btfsc	3,0
  8475  1606  0008               	return
  8476  1607  2DDE               	goto	l2241
  8477  1608                     l2251:	
  8478                           ;spi.c: 102: }
  8479                           ;spi.c: 103: } else {
  8480                           
  8481                           
  8482                           ;spi.c: 104: if (dataOut != (0)) {
  8483  1608  0872               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8484  1609  1903               	btfsc	3,2
  8485  160A  0008               	return
  8486  160B                     l2259:	
  8487  160B  0871               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8488  160C  0277               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8489  160D  1803               	btfsc	3,0
  8490  160E  0008               	return
  8491                           
  8492                           ;spi.c: 106: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  8493                           
  8494                           ;spi.c: 105: while (bytesWritten < bufLen) {
  8495  160F  3000               	movlw	0
  8496  1610  3193  23C3  3195   	fcall	_SPI_Exchange8bit
  8497  1613  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8498  1614  0877               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8499  1615  0772               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8500  1616  00F4               	movwf	??_SPI_Exchange8bitBuffer+1
  8501  1617  0874               	movf	??_SPI_Exchange8bitBuffer+1,w
  8502  1618  0086               	movwf	6
  8503  1619  0187               	clrf	7
  8504  161A  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8505  161B  0081               	movwf	1
  8506                           
  8507                           ;spi.c: 108: bytesWritten++;
  8508  161C  3001               	movlw	1
  8509  161D  00F3               	movwf	??_SPI_Exchange8bitBuffer
  8510  161E  0873               	movf	??_SPI_Exchange8bitBuffer,w
  8511  161F  07F7               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8512  1620  2E0B               	goto	l2259
  8513  1621                     __end_of_SPI_Exchange8bitBuffer:	
  8514                           ;spi.c: 109: }
  8515                           ;spi.c: 110: }
  8516                           ;spi.c: 111: }
  8517                           ;spi.c: 112: }
  8518                           ;spi.c: 114: return bytesWritten;
  8519                           ;	Return value of _SPI_Exchange8bitBuffer is never used
  8520                           
  8521                           
  8522                           	psect	text25
  8523  0007                     __ptext25:	
  8524 ;; *************** function _maxim_31856_init *****************
  8525 ;; Defined at:
  8526 ;;		line 62 in file "mcc_generated_files/max31856.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;		None
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;		None
  8531 ;; Return value:  Size  Location     Type
  8532 ;;                  1    wreg      void 
  8533 ;; Registers used:
  8534 ;;		wreg, status,2, status,0, pclath, cstack
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;Total ram usage:        1 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    2
  8547 ;; This function calls:
  8548 ;;		_maxim_31856_write_register
  8549 ;; This function is called by:
  8550 ;;		_main
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           
  8555                           ;psect for function _maxim_31856_init
  8556  0007                     _maxim_31856_init:	
  8557                           
  8558                           ;max31856.c: 65: uch_cr0= (uint8_t) 0x10|(uint8_t) 0x01| (uint8_t) 0x04;
  8559                           
  8560                           ;incstack = 0
  8561                           ; Regs used in _maxim_31856_init: [wreg+status,2+status,0+pclath+cstack]
  8562  0007  3015               	movlw	21
  8563  0008  00F3               	movwf	??_maxim_31856_init
  8564  0009  0873               	movf	??_maxim_31856_init,w
  8565  000A  0020               	movlb	0	; select bank0
  8566  000B  00EF               	movwf	_uch_cr0
  8567                           
  8568                           ;max31856.c: 67: uch_cr1&= (uint8_t) 0x0F ;
  8569  000C  300F               	movlw	15
  8570  000D  00F3               	movwf	??_maxim_31856_init
  8571  000E  0873               	movf	??_maxim_31856_init,w
  8572  000F  0021               	movlb	1	; select bank1
  8573  0010  05C4               	andwf	_uch_cr1^(0+128),f
  8574                           
  8575                           ;max31856.c: 68: uch_cr1|=(uint8_t) 0x07;
  8576  0011  3007               	movlw	7
  8577  0012  00F3               	movwf	??_maxim_31856_init
  8578  0013  0873               	movf	??_maxim_31856_init,w
  8579  0014  04C4               	iorwf	_uch_cr1^(0+128),f
  8580                           
  8581                           ;max31856.c: 70: uch_mask=(uint8_t)0x00 ;
  8582  0015  01C7               	clrf	_uch_mask^(0+128)
  8583                           
  8584                           ;max31856.c: 72: maxim_31856_write_register(0x80, uch_cr0);
  8585  0016  0020               	movlb	0	; select bank0
  8586  0017  086F               	movf	_uch_cr0,w
  8587  0018  00F3               	movwf	??_maxim_31856_init
  8588  0019  0873               	movf	??_maxim_31856_init,w
  8589  001A  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8590  001B  3080               	movlw	128
  8591  001C  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8592                           
  8593                           ;max31856.c: 73: maxim_31856_write_register(0x81, uch_cr1);
  8594  001F  0021               	movlb	1	; select bank1
  8595  0020  0844               	movf	_uch_cr1^(0+128),w
  8596  0021  00F3               	movwf	??_maxim_31856_init
  8597  0022  0873               	movf	??_maxim_31856_init,w
  8598  0023  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8599  0024  3081               	movlw	129
  8600  0025  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8601                           
  8602                           ;max31856.c: 74: maxim_31856_write_register(0x82,uch_mask);
  8603  0028  0021               	movlb	1	; select bank1
  8604  0029  0847               	movf	_uch_mask^(0+128),w
  8605  002A  00F3               	movwf	??_maxim_31856_init
  8606  002B  0873               	movf	??_maxim_31856_init,w
  8607  002C  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8608  002D  3082               	movlw	130
  8609  002E  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8610                           
  8611                           ;max31856.c: 77: maxim_31856_write_register(0x83,0x7F);
  8612  0031  307F               	movlw	127
  8613  0032  00F3               	movwf	??_maxim_31856_init
  8614  0033  0873               	movf	??_maxim_31856_init,w
  8615  0034  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8616  0035  3083               	movlw	131
  8617  0036  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8618                           
  8619                           ;max31856.c: 78: maxim_31856_write_register(0x84,0xC0);
  8620  0039  30C0               	movlw	192
  8621  003A  00F3               	movwf	??_maxim_31856_init
  8622  003B  0873               	movf	??_maxim_31856_init,w
  8623  003C  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8624  003D  3084               	movlw	132
  8625  003E  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8626                           
  8627                           ;max31856.c: 80: maxim_31856_write_register(0x85,0x7F);
  8628  0041  307F               	movlw	127
  8629  0042  00F3               	movwf	??_maxim_31856_init
  8630  0043  0873               	movf	??_maxim_31856_init,w
  8631  0044  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8632  0045  3085               	movlw	133
  8633  0046  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8634                           
  8635                           ;max31856.c: 81: maxim_31856_write_register(0x86,0xFF);
  8636  0049  30FF               	movlw	255
  8637  004A  00F3               	movwf	??_maxim_31856_init
  8638  004B  0873               	movf	??_maxim_31856_init,w
  8639  004C  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8640  004D  3086               	movlw	134
  8641  004E  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8642                           
  8643                           ;max31856.c: 82: maxim_31856_write_register(0x87,0x80);
  8644  0051  3080               	movlw	128
  8645  0052  00F3               	movwf	??_maxim_31856_init
  8646  0053  0873               	movf	??_maxim_31856_init,w
  8647  0054  00F1               	movwf	maxim_31856_write_register@uch_register_value
  8648  0055  3087               	movlw	135
  8649  0056  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8650                           
  8651                           ;max31856.c: 83: maxim_31856_write_register(0x88,0x00);
  8652  0059  01F1               	clrf	maxim_31856_write_register@uch_register_value
  8653  005A  3088               	movlw	136
  8654  005B  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8655                           
  8656                           ;max31856.c: 85: maxim_31856_write_register(0x89,0x00);
  8657  005E  01F1               	clrf	maxim_31856_write_register@uch_register_value
  8658  005F  3089               	movlw	137
  8659  0060  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8660                           
  8661                           ;max31856.c: 89: maxim_31856_write_register(0x8A,0x00);
  8662  0063  01F1               	clrf	maxim_31856_write_register@uch_register_value
  8663  0064  308A               	movlw	138
  8664  0065  3193  23ED  3180   	fcall	_maxim_31856_write_register
  8665                           
  8666                           ;max31856.c: 90: maxim_31856_write_register(0x8B,0x00);
  8667  0068  01F1               	clrf	maxim_31856_write_register@uch_register_value
  8668  0069  308B               	movlw	139
  8669  006A  3193  23ED         	fcall	_maxim_31856_write_register
  8670  006C  0008               	return
  8671  006D                     __end_of_maxim_31856_init:	
  8672                           
  8673                           	psect	text26
  8674  13ED                     __ptext26:	
  8675 ;; *************** function _maxim_31856_write_register *****************
  8676 ;; Defined at:
  8677 ;;		line 18 in file "mcc_generated_files/max31856.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;  uch_register    1    wreg     unsigned char 
  8680 ;;  uch_register    1    1[COMMON] unsigned char 
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  uch_register    1    2[COMMON] unsigned char 
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  1    wreg      void 
  8685 ;; Registers used:
  8686 ;;		wreg, status,2, status,0, pclath, cstack
  8687 ;; Tracked objects:
  8688 ;;		On entry : 0/0
  8689 ;;		On exit  : 0/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8692 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;Total ram usage:        2 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    1
  8699 ;; This function calls:
  8700 ;;		_SPI_Exchange8bit
  8701 ;; This function is called by:
  8702 ;;		_main
  8703 ;;		_maxim_31856_init
  8704 ;;		_maxim_start_conversion
  8705 ;;		_maxim_clear_fault_status
  8706 ;;		_maxim_stop_conversion
  8707 ;;		_maxim_disable_oc_fault_detection
  8708 ;;		_maxim_set_oc_fault_detection
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           
  8713                           ;psect for function _maxim_31856_write_register
  8714  13ED                     _maxim_31856_write_register:	
  8715                           
  8716                           ;incstack = 0
  8717                           ; Regs used in _maxim_31856_write_register: [wreg+status,2+status,0+pclath+cstack]
  8718                           ;maxim_31856_write_register@uch_register_address stored from wreg
  8719  13ED  00F2               	movwf	maxim_31856_write_register@uch_register_address
  8720                           
  8721                           ;max31856.c: 20: do { LATA5 = 0; } while(0);
  8722  13EE  0022               	movlb	2	; select bank2
  8723  13EF  128C               	bcf	12,5	;volatile
  8724                           
  8725                           ;max31856.c: 21: SPI_Exchange8bit(uch_register_address);
  8726  13F0  0872               	movf	maxim_31856_write_register@uch_register_address,w
  8727  13F1  3193  23C3  3193   	fcall	_SPI_Exchange8bit
  8728                           
  8729                           ;max31856.c: 22: SPI_Exchange8bit(uch_register_value);
  8730  13F4  0871               	movf	maxim_31856_write_register@uch_register_value,w
  8731  13F5  3193  23C3         	fcall	_SPI_Exchange8bit
  8732                           
  8733                           ;max31856.c: 23: do { LATA5 = 1; } while(0);
  8734  13F7  0022               	movlb	2	; select bank2
  8735  13F8  168C               	bsf	12,5	;volatile
  8736  13F9  0008               	return
  8737  13FA                     __end_of_maxim_31856_write_register:	
  8738                           
  8739                           	psect	text27
  8740  13C3                     __ptext27:	
  8741 ;; *************** function _SPI_Exchange8bit *****************
  8742 ;; Defined at:
  8743 ;;		line 77 in file "mcc_generated_files/spi.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;  data            1    wreg     unsigned char 
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;  data            1    0[COMMON] unsigned char 
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      unsigned char 
  8750 ;; Registers used:
  8751 ;;		wreg
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;Total ram usage:        1 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_SPI_Exchange8bitBuffer
  8767 ;;		_maxim_31856_write_register
  8768 ;;		_maxim_31856_read_register
  8769 ;;		_maxim_31856_read_nregisters
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           
  8774                           ;psect for function _SPI_Exchange8bit
  8775  13C3                     _SPI_Exchange8bit:	
  8776                           
  8777                           ;incstack = 0
  8778                           ; Regs used in _SPI_Exchange8bit: [wreg]
  8779                           ;SPI_Exchange8bit@data stored from wreg
  8780  13C3  00F0               	movwf	SPI_Exchange8bit@data
  8781                           
  8782                           ;spi.c: 79: SSP1CON1bits.WCOL = 0;
  8783  13C4  0024               	movlb	4	; select bank4
  8784  13C5  1395               	bcf	21,7	;volatile
  8785                           
  8786                           ;spi.c: 81: SSPBUF = data;
  8787  13C6  0870               	movf	SPI_Exchange8bit@data,w
  8788  13C7  0091               	movwf	17	;volatile
  8789  13C8                     l65:	
  8790                           ;spi.c: 83: while (SSP1STATbits.BF == 0x0) {
  8791                           
  8792  13C8  1C14               	btfss	20,0	;volatile
  8793  13C9  2BC8               	goto	l65
  8794                           
  8795                           ;spi.c: 84: }
  8796                           ;spi.c: 86: return (SSPBUF);
  8797  13CA  0811               	movf	17,w	;volatile
  8798  13CB  0008               	return
  8799  13CC                     __end_of_SPI_Exchange8bit:	
  8800                           
  8801                           	psect	text28
  8802  13E1                     __ptext28:	
  8803 ;; *************** function _SYSTEM_Initialize *****************
  8804 ;; Defined at:
  8805 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0, pclath, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;Total ram usage:        0 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    1
  8826 ;; This function calls:
  8827 ;;		_EUSART_Initialize
  8828 ;;		_OSCILLATOR_Initialize
  8829 ;;		_PIN_MANAGER_Initialize
  8830 ;;		_SPI_Initialize
  8831 ;; This function is called by:
  8832 ;;		_main
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           
  8837                           ;psect for function _SYSTEM_Initialize
  8838  13E1                     _SYSTEM_Initialize:	
  8839                           
  8840                           ;mcc.c: 71: OSCILLATOR_Initialize();
  8841                           
  8842                           ;incstack = 0
  8843                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8844  13E1  3193  23AA  3193   	fcall	_OSCILLATOR_Initialize
  8845                           
  8846                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  8847  13E4  3194  2494  3193   	fcall	_PIN_MANAGER_Initialize
  8848                           
  8849                           ;mcc.c: 73: SPI_Initialize();
  8850  13E7  3193  23AF  3193   	fcall	_SPI_Initialize
  8851                           
  8852                           ;mcc.c: 74: EUSART_Initialize();
  8853  13EA  3193  23D5         	fcall	_EUSART_Initialize
  8854  13EC  0008               	return
  8855  13ED                     __end_of_SYSTEM_Initialize:	
  8856                           
  8857                           	psect	text29
  8858  13AF                     __ptext29:	
  8859 ;; *************** function _SPI_Initialize *****************
  8860 ;; Defined at:
  8861 ;;		line 64 in file "mcc_generated_files/spi.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;		None
  8864 ;; Auto vars:     Size  Location     Type
  8865 ;;		None
  8866 ;; Return value:  Size  Location     Type
  8867 ;;                  1    wreg      void 
  8868 ;; Registers used:
  8869 ;;		wreg, status,2
  8870 ;; Tracked objects:
  8871 ;;		On entry : 0/0
  8872 ;;		On exit  : 0/0
  8873 ;;		Unchanged: 0/0
  8874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;Total ram usage:        0 bytes
  8880 ;; Hardware stack levels used:    1
  8881 ;; This function calls:
  8882 ;;		Nothing
  8883 ;; This function is called by:
  8884 ;;		_SYSTEM_Initialize
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           
  8889                           ;psect for function _SPI_Initialize
  8890  13AF                     _SPI_Initialize:	
  8891                           
  8892                           ;spi.c: 68: SSP1STAT = 0x00;
  8893                           
  8894                           ;incstack = 0
  8895                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  8896  13AF  0024               	movlb	4	; select bank4
  8897  13B0  0194               	clrf	20	;volatile
  8898                           
  8899                           ;spi.c: 71: SSP1CON1 = 0x30;
  8900  13B1  3030               	movlw	48
  8901  13B2  0095               	movwf	21	;volatile
  8902                           
  8903                           ;spi.c: 74: SSP1ADD = 0x00;
  8904  13B3  0192               	clrf	18	;volatile
  8905  13B4  0008               	return
  8906  13B5                     __end_of_SPI_Initialize:	
  8907                           
  8908                           	psect	text30
  8909  1494                     __ptext30:	
  8910 ;; *************** function _PIN_MANAGER_Initialize *****************
  8911 ;; Defined at:
  8912 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  8913 ;; Parameters:    Size  Location     Type
  8914 ;;		None
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;		None
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  1    wreg      void 
  8919 ;; Registers used:
  8920 ;;		wreg, status,2
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;Total ram usage:        0 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; This function calls:
  8933 ;;		Nothing
  8934 ;; This function is called by:
  8935 ;;		_SYSTEM_Initialize
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           
  8940                           ;psect for function _PIN_MANAGER_Initialize
  8941  1494                     _PIN_MANAGER_Initialize:	
  8942                           
  8943                           ;pin_manager.c: 51: LATA = 0x7F;
  8944                           
  8945                           ;incstack = 0
  8946                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8947  1494  307F               	movlw	127
  8948  1495  0022               	movlb	2	; select bank2
  8949  1496  008C               	movwf	12	;volatile
  8950                           
  8951                           ;pin_manager.c: 52: TRISA = 0x80;
  8952  1497  3080               	movlw	128
  8953  1498  0021               	movlb	1	; select bank1
  8954  1499  008C               	movwf	12	;volatile
  8955                           
  8956                           ;pin_manager.c: 53: ANSELA = 0x00;
  8957  149A  0023               	movlb	3	; select bank3
  8958  149B  018C               	clrf	12	;volatile
  8959                           
  8960                           ;pin_manager.c: 55: LATB = 0x00;
  8961  149C  0022               	movlb	2	; select bank2
  8962  149D  018D               	clrf	13	;volatile
  8963                           
  8964                           ;pin_manager.c: 56: TRISB = 0xFC;
  8965  149E  30FC               	movlw	252
  8966  149F  0021               	movlb	1	; select bank1
  8967  14A0  008D               	movwf	13	;volatile
  8968                           
  8969                           ;pin_manager.c: 57: ANSELB = 0x10;
  8970  14A1  3010               	movlw	16
  8971  14A2  0023               	movlb	3	; select bank3
  8972  14A3  008D               	movwf	13	;volatile
  8973                           
  8974                           ;pin_manager.c: 58: WPUB = 0x2C;
  8975  14A4  302C               	movlw	44
  8976  14A5  0024               	movlb	4	; select bank4
  8977  14A6  008D               	movwf	13	;volatile
  8978                           
  8979                           ;pin_manager.c: 60: LATC = 0x07;
  8980  14A7  3007               	movlw	7
  8981  14A8  0022               	movlb	2	; select bank2
  8982  14A9  008E               	movwf	14	;volatile
  8983                           
  8984                           ;pin_manager.c: 61: TRISC = 0xD0;
  8985  14AA  30D0               	movlw	208
  8986  14AB  0021               	movlb	1	; select bank1
  8987  14AC  008E               	movwf	14	;volatile
  8988                           
  8989                           ;pin_manager.c: 62: ANSELC = 0x00;
  8990  14AD  0023               	movlb	3	; select bank3
  8991  14AE  018E               	clrf	14	;volatile
  8992                           
  8993                           ;pin_manager.c: 64: WPUE = 0x00;
  8994  14AF  0024               	movlb	4	; select bank4
  8995  14B0  0190               	clrf	16	;volatile
  8996                           
  8997                           ;pin_manager.c: 66: OPTION_REGbits.nWPUEN = 0x00;
  8998  14B1  0021               	movlb	1	; select bank1
  8999  14B2  1395               	bcf	21,7	;volatile
  9000                           
  9001                           ;pin_manager.c: 68: APFCON = 0x00;
  9002  14B3  0022               	movlb	2	; select bank2
  9003  14B4  019D               	clrf	29	;volatile
  9004  14B5  0008               	return
  9005  14B6                     __end_of_PIN_MANAGER_Initialize:	
  9006                           
  9007                           	psect	text31
  9008  13AA                     __ptext31:	
  9009 ;; *************** function _OSCILLATOR_Initialize *****************
  9010 ;; Defined at:
  9011 ;;		line 77 in file "mcc_generated_files/mcc.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;		None
  9014 ;; Auto vars:     Size  Location     Type
  9015 ;;		None
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  1    wreg      void 
  9018 ;; Registers used:
  9019 ;;		wreg, status,2
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;Total ram usage:        0 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; This function calls:
  9032 ;;		Nothing
  9033 ;; This function is called by:
  9034 ;;		_SYSTEM_Initialize
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           
  9039                           ;psect for function _OSCILLATOR_Initialize
  9040  13AA                     _OSCILLATOR_Initialize:	
  9041                           
  9042                           ;mcc.c: 79: OSCCON = 0x78;
  9043                           
  9044                           ;incstack = 0
  9045                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9046  13AA  3078               	movlw	120
  9047  13AB  0021               	movlb	1	; select bank1
  9048  13AC  0099               	movwf	25	;volatile
  9049                           
  9050                           ;mcc.c: 81: OSCSTAT = 0x00;
  9051  13AD  019A               	clrf	26	;volatile
  9052  13AE  0008               	return
  9053  13AF                     __end_of_OSCILLATOR_Initialize:	
  9054                           
  9055                           	psect	text32
  9056  13D5                     __ptext32:	
  9057 ;; *************** function _EUSART_Initialize *****************
  9058 ;; Defined at:
  9059 ;;		line 56 in file "mcc_generated_files/eusart.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;		None
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;		None
  9064 ;; Return value:  Size  Location     Type
  9065 ;;                  1    wreg      void 
  9066 ;; Registers used:
  9067 ;;		wreg
  9068 ;; Tracked objects:
  9069 ;;		On entry : 0/0
  9070 ;;		On exit  : 0/0
  9071 ;;		Unchanged: 0/0
  9072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;Total ram usage:        0 bytes
  9078 ;; Hardware stack levels used:    1
  9079 ;; This function calls:
  9080 ;;		Nothing
  9081 ;; This function is called by:
  9082 ;;		_SYSTEM_Initialize
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           
  9087                           ;psect for function _EUSART_Initialize
  9088  13D5                     _EUSART_Initialize:	
  9089                           
  9090                           ;eusart.c: 60: BAUDCON = 0x48;
  9091                           
  9092                           ;incstack = 0
  9093                           ; Regs used in _EUSART_Initialize: [wreg]
  9094  13D5  3048               	movlw	72
  9095  13D6  0023               	movlb	3	; select bank3
  9096  13D7  009F               	movwf	31	;volatile
  9097                           
  9098                           ;eusart.c: 63: RCSTA = 0x80;
  9099  13D8  3080               	movlw	128
  9100  13D9  009D               	movwf	29	;volatile
  9101                           
  9102                           ;eusart.c: 66: TXSTA = 0x26;
  9103  13DA  3026               	movlw	38
  9104  13DB  009E               	movwf	30	;volatile
  9105                           
  9106                           ;eusart.c: 69: SPBRGL = 0xA0;
  9107  13DC  30A0               	movlw	160
  9108  13DD  009B               	movwf	27	;volatile
  9109                           
  9110                           ;eusart.c: 72: SPBRGH = 0x01;
  9111  13DE  3001               	movlw	1
  9112  13DF  009C               	movwf	28	;volatile
  9113  13E0  0008               	return
  9114  13E1                     __end_of_EUSART_Initialize:	
  9115                           
  9116                           	psect	text33
  9117  14DE                     __ptext33:	
  9118 ;; *************** function _EUSART_SendString *****************
  9119 ;; Defined at:
  9120 ;;		line 20 in file "mcc_generated_files/debug.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;  s               2    6[COMMON] PTR unsigned char 
  9123 ;;		 -> STR_14(34), STR_13(42), STR_12(37), STR_11(38), 
  9124 ;;		 -> STR_10(26), STR_9(27), STR_8(28), STR_7(29), 
  9125 ;;		 -> STR_6(3), STR_5(31), STR_3(3), STR_2(31), 
  9126 ;;		 -> s(64), 
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;  pointer         2    4[BANK0 ] PTR unsigned char 
  9129 ;;		 -> STR_14(34), STR_13(42), STR_12(37), STR_11(38), 
  9130 ;;		 -> STR_10(26), STR_9(27), STR_8(28), STR_7(29), 
  9131 ;;		 -> STR_6(3), STR_5(31), STR_3(3), STR_2(31), 
  9132 ;;		 -> s(64), 
  9133 ;;  i               2    2[BANK0 ] int 
  9134 ;;  length          2    0[BANK0 ] int 
  9135 ;;  x               1    6[BANK0 ] unsigned char 
  9136 ;; Return value:  Size  Location     Type
  9137 ;;                  1    wreg      void 
  9138 ;; Registers used:
  9139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Totals:         3       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;Total ram usage:       10 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    1
  9152 ;; This function calls:
  9153 ;;		_EUSART_Write
  9154 ;;		_strlen
  9155 ;; This function is called by:
  9156 ;;		_main
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           
  9161                           ;psect for function _EUSART_SendString
  9162  14DE                     _EUSART_SendString:	
  9163                           
  9164                           ;debug.c: 22: int length,i;
  9165                           ;debug.c: 23: char *pointer;
  9166                           ;debug.c: 24: char x;
  9167                           ;debug.c: 26: length=strlen(s);
  9168                           
  9169                           ;incstack = 0
  9170                           ; Regs used in _EUSART_SendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9171  14DE  0877               	movf	EUSART_SendString@s+1,w
  9172  14DF  00F1               	movwf	strlen@s+1
  9173  14E0  0876               	movf	EUSART_SendString@s,w
  9174  14E1  00F0               	movwf	strlen@s
  9175  14E2  3194  2458  3194   	fcall	_strlen
  9176  14E5  0871               	movf	?_strlen+1,w
  9177  14E6  0020               	movlb	0	; select bank0
  9178  14E7  00A1               	movwf	EUSART_SendString@length+1
  9179  14E8  0870               	movf	?_strlen,w
  9180  14E9  00A0               	movwf	EUSART_SendString@length
  9181                           
  9182                           ;debug.c: 27: pointer=s;
  9183  14EA  0877               	movf	EUSART_SendString@s+1,w
  9184  14EB  00A5               	movwf	EUSART_SendString@pointer+1
  9185  14EC  0876               	movf	EUSART_SendString@s,w
  9186  14ED  00A4               	movwf	EUSART_SendString@pointer
  9187                           
  9188                           ;debug.c: 28: for(i=0;i<length;i++)
  9189  14EE  01A2               	clrf	EUSART_SendString@i
  9190  14EF  01A3               	clrf	EUSART_SendString@i+1
  9191  14F0                     l2915:	
  9192  14F0  0823               	movf	EUSART_SendString@i+1,w
  9193  14F1  3A80               	xorlw	128
  9194  14F2  00F8               	movwf	??_EUSART_SendString
  9195  14F3  0821               	movf	EUSART_SendString@length+1,w
  9196  14F4  3A80               	xorlw	128
  9197  14F5  0278               	subwf	??_EUSART_SendString,w
  9198  14F6  1D03               	skipz
  9199  14F7  2CFA               	goto	u3965
  9200  14F8  0820               	movf	EUSART_SendString@length,w
  9201  14F9  0222               	subwf	EUSART_SendString@i,w
  9202  14FA                     u3965:	
  9203  14FA  1803               	btfsc	3,0
  9204  14FB  0008               	return
  9205                           
  9206                           ;debug.c: 29: {
  9207                           ;debug.c: 30: x=*pointer;
  9208  14FC  0020               	movlb	0	; select bank0
  9209  14FD  0824               	movf	EUSART_SendString@pointer,w
  9210  14FE  0084               	movwf	4
  9211  14FF  0825               	movf	EUSART_SendString@pointer+1,w
  9212  1500  0085               	movwf	5
  9213  1501  0800               	movf	0,w	;code access
  9214  1502  00F8               	movwf	??_EUSART_SendString
  9215  1503  0878               	movf	??_EUSART_SendString,w
  9216  1504  00A6               	movwf	EUSART_SendString@x
  9217                           
  9218                           ;debug.c: 31: EUSART_Write(x);
  9219  1505  0826               	movf	EUSART_SendString@x,w
  9220  1506  3193  23BB  3194   	fcall	_EUSART_Write
  9221                           
  9222                           ;debug.c: 32: pointer++;
  9223  1509  3001               	movlw	1
  9224  150A  0020               	movlb	0	; select bank0
  9225  150B  07A4               	addwf	EUSART_SendString@pointer,f
  9226  150C  3000               	movlw	0
  9227  150D  3DA5               	addwfc	EUSART_SendString@pointer+1,f
  9228  150E  3001               	movlw	1
  9229  150F  07A2               	addwf	EUSART_SendString@i,f
  9230  1510  3000               	movlw	0
  9231  1511  3DA3               	addwfc	EUSART_SendString@i+1,f
  9232  1512  2CF0               	goto	l2915
  9233  1513                     __end_of_EUSART_SendString:	
  9234                           
  9235                           	psect	text34
  9236  1458                     __ptext34:	
  9237 ;; *************** function _strlen *****************
  9238 ;; Defined at:
  9239 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\strlen.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;  s               2    0[COMMON] PTR const unsigned char 
  9242 ;;		 -> STR_14(34), STR_13(42), STR_12(37), STR_11(38), 
  9243 ;;		 -> STR_10(26), STR_9(27), STR_8(28), STR_7(29), 
  9244 ;;		 -> STR_6(3), STR_5(31), STR_3(3), STR_2(31), 
  9245 ;;		 -> s(64), 
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  cp              2    4[COMMON] PTR const unsigned char 
  9248 ;;		 -> STR_14(34), STR_13(42), STR_12(37), STR_11(38), 
  9249 ;;		 -> STR_10(26), STR_9(27), STR_8(28), STR_7(29), 
  9250 ;;		 -> STR_6(3), STR_5(31), STR_3(3), STR_2(31), 
  9251 ;;		 -> s(64), 
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  2    0[COMMON] unsigned int 
  9254 ;; Registers used:
  9255 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;Total ram usage:        6 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_EUSART_SendString
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           
  9275                           ;psect for function _strlen
  9276  1458                     _strlen:	
  9277                           
  9278                           ;incstack = 0
  9279                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  9280  1458  0871               	movf	strlen@s+1,w
  9281  1459  00F5               	movwf	strlen@cp+1
  9282  145A  0870               	movf	strlen@s,w
  9283  145B  00F4               	movwf	strlen@cp
  9284  145C                     l2283:	
  9285  145C  0874               	movf	strlen@cp,w
  9286  145D  0084               	movwf	4
  9287  145E  0875               	movf	strlen@cp+1,w
  9288  145F  0085               	movwf	5
  9289  1460  0012               	moviw fsr0++
  9290  1461  1903               	btfsc	3,2
  9291  1462  2C68               	goto	l2285
  9292  1463  3001               	movlw	1
  9293  1464  07F4               	addwf	strlen@cp,f
  9294  1465  3000               	movlw	0
  9295  1466  3DF5               	addwfc	strlen@cp+1,f
  9296  1467  2C5C               	goto	l2283
  9297  1468                     l2285:	
  9298  1468  0970               	comf	strlen@s,w
  9299  1469  00F2               	movwf	??_strlen
  9300  146A  0971               	comf	strlen@s+1,w
  9301  146B  00F3               	movwf	??_strlen+1
  9302  146C  0AF2               	incf	??_strlen,f
  9303  146D  1903               	skipnz
  9304  146E  0AF3               	incf	??_strlen+1,f
  9305  146F  0874               	movf	strlen@cp,w
  9306  1470  0772               	addwf	??_strlen,w
  9307  1471  00F0               	movwf	?_strlen
  9308  1472  0875               	movf	strlen@cp+1,w
  9309  1473  3D73               	addwfc	??_strlen+1,w
  9310  1474  00F1               	movwf	?_strlen+1
  9311  1475  0008               	return
  9312  1476                     __end_of_strlen:	
  9313                           
  9314                           	psect	text35
  9315  13BB                     __ptext35:	
  9316 ;; *************** function _EUSART_Write *****************
  9317 ;; Defined at:
  9318 ;;		line 91 in file "mcc_generated_files/eusart.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;  txData          1    wreg     unsigned char 
  9321 ;; Auto vars:     Size  Location     Type
  9322 ;;  txData          1    0[COMMON] unsigned char 
  9323 ;; Return value:  Size  Location     Type
  9324 ;;                  1    wreg      void 
  9325 ;; Registers used:
  9326 ;;		wreg
  9327 ;; Tracked objects:
  9328 ;;		On entry : 0/0
  9329 ;;		On exit  : 0/0
  9330 ;;		Unchanged: 0/0
  9331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;Total ram usage:        1 bytes
  9337 ;; Hardware stack levels used:    1
  9338 ;; This function calls:
  9339 ;;		Nothing
  9340 ;; This function is called by:
  9341 ;;		_EUSART_SendString
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           
  9346                           ;psect for function _EUSART_Write
  9347  13BB                     _EUSART_Write:	
  9348                           
  9349                           ;incstack = 0
  9350                           ; Regs used in _EUSART_Write: [wreg]
  9351                           ;EUSART_Write@txData stored from wreg
  9352  13BB  00F0               	movwf	EUSART_Write@txData
  9353  13BC                     l123:	
  9354                           ;eusart.c: 92: while (0 == PIR1bits.TXIF) {
  9355                           
  9356  13BC  0020               	movlb	0	; select bank0
  9357  13BD  1E11               	btfss	17,4	;volatile
  9358  13BE  2BBC               	goto	l123
  9359                           
  9360                           ;eusart.c: 93: }
  9361                           ;eusart.c: 95: TXREG = txData;
  9362  13BF  0870               	movf	EUSART_Write@txData,w
  9363  13C0  0023               	movlb	3	; select bank3
  9364  13C1  009A               	movwf	26	;volatile
  9365  13C2  0008               	return
  9366  13C3                     __end_of_EUSART_Write:	
  9367  007E                     btemp	set	126	;btemp
  9368  007E                     wtemp	set	126
  9369  007E                     wtemp0	set	126
  9370  0080                     wtemp1	set	128
  9371  0082                     wtemp2	set	130
  9372  0084                     wtemp3	set	132
  9373  0086                     wtemp4	set	134
  9374  0088                     wtemp5	set	136
  9375  007F                     wtemp6	set	127
  9376  007E                     ttemp	set	126
  9377  007E                     ttemp0	set	126
  9378  0081                     ttemp1	set	129
  9379  0084                     ttemp2	set	132
  9380  0087                     ttemp3	set	135
  9381  007F                     ttemp4	set	127
  9382  007E                     ltemp	set	126
  9383  007E                     ltemp0	set	126
  9384  0082                     ltemp1	set	130
  9385  0086                     ltemp2	set	134
  9386  0080                     ltemp3	set	128


Data Sizes:
    Strings     332
    Constant    118
    Data        0
    BSS         90
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     76      80
    BANK1            80     25      48
    BANK2            80      0      64
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_14(CODE[34]), STR_13(CODE[42]), STR_12(CODE[37]), STR_11(CODE[38]), 
		 -> STR_10(CODE[26]), STR_9(CODE[27]), STR_8(CODE[28]), STR_7(CODE[29]), 
		 -> STR_6(CODE[3]), STR_5(CODE[31]), STR_3(CODE[3]), STR_2(CODE[31]), 
		 -> s(BANK2[64]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_14(CODE[34]), STR_13(CODE[42]), STR_12(CODE[37]), STR_11(CODE[38]), 
		 -> STR_10(CODE[26]), STR_9(CODE[27]), STR_8(CODE[28]), STR_7(CODE[29]), 
		 -> STR_6(CODE[3]), STR_5(CODE[31]), STR_3(CODE[3]), STR_2(CODE[31]), 
		 -> s(BANK2[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_4(CODE[3]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> s(BANK2[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    EUSART_SendString@pointer	PTR unsigned char  size(2) Largest target is 64
		 -> STR_14(CODE[34]), STR_13(CODE[42]), STR_12(CODE[37]), STR_11(CODE[38]), 
		 -> STR_10(CODE[26]), STR_9(CODE[27]), STR_8(CODE[28]), STR_7(CODE[29]), 
		 -> STR_6(CODE[3]), STR_5(CODE[31]), STR_3(CODE[3]), STR_2(CODE[31]), 
		 -> s(BANK2[64]), 

    EUSART_SendString@s	PTR unsigned char  size(2) Largest target is 64
		 -> STR_14(CODE[34]), STR_13(CODE[42]), STR_12(CODE[37]), STR_11(CODE[38]), 
		 -> STR_10(CODE[26]), STR_9(CODE[27]), STR_8(CODE[28]), STR_7(CODE[29]), 
		 -> STR_6(CODE[3]), STR_5(CODE[31]), STR_3(CODE[3]), STR_2(CODE[31]), 
		 -> s(BANK2[64]), 

    maxim_31856_read_nregisters@uch_buff	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _main->___lltoft
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___lltoft
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___ftneg->___lltoft
    _maxim_start_conversion->_maxim_31856_read_register
    _maxim_clear_fault_status->_maxim_31856_read_register
    _maxim_31856_read_register->_SPI_Exchange8bit
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _maxim_31856_init->_maxim_31856_write_register
    _maxim_31856_write_register->_SPI_Exchange8bit
    _EUSART_SendString->_strlen

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___ftmul

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   51572
                                             68 BANK0      8     8      0
                  _EUSART_SendString
                  _SYSTEM_Initialize
                            ___ftmul
                            ___ftneg
                           ___lltoft
                   _maxim_31856_init
        _maxim_31856_read_nregisters
         _maxim_31856_write_register
           _maxim_clear_fault_status
             _maxim_start_conversion
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   39261
                                             57 BANK0     11     6      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9319
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3    9121
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2318
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3902
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1250
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1360
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2002
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     477
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     374
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    2893
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2720
                                             38 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     204
                                             24 BANK0      3     0      3
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     560
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (1) _maxim_start_conversion                               2     2      0    1162
                                              4 COMMON     2     2      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (1) _maxim_clear_fault_status                             1     1      0    1140
                                              4 COMMON     1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (2) _maxim_31856_read_register                            3     3      0      67
                                              1 COMMON     3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (1) _maxim_31856_read_nregisters                          5     3      2     710
                                              8 COMMON     5     3      2
                   _SPI_Exchange8bit
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (2) _SPI_Exchange8bitBuffer                               7     5      2     516
                                              1 COMMON     7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (1) _maxim_31856_init                                     1     1      0    1073
                                              3 COMMON     1     1      0
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (2) _maxim_31856_write_register                           2     1      1    1073
                                              1 COMMON     2     1      1
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_SendString                                   10     8      2    1045
                                              6 COMMON     3     1      2
                                              0 BANK0      7     7      0
                       _EUSART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     143
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SendString
     _EUSART_Write
     _strlen
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftneg
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lltoft
     ___ftpack
   _maxim_31856_init
     _maxim_31856_write_register
       _SPI_Exchange8bit
   _maxim_31856_read_nregisters
     _SPI_Exchange8bit
     _SPI_Exchange8bitBuffer
       _SPI_Exchange8bit
   _maxim_31856_write_register
     _SPI_Exchange8bit
   _maxim_clear_fault_status
     _maxim_31856_read_register
       _SPI_Exchange8bit
     _maxim_31856_write_register
       _SPI_Exchange8bit
   _maxim_start_conversion
     _maxim_31856_read_register
       _SPI_Exchange8bit
     _maxim_31856_write_register
       _SPI_Exchange8bit
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     19      30       7       60.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      CE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Jun 28 08:48:16 2016

                                 _SPI_Initialize 13AF                       ?_maxim_31856_read_register 0070  
                                              _s 0120    maxim_31856_read_register@uch_register_address 0072  
                                    __CFG_CP$OFF 0000                                               l65 13C8  
                                   ___awdiv@sign 0021                          ?_SPI_Exchange8bitBuffer 0071  
                            ___wmul@multiplicand 0026                                     ___ftadd@exp1 0052  
                                   ___ftadd@exp2 0051                                     ___ftadd@sign 0050  
                                            l123 13BC                                              l323 0291  
                                            l329 03BC                                              l194 0DAB  
                                            l371 0751                                              l197 0F9F  
                                            l623 08B1                                              l633 092A  
                                            l369 0717                                              l554 0B3D  
                                            l388 0809                                              l573 0861  
                                            l574 0869                                              l566 084E  
                                            l674 1732                                              l597 09D5  
                                            _RB3 006B                         __end_of_maxim_31856_init 006D  
                                   ___awmod@sign 0076                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                                    _sprintf$750 00A0                           _maxim_start_conversion 143F  
                                   __CFG_LVP$OFF 0000                                             l2013 167E  
                                           l2103 0974                                             l2031 169D  
                                           l2121 09A1                                             l2041 16B8  
                                           l2123 09AB                                             l2115 098E  
                                           l2019 1689                                             l3011 0FBC  
                                           l3003 0FA8                                             l2133 09C7  
                                           l2125 09B0                                             l2045 16C0  
                                           l2037 16AF                                             l2029 1691  
                                           l2061 15A1                                             l2143 09F9  
                                           l2135 09D1                                             l2127 09B4  
                                           l2071 15B3                                             l3031 0FEE  
                                           l3023 0FDA                                             l3015 0FC6  
                                           l3007 0FB2                                             l2241 15DE  
                                           l2153 0A14                                             l2401 0906  
                                           l2057 159A                                             l2251 1608  
                                           l2139 09E7                                             l2411 092D  
                                           l2403 0914                                             l2083 15D0  
                                           l2075 15BF                                             l2163 1763  
                                           l2307 01A5                                             l2323 0BF2  
                                           l3027 0FE4                                             l3019 0FD0  
                                           l2245 15EC                                             l2093 095E  
                                           l2501 147E                                             l2421 0A4A  
                                           l2069 15A7                                             l2181 17B4  
                                           l2341 0D11                                             l2333 0C6E  
                                           l2247 15FF                                             l2511 16DE  
                                           l2079 15C8                                             l2249 1603  
                                           l2097 0965                                             l2409 0921  
                                           l2193 17D0                                             l2185 17BC  
                                           l2169 1779                                             l2329 0C51  
                                           l2283 145C                                             l2259 160B  
                                           l2531 171C                                             l2427 0A67  
                                           l2347 0D70                                             l2285 1468  
                                           l2445 0AFA                                             l2437 0AB2  
                                           l2197 17D8                                             l2543 1743  
                                           l2463 0B34                                             l2455 0B19  
                                           l2391 08EC                                             l2383 08D2  
                                           l2359 1406                                             l2473 1529  
                                           l2537 1729                                             l2529 170E  
                                           l2553 1631                                             l2465 0B40  
                                           l2457 0B27                                             l2369 0899  
                                           l2539 1735                                             l2563 165F  
                                           l2555 163F                                             l2299 012D  
                                           l2731 03A5                                             l2723 0358  
                                           l2707 02FC                                             l2477 153F  
                                           l2813 05DB                                             l2805 0573  
                                           l2661 0207                                             l2567 166A  
                                           l2583 157C                                             l2807 05C7  
                                           l2655 01F5                                             l1961 0835  
                                           l2577 1556                                             l2745 0428  
                                           l2737 03F1                                             l2681 0254  
                                           l2915 14F0                                             l1971 085B  
                                           l1963 083A                                             l1955 0824  
                                           l2579 1564                                             l2587 1587  
                                           l2595 14BA                                             l2843 06EF  
                                           l2827 061F                                             l2819 05F8  
                                           l2763 04BE                                             l2851 0708  
                                           l2691 02A9                                             l2683 028C  
                                           l2931 0D99                                             l2597 14CA  
                                           l2749 043C                                             l2669 0241  
                                           l1959 082B                                             l2791 0556  
                                           l2775 04FB                                             l2759 0470  
                                           l1969 0853                                             l1993 0802  
                                           l2881 07AC                                             l2873 0781  
                                           l2849 0703                                             l2769 04C4  
                                           l2697 02BD                                             l2689 0293  
                                           l2883 07B0                                             l2875 0784  
                                           l2867 0768                                             l2859 0735  
                                           l2779 0524                                             l2789 0536  
                                           l2879 07A9                                             l2895 01DA  
                                           l2991 0F4B                                             l2959 0E62  
                                           l2889 07C8                                             l2897 07E5  
                                           STR_1 11B9                                             STR_2 112C  
                                           STR_3 1181                                             STR_4 11BF  
                                           STR_5 110D                                             STR_6 1181  
                                           STR_7 114B                                             STR_8 1168  
                                           STR_9 1184                                             u2105 0830  
                                           u2125 0849                                             u3005 08ED  
                                           _LATA 010C                                             _LATB 010D  
                                           _LATC 010E                                             u2145 0856  
                                           u2305 169E                                             u2225 080A  
                                           u3115 0AB3                                             u2315 16A8  
                                           u2235 080F                                             u3125 0ADD  
                                           u3045 0907                                             u2325 16B0  
                                           u2405 15B9                                             u4005 0EBF  
                                           u2415 15C0                                             u4015 0ECA  
                                           u2185 0870                                             u3305 170F  
                                           u4025 0ED3                                             u3075 0922  
                                           u4035 0EDC                                             u3405 1654  
                                           u3165 0B1A                                             u2285 1694  
                                           u2535 098F                                             u3335 172A  
                                           u3415 1660                                             u2625 09C8  
                                           u2385 15AA                                             u2705 1795  
                                           u4137 0DA0                                             u3275 16E5  
                                           u3195 0B35                                             u2565 09A2  
                                           u3445 1559                                             u2725 17BD  
                                           u3605 0311                                             u3375 1634  
                                           u2735 17C3                                             u3465 1572  
                                           u2595 09B5                                             u3395 1640  
                                           u3475 157D                                             u3715 04EF  
                                           u2765 17D9                                             u3645 03C8  
                                           u3495 14BF                                             u2775 17DF  
                                           u2695 1785                                             u3655 03FD  
                                           u3905 0779                                             u3915 0798  
                                           u3755 0542                                             u3685 0426  
                                           u3855 072B                                             u2985 08D3  
                                           u3865 0749                                             u3785 05E6  
                                           u2995 08E3                                             u3795 05F4  
                                           u3965 14FA                                             _WPUB 020D  
                                           _WPUE 0210                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             _main 0D8D  
                                   ___ftpack@arg 0070                                     ___ftpack@exp 0073  
                                           fsr0h 0005                                             fsr1h 0007  
                                           fsr0l 0004                                             indf0 0000  
                                           indf1 0001                                             fsr1l 0006  
                                           btemp 007E                                    __CFG_BOREN$ON 0000  
                                           ltemp 007E                                             start 0002  
                                           ttemp 007E                                             wtemp 007E  
                         __end_of_SPI_Initialize 13B5                                    __CFG_MCLRE$ON 0000  
                                   ___ftmul@cntr 0036                                     ___ftmul@sign 0037  
                 __end_of_SPI_Exchange8bitBuffer 1621                                     ___fttol@exp1 004E  
                                   ___fttol@lval 004A                                    ?_EUSART_Write 0070  
                 __size_of_OSCILLATOR_Initialize 0005                    __end_of_OSCILLATOR_Initialize 13AF  
                                          ?_main 0070                                  __end_of___awdiv 16C5  
                                __end_of___ftadd 0A2C                                            STR_10 119F  
                                          STR_11 10A0                                            STR_12 10C6  
                                          STR_13 1076                                            STR_14 10EB  
                                  __CFG_WDTE$OFF 0000                                  __end_of___awmod 15D5  
                                __end_of___ftneg 13D5                                  __end_of___lldiv 1673  
                                __end_of___ftmul 1800                                  ___awdiv@divisor 0077  
                                __end_of___llmod 1590                                  __end_of___ftsub 1494  
                                __end_of___fttol 174C                                            _LATA0 0860  
                                          _LATA3 0863                                            _LATA4 0864  
                                          _LATA5 0865                                  ___awdiv@counter 0020  
                                          _RCREG 0199                                            _RCSTA 019D  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                          _TXSTA 019E                                     ___lltoft@exp 007D  
                                __end_of_dpowers 1028                                            _scale 0B49  
                                __end_of_isdigit 1408                                    ___ftpack@sign 0074  
                                          ltemp0 007E                                            ltemp1 0082  
                                          ltemp2 0086                                            ltemp3 0080  
                                          ttemp0 007E                                            ttemp1 0081  
                                          ttemp2 0084                                            ttemp3 0087  
                                          ttemp4 007F                                            status 0003  
                                          wtemp0 007E                                            wtemp1 0080  
                                          wtemp2 0082                                            wtemp3 0084  
                                          wtemp4 0086                                            wtemp5 0088  
                                          wtemp6 007F                                  __end_of_sprintf 07EB  
                                ?_SPI_Initialize 0070                                  __initialization 07EB  
                                   __end_of_main 1000                                   ??_EUSART_Write 0070  
                                 __CFG_LPBOR$OFF 0000     maxim_31856_write_register@uch_register_value 0071  
                                         ??_main 0064                                    ___fttol@sign1 0049  
 maxim_31856_write_register@uch_register_address 0072                             __size_of__tdiv_to_l_ 00B6  
                       __end_of_SPI_Exchange8bit 13CC                                 ___llmod@dividend 0074  
                                         ?_scale 0038                                 ___awdiv@dividend 0079  
                                         _APFCON 011D                                           _ANSELA 018C  
                                         _ANSELB 018D                                           _ANSELC 018E  
                               __end_of___ftpack 0880                                 __end_of___lltoft 14DE  
                              _temperature_value 00B9                                           _OSCCON 0099  
                                         _SPBRGH 019C                                           _SPBRGL 019B  
                                         _TRISB3 046B                                           _SSPBUF 0211  
                    _f_cold_junction_temperature 00BD                                   __CFG_PWRTE$OFF 0000  
                               __end_of__powers_ 1076                                           ___ftge 1513  
                                         ___wmul 0800                                        ??___awdiv 007B  
                                      ??___ftadd 004C                                   __CFG_STVREN$ON 0000  
                                      ??___awmod 0074                                        ??___ftneg 007E  
                                      ??___lldiv 0078                                        ??___ftmul 002E  
                                      ??___llmod 0078                                        ??___ftsub 007E  
                                      ??___fttol 0045                     ?_maxim_31856_read_nregisters 0078  
                                         _fround 006D                                 ___awdiv@quotient 0022  
                                ___awmod@divisor 0070                                           _uch_sr 006E  
                                ___awmod@counter 0075                                           _strlen 1458  
                          ___ftmul@f3_as_product 0033                                        ??_isdigit 0070  
                   ??_maxim_31856_write_register 0072                       ??_maxim_clear_fault_status 0074  
                                      ??_sprintf 005E                                _SYSTEM_Initialize 13E1  
                        __end_of__initialization 07FD                                       ___ftadd@f1 0046  
                                     ___ftadd@f2 0049                                       ___ftge@ff1 0070  
                                     ___ftge@ff2 0073                               ?_SYSTEM_Initialize 0070  
                                     ___ftneg@f1 0038                                       ___ftmul@f1 0028  
                                     ___ftmul@f2 002B                                       ___ftsub@f1 0056  
                                     ___ftsub@f2 0053                                       ___fttol@f1 0041  
                                 __pcstackCOMMON 0070                              ??_SYSTEM_Initialize 0070  
                    ??_maxim_31856_read_register 0071                                       ___lltoft@c 0078  
                       EUSART_SendString@pointer 0024              __size_of_maxim_31856_write_register 000D  
                                  __end_of_scale 0D8D                    ??_maxim_31856_read_nregisters 007A  
                        ?_maxim_start_conversion 0070                                       __div_to_l_ 0A2C  
                              ?_maxim_31856_init 0070                                   _OPTION_REGbits 0095  
                             ??_maxim_31856_init 0073                      _f_linearized_tc_temperature 00C0  
                                __div_to_l_@exp1 0025                                  __div_to_l_@cntr 0024  
                                        ??_scale 003B                        __end_of_SYSTEM_Initialize 13ED  
                                __div_to_l_@quot 0020                                     sprintf@width 00AA  
                                     __pbssBANK0 006C                                       __pbssBANK1 00B9  
                                     __pbssBANK2 0120                             __end_of_EUSART_Write 13C3  
                                __CFG_VCAPEN$OFF 0000                                    __div_to_l_@f1 0070  
                                  __div_to_l_@f2 0073                                       __pmaintext 0D8D  
                                        ?___ftge 0070                                          ?___wmul 0024  
                                        _BAUDCON 019F                                          ?_fround 0038  
                                      ?___ftpack 0070                   __end_of_maxim_start_conversion 1458  
                                      ?___lltoft 0078                                          ?_strlen 0070  
                                        _OSCSTAT 009A                                          _SSP1ADD 0212  
                      _maxim_31856_read_register 1408             __size_of_maxim_31856_read_nregisters 0015  
                               ??_SPI_Initialize 0070  maxim_31856_read_nregisters@uch_register_address 007C  
                              __end_of__npowers_ 104F                                  __size_of___ftge 003B  
                                        ___awdiv 1673                                          ___ftadd 0936  
                                        ___awmod 1590                                          ___ftneg 13CC  
                                        ___lldiv 1621                                  __size_of___wmul 001C  
                                        ___ftmul 174C                                          ___llmod 154E  
                                        ___ftsub 1476                                          ___fttol 16C5  
                                     _fround$747 0042                                       _fround$748 003F  
                                     ??___ftpack 0075                                  __size_of_fround 0165  
                                     ??___lltoft 007C                                          __ptext1 01D2  
                                        __ptext2 0B49                                          __ptext3 13FA  
                                        __ptext4 006D                                          __ptext5 0800  
                                        __ptext6 174C                                          __ptext7 1590  
                                        __ptext8 1673                                          __ptext9 0880  
                                __size_of_strlen 001E                                      ?__div_to_l_ 0070  
             __end_of_maxim_31856_write_register 13FA                       _maxim_31856_write_register 13ED  
                                        _dpowers 1000                            _OSCILLATOR_Initialize 13AA  
                                        _isdigit 13FA                                 ___awmod@dividend 0072  
                                        _uch_cr0 006F                                          _uch_cr1 00C4  
                       ??_PIN_MANAGER_Initialize 0070                                          _uch_reg 00C8  
               __end_of_maxim_clear_fault_status 142A                                ?_SPI_Exchange8bit 0070  
                     __size_of_SYSTEM_Initialize 000C                                          _sprintf 01D2  
                                        clrloop0 13B6                             end_of_initialization 07FD  
                             ??_SPI_Exchange8bit 0070                             SPI_Exchange8bit@data 0070  
                              _EUSART_Initialize 13D5                                  ___lldiv@divisor 0070  
                                ___lldiv@counter 007D                               ?_EUSART_Initialize 0070  
                                      _RCSTAbits 019D                                     __pstringtext 1000  
                                 __tdiv_to_l_@f1 0070                                   __tdiv_to_l_@f2 0073  
                                        strlen@s 0070                                    ??__tdiv_to_l_ 0076  
                            ??_EUSART_Initialize 0070                                _EUSART_SendString 14DE  
                               __CFG_FOSC$INTOSC 0000                            __size_of_EUSART_Write 0008  
                             ?_EUSART_SendString 0076                              ??_EUSART_SendString 0078  
                      __end_of_EUSART_Initialize 13E1                         ??_SPI_Exchange8bitBuffer 0073  
                            __size_of__div_to_l_ 011D                                      ___ftmul@exp 0032  
      maxim_start_conversion@uch_conversion_mode 0075                                   __end_of___ftge 154E  
                                 __end_of___wmul 081C                                     _EUSART_Write 13BB  
                      __end_of_EUSART_SendString 1513                           ?_OSCILLATOR_Initialize 0070  
                                 __end_of_fround 01D2                                   __end_of_strlen 1476  
                            start_initialization 07EB                  __size_of_PIN_MANAGER_Initialize 0022  
                            __end_of__tdiv_to_l_ 0936                                  ___llmod@divisor 0070  
                      __size_of_maxim_31856_init 0066                                  ___llmod@counter 0079  
             __size_of_maxim_31856_read_register 0011                                         ??___ftge 0076  
              __size_of_maxim_clear_fault_status 0011                        ?_maxim_clear_fault_status 0070  
                                       ??___wmul 007C                               EUSART_SendString@i 0022  
                             EUSART_SendString@s 0076                               EUSART_SendString@x 0026  
                                       ??_fround 003B                                    sprintf@tmpval 00AC  
                                       ??_strlen 0072                                       fround@prec 0045  
                              __size_of___ftpack 0064                                __size_of___lltoft 0028  
                                      ___latbits 0003                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00A0                          EUSART_SendString@length 0020  
                  SPI_Exchange8bitBuffer@dataOut 0072                       __size_of_EUSART_Initialize 000C  
                                    sprintf@flag 00A8                                      sprintf@fval 00B2  
                                    sprintf@prec 00B6                                        __pnvBANK0 006F  
                __size_of_SPI_Exchange8bitBuffer 004C                           _PIN_MANAGER_Initialize 1494  
              __end_of_maxim_31856_read_register 1419                                         ?___awdiv 0077  
                                       ?___ftadd 0046                                         ?___awmod 0070  
                                       ?___ftneg 0038                                         ?___lldiv 0070  
                                       ?___ftmul 0028                                         ?___llmod 0070  
                                       ?___ftsub 0053                                        __npowers_ 1028  
                                       ?___fttol 0041              __end_of_maxim_31856_read_nregisters 143F  
                    _maxim_31856_read_nregisters 142A                       __size_of_EUSART_SendString 0035  
                                    __tdiv_to_l_ 0880                                     ??__div_to_l_ 0076  
                    ?_maxim_31856_write_register 0071                                         ?_isdigit 0070  
                                      _scale$749 003D                                         ?_sprintf 0059  
                                 __size_of_scale 0244            maxim_31856_read_nregisters@uch_nBytes 0079  
                                 ___wmul@product 007C                                        clear_ram0 13B5  
                                      _uch_ltcbh 006D                                        _uch_ltcbl 00C5  
                                      _uch_ltcbm 00C6                                         _PIR1bits 0011  
                             __end_of__div_to_l_ 0B49                        __size_of_SPI_Exchange8bit 0009  
                                       _SSP1CON1 0215                                         _SSP1STAT 0214  
                              ___wmul@multiplier 0024                           _SPI_Exchange8bitBuffer 15D5  
            maxim_31856_read_nregisters@uch_buff 0078                                 _maxim_31856_init 0007  
                       ??_maxim_start_conversion 0074                          __size_of_SPI_Initialize 0006  
                        ??_OSCILLATOR_Initialize 0070                                 __size_of___awdiv 0052  
                               __size_of___ftadd 00F6                                 __size_of___awmod 0045  
                               __size_of___ftneg 0009                                 __size_of___lldiv 0052  
                               __size_of___ftmul 00B4                                 __size_of___llmod 0042  
                               __size_of___ftsub 001E                                 __size_of___fttol 0087  
                                       ___ftpack 081C                                         ___lltoft 14B6  
                   SPI_Exchange8bitBuffer@dataIn 0076                                      _isdigit$547 0070  
                   SPI_Exchange8bitBuffer@bufLen 0071                                       sprintf@exp 00B0  
                                     sprintf@val 00A4                                 __size_of_isdigit 000E  
                                       __ptext10 0A2C                                         __ptext11 14B6  
                                       __ptext20 143F                                         __ptext12 154E  
                                       __ptext21 1419                                         __ptext13 1621  
                                       __ptext30 1494                                         __ptext22 1408  
                                       __ptext14 16C5                                         __ptext31 13AA  
                                       __ptext23 142A                                         __ptext15 1476  
                                       __ptext32 13D5                                         __ptext24 15D5  
                                       __ptext16 0936                                         __ptext33 14DE  
                                       __ptext25 0007                                         __ptext17 081C  
                                       __ptext34 1458                                         __ptext26 13ED  
                                       __ptext18 13CC                                         __ptext35 13BB  
                                       __ptext27 13C3                                         __ptext19 1513  
                                       __ptext28 13E1                                         __ptext29 13AF  
                                   _SSP1CON1bits 0215                                         __powers_ 104F  
                               __size_of_sprintf 0619                                    __size_of_main 0273  
     maxim_31856_read_register@uch_register_data 0073                                         _uch_cjth 006C  
                                       _uch_cjtl 00C3                                         _uch_mask 00C7  
                                   _SSP1STATbits 0214                                         isdigit@c 0071  
                                       scale@scl 0040                                        sprintf@ap 00A3  
                               __tdiv_to_l_@exp1 0025                                 __tdiv_to_l_@cntr 0024  
                                      sprintf@sp 00B5                                 __tdiv_to_l_@quot 0020  
                               ___lldiv@dividend 0074                          ?_PIN_MANAGER_Initialize 0070  
                              __CFG_CLKOUTEN$OFF 0000               SPI_Exchange8bitBuffer@bytesWritten 0077  
                               _SPI_Exchange8bit 13C3                  __size_of_maxim_start_conversion 0019  
                                   ?__tdiv_to_l_ 0070                                         sprintf@c 00B8  
                                       sprintf@f 0059                                 ___lldiv@quotient 0079  
                                       strlen@cp 0074                               EUSART_Write@txData 0070  
                 __end_of_PIN_MANAGER_Initialize 14B6                         _maxim_clear_fault_status 1419  
