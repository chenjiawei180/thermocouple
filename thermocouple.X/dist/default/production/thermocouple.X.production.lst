

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Jul 20 15:49:48 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	psect	text67,local,class=CODE,merge=1,delta=2
    86                           	psect	intentry,global,class=CODE,delta=2
    87                           	psect	text69,local,class=CODE,merge=1,delta=2
    88                           	psect	text70,local,class=CODE,merge=1,delta=2
    89                           	psect	text71,local,class=CODE,merge=1,delta=2
    90                           	psect	text72,local,class=CODE,merge=1,delta=2
    91                           	psect	text73,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x7E,2
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0099                     	;# 
   130  009A                     	;# 
   131  009B                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009E                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  0116                     	;# 
   140  0117                     	;# 
   141  011D                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  018E                     	;# 
   145  0191                     	;# 
   146  0191                     	;# 
   147  0192                     	;# 
   148  0193                     	;# 
   149  0193                     	;# 
   150  0194                     	;# 
   151  0195                     	;# 
   152  0196                     	;# 
   153  0197                     	;# 
   154  0199                     	;# 
   155  019A                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019C                     	;# 
   161  019C                     	;# 
   162  019D                     	;# 
   163  019E                     	;# 
   164  019F                     	;# 
   165  020D                     	;# 
   166  0210                     	;# 
   167  0211                     	;# 
   168  0211                     	;# 
   169  0212                     	;# 
   170  0212                     	;# 
   171  0213                     	;# 
   172  0213                     	;# 
   173  0214                     	;# 
   174  0214                     	;# 
   175  0215                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0216                     	;# 
   179  0216                     	;# 
   180  0217                     	;# 
   181  0217                     	;# 
   182  0291                     	;# 
   183  0291                     	;# 
   184  0292                     	;# 
   185  0293                     	;# 
   186  0298                     	;# 
   187  0298                     	;# 
   188  0299                     	;# 
   189  029A                     	;# 
   190  0394                     	;# 
   191  0395                     	;# 
   192  0396                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  0010                     	;# 
   220  0011                     	;# 
   221  0012                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  008D                     	;# 
   233  008E                     	;# 
   234  0090                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  010E                     	;# 
   250  0116                     	;# 
   251  0117                     	;# 
   252  011D                     	;# 
   253  018C                     	;# 
   254  018D                     	;# 
   255  018E                     	;# 
   256  0191                     	;# 
   257  0191                     	;# 
   258  0192                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0194                     	;# 
   262  0195                     	;# 
   263  0196                     	;# 
   264  0197                     	;# 
   265  0199                     	;# 
   266  019A                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019C                     	;# 
   273  019D                     	;# 
   274  019E                     	;# 
   275  019F                     	;# 
   276  020D                     	;# 
   277  0210                     	;# 
   278  0211                     	;# 
   279  0211                     	;# 
   280  0212                     	;# 
   281  0212                     	;# 
   282  0213                     	;# 
   283  0213                     	;# 
   284  0214                     	;# 
   285  0214                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0216                     	;# 
   290  0216                     	;# 
   291  0217                     	;# 
   292  0217                     	;# 
   293  0291                     	;# 
   294  0291                     	;# 
   295  0292                     	;# 
   296  0293                     	;# 
   297  0298                     	;# 
   298  0298                     	;# 
   299  0299                     	;# 
   300  029A                     	;# 
   301  0394                     	;# 
   302  0395                     	;# 
   303  0396                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000D                     	;# 
   329  000E                     	;# 
   330  0010                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  008C                     	;# 
   343  008D                     	;# 
   344  008E                     	;# 
   345  0090                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0099                     	;# 
   352  009A                     	;# 
   353  009B                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  010C                     	;# 
   359  010D                     	;# 
   360  010E                     	;# 
   361  0116                     	;# 
   362  0117                     	;# 
   363  011D                     	;# 
   364  018C                     	;# 
   365  018D                     	;# 
   366  018E                     	;# 
   367  0191                     	;# 
   368  0191                     	;# 
   369  0192                     	;# 
   370  0193                     	;# 
   371  0193                     	;# 
   372  0194                     	;# 
   373  0195                     	;# 
   374  0196                     	;# 
   375  0197                     	;# 
   376  0199                     	;# 
   377  019A                     	;# 
   378  019B                     	;# 
   379  019B                     	;# 
   380  019B                     	;# 
   381  019B                     	;# 
   382  019C                     	;# 
   383  019C                     	;# 
   384  019D                     	;# 
   385  019E                     	;# 
   386  019F                     	;# 
   387  020D                     	;# 
   388  0210                     	;# 
   389  0211                     	;# 
   390  0211                     	;# 
   391  0212                     	;# 
   392  0212                     	;# 
   393  0213                     	;# 
   394  0213                     	;# 
   395  0214                     	;# 
   396  0214                     	;# 
   397  0215                     	;# 
   398  0215                     	;# 
   399  0215                     	;# 
   400  0216                     	;# 
   401  0216                     	;# 
   402  0217                     	;# 
   403  0217                     	;# 
   404  0291                     	;# 
   405  0291                     	;# 
   406  0292                     	;# 
   407  0293                     	;# 
   408  0298                     	;# 
   409  0298                     	;# 
   410  0299                     	;# 
   411  029A                     	;# 
   412  0394                     	;# 
   413  0395                     	;# 
   414  0396                     	;# 
   415  0FE4                     	;# 
   416  0FE5                     	;# 
   417  0FE6                     	;# 
   418  0FE7                     	;# 
   419  0FE8                     	;# 
   420  0FE9                     	;# 
   421  0FEA                     	;# 
   422  0FEB                     	;# 
   423  0FED                     	;# 
   424  0FEE                     	;# 
   425  0FEF                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0008                     	;# 
   435  0009                     	;# 
   436  000A                     	;# 
   437  000B                     	;# 
   438  000C                     	;# 
   439  000D                     	;# 
   440  000E                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0015                     	;# 
   445  0016                     	;# 
   446  0016                     	;# 
   447  0017                     	;# 
   448  0018                     	;# 
   449  0019                     	;# 
   450  001A                     	;# 
   451  001B                     	;# 
   452  001C                     	;# 
   453  008C                     	;# 
   454  008D                     	;# 
   455  008E                     	;# 
   456  0090                     	;# 
   457  0091                     	;# 
   458  0092                     	;# 
   459  0095                     	;# 
   460  0096                     	;# 
   461  0097                     	;# 
   462  0099                     	;# 
   463  009A                     	;# 
   464  009B                     	;# 
   465  009B                     	;# 
   466  009C                     	;# 
   467  009D                     	;# 
   468  009E                     	;# 
   469  010C                     	;# 
   470  010D                     	;# 
   471  010E                     	;# 
   472  0116                     	;# 
   473  0117                     	;# 
   474  011D                     	;# 
   475  018C                     	;# 
   476  018D                     	;# 
   477  018E                     	;# 
   478  0191                     	;# 
   479  0191                     	;# 
   480  0192                     	;# 
   481  0193                     	;# 
   482  0193                     	;# 
   483  0194                     	;# 
   484  0195                     	;# 
   485  0196                     	;# 
   486  0197                     	;# 
   487  0199                     	;# 
   488  019A                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019C                     	;# 
   494  019C                     	;# 
   495  019D                     	;# 
   496  019E                     	;# 
   497  019F                     	;# 
   498  020D                     	;# 
   499  0210                     	;# 
   500  0211                     	;# 
   501  0211                     	;# 
   502  0212                     	;# 
   503  0212                     	;# 
   504  0213                     	;# 
   505  0213                     	;# 
   506  0214                     	;# 
   507  0214                     	;# 
   508  0215                     	;# 
   509  0215                     	;# 
   510  0215                     	;# 
   511  0216                     	;# 
   512  0216                     	;# 
   513  0217                     	;# 
   514  0217                     	;# 
   515  0291                     	;# 
   516  0291                     	;# 
   517  0292                     	;# 
   518  0293                     	;# 
   519  0298                     	;# 
   520  0298                     	;# 
   521  0299                     	;# 
   522  029A                     	;# 
   523  0394                     	;# 
   524  0395                     	;# 
   525  0396                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  000D                     	;# 
   551  000E                     	;# 
   552  0010                     	;# 
   553  0011                     	;# 
   554  0012                     	;# 
   555  0015                     	;# 
   556  0016                     	;# 
   557  0016                     	;# 
   558  0017                     	;# 
   559  0018                     	;# 
   560  0019                     	;# 
   561  001A                     	;# 
   562  001B                     	;# 
   563  001C                     	;# 
   564  008C                     	;# 
   565  008D                     	;# 
   566  008E                     	;# 
   567  0090                     	;# 
   568  0091                     	;# 
   569  0092                     	;# 
   570  0095                     	;# 
   571  0096                     	;# 
   572  0097                     	;# 
   573  0099                     	;# 
   574  009A                     	;# 
   575  009B                     	;# 
   576  009B                     	;# 
   577  009C                     	;# 
   578  009D                     	;# 
   579  009E                     	;# 
   580  010C                     	;# 
   581  010D                     	;# 
   582  010E                     	;# 
   583  0116                     	;# 
   584  0117                     	;# 
   585  011D                     	;# 
   586  018C                     	;# 
   587  018D                     	;# 
   588  018E                     	;# 
   589  0191                     	;# 
   590  0191                     	;# 
   591  0192                     	;# 
   592  0193                     	;# 
   593  0193                     	;# 
   594  0194                     	;# 
   595  0195                     	;# 
   596  0196                     	;# 
   597  0197                     	;# 
   598  0199                     	;# 
   599  019A                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019C                     	;# 
   605  019C                     	;# 
   606  019D                     	;# 
   607  019E                     	;# 
   608  019F                     	;# 
   609  020D                     	;# 
   610  0210                     	;# 
   611  0211                     	;# 
   612  0211                     	;# 
   613  0212                     	;# 
   614  0212                     	;# 
   615  0213                     	;# 
   616  0213                     	;# 
   617  0214                     	;# 
   618  0214                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0216                     	;# 
   623  0216                     	;# 
   624  0217                     	;# 
   625  0217                     	;# 
   626  0291                     	;# 
   627  0291                     	;# 
   628  0292                     	;# 
   629  0293                     	;# 
   630  0298                     	;# 
   631  0298                     	;# 
   632  0299                     	;# 
   633  029A                     	;# 
   634  0394                     	;# 
   635  0395                     	;# 
   636  0396                     	;# 
   637  0FE4                     	;# 
   638  0FE5                     	;# 
   639  0FE6                     	;# 
   640  0FE7                     	;# 
   641  0FE8                     	;# 
   642  0FE9                     	;# 
   643  0FEA                     	;# 
   644  0FEB                     	;# 
   645  0FED                     	;# 
   646  0FEE                     	;# 
   647  0FEF                     	;# 
   648  0000                     	;# 
   649  0001                     	;# 
   650  0002                     	;# 
   651  0003                     	;# 
   652  0004                     	;# 
   653  0005                     	;# 
   654  0006                     	;# 
   655  0007                     	;# 
   656  0008                     	;# 
   657  0009                     	;# 
   658  000A                     	;# 
   659  000B                     	;# 
   660  000C                     	;# 
   661  000D                     	;# 
   662  000E                     	;# 
   663  0010                     	;# 
   664  0011                     	;# 
   665  0012                     	;# 
   666  0015                     	;# 
   667  0016                     	;# 
   668  0016                     	;# 
   669  0017                     	;# 
   670  0018                     	;# 
   671  0019                     	;# 
   672  001A                     	;# 
   673  001B                     	;# 
   674  001C                     	;# 
   675  008C                     	;# 
   676  008D                     	;# 
   677  008E                     	;# 
   678  0090                     	;# 
   679  0091                     	;# 
   680  0092                     	;# 
   681  0095                     	;# 
   682  0096                     	;# 
   683  0097                     	;# 
   684  0099                     	;# 
   685  009A                     	;# 
   686  009B                     	;# 
   687  009B                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009E                     	;# 
   691  010C                     	;# 
   692  010D                     	;# 
   693  010E                     	;# 
   694  0116                     	;# 
   695  0117                     	;# 
   696  011D                     	;# 
   697  018C                     	;# 
   698  018D                     	;# 
   699  018E                     	;# 
   700  0191                     	;# 
   701  0191                     	;# 
   702  0192                     	;# 
   703  0193                     	;# 
   704  0193                     	;# 
   705  0194                     	;# 
   706  0195                     	;# 
   707  0196                     	;# 
   708  0197                     	;# 
   709  0199                     	;# 
   710  019A                     	;# 
   711  019B                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019B                     	;# 
   715  019C                     	;# 
   716  019C                     	;# 
   717  019D                     	;# 
   718  019E                     	;# 
   719  019F                     	;# 
   720  020D                     	;# 
   721  0210                     	;# 
   722  0211                     	;# 
   723  0211                     	;# 
   724  0212                     	;# 
   725  0212                     	;# 
   726  0213                     	;# 
   727  0213                     	;# 
   728  0214                     	;# 
   729  0214                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0216                     	;# 
   734  0216                     	;# 
   735  0217                     	;# 
   736  0217                     	;# 
   737  0291                     	;# 
   738  0291                     	;# 
   739  0292                     	;# 
   740  0293                     	;# 
   741  0298                     	;# 
   742  0298                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  0394                     	;# 
   746  0395                     	;# 
   747  0396                     	;# 
   748  0FE4                     	;# 
   749  0FE5                     	;# 
   750  0FE6                     	;# 
   751  0FE7                     	;# 
   752  0FE8                     	;# 
   753  0FE9                     	;# 
   754  0FEA                     	;# 
   755  0FEB                     	;# 
   756  0FED                     	;# 
   757  0FEE                     	;# 
   758  0FEF                     	;# 
   759  0000                     	;# 
   760  0001                     	;# 
   761  0002                     	;# 
   762  0003                     	;# 
   763  0004                     	;# 
   764  0005                     	;# 
   765  0006                     	;# 
   766  0007                     	;# 
   767  0008                     	;# 
   768  0009                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  0010                     	;# 
   775  0011                     	;# 
   776  0012                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  008C                     	;# 
   787  008D                     	;# 
   788  008E                     	;# 
   789  0090                     	;# 
   790  0091                     	;# 
   791  0092                     	;# 
   792  0095                     	;# 
   793  0096                     	;# 
   794  0097                     	;# 
   795  0099                     	;# 
   796  009A                     	;# 
   797  009B                     	;# 
   798  009B                     	;# 
   799  009C                     	;# 
   800  009D                     	;# 
   801  009E                     	;# 
   802  010C                     	;# 
   803  010D                     	;# 
   804  010E                     	;# 
   805  0116                     	;# 
   806  0117                     	;# 
   807  011D                     	;# 
   808  018C                     	;# 
   809  018D                     	;# 
   810  018E                     	;# 
   811  0191                     	;# 
   812  0191                     	;# 
   813  0192                     	;# 
   814  0193                     	;# 
   815  0193                     	;# 
   816  0194                     	;# 
   817  0195                     	;# 
   818  0196                     	;# 
   819  0197                     	;# 
   820  0199                     	;# 
   821  019A                     	;# 
   822  019B                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019C                     	;# 
   827  019C                     	;# 
   828  019D                     	;# 
   829  019E                     	;# 
   830  019F                     	;# 
   831  020D                     	;# 
   832  0210                     	;# 
   833  0211                     	;# 
   834  0211                     	;# 
   835  0212                     	;# 
   836  0212                     	;# 
   837  0213                     	;# 
   838  0213                     	;# 
   839  0214                     	;# 
   840  0214                     	;# 
   841  0215                     	;# 
   842  0215                     	;# 
   843  0215                     	;# 
   844  0216                     	;# 
   845  0216                     	;# 
   846  0217                     	;# 
   847  0217                     	;# 
   848  0291                     	;# 
   849  0291                     	;# 
   850  0292                     	;# 
   851  0293                     	;# 
   852  0298                     	;# 
   853  0298                     	;# 
   854  0299                     	;# 
   855  029A                     	;# 
   856  0394                     	;# 
   857  0395                     	;# 
   858  0396                     	;# 
   859  0FE4                     	;# 
   860  0FE5                     	;# 
   861  0FE6                     	;# 
   862  0FE7                     	;# 
   863  0FE8                     	;# 
   864  0FE9                     	;# 
   865  0FEA                     	;# 
   866  0FEB                     	;# 
   867  0FED                     	;# 
   868  0FEE                     	;# 
   869  0FEF                     	;# 
   870  0000                     	;# 
   871  0001                     	;# 
   872  0002                     	;# 
   873  0003                     	;# 
   874  0004                     	;# 
   875  0005                     	;# 
   876  0006                     	;# 
   877  0007                     	;# 
   878  0008                     	;# 
   879  0009                     	;# 
   880  000A                     	;# 
   881  000B                     	;# 
   882  000C                     	;# 
   883  000D                     	;# 
   884  000E                     	;# 
   885  0010                     	;# 
   886  0011                     	;# 
   887  0012                     	;# 
   888  0015                     	;# 
   889  0016                     	;# 
   890  0016                     	;# 
   891  0017                     	;# 
   892  0018                     	;# 
   893  0019                     	;# 
   894  001A                     	;# 
   895  001B                     	;# 
   896  001C                     	;# 
   897  008C                     	;# 
   898  008D                     	;# 
   899  008E                     	;# 
   900  0090                     	;# 
   901  0091                     	;# 
   902  0092                     	;# 
   903  0095                     	;# 
   904  0096                     	;# 
   905  0097                     	;# 
   906  0099                     	;# 
   907  009A                     	;# 
   908  009B                     	;# 
   909  009B                     	;# 
   910  009C                     	;# 
   911  009D                     	;# 
   912  009E                     	;# 
   913  010C                     	;# 
   914  010D                     	;# 
   915  010E                     	;# 
   916  0116                     	;# 
   917  0117                     	;# 
   918  011D                     	;# 
   919  018C                     	;# 
   920  018D                     	;# 
   921  018E                     	;# 
   922  0191                     	;# 
   923  0191                     	;# 
   924  0192                     	;# 
   925  0193                     	;# 
   926  0193                     	;# 
   927  0194                     	;# 
   928  0195                     	;# 
   929  0196                     	;# 
   930  0197                     	;# 
   931  0199                     	;# 
   932  019A                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019C                     	;# 
   938  019C                     	;# 
   939  019D                     	;# 
   940  019E                     	;# 
   941  019F                     	;# 
   942  020D                     	;# 
   943  0210                     	;# 
   944  0211                     	;# 
   945  0211                     	;# 
   946  0212                     	;# 
   947  0212                     	;# 
   948  0213                     	;# 
   949  0213                     	;# 
   950  0214                     	;# 
   951  0214                     	;# 
   952  0215                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0216                     	;# 
   956  0216                     	;# 
   957  0217                     	;# 
   958  0217                     	;# 
   959  0291                     	;# 
   960  0291                     	;# 
   961  0292                     	;# 
   962  0293                     	;# 
   963  0298                     	;# 
   964  0298                     	;# 
   965  0299                     	;# 
   966  029A                     	;# 
   967  0394                     	;# 
   968  0395                     	;# 
   969  0396                     	;# 
   970  0FE4                     	;# 
   971  0FE5                     	;# 
   972  0FE6                     	;# 
   973  0FE7                     	;# 
   974  0FE8                     	;# 
   975  0FE9                     	;# 
   976  0FEA                     	;# 
   977  0FEB                     	;# 
   978  0FED                     	;# 
   979  0FEE                     	;# 
   980  0FEF                     	;# 
   981  0000                     	;# 
   982  0001                     	;# 
   983  0002                     	;# 
   984  0003                     	;# 
   985  0004                     	;# 
   986  0005                     	;# 
   987  0006                     	;# 
   988  0007                     	;# 
   989  0008                     	;# 
   990  0009                     	;# 
   991  000A                     	;# 
   992  000B                     	;# 
   993  000C                     	;# 
   994  000D                     	;# 
   995  000E                     	;# 
   996  0010                     	;# 
   997  0011                     	;# 
   998  0012                     	;# 
   999  0015                     	;# 
  1000  0016                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001C                     	;# 
  1008  008C                     	;# 
  1009  008D                     	;# 
  1010  008E                     	;# 
  1011  0090                     	;# 
  1012  0091                     	;# 
  1013  0092                     	;# 
  1014  0095                     	;# 
  1015  0096                     	;# 
  1016  0097                     	;# 
  1017  0099                     	;# 
  1018  009A                     	;# 
  1019  009B                     	;# 
  1020  009B                     	;# 
  1021  009C                     	;# 
  1022  009D                     	;# 
  1023  009E                     	;# 
  1024  010C                     	;# 
  1025  010D                     	;# 
  1026  010E                     	;# 
  1027  0116                     	;# 
  1028  0117                     	;# 
  1029  011D                     	;# 
  1030  018C                     	;# 
  1031  018D                     	;# 
  1032  018E                     	;# 
  1033  0191                     	;# 
  1034  0191                     	;# 
  1035  0192                     	;# 
  1036  0193                     	;# 
  1037  0193                     	;# 
  1038  0194                     	;# 
  1039  0195                     	;# 
  1040  0196                     	;# 
  1041  0197                     	;# 
  1042  0199                     	;# 
  1043  019A                     	;# 
  1044  019B                     	;# 
  1045  019B                     	;# 
  1046  019B                     	;# 
  1047  019B                     	;# 
  1048  019C                     	;# 
  1049  019C                     	;# 
  1050  019D                     	;# 
  1051  019E                     	;# 
  1052  019F                     	;# 
  1053  020D                     	;# 
  1054  0210                     	;# 
  1055  0211                     	;# 
  1056  0211                     	;# 
  1057  0212                     	;# 
  1058  0212                     	;# 
  1059  0213                     	;# 
  1060  0213                     	;# 
  1061  0214                     	;# 
  1062  0214                     	;# 
  1063  0215                     	;# 
  1064  0215                     	;# 
  1065  0215                     	;# 
  1066  0216                     	;# 
  1067  0216                     	;# 
  1068  0217                     	;# 
  1069  0217                     	;# 
  1070  0291                     	;# 
  1071  0291                     	;# 
  1072  0292                     	;# 
  1073  0293                     	;# 
  1074  0298                     	;# 
  1075  0298                     	;# 
  1076  0299                     	;# 
  1077  029A                     	;# 
  1078  0394                     	;# 
  1079  0395                     	;# 
  1080  0396                     	;# 
  1081  0FE4                     	;# 
  1082  0FE5                     	;# 
  1083  0FE6                     	;# 
  1084  0FE7                     	;# 
  1085  0FE8                     	;# 
  1086  0FE9                     	;# 
  1087  0FEA                     	;# 
  1088  0FEB                     	;# 
  1089  0FED                     	;# 
  1090  0FEE                     	;# 
  1091  0FEF                     	;# 
  1092  0000                     	;# 
  1093  0001                     	;# 
  1094  0002                     	;# 
  1095  0003                     	;# 
  1096  0004                     	;# 
  1097  0005                     	;# 
  1098  0006                     	;# 
  1099  0007                     	;# 
  1100  0008                     	;# 
  1101  0009                     	;# 
  1102  000A                     	;# 
  1103  000B                     	;# 
  1104  000C                     	;# 
  1105  000D                     	;# 
  1106  000E                     	;# 
  1107  0010                     	;# 
  1108  0011                     	;# 
  1109  0012                     	;# 
  1110  0015                     	;# 
  1111  0016                     	;# 
  1112  0016                     	;# 
  1113  0017                     	;# 
  1114  0018                     	;# 
  1115  0019                     	;# 
  1116  001A                     	;# 
  1117  001B                     	;# 
  1118  001C                     	;# 
  1119  008C                     	;# 
  1120  008D                     	;# 
  1121  008E                     	;# 
  1122  0090                     	;# 
  1123  0091                     	;# 
  1124  0092                     	;# 
  1125  0095                     	;# 
  1126  0096                     	;# 
  1127  0097                     	;# 
  1128  0099                     	;# 
  1129  009A                     	;# 
  1130  009B                     	;# 
  1131  009B                     	;# 
  1132  009C                     	;# 
  1133  009D                     	;# 
  1134  009E                     	;# 
  1135  010C                     	;# 
  1136  010D                     	;# 
  1137  010E                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  011D                     	;# 
  1141  018C                     	;# 
  1142  018D                     	;# 
  1143  018E                     	;# 
  1144  0191                     	;# 
  1145  0191                     	;# 
  1146  0192                     	;# 
  1147  0193                     	;# 
  1148  0193                     	;# 
  1149  0194                     	;# 
  1150  0195                     	;# 
  1151  0196                     	;# 
  1152  0197                     	;# 
  1153  0199                     	;# 
  1154  019A                     	;# 
  1155  019B                     	;# 
  1156  019B                     	;# 
  1157  019B                     	;# 
  1158  019B                     	;# 
  1159  019C                     	;# 
  1160  019C                     	;# 
  1161  019D                     	;# 
  1162  019E                     	;# 
  1163  019F                     	;# 
  1164  020D                     	;# 
  1165  0210                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0216                     	;# 
  1178  0216                     	;# 
  1179  0217                     	;# 
  1180  0217                     	;# 
  1181  0291                     	;# 
  1182  0291                     	;# 
  1183  0292                     	;# 
  1184  0293                     	;# 
  1185  0298                     	;# 
  1186  0298                     	;# 
  1187  0299                     	;# 
  1188  029A                     	;# 
  1189  0394                     	;# 
  1190  0395                     	;# 
  1191  0396                     	;# 
  1192  0FE4                     	;# 
  1193  0FE5                     	;# 
  1194  0FE6                     	;# 
  1195  0FE7                     	;# 
  1196  0FE8                     	;# 
  1197  0FE9                     	;# 
  1198  0FEA                     	;# 
  1199  0FEB                     	;# 
  1200  0FED                     	;# 
  1201  0FEE                     	;# 
  1202  0FEF                     	;# 
  1203  0000                     	;# 
  1204  0001                     	;# 
  1205  0002                     	;# 
  1206  0003                     	;# 
  1207  0004                     	;# 
  1208  0005                     	;# 
  1209  0006                     	;# 
  1210  0007                     	;# 
  1211  0008                     	;# 
  1212  0009                     	;# 
  1213  000A                     	;# 
  1214  000B                     	;# 
  1215  000C                     	;# 
  1216  000D                     	;# 
  1217  000E                     	;# 
  1218  0010                     	;# 
  1219  0011                     	;# 
  1220  0012                     	;# 
  1221  0015                     	;# 
  1222  0016                     	;# 
  1223  0016                     	;# 
  1224  0017                     	;# 
  1225  0018                     	;# 
  1226  0019                     	;# 
  1227  001A                     	;# 
  1228  001B                     	;# 
  1229  001C                     	;# 
  1230  008C                     	;# 
  1231  008D                     	;# 
  1232  008E                     	;# 
  1233  0090                     	;# 
  1234  0091                     	;# 
  1235  0092                     	;# 
  1236  0095                     	;# 
  1237  0096                     	;# 
  1238  0097                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  010E                     	;# 
  1249  0116                     	;# 
  1250  0117                     	;# 
  1251  011D                     	;# 
  1252  018C                     	;# 
  1253  018D                     	;# 
  1254  018E                     	;# 
  1255  0191                     	;# 
  1256  0191                     	;# 
  1257  0192                     	;# 
  1258  0193                     	;# 
  1259  0193                     	;# 
  1260  0194                     	;# 
  1261  0195                     	;# 
  1262  0196                     	;# 
  1263  0197                     	;# 
  1264  0199                     	;# 
  1265  019A                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019B                     	;# 
  1269  019B                     	;# 
  1270  019C                     	;# 
  1271  019C                     	;# 
  1272  019D                     	;# 
  1273  019E                     	;# 
  1274  019F                     	;# 
  1275  020D                     	;# 
  1276  0210                     	;# 
  1277  0211                     	;# 
  1278  0211                     	;# 
  1279  0212                     	;# 
  1280  0212                     	;# 
  1281  0213                     	;# 
  1282  0213                     	;# 
  1283  0214                     	;# 
  1284  0214                     	;# 
  1285  0215                     	;# 
  1286  0215                     	;# 
  1287  0215                     	;# 
  1288  0216                     	;# 
  1289  0216                     	;# 
  1290  0217                     	;# 
  1291  0217                     	;# 
  1292  0291                     	;# 
  1293  0291                     	;# 
  1294  0292                     	;# 
  1295  0293                     	;# 
  1296  0298                     	;# 
  1297  0298                     	;# 
  1298  0299                     	;# 
  1299  029A                     	;# 
  1300  0394                     	;# 
  1301  0395                     	;# 
  1302  0396                     	;# 
  1303  0FE4                     	;# 
  1304  0FE5                     	;# 
  1305  0FE6                     	;# 
  1306  0FE7                     	;# 
  1307  0FE8                     	;# 
  1308  0FE9                     	;# 
  1309  0FEA                     	;# 
  1310  0FEB                     	;# 
  1311  0FED                     	;# 
  1312  0FEE                     	;# 
  1313  0FEF                     	;# 
  1314  0000                     	;# 
  1315  0001                     	;# 
  1316  0002                     	;# 
  1317  0003                     	;# 
  1318  0004                     	;# 
  1319  0005                     	;# 
  1320  0006                     	;# 
  1321  0007                     	;# 
  1322  0008                     	;# 
  1323  0009                     	;# 
  1324  000A                     	;# 
  1325  000B                     	;# 
  1326  000C                     	;# 
  1327  000D                     	;# 
  1328  000E                     	;# 
  1329  0010                     	;# 
  1330  0011                     	;# 
  1331  0012                     	;# 
  1332  0015                     	;# 
  1333  0016                     	;# 
  1334  0016                     	;# 
  1335  0017                     	;# 
  1336  0018                     	;# 
  1337  0019                     	;# 
  1338  001A                     	;# 
  1339  001B                     	;# 
  1340  001C                     	;# 
  1341  008C                     	;# 
  1342  008D                     	;# 
  1343  008E                     	;# 
  1344  0090                     	;# 
  1345  0091                     	;# 
  1346  0092                     	;# 
  1347  0095                     	;# 
  1348  0096                     	;# 
  1349  0097                     	;# 
  1350  0099                     	;# 
  1351  009A                     	;# 
  1352  009B                     	;# 
  1353  009B                     	;# 
  1354  009C                     	;# 
  1355  009D                     	;# 
  1356  009E                     	;# 
  1357  010C                     	;# 
  1358  010D                     	;# 
  1359  010E                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  011D                     	;# 
  1363  018C                     	;# 
  1364  018D                     	;# 
  1365  018E                     	;# 
  1366  0191                     	;# 
  1367  0191                     	;# 
  1368  0192                     	;# 
  1369  0193                     	;# 
  1370  0193                     	;# 
  1371  0194                     	;# 
  1372  0195                     	;# 
  1373  0196                     	;# 
  1374  0197                     	;# 
  1375  0199                     	;# 
  1376  019A                     	;# 
  1377  019B                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019C                     	;# 
  1382  019C                     	;# 
  1383  019D                     	;# 
  1384  019E                     	;# 
  1385  019F                     	;# 
  1386  020D                     	;# 
  1387  0210                     	;# 
  1388  0211                     	;# 
  1389  0211                     	;# 
  1390  0212                     	;# 
  1391  0212                     	;# 
  1392  0213                     	;# 
  1393  0213                     	;# 
  1394  0214                     	;# 
  1395  0214                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0216                     	;# 
  1400  0216                     	;# 
  1401  0217                     	;# 
  1402  0217                     	;# 
  1403  0291                     	;# 
  1404  0291                     	;# 
  1405  0292                     	;# 
  1406  0293                     	;# 
  1407  0298                     	;# 
  1408  0298                     	;# 
  1409  0299                     	;# 
  1410  029A                     	;# 
  1411  0394                     	;# 
  1412  0395                     	;# 
  1413  0396                     	;# 
  1414  0FE4                     	;# 
  1415  0FE5                     	;# 
  1416  0FE6                     	;# 
  1417  0FE7                     	;# 
  1418  0FE8                     	;# 
  1419  0FE9                     	;# 
  1420  0FEA                     	;# 
  1421  0FEB                     	;# 
  1422  0FED                     	;# 
  1423  0FEE                     	;# 
  1424  0FEF                     	;# 
  1425  0000                     	;# 
  1426  0001                     	;# 
  1427  0002                     	;# 
  1428  0003                     	;# 
  1429  0004                     	;# 
  1430  0005                     	;# 
  1431  0006                     	;# 
  1432  0007                     	;# 
  1433  0008                     	;# 
  1434  0009                     	;# 
  1435  000A                     	;# 
  1436  000B                     	;# 
  1437  000C                     	;# 
  1438  000D                     	;# 
  1439  000E                     	;# 
  1440  0010                     	;# 
  1441  0011                     	;# 
  1442  0012                     	;# 
  1443  0015                     	;# 
  1444  0016                     	;# 
  1445  0016                     	;# 
  1446  0017                     	;# 
  1447  0018                     	;# 
  1448  0019                     	;# 
  1449  001A                     	;# 
  1450  001B                     	;# 
  1451  001C                     	;# 
  1452  008C                     	;# 
  1453  008D                     	;# 
  1454  008E                     	;# 
  1455  0090                     	;# 
  1456  0091                     	;# 
  1457  0092                     	;# 
  1458  0095                     	;# 
  1459  0096                     	;# 
  1460  0097                     	;# 
  1461  0099                     	;# 
  1462  009A                     	;# 
  1463  009B                     	;# 
  1464  009B                     	;# 
  1465  009C                     	;# 
  1466  009D                     	;# 
  1467  009E                     	;# 
  1468  010C                     	;# 
  1469  010D                     	;# 
  1470  010E                     	;# 
  1471  0116                     	;# 
  1472  0117                     	;# 
  1473  011D                     	;# 
  1474  018C                     	;# 
  1475  018D                     	;# 
  1476  018E                     	;# 
  1477  0191                     	;# 
  1478  0191                     	;# 
  1479  0192                     	;# 
  1480  0193                     	;# 
  1481  0193                     	;# 
  1482  0194                     	;# 
  1483  0195                     	;# 
  1484  0196                     	;# 
  1485  0197                     	;# 
  1486  0199                     	;# 
  1487  019A                     	;# 
  1488  019B                     	;# 
  1489  019B                     	;# 
  1490  019B                     	;# 
  1491  019B                     	;# 
  1492  019C                     	;# 
  1493  019C                     	;# 
  1494  019D                     	;# 
  1495  019E                     	;# 
  1496  019F                     	;# 
  1497  020D                     	;# 
  1498  0210                     	;# 
  1499  0211                     	;# 
  1500  0211                     	;# 
  1501  0212                     	;# 
  1502  0212                     	;# 
  1503  0213                     	;# 
  1504  0213                     	;# 
  1505  0214                     	;# 
  1506  0214                     	;# 
  1507  0215                     	;# 
  1508  0215                     	;# 
  1509  0215                     	;# 
  1510  0216                     	;# 
  1511  0216                     	;# 
  1512  0217                     	;# 
  1513  0217                     	;# 
  1514  0291                     	;# 
  1515  0291                     	;# 
  1516  0292                     	;# 
  1517  0293                     	;# 
  1518  0298                     	;# 
  1519  0298                     	;# 
  1520  0299                     	;# 
  1521  029A                     	;# 
  1522  0394                     	;# 
  1523  0395                     	;# 
  1524  0396                     	;# 
  1525  0FE4                     	;# 
  1526  0FE5                     	;# 
  1527  0FE6                     	;# 
  1528  0FE7                     	;# 
  1529  0FE8                     	;# 
  1530  0FE9                     	;# 
  1531  0FEA                     	;# 
  1532  0FEB                     	;# 
  1533  0FED                     	;# 
  1534  0FEE                     	;# 
  1535  0FEF                     	;# 
  1536  0000                     	;# 
  1537  0001                     	;# 
  1538  0002                     	;# 
  1539  0003                     	;# 
  1540  0004                     	;# 
  1541  0005                     	;# 
  1542  0006                     	;# 
  1543  0007                     	;# 
  1544  0008                     	;# 
  1545  0009                     	;# 
  1546  000A                     	;# 
  1547  000B                     	;# 
  1548  000C                     	;# 
  1549  000D                     	;# 
  1550  000E                     	;# 
  1551  0010                     	;# 
  1552  0011                     	;# 
  1553  0012                     	;# 
  1554  0015                     	;# 
  1555  0016                     	;# 
  1556  0016                     	;# 
  1557  0017                     	;# 
  1558  0018                     	;# 
  1559  0019                     	;# 
  1560  001A                     	;# 
  1561  001B                     	;# 
  1562  001C                     	;# 
  1563  008C                     	;# 
  1564  008D                     	;# 
  1565  008E                     	;# 
  1566  0090                     	;# 
  1567  0091                     	;# 
  1568  0092                     	;# 
  1569  0095                     	;# 
  1570  0096                     	;# 
  1571  0097                     	;# 
  1572  0099                     	;# 
  1573  009A                     	;# 
  1574  009B                     	;# 
  1575  009B                     	;# 
  1576  009C                     	;# 
  1577  009D                     	;# 
  1578  009E                     	;# 
  1579  010C                     	;# 
  1580  010D                     	;# 
  1581  010E                     	;# 
  1582  0116                     	;# 
  1583  0117                     	;# 
  1584  011D                     	;# 
  1585  018C                     	;# 
  1586  018D                     	;# 
  1587  018E                     	;# 
  1588  0191                     	;# 
  1589  0191                     	;# 
  1590  0192                     	;# 
  1591  0193                     	;# 
  1592  0193                     	;# 
  1593  0194                     	;# 
  1594  0195                     	;# 
  1595  0196                     	;# 
  1596  0197                     	;# 
  1597  0199                     	;# 
  1598  019A                     	;# 
  1599  019B                     	;# 
  1600  019B                     	;# 
  1601  019B                     	;# 
  1602  019B                     	;# 
  1603  019C                     	;# 
  1604  019C                     	;# 
  1605  019D                     	;# 
  1606  019E                     	;# 
  1607  019F                     	;# 
  1608  020D                     	;# 
  1609  0210                     	;# 
  1610  0211                     	;# 
  1611  0211                     	;# 
  1612  0212                     	;# 
  1613  0212                     	;# 
  1614  0213                     	;# 
  1615  0213                     	;# 
  1616  0214                     	;# 
  1617  0214                     	;# 
  1618  0215                     	;# 
  1619  0215                     	;# 
  1620  0215                     	;# 
  1621  0216                     	;# 
  1622  0216                     	;# 
  1623  0217                     	;# 
  1624  0217                     	;# 
  1625  0291                     	;# 
  1626  0291                     	;# 
  1627  0292                     	;# 
  1628  0293                     	;# 
  1629  0298                     	;# 
  1630  0298                     	;# 
  1631  0299                     	;# 
  1632  029A                     	;# 
  1633  0394                     	;# 
  1634  0395                     	;# 
  1635  0396                     	;# 
  1636  0FE4                     	;# 
  1637  0FE5                     	;# 
  1638  0FE6                     	;# 
  1639  0FE7                     	;# 
  1640  0FE8                     	;# 
  1641  0FE9                     	;# 
  1642  0FEA                     	;# 
  1643  0FEB                     	;# 
  1644  0FED                     	;# 
  1645  0FEE                     	;# 
  1646  0FEF                     	;# 
  1647  0000                     	;# 
  1648  0001                     	;# 
  1649  0002                     	;# 
  1650  0003                     	;# 
  1651  0004                     	;# 
  1652  0005                     	;# 
  1653  0006                     	;# 
  1654  0007                     	;# 
  1655  0008                     	;# 
  1656  0009                     	;# 
  1657  000A                     	;# 
  1658  000B                     	;# 
  1659  000C                     	;# 
  1660  000D                     	;# 
  1661  000E                     	;# 
  1662  0010                     	;# 
  1663  0011                     	;# 
  1664  0012                     	;# 
  1665  0015                     	;# 
  1666  0016                     	;# 
  1667  0016                     	;# 
  1668  0017                     	;# 
  1669  0018                     	;# 
  1670  0019                     	;# 
  1671  001A                     	;# 
  1672  001B                     	;# 
  1673  001C                     	;# 
  1674  008C                     	;# 
  1675  008D                     	;# 
  1676  008E                     	;# 
  1677  0090                     	;# 
  1678  0091                     	;# 
  1679  0092                     	;# 
  1680  0095                     	;# 
  1681  0096                     	;# 
  1682  0097                     	;# 
  1683  0099                     	;# 
  1684  009A                     	;# 
  1685  009B                     	;# 
  1686  009B                     	;# 
  1687  009C                     	;# 
  1688  009D                     	;# 
  1689  009E                     	;# 
  1690  010C                     	;# 
  1691  010D                     	;# 
  1692  010E                     	;# 
  1693  0116                     	;# 
  1694  0117                     	;# 
  1695  011D                     	;# 
  1696  018C                     	;# 
  1697  018D                     	;# 
  1698  018E                     	;# 
  1699  0191                     	;# 
  1700  0191                     	;# 
  1701  0192                     	;# 
  1702  0193                     	;# 
  1703  0193                     	;# 
  1704  0194                     	;# 
  1705  0195                     	;# 
  1706  0196                     	;# 
  1707  0197                     	;# 
  1708  0199                     	;# 
  1709  019A                     	;# 
  1710  019B                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019B                     	;# 
  1714  019C                     	;# 
  1715  019C                     	;# 
  1716  019D                     	;# 
  1717  019E                     	;# 
  1718  019F                     	;# 
  1719  020D                     	;# 
  1720  0210                     	;# 
  1721  0211                     	;# 
  1722  0211                     	;# 
  1723  0212                     	;# 
  1724  0212                     	;# 
  1725  0213                     	;# 
  1726  0213                     	;# 
  1727  0214                     	;# 
  1728  0214                     	;# 
  1729  0215                     	;# 
  1730  0215                     	;# 
  1731  0215                     	;# 
  1732  0216                     	;# 
  1733  0216                     	;# 
  1734  0217                     	;# 
  1735  0217                     	;# 
  1736  0291                     	;# 
  1737  0291                     	;# 
  1738  0292                     	;# 
  1739  0293                     	;# 
  1740  0298                     	;# 
  1741  0298                     	;# 
  1742  0299                     	;# 
  1743  029A                     	;# 
  1744  0394                     	;# 
  1745  0395                     	;# 
  1746  0396                     	;# 
  1747  0FE4                     	;# 
  1748  0FE5                     	;# 
  1749  0FE6                     	;# 
  1750  0FE7                     	;# 
  1751  0FE8                     	;# 
  1752  0FE9                     	;# 
  1753  0FEA                     	;# 
  1754  0FEB                     	;# 
  1755  0FED                     	;# 
  1756  0FEE                     	;# 
  1757  0FEF                     	;# 
  1758  0000                     	;# 
  1759  0001                     	;# 
  1760  0002                     	;# 
  1761  0003                     	;# 
  1762  0004                     	;# 
  1763  0005                     	;# 
  1764  0006                     	;# 
  1765  0007                     	;# 
  1766  0008                     	;# 
  1767  0009                     	;# 
  1768  000A                     	;# 
  1769  000B                     	;# 
  1770  000C                     	;# 
  1771  000D                     	;# 
  1772  000E                     	;# 
  1773  0010                     	;# 
  1774  0011                     	;# 
  1775  0012                     	;# 
  1776  0015                     	;# 
  1777  0016                     	;# 
  1778  0016                     	;# 
  1779  0017                     	;# 
  1780  0018                     	;# 
  1781  0019                     	;# 
  1782  001A                     	;# 
  1783  001B                     	;# 
  1784  001C                     	;# 
  1785  008C                     	;# 
  1786  008D                     	;# 
  1787  008E                     	;# 
  1788  0090                     	;# 
  1789  0091                     	;# 
  1790  0092                     	;# 
  1791  0095                     	;# 
  1792  0096                     	;# 
  1793  0097                     	;# 
  1794  0099                     	;# 
  1795  009A                     	;# 
  1796  009B                     	;# 
  1797  009B                     	;# 
  1798  009C                     	;# 
  1799  009D                     	;# 
  1800  009E                     	;# 
  1801  010C                     	;# 
  1802  010D                     	;# 
  1803  010E                     	;# 
  1804  0116                     	;# 
  1805  0117                     	;# 
  1806  011D                     	;# 
  1807  018C                     	;# 
  1808  018D                     	;# 
  1809  018E                     	;# 
  1810  0191                     	;# 
  1811  0191                     	;# 
  1812  0192                     	;# 
  1813  0193                     	;# 
  1814  0193                     	;# 
  1815  0194                     	;# 
  1816  0195                     	;# 
  1817  0196                     	;# 
  1818  0197                     	;# 
  1819  0199                     	;# 
  1820  019A                     	;# 
  1821  019B                     	;# 
  1822  019B                     	;# 
  1823  019B                     	;# 
  1824  019B                     	;# 
  1825  019C                     	;# 
  1826  019C                     	;# 
  1827  019D                     	;# 
  1828  019E                     	;# 
  1829  019F                     	;# 
  1830  020D                     	;# 
  1831  0210                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0213                     	;# 
  1838  0214                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0215                     	;# 
  1843  0216                     	;# 
  1844  0216                     	;# 
  1845  0217                     	;# 
  1846  0217                     	;# 
  1847  0291                     	;# 
  1848  0291                     	;# 
  1849  0292                     	;# 
  1850  0293                     	;# 
  1851  0298                     	;# 
  1852  0298                     	;# 
  1853  0299                     	;# 
  1854  029A                     	;# 
  1855  0394                     	;# 
  1856  0395                     	;# 
  1857  0396                     	;# 
  1858  0FE4                     	;# 
  1859  0FE5                     	;# 
  1860  0FE6                     	;# 
  1861  0FE7                     	;# 
  1862  0FE8                     	;# 
  1863  0FE9                     	;# 
  1864  0FEA                     	;# 
  1865  0FEB                     	;# 
  1866  0FED                     	;# 
  1867  0FEE                     	;# 
  1868  0FEF                     	;# 
  1869  0000                     	;# 
  1870  0001                     	;# 
  1871  0002                     	;# 
  1872  0003                     	;# 
  1873  0004                     	;# 
  1874  0005                     	;# 
  1875  0006                     	;# 
  1876  0007                     	;# 
  1877  0008                     	;# 
  1878  0009                     	;# 
  1879  000A                     	;# 
  1880  000B                     	;# 
  1881  000C                     	;# 
  1882  000D                     	;# 
  1883  000E                     	;# 
  1884  0010                     	;# 
  1885  0011                     	;# 
  1886  0012                     	;# 
  1887  0015                     	;# 
  1888  0016                     	;# 
  1889  0016                     	;# 
  1890  0017                     	;# 
  1891  0018                     	;# 
  1892  0019                     	;# 
  1893  001A                     	;# 
  1894  001B                     	;# 
  1895  001C                     	;# 
  1896  008C                     	;# 
  1897  008D                     	;# 
  1898  008E                     	;# 
  1899  0090                     	;# 
  1900  0091                     	;# 
  1901  0092                     	;# 
  1902  0095                     	;# 
  1903  0096                     	;# 
  1904  0097                     	;# 
  1905  0099                     	;# 
  1906  009A                     	;# 
  1907  009B                     	;# 
  1908  009B                     	;# 
  1909  009C                     	;# 
  1910  009D                     	;# 
  1911  009E                     	;# 
  1912  010C                     	;# 
  1913  010D                     	;# 
  1914  010E                     	;# 
  1915  0116                     	;# 
  1916  0117                     	;# 
  1917  011D                     	;# 
  1918  018C                     	;# 
  1919  018D                     	;# 
  1920  018E                     	;# 
  1921  0191                     	;# 
  1922  0191                     	;# 
  1923  0192                     	;# 
  1924  0193                     	;# 
  1925  0193                     	;# 
  1926  0194                     	;# 
  1927  0195                     	;# 
  1928  0196                     	;# 
  1929  0197                     	;# 
  1930  0199                     	;# 
  1931  019A                     	;# 
  1932  019B                     	;# 
  1933  019B                     	;# 
  1934  019B                     	;# 
  1935  019B                     	;# 
  1936  019C                     	;# 
  1937  019C                     	;# 
  1938  019D                     	;# 
  1939  019E                     	;# 
  1940  019F                     	;# 
  1941  020D                     	;# 
  1942  0210                     	;# 
  1943  0211                     	;# 
  1944  0211                     	;# 
  1945  0212                     	;# 
  1946  0212                     	;# 
  1947  0213                     	;# 
  1948  0213                     	;# 
  1949  0214                     	;# 
  1950  0214                     	;# 
  1951  0215                     	;# 
  1952  0215                     	;# 
  1953  0215                     	;# 
  1954  0216                     	;# 
  1955  0216                     	;# 
  1956  0217                     	;# 
  1957  0217                     	;# 
  1958  0291                     	;# 
  1959  0291                     	;# 
  1960  0292                     	;# 
  1961  0293                     	;# 
  1962  0298                     	;# 
  1963  0298                     	;# 
  1964  0299                     	;# 
  1965  029A                     	;# 
  1966  0394                     	;# 
  1967  0395                     	;# 
  1968  0396                     	;# 
  1969  0FE4                     	;# 
  1970  0FE5                     	;# 
  1971  0FE6                     	;# 
  1972  0FE7                     	;# 
  1973  0FE8                     	;# 
  1974  0FE9                     	;# 
  1975  0FEA                     	;# 
  1976  0FEB                     	;# 
  1977  0FED                     	;# 
  1978  0FEE                     	;# 
  1979  0FEF                     	;# 
  1980  0000                     	;# 
  1981  0001                     	;# 
  1982  0002                     	;# 
  1983  0003                     	;# 
  1984  0004                     	;# 
  1985  0005                     	;# 
  1986  0006                     	;# 
  1987  0007                     	;# 
  1988  0008                     	;# 
  1989  0009                     	;# 
  1990  000A                     	;# 
  1991  000B                     	;# 
  1992  000C                     	;# 
  1993  000D                     	;# 
  1994  000E                     	;# 
  1995  0010                     	;# 
  1996  0011                     	;# 
  1997  0012                     	;# 
  1998  0015                     	;# 
  1999  0016                     	;# 
  2000  0016                     	;# 
  2001  0017                     	;# 
  2002  0018                     	;# 
  2003  0019                     	;# 
  2004  001A                     	;# 
  2005  001B                     	;# 
  2006  001C                     	;# 
  2007  008C                     	;# 
  2008  008D                     	;# 
  2009  008E                     	;# 
  2010  0090                     	;# 
  2011  0091                     	;# 
  2012  0092                     	;# 
  2013  0095                     	;# 
  2014  0096                     	;# 
  2015  0097                     	;# 
  2016  0099                     	;# 
  2017  009A                     	;# 
  2018  009B                     	;# 
  2019  009B                     	;# 
  2020  009C                     	;# 
  2021  009D                     	;# 
  2022  009E                     	;# 
  2023  010C                     	;# 
  2024  010D                     	;# 
  2025  010E                     	;# 
  2026  0116                     	;# 
  2027  0117                     	;# 
  2028  011D                     	;# 
  2029  018C                     	;# 
  2030  018D                     	;# 
  2031  018E                     	;# 
  2032  0191                     	;# 
  2033  0191                     	;# 
  2034  0192                     	;# 
  2035  0193                     	;# 
  2036  0193                     	;# 
  2037  0194                     	;# 
  2038  0195                     	;# 
  2039  0196                     	;# 
  2040  0197                     	;# 
  2041  0199                     	;# 
  2042  019A                     	;# 
  2043  019B                     	;# 
  2044  019B                     	;# 
  2045  019B                     	;# 
  2046  019B                     	;# 
  2047  019C                     	;# 
  2048  019C                     	;# 
  2049  019D                     	;# 
  2050  019E                     	;# 
  2051  019F                     	;# 
  2052  020D                     	;# 
  2053  0210                     	;# 
  2054  0211                     	;# 
  2055  0211                     	;# 
  2056  0212                     	;# 
  2057  0212                     	;# 
  2058  0213                     	;# 
  2059  0213                     	;# 
  2060  0214                     	;# 
  2061  0214                     	;# 
  2062  0215                     	;# 
  2063  0215                     	;# 
  2064  0215                     	;# 
  2065  0216                     	;# 
  2066  0216                     	;# 
  2067  0217                     	;# 
  2068  0217                     	;# 
  2069  0291                     	;# 
  2070  0291                     	;# 
  2071  0292                     	;# 
  2072  0293                     	;# 
  2073  0298                     	;# 
  2074  0298                     	;# 
  2075  0299                     	;# 
  2076  029A                     	;# 
  2077  0394                     	;# 
  2078  0395                     	;# 
  2079  0396                     	;# 
  2080  0FE4                     	;# 
  2081  0FE5                     	;# 
  2082  0FE6                     	;# 
  2083  0FE7                     	;# 
  2084  0FE8                     	;# 
  2085  0FE9                     	;# 
  2086  0FEA                     	;# 
  2087  0FEB                     	;# 
  2088  0FED                     	;# 
  2089  0FEE                     	;# 
  2090  0FEF                     	;# 
  2091  0000                     	;# 
  2092  0001                     	;# 
  2093  0002                     	;# 
  2094  0003                     	;# 
  2095  0004                     	;# 
  2096  0005                     	;# 
  2097  0006                     	;# 
  2098  0007                     	;# 
  2099  0008                     	;# 
  2100  0009                     	;# 
  2101  000A                     	;# 
  2102  000B                     	;# 
  2103  000C                     	;# 
  2104  000D                     	;# 
  2105  000E                     	;# 
  2106  0010                     	;# 
  2107  0011                     	;# 
  2108  0012                     	;# 
  2109  0015                     	;# 
  2110  0016                     	;# 
  2111  0016                     	;# 
  2112  0017                     	;# 
  2113  0018                     	;# 
  2114  0019                     	;# 
  2115  001A                     	;# 
  2116  001B                     	;# 
  2117  001C                     	;# 
  2118  008C                     	;# 
  2119  008D                     	;# 
  2120  008E                     	;# 
  2121  0090                     	;# 
  2122  0091                     	;# 
  2123  0092                     	;# 
  2124  0095                     	;# 
  2125  0096                     	;# 
  2126  0097                     	;# 
  2127  0099                     	;# 
  2128  009A                     	;# 
  2129  009B                     	;# 
  2130  009B                     	;# 
  2131  009C                     	;# 
  2132  009D                     	;# 
  2133  009E                     	;# 
  2134  010C                     	;# 
  2135  010D                     	;# 
  2136  010E                     	;# 
  2137  0116                     	;# 
  2138  0117                     	;# 
  2139  011D                     	;# 
  2140  018C                     	;# 
  2141  018D                     	;# 
  2142  018E                     	;# 
  2143  0191                     	;# 
  2144  0191                     	;# 
  2145  0192                     	;# 
  2146  0193                     	;# 
  2147  0193                     	;# 
  2148  0194                     	;# 
  2149  0195                     	;# 
  2150  0196                     	;# 
  2151  0197                     	;# 
  2152  0199                     	;# 
  2153  019A                     	;# 
  2154  019B                     	;# 
  2155  019B                     	;# 
  2156  019B                     	;# 
  2157  019B                     	;# 
  2158  019C                     	;# 
  2159  019C                     	;# 
  2160  019D                     	;# 
  2161  019E                     	;# 
  2162  019F                     	;# 
  2163  020D                     	;# 
  2164  0210                     	;# 
  2165  0211                     	;# 
  2166  0211                     	;# 
  2167  0212                     	;# 
  2168  0212                     	;# 
  2169  0213                     	;# 
  2170  0213                     	;# 
  2171  0214                     	;# 
  2172  0214                     	;# 
  2173  0215                     	;# 
  2174  0215                     	;# 
  2175  0215                     	;# 
  2176  0216                     	;# 
  2177  0216                     	;# 
  2178  0217                     	;# 
  2179  0217                     	;# 
  2180  0291                     	;# 
  2181  0291                     	;# 
  2182  0292                     	;# 
  2183  0293                     	;# 
  2184  0298                     	;# 
  2185  0298                     	;# 
  2186  0299                     	;# 
  2187  029A                     	;# 
  2188  0394                     	;# 
  2189  0395                     	;# 
  2190  0396                     	;# 
  2191  0FE4                     	;# 
  2192  0FE5                     	;# 
  2193  0FE6                     	;# 
  2194  0FE7                     	;# 
  2195  0FE8                     	;# 
  2196  0FE9                     	;# 
  2197  0FEA                     	;# 
  2198  0FEB                     	;# 
  2199  0FED                     	;# 
  2200  0FEE                     	;# 
  2201  0FEF                     	;# 
  2202                           
  2203                           	psect	idataBANK2
  2204  14F5                     __pidataBANK2:	
  2205                           
  2206                           ;initializer for Bq32k_Time_Init@F2027
  2207  14F5  3401               	retlw	1
  2208  14F6  3444               	retlw	68
  2209  14F7  3410               	retlw	16
  2210  14F8  3402               	retlw	2
  2211  14F9  3418               	retlw	24
  2212  14FA  3407               	retlw	7
  2213  14FB  3416               	retlw	22
  2214  14FC  3400               	retlw	0
  2215  14FD  3400               	retlw	0
  2216  14FE  3400               	retlw	0
  2217                           
  2218                           	psect	stringtext
  2219  1800                     __pstringtext:	
  2220  1800                     _Dis_TAB:	
  2221  1800  34D7               	retlw	215
  2222  1801  3450               	retlw	80
  2223  1802  34B5               	retlw	181
  2224  1803  34F1               	retlw	241
  2225  1804  3472               	retlw	114
  2226  1805  34E3               	retlw	227
  2227  1806  34E7               	retlw	231
  2228  1807  3451               	retlw	81
  2229  1808  34F7               	retlw	247
  2230  1809  34F3               	retlw	243
  2231  180A  3477               	retlw	119
  2232  180B  34E6               	retlw	230
  2233  180C  3487               	retlw	135
  2234  180D  34F4               	retlw	244
  2235  180E  34A7               	retlw	167
  2236  180F  3427               	retlw	39
  2237  1810  3457               	retlw	87
  2238  1811  3420               	retlw	32
  2239  1812  3420               	retlw	32
  2240  1813  3420               	retlw	32
  2241  1814  3420               	retlw	32
  2242  1815                     __end_of_Dis_TAB:	
  2243                           
  2244                           	psect	nvBANK1
  2245  00EE                     __pnvBANK1:	
  2246  00EE                     _eusartTxBufferRemaining:	
  2247  00EE                     	ds	1
  2248  00EF                     _timer0ReloadVal:	
  2249  00EF                     	ds	1
  2250  000B                     _INTCONbits	set	11
  2251  0011                     _PIR1bits	set	17
  2252  0015                     _TMR0	set	21
  2253  0067                     _RA7	set	103
  2254  0069                     _RB1	set	105
  2255  006B                     _RB3	set	107
  2256  006D                     _RB5	set	109
  2257  009D                     _ADCON0	set	157
  2258  009D                     _ADCON0bits	set	157
  2259  009E                     _ADCON1	set	158
  2260  009C                     _ADRESH	set	156
  2261  009B                     _ADRESL	set	155
  2262  0095                     _OPTION_REG	set	149
  2263  0095                     _OPTION_REGbits	set	149
  2264  0099                     _OSCCON	set	153
  2265  009A                     _OSCSTAT	set	154
  2266  0091                     _PIE1bits	set	145
  2267  008C                     _TRISA	set	140
  2268  008D                     _TRISB	set	141
  2269  008E                     _TRISC	set	142
  2270  04B8                     _SWDTEN	set	1208
  2271  0469                     _TRISB1	set	1129
  2272  046B                     _TRISB3	set	1131
  2273  04B9                     _WDTPS0	set	1209
  2274  04BA                     _WDTPS1	set	1210
  2275  04BB                     _WDTPS2	set	1211
  2276  04BC                     _WDTPS3	set	1212
  2277  04BD                     _WDTPS4	set	1213
  2278  011D                     _APFCON	set	285
  2279  0117                     _FVRCON	set	279
  2280  0117                     _FVRCONbits	set	279
  2281  010C                     _LATA	set	268
  2282  010D                     _LATB	set	269
  2283  010E                     _LATC	set	270
  2284  0860                     _LATA0	set	2144
  2285  0861                     _LATA1	set	2145
  2286  0862                     _LATA2	set	2146
  2287  0863                     _LATA3	set	2147
  2288  0864                     _LATA4	set	2148
  2289  0865                     _LATA5	set	2149
  2290  0866                     _LATA6	set	2150
  2291  0868                     _LATB0	set	2152
  2292  0869                     _LATB1	set	2153
  2293  0870                     _LATC0	set	2160
  2294  0871                     _LATC1	set	2161
  2295  0872                     _LATC2	set	2162
  2296  018C                     _ANSELA	set	396
  2297  018D                     _ANSELB	set	397
  2298  018E                     _ANSELC	set	398
  2299  019F                     _BAUDCON	set	415
  2300  0192                     _PMADRH	set	402
  2301  0191                     _PMADRL	set	401
  2302  0195                     _PMCON1bits	set	405
  2303  0196                     _PMCON2	set	406
  2304  0194                     _PMDATH	set	404
  2305  0193                     _PMDATL	set	403
  2306  0199                     _RCREG	set	409
  2307  019D                     _RCSTA	set	413
  2308  019D                     _RCSTAbits	set	413
  2309  019C                     _SPBRGH	set	412
  2310  019B                     _SPBRGL	set	411
  2311  019A                     _TXREG	set	410
  2312  019E                     _TXSTA	set	414
  2313  0212                     _SSP1ADD	set	530
  2314  0215                     _SSP1CON1	set	533
  2315  0215                     _SSP1CON1bits	set	533
  2316  0214                     _SSP1STAT	set	532
  2317  0214                     _SSP1STATbits	set	532
  2318  0211                     _SSPBUF	set	529
  2319  020D                     _WPUB	set	525
  2320  0210                     _WPUE	set	528
  2321                           
  2322                           ; #config settings
  2323  0000                     
  2324                           	psect	cinit
  2325  0029                     start_initialization:	
  2326  0029                     __initialization:	
  2327                           
  2328                           ; Clear objects allocated to BANK0
  2329  0029  3064               	movlw	low __pbssBANK0
  2330  002A  0084               	movwf	4
  2331  002B  3000               	movlw	high __pbssBANK0
  2332  002C  0085               	movwf	5
  2333  002D  3007               	movlw	7
  2334  002E  3187  27F9  3180   	fcall	clear_ram0
  2335                           
  2336                           ; Clear objects allocated to BANK1
  2337  0031  30A0               	movlw	low __pbssBANK1
  2338  0032  0084               	movwf	4
  2339  0033  3000               	movlw	high __pbssBANK1
  2340  0034  0085               	movwf	5
  2341  0035  304E               	movlw	78
  2342  0036  3187  27F9  3180   	fcall	clear_ram0
  2343                           
  2344                           ; Clear objects allocated to BANK2
  2345  0039  3020               	movlw	low __pbssBANK2
  2346  003A  0084               	movwf	4
  2347  003B  3001               	movlw	high __pbssBANK2
  2348  003C  0085               	movwf	5
  2349  003D  3034               	movlw	52
  2350  003E  3187  27F9  3180   	fcall	clear_ram0
  2351                           
  2352                           ; Clear objects allocated to BANK3
  2353  0041  30A0               	movlw	low __pbssBANK3
  2354  0042  0084               	movwf	4
  2355  0043  3001               	movlw	high __pbssBANK3
  2356  0044  0085               	movwf	5
  2357  0045  3040               	movlw	64
  2358  0046  3187  27F9  3180   	fcall	clear_ram0
  2359                           
  2360                           ; Initialize objects allocated to BANK2
  2361  0049  30F5               	movlw	low __pidataBANK2
  2362  004A  0084               	movwf	4
  2363  004B  3094               	movlw	(high __pidataBANK2)| (0+128)
  2364  004C  0085               	movwf	5
  2365  004D  3054               	movlw	low __pdataBANK2
  2366  004E  0086               	movwf	6
  2367  004F  3001               	movlw	high __pdataBANK2
  2368  0050  0087               	movwf	7
  2369  0051  300A               	movlw	10
  2370  0052  3188  2000         	fcall	init_ram
  2371  0054                     end_of_initialization:	
  2372                           ;End of C runtime variable initialization code
  2373                           
  2374  0054                     __end_of__initialization:	
  2375  0054  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2376  0055  0020               	movlb	0
  2377  0056  3184  2C0B         	ljmp	_main	;jump to C main() function
  2378                           
  2379                           	psect	bssBANK0
  2380  0064                     __pbssBANK0:	
  2381  0064                     _Cur_Save_Index:	
  2382  0064                     	ds	2
  2383  0066                     _Record_flag:	
  2384  0066                     	ds	1
  2385  0067                     _Usart_Rx_Cnt:	
  2386  0067                     	ds	1
  2387  0068                     _temperature_decimal:	
  2388  0068                     	ds	1
  2389  0069                     _time_count:	
  2390  0069                     	ds	1
  2391  006A                     _uch_cr0:	
  2392  006A                     	ds	1
  2393                           
  2394                           	psect	bssBANK1
  2395  00A0                     __pbssBANK1:	
  2396  00A0                     Two_Display@F2132:	
  2397  00A0                     	ds	4
  2398  00A4                     _temperature_value:	
  2399  00A4                     	ds	4
  2400  00A8                     err_Display@F2135:	
  2401  00A8                     	ds	4
  2402  00AC                     TMR0_ISR@CountCallBack:	
  2403  00AC                     	ds	2
  2404  00AE                     _CH1_temperature:	
  2405  00AE                     	ds	2
  2406  00B0                     _CH2_temperature:	
  2407  00B0                     	ds	2
  2408  00B2                     _Cur_temperature:	
  2409  00B2                     	ds	2
  2410  00B4                     _temperature_int:	
  2411  00B4                     	ds	2
  2412  00B6                     _CH1_state:	
  2413  00B6                     	ds	1
  2414  00B7                     _CH2_state:	
  2415  00B7                     	ds	1
  2416  00B8                     _Cur_temperature_time_ch1:	
  2417  00B8                     	ds	1
  2418  00B9                     _Cur_temperature_time_ch2:	
  2419  00B9                     	ds	1
  2420  00BA                     _LongPressSec:	
  2421  00BA                     	ds	1
  2422  00BB                     _MAX31856Sec:	
  2423  00BB                     	ds	1
  2424  00BC                     _Set_time_cmd_flag:	
  2425  00BC                     	ds	1
  2426  00BD                     _Usart_Run_Flag:	
  2427  00BD                     	ds	1
  2428  00BE                     _eusartRxCount:	
  2429  00BE                     	ds	1
  2430  00BF                     _eusartRxHead:	
  2431  00BF                     	ds	1
  2432  00C0                     _eusartRxTail:	
  2433  00C0                     	ds	1
  2434  00C1                     _eusartTxHead:	
  2435  00C1                     	ds	1
  2436  00C2                     _eusartTxTail:	
  2437  00C2                     	ds	1
  2438  00C3                     _temperature_sign:	
  2439  00C3                     	ds	1
  2440  00C4                     _tmr_flag:	
  2441  00C4                     	ds	1
  2442  00C5                     _uch_cjth:	
  2443  00C5                     	ds	1
  2444  00C6                     _uch_cjtl:	
  2445  00C6                     	ds	1
  2446  00C7                     _uch_cr1:	
  2447  00C7                     	ds	1
  2448  00C8                     _uch_ltcbh:	
  2449  00C8                     	ds	1
  2450  00C9                     _uch_ltcbl:	
  2451  00C9                     	ds	1
  2452  00CA                     _uch_ltcbm:	
  2453  00CA                     	ds	1
  2454  00CB                     _uch_mask:	
  2455  00CB                     	ds	1
  2456  00CC                     _uch_sr:	
  2457  00CC                     	ds	1
  2458  00CD                     _uch_reg:	
  2459  00CD                     	ds	8
  2460  00D5                     _rtc_save_ch1:	
  2461  00D5                     	ds	7
  2462  00DC                     _rtc_save_ch2:	
  2463  00DC                     	ds	7
  2464  00E3                     _rtc_tm:	
  2465  00E3                     	ds	7
  2466  00EA                     _display_buff:	
  2467  00EA                     	ds	4
  2468                           
  2469                           	psect	bssBANK2
  2470  0120                     __pbssBANK2:	
  2471  0120                     _eusartRxBuffer:	
  2472  0120                     	ds	8
  2473  0128                     _eusartTxBuffer:	
  2474  0128                     	ds	8
  2475  0130                     time_Display@F2138:	
  2476  0130                     	ds	4
  2477  0134                     _Usart_Rx_Buff:	
  2478  0134                     	ds	32
  2479                           
  2480                           	psect	dataBANK2
  2481  0154                     __pdataBANK2:	
  2482  0154                     Bq32k_Time_Init@F2027:	
  2483  0154                     	ds	10
  2484                           
  2485                           	psect	bssBANK3
  2486  01A0                     __pbssBANK3:	
  2487  01A0                     _Flash_buff:	
  2488  01A0                     	ds	64
  2489                           
  2490                           	psect	clrtext
  2491  07F9                     clear_ram0:	
  2492                           ;	Called with FSR0 containing the base address, and
  2493                           ;	WREG with the size to clear
  2494                           
  2495  07F9  0064               	clrwdt	;clear the watchdog before getting into this loop
  2496  07FA                     clrloop0:	
  2497  07FA  0180               	clrf	0	;clear RAM location pointed to by FSR
  2498  07FB  3101               	addfsr 0,1
  2499  07FC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2500  07FD  2FFA               	goto	clrloop0	;have we reached the end yet?
  2501  07FE  3400               	retlw	0	;all done for this memory range, return
  2502                           
  2503                           	psect	inittext
  2504  0800                     init_ram:	
  2505  0800  00FE               	movwf	126
  2506  0801                     initloop:	
  2507  0801  0012               	moviw fsr0++
  2508  0802  001E               	movwi fsr1++
  2509  0803  0BFE               	decfsz	126,f
  2510  0804  2801               	goto	initloop
  2511  0805  3400               	retlw	0
  2512                           
  2513                           	psect	cstackBANK2
  2514  015E                     __pcstackBANK2:	
  2515  015E                     main@data_temp:	
  2516                           
  2517                           ; 2 bytes @ 0x0
  2518  015E                     	ds	2
  2519  0160                     main@i:	
  2520                           
  2521                           ; 1 bytes @ 0x2
  2522  0160                     	ds	1
  2523  0161                     main@bat_data:	
  2524                           
  2525                           ; 2 bytes @ 0x3
  2526  0161                     	ds	2
  2527                           
  2528                           	psect	cstackCOMMON
  2529  0070                     __pcstackCOMMON:	
  2530  0070                     ?_OSCILLATOR_Initialize:	
  2531  0070                     ?_SPI_Initialize:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0070                     ?_EUSART_Initialize:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     ?_ADC_Initialize:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0070                     ?_FVR_Initialize:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0070                     ?_TMR0_Initialize:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     ?_RxFrameCheck:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     ?_TMR0_CallBack:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ??_TMR0_CallBack:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ?_Bq32k_Time_Init:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     ?_SendCmd_1621:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ?_Serach_Flash_Head:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ?_temperature_process:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ?_Key_Process:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ?_Save_process:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0070                     ?_Sleep_process:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ?_Calculate_Time:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ?_Tc_Display:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ?_err_Display:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ?_Two_Display:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ?_time_Display:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ?_Bq32k_Rtc_Read_Time:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ?_Set_start_flag:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ?_Write_Flash_head:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_Save_Write_time:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ?_Set_finish_flag:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0070                     ?_Write_Flash_finish:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_bcd2bin:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ?_bin2bcd:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_Step_control:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ?_Set_time_from_Com:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_Read_time_to_Com:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?_PIN_MANAGER_Initialize:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_SYSTEM_Initialize:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ?_SPI_Exchange8bit:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_EUSART_Write:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_EUSART_Transmit_ISR:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ??_EUSART_Transmit_ISR:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_EUSART_Receive_ISR:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_TMR0_ISR:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_INTERRUPT_InterruptManager:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_main:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ?_maxim_31856_read_register:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_maxim_start_conversion:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ?_maxim_clear_fault_status:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_tc_temperature_trans:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?_one_temperature_trans:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?_temperature_display:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     ?_I2C_Start:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0070                     ?_I2C_Send_Byte:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0070                     ?_I2C_Receive_Byte:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0070                     ?_I2C_Stop:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0070                     ?_Key_Scan:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0070                     ?_Bq32k_Rtc_Write_Time:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0070                     ?_Com_Process:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0070                     RxFrameCheck@frame_len:	
  2694                           ; 2 bytes @ 0x0
  2695                           
  2696                           
  2697                           ; 1 bytes @ 0x0
  2698  0070                     	ds	1
  2699  0071                     ??_RxFrameCheck:	
  2700  0071                     ??_TMR0_ISR:	
  2701                           ; 1 bytes @ 0x1
  2702                           
  2703                           
  2704                           ; 1 bytes @ 0x1
  2705  0071                     	ds	4
  2706  0075                     RxFrameCheck@tmp_crc:	
  2707                           
  2708                           ; 2 bytes @ 0x5
  2709  0075                     	ds	2
  2710  0077                     RxFrameCheck@i:	
  2711                           
  2712                           ; 1 bytes @ 0x7
  2713  0077                     	ds	1
  2714  0078                     RxFrameCheck@rx_arr:	
  2715                           
  2716                           ; 1 bytes @ 0x8
  2717  0078                     	ds	1
  2718  0079                     RxFrameCheck@remainder:	
  2719                           
  2720                           ; 2 bytes @ 0x9
  2721  0079                     	ds	2
  2722  007B                     ??_EUSART_Receive_ISR:	
  2723                           
  2724                           ; 1 bytes @ 0xB
  2725  007B                     	ds	2
  2726  007D                     EUSART_Receive_ISR@rx_tmp:	
  2727                           
  2728                           ; 1 bytes @ 0xD
  2729  007D                     	ds	1
  2730                           
  2731                           	psect	cstackBANK0
  2732  0020                     __pcstackBANK0:	
  2733  0020                     ??_INTERRUPT_InterruptManager:	
  2734                           
  2735                           ; 1 bytes @ 0x0
  2736  0020                     	ds	1
  2737  0021                     ??_OSCILLATOR_Initialize:	
  2738  0021                     ??_SPI_Initialize:	
  2739                           ; 1 bytes @ 0x1
  2740                           
  2741  0021                     ??_EUSART_Initialize:	
  2742                           ; 1 bytes @ 0x1
  2743                           
  2744  0021                     ??_ADC_Initialize:	
  2745                           ; 1 bytes @ 0x1
  2746                           
  2747  0021                     ??_FVR_Initialize:	
  2748                           ; 1 bytes @ 0x1
  2749                           
  2750  0021                     ??_TMR0_Initialize:	
  2751                           ; 1 bytes @ 0x1
  2752                           
  2753  0021                     ?_FLASH_EraseBlock:	
  2754                           ; 1 bytes @ 0x1
  2755                           
  2756  0021                     ?_memset:	
  2757                           ; 1 bytes @ 0x1
  2758                           
  2759  0021                     ??_Set_start_flag:	
  2760                           ; 1 bytes @ 0x1
  2761                           
  2762  0021                     ??_Set_finish_flag:	
  2763                           ; 1 bytes @ 0x1
  2764                           
  2765  0021                     ??_Step_control:	
  2766                           ; 1 bytes @ 0x1
  2767                           
  2768  0021                     ??_PIN_MANAGER_Initialize:	
  2769                           ; 1 bytes @ 0x1
  2770                           
  2771  0021                     ??_SPI_Exchange8bit:	
  2772                           ; 1 bytes @ 0x1
  2773                           
  2774  0021                     ??_EUSART_Write:	
  2775                           ; 1 bytes @ 0x1
  2776                           
  2777  0021                     ?_FLASH_WriteWord:	
  2778                           ; 1 bytes @ 0x1
  2779                           
  2780  0021                     ?_SendBit_1621:	
  2781                           ; 1 bytes @ 0x1
  2782                           
  2783  0021                     ?_SendDataBit_1621:	
  2784                           ; 1 bytes @ 0x1
  2785                           
  2786  0021                     ??_I2C_Start:	
  2787                           ; 1 bytes @ 0x1
  2788                           
  2789  0021                     ??_I2C_Send_Byte:	
  2790                           ; 1 bytes @ 0x1
  2791                           
  2792  0021                     ??_I2C_Receive_Byte:	
  2793                           ; 1 bytes @ 0x1
  2794                           
  2795  0021                     ??_I2C_Stop:	
  2796                           ; 1 bytes @ 0x1
  2797                           
  2798  0021                     ??_Key_Scan:	
  2799                           ; 1 bytes @ 0x1
  2800                           
  2801  0021                     ?___bmul:	
  2802                           ; 1 bytes @ 0x1
  2803                           
  2804  0021                     ?_CRC_cal:	
  2805                           ; 1 bytes @ 0x1
  2806                           
  2807  0021                     ?_FLASH_ReadWord:	
  2808                           ; 2 bytes @ 0x1
  2809                           
  2810  0021                     ?_ADC_GetConversion:	
  2811                           ; 2 bytes @ 0x1
  2812                           
  2813  0021                     ?___wmul:	
  2814                           ; 2 bytes @ 0x1
  2815                           
  2816  0021                     ?___awdiv:	
  2817                           ; 2 bytes @ 0x1
  2818                           
  2819  0021                     ?___awmod:	
  2820                           ; 2 bytes @ 0x1
  2821                           
  2822  0021                     ?___lwmod:	
  2823                           ; 2 bytes @ 0x1
  2824                           
  2825  0021                     SPI_Exchange8bit@data:	
  2826                           ; 2 bytes @ 0x1
  2827                           
  2828  0021                     EUSART_Write@txData:	
  2829                           ; 1 bytes @ 0x1
  2830                           
  2831  0021                     SendBit_1621@cnt:	
  2832                           ; 1 bytes @ 0x1
  2833                           
  2834  0021                     SendDataBit_1621@cnt:	
  2835                           ; 1 bytes @ 0x1
  2836                           
  2837  0021                     CRC_cal@frame_len:	
  2838                           ; 1 bytes @ 0x1
  2839                           
  2840  0021                     ___bmul@multiplicand:	
  2841                           ; 1 bytes @ 0x1
  2842                           
  2843  0021                     FLASH_ReadWord@flashAddr:	
  2844                           ; 1 bytes @ 0x1
  2845                           
  2846  0021                     FLASH_WriteWord@flashAddr:	
  2847                           ; 2 bytes @ 0x1
  2848                           
  2849  0021                     FLASH_EraseBlock@startAddr:	
  2850                           ; 2 bytes @ 0x1
  2851                           
  2852  0021                     ___wmul@multiplier:	
  2853                           ; 2 bytes @ 0x1
  2854                           
  2855  0021                     ___awdiv@divisor:	
  2856                           ; 2 bytes @ 0x1
  2857                           
  2858  0021                     ___awmod@divisor:	
  2859                           ; 2 bytes @ 0x1
  2860                           
  2861  0021                     ___lwmod@divisor:	
  2862                           ; 2 bytes @ 0x1
  2863                           
  2864  0021                     memset@c:	
  2865                           ; 2 bytes @ 0x1
  2866                           
  2867                           
  2868                           ; 2 bytes @ 0x1
  2869  0021                     	ds	1
  2870  0022                     ??_Sleep_process:	
  2871  0022                     ??_SYSTEM_Initialize:	
  2872                           ; 1 bytes @ 0x2
  2873                           
  2874  0022                     ?_SPI_Exchange8bitBuffer:	
  2875                           ; 1 bytes @ 0x2
  2876                           
  2877  0022                     ?_maxim_31856_write_register:	
  2878                           ; 1 bytes @ 0x2
  2879                           
  2880  0022                     ??_maxim_31856_read_register:	
  2881                           ; 1 bytes @ 0x2
  2882                           
  2883  0022                     ??_SendBit_1621:	
  2884                           ; 1 bytes @ 0x2
  2885                           
  2886  0022                     ??_SendDataBit_1621:	
  2887                           ; 1 bytes @ 0x2
  2888                           
  2889  0022                     ??___bmul:	
  2890                           ; 1 bytes @ 0x2
  2891                           
  2892  0022                     SPI_Exchange8bitBuffer@bufLen:	
  2893                           ; 1 bytes @ 0x2
  2894                           
  2895  0022                     maxim_31856_write_register@uch_register_value:	
  2896                           ; 1 bytes @ 0x2
  2897                           
  2898  0022                     I2C_Send_Byte@Data:	
  2899                           ; 1 bytes @ 0x2
  2900                           
  2901  0022                     I2C_Receive_Byte@Data:	
  2902                           ; 1 bytes @ 0x2
  2903                           
  2904                           
  2905                           ; 1 bytes @ 0x2
  2906  0022                     	ds	1
  2907  0023                     ??_FLASH_EraseBlock:	
  2908  0023                     ??_CRC_cal:	
  2909                           ; 1 bytes @ 0x3
  2910                           
  2911  0023                     ??_FLASH_ReadWord:	
  2912                           ; 1 bytes @ 0x3
  2913                           
  2914  0023                     ??_ADC_GetConversion:	
  2915                           ; 1 bytes @ 0x3
  2916                           
  2917  0023                     ??_maxim_31856_write_register:	
  2918                           ; 1 bytes @ 0x3
  2919                           
  2920  0023                     SPI_Exchange8bitBuffer@dataOut:	
  2921                           ; 1 bytes @ 0x3
  2922                           
  2923  0023                     FLASH_ReadWord@GIEBitValue:	
  2924                           ; 1 bytes @ 0x3
  2925                           
  2926  0023                     FLASH_EraseBlock@GIEBitValue:	
  2927                           ; 1 bytes @ 0x3
  2928                           
  2929  0023                     maxim_31856_write_register@uch_register_address:	
  2930                           ; 1 bytes @ 0x3
  2931                           
  2932  0023                     maxim_31856_read_register@uch_register_address:	
  2933                           ; 1 bytes @ 0x3
  2934                           
  2935  0023                     SendBit_1621@data:	
  2936                           ; 1 bytes @ 0x3
  2937                           
  2938  0023                     SendDataBit_1621@data:	
  2939                           ; 1 bytes @ 0x3
  2940                           
  2941  0023                     I2C_Send_Byte@i:	
  2942                           ; 1 bytes @ 0x3
  2943                           
  2944  0023                     I2C_Receive_Byte@i:	
  2945                           ; 1 bytes @ 0x3
  2946                           
  2947  0023                     Key_Scan@Key_val:	
  2948                           ; 1 bytes @ 0x3
  2949                           
  2950  0023                     ___bmul@product:	
  2951                           ; 1 bytes @ 0x3
  2952                           
  2953  0023                     FLASH_WriteWord@word:	
  2954                           ; 1 bytes @ 0x3
  2955                           
  2956  0023                     ___wmul@multiplicand:	
  2957                           ; 2 bytes @ 0x3
  2958                           
  2959  0023                     ___awdiv@dividend:	
  2960                           ; 2 bytes @ 0x3
  2961                           
  2962  0023                     ___awmod@dividend:	
  2963                           ; 2 bytes @ 0x3
  2964                           
  2965  0023                     ___lwmod@dividend:	
  2966                           ; 2 bytes @ 0x3
  2967                           
  2968  0023                     memset@n:	
  2969                           ; 2 bytes @ 0x3
  2970                           
  2971                           
  2972                           ; 2 bytes @ 0x3
  2973  0023                     	ds	1
  2974  0024                     ??_SPI_Exchange8bitBuffer:	
  2975  0024                     ?_I2C_Read_Buffer:	
  2976                           ; 1 bytes @ 0x4
  2977                           
  2978  0024                     ?_I2C_Send_Buffer:	
  2979                           ; 1 bytes @ 0x4
  2980                           
  2981  0024                     ADC_GetConversion@channel:	
  2982                           ; 1 bytes @ 0x4
  2983                           
  2984  0024                     maxim_31856_read_register@uch_register_data:	
  2985                           ; 1 bytes @ 0x4
  2986                           
  2987  0024                     SendBit_1621@i:	
  2988                           ; 1 bytes @ 0x4
  2989                           
  2990  0024                     SendDataBit_1621@i:	
  2991                           ; 1 bytes @ 0x4
  2992                           
  2993  0024                     I2C_Read_Buffer@buff:	
  2994                           ; 1 bytes @ 0x4
  2995                           
  2996  0024                     I2C_Send_Buffer@buff:	
  2997                           ; 1 bytes @ 0x4
  2998                           
  2999  0024                     ___bmul@multiplier:	
  3000                           ; 1 bytes @ 0x4
  3001                           
  3002                           
  3003                           ; 1 bytes @ 0x4
  3004  0024                     	ds	1
  3005  0025                     ??_SendCmd_1621:	
  3006  0025                     ?_WriteAll_1621:	
  3007                           ; 1 bytes @ 0x5
  3008                           
  3009  0025                     ??_memset:	
  3010                           ; 1 bytes @ 0x5
  3011                           
  3012  0025                     ??_bcd2bin:	
  3013                           ; 1 bytes @ 0x5
  3014                           
  3015  0025                     ??_FLASH_WriteWord:	
  3016                           ; 1 bytes @ 0x5
  3017                           
  3018  0025                     ??_maxim_start_conversion:	
  3019                           ; 1 bytes @ 0x5
  3020                           
  3021  0025                     ??_maxim_clear_fault_status:	
  3022                           ; 1 bytes @ 0x5
  3023                           
  3024  0025                     ??___wmul:	
  3025                           ; 1 bytes @ 0x5
  3026                           
  3027  0025                     ??___awdiv:	
  3028                           ; 1 bytes @ 0x5
  3029                           
  3030  0025                     ??___awmod:	
  3031                           ; 1 bytes @ 0x5
  3032                           
  3033  0025                     ??___lwmod:	
  3034                           ; 1 bytes @ 0x5
  3035                           
  3036  0025                     FLASH_WriteWord@GIEBitValue:	
  3037                           ; 1 bytes @ 0x5
  3038                           
  3039  0025                     I2C_Read_Buffer@Length:	
  3040                           ; 1 bytes @ 0x5
  3041                           
  3042  0025                     I2C_Send_Buffer@Length:	
  3043                           ; 1 bytes @ 0x5
  3044                           
  3045  0025                     WriteAll_1621@p:	
  3046                           ; 1 bytes @ 0x5
  3047                           
  3048  0025                     ___wmul@product:	
  3049                           ; 2 bytes @ 0x5
  3050                           
  3051                           
  3052                           ; 2 bytes @ 0x5
  3053  0025                     	ds	1
  3054  0026                     ??_Serach_Flash_Head:	
  3055  0026                     ?_Save_Write_word:	
  3056                           ; 1 bytes @ 0x6
  3057                           
  3058  0026                     ??_Write_Flash_head:	
  3059                           ; 1 bytes @ 0x6
  3060                           
  3061  0026                     ??_Write_Flash_finish:	
  3062                           ; 1 bytes @ 0x6
  3063                           
  3064  0026                     ??_I2C_Read_Buffer:	
  3065                           ; 1 bytes @ 0x6
  3066                           
  3067  0026                     ??_I2C_Send_Buffer:	
  3068                           ; 1 bytes @ 0x6
  3069                           
  3070  0026                     maxim_start_conversion@uch_conversion_mode:	
  3071                           ; 1 bytes @ 0x6
  3072                           
  3073  0026                     SendCmd_1621@command:	
  3074                           ; 1 bytes @ 0x6
  3075                           
  3076  0026                     ___awdiv@counter:	
  3077                           ; 1 bytes @ 0x6
  3078                           
  3079  0026                     ___awmod@counter:	
  3080                           ; 1 bytes @ 0x6
  3081                           
  3082  0026                     ___lwmod@counter:	
  3083                           ; 1 bytes @ 0x6
  3084                           
  3085  0026                     memset@p1:	
  3086                           ; 1 bytes @ 0x6
  3087                           
  3088  0026                     Save_Write_word@data:	
  3089                           ; 1 bytes @ 0x6
  3090                           
  3091                           
  3092                           ; 2 bytes @ 0x6
  3093  0026                     	ds	1
  3094  0027                     ?___lwdiv:	
  3095  0027                     SPI_Exchange8bitBuffer@dataIn:	
  3096                           ; 2 bytes @ 0x7
  3097                           
  3098  0027                     WriteAll_1621@cnt:	
  3099                           ; 1 bytes @ 0x7
  3100                           
  3101  0027                     I2C_Read_Buffer@ADD:	
  3102                           ; 1 bytes @ 0x7
  3103                           
  3104  0027                     Serach_Flash_Head@count:	
  3105                           ; 1 bytes @ 0x7
  3106                           
  3107  0027                     CRC_cal@rx_arr:	
  3108                           ; 1 bytes @ 0x7
  3109                           
  3110  0027                     ___awdiv@sign:	
  3111                           ; 1 bytes @ 0x7
  3112                           
  3113  0027                     ___awmod@sign:	
  3114                           ; 1 bytes @ 0x7
  3115                           
  3116  0027                     memset@p:	
  3117                           ; 1 bytes @ 0x7
  3118                           
  3119  0027                     ___lwdiv@divisor:	
  3120                           ; 1 bytes @ 0x7
  3121                           
  3122                           
  3123                           ; 2 bytes @ 0x7
  3124  0027                     	ds	1
  3125  0028                     ??_WriteAll_1621:	
  3126  0028                     ??_Save_Write_word:	
  3127                           ; 1 bytes @ 0x8
  3128                           
  3129  0028                     SPI_Exchange8bitBuffer@bytesWritten:	
  3130                           ; 1 bytes @ 0x8
  3131                           
  3132  0028                     I2C_Read_Buffer@Flag:	
  3133                           ; 1 bytes @ 0x8
  3134                           
  3135  0028                     I2C_Send_Buffer@ADD:	
  3136                           ; 1 bytes @ 0x8
  3137                           
  3138  0028                     bcd2bin@val:	
  3139                           ; 1 bytes @ 0x8
  3140                           
  3141  0028                     CRC_cal@i:	
  3142                           ; 1 bytes @ 0x8
  3143                           
  3144  0028                     Serach_Flash_Head@data:	
  3145                           ; 1 bytes @ 0x8
  3146                           
  3147  0028                     ___awdiv@quotient:	
  3148                           ; 2 bytes @ 0x8
  3149                           
  3150                           
  3151                           ; 2 bytes @ 0x8
  3152  0028                     	ds	1
  3153  0029                     ??_Bq32k_Rtc_Read_Time:	
  3154  0029                     ?_maxim_31856_read_nregisters:	
  3155                           ; 1 bytes @ 0x9
  3156                           
  3157  0029                     maxim_31856_read_nregisters@uch_buff:	
  3158                           ; 1 bytes @ 0x9
  3159                           
  3160  0029                     WriteAll_1621@addr:	
  3161                           ; 1 bytes @ 0x9
  3162                           
  3163  0029                     I2C_Send_Buffer@i:	
  3164                           ; 1 bytes @ 0x9
  3165                           
  3166  0029                     CRC_cal@remainder:	
  3167                           ; 1 bytes @ 0x9
  3168                           
  3169  0029                     ___lwdiv@dividend:	
  3170                           ; 2 bytes @ 0x9
  3171                           
  3172                           
  3173                           ; 2 bytes @ 0x9
  3174  0029                     	ds	1
  3175  002A                     ??_bin2bcd:	
  3176  002A                     maxim_31856_read_nregisters@uch_nBytes:	
  3177                           ; 1 bytes @ 0xA
  3178                           
  3179  002A                     WriteAll_1621@i:	
  3180                           ; 1 bytes @ 0xA
  3181                           
  3182  002A                     I2C_Send_Buffer@Flag:	
  3183                           ; 1 bytes @ 0xA
  3184                           
  3185  002A                     Serach_Flash_Head@i:	
  3186                           ; 1 bytes @ 0xA
  3187                           
  3188                           
  3189                           ; 2 bytes @ 0xA
  3190  002A                     	ds	1
  3191  002B                     ??_Bq32k_Time_Init:	
  3192  002B                     ??_err_Display:	
  3193                           ; 1 bytes @ 0xB
  3194                           
  3195  002B                     ??_Two_Display:	
  3196                           ; 1 bytes @ 0xB
  3197                           
  3198  002B                     ??_Read_time_to_Com:	
  3199                           ; 1 bytes @ 0xB
  3200                           
  3201  002B                     ??_maxim_31856_read_nregisters:	
  3202                           ; 1 bytes @ 0xB
  3203                           
  3204  002B                     ??___lwdiv:	
  3205                           ; 1 bytes @ 0xB
  3206                           
  3207  002B                     Bq32k_Rtc_Read_Time@temp:	
  3208                           ; 1 bytes @ 0xB
  3209                           
  3210                           
  3211                           ; 10 bytes @ 0xB
  3212  002B                     	ds	1
  3213  002C                     ___lwdiv@counter:	
  3214  002C                     Two_Display@num:	
  3215                           ; 1 bytes @ 0xC
  3216                           
  3217  002C                     err_Display@num:	
  3218                           ; 4 bytes @ 0xC
  3219                           
  3220  002C                     Read_time_to_Com@tmp_buf:	
  3221                           ; 4 bytes @ 0xC
  3222                           
  3223                           
  3224                           ; 16 bytes @ 0xC
  3225  002C                     	ds	1
  3226  002D                     maxim_31856_read_nregisters@uch_register_address:	
  3227  002D                     ___lwdiv@quotient:	
  3228                           ; 1 bytes @ 0xD
  3229                           
  3230  002D                     Bq32k_Time_Init@temp:	
  3231                           ; 2 bytes @ 0xD
  3232                           
  3233                           
  3234                           ; 10 bytes @ 0xD
  3235  002D                     	ds	1
  3236  002E                     ??_one_temperature_trans:	
  3237                           
  3238                           ; 1 bytes @ 0xE
  3239  002E                     	ds	1
  3240  002F                     ??_Tc_Display:	
  3241                           
  3242                           ; 1 bytes @ 0xF
  3243  002F                     	ds	1
  3244  0030                     Tc_Display@count:	
  3245  0030                     Two_Display@number:	
  3246                           ; 1 bytes @ 0x10
  3247                           
  3248                           
  3249                           ; 1 bytes @ 0x10
  3250  0030                     	ds	1
  3251  0031                     bin2bcd@val:	
  3252  0031                     Tc_Display@data:	
  3253                           ; 1 bytes @ 0x11
  3254                           
  3255                           
  3256                           ; 2 bytes @ 0x11
  3257  0031                     	ds	1
  3258  0032                     ??_Bq32k_Rtc_Write_Time:	
  3259                           
  3260                           ; 1 bytes @ 0x12
  3261  0032                     	ds	2
  3262  0034                     Bq32k_Rtc_Write_Time@temp:	
  3263                           
  3264                           ; 10 bytes @ 0x14
  3265  0034                     	ds	1
  3266  0035                     Bq32k_Rtc_Read_Time@p:	
  3267                           
  3268                           ; 1 bytes @ 0x15
  3269  0035                     	ds	1
  3270  0036                     ??_time_Display:	
  3271  0036                     ??_Save_Write_time:	
  3272                           ; 1 bytes @ 0x16
  3273                           
  3274                           
  3275                           ; 1 bytes @ 0x16
  3276  0036                     	ds	2
  3277  0038                     ??_Calculate_Time:	
  3278                           
  3279                           ; 1 bytes @ 0x18
  3280  0038                     	ds	1
  3281  0039                     time_Display@num:	
  3282                           
  3283                           ; 4 bytes @ 0x19
  3284  0039                     	ds	3
  3285  003C                     Read_time_to_Com@crc_tmp:	
  3286                           
  3287                           ; 2 bytes @ 0x1C
  3288  003C                     	ds	2
  3289  003E                     Bq32k_Rtc_Write_Time@p:	
  3290  003E                     Read_time_to_Com@i:	
  3291                           ; 1 bytes @ 0x1E
  3292                           
  3293                           
  3294                           ; 1 bytes @ 0x1E
  3295  003E                     	ds	1
  3296  003F                     ??_Set_time_from_Com:	
  3297                           
  3298                           ; 1 bytes @ 0x1F
  3299  003F                     	ds	1
  3300  0040                     ??_Com_Process:	
  3301                           
  3302                           ; 1 bytes @ 0x20
  3303  0040                     	ds	2
  3304  0042                     Calculate_Time@temp:	
  3305                           
  3306                           ; 4 bytes @ 0x22
  3307  0042                     	ds	4
  3308  0046                     Calculate_Time@temp1:	
  3309                           
  3310                           ; 4 bytes @ 0x26
  3311  0046                     	ds	4
  3312  004A                     Calculate_Time@temp2:	
  3313                           
  3314                           ; 4 bytes @ 0x2A
  3315  004A                     	ds	4
  3316  004E                     ??_Save_process:	
  3317  004E                     ??_tc_temperature_trans:	
  3318                           ; 1 bytes @ 0x2E
  3319                           
  3320                           
  3321                           ; 1 bytes @ 0x2E
  3322  004E                     	ds	2
  3323  0050                     Save_process@var_time:	
  3324                           
  3325                           ; 2 bytes @ 0x30
  3326  0050                     	ds	2
  3327  0052                     tc_temperature_trans@temperature_back:	
  3328                           
  3329                           ; 2 bytes @ 0x32
  3330  0052                     	ds	2
  3331  0054                     tc_temperature_trans@temperature_absolute:	
  3332                           
  3333                           ; 2 bytes @ 0x34
  3334  0054                     	ds	2
  3335  0056                     tc_temperature_trans@var_time:	
  3336                           
  3337                           ; 2 bytes @ 0x36
  3338  0056                     	ds	2
  3339  0058                     tc_temperature_trans@temperature_temp:	
  3340                           
  3341                           ; 2 bytes @ 0x38
  3342  0058                     	ds	2
  3343  005A                     ??_temperature_display:	
  3344                           
  3345                           ; 1 bytes @ 0x3A
  3346  005A                     	ds	1
  3347  005B                     ??_temperature_process:	
  3348  005B                     ??_Key_Process:	
  3349                           ; 1 bytes @ 0x3B
  3350                           
  3351                           
  3352                           ; 1 bytes @ 0x3B
  3353  005B                     	ds	1
  3354  005C                     Key_Process@data_temp:	
  3355                           
  3356                           ; 2 bytes @ 0x3C
  3357  005C                     	ds	2
  3358  005E                     Key_Process@gKeyValue:	
  3359                           
  3360                           ; 1 bytes @ 0x3E
  3361  005E                     	ds	1
  3362  005F                     Key_Process@i:	
  3363                           
  3364                           ; 2 bytes @ 0x3F
  3365  005F                     	ds	2
  3366  0061                     ??_main:	
  3367                           
  3368                           ; 1 bytes @ 0x41
  3369  0061                     	ds	3
  3370                           
  3371                           	psect	maintext
  3372  040B                     __pmaintext:	
  3373 ;;
  3374 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3375 ;;
  3376 ;; *************** function _main *****************
  3377 ;; Defined at:
  3378 ;;		line 67 in file "main.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;		None
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;  bat_data        2    3[BANK2 ] unsigned int 
  3383 ;;  data_temp       2    0[BANK2 ] unsigned int 
  3384 ;;  i               1    2[BANK2 ] unsigned char 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : B1F/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3395 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  3396 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3397 ;;      Totals:         0       3       0       5       0       0       0       0       0       0       0       0       
      +0       0
  3398 ;;Total ram usage:        8 bytes
  3399 ;; Hardware stack levels required when called:   12
  3400 ;; This function calls:
  3401 ;;		_ADC_GetConversion
  3402 ;;		_Bq32k_Time_Init
  3403 ;;		_Com_Process
  3404 ;;		_Key_Process
  3405 ;;		_SYSTEM_Initialize
  3406 ;;		_Save_process
  3407 ;;		_SendCmd_1621
  3408 ;;		_Serach_Flash_Head
  3409 ;;		_Sleep_process
  3410 ;;		_WriteAll_1621
  3411 ;;		_temperature_process
  3412 ;; This function is called by:
  3413 ;;		Startup code after reset
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _main
  3419  040B                     _main:	
  3420                           
  3421                           ;main.c: 69: unsigned char i=0;
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3425  040B  0022               	movlb	2	; select bank2
  3426  040C  01E0               	clrf	main@i^(0+256)
  3427                           
  3428                           ;main.c: 71: unsigned int bat_data = 0;
  3429  040D  01E1               	clrf	main@bat_data^(0+256)
  3430  040E  01E2               	clrf	(main@bat_data+1)^(0+256)
  3431                           
  3432                           ;main.c: 72: unsigned int data_temp = 0;
  3433  040F  01DE               	clrf	main@data_temp^(0+256)
  3434  0410  01DF               	clrf	(main@data_temp+1)^(0+256)
  3435                           
  3436                           ;main.c: 73: SWDTEN = 0;
  3437  0411  0021               	movlb	1	; select bank1
  3438  0412  1017               	bcf	23,0	;volatile
  3439                           
  3440                           ;main.c: 74: WDTPS0 = 1;
  3441  0413  1497               	bsf	23,1	;volatile
  3442                           
  3443                           ;main.c: 75: WDTPS1 = 0;
  3444  0414  1117               	bcf	23,2	;volatile
  3445                           
  3446                           ;main.c: 76: WDTPS2 = 0;
  3447  0415  1197               	bcf	23,3	;volatile
  3448                           
  3449                           ;main.c: 77: WDTPS3 = 1;
  3450  0416  1617               	bsf	23,4	;volatile
  3451                           
  3452                           ;main.c: 78: WDTPS4 = 0;
  3453  0417  1297               	bcf	23,5	;volatile
  3454  0418  0064               	clrwdt	;# 
  3455                           
  3456                           ;main.c: 81: SYSTEM_Initialize();
  3457  0419  3195  2597  3184   	fcall	_SYSTEM_Initialize
  3458                           
  3459                           ;main.c: 84: _delay((unsigned long)((3000)*(4000000/4000.0)));
  3460  041C  3010               	movlw	16
  3461  041D  0020               	movlb	0	; select bank0
  3462  041E  00E3               	movwf	??_main+2
  3463  041F  3039               	movlw	57
  3464  0420  00E2               	movwf	??_main+1
  3465  0421  301B               	movlw	27
  3466  0422  00E1               	movwf	??_main
  3467  0423                     u6067:	
  3468  0423  0BE1               	decfsz	??_main,f
  3469  0424  2C23               	goto	u6067
  3470  0425  0BE2               	decfsz	??_main+1,f
  3471  0426  2C23               	goto	u6067
  3472  0427  0BE3               	decfsz	??_main+2,f
  3473  0428  2C23               	goto	u6067
  3474  0429  3200               	nop2
  3475                           
  3476                           ;main.c: 85: if(RB5 == 0 ) do { LATA2 = 1; } while(0);
  3477  042A  0020               	movlb	0	; select bank0
  3478  042B  1A8D               	btfsc	13,5	;volatile
  3479  042C  2C30               	goto	l455
  3480  042D  0022               	movlb	2	; select bank2
  3481  042E  150C               	bsf	12,2	;volatile
  3482  042F  2C32               	goto	l457
  3483  0430                     l455:	
  3484                           ;main.c: 86: else do { LATA2 = 0; } while(0);
  3485                           
  3486  0430  0022               	movlb	2	; select bank2
  3487  0431  110C               	bcf	12,2	;volatile
  3488  0432                     l457:	
  3489                           ;main.c: 87: do { LATA3 = 0; } while(0);
  3490                           
  3491  0432  118C               	bcf	12,3	;volatile
  3492                           
  3493                           ;main.c: 90: bat_data = 0;
  3494  0433  01E1               	clrf	main@bat_data^(0+256)
  3495  0434  01E2               	clrf	(main@bat_data+1)^(0+256)
  3496                           
  3497                           ;main.c: 91: for(i=0;i<16;i++)
  3498  0435  01E0               	clrf	main@i^(0+256)
  3499  0436  3010               	movlw	16
  3500  0437  0260               	subwf	main@i^(0+256),w
  3501  0438  1803               	btfsc	3,0
  3502  0439  2C53               	goto	l6356
  3503  043A                     l6350:	
  3504                           
  3505                           ;main.c: 92: {
  3506                           ;main.c: 93: bat_data = bat_data + ADC_GetConversion(ADC);
  3507  043A  300B               	movlw	11
  3508  043B  3196  26BA  3184   	fcall	_ADC_GetConversion
  3509  043E  0022               	movlb	2	; select bank2
  3510  043F  0861               	movf	main@bat_data^(0+256),w
  3511  0440  0020               	movlb	0	; select bank0
  3512  0441  0721               	addwf	?_ADC_GetConversion,w
  3513  0442  0022               	movlb	2	; select bank2
  3514  0443  00E1               	movwf	main@bat_data^(0+256)
  3515  0444  0862               	movf	(main@bat_data+1)^(0+256),w
  3516  0445  0020               	movlb	0	; select bank0
  3517  0446  3D22               	addwfc	?_ADC_GetConversion+1,w
  3518  0447  0022               	movlb	2	; select bank2
  3519  0448  00E2               	movwf	(main@bat_data+1)^(0+256)
  3520  0449  3001               	movlw	1
  3521  044A  0020               	movlb	0	; select bank0
  3522  044B  00E1               	movwf	??_main
  3523  044C  0861               	movf	??_main,w
  3524  044D  0022               	movlb	2	; select bank2
  3525  044E  07E0               	addwf	main@i^(0+256),f
  3526  044F  3010               	movlw	16
  3527  0450  0260               	subwf	main@i^(0+256),w
  3528  0451  1C03               	skipc
  3529  0452  2C3A               	goto	l6350
  3530  0453                     l6356:	
  3531                           
  3532                           ;main.c: 94: }
  3533                           ;main.c: 95: bat_data = bat_data>>4;
  3534  0453  0E61               	swapf	main@bat_data^(0+256),w
  3535  0454  390F               	andlw	15
  3536  0455  00E1               	movwf	main@bat_data^(0+256)
  3537  0456  0E62               	swapf	(main@bat_data+1)^(0+256),w
  3538  0457  39F0               	andlw	240
  3539  0458  04E1               	iorwf	main@bat_data^(0+256),f
  3540  0459  0E62               	swapf	(main@bat_data+1)^(0+256),w
  3541  045A  390F               	andlw	15
  3542  045B  00E2               	movwf	(main@bat_data^(0+256)+1)
  3543                           
  3544                           ;main.c: 96: if( bat_data < 800)
  3545  045C  3003               	movlw	3
  3546  045D  0262               	subwf	(main@bat_data+1)^(0+256),w
  3547  045E  3020               	movlw	32
  3548  045F  1903               	skipnz
  3549  0460  0261               	subwf	main@bat_data^(0+256),w
  3550  0461  1803               	skipnc
  3551  0462  2C66               	goto	l6360
  3552                           
  3553                           ;main.c: 97: {
  3554                           ;main.c: 98: do { LATA2 = 0; } while(0);
  3555  0463  110C               	bcf	12,2	;volatile
  3556  0464                     l464:	
  3557                           ;main.c: 99: while(1)asm("clrwdt");
  3558                           
  3559  0464  0064               	clrwdt	;# 
  3560  0465  2C64               	goto	l464
  3561  0466                     l6360:	
  3562                           
  3563                           ;main.c: 100: }
  3564                           ;main.c: 101: i = 0 ;
  3565  0466  0022               	movlb	2	; select bank2
  3566  0467  01E0               	clrf	main@i^(0+256)
  3567                           
  3568                           ;main.c: 102: bat_data = 0 ;
  3569  0468  01E1               	clrf	main@bat_data^(0+256)
  3570  0469  01E2               	clrf	(main@bat_data+1)^(0+256)
  3571                           
  3572                           ;main.c: 106: do { TRISB3 = 1; } while(0);
  3573  046A  0021               	movlb	1	; select bank1
  3574  046B  158D               	bsf	13,3	;volatile
  3575                           
  3576                           ;main.c: 107: Bq32k_Time_Init();
  3577  046C  3189  213C  3184   	fcall	_Bq32k_Time_Init
  3578                           
  3579                           ;main.c: 108: SendCmd_1621(0x52);
  3580  046F  3052               	movlw	82
  3581  0470  3195  25AC  3184   	fcall	_SendCmd_1621
  3582                           
  3583                           ;main.c: 109: SendCmd_1621(0X28);
  3584  0473  3028               	movlw	40
  3585  0474  3195  25AC  3184   	fcall	_SendCmd_1621
  3586                           
  3587                           ;main.c: 110: SendCmd_1621(0x02);
  3588  0477  3002               	movlw	2
  3589  0478  3195  25AC  3184   	fcall	_SendCmd_1621
  3590                           
  3591                           ;main.c: 111: SendCmd_1621(0x06);
  3592  047B  3006               	movlw	6
  3593  047C  3195  25AC  3184   	fcall	_SendCmd_1621
  3594                           
  3595                           ;main.c: 113: WriteAll_1621(0,Dis_TAB+17,4);
  3596  047F  3011               	movlw	low ((_Dis_TAB| (0+32768)+17))
  3597  0480  0020               	movlb	0	; select bank0
  3598  0481  00A5               	movwf	WriteAll_1621@p
  3599  0482  3098               	movlw	high ((_Dis_TAB| (0+32768)+17))
  3600  0483  00A6               	movwf	WriteAll_1621@p+1
  3601  0484  3004               	movlw	4
  3602  0485  00E1               	movwf	??_main
  3603  0486  0861               	movf	??_main,w
  3604  0487  00A7               	movwf	WriteAll_1621@cnt
  3605  0488  3000               	movlw	0
  3606  0489  3189  2170  3184   	fcall	_WriteAll_1621
  3607                           
  3608                           ;main.c: 115: time_count = 0;
  3609  048C  0020               	movlb	0	; select bank0
  3610  048D  01E9               	clrf	_time_count
  3611                           
  3612                           ;main.c: 116: Record_flag = 0;
  3613  048E  01E6               	clrf	_Record_flag
  3614                           
  3615                           ;main.c: 117: Cur_temperature_time_ch1 = 0;
  3616  048F  0021               	movlb	1	; select bank1
  3617  0490  01B8               	clrf	_Cur_temperature_time_ch1^(0+128)
  3618                           
  3619                           ;main.c: 118: Cur_temperature_time_ch2 = 0;
  3620  0491  01B9               	clrf	_Cur_temperature_time_ch2^(0+128)
  3621                           
  3622                           ;main.c: 119: CH1_temperature = 0;
  3623  0492  01AE               	clrf	_CH1_temperature^(0+128)
  3624  0493  01AF               	clrf	(_CH1_temperature+1)^(0+128)
  3625                           
  3626                           ;main.c: 120: CH2_temperature = 0;
  3627  0494  01B0               	clrf	_CH2_temperature^(0+128)
  3628  0495  01B1               	clrf	(_CH2_temperature+1)^(0+128)
  3629                           
  3630                           ;main.c: 121: CH1_state = 0;
  3631  0496  01B6               	clrf	_CH1_state^(0+128)
  3632                           
  3633                           ;main.c: 122: CH2_state = 0;
  3634  0497  01B7               	clrf	_CH2_state^(0+128)
  3635                           
  3636                           ;main.c: 123: Usart_Rx_Cnt = 0;
  3637  0498  0020               	movlb	0	; select bank0
  3638  0499  01E7               	clrf	_Usart_Rx_Cnt
  3639                           
  3640                           ;main.c: 124: Set_time_cmd_flag = 0;
  3641  049A  0021               	movlb	1	; select bank1
  3642  049B  01BC               	clrf	_Set_time_cmd_flag^(0+128)
  3643                           
  3644                           ;main.c: 125: Usart_Run_Flag = 0;
  3645  049C  01BD               	clrf	_Usart_Run_Flag^(0+128)
  3646                           
  3647                           ;main.c: 126: bat_data = 0;
  3648  049D  0022               	movlb	2	; select bank2
  3649  049E  01E1               	clrf	main@bat_data^(0+256)
  3650  049F  01E2               	clrf	(main@bat_data+1)^(0+256)
  3651                           
  3652                           ;main.c: 127: Cur_Save_Index = 0x2000;
  3653  04A0  3000               	movlw	0
  3654  04A1  0020               	movlb	0	; select bank0
  3655  04A2  00E4               	movwf	_Cur_Save_Index
  3656  04A3  3020               	movlw	32
  3657  04A4  00E5               	movwf	_Cur_Save_Index+1
  3658                           
  3659                           ;main.c: 128: Serach_Flash_Head();
  3660  04A5  318B  2356  3184   	fcall	_Serach_Flash_Head
  3661  04A8  0064               	clrwdt	;# 
  3662                           
  3663                           ;main.c: 131: SWDTEN = 1;
  3664  04A9  0021               	movlb	1	; select bank1
  3665  04AA  1417               	bsf	23,0	;volatile
  3666                           
  3667                           ;main.c: 157: (INTCONbits.GIE = 1);
  3668  04AB  178B               	bsf	11,7	;volatile
  3669                           
  3670                           ;main.c: 160: (INTCONbits.PEIE = 1);
  3671  04AC  170B               	bsf	11,6	;volatile
  3672  04AD                     l6410:	
  3673                           ;main.c: 168: while (1)
  3674                           
  3675                           
  3676                           ;main.c: 169: {
  3677                           ;main.c: 174: bat_data = bat_data + ADC_GetConversion(ADC);
  3678  04AD  300B               	movlw	11
  3679  04AE  3196  26BA  3184   	fcall	_ADC_GetConversion
  3680  04B1  0022               	movlb	2	; select bank2
  3681  04B2  0861               	movf	main@bat_data^(0+256),w
  3682  04B3  0020               	movlb	0	; select bank0
  3683  04B4  0721               	addwf	?_ADC_GetConversion,w
  3684  04B5  0022               	movlb	2	; select bank2
  3685  04B6  00E1               	movwf	main@bat_data^(0+256)
  3686  04B7  0862               	movf	(main@bat_data+1)^(0+256),w
  3687  04B8  0020               	movlb	0	; select bank0
  3688  04B9  3D22               	addwfc	?_ADC_GetConversion+1,w
  3689  04BA  0022               	movlb	2	; select bank2
  3690  04BB  00E2               	movwf	(main@bat_data+1)^(0+256)
  3691                           
  3692                           ;main.c: 175: i++;
  3693  04BC  3001               	movlw	1
  3694  04BD  0020               	movlb	0	; select bank0
  3695  04BE  00E1               	movwf	??_main
  3696  04BF  0861               	movf	??_main,w
  3697  04C0  0022               	movlb	2	; select bank2
  3698  04C1  07E0               	addwf	main@i^(0+256),f
  3699                           
  3700                           ;main.c: 176: if(i == 16)
  3701  04C2  3010               	movlw	16
  3702  04C3  0660               	xorwf	main@i^(0+256),w
  3703  04C4  1D03               	btfss	3,2
  3704  04C5  2CDD               	goto	l6424
  3705                           
  3706                           ;main.c: 177: {
  3707                           ;main.c: 178: i = 0;
  3708  04C6  01E0               	clrf	main@i^(0+256)
  3709                           
  3710                           ;main.c: 179: bat_data = bat_data>>4;
  3711  04C7  0E61               	swapf	main@bat_data^(0+256),w
  3712  04C8  390F               	andlw	15
  3713  04C9  00E1               	movwf	main@bat_data^(0+256)
  3714  04CA  0E62               	swapf	(main@bat_data+1)^(0+256),w
  3715  04CB  39F0               	andlw	240
  3716  04CC  04E1               	iorwf	main@bat_data^(0+256),f
  3717  04CD  0E62               	swapf	(main@bat_data+1)^(0+256),w
  3718  04CE  390F               	andlw	15
  3719  04CF  00E2               	movwf	(main@bat_data^(0+256)+1)
  3720                           
  3721                           ;main.c: 180: if( bat_data < 800)
  3722  04D0  3003               	movlw	3
  3723  04D1  0262               	subwf	(main@bat_data+1)^(0+256),w
  3724  04D2  3020               	movlw	32
  3725  04D3  1903               	skipnz
  3726  04D4  0261               	subwf	main@bat_data^(0+256),w
  3727  04D5  1803               	skipnc
  3728  04D6  2CDA               	goto	l6422
  3729                           
  3730                           ;main.c: 181: {
  3731                           ;main.c: 182: do { LATA2 = 0; } while(0);
  3732  04D7  110C               	bcf	12,2	;volatile
  3733  04D8                     l474:	
  3734                           ;main.c: 183: while(1)asm("clrwdt");
  3735                           
  3736  04D8  0064               	clrwdt	;# 
  3737  04D9  2CD8               	goto	l474
  3738  04DA                     l6422:	
  3739                           
  3740                           ;main.c: 184: }
  3741                           ;main.c: 185: bat_data = 0;
  3742  04DA  0022               	movlb	2	; select bank2
  3743  04DB  01E1               	clrf	main@bat_data^(0+256)
  3744  04DC  01E2               	clrf	(main@bat_data+1)^(0+256)
  3745  04DD                     l6424:	
  3746                           
  3747                           ;main.c: 186: }
  3748                           ;main.c: 191: temperature_process();
  3749  04DD  3189  21DA  3184   	fcall	_temperature_process
  3750                           
  3751                           ;main.c: 192: Key_Process();
  3752  04E0  3185  25C2  3184   	fcall	_Key_Process
  3753                           
  3754                           ;main.c: 193: Save_process();
  3755  04E3  318D  25C4  3184   	fcall	_Save_process
  3756                           
  3757                           ;main.c: 194: Com_Process();
  3758  04E6  3194  24EC  3184   	fcall	_Com_Process
  3759                           
  3760                           ;main.c: 196: if(Usart_Run_Flag == 0)
  3761  04E9  0021               	movlb	1	; select bank1
  3762  04EA  083D               	movf	_Usart_Run_Flag^(0+128),w
  3763  04EB  1D03               	btfss	3,2
  3764  04EC  2CAD               	goto	l6410
  3765                           
  3766                           ;main.c: 197: {
  3767                           ;main.c: 198: Sleep_process();
  3768  04ED  3196  26D8  3184   	fcall	_Sleep_process
  3769  04F0  2CAD               	goto	l6410
  3770  04F1                     __end_of_main:	
  3771                           
  3772                           	psect	text1
  3773  16D8                     __ptext1:	
  3774 ;; *************** function _Sleep_process *****************
  3775 ;; Defined at:
  3776 ;;		line 17 in file "mcc_generated_files/power.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0, pclath, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    4
  3797 ;; This function calls:
  3798 ;;		_Step_control
  3799 ;; This function is called by:
  3800 ;;		_main
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           
  3805                           ;psect for function _Sleep_process
  3806  16D8                     _Sleep_process:	
  3807                           
  3808                           ;incstack = 0
  3809                           ; Regs used in _Sleep_process: [wreg+status,2+status,0+pclath+cstack]
  3810                           ;power.c: 19: do { LATA3 = 1; } while(0);
  3811  16D8  0022               	movlb	2	; select bank2
  3812  16D9  158C               	bsf	12,3	;volatile
  3813                           
  3814                           ;power.c: 20: do { LATA4 = 1; } while(0);
  3815  16DA  160C               	bsf	12,4	;volatile
  3816                           
  3817                           ;power.c: 21: do { LATA0 = 1; } while(0);
  3818  16DB  140C               	bsf	12,0	;volatile
  3819                           
  3820                           ;power.c: 22: do { LATA1 = 1; } while(0);
  3821  16DC  148C               	bsf	12,1	;volatile
  3822                           
  3823                           ;power.c: 26: do { LATC0 = 1; } while(0);
  3824  16DD  140E               	bsf	14,0	;volatile
  3825                           
  3826                           ;power.c: 27: do { LATC2 = 1; } while(0);
  3827  16DE  150E               	bsf	14,2	;volatile
  3828                           
  3829                           ;power.c: 28: do { LATA6 = 1; } while(0);
  3830  16DF  170C               	bsf	12,6	;volatile
  3831                           
  3832                           ;power.c: 29: do { LATC1 = 1; } while(0);
  3833  16E0  148E               	bsf	14,1	;volatile
  3834                           
  3835                           ;power.c: 30: do { LATB0 = 1; } while(0);
  3836  16E1  140D               	bsf	13,0	;volatile
  3837                           
  3838                           ;power.c: 31: do { LATB1 = 1; } while(0);
  3839  16E2  148D               	bsf	13,1	;volatile
  3840  16E3  0063               	sleep	;# 
  3841                           
  3842                           ;power.c: 33: if( time_count == 0 || time_count == 2 )
  3843  16E4  0020               	movlb	0	; select bank0
  3844  16E5  0869               	movf	_time_count,w
  3845  16E6  1903               	btfsc	3,2
  3846  16E7  2EEC               	goto	l1191
  3847  16E8  3002               	movlw	2
  3848  16E9  0669               	xorwf	_time_count,w
  3849  16EA  1D03               	btfss	3,2
  3850  16EB  2EF4               	goto	l6272
  3851  16EC                     l1191:	
  3852                           ;power.c: 34: {
  3853                           ;power.c: 35: do { LATA3 = 0; } while(0);
  3854                           
  3855  16EC  0022               	movlb	2	; select bank2
  3856  16ED  118C               	bcf	12,3	;volatile
  3857                           
  3858                           ;power.c: 36: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  3859  16EE  0020               	movlb	0	; select bank0
  3860  16EF  0366               	decf	_Record_flag,w
  3861  16F0  1D03               	btfss	3,2
  3862  16F1  2EF4               	goto	l6272
  3863  16F2  0022               	movlb	2	; select bank2
  3864  16F3  120C               	bcf	12,4	;volatile
  3865  16F4                     l6272:	
  3866                           
  3867                           ;power.c: 37: }
  3868                           ;power.c: 39: Step_control();
  3869  16F4  3188  2006         	fcall	_Step_control
  3870  16F6  0008               	return
  3871  16F7                     __end_of_Sleep_process:	
  3872                           
  3873                           	psect	text2
  3874  0806                     __ptext2:	
  3875 ;; *************** function _Step_control *****************
  3876 ;; Defined at:
  3877 ;;		line 48 in file "mcc_generated_files/power.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3895 ;;Total ram usage:        1 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    3
  3898 ;; This function calls:
  3899 ;;		Nothing
  3900 ;; This function is called by:
  3901 ;;		_Sleep_process
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           
  3906                           ;psect for function _Step_control
  3907  0806                     _Step_control:	
  3908                           
  3909                           ;power.c: 50: time_count++;
  3910                           
  3911                           ;incstack = 0
  3912                           ; Regs used in _Step_control: [wreg+status,2+status,0]
  3913  0806  3001               	movlw	1
  3914  0807  0020               	movlb	0	; select bank0
  3915  0808  00A1               	movwf	??_Step_control
  3916  0809  0821               	movf	??_Step_control,w
  3917  080A  07E9               	addwf	_time_count,f
  3918                           
  3919                           ;power.c: 51: if(time_count == 4 || time_count > 12) time_count = 0;
  3920  080B  3004               	movlw	4
  3921  080C  0669               	xorwf	_time_count,w
  3922  080D  1903               	btfsc	3,2
  3923  080E  2813               	goto	l6080
  3924  080F  300D               	movlw	13
  3925  0810  0269               	subwf	_time_count,w
  3926  0811  1C03               	skipc
  3927  0812  2814               	goto	l6082
  3928  0813                     l6080:	
  3929  0813  01E9               	clrf	_time_count
  3930  0814                     l6082:	
  3931                           
  3932                           ;power.c: 53: Cur_temperature_time_ch1++;
  3933  0814  3001               	movlw	1
  3934  0815  00A1               	movwf	??_Step_control
  3935  0816  0821               	movf	??_Step_control,w
  3936  0817  0021               	movlb	1	; select bank1
  3937  0818  07B8               	addwf	_Cur_temperature_time_ch1^(0+128),f
  3938                           
  3939                           ;power.c: 54: if(Cur_temperature_time_ch1 > 130)
  3940  0819  3083               	movlw	131
  3941  081A  0238               	subwf	_Cur_temperature_time_ch1^(0+128),w
  3942  081B  1803               	btfsc	3,0
  3943                           
  3944                           ;power.c: 55: {
  3945                           ;power.c: 56: Cur_temperature_time_ch1 = 0;
  3946  081C  01B8               	clrf	_Cur_temperature_time_ch1^(0+128)
  3947                           
  3948                           ;power.c: 57: }
  3949                           ;power.c: 59: Cur_temperature_time_ch2++;
  3950  081D  3001               	movlw	1
  3951  081E  0020               	movlb	0	; select bank0
  3952  081F  00A1               	movwf	??_Step_control
  3953  0820  0821               	movf	??_Step_control,w
  3954  0821  0021               	movlb	1	; select bank1
  3955  0822  07B9               	addwf	_Cur_temperature_time_ch2^(0+128),f
  3956                           
  3957                           ;power.c: 60: if(Cur_temperature_time_ch2 > 130)
  3958  0823  3083               	movlw	131
  3959  0824  0239               	subwf	_Cur_temperature_time_ch2^(0+128),w
  3960  0825  1C03               	skipc
  3961  0826  0008               	return
  3962                           
  3963                           ;power.c: 61: {
  3964                           ;power.c: 62: Cur_temperature_time_ch2= 0;
  3965  0827  01B9               	clrf	_Cur_temperature_time_ch2^(0+128)
  3966  0828  0008               	return
  3967  0829                     __end_of_Step_control:	
  3968                           
  3969                           	psect	text3
  3970  0B56                     __ptext3:	
  3971 ;; *************** function _Serach_Flash_Head *****************
  3972 ;; Defined at:
  3973 ;;		line 42 in file "mcc_generated_files/save.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  i               2   10[BANK0 ] unsigned int 
  3978 ;;  data            2    8[BANK0 ] unsigned int 
  3979 ;;  count           1    7[BANK0 ] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0, pclath, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3990 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3992 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3993 ;;Total ram usage:        6 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    5
  3996 ;; This function calls:
  3997 ;;		_FLASH_ReadWord
  3998 ;;		_Write_Flash_finish
  3999 ;; This function is called by:
  4000 ;;		_main
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           
  4005                           ;psect for function _Serach_Flash_Head
  4006  0B56                     _Serach_Flash_Head:	
  4007                           
  4008                           ;save.c: 44: unsigned int i=0;
  4009                           
  4010                           ;incstack = 0
  4011                           ; Regs used in _Serach_Flash_Head: [wreg+status,2+status,0+pclath+cstack]
  4012  0B56  0020               	movlb	0	; select bank0
  4013  0B57  01AA               	clrf	Serach_Flash_Head@i
  4014  0B58  01AB               	clrf	Serach_Flash_Head@i+1
  4015                           
  4016                           ;save.c: 45: unsigned int data=0;
  4017  0B59  01A8               	clrf	Serach_Flash_Head@data
  4018  0B5A  01A9               	clrf	Serach_Flash_Head@data+1
  4019                           
  4020                           ;save.c: 46: unsigned char count =0;
  4021  0B5B  01A7               	clrf	Serach_Flash_Head@count
  4022                           
  4023                           ;save.c: 47: for(i = 0x2000; i<16384;i++ )
  4024  0B5C  3000               	movlw	0
  4025  0B5D  00AA               	movwf	Serach_Flash_Head@i
  4026  0B5E  3020               	movlw	32
  4027  0B5F  00AB               	movwf	Serach_Flash_Head@i+1
  4028  0B60                     L1:	
  4029  0B60  3040               	movlw	64
  4030  0B61  022B               	subwf	Serach_Flash_Head@i+1,w
  4031  0B62  3000               	movlw	0
  4032  0B63  1903               	skipnz
  4033  0B64  022A               	subwf	Serach_Flash_Head@i,w
  4034  0B65  1803               	btfsc	3,0
  4035  0B66  0008               	return
  4036                           
  4037                           ;save.c: 48: {
  4038                           ;save.c: 49: data = FLASH_ReadWord(i);
  4039  0B67  082B               	movf	Serach_Flash_Head@i+1,w
  4040  0B68  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  4041  0B69  082A               	movf	Serach_Flash_Head@i,w
  4042  0B6A  00A1               	movwf	FLASH_ReadWord@flashAddr
  4043  0B6B  3196  26F7  318B   	fcall	_FLASH_ReadWord
  4044  0B6E  0020               	movlb	0	; select bank0
  4045  0B6F  0822               	movf	?_FLASH_ReadWord+1,w
  4046  0B70  00A9               	movwf	Serach_Flash_Head@data+1
  4047  0B71  0821               	movf	?_FLASH_ReadWord,w
  4048  0B72  00A8               	movwf	Serach_Flash_Head@data
  4049                           
  4050                           ;save.c: 51: if( data == 0x1555 )
  4051  0B73  3055               	movlw	85
  4052  0B74  0628               	xorwf	Serach_Flash_Head@data,w
  4053  0B75  3015               	movlw	21
  4054  0B76  1903               	skipnz
  4055  0B77  0629               	xorwf	Serach_Flash_Head@data+1,w
  4056  0B78  1D03               	btfss	3,2
  4057  0B79  2B7F               	goto	l6138
  4058                           
  4059                           ;save.c: 52: {
  4060                           ;save.c: 53: count++;
  4061  0B7A  3001               	movlw	1
  4062  0B7B  00A6               	movwf	??_Serach_Flash_Head
  4063  0B7C  0826               	movf	??_Serach_Flash_Head,w
  4064  0B7D  07A7               	addwf	Serach_Flash_Head@count,f
  4065                           
  4066                           ;save.c: 54: }
  4067  0B7E  2B9D               	goto	l6156
  4068  0B7F                     l6138:	
  4069                           
  4070                           ;save.c: 55: else
  4071                           ;save.c: 56: {
  4072                           ;save.c: 57: if( data == 0x3fff && count >1 )
  4073  0B7F  0A28               	incf	Serach_Flash_Head@data,w
  4074  0B80  303F               	movlw	63
  4075  0B81  1903               	skipnz
  4076  0B82  0629               	xorwf	Serach_Flash_Head@data+1,w
  4077  0B83  1D03               	btfss	3,2
  4078  0B84  2B8E               	goto	l6146
  4079  0B85  3002               	movlw	2
  4080  0B86  0227               	subwf	Serach_Flash_Head@count,w
  4081  0B87  1C03               	skipc
  4082  0B88  2B8E               	goto	l6146
  4083                           
  4084                           ;save.c: 58: {
  4085                           ;save.c: 59: Cur_Save_Index = i;
  4086  0B89  082B               	movf	Serach_Flash_Head@i+1,w
  4087  0B8A  00E5               	movwf	_Cur_Save_Index+1
  4088  0B8B  082A               	movf	Serach_Flash_Head@i,w
  4089  0B8C  00E4               	movwf	_Cur_Save_Index
  4090                           
  4091                           ;save.c: 60: break;
  4092  0B8D  0008               	return
  4093  0B8E                     l6146:	
  4094                           ;save.c: 61: }
  4095                           
  4096                           
  4097                           ;save.c: 62: else if( data == 0x3fff )
  4098  0B8E  0A28               	incf	Serach_Flash_Head@data,w
  4099  0B8F  303F               	movlw	63
  4100  0B90  1903               	skipnz
  4101  0B91  0629               	xorwf	Serach_Flash_Head@data+1,w
  4102  0B92  1D03               	btfss	3,2
  4103  0B93  2B9B               	goto	l6154
  4104                           
  4105                           ;save.c: 63: {
  4106                           ;save.c: 64: Cur_Save_Index = i;
  4107  0B94  082B               	movf	Serach_Flash_Head@i+1,w
  4108  0B95  00E5               	movwf	_Cur_Save_Index+1
  4109  0B96  082A               	movf	Serach_Flash_Head@i,w
  4110  0B97  00E4               	movwf	_Cur_Save_Index
  4111                           
  4112                           ;save.c: 65: Write_Flash_finish();
  4113  0B98  3197  2779         	fcall	_Write_Flash_finish
  4114                           
  4115                           ;save.c: 66: break;
  4116  0B9A  0008               	return
  4117  0B9B                     l6154:	
  4118                           ;save.c: 67: }
  4119                           
  4120                           
  4121                           ;save.c: 68: else
  4122                           ;save.c: 69: {
  4123                           ;save.c: 70: count = 0;
  4124  0B9B  0020               	movlb	0	; select bank0
  4125  0B9C  01A7               	clrf	Serach_Flash_Head@count
  4126  0B9D                     l6156:	
  4127  0B9D  3001               	movlw	1
  4128  0B9E  0020               	movlb	0	; select bank0
  4129  0B9F  07AA               	addwf	Serach_Flash_Head@i,f
  4130  0BA0  3000               	movlw	0
  4131  0BA1  3DAB               	addwfc	Serach_Flash_Head@i+1,f
  4132  0BA2  2B60               	goto	L1
  4133  0BA3                     __end_of_Serach_Flash_Head:	
  4134                           
  4135                           	psect	text4
  4136  0DC4                     __ptext4:	
  4137 ;; *************** function _Save_process *****************
  4138 ;; Defined at:
  4139 ;;		line 120 in file "mcc_generated_files/save.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  var_time        2   48[BANK0 ] unsigned int 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;Total ram usage:        4 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    8
  4160 ;; This function calls:
  4161 ;;		_Calculate_Time
  4162 ;;		_Save_Write_word
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _Save_process
  4170  0DC4                     _Save_process:	
  4171                           
  4172                           ;save.c: 122: unsigned int var_time=0;
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _Save_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4176  0DC4  0020               	movlb	0	; select bank0
  4177  0DC5  01D0               	clrf	Save_process@var_time
  4178  0DC6  01D1               	clrf	Save_process@var_time+1
  4179                           
  4180                           ;save.c: 123: if( time_count == 1 && Record_flag == 1 )
  4181  0DC7  0369               	decf	_time_count,w
  4182  0DC8  1D03               	btfss	3,2
  4183  0DC9  2DF9               	goto	l6242
  4184  0DCA  0366               	decf	_Record_flag,w
  4185  0DCB  1D03               	btfss	3,2
  4186  0DCC  2DF9               	goto	l6242
  4187                           
  4188                           ;save.c: 124: {
  4189                           ;save.c: 125: if(Cur_temperature_time_ch1 > 120)
  4190  0DCD  3079               	movlw	121
  4191  0DCE  0021               	movlb	1	; select bank1
  4192  0DCF  0238               	subwf	_Cur_temperature_time_ch1^(0+128),w
  4193  0DD0  1C03               	skipc
  4194  0DD1  0008               	return
  4195                           
  4196                           ;save.c: 126: {
  4197                           ;save.c: 127: var_time = Calculate_Time();
  4198  0DD2  3182  226D  318D   	fcall	_Calculate_Time
  4199  0DD5  0020               	movlb	0	; select bank0
  4200  0DD6  00CE               	movwf	??_Save_process
  4201  0DD7  01CF               	clrf	??_Save_process+1
  4202  0DD8  084E               	movf	??_Save_process,w
  4203  0DD9  00D0               	movwf	Save_process@var_time
  4204  0DDA  084F               	movf	??_Save_process+1,w
  4205  0DDB  00D1               	movwf	Save_process@var_time+1
  4206                           
  4207                           ;save.c: 128: var_time |= 0x100;
  4208  0DDC  1451               	bsf	Save_process@var_time+1,0
  4209                           
  4210                           ;save.c: 129: if(CH1_state == 1) var_time |= 0x400;
  4211  0DDD  0021               	movlb	1	; select bank1
  4212  0DDE  0336               	decf	_CH1_state^(0+128),w
  4213  0DDF  1D03               	btfss	3,2
  4214  0DE0  2DE3               	goto	l1108
  4215  0DE1  0020               	movlb	0	; select bank0
  4216  0DE2  1551               	bsf	Save_process@var_time+1,2
  4217  0DE3                     l1108:	
  4218                           
  4219                           ;save.c: 131: var_time |= 0x1000;
  4220  0DE3  0020               	movlb	0	; select bank0
  4221  0DE4  1651               	bsf	Save_process@var_time+1,4
  4222                           
  4223                           ;save.c: 133: Save_Write_word(var_time);
  4224  0DE5  0851               	movf	Save_process@var_time+1,w
  4225  0DE6  00A7               	movwf	Save_Write_word@data+1
  4226  0DE7  0850               	movf	Save_process@var_time,w
  4227  0DE8  00A6               	movwf	Save_Write_word@data
  4228  0DE9  318B  23F4  318D   	fcall	_Save_Write_word
  4229                           
  4230                           ;save.c: 134: Save_Write_word(CH1_temperature);
  4231  0DEC  0021               	movlb	1	; select bank1
  4232  0DED  082F               	movf	(_CH1_temperature+1)^(0+128),w
  4233  0DEE  0020               	movlb	0	; select bank0
  4234  0DEF  00A7               	movwf	Save_Write_word@data+1
  4235  0DF0  0021               	movlb	1	; select bank1
  4236  0DF1  082E               	movf	_CH1_temperature^(0+128),w
  4237  0DF2  0020               	movlb	0	; select bank0
  4238  0DF3  00A6               	movwf	Save_Write_word@data
  4239  0DF4  318B  23F4         	fcall	_Save_Write_word
  4240                           
  4241                           ;save.c: 136: Cur_temperature_time_ch1 = 0;
  4242  0DF6  0021               	movlb	1	; select bank1
  4243  0DF7  01B8               	clrf	_Cur_temperature_time_ch1^(0+128)
  4244                           
  4245                           ;save.c: 137: }
  4246                           ;save.c: 138: }
  4247  0DF8  0008               	return
  4248  0DF9                     l6242:	
  4249                           
  4250                           ;save.c: 139: else if(time_count == 3 && Record_flag == 1)
  4251  0DF9  3003               	movlw	3
  4252  0DFA  0020               	movlb	0	; select bank0
  4253  0DFB  0669               	xorwf	_time_count,w
  4254  0DFC  1D03               	btfss	3,2
  4255  0DFD  0008               	return
  4256  0DFE  0366               	decf	_Record_flag,w
  4257  0DFF  1D03               	btfss	3,2
  4258  0E00  0008               	return
  4259                           
  4260                           ;save.c: 140: {
  4261                           ;save.c: 141: if(Cur_temperature_time_ch2 > 120)
  4262  0E01  3079               	movlw	121
  4263  0E02  0021               	movlb	1	; select bank1
  4264  0E03  0239               	subwf	_Cur_temperature_time_ch2^(0+128),w
  4265  0E04  1C03               	skipc
  4266  0E05  0008               	return
  4267                           
  4268                           ;save.c: 142: {
  4269                           ;save.c: 143: var_time = Calculate_Time();
  4270  0E06  3182  226D  318D   	fcall	_Calculate_Time
  4271  0E09  0020               	movlb	0	; select bank0
  4272  0E0A  00CE               	movwf	??_Save_process
  4273  0E0B  01CF               	clrf	??_Save_process+1
  4274  0E0C  084E               	movf	??_Save_process,w
  4275  0E0D  00D0               	movwf	Save_process@var_time
  4276  0E0E  084F               	movf	??_Save_process+1,w
  4277  0E0F  00D1               	movwf	Save_process@var_time+1
  4278                           
  4279                           ;save.c: 144: var_time |= 0x200;
  4280  0E10  14D1               	bsf	Save_process@var_time+1,1
  4281                           
  4282                           ;save.c: 145: if(CH2_state == 1) var_time |= 0x800;
  4283  0E11  0021               	movlb	1	; select bank1
  4284  0E12  0337               	decf	_CH2_state^(0+128),w
  4285  0E13  1D03               	btfss	3,2
  4286  0E14  2E17               	goto	l1112
  4287  0E15  0020               	movlb	0	; select bank0
  4288  0E16  15D1               	bsf	Save_process@var_time+1,3
  4289  0E17                     l1112:	
  4290                           
  4291                           ;save.c: 147: var_time |= 0x1000;
  4292  0E17  0020               	movlb	0	; select bank0
  4293  0E18  1651               	bsf	Save_process@var_time+1,4
  4294                           
  4295                           ;save.c: 149: Save_Write_word(var_time);
  4296  0E19  0851               	movf	Save_process@var_time+1,w
  4297  0E1A  00A7               	movwf	Save_Write_word@data+1
  4298  0E1B  0850               	movf	Save_process@var_time,w
  4299  0E1C  00A6               	movwf	Save_Write_word@data
  4300  0E1D  318B  23F4  318D   	fcall	_Save_Write_word
  4301                           
  4302                           ;save.c: 150: Save_Write_word(CH2_temperature);
  4303  0E20  0021               	movlb	1	; select bank1
  4304  0E21  0831               	movf	(_CH2_temperature+1)^(0+128),w
  4305  0E22  0020               	movlb	0	; select bank0
  4306  0E23  00A7               	movwf	Save_Write_word@data+1
  4307  0E24  0021               	movlb	1	; select bank1
  4308  0E25  0830               	movf	_CH2_temperature^(0+128),w
  4309  0E26  0020               	movlb	0	; select bank0
  4310  0E27  00A6               	movwf	Save_Write_word@data
  4311  0E28  318B  23F4         	fcall	_Save_Write_word
  4312                           
  4313                           ;save.c: 152: Cur_temperature_time_ch2 = 0;
  4314  0E2A  0021               	movlb	1	; select bank1
  4315  0E2B  01B9               	clrf	_Cur_temperature_time_ch2^(0+128)
  4316  0E2C  0008               	return
  4317  0E2D                     __end_of_Save_process:	
  4318                           
  4319                           	psect	text5
  4320  1597                     __ptext5:	
  4321 ;; *************** function _SYSTEM_Initialize *****************
  4322 ;; Defined at:
  4323 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2, status,0, pclath, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;Total ram usage:        0 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    4
  4344 ;; This function calls:
  4345 ;;		_ADC_Initialize
  4346 ;;		_EUSART_Initialize
  4347 ;;		_FVR_Initialize
  4348 ;;		_OSCILLATOR_Initialize
  4349 ;;		_PIN_MANAGER_Initialize
  4350 ;;		_SPI_Initialize
  4351 ;;		_TMR0_Initialize
  4352 ;; This function is called by:
  4353 ;;		_main
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           
  4358                           ;psect for function _SYSTEM_Initialize
  4359  1597                     _SYSTEM_Initialize:	
  4360                           
  4361                           ;mcc.c: 71: OSCILLATOR_Initialize();
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4365  1597  3194  24D3  3195   	fcall	_OSCILLATOR_Initialize
  4366                           
  4367                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  4368  159A  3197  27BB  3195   	fcall	_PIN_MANAGER_Initialize
  4369                           
  4370                           ;mcc.c: 73: SPI_Initialize();
  4371  159D  3194  24DE  3195   	fcall	_SPI_Initialize
  4372                           
  4373                           ;mcc.c: 74: EUSART_Initialize();
  4374  15A0  3196  262C  3195   	fcall	_EUSART_Initialize
  4375                           
  4376                           ;mcc.c: 75: ADC_Initialize();
  4377  15A3  3194  24E4  3195   	fcall	_ADC_Initialize
  4378                           
  4379                           ;mcc.c: 76: FVR_Initialize();
  4380  15A6  3194  24CA  3195   	fcall	_FVR_Initialize
  4381                           
  4382                           ;mcc.c: 77: TMR0_Initialize();
  4383  15A9  3195  253A         	fcall	_TMR0_Initialize
  4384  15AB  0008               	return
  4385  15AC                     __end_of_SYSTEM_Initialize:	
  4386                           
  4387                           	psect	text6
  4388  153A                     __ptext6:	
  4389 ;; *************** function _TMR0_Initialize *****************
  4390 ;; Defined at:
  4391 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;		None
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;		None
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;Total ram usage:        1 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    3
  4412 ;; This function calls:
  4413 ;;		Nothing
  4414 ;; This function is called by:
  4415 ;;		_SYSTEM_Initialize
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           
  4420                           ;psect for function _TMR0_Initialize
  4421  153A                     _TMR0_Initialize:	
  4422                           
  4423                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4427  153A  0021               	movlb	1	; select bank1
  4428  153B  0815               	movf	21,w	;volatile
  4429  153C  39C0               	andlw	192
  4430  153D  3817               	iorlw	23
  4431  153E  0095               	movwf	21	;volatile
  4432                           
  4433                           ;tmr0.c: 73: TMR0 = 0xD9;
  4434  153F  30D9               	movlw	217
  4435  1540  0020               	movlb	0	; select bank0
  4436  1541  0095               	movwf	21	;volatile
  4437                           
  4438                           ;tmr0.c: 76: timer0ReloadVal = 217;
  4439  1542  30D9               	movlw	217
  4440  1543  00A1               	movwf	??_TMR0_Initialize
  4441  1544  0821               	movf	??_TMR0_Initialize,w
  4442  1545  0021               	movlb	1	; select bank1
  4443  1546  00EF               	movwf	_timer0ReloadVal^(0+128)	;volatile
  4444                           
  4445                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  4446  1547  110B               	bcf	11,2	;volatile
  4447                           
  4448                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  4449  1548  168B               	bsf	11,5	;volatile
  4450  1549  0008               	return
  4451  154A                     __end_of_TMR0_Initialize:	
  4452                           
  4453                           	psect	text7
  4454  14DE                     __ptext7:	
  4455 ;; *************** function _SPI_Initialize *****************
  4456 ;; Defined at:
  4457 ;;		line 64 in file "mcc_generated_files/spi.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;Total ram usage:        0 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    3
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_SYSTEM_Initialize
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _SPI_Initialize
  4487  14DE                     _SPI_Initialize:	
  4488                           
  4489                           ;spi.c: 68: SSP1STAT = 0x00;
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4493  14DE  0024               	movlb	4	; select bank4
  4494  14DF  0194               	clrf	20	;volatile
  4495                           
  4496                           ;spi.c: 71: SSP1CON1 = 0x30;
  4497  14E0  3030               	movlw	48
  4498  14E1  0095               	movwf	21	;volatile
  4499                           
  4500                           ;spi.c: 74: SSP1ADD = 0x00;
  4501  14E2  0192               	clrf	18	;volatile
  4502  14E3  0008               	return
  4503  14E4                     __end_of_SPI_Initialize:	
  4504                           
  4505                           	psect	text8
  4506  17BB                     __ptext8:	
  4507 ;; *************** function _PIN_MANAGER_Initialize *****************
  4508 ;; Defined at:
  4509 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      void 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;Total ram usage:        0 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    3
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_SYSTEM_Initialize
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _PIN_MANAGER_Initialize
  4539  17BB                     _PIN_MANAGER_Initialize:	
  4540                           
  4541                           ;pin_manager.c: 51: LATA = 0x7B;
  4542                           
  4543                           ;incstack = 0
  4544                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4545  17BB  307B               	movlw	123
  4546  17BC  0022               	movlb	2	; select bank2
  4547  17BD  008C               	movwf	12	;volatile
  4548                           
  4549                           ;pin_manager.c: 52: TRISA = 0x80;
  4550  17BE  3080               	movlw	128
  4551  17BF  0021               	movlb	1	; select bank1
  4552  17C0  008C               	movwf	12	;volatile
  4553                           
  4554                           ;pin_manager.c: 53: ANSELA = 0x00;
  4555  17C1  0023               	movlb	3	; select bank3
  4556  17C2  018C               	clrf	12	;volatile
  4557                           
  4558                           ;pin_manager.c: 55: LATB = 0x00;
  4559  17C3  0022               	movlb	2	; select bank2
  4560  17C4  018D               	clrf	13	;volatile
  4561                           
  4562                           ;pin_manager.c: 56: TRISB = 0xFC;
  4563  17C5  30FC               	movlw	252
  4564  17C6  0021               	movlb	1	; select bank1
  4565  17C7  008D               	movwf	13	;volatile
  4566                           
  4567                           ;pin_manager.c: 57: ANSELB = 0x10;
  4568  17C8  3010               	movlw	16
  4569  17C9  0023               	movlb	3	; select bank3
  4570  17CA  008D               	movwf	13	;volatile
  4571                           
  4572                           ;pin_manager.c: 58: WPUB = 0x2C;
  4573  17CB  302C               	movlw	44
  4574  17CC  0024               	movlb	4	; select bank4
  4575  17CD  008D               	movwf	13	;volatile
  4576                           
  4577                           ;pin_manager.c: 60: LATC = 0x07;
  4578  17CE  3007               	movlw	7
  4579  17CF  0022               	movlb	2	; select bank2
  4580  17D0  008E               	movwf	14	;volatile
  4581                           
  4582                           ;pin_manager.c: 61: TRISC = 0xD0;
  4583  17D1  30D0               	movlw	208
  4584  17D2  0021               	movlb	1	; select bank1
  4585  17D3  008E               	movwf	14	;volatile
  4586                           
  4587                           ;pin_manager.c: 62: ANSELC = 0x00;
  4588  17D4  0023               	movlb	3	; select bank3
  4589  17D5  018E               	clrf	14	;volatile
  4590                           
  4591                           ;pin_manager.c: 64: WPUE = 0x00;
  4592  17D6  0024               	movlb	4	; select bank4
  4593  17D7  0190               	clrf	16	;volatile
  4594                           
  4595                           ;pin_manager.c: 66: OPTION_REGbits.nWPUEN = 0x00;
  4596  17D8  0021               	movlb	1	; select bank1
  4597  17D9  1395               	bcf	21,7	;volatile
  4598                           
  4599                           ;pin_manager.c: 68: APFCON = 0x00;
  4600  17DA  0022               	movlb	2	; select bank2
  4601  17DB  019D               	clrf	29	;volatile
  4602  17DC  0008               	return
  4603  17DD                     __end_of_PIN_MANAGER_Initialize:	
  4604                           
  4605                           	psect	text9
  4606  14D3                     __ptext9:	
  4607 ;; *************** function _OSCILLATOR_Initialize *****************
  4608 ;; Defined at:
  4609 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		wreg, status,2
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    3
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_SYSTEM_Initialize
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           
  4638                           ;psect for function _OSCILLATOR_Initialize
  4639  14D3                     _OSCILLATOR_Initialize:	
  4640                           
  4641                           ;mcc.c: 82: OSCCON = 0x68;
  4642                           
  4643                           ;incstack = 0
  4644                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4645  14D3  3068               	movlw	104
  4646  14D4  0021               	movlb	1	; select bank1
  4647  14D5  0099               	movwf	25	;volatile
  4648                           
  4649                           ;mcc.c: 84: OSCSTAT = 0x00;
  4650  14D6  019A               	clrf	26	;volatile
  4651  14D7  0008               	return
  4652  14D8                     __end_of_OSCILLATOR_Initialize:	
  4653                           
  4654                           	psect	text10
  4655  14CA                     __ptext10:	
  4656 ;; *************** function _FVR_Initialize *****************
  4657 ;; Defined at:
  4658 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;		None
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;		None
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      void 
  4665 ;; Registers used:
  4666 ;;		wreg
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;Total ram usage:        0 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    3
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		_SYSTEM_Initialize
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           
  4687                           ;psect for function _FVR_Initialize
  4688  14CA                     _FVR_Initialize:	
  4689                           
  4690                           ;fvr.c: 60: FVRCON = 0x82;
  4691                           
  4692                           ;incstack = 0
  4693                           ; Regs used in _FVR_Initialize: [wreg]
  4694  14CA  3082               	movlw	130
  4695  14CB  0022               	movlb	2	; select bank2
  4696  14CC  0097               	movwf	23	;volatile
  4697  14CD  0008               	return
  4698  14CE                     __end_of_FVR_Initialize:	
  4699                           
  4700                           	psect	text11
  4701  162C                     __ptext11:	
  4702 ;; *************** function _EUSART_Initialize *****************
  4703 ;; Defined at:
  4704 ;;		line 78 in file "mcc_generated_files/eusart.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, status,2
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;Total ram usage:        1 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    3
  4725 ;; This function calls:
  4726 ;;		Nothing
  4727 ;; This function is called by:
  4728 ;;		_SYSTEM_Initialize
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _EUSART_Initialize
  4734  162C                     _EUSART_Initialize:	
  4735                           
  4736                           ;eusart.c: 80: PIE1bits.RCIE = 0;
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4740  162C  0021               	movlb	1	; select bank1
  4741  162D  1291               	bcf	17,5	;volatile
  4742                           
  4743                           ;eusart.c: 81: PIE1bits.TXIE = 0;
  4744  162E  1211               	bcf	17,4	;volatile
  4745                           
  4746                           ;eusart.c: 86: BAUDCON = 0x48;
  4747  162F  3048               	movlw	72
  4748  1630  0023               	movlb	3	; select bank3
  4749  1631  009F               	movwf	31	;volatile
  4750                           
  4751                           ;eusart.c: 89: RCSTA = 0x90;
  4752  1632  3090               	movlw	144
  4753  1633  009D               	movwf	29	;volatile
  4754                           
  4755                           ;eusart.c: 92: TXSTA = 0x26;
  4756  1634  3026               	movlw	38
  4757  1635  009E               	movwf	30	;volatile
  4758                           
  4759                           ;eusart.c: 95: SPBRGL = 0x33;
  4760  1636  3033               	movlw	51
  4761  1637  009B               	movwf	27	;volatile
  4762                           
  4763                           ;eusart.c: 98: SPBRGH = 0x00;
  4764  1638  019C               	clrf	28	;volatile
  4765                           
  4766                           ;eusart.c: 102: eusartTxHead = 0;
  4767  1639  0021               	movlb	1	; select bank1
  4768  163A  01C1               	clrf	_eusartTxHead^(0+128)
  4769                           
  4770                           ;eusart.c: 103: eusartTxTail = 0;
  4771  163B  01C2               	clrf	_eusartTxTail^(0+128)
  4772                           
  4773                           ;eusart.c: 104: eusartTxBufferRemaining = sizeof (eusartTxBuffer);
  4774  163C  3008               	movlw	8
  4775  163D  0020               	movlb	0	; select bank0
  4776  163E  00A1               	movwf	??_EUSART_Initialize
  4777  163F  0821               	movf	??_EUSART_Initialize,w
  4778  1640  0021               	movlb	1	; select bank1
  4779  1641  00EE               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  4780                           
  4781                           ;eusart.c: 106: eusartRxHead = 0;
  4782  1642  01BF               	clrf	_eusartRxHead^(0+128)
  4783                           
  4784                           ;eusart.c: 107: eusartRxTail = 0;
  4785  1643  01C0               	clrf	_eusartRxTail^(0+128)
  4786                           
  4787                           ;eusart.c: 108: eusartRxCount = 0;
  4788  1644  01BE               	clrf	_eusartRxCount^(0+128)	;volatile
  4789                           
  4790                           ;eusart.c: 111: PIE1bits.RCIE = 1;
  4791  1645  1691               	bsf	17,5	;volatile
  4792  1646  0008               	return
  4793  1647                     __end_of_EUSART_Initialize:	
  4794                           
  4795                           	psect	text12
  4796  14E4                     __ptext12:	
  4797 ;; *************** function _ADC_Initialize *****************
  4798 ;; Defined at:
  4799 ;;		line 65 in file "mcc_generated_files/adc.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;		None
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;		None
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      void 
  4806 ;; Registers used:
  4807 ;;		wreg, status,2
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;Total ram usage:        0 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; Hardware stack levels required when called:    3
  4820 ;; This function calls:
  4821 ;;		Nothing
  4822 ;; This function is called by:
  4823 ;;		_SYSTEM_Initialize
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           
  4828                           ;psect for function _ADC_Initialize
  4829  14E4                     _ADC_Initialize:	
  4830                           
  4831                           ;adc.c: 69: ADCON0 = 0x01;
  4832                           
  4833                           ;incstack = 0
  4834                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4835  14E4  3001               	movlw	1
  4836  14E5  0021               	movlb	1	; select bank1
  4837  14E6  009D               	movwf	29	;volatile
  4838                           
  4839                           ;adc.c: 72: ADCON1 = 0xC3;
  4840  14E7  30C3               	movlw	195
  4841  14E8  009E               	movwf	30	;volatile
  4842                           
  4843                           ;adc.c: 75: ADRESL = 0x00;
  4844  14E9  019B               	clrf	27	;volatile
  4845                           
  4846                           ;adc.c: 78: ADRESH = 0x00;
  4847  14EA  019C               	clrf	28	;volatile
  4848  14EB  0008               	return
  4849  14EC                     __end_of_ADC_Initialize:	
  4850                           
  4851                           	psect	text13
  4852  05C2                     __ptext13:	
  4853 ;; *************** function _Key_Process *****************
  4854 ;; Defined at:
  4855 ;;		line 42 in file "mcc_generated_files/key.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  i               2   63[BANK0 ] unsigned int 
  4860 ;;  data_temp       2   60[BANK0 ] unsigned int 
  4861 ;;  gKeyValue       1   62[BANK0 ] unsigned char 
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  1    wreg      void 
  4864 ;; Registers used:
  4865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;Total ram usage:        6 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:   11
  4878 ;; This function calls:
  4879 ;;		_EUSART_Write
  4880 ;;		_FLASH_ReadWord
  4881 ;;		_Key_Scan
  4882 ;;		_Save_Write_time
  4883 ;;		_SendCmd_1621
  4884 ;;		_Set_finish_flag
  4885 ;;		_Set_start_flag
  4886 ;;		_Write_Flash_finish
  4887 ;;		_Write_Flash_head
  4888 ;;		_temperature_process
  4889 ;; This function is called by:
  4890 ;;		_main
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _Key_Process
  4896  05C2                     _Key_Process:	
  4897                           
  4898                           ;key.c: 44: unsigned char gKeyValue=0;
  4899                           
  4900                           ;incstack = 0
  4901                           ; Regs used in _Key_Process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4902  05C2  0020               	movlb	0	; select bank0
  4903  05C3  01DE               	clrf	Key_Process@gKeyValue
  4904                           
  4905                           ;key.c: 46: unsigned int i;
  4906                           ;key.c: 47: unsigned int data_temp;
  4907                           ;key.c: 49: LongPressSec = 0;
  4908  05C4  0021               	movlb	1	; select bank1
  4909  05C5  01BA               	clrf	_LongPressSec^(0+128)
  4910                           
  4911                           ;key.c: 50: gKeyValue=Key_Scan();
  4912  05C6  3197  27DD  3185   	fcall	_Key_Scan
  4913  05C9  0020               	movlb	0	; select bank0
  4914  05CA  00DB               	movwf	??_Key_Process
  4915  05CB  085B               	movf	??_Key_Process,w
  4916  05CC  00DE               	movwf	Key_Process@gKeyValue
  4917                           
  4918                           ;key.c: 51: if(gKeyValue)
  4919  05CD  085E               	movf	Key_Process@gKeyValue,w
  4920  05CE  1903               	btfsc	3,2
  4921  05CF  0008               	return
  4922                           
  4923                           ;key.c: 52: {
  4924                           ;key.c: 53: do { LATA3 = 0; } while(0);
  4925  05D0  0022               	movlb	2	; select bank2
  4926  05D1  118C               	bcf	12,3	;volatile
  4927                           
  4928                           ;key.c: 54: if( Record_flag == 1 ) do { LATA4 = 0; } while(0);
  4929  05D2  0020               	movlb	0	; select bank0
  4930  05D3  0366               	decf	_Record_flag,w
  4931  05D4  1D03               	btfss	3,2
  4932  05D5  2E5E               	goto	l6220
  4933  05D6  0022               	movlb	2	; select bank2
  4934  05D7  120C               	bcf	12,4	;volatile
  4935                           
  4936                           ;key.c: 55: switch(gKeyValue)
  4937  05D8  2E5E               	goto	l6220
  4938  05D9                     l972:	
  4939                           ;key.c: 58: while( !(LongPressSec > 2 || RB5 == 1) ) asm("clrwdt");
  4940                           
  4941                           ;key.c: 56: {
  4942                           ;key.c: 57: case 0x01:
  4943                           
  4944  05D9  0064               	clrwdt	;# 
  4945  05DA                     l6168:	
  4946  05DA  3003               	movlw	3
  4947  05DB  0021               	movlb	1	; select bank1
  4948  05DC  023A               	subwf	_LongPressSec^(0+128),w
  4949  05DD  1803               	skipnc
  4950  05DE  2DE2               	goto	l6172
  4951  05DF  0020               	movlb	0	; select bank0
  4952  05E0  1E8D               	btfss	13,5	;volatile
  4953  05E1  2DD9               	goto	l972
  4954  05E2                     l6172:	
  4955                           
  4956                           ;key.c: 59: if(LongPressSec > 2)
  4957  05E2  3003               	movlw	3
  4958  05E3  0021               	movlb	1	; select bank1
  4959  05E4  023A               	subwf	_LongPressSec^(0+128),w
  4960  05E5  1C03               	skipc
  4961  05E6  2DEF               	goto	l976
  4962                           
  4963                           ;key.c: 60: {
  4964                           ;key.c: 61: do { LATA2 = 0; } while(0);
  4965  05E7  0022               	movlb	2	; select bank2
  4966  05E8  110C               	bcf	12,2	;volatile
  4967                           
  4968                           ;key.c: 62: do { LATA3 = 1; } while(0);
  4969  05E9  158C               	bsf	12,3	;volatile
  4970                           
  4971                           ;key.c: 63: SendCmd_1621(0x04);
  4972  05EA  3004               	movlw	4
  4973  05EB  3195  25AC  3185   	fcall	_SendCmd_1621
  4974                           
  4975                           ;key.c: 64: }
  4976  05EE  2E20               	goto	l984
  4977  05EF                     l976:	
  4978                           
  4979                           ;key.c: 66: else
  4980                           ;key.c: 67: {
  4981                           ;key.c: 68: SWDTEN = 0;
  4982  05EF  1017               	bcf	23,0	;volatile
  4983                           
  4984                           ;key.c: 69: for(i=0x2000;i<0x2000+1000;i++)
  4985  05F0  3000               	movlw	0
  4986  05F1  0020               	movlb	0	; select bank0
  4987  05F2  00DF               	movwf	Key_Process@i
  4988  05F3  3020               	movlw	32
  4989  05F4  00E0               	movwf	Key_Process@i+1
  4990  05F5  3023               	movlw	35
  4991  05F6  0260               	subwf	Key_Process@i+1,w
  4992  05F7  30E8               	movlw	232
  4993  05F8  1903               	skipnz
  4994  05F9  025F               	subwf	Key_Process@i,w
  4995  05FA  1803               	btfsc	3,0
  4996  05FB  2E1D               	goto	l983
  4997  05FC                     l6180:	
  4998                           
  4999                           ;key.c: 70: {
  5000                           ;key.c: 71: data_temp = FLASH_ReadWord(i);
  5001  05FC  0860               	movf	Key_Process@i+1,w
  5002  05FD  00A2               	movwf	FLASH_ReadWord@flashAddr+1
  5003  05FE  085F               	movf	Key_Process@i,w
  5004  05FF  00A1               	movwf	FLASH_ReadWord@flashAddr
  5005  0600  3196  26F7  3185   	fcall	_FLASH_ReadWord
  5006  0603  0020               	movlb	0	; select bank0
  5007  0604  0822               	movf	?_FLASH_ReadWord+1,w
  5008  0605  00DD               	movwf	Key_Process@data_temp+1
  5009  0606  0821               	movf	?_FLASH_ReadWord,w
  5010  0607  00DC               	movwf	Key_Process@data_temp
  5011                           
  5012                           ;key.c: 72: EUSART_Write(data_temp>>8);
  5013  0608  085D               	movf	Key_Process@data_temp+1,w
  5014  0609  3195  251A  3185   	fcall	_EUSART_Write
  5015                           
  5016                           ;key.c: 73: EUSART_Write(data_temp&0xff);
  5017  060C  0020               	movlb	0	; select bank0
  5018  060D  085C               	movf	Key_Process@data_temp,w
  5019  060E  3195  251A  3185   	fcall	_EUSART_Write
  5020  0611  3001               	movlw	1
  5021  0612  0020               	movlb	0	; select bank0
  5022  0613  07DF               	addwf	Key_Process@i,f
  5023  0614  3000               	movlw	0
  5024  0615  3DE0               	addwfc	Key_Process@i+1,f
  5025  0616  3023               	movlw	35
  5026  0617  0260               	subwf	Key_Process@i+1,w
  5027  0618  30E8               	movlw	232
  5028  0619  1903               	skipnz
  5029  061A  025F               	subwf	Key_Process@i,w
  5030  061B  1C03               	skipc
  5031  061C  2DFC               	goto	l6180
  5032  061D                     l983:	
  5033                           
  5034                           ;key.c: 75: }
  5035                           ;key.c: 77: SWDTEN = 1;
  5036  061D  0021               	movlb	1	; select bank1
  5037  061E  1417               	bsf	23,0	;volatile
  5038  061F  0064               	clrwdt	;# 
  5039  0620                     l984:	
  5040                           ;key.c: 80: }
  5041                           ;key.c: 82: while(RB5 == 0) asm("clrwdt");
  5042                           
  5043  0620  0020               	movlb	0	; select bank0
  5044  0621  1A8D               	btfsc	13,5	;volatile
  5045  0622  0008               	return
  5046  0623  0064               	clrwdt	;# 
  5047  0624  2E20               	goto	l984
  5048  0625                     l990:	
  5049                           ;key.c: 85: while( !(LongPressSec > 2 || RA7 == 1) )asm("clrwdt");
  5050                           
  5051                           ;key.c: 84: case 0x02:
  5052                           
  5053                           ;key.c: 83: break;
  5054                           
  5055  0625  0064               	clrwdt	;# 
  5056  0626                     l6186:	
  5057  0626  3003               	movlw	3
  5058  0627  0021               	movlb	1	; select bank1
  5059  0628  023A               	subwf	_LongPressSec^(0+128),w
  5060  0629  1803               	skipnc
  5061  062A  2E2E               	goto	l6190
  5062  062B  0020               	movlb	0	; select bank0
  5063  062C  1F8C               	btfss	12,7	;volatile
  5064  062D  2E25               	goto	l990
  5065  062E                     l6190:	
  5066                           
  5067                           ;key.c: 86: if(LongPressSec > 2)
  5068  062E  3003               	movlw	3
  5069  062F  0021               	movlb	1	; select bank1
  5070  0630  023A               	subwf	_LongPressSec^(0+128),w
  5071  0631  1C03               	skipc
  5072  0632  2E51               	goto	l6214
  5073                           
  5074                           ;key.c: 87: {
  5075                           ;key.c: 88: if(Record_flag == 0)
  5076  0633  0020               	movlb	0	; select bank0
  5077  0634  0866               	movf	_Record_flag,w
  5078  0635  1D03               	btfss	3,2
  5079  0636  2E4A               	goto	l6210
  5080                           
  5081                           ;key.c: 89: {
  5082                           ;key.c: 90: Set_start_flag();
  5083  0637  3194  24D8  3185   	fcall	_Set_start_flag
  5084                           
  5085                           ;key.c: 91: Write_Flash_head();
  5086  063A  3197  279A  3185   	fcall	_Write_Flash_head
  5087                           
  5088                           ;key.c: 92: Save_Write_time();
  5089  063D  318E  269C  3185   	fcall	_Save_Write_time
  5090                           
  5091                           ;key.c: 93: Cur_temperature_time_ch1 = 0;
  5092  0640  0021               	movlb	1	; select bank1
  5093  0641  01B8               	clrf	_Cur_temperature_time_ch1^(0+128)
  5094                           
  5095                           ;key.c: 94: Cur_temperature_time_ch2 = 0;
  5096  0642  01B9               	clrf	_Cur_temperature_time_ch2^(0+128)
  5097                           
  5098                           ;key.c: 95: CH1_temperature = 0;
  5099  0643  01AE               	clrf	_CH1_temperature^(0+128)
  5100  0644  01AF               	clrf	(_CH1_temperature+1)^(0+128)
  5101                           
  5102                           ;key.c: 96: CH2_temperature = 0;
  5103  0645  01B0               	clrf	_CH2_temperature^(0+128)
  5104  0646  01B1               	clrf	(_CH2_temperature+1)^(0+128)
  5105                           
  5106                           ;key.c: 97: time_count = 0;
  5107  0647  0020               	movlb	0	; select bank0
  5108  0648  01E9               	clrf	_time_count
  5109                           
  5110                           ;key.c: 98: }
  5111  0649  2E59               	goto	l998
  5112  064A                     l6210:	
  5113                           
  5114                           ;key.c: 99: else
  5115                           ;key.c: 100: {
  5116                           ;key.c: 101: Set_finish_flag();
  5117  064A  3194  24CE  3185   	fcall	_Set_finish_flag
  5118                           
  5119                           ;key.c: 102: Write_Flash_finish();
  5120  064D  3197  2779  3185   	fcall	_Write_Flash_finish
  5121                           
  5122                           ;key.c: 103: }
  5123                           ;key.c: 104: }
  5124  0650  2E59               	goto	l998
  5125  0651                     l6214:	
  5126                           
  5127                           ;key.c: 105: else
  5128                           ;key.c: 106: {
  5129                           ;key.c: 107: time_count = 5;
  5130  0651  3005               	movlw	5
  5131  0652  0020               	movlb	0	; select bank0
  5132  0653  00DB               	movwf	??_Key_Process
  5133  0654  085B               	movf	??_Key_Process,w
  5134  0655  00E9               	movwf	_time_count
  5135                           
  5136                           ;key.c: 108: temperature_process();
  5137  0656  3189  21DA  3185   	fcall	_temperature_process
  5138  0659                     l998:	
  5139                           ;key.c: 109: }
  5140                           ;key.c: 110: while(RA7 == 0)asm("clrwdt");
  5141                           
  5142  0659  0020               	movlb	0	; select bank0
  5143  065A  1B8C               	btfsc	12,7	;volatile
  5144  065B  0008               	return
  5145  065C  0064               	clrwdt	;# 
  5146  065D  2E59               	goto	l998
  5147  065E                     l6220:	
  5148                           ;key.c: 113: }
  5149                           
  5150                           ;key.c: 112: default:break;
  5151                           
  5152                           ;key.c: 111: break;
  5153                           
  5154  065E  0020               	movlb	0	; select bank0
  5155  065F  085E               	movf	Key_Process@gKeyValue,w
  5156                           
  5157                           ; Switch size 1, requested type "space"
  5158                           ; Number of cases is 2, Range of values is 1 to 2
  5159                           ; switch strategies available:
  5160                           ; Name         Instructions Cycles
  5161                           ; simple_byte            7     4 (average)
  5162                           ; direct_byte           13     9 (fixed)
  5163                           ; jumptable            263     9 (fixed)
  5164                           ;	Chosen strategy is simple_byte
  5165  0660  3A01               	xorlw	1	; case 1
  5166  0661  1903               	skipnz
  5167  0662  2DDA               	goto	l6168
  5168  0663  3A03               	xorlw	3	; case 2
  5169  0664  1903               	skipnz
  5170  0665  2E26               	goto	l6186
  5171  0666  2E68               	goto	l1002
  5172  0667  0008               	return
  5173  0668                     l1002:	
  5174  0668  0008               	return
  5175  0669                     __end_of_Key_Process:	
  5176                           
  5177                           	psect	text14
  5178  09DA                     __ptext14:	
  5179 ;; *************** function _temperature_process *****************
  5180 ;; Defined at:
  5181 ;;		line 381 in file "mcc_generated_files/max31856.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;		None
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;		None
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  1    wreg      void 
  5188 ;; Registers used:
  5189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;Total ram usage:        0 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:   10
  5202 ;; This function calls:
  5203 ;;		_Two_Display
  5204 ;;		_one_temperature_trans
  5205 ;;		_temperature_display
  5206 ;;		_time_Display
  5207 ;; This function is called by:
  5208 ;;		_main
  5209 ;;		_Key_Process
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           
  5214                           ;psect for function _temperature_process
  5215  09DA                     _temperature_process:	
  5216                           
  5217                           ;max31856.c: 383: switch(time_count)
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _temperature_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5221  09DA  29FE               	goto	l6050
  5222  09DB                     l6018:	
  5223                           ;max31856.c: 384: {
  5224                           ;max31856.c: 385: case 0:
  5225                           
  5226                           
  5227                           ;max31856.c: 386: Two_Display(1);
  5228  09DB  3001               	movlw	1
  5229  09DC  3189  210B  3189   	fcall	_Two_Display
  5230                           
  5231                           ;max31856.c: 387: do { LATA1 = 1; } while(0);
  5232  09DF  0022               	movlb	2	; select bank2
  5233  09E0  148C               	bsf	12,1	;volatile
  5234                           
  5235                           ;max31856.c: 388: do { LATA0 = 1; } while(0);
  5236  09E1  140C               	bsf	12,0	;volatile
  5237                           
  5238                           ;max31856.c: 389: do { LATA0 = 0; } while(0);
  5239  09E2  100C               	bcf	12,0	;volatile
  5240                           
  5241                           ;max31856.c: 390: one_temperature_trans();
  5242  09E3  318B  230C         	fcall	_one_temperature_trans
  5243                           
  5244                           ;max31856.c: 391: do { LATA0 = 1; } while(0);
  5245  09E5  0022               	movlb	2	; select bank2
  5246  09E6  140C               	bsf	12,0	;volatile
  5247                           
  5248                           ;max31856.c: 392: break;
  5249  09E7  0008               	return
  5250  09E8                     l6030:	
  5251                           ;max31856.c: 393: case 1:
  5252                           
  5253                           
  5254                           ;max31856.c: 394: temperature_display();
  5255  09E8  318A  2288         	fcall	_temperature_display
  5256                           
  5257                           ;max31856.c: 395: break;
  5258  09EA  0008               	return
  5259  09EB                     l6032:	
  5260                           ;max31856.c: 396: case 2:
  5261                           
  5262                           
  5263                           ;max31856.c: 397: Two_Display(2);
  5264  09EB  3002               	movlw	2
  5265  09EC  3189  210B  3189   	fcall	_Two_Display
  5266                           
  5267                           ;max31856.c: 398: do { LATA0 = 1; } while(0);
  5268  09EF  0022               	movlb	2	; select bank2
  5269  09F0  140C               	bsf	12,0	;volatile
  5270                           
  5271                           ;max31856.c: 399: do { LATA1 = 1; } while(0);
  5272  09F1  148C               	bsf	12,1	;volatile
  5273                           
  5274                           ;max31856.c: 400: do { LATA1 = 0; } while(0);
  5275  09F2  108C               	bcf	12,1	;volatile
  5276                           
  5277                           ;max31856.c: 401: one_temperature_trans();
  5278  09F3  318B  230C         	fcall	_one_temperature_trans
  5279                           
  5280                           ;max31856.c: 402: do { LATA1 = 1; } while(0);
  5281  09F5  0022               	movlb	2	; select bank2
  5282  09F6  148C               	bsf	12,1	;volatile
  5283                           
  5284                           ;max31856.c: 403: break;
  5285  09F7  0008               	return
  5286  09F8                     l6044:	
  5287                           ;max31856.c: 404: case 3:
  5288                           
  5289                           
  5290                           ;max31856.c: 405: temperature_display();
  5291  09F8  318A  2288         	fcall	_temperature_display
  5292                           
  5293                           ;max31856.c: 406: break;
  5294  09FA  0008               	return
  5295  09FB                     l6046:	
  5296                           ;max31856.c: 407: case 5:
  5297                           
  5298                           
  5299                           ;max31856.c: 408: time_Display();
  5300  09FB  3187  270D         	fcall	_time_Display
  5301                           
  5302                           ;max31856.c: 411: }
  5303                           
  5304                           ;max31856.c: 410: default:break;
  5305                           
  5306                           ;max31856.c: 409: break;
  5307  09FD  0008               	return
  5308  09FE                     l6050:	
  5309  09FE  0020               	movlb	0	; select bank0
  5310  09FF  0869               	movf	_time_count,w
  5311                           
  5312                           ; Switch size 1, requested type "space"
  5313                           ; Number of cases is 5, Range of values is 0 to 5
  5314                           ; switch strategies available:
  5315                           ; Name         Instructions Cycles
  5316                           ; simple_byte           16     9 (average)
  5317                           ; direct_byte           18     6 (fixed)
  5318                           ; jumptable            260     6 (fixed)
  5319                           ;	Chosen strategy is simple_byte
  5320  0A00  3A00               	xorlw	0	; case 0
  5321  0A01  1903               	skipnz
  5322  0A02  29DB               	goto	l6018
  5323  0A03  3A01               	xorlw	1	; case 1
  5324  0A04  1903               	skipnz
  5325  0A05  29E8               	goto	l6030
  5326  0A06  3A03               	xorlw	3	; case 2
  5327  0A07  1903               	skipnz
  5328  0A08  29EB               	goto	l6032
  5329  0A09  3A01               	xorlw	1	; case 3
  5330  0A0A  1903               	skipnz
  5331  0A0B  29F8               	goto	l6044
  5332  0A0C  3A06               	xorlw	6	; case 5
  5333  0A0D  1903               	skipnz
  5334  0A0E  29FB               	goto	l6046
  5335  0A0F  2A10               	goto	l674
  5336  0A10                     l674:	
  5337  0A10  0008               	return
  5338  0A11                     __end_of_temperature_process:	
  5339                           
  5340                           	psect	text15
  5341  070D                     __ptext15:	
  5342 ;; *************** function _time_Display *****************
  5343 ;; Defined at:
  5344 ;;		line 167 in file "mcc_generated_files/ht1621.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;		None
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  num             4   25[BANK0 ] unsigned char [4]
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;Total ram usage:        7 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    6
  5365 ;; This function calls:
  5366 ;;		_Bq32k_Rtc_Read_Time
  5367 ;;		_WriteAll_1621
  5368 ;;		___awdiv
  5369 ;;		___awmod
  5370 ;; This function is called by:
  5371 ;;		_temperature_process
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           
  5376                           ;psect for function _time_Display
  5377  070D                     _time_Display:	
  5378                           
  5379                           ;ht1621.c: 169: unsigned char num[4]={0};
  5380                           
  5381                           ;incstack = 0
  5382                           ; Regs used in _time_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5383  070D  0022               	movlb	2	; select bank2
  5384  070E  0833               	movf	(time_Display@F2138+3)^(0+256),w
  5385  070F  0020               	movlb	0	; select bank0
  5386  0710  00BC               	movwf	time_Display@num+3
  5387  0711  0022               	movlb	2	; select bank2
  5388  0712  0832               	movf	(time_Display@F2138+2)^(0+256),w
  5389  0713  0020               	movlb	0	; select bank0
  5390  0714  00BB               	movwf	time_Display@num+2
  5391  0715  0022               	movlb	2	; select bank2
  5392  0716  0831               	movf	(time_Display@F2138+1)^(0+256),w
  5393  0717  0020               	movlb	0	; select bank0
  5394  0718  00BA               	movwf	time_Display@num+1
  5395  0719  0022               	movlb	2	; select bank2
  5396  071A  0830               	movf	time_Display@F2138^(0+256),w
  5397  071B  0020               	movlb	0	; select bank0
  5398  071C  00B9               	movwf	time_Display@num
  5399                           
  5400                           ;ht1621.c: 170: Bq32k_Rtc_Read_Time(&rtc_tm);
  5401  071D  30E3               	movlw	(low (_rtc_tm| 0))& (0+255)
  5402  071E  318C  24F7  3187   	fcall	_Bq32k_Rtc_Read_Time
  5403                           
  5404                           ;ht1621.c: 171: num[0] = Dis_TAB[rtc_tm.hours / 10];
  5405  0721  300A               	movlw	10
  5406  0722  0020               	movlb	0	; select bank0
  5407  0723  00A1               	movwf	___awdiv@divisor
  5408  0724  3000               	movlw	0
  5409  0725  00A2               	movwf	___awdiv@divisor+1
  5410  0726  0021               	movlb	1	; select bank1
  5411  0727  0865               	movf	(_rtc_tm^(0+128)+2),w
  5412  0728  0020               	movlb	0	; select bank0
  5413  0729  00B6               	movwf	??_time_Display
  5414  072A  01B7               	clrf	??_time_Display+1
  5415  072B  0836               	movf	??_time_Display,w
  5416  072C  00A3               	movwf	___awdiv@dividend
  5417  072D  0837               	movf	??_time_Display+1,w
  5418  072E  00A4               	movwf	___awdiv@dividend+1
  5419  072F  318C  2445  3187   	fcall	___awdiv
  5420  0732  0020               	movlb	0	; select bank0
  5421  0733  0822               	movf	?___awdiv+1,w
  5422  0734  0085               	movwf	5
  5423  0735  0821               	movf	?___awdiv,w
  5424  0736  0084               	movwf	4
  5425  0737  3000               	movlw	low (_Dis_TAB| (0+32768))
  5426  0738  0784               	addwf	4,f
  5427  0739  3098               	movlw	high (_Dis_TAB| (0+32768))
  5428  073A  3D85               	addwfc	5,f
  5429  073B  0800               	movf	0,w	;code access
  5430  073C  00B8               	movwf	??_time_Display+2
  5431  073D  0838               	movf	??_time_Display+2,w
  5432  073E  00B9               	movwf	time_Display@num
  5433                           
  5434                           ;ht1621.c: 172: num[0] |= 0x08;
  5435  073F  15B9               	bsf	time_Display@num,3
  5436                           
  5437                           ;ht1621.c: 173: num[1] = Dis_TAB[rtc_tm.hours % 10];
  5438  0740  300A               	movlw	10
  5439  0741  00A1               	movwf	___awmod@divisor
  5440  0742  3000               	movlw	0
  5441  0743  00A2               	movwf	___awmod@divisor+1
  5442  0744  0021               	movlb	1	; select bank1
  5443  0745  0865               	movf	(_rtc_tm^(0+128)+2),w
  5444  0746  0020               	movlb	0	; select bank0
  5445  0747  00B6               	movwf	??_time_Display
  5446  0748  01B7               	clrf	??_time_Display+1
  5447  0749  0836               	movf	??_time_Display,w
  5448  074A  00A3               	movwf	___awmod@dividend
  5449  074B  0837               	movf	??_time_Display+1,w
  5450  074C  00A4               	movwf	___awmod@dividend+1
  5451  074D  318A  22C6  3187   	fcall	___awmod
  5452  0750  0020               	movlb	0	; select bank0
  5453  0751  0822               	movf	?___awmod+1,w
  5454  0752  0085               	movwf	5
  5455  0753  0821               	movf	?___awmod,w
  5456  0754  0084               	movwf	4
  5457  0755  3000               	movlw	low (_Dis_TAB| (0+32768))
  5458  0756  0784               	addwf	4,f
  5459  0757  3098               	movlw	high (_Dis_TAB| (0+32768))
  5460  0758  3D85               	addwfc	5,f
  5461  0759  0800               	movf	0,w	;code access
  5462  075A  00B8               	movwf	??_time_Display+2
  5463  075B  0838               	movf	??_time_Display+2,w
  5464  075C  00BA               	movwf	time_Display@num+1
  5465                           
  5466                           ;ht1621.c: 174: num[2] = Dis_TAB[rtc_tm.minutes / 10];
  5467  075D  300A               	movlw	10
  5468  075E  00A1               	movwf	___awdiv@divisor
  5469  075F  3000               	movlw	0
  5470  0760  00A2               	movwf	___awdiv@divisor+1
  5471  0761  0021               	movlb	1	; select bank1
  5472  0762  0864               	movf	(_rtc_tm^(0+128)+1),w
  5473  0763  0020               	movlb	0	; select bank0
  5474  0764  00B6               	movwf	??_time_Display
  5475  0765  01B7               	clrf	??_time_Display+1
  5476  0766  0836               	movf	??_time_Display,w
  5477  0767  00A3               	movwf	___awdiv@dividend
  5478  0768  0837               	movf	??_time_Display+1,w
  5479  0769  00A4               	movwf	___awdiv@dividend+1
  5480  076A  318C  2445  3187   	fcall	___awdiv
  5481  076D  0020               	movlb	0	; select bank0
  5482  076E  0822               	movf	?___awdiv+1,w
  5483  076F  0085               	movwf	5
  5484  0770  0821               	movf	?___awdiv,w
  5485  0771  0084               	movwf	4
  5486  0772  3000               	movlw	low (_Dis_TAB| (0+32768))
  5487  0773  0784               	addwf	4,f
  5488  0774  3098               	movlw	high (_Dis_TAB| (0+32768))
  5489  0775  3D85               	addwfc	5,f
  5490  0776  0800               	movf	0,w	;code access
  5491  0777  00B8               	movwf	??_time_Display+2
  5492  0778  0838               	movf	??_time_Display+2,w
  5493  0779  00BB               	movwf	time_Display@num+2
  5494                           
  5495                           ;ht1621.c: 175: num[3] = Dis_TAB[rtc_tm.minutes % 10];
  5496  077A  300A               	movlw	10
  5497  077B  00A1               	movwf	___awmod@divisor
  5498  077C  3000               	movlw	0
  5499  077D  00A2               	movwf	___awmod@divisor+1
  5500  077E  0021               	movlb	1	; select bank1
  5501  077F  0864               	movf	(_rtc_tm^(0+128)+1),w
  5502  0780  0020               	movlb	0	; select bank0
  5503  0781  00B6               	movwf	??_time_Display
  5504  0782  01B7               	clrf	??_time_Display+1
  5505  0783  0836               	movf	??_time_Display,w
  5506  0784  00A3               	movwf	___awmod@dividend
  5507  0785  0837               	movf	??_time_Display+1,w
  5508  0786  00A4               	movwf	___awmod@dividend+1
  5509  0787  318A  22C6  3187   	fcall	___awmod
  5510  078A  0020               	movlb	0	; select bank0
  5511  078B  0822               	movf	?___awmod+1,w
  5512  078C  0085               	movwf	5
  5513  078D  0821               	movf	?___awmod,w
  5514  078E  0084               	movwf	4
  5515  078F  3000               	movlw	low (_Dis_TAB| (0+32768))
  5516  0790  0784               	addwf	4,f
  5517  0791  3098               	movlw	high (_Dis_TAB| (0+32768))
  5518  0792  3D85               	addwfc	5,f
  5519  0793  0800               	movf	0,w	;code access
  5520  0794  00B8               	movwf	??_time_Display+2
  5521  0795  0838               	movf	??_time_Display+2,w
  5522  0796  00BC               	movwf	time_Display@num+3
  5523                           
  5524                           ;ht1621.c: 176: WriteAll_1621(0, num, 4);
  5525  0797  3039               	movlw	low time_Display@num
  5526  0798  00A5               	movwf	WriteAll_1621@p
  5527  0799  3000               	movlw	high time_Display@num
  5528  079A  00A6               	movwf	WriteAll_1621@p+1
  5529  079B  3004               	movlw	4
  5530  079C  00B6               	movwf	??_time_Display
  5531  079D  0836               	movf	??_time_Display,w
  5532  079E  00A7               	movwf	WriteAll_1621@cnt
  5533  079F  3000               	movlw	0
  5534  07A0  3189  2170         	fcall	_WriteAll_1621
  5535  07A2  0008               	return
  5536  07A3                     __end_of_time_Display:	
  5537                           
  5538                           	psect	text16
  5539  0A88                     __ptext16:	
  5540 ;; *************** function _temperature_display *****************
  5541 ;; Defined at:
  5542 ;;		line 343 in file "mcc_generated_files/max31856.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;		None
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;		None
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;Total ram usage:        1 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    9
  5563 ;; This function calls:
  5564 ;;		_Tc_Display
  5565 ;;		_err_Display
  5566 ;;		_maxim_31856_write_register
  5567 ;;		_maxim_clear_fault_status
  5568 ;;		_tc_temperature_trans
  5569 ;; This function is called by:
  5570 ;;		_temperature_process
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           
  5575                           ;psect for function _temperature_display
  5576  0A88                     _temperature_display:	
  5577                           
  5578                           ;max31856.c: 345: if(uch_sr==(uint8_t)0x00)
  5579                           
  5580                           ;incstack = 0
  5581                           ; Regs used in _temperature_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5582  0A88  0021               	movlb	1	; select bank1
  5583  0A89  084C               	movf	_uch_sr^(0+128),w
  5584  0A8A  1D03               	btfss	3,2
  5585  0A8B  2AA1               	goto	l5848
  5586                           
  5587                           ;max31856.c: 346: {
  5588                           ;max31856.c: 347: tc_temperature_trans();
  5589  0A8C  3180  2058  318A   	fcall	_tc_temperature_trans
  5590                           
  5591                           ;max31856.c: 348: Tc_Display();
  5592  0A8F  3184  24F1  318A   	fcall	_Tc_Display
  5593                           
  5594                           ;max31856.c: 349: if(time_count == 1)
  5595  0A92  0020               	movlb	0	; select bank0
  5596  0A93  0369               	decf	_time_count,w
  5597  0A94  1D03               	btfss	3,2
  5598  0A95  2A99               	goto	l5844
  5599                           
  5600                           ;max31856.c: 350: {
  5601                           ;max31856.c: 351: CH1_state = 0;
  5602  0A96  0021               	movlb	1	; select bank1
  5603  0A97  01B6               	clrf	_CH1_state^(0+128)
  5604                           
  5605                           ;max31856.c: 352: }
  5606  0A98  0008               	return
  5607  0A99                     l5844:	
  5608                           
  5609                           ;max31856.c: 353: else if(time_count == 3)
  5610  0A99  3003               	movlw	3
  5611  0A9A  0020               	movlb	0	; select bank0
  5612  0A9B  0669               	xorwf	_time_count,w
  5613  0A9C  1D03               	btfss	3,2
  5614  0A9D  0008               	return
  5615                           
  5616                           ;max31856.c: 354: {
  5617                           ;max31856.c: 355: CH2_state = 0;
  5618  0A9E  0021               	movlb	1	; select bank1
  5619  0A9F  01B7               	clrf	_CH2_state^(0+128)
  5620                           
  5621                           ;max31856.c: 356: }
  5622                           ;max31856.c: 357: }
  5623  0AA0  0008               	return
  5624  0AA1                     l5848:	
  5625                           
  5626                           ;max31856.c: 358: else
  5627                           ;max31856.c: 359: {
  5628                           ;max31856.c: 360: if(time_count == 1)
  5629  0AA1  0020               	movlb	0	; select bank0
  5630  0AA2  0369               	decf	_time_count,w
  5631  0AA3  1D03               	btfss	3,2
  5632  0AA4  2AA9               	goto	l5852
  5633                           
  5634                           ;max31856.c: 361: {
  5635                           ;max31856.c: 362: CH1_state = 1;
  5636  0AA5  0021               	movlb	1	; select bank1
  5637  0AA6  01B6               	clrf	_CH1_state^(0+128)
  5638  0AA7  0AB6               	incf	_CH1_state^(0+128),f
  5639                           
  5640                           ;max31856.c: 363: }
  5641  0AA8  2AB1               	goto	l5856
  5642  0AA9                     l5852:	
  5643                           
  5644                           ;max31856.c: 364: else if(time_count == 3)
  5645  0AA9  3003               	movlw	3
  5646  0AAA  0020               	movlb	0	; select bank0
  5647  0AAB  0669               	xorwf	_time_count,w
  5648  0AAC  1D03               	btfss	3,2
  5649  0AAD  2AB1               	goto	l5856
  5650                           
  5651                           ;max31856.c: 365: {
  5652                           ;max31856.c: 366: CH2_state = 1;
  5653  0AAE  0021               	movlb	1	; select bank1
  5654  0AAF  01B7               	clrf	_CH2_state^(0+128)
  5655  0AB0  0AB7               	incf	_CH2_state^(0+128),f
  5656  0AB1                     l5856:	
  5657                           
  5658                           ;max31856.c: 367: }
  5659                           ;max31856.c: 368: err_Display();
  5660  0AB1  3188  2054  318A   	fcall	_err_Display
  5661                           
  5662                           ;max31856.c: 369: maxim_31856_write_register(0x82, 0xFF);
  5663  0AB4  30FF               	movlw	255
  5664  0AB5  0020               	movlb	0	; select bank0
  5665  0AB6  00DA               	movwf	??_temperature_display
  5666  0AB7  085A               	movf	??_temperature_display,w
  5667  0AB8  00A2               	movwf	maxim_31856_write_register@uch_register_value
  5668  0AB9  3082               	movlw	130
  5669  0ABA  3195  252A  318A   	fcall	_maxim_31856_write_register
  5670                           
  5671                           ;max31856.c: 370: maxim_clear_fault_status();
  5672  0ABD  3195  254A  318A   	fcall	_maxim_clear_fault_status
  5673                           
  5674                           ;max31856.c: 371: maxim_31856_write_register(0x82, 0x00);
  5675  0AC0  0020               	movlb	0	; select bank0
  5676  0AC1  01A2               	clrf	maxim_31856_write_register@uch_register_value
  5677  0AC2  3082               	movlw	130
  5678  0AC3  3195  252A         	fcall	_maxim_31856_write_register
  5679  0AC5  0008               	return
  5680  0AC6                     __end_of_temperature_display:	
  5681                           
  5682                           	psect	text17
  5683  0058                     __ptext17:	
  5684 ;; *************** function _tc_temperature_trans *****************
  5685 ;; Defined at:
  5686 ;;		line 168 in file "mcc_generated_files/max31856.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  temperature_    2   56[BANK0 ] unsigned int 
  5691 ;;  var_time        2   54[BANK0 ] unsigned int 
  5692 ;;  temperature_    2   52[BANK0 ] unsigned int 
  5693 ;;  temperature_    2   50[BANK0 ] unsigned int 
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;Total ram usage:       12 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    8
  5710 ;; This function calls:
  5711 ;;		_Calculate_Time
  5712 ;;		_Save_Write_word
  5713 ;; This function is called by:
  5714 ;;		_temperature_display
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           
  5719                           ;psect for function _tc_temperature_trans
  5720  0058                     _tc_temperature_trans:	
  5721                           
  5722                           ;max31856.c: 170: unsigned int temperature_absolute = 0;
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _tc_temperature_trans: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5726  0058  0020               	movlb	0	; select bank0
  5727  0059  01D4               	clrf	tc_temperature_trans@temperature_absolute
  5728  005A  01D5               	clrf	tc_temperature_trans@temperature_absolute+1
  5729                           
  5730                           ;max31856.c: 171: unsigned int temperature_temp = 0;
  5731  005B  01D8               	clrf	tc_temperature_trans@temperature_temp
  5732  005C  01D9               	clrf	tc_temperature_trans@temperature_temp+1
  5733                           
  5734                           ;max31856.c: 172: unsigned int temperature_back = 0;
  5735  005D  01D2               	clrf	tc_temperature_trans@temperature_back
  5736  005E  01D3               	clrf	tc_temperature_trans@temperature_back+1
  5737                           
  5738                           ;max31856.c: 173: unsigned int var_time=0;
  5739  005F  01D6               	clrf	tc_temperature_trans@var_time
  5740  0060  01D7               	clrf	tc_temperature_trans@var_time+1
  5741                           
  5742                           ;max31856.c: 174: temperature_value = 0;
  5743  0061  3000               	movlw	0
  5744  0062  0021               	movlb	1	; select bank1
  5745  0063  00A7               	movwf	(_temperature_value+3)^(0+128)
  5746  0064  3000               	movlw	0
  5747  0065  00A6               	movwf	(_temperature_value+2)^(0+128)
  5748  0066  3000               	movlw	0
  5749  0067  00A5               	movwf	(_temperature_value+1)^(0+128)
  5750  0068  3000               	movlw	0
  5751  0069  00A4               	movwf	_temperature_value^(0+128)
  5752                           
  5753                           ;max31856.c: 175: temperature_value = (((uch_ltcbh&0x3f)<<8) | (uch_ltcbm) )>>1;
  5754  006A  303F               	movlw	63
  5755  006B  0548               	andwf	_uch_ltcbh^(0+128),w
  5756  006C  0020               	movlb	0	; select bank0
  5757  006D  00CE               	movwf	??_tc_temperature_trans
  5758  006E  084E               	movf	??_tc_temperature_trans,w
  5759  006F  00D0               	movwf	??_tc_temperature_trans+2
  5760  0070  0021               	movlb	1	; select bank1
  5761  0071  084A               	movf	_uch_ltcbm^(0+128),w
  5762  0072  0020               	movlb	0	; select bank0
  5763  0073  00CF               	movwf	??_tc_temperature_trans+1
  5764  0074  0D50               	rlf	??_tc_temperature_trans+2,w
  5765  0075  0CD0               	rrf	??_tc_temperature_trans+2,f
  5766  0076  0CCF               	rrf	??_tc_temperature_trans+1,f
  5767  0077  084F               	movf	??_tc_temperature_trans+1,w
  5768  0078  0021               	movlb	1	; select bank1
  5769  0079  00A4               	movwf	_temperature_value^(0+128)
  5770  007A  0020               	movlb	0	; select bank0
  5771  007B  0850               	movf	??_tc_temperature_trans+2,w
  5772  007C  0021               	movlb	1	; select bank1
  5773  007D  00A5               	movwf	(_temperature_value+1)^(0+128)
  5774  007E  0D89               	rlf	9,f
  5775  007F  3B89               	subwfb	9,f
  5776  0080  0989               	comf	9,f
  5777  0081  00A6               	movwf	(_temperature_value+2)^(0+128)
  5778  0082  00A7               	movwf	(_temperature_value+3)^(0+128)
  5779                           
  5780                           ;max31856.c: 176: if(uch_ltcbh & 0x80) temperature_value |=0x2000;
  5781  0083  1BC8               	btfsc	_uch_ltcbh^(0+128),7
  5782  0084  16A5               	bsf	(_temperature_value^(0+128)+1),5
  5783                           
  5784                           ;max31856.c: 177: temperature_temp = temperature_value;
  5785  0085  0825               	movf	(_temperature_value+1)^(0+128),w
  5786  0086  0020               	movlb	0	; select bank0
  5787  0087  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  5788  0088  0021               	movlb	1	; select bank1
  5789  0089  0824               	movf	_temperature_value^(0+128),w
  5790  008A  0020               	movlb	0	; select bank0
  5791  008B  00D8               	movwf	tc_temperature_trans@temperature_temp
  5792                           
  5793                           ;max31856.c: 180: if(time_count == 1 && Record_flag == 1)
  5794  008C  0369               	decf	_time_count,w
  5795  008D  1D03               	btfss	3,2
  5796  008E  293D               	goto	l5638
  5797  008F  0366               	decf	_Record_flag,w
  5798  0090  1D03               	btfss	3,2
  5799  0091  293D               	goto	l5638
  5800                           
  5801                           ;max31856.c: 181: {
  5802                           ;max31856.c: 182: temperature_back = CH1_temperature;
  5803  0092  0021               	movlb	1	; select bank1
  5804  0093  082F               	movf	(_CH1_temperature+1)^(0+128),w
  5805  0094  0020               	movlb	0	; select bank0
  5806  0095  00D3               	movwf	tc_temperature_trans@temperature_back+1
  5807  0096  0021               	movlb	1	; select bank1
  5808  0097  082E               	movf	_CH1_temperature^(0+128),w
  5809  0098  0020               	movlb	0	; select bank0
  5810  0099  00D2               	movwf	tc_temperature_trans@temperature_back
  5811                           
  5812                           ;max31856.c: 183: if( CH1_temperature & 0x2000 != temperature_temp & 0x2000)
  5813  009A  3020               	movlw	32
  5814  009B  0659               	xorwf	tc_temperature_trans@temperature_temp+1,w
  5815  009C  0458               	iorwf	tc_temperature_trans@temperature_temp,w
  5816  009D  1903               	btfsc	3,2
  5817  009E  28A1               	goto	u5020
  5818  009F  3001               	movlw	1
  5819  00A0  28A2               	goto	u5030
  5820  00A1                     u5020:	
  5821  00A1  3000               	movlw	0
  5822  00A2                     u5030:	
  5823  00A2  00CE               	movwf	??_tc_temperature_trans
  5824  00A3  01CF               	clrf	??_tc_temperature_trans+1
  5825  00A4  0021               	movlb	1	; select bank1
  5826  00A5  082E               	movf	_CH1_temperature^(0+128),w
  5827  00A6  0020               	movlb	0	; select bank0
  5828  00A7  054E               	andwf	??_tc_temperature_trans,w
  5829  00A8  00D0               	movwf	??_tc_temperature_trans+2
  5830  00A9  0021               	movlb	1	; select bank1
  5831  00AA  082F               	movf	(_CH1_temperature+1)^(0+128),w
  5832  00AB  0020               	movlb	0	; select bank0
  5833  00AC  054F               	andwf	??_tc_temperature_trans+1,w
  5834  00AD  00D1               	movwf	??_tc_temperature_trans+3
  5835  00AE  1AD1               	btfsc	??_tc_temperature_trans+3,5
  5836  00AF  2909               	goto	L6
  5837                           
  5838                           ;max31856.c: 196: else
  5839                           ;max31856.c: 197: {
  5840                           ;max31856.c: 198: if(CH1_temperature & 0x2000) CH1_temperature=0x3FFF-CH1_temperature + 
      +                          1 ;
  5841                           
  5842                           ;max31856.c: 195: }
  5843                           
  5844                           ;max31856.c: 194: CH1_temperature = temperature_value;
  5845                           
  5846                           ;max31856.c: 193: Cur_temperature_time_ch1 = 0;
  5847                           
  5848                           ;max31856.c: 192: Save_Write_word(temperature_value);
  5849                           
  5850                           ;max31856.c: 191: Save_Write_word(var_time);
  5851                           
  5852                           ;max31856.c: 189: var_time |= 0x2000;
  5853                           
  5854                           ;max31856.c: 187: if(CH1_state == 1) var_time |= 0x400;
  5855                           
  5856                           ;max31856.c: 186: var_time |= 0x100;
  5857                           
  5858                           ;max31856.c: 184: {
  5859                           ;max31856.c: 185: var_time = Calculate_Time();
  5860  00B0  0021               	movlb	1	; select bank1
  5861  00B1  1EAF               	btfss	(_CH1_temperature+1)^(0+128),5
  5862  00B2  28C6               	goto	l5610
  5863  00B3  092E               	comf	_CH1_temperature^(0+128),w
  5864  00B4  0020               	movlb	0	; select bank0
  5865  00B5  00CE               	movwf	??_tc_temperature_trans
  5866  00B6  0021               	movlb	1	; select bank1
  5867  00B7  092F               	comf	(_CH1_temperature+1)^(0+128),w
  5868  00B8  0020               	movlb	0	; select bank0
  5869  00B9  00CF               	movwf	??_tc_temperature_trans+1
  5870  00BA  0ACE               	incf	??_tc_temperature_trans,f
  5871  00BB  1903               	skipnz
  5872  00BC  0ACF               	incf	??_tc_temperature_trans+1,f
  5873  00BD  084E               	movf	??_tc_temperature_trans,w
  5874  00BE  3E00               	addlw	0
  5875  00BF  0021               	movlb	1	; select bank1
  5876  00C0  00AE               	movwf	_CH1_temperature^(0+128)
  5877  00C1  3040               	movlw	64
  5878  00C2  0020               	movlb	0	; select bank0
  5879  00C3  3D4F               	addwfc	??_tc_temperature_trans+1,w
  5880  00C4  0021               	movlb	1	; select bank1
  5881  00C5  00AF               	movwf	(_CH1_temperature+1)^(0+128)
  5882  00C6                     l5610:	
  5883                           
  5884                           ;max31856.c: 199: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  5885  00C6  0020               	movlb	0	; select bank0
  5886  00C7  1ED9               	btfss	tc_temperature_trans@temperature_temp+1,5
  5887  00C8  28D6               	goto	l5614
  5888  00C9  0958               	comf	tc_temperature_trans@temperature_temp,w
  5889  00CA  00CE               	movwf	??_tc_temperature_trans
  5890  00CB  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  5891  00CC  00CF               	movwf	??_tc_temperature_trans+1
  5892  00CD  0ACE               	incf	??_tc_temperature_trans,f
  5893  00CE  1903               	skipnz
  5894  00CF  0ACF               	incf	??_tc_temperature_trans+1,f
  5895  00D0  084E               	movf	??_tc_temperature_trans,w
  5896  00D1  3E00               	addlw	0
  5897  00D2  00D8               	movwf	tc_temperature_trans@temperature_temp
  5898  00D3  3040               	movlw	64
  5899  00D4  3D4F               	addwfc	??_tc_temperature_trans+1,w
  5900  00D5  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  5901  00D6                     l5614:	
  5902                           
  5903                           ;max31856.c: 200: if( temperature_temp > CH1_temperature ) temperature_absolute = temper
      +                          ature_temp - CH1_temperature;
  5904  00D6  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  5905  00D7  0021               	movlb	1	; select bank1
  5906  00D8  022F               	subwf	(_CH1_temperature+1)^(0+128),w
  5907  00D9  1D03               	skipz
  5908  00DA  28DF               	goto	u5085
  5909  00DB  0020               	movlb	0	; select bank0
  5910  00DC  0858               	movf	tc_temperature_trans@temperature_temp,w
  5911  00DD  0021               	movlb	1	; select bank1
  5912  00DE  022E               	subwf	_CH1_temperature^(0+128),w
  5913  00DF                     u5085:	
  5914  00DF  1803               	skipnc
  5915  00E0  28F0               	goto	l5618
  5916  00E1  092E               	comf	_CH1_temperature^(0+128),w
  5917  00E2  0020               	movlb	0	; select bank0
  5918  00E3  00CE               	movwf	??_tc_temperature_trans
  5919  00E4  0021               	movlb	1	; select bank1
  5920  00E5  092F               	comf	(_CH1_temperature+1)^(0+128),w
  5921  00E6  0020               	movlb	0	; select bank0
  5922  00E7  00CF               	movwf	??_tc_temperature_trans+1
  5923  00E8  0ACE               	incf	??_tc_temperature_trans,f
  5924  00E9  1903               	skipnz
  5925  00EA  0ACF               	incf	??_tc_temperature_trans+1,f
  5926  00EB  0858               	movf	tc_temperature_trans@temperature_temp,w
  5927  00EC  074E               	addwf	??_tc_temperature_trans,w
  5928  00ED  00D4               	movwf	tc_temperature_trans@temperature_absolute
  5929  00EE  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  5930  00EF  2900               	goto	L2
  5931  00F0                     l5618:	
  5932                           
  5933                           ;max31856.c: 201: else temperature_absolute = CH1_temperature - temperature_temp;
  5934  00F0  0020               	movlb	0	; select bank0
  5935  00F1  0958               	comf	tc_temperature_trans@temperature_temp,w
  5936  00F2  00CE               	movwf	??_tc_temperature_trans
  5937  00F3  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  5938  00F4  00CF               	movwf	??_tc_temperature_trans+1
  5939  00F5  0ACE               	incf	??_tc_temperature_trans,f
  5940  00F6  1903               	skipnz
  5941  00F7  0ACF               	incf	??_tc_temperature_trans+1,f
  5942  00F8  0021               	movlb	1	; select bank1
  5943  00F9  082E               	movf	_CH1_temperature^(0+128),w
  5944  00FA  0020               	movlb	0	; select bank0
  5945  00FB  074E               	addwf	??_tc_temperature_trans,w
  5946  00FC  00D4               	movwf	tc_temperature_trans@temperature_absolute
  5947  00FD  0021               	movlb	1	; select bank1
  5948  00FE  082F               	movf	(_CH1_temperature+1)^(0+128),w
  5949  00FF  0020               	movlb	0	; select bank0
  5950  0100                     L2:	
  5951  0100  3D4F               	addwfc	??_tc_temperature_trans+1,w
  5952  0101  00D5               	movwf	tc_temperature_trans@temperature_absolute+1
  5953                           
  5954                           ;max31856.c: 202: if( temperature_absolute > 4)
  5955  0102  3000               	movlw	0
  5956  0103  0255               	subwf	tc_temperature_trans@temperature_absolute+1,w
  5957  0104  3005               	movlw	5
  5958  0105  1903               	skipnz
  5959  0106  0254               	subwf	tc_temperature_trans@temperature_absolute,w
  5960  0107  1C03               	skipc
  5961  0108  2934               	goto	l5636
  5962  0109                     L6:	
  5963                           
  5964                           ;max31856.c: 203: {
  5965                           ;max31856.c: 204: var_time = Calculate_Time();
  5966  0109  3182  226D  3180   	fcall	_Calculate_Time
  5967  010C  0020               	movlb	0	; select bank0
  5968  010D  00CE               	movwf	??_tc_temperature_trans
  5969  010E  01CF               	clrf	??_tc_temperature_trans+1
  5970  010F  084E               	movf	??_tc_temperature_trans,w
  5971  0110  00D6               	movwf	tc_temperature_trans@var_time
  5972  0111  084F               	movf	??_tc_temperature_trans+1,w
  5973  0112  00D7               	movwf	tc_temperature_trans@var_time+1
  5974                           
  5975                           ;max31856.c: 205: var_time |= 0x100;
  5976  0113  1457               	bsf	tc_temperature_trans@var_time+1,0
  5977                           
  5978                           ;max31856.c: 206: if(CH1_state == 1) var_time |= 0x400;
  5979  0114  0021               	movlb	1	; select bank1
  5980  0115  0336               	decf	_CH1_state^(0+128),w
  5981  0116  1D03               	btfss	3,2
  5982  0117  291A               	goto	l602
  5983  0118  0020               	movlb	0	; select bank0
  5984  0119  1557               	bsf	tc_temperature_trans@var_time+1,2
  5985  011A                     l602:	
  5986                           
  5987                           ;max31856.c: 208: var_time |= 0x2000;
  5988  011A  0020               	movlb	0	; select bank0
  5989  011B  16D7               	bsf	tc_temperature_trans@var_time+1,5
  5990                           
  5991                           ;max31856.c: 210: Save_Write_word(var_time);
  5992  011C  0857               	movf	tc_temperature_trans@var_time+1,w
  5993  011D  00A7               	movwf	Save_Write_word@data+1
  5994  011E  0856               	movf	tc_temperature_trans@var_time,w
  5995  011F  00A6               	movwf	Save_Write_word@data
  5996  0120  318B  23F4  3180   	fcall	_Save_Write_word
  5997                           
  5998                           ;max31856.c: 211: Save_Write_word(temperature_value);
  5999  0123  0021               	movlb	1	; select bank1
  6000  0124  0825               	movf	(_temperature_value+1)^(0+128),w
  6001  0125  0020               	movlb	0	; select bank0
  6002  0126  00A7               	movwf	Save_Write_word@data+1
  6003  0127  0021               	movlb	1	; select bank1
  6004  0128  0824               	movf	_temperature_value^(0+128),w
  6005  0129  0020               	movlb	0	; select bank0
  6006  012A  00A6               	movwf	Save_Write_word@data
  6007  012B  318B  23F4  3180   	fcall	_Save_Write_word
  6008                           
  6009                           ;max31856.c: 212: Cur_temperature_time_ch1 = 0;
  6010  012E  0021               	movlb	1	; select bank1
  6011  012F  01B8               	clrf	_Cur_temperature_time_ch1^(0+128)
  6012                           
  6013                           ;max31856.c: 213: CH1_temperature = temperature_value;
  6014  0130  0825               	movf	(_temperature_value+1)^(0+128),w
  6015  0131  00AF               	movwf	(_CH1_temperature+1)^(0+128)
  6016  0132  0824               	movf	_temperature_value^(0+128),w
  6017  0133  293B               	goto	L3
  6018  0134                     l5636:	
  6019                           ;max31856.c: 214: }
  6020                           
  6021                           
  6022                           ;max31856.c: 215: else
  6023                           ;max31856.c: 216: {
  6024                           ;max31856.c: 217: CH1_temperature = temperature_back;
  6025  0134  0020               	movlb	0	; select bank0
  6026  0135  0853               	movf	tc_temperature_trans@temperature_back+1,w
  6027  0136  0021               	movlb	1	; select bank1
  6028  0137  00AF               	movwf	(_CH1_temperature+1)^(0+128)
  6029  0138  0020               	movlb	0	; select bank0
  6030  0139  0852               	movf	tc_temperature_trans@temperature_back,w
  6031  013A  0021               	movlb	1	; select bank1
  6032  013B                     L3:	
  6033  013B  00AE               	movwf	_CH1_temperature^(0+128)
  6034                           
  6035                           ;max31856.c: 218: }
  6036                           ;max31856.c: 219: }
  6037                           ;max31856.c: 221: }
  6038  013C  29EF               	goto	l604
  6039  013D                     l5638:	
  6040                           
  6041                           ;max31856.c: 222: else if( time_count == 3 && Record_flag == 1)
  6042  013D  3003               	movlw	3
  6043  013E  0020               	movlb	0	; select bank0
  6044  013F  0669               	xorwf	_time_count,w
  6045  0140  1D03               	btfss	3,2
  6046  0141  29EF               	goto	l604
  6047  0142  0366               	decf	_Record_flag,w
  6048  0143  1D03               	btfss	3,2
  6049  0144  29EF               	goto	l604
  6050                           
  6051                           ;max31856.c: 223: {
  6052                           ;max31856.c: 224: temperature_back = CH2_temperature;
  6053  0145  0021               	movlb	1	; select bank1
  6054  0146  0831               	movf	(_CH2_temperature+1)^(0+128),w
  6055  0147  0020               	movlb	0	; select bank0
  6056  0148  00D3               	movwf	tc_temperature_trans@temperature_back+1
  6057  0149  0021               	movlb	1	; select bank1
  6058  014A  0830               	movf	_CH2_temperature^(0+128),w
  6059  014B  0020               	movlb	0	; select bank0
  6060  014C  00D2               	movwf	tc_temperature_trans@temperature_back
  6061                           
  6062                           ;max31856.c: 225: if( CH2_temperature & 0x2000 != temperature_temp & 0x2000)
  6063  014D  3020               	movlw	32
  6064  014E  0659               	xorwf	tc_temperature_trans@temperature_temp+1,w
  6065  014F  0458               	iorwf	tc_temperature_trans@temperature_temp,w
  6066  0150  1903               	btfsc	3,2
  6067  0151  2954               	goto	u5130
  6068  0152  3001               	movlw	1
  6069  0153  2955               	goto	u5140
  6070  0154                     u5130:	
  6071  0154  3000               	movlw	0
  6072  0155                     u5140:	
  6073  0155  00CE               	movwf	??_tc_temperature_trans
  6074  0156  01CF               	clrf	??_tc_temperature_trans+1
  6075  0157  0021               	movlb	1	; select bank1
  6076  0158  0830               	movf	_CH2_temperature^(0+128),w
  6077  0159  0020               	movlb	0	; select bank0
  6078  015A  054E               	andwf	??_tc_temperature_trans,w
  6079  015B  00D0               	movwf	??_tc_temperature_trans+2
  6080  015C  0021               	movlb	1	; select bank1
  6081  015D  0831               	movf	(_CH2_temperature+1)^(0+128),w
  6082  015E  0020               	movlb	0	; select bank0
  6083  015F  054F               	andwf	??_tc_temperature_trans+1,w
  6084  0160  00D1               	movwf	??_tc_temperature_trans+3
  6085  0161  1AD1               	btfsc	??_tc_temperature_trans+3,5
  6086  0162  29BC               	goto	L7
  6087                           
  6088                           ;max31856.c: 238: else
  6089                           ;max31856.c: 239: {
  6090                           ;max31856.c: 240: if(CH2_temperature & 0x2000) CH2_temperature=0x3FFF-CH2_temperature + 
      +                          1 ;
  6091                           
  6092                           ;max31856.c: 237: }
  6093                           
  6094                           ;max31856.c: 236: CH2_temperature = temperature_value;
  6095                           
  6096                           ;max31856.c: 235: Cur_temperature_time_ch2 = 0;
  6097                           
  6098                           ;max31856.c: 234: Save_Write_word(temperature_value);
  6099                           
  6100                           ;max31856.c: 233: Save_Write_word(var_time);
  6101                           
  6102                           ;max31856.c: 231: var_time |= 0x2000;
  6103                           
  6104                           ;max31856.c: 229: if(CH2_state == 1) var_time |= 0x800;
  6105                           
  6106                           ;max31856.c: 228: var_time |= 0x200;
  6107                           
  6108                           ;max31856.c: 226: {
  6109                           ;max31856.c: 227: var_time = Calculate_Time();
  6110  0163  0021               	movlb	1	; select bank1
  6111  0164  1EB1               	btfss	(_CH2_temperature+1)^(0+128),5
  6112  0165  2979               	goto	l5662
  6113  0166  0930               	comf	_CH2_temperature^(0+128),w
  6114  0167  0020               	movlb	0	; select bank0
  6115  0168  00CE               	movwf	??_tc_temperature_trans
  6116  0169  0021               	movlb	1	; select bank1
  6117  016A  0931               	comf	(_CH2_temperature+1)^(0+128),w
  6118  016B  0020               	movlb	0	; select bank0
  6119  016C  00CF               	movwf	??_tc_temperature_trans+1
  6120  016D  0ACE               	incf	??_tc_temperature_trans,f
  6121  016E  1903               	skipnz
  6122  016F  0ACF               	incf	??_tc_temperature_trans+1,f
  6123  0170  084E               	movf	??_tc_temperature_trans,w
  6124  0171  3E00               	addlw	0
  6125  0172  0021               	movlb	1	; select bank1
  6126  0173  00B0               	movwf	_CH2_temperature^(0+128)
  6127  0174  3040               	movlw	64
  6128  0175  0020               	movlb	0	; select bank0
  6129  0176  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6130  0177  0021               	movlb	1	; select bank1
  6131  0178  00B1               	movwf	(_CH2_temperature+1)^(0+128)
  6132  0179                     l5662:	
  6133                           
  6134                           ;max31856.c: 241: if(temperature_temp & 0x2000) temperature_temp=0x3FFF-temperature_temp
      +                           + 1 ;
  6135  0179  0020               	movlb	0	; select bank0
  6136  017A  1ED9               	btfss	tc_temperature_trans@temperature_temp+1,5
  6137  017B  2989               	goto	l5666
  6138  017C  0958               	comf	tc_temperature_trans@temperature_temp,w
  6139  017D  00CE               	movwf	??_tc_temperature_trans
  6140  017E  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6141  017F  00CF               	movwf	??_tc_temperature_trans+1
  6142  0180  0ACE               	incf	??_tc_temperature_trans,f
  6143  0181  1903               	skipnz
  6144  0182  0ACF               	incf	??_tc_temperature_trans+1,f
  6145  0183  084E               	movf	??_tc_temperature_trans,w
  6146  0184  3E00               	addlw	0
  6147  0185  00D8               	movwf	tc_temperature_trans@temperature_temp
  6148  0186  3040               	movlw	64
  6149  0187  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6150  0188  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6151  0189                     l5666:	
  6152                           
  6153                           ;max31856.c: 242: if( temperature_temp > CH2_temperature ) temperature_absolute = temper
      +                          ature_temp - CH2_temperature;
  6154  0189  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6155  018A  0021               	movlb	1	; select bank1
  6156  018B  0231               	subwf	(_CH2_temperature+1)^(0+128),w
  6157  018C  1D03               	skipz
  6158  018D  2992               	goto	u5195
  6159  018E  0020               	movlb	0	; select bank0
  6160  018F  0858               	movf	tc_temperature_trans@temperature_temp,w
  6161  0190  0021               	movlb	1	; select bank1
  6162  0191  0230               	subwf	_CH2_temperature^(0+128),w
  6163  0192                     u5195:	
  6164  0192  1803               	skipnc
  6165  0193  29A3               	goto	l5670
  6166  0194  0930               	comf	_CH2_temperature^(0+128),w
  6167  0195  0020               	movlb	0	; select bank0
  6168  0196  00CE               	movwf	??_tc_temperature_trans
  6169  0197  0021               	movlb	1	; select bank1
  6170  0198  0931               	comf	(_CH2_temperature+1)^(0+128),w
  6171  0199  0020               	movlb	0	; select bank0
  6172  019A  00CF               	movwf	??_tc_temperature_trans+1
  6173  019B  0ACE               	incf	??_tc_temperature_trans,f
  6174  019C  1903               	skipnz
  6175  019D  0ACF               	incf	??_tc_temperature_trans+1,f
  6176  019E  0858               	movf	tc_temperature_trans@temperature_temp,w
  6177  019F  074E               	addwf	??_tc_temperature_trans,w
  6178  01A0  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6179  01A1  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6180  01A2  29B3               	goto	L4
  6181  01A3                     l5670:	
  6182                           
  6183                           ;max31856.c: 243: else temperature_absolute = CH2_temperature - temperature_temp;
  6184  01A3  0020               	movlb	0	; select bank0
  6185  01A4  0958               	comf	tc_temperature_trans@temperature_temp,w
  6186  01A5  00CE               	movwf	??_tc_temperature_trans
  6187  01A6  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6188  01A7  00CF               	movwf	??_tc_temperature_trans+1
  6189  01A8  0ACE               	incf	??_tc_temperature_trans,f
  6190  01A9  1903               	skipnz
  6191  01AA  0ACF               	incf	??_tc_temperature_trans+1,f
  6192  01AB  0021               	movlb	1	; select bank1
  6193  01AC  0830               	movf	_CH2_temperature^(0+128),w
  6194  01AD  0020               	movlb	0	; select bank0
  6195  01AE  074E               	addwf	??_tc_temperature_trans,w
  6196  01AF  00D4               	movwf	tc_temperature_trans@temperature_absolute
  6197  01B0  0021               	movlb	1	; select bank1
  6198  01B1  0831               	movf	(_CH2_temperature+1)^(0+128),w
  6199  01B2  0020               	movlb	0	; select bank0
  6200  01B3                     L4:	
  6201  01B3  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6202  01B4  00D5               	movwf	tc_temperature_trans@temperature_absolute+1
  6203                           
  6204                           ;max31856.c: 244: if( temperature_absolute > 4)
  6205  01B5  3000               	movlw	0
  6206  01B6  0255               	subwf	tc_temperature_trans@temperature_absolute+1,w
  6207  01B7  3005               	movlw	5
  6208  01B8  1903               	skipnz
  6209  01B9  0254               	subwf	tc_temperature_trans@temperature_absolute,w
  6210  01BA  1C03               	skipc
  6211  01BB  29E7               	goto	l5688
  6212  01BC                     L7:	
  6213                           
  6214                           ;max31856.c: 245: {
  6215                           ;max31856.c: 246: var_time = Calculate_Time();
  6216  01BC  3182  226D  3180   	fcall	_Calculate_Time
  6217  01BF  0020               	movlb	0	; select bank0
  6218  01C0  00CE               	movwf	??_tc_temperature_trans
  6219  01C1  01CF               	clrf	??_tc_temperature_trans+1
  6220  01C2  084E               	movf	??_tc_temperature_trans,w
  6221  01C3  00D6               	movwf	tc_temperature_trans@var_time
  6222  01C4  084F               	movf	??_tc_temperature_trans+1,w
  6223  01C5  00D7               	movwf	tc_temperature_trans@var_time+1
  6224                           
  6225                           ;max31856.c: 247: var_time |= 0x200;
  6226  01C6  14D7               	bsf	tc_temperature_trans@var_time+1,1
  6227                           
  6228                           ;max31856.c: 248: if(CH2_state == 1) var_time |= 0x800;
  6229  01C7  0021               	movlb	1	; select bank1
  6230  01C8  0337               	decf	_CH2_state^(0+128),w
  6231  01C9  1D03               	btfss	3,2
  6232  01CA  29CD               	goto	l614
  6233  01CB  0020               	movlb	0	; select bank0
  6234  01CC  15D7               	bsf	tc_temperature_trans@var_time+1,3
  6235  01CD                     l614:	
  6236                           
  6237                           ;max31856.c: 250: var_time |= 0x2000;
  6238  01CD  0020               	movlb	0	; select bank0
  6239  01CE  16D7               	bsf	tc_temperature_trans@var_time+1,5
  6240                           
  6241                           ;max31856.c: 252: Save_Write_word(var_time);
  6242  01CF  0857               	movf	tc_temperature_trans@var_time+1,w
  6243  01D0  00A7               	movwf	Save_Write_word@data+1
  6244  01D1  0856               	movf	tc_temperature_trans@var_time,w
  6245  01D2  00A6               	movwf	Save_Write_word@data
  6246  01D3  318B  23F4  3180   	fcall	_Save_Write_word
  6247                           
  6248                           ;max31856.c: 253: Save_Write_word(temperature_value);
  6249  01D6  0021               	movlb	1	; select bank1
  6250  01D7  0825               	movf	(_temperature_value+1)^(0+128),w
  6251  01D8  0020               	movlb	0	; select bank0
  6252  01D9  00A7               	movwf	Save_Write_word@data+1
  6253  01DA  0021               	movlb	1	; select bank1
  6254  01DB  0824               	movf	_temperature_value^(0+128),w
  6255  01DC  0020               	movlb	0	; select bank0
  6256  01DD  00A6               	movwf	Save_Write_word@data
  6257  01DE  318B  23F4  3180   	fcall	_Save_Write_word
  6258                           
  6259                           ;max31856.c: 254: Cur_temperature_time_ch2 = 0;
  6260  01E1  0021               	movlb	1	; select bank1
  6261  01E2  01B9               	clrf	_Cur_temperature_time_ch2^(0+128)
  6262                           
  6263                           ;max31856.c: 255: CH2_temperature = temperature_value;
  6264  01E3  0825               	movf	(_temperature_value+1)^(0+128),w
  6265  01E4  00B1               	movwf	(_CH2_temperature+1)^(0+128)
  6266  01E5  0824               	movf	_temperature_value^(0+128),w
  6267  01E6  29EE               	goto	L5
  6268  01E7                     l5688:	
  6269                           ;max31856.c: 256: }
  6270                           
  6271                           
  6272                           ;max31856.c: 257: else
  6273                           ;max31856.c: 258: {
  6274                           ;max31856.c: 259: CH2_temperature = temperature_back;
  6275  01E7  0020               	movlb	0	; select bank0
  6276  01E8  0853               	movf	tc_temperature_trans@temperature_back+1,w
  6277  01E9  0021               	movlb	1	; select bank1
  6278  01EA  00B1               	movwf	(_CH2_temperature+1)^(0+128)
  6279  01EB  0020               	movlb	0	; select bank0
  6280  01EC  0852               	movf	tc_temperature_trans@temperature_back,w
  6281  01ED  0021               	movlb	1	; select bank1
  6282  01EE                     L5:	
  6283  01EE  00B0               	movwf	_CH2_temperature^(0+128)
  6284  01EF                     l604:	
  6285                           
  6286                           ;max31856.c: 260: }
  6287                           ;max31856.c: 261: }
  6288                           ;max31856.c: 263: }
  6289                           ;max31856.c: 265: temperature_temp = temperature_value;
  6290  01EF  0021               	movlb	1	; select bank1
  6291  01F0  0825               	movf	(_temperature_value+1)^(0+128),w
  6292  01F1  0020               	movlb	0	; select bank0
  6293  01F2  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6294  01F3  0021               	movlb	1	; select bank1
  6295  01F4  0824               	movf	_temperature_value^(0+128),w
  6296  01F5  0020               	movlb	0	; select bank0
  6297  01F6  00D8               	movwf	tc_temperature_trans@temperature_temp
  6298                           
  6299                           ;max31856.c: 266: if((uch_ltcbh&0x80)==0x80)
  6300  01F7  0021               	movlb	1	; select bank1
  6301  01F8  1FC8               	btfss	_uch_ltcbh^(0+128),7
  6302  01F9  2A3A               	goto	l5706
  6303                           
  6304                           ;max31856.c: 267: {
  6305                           ;max31856.c: 268: temperature_sign = 1;
  6306  01FA  01C3               	clrf	_temperature_sign^(0+128)
  6307  01FB  0AC3               	incf	_temperature_sign^(0+128),f
  6308                           
  6309                           ;max31856.c: 269: temperature_temp=0x3FFF-temperature_temp + 1 ;
  6310  01FC  0020               	movlb	0	; select bank0
  6311  01FD  0958               	comf	tc_temperature_trans@temperature_temp,w
  6312  01FE  00CE               	movwf	??_tc_temperature_trans
  6313  01FF  0959               	comf	tc_temperature_trans@temperature_temp+1,w
  6314  0200  00CF               	movwf	??_tc_temperature_trans+1
  6315  0201  0ACE               	incf	??_tc_temperature_trans,f
  6316  0202  1903               	skipnz
  6317  0203  0ACF               	incf	??_tc_temperature_trans+1,f
  6318  0204  084E               	movf	??_tc_temperature_trans,w
  6319  0205  3E00               	addlw	0
  6320  0206  00D8               	movwf	tc_temperature_trans@temperature_temp
  6321  0207  3040               	movlw	64
  6322  0208  3D4F               	addwfc	??_tc_temperature_trans+1,w
  6323  0209  00D9               	movwf	tc_temperature_trans@temperature_temp+1
  6324                           
  6325                           ;max31856.c: 271: temperature_int = temperature_temp>>3;
  6326  020A  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6327  020B  00CF               	movwf	??_tc_temperature_trans+1
  6328  020C  0858               	movf	tc_temperature_trans@temperature_temp,w
  6329  020D  00CE               	movwf	??_tc_temperature_trans
  6330  020E  36CF               	lsrf	??_tc_temperature_trans+1,f
  6331  020F  0CCE               	rrf	??_tc_temperature_trans,f
  6332  0210  36CF               	lsrf	??_tc_temperature_trans+1,f
  6333  0211  0CCE               	rrf	??_tc_temperature_trans,f
  6334  0212  36CF               	lsrf	??_tc_temperature_trans+1,f
  6335  0213  0CCE               	rrf	??_tc_temperature_trans,f
  6336  0214  084E               	movf	??_tc_temperature_trans,w
  6337  0215  0021               	movlb	1	; select bank1
  6338  0216  00B4               	movwf	_temperature_int^(0+128)
  6339  0217  0020               	movlb	0	; select bank0
  6340  0218  084F               	movf	??_tc_temperature_trans+1,w
  6341  0219  0021               	movlb	1	; select bank1
  6342  021A  00B5               	movwf	(_temperature_int+1)^(0+128)
  6343                           
  6344                           ;max31856.c: 272: temperature_decimal = temperature_temp & 0x07;
  6345  021B  0020               	movlb	0	; select bank0
  6346  021C  0858               	movf	tc_temperature_trans@temperature_temp,w
  6347  021D  3907               	andlw	7
  6348  021E  00CE               	movwf	??_tc_temperature_trans
  6349  021F  084E               	movf	??_tc_temperature_trans,w
  6350  0220  00E8               	movwf	_temperature_decimal
  6351                           
  6352                           ;max31856.c: 273: if(temperature_decimal > 3) temperature_decimal++;
  6353  0221  3004               	movlw	4
  6354  0222  0268               	subwf	_temperature_decimal,w
  6355  0223  1C03               	skipc
  6356  0224  2A29               	goto	l617
  6357  0225  3001               	movlw	1
  6358  0226  00CE               	movwf	??_tc_temperature_trans
  6359  0227  084E               	movf	??_tc_temperature_trans,w
  6360  0228  07E8               	addwf	_temperature_decimal,f
  6361  0229                     l617:	
  6362                           
  6363                           ;max31856.c: 274: if(( temperature_decimal == 3 || temperature_decimal == 8 ) && (temper
      +                          ature_int & 0x01)) temperature_decimal++;
  6364  0229  3003               	movlw	3
  6365  022A  0668               	xorwf	_temperature_decimal,w
  6366  022B  1903               	btfsc	3,2
  6367  022C  2A31               	goto	l620
  6368  022D  3008               	movlw	8
  6369  022E  0668               	xorwf	_temperature_decimal,w
  6370  022F  1D03               	btfss	3,2
  6371  0230  0008               	return
  6372  0231                     l620:	
  6373  0231  0021               	movlb	1	; select bank1
  6374  0232  1C34               	btfss	_temperature_int^(0+128),0
  6375  0233  0008               	return
  6376  0234  3001               	movlw	1
  6377  0235  0020               	movlb	0	; select bank0
  6378  0236  00CE               	movwf	??_tc_temperature_trans
  6379  0237  084E               	movf	??_tc_temperature_trans,w
  6380  0238  07E8               	addwf	_temperature_decimal,f
  6381                           
  6382                           ;max31856.c: 275: }
  6383  0239  0008               	return
  6384  023A                     l5706:	
  6385                           
  6386                           ;max31856.c: 276: else
  6387                           ;max31856.c: 277: {
  6388                           ;max31856.c: 278: temperature_sign = 0;
  6389  023A  0021               	movlb	1	; select bank1
  6390  023B  01C3               	clrf	_temperature_sign^(0+128)
  6391                           
  6392                           ;max31856.c: 279: temperature_int = temperature_temp>>3;
  6393  023C  0020               	movlb	0	; select bank0
  6394  023D  0859               	movf	tc_temperature_trans@temperature_temp+1,w
  6395  023E  00CF               	movwf	??_tc_temperature_trans+1
  6396  023F  0858               	movf	tc_temperature_trans@temperature_temp,w
  6397  0240  00CE               	movwf	??_tc_temperature_trans
  6398  0241  36CF               	lsrf	??_tc_temperature_trans+1,f
  6399  0242  0CCE               	rrf	??_tc_temperature_trans,f
  6400  0243  36CF               	lsrf	??_tc_temperature_trans+1,f
  6401  0244  0CCE               	rrf	??_tc_temperature_trans,f
  6402  0245  36CF               	lsrf	??_tc_temperature_trans+1,f
  6403  0246  0CCE               	rrf	??_tc_temperature_trans,f
  6404  0247  084E               	movf	??_tc_temperature_trans,w
  6405  0248  0021               	movlb	1	; select bank1
  6406  0249  00B4               	movwf	_temperature_int^(0+128)
  6407  024A  0020               	movlb	0	; select bank0
  6408  024B  084F               	movf	??_tc_temperature_trans+1,w
  6409  024C  0021               	movlb	1	; select bank1
  6410  024D  00B5               	movwf	(_temperature_int+1)^(0+128)
  6411                           
  6412                           ;max31856.c: 280: temperature_decimal = temperature_temp & 0x07;
  6413  024E  0020               	movlb	0	; select bank0
  6414  024F  0858               	movf	tc_temperature_trans@temperature_temp,w
  6415  0250  3907               	andlw	7
  6416  0251  00CE               	movwf	??_tc_temperature_trans
  6417  0252  084E               	movf	??_tc_temperature_trans,w
  6418  0253  00E8               	movwf	_temperature_decimal
  6419                           
  6420                           ;max31856.c: 281: if(temperature_decimal > 3) temperature_decimal++;
  6421  0254  3004               	movlw	4
  6422  0255  0268               	subwf	_temperature_decimal,w
  6423  0256  1C03               	skipc
  6424  0257  2A5C               	goto	l622
  6425  0258  3001               	movlw	1
  6426  0259  00CE               	movwf	??_tc_temperature_trans
  6427  025A  084E               	movf	??_tc_temperature_trans,w
  6428  025B  07E8               	addwf	_temperature_decimal,f
  6429  025C                     l622:	
  6430                           
  6431                           ;max31856.c: 282: if((temperature_decimal == 4 || temperature_decimal == 8) && (temperat
      +                          ure_int & 0x01)) temperature_decimal++;
  6432  025C  3004               	movlw	4
  6433  025D  0668               	xorwf	_temperature_decimal,w
  6434  025E  1903               	btfsc	3,2
  6435  025F  2A64               	goto	l625
  6436  0260  3008               	movlw	8
  6437  0261  0668               	xorwf	_temperature_decimal,w
  6438  0262  1D03               	btfss	3,2
  6439  0263  0008               	return
  6440  0264                     l625:	
  6441  0264  0021               	movlb	1	; select bank1
  6442  0265  1C34               	btfss	_temperature_int^(0+128),0
  6443  0266  0008               	return
  6444  0267  3001               	movlw	1
  6445  0268  0020               	movlb	0	; select bank0
  6446  0269  00CE               	movwf	??_tc_temperature_trans
  6447  026A  084E               	movf	??_tc_temperature_trans,w
  6448  026B  07E8               	addwf	_temperature_decimal,f
  6449  026C  0008               	return
  6450  026D                     __end_of_tc_temperature_trans:	
  6451                           
  6452                           	psect	text18
  6453  026D                     __ptext18:	
  6454 ;; *************** function _Calculate_Time *****************
  6455 ;; Defined at:
  6456 ;;		line 163 in file "mcc_generated_files/save.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;		None
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  temp2           4   42[BANK0 ] unsigned long 
  6461 ;;  temp1           4   38[BANK0 ] unsigned long 
  6462 ;;  temp            4   34[BANK0 ] unsigned long 
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      unsigned char 
  6465 ;; Registers used:
  6466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;Total ram usage:       22 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    7
  6479 ;; This function calls:
  6480 ;;		_Bq32k_Rtc_Read_Time
  6481 ;;		_Save_Write_time
  6482 ;;		_Write_Flash_finish
  6483 ;;		_Write_Flash_head
  6484 ;;		___wmul
  6485 ;; This function is called by:
  6486 ;;		_tc_temperature_trans
  6487 ;;		_Save_process
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           
  6492                           ;psect for function _Calculate_Time
  6493  026D                     _Calculate_Time:	
  6494                           
  6495                           ;save.c: 165: unsigned long temp = 0 ;
  6496                           
  6497                           ;incstack = 0
  6498                           ; Regs used in _Calculate_Time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6499  026D  3000               	movlw	0
  6500  026E  0020               	movlb	0	; select bank0
  6501  026F  00C5               	movwf	Calculate_Time@temp+3
  6502  0270  3000               	movlw	0
  6503  0271  00C4               	movwf	Calculate_Time@temp+2
  6504  0272  3000               	movlw	0
  6505  0273  00C3               	movwf	Calculate_Time@temp+1
  6506  0274  3000               	movlw	0
  6507  0275  00C2               	movwf	Calculate_Time@temp
  6508                           
  6509                           ;save.c: 166: unsigned long temp1 = 0 ;
  6510  0276  3000               	movlw	0
  6511  0277  00C9               	movwf	Calculate_Time@temp1+3
  6512  0278  3000               	movlw	0
  6513  0279  00C8               	movwf	Calculate_Time@temp1+2
  6514  027A  3000               	movlw	0
  6515  027B  00C7               	movwf	Calculate_Time@temp1+1
  6516  027C  3000               	movlw	0
  6517  027D  00C6               	movwf	Calculate_Time@temp1
  6518                           
  6519                           ;save.c: 167: unsigned long temp2 = 0 ;
  6520  027E  3000               	movlw	0
  6521  027F  00CD               	movwf	Calculate_Time@temp2+3
  6522  0280  3000               	movlw	0
  6523  0281  00CC               	movwf	Calculate_Time@temp2+2
  6524  0282  3000               	movlw	0
  6525  0283  00CB               	movwf	Calculate_Time@temp2+1
  6526  0284  3000               	movlw	0
  6527  0285  00CA               	movwf	Calculate_Time@temp2
  6528                           
  6529                           ;save.c: 168: Bq32k_Rtc_Read_Time(&rtc_tm);
  6530  0286  30E3               	movlw	(low (_rtc_tm| 0))& (0+255)
  6531  0287  318C  24F7  3182   	fcall	_Bq32k_Rtc_Read_Time
  6532                           
  6533                           ;save.c: 169: if( time_count == 1 )
  6534  028A  0020               	movlb	0	; select bank0
  6535  028B  0369               	decf	_time_count,w
  6536  028C  1D03               	btfss	3,2
  6537  028D  2B42               	goto	l5386
  6538                           
  6539                           ;save.c: 170: {
  6540                           ;save.c: 171: if(rtc_tm.date != rtc_save_ch1.date)
  6541  028E  0021               	movlb	1	; select bank1
  6542  028F  0867               	movf	(_rtc_tm^(0+128)+4),w
  6543  0290  0659               	xorwf	(_rtc_save_ch1^(0+128)+4),w
  6544  0291  1D03               	btfss	3,2
  6545  0292  2B4B               	goto	l5390
  6546                           
  6547                           ;save.c: 183: else
  6548                           ;save.c: 184: {
  6549                           ;save.c: 185: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6550                           
  6551                           ;save.c: 182: }
  6552                           
  6553                           ;save.c: 181: time_count = 0;
  6554                           
  6555                           ;save.c: 178: Cur_temperature_time_ch2 = 0;
  6556                           
  6557                           ;save.c: 177: Cur_temperature_time_ch1 = 0;
  6558                           
  6559                           ;save.c: 176: Save_Write_time();
  6560                           
  6561                           ;save.c: 175: Write_Flash_head();
  6562                           
  6563                           ;save.c: 172: {
  6564                           ;save.c: 174: Write_Flash_finish();
  6565  0293  0021               	movlb	1	; select bank1
  6566  0294  0863               	movf	_rtc_tm^(0+128),w
  6567  0295  0020               	movlb	0	; select bank0
  6568  0296  00B8               	movwf	??_Calculate_Time
  6569  0297  01B9               	clrf	??_Calculate_Time+1
  6570  0298  0021               	movlb	1	; select bank1
  6571  0299  0865               	movf	(_rtc_tm^(0+128)+2),w
  6572  029A  0020               	movlb	0	; select bank0
  6573  029B  00BA               	movwf	??_Calculate_Time+2
  6574  029C  01BB               	clrf	??_Calculate_Time+3
  6575  029D  083A               	movf	??_Calculate_Time+2,w
  6576  029E  00A1               	movwf	___wmul@multiplier
  6577  029F  083B               	movf	??_Calculate_Time+3,w
  6578  02A0  00A2               	movwf	___wmul@multiplier+1
  6579  02A1  3010               	movlw	16
  6580  02A2  00A3               	movwf	___wmul@multiplicand
  6581  02A3  300E               	movlw	14
  6582  02A4  00A4               	movwf	___wmul@multiplicand+1
  6583  02A5  3196  2647  3182   	fcall	___wmul
  6584  02A8  0020               	movlb	0	; select bank0
  6585  02A9  0821               	movf	?___wmul,w
  6586  02AA  00BC               	movwf	??_Calculate_Time+4
  6587  02AB  0822               	movf	?___wmul+1,w
  6588  02AC  00BD               	movwf	??_Calculate_Time+5
  6589  02AD  0021               	movlb	1	; select bank1
  6590  02AE  0864               	movf	(_rtc_tm^(0+128)+1),w
  6591  02AF  0020               	movlb	0	; select bank0
  6592  02B0  00BE               	movwf	??_Calculate_Time+6
  6593  02B1  01BF               	clrf	??_Calculate_Time+7
  6594  02B2  083E               	movf	??_Calculate_Time+6,w
  6595  02B3  00A1               	movwf	___wmul@multiplier
  6596  02B4  083F               	movf	??_Calculate_Time+7,w
  6597  02B5  00A2               	movwf	___wmul@multiplier+1
  6598  02B6  303C               	movlw	60
  6599  02B7  00A3               	movwf	___wmul@multiplicand
  6600  02B8  3000               	movlw	0
  6601  02B9  00A4               	movwf	___wmul@multiplicand+1
  6602  02BA  3196  2647  3182   	fcall	___wmul
  6603  02BD  0020               	movlb	0	; select bank0
  6604  02BE  0821               	movf	?___wmul,w
  6605  02BF  073C               	addwf	??_Calculate_Time+4,w
  6606  02C0  00C0               	movwf	??_Calculate_Time+8
  6607  02C1  0822               	movf	?___wmul+1,w
  6608  02C2  3D3D               	addwfc	??_Calculate_Time+5,w
  6609  02C3  00C1               	movwf	??_Calculate_Time+9
  6610  02C4  0838               	movf	??_Calculate_Time,w
  6611  02C5  0740               	addwf	??_Calculate_Time+8,w
  6612  02C6  00C6               	movwf	Calculate_Time@temp1
  6613  02C7  0839               	movf	??_Calculate_Time+1,w
  6614  02C8  3D41               	addwfc	??_Calculate_Time+9,w
  6615  02C9  00C7               	movwf	Calculate_Time@temp1+1
  6616  02CA  01C8               	clrf	Calculate_Time@temp1+2
  6617  02CB  1BC7               	btfsc	Calculate_Time@temp1+1,7
  6618  02CC  03C8               	decf	Calculate_Time@temp1+2,f
  6619  02CD  0848               	movf	Calculate_Time@temp1+2,w
  6620  02CE  00C9               	movwf	Calculate_Time@temp1+3
  6621                           
  6622                           ;save.c: 186: temp2 = rtc_save_ch1.hours*3600+rtc_save_ch1.minutes*60+rtc_save_ch1.secon
      +                          ds;
  6623  02CF  0021               	movlb	1	; select bank1
  6624  02D0  0855               	movf	_rtc_save_ch1^(0+128),w
  6625  02D1  0020               	movlb	0	; select bank0
  6626  02D2  00B8               	movwf	??_Calculate_Time
  6627  02D3  01B9               	clrf	??_Calculate_Time+1
  6628  02D4  0021               	movlb	1	; select bank1
  6629  02D5  0857               	movf	(_rtc_save_ch1^(0+128)+2),w
  6630  02D6  0020               	movlb	0	; select bank0
  6631  02D7  00BA               	movwf	??_Calculate_Time+2
  6632  02D8  01BB               	clrf	??_Calculate_Time+3
  6633  02D9  083A               	movf	??_Calculate_Time+2,w
  6634  02DA  00A1               	movwf	___wmul@multiplier
  6635  02DB  083B               	movf	??_Calculate_Time+3,w
  6636  02DC  00A2               	movwf	___wmul@multiplier+1
  6637  02DD  3010               	movlw	16
  6638  02DE  00A3               	movwf	___wmul@multiplicand
  6639  02DF  300E               	movlw	14
  6640  02E0  00A4               	movwf	___wmul@multiplicand+1
  6641  02E1  3196  2647  3182   	fcall	___wmul
  6642  02E4  0020               	movlb	0	; select bank0
  6643  02E5  0821               	movf	?___wmul,w
  6644  02E6  00BC               	movwf	??_Calculate_Time+4
  6645  02E7  0822               	movf	?___wmul+1,w
  6646  02E8  00BD               	movwf	??_Calculate_Time+5
  6647  02E9  0021               	movlb	1	; select bank1
  6648  02EA  0856               	movf	(_rtc_save_ch1^(0+128)+1),w
  6649  02EB  0020               	movlb	0	; select bank0
  6650  02EC  00BE               	movwf	??_Calculate_Time+6
  6651  02ED  01BF               	clrf	??_Calculate_Time+7
  6652  02EE  083E               	movf	??_Calculate_Time+6,w
  6653  02EF  00A1               	movwf	___wmul@multiplier
  6654  02F0  083F               	movf	??_Calculate_Time+7,w
  6655  02F1  00A2               	movwf	___wmul@multiplier+1
  6656  02F2  303C               	movlw	60
  6657  02F3  00A3               	movwf	___wmul@multiplicand
  6658  02F4  3000               	movlw	0
  6659  02F5  00A4               	movwf	___wmul@multiplicand+1
  6660  02F6  3196  2647  3182   	fcall	___wmul
  6661  02F9  0020               	movlb	0	; select bank0
  6662  02FA  0821               	movf	?___wmul,w
  6663  02FB  073C               	addwf	??_Calculate_Time+4,w
  6664  02FC  00C0               	movwf	??_Calculate_Time+8
  6665  02FD  0822               	movf	?___wmul+1,w
  6666  02FE  3D3D               	addwfc	??_Calculate_Time+5,w
  6667  02FF  00C1               	movwf	??_Calculate_Time+9
  6668  0300  0838               	movf	??_Calculate_Time,w
  6669  0301  0740               	addwf	??_Calculate_Time+8,w
  6670  0302  00CA               	movwf	Calculate_Time@temp2
  6671  0303  0839               	movf	??_Calculate_Time+1,w
  6672  0304  3D41               	addwfc	??_Calculate_Time+9,w
  6673  0305  00CB               	movwf	Calculate_Time@temp2+1
  6674  0306  01CC               	clrf	Calculate_Time@temp2+2
  6675  0307  1BCB               	btfsc	Calculate_Time@temp2+1,7
  6676  0308  03CC               	decf	Calculate_Time@temp2+2,f
  6677  0309  084C               	movf	Calculate_Time@temp2+2,w
  6678  030A  00CD               	movwf	Calculate_Time@temp2+3
  6679                           
  6680                           ;save.c: 187: temp = temp1 - temp2;
  6681  030B  0846               	movf	Calculate_Time@temp1,w
  6682  030C  00B8               	movwf	??_Calculate_Time
  6683  030D  0847               	movf	Calculate_Time@temp1+1,w
  6684  030E  00B9               	movwf	??_Calculate_Time+1
  6685  030F  0848               	movf	Calculate_Time@temp1+2,w
  6686  0310  00BA               	movwf	??_Calculate_Time+2
  6687  0311  0849               	movf	Calculate_Time@temp1+3,w
  6688  0312  00BB               	movwf	??_Calculate_Time+3
  6689  0313  094A               	comf	Calculate_Time@temp2,w
  6690  0314  00BC               	movwf	??_Calculate_Time+4
  6691  0315  094B               	comf	Calculate_Time@temp2+1,w
  6692  0316  00BD               	movwf	??_Calculate_Time+5
  6693  0317  094C               	comf	Calculate_Time@temp2+2,w
  6694  0318  00BE               	movwf	??_Calculate_Time+6
  6695  0319  094D               	comf	Calculate_Time@temp2+3,w
  6696  031A  00BF               	movwf	??_Calculate_Time+7
  6697  031B  0ABC               	incf	??_Calculate_Time+4,f
  6698  031C  1903               	skipnz
  6699  031D  0ABD               	incf	??_Calculate_Time+5,f
  6700  031E  1903               	skipnz
  6701  031F  0ABE               	incf	??_Calculate_Time+6,f
  6702  0320  1903               	skipnz
  6703  0321  0ABF               	incf	??_Calculate_Time+7,f
  6704  0322  083C               	movf	??_Calculate_Time+4,w
  6705  0323  07B8               	addwf	??_Calculate_Time,f
  6706  0324  083D               	movf	??_Calculate_Time+5,w
  6707  0325  3DB9               	addwfc	??_Calculate_Time+1,f
  6708  0326  083E               	movf	??_Calculate_Time+6,w
  6709  0327  3DBA               	addwfc	??_Calculate_Time+2,f
  6710  0328  083F               	movf	??_Calculate_Time+7,w
  6711  0329  3DBB               	addwfc	??_Calculate_Time+3,f
  6712  032A  083B               	movf	??_Calculate_Time+3,w
  6713  032B  00C5               	movwf	Calculate_Time@temp+3
  6714  032C  083A               	movf	??_Calculate_Time+2,w
  6715  032D  00C4               	movwf	Calculate_Time@temp+2
  6716  032E  0839               	movf	??_Calculate_Time+1,w
  6717  032F  00C3               	movwf	Calculate_Time@temp+1
  6718  0330  0838               	movf	??_Calculate_Time,w
  6719  0331  00C2               	movwf	Calculate_Time@temp
  6720                           
  6721                           ;save.c: 188: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  6722  0332  30D5               	movlw	low (_rtc_save_ch1| 0)
  6723  0333  0086               	movwf	6
  6724  0334  0187               	clrf	7
  6725  0335  30E3               	movlw	low (_rtc_tm| 0)
  6726  0336  0084               	movwf	4
  6727  0337  0185               	clrf	5
  6728  0338  3007               	movlw	7
  6729  0339  0020               	movlb	0	; select bank0
  6730  033A  00B8               	movwf	??_Calculate_Time
  6731  033B                     u461m0:	
  6732  033B  0012               	moviw fsr0++
  6733  033C  001E               	movwi fsr1++
  6734  033D  0BB8               	decfsz	??_Calculate_Time,f
  6735  033E  2B3B               	goto	u461m0
  6736                           
  6737                           ;save.c: 189: return temp;
  6738  033F  0020               	movlb	0	; select bank0
  6739  0340  0842               	movf	Calculate_Time@temp,w
  6740  0341  0008               	return
  6741  0342                     l5386:	
  6742                           ;save.c: 190: }
  6743                           ;save.c: 191: }
  6744                           
  6745                           
  6746                           ;save.c: 192: else if( time_count == 3 )
  6747  0342  3003               	movlw	3
  6748  0343  0669               	xorwf	_time_count,w
  6749  0344  1D03               	btfss	3,2
  6750  0345  2C09               	goto	l5410
  6751                           
  6752                           ;save.c: 193: {
  6753                           ;save.c: 194: if(rtc_tm.date != rtc_save_ch2.date)
  6754  0346  0021               	movlb	1	; select bank1
  6755  0347  0867               	movf	(_rtc_tm^(0+128)+4),w
  6756  0348  0660               	xorwf	(_rtc_save_ch2^(0+128)+4),w
  6757  0349  1903               	skipnz
  6758  034A  2B5A               	goto	l5400
  6759  034B                     l5390:	
  6760                           
  6761                           ;save.c: 195: {
  6762                           ;save.c: 197: Write_Flash_finish();
  6763  034B  3197  2779  3182   	fcall	_Write_Flash_finish
  6764                           
  6765                           ;save.c: 198: Write_Flash_head();
  6766  034E  3197  279A  3182   	fcall	_Write_Flash_head
  6767                           
  6768                           ;save.c: 199: Save_Write_time();
  6769  0351  318E  269C  3182   	fcall	_Save_Write_time
  6770                           
  6771                           ;save.c: 200: Cur_temperature_time_ch1 = 0;
  6772  0354  0021               	movlb	1	; select bank1
  6773  0355  01B8               	clrf	_Cur_temperature_time_ch1^(0+128)
  6774                           
  6775                           ;save.c: 201: Cur_temperature_time_ch2 = 0;
  6776  0356  01B9               	clrf	_Cur_temperature_time_ch2^(0+128)
  6777                           
  6778                           ;save.c: 204: time_count = 0;
  6779  0357  0020               	movlb	0	; select bank0
  6780  0358  01E9               	clrf	_time_count
  6781                           
  6782                           ;save.c: 205: }
  6783  0359  2C09               	goto	l5410
  6784  035A                     l5400:	
  6785                           
  6786                           ;save.c: 206: else
  6787                           ;save.c: 207: {
  6788                           ;save.c: 208: temp1 = rtc_tm.hours*3600+rtc_tm.minutes*60+rtc_tm.seconds;
  6789  035A  0021               	movlb	1	; select bank1
  6790  035B  0863               	movf	_rtc_tm^(0+128),w
  6791  035C  0020               	movlb	0	; select bank0
  6792  035D  00B8               	movwf	??_Calculate_Time
  6793  035E  01B9               	clrf	??_Calculate_Time+1
  6794  035F  0021               	movlb	1	; select bank1
  6795  0360  0865               	movf	(_rtc_tm^(0+128)+2),w
  6796  0361  0020               	movlb	0	; select bank0
  6797  0362  00BA               	movwf	??_Calculate_Time+2
  6798  0363  01BB               	clrf	??_Calculate_Time+3
  6799  0364  083A               	movf	??_Calculate_Time+2,w
  6800  0365  00A1               	movwf	___wmul@multiplier
  6801  0366  083B               	movf	??_Calculate_Time+3,w
  6802  0367  00A2               	movwf	___wmul@multiplier+1
  6803  0368  3010               	movlw	16
  6804  0369  00A3               	movwf	___wmul@multiplicand
  6805  036A  300E               	movlw	14
  6806  036B  00A4               	movwf	___wmul@multiplicand+1
  6807  036C  3196  2647  3182   	fcall	___wmul
  6808  036F  0020               	movlb	0	; select bank0
  6809  0370  0821               	movf	?___wmul,w
  6810  0371  00BC               	movwf	??_Calculate_Time+4
  6811  0372  0822               	movf	?___wmul+1,w
  6812  0373  00BD               	movwf	??_Calculate_Time+5
  6813  0374  0021               	movlb	1	; select bank1
  6814  0375  0864               	movf	(_rtc_tm^(0+128)+1),w
  6815  0376  0020               	movlb	0	; select bank0
  6816  0377  00BE               	movwf	??_Calculate_Time+6
  6817  0378  01BF               	clrf	??_Calculate_Time+7
  6818  0379  083E               	movf	??_Calculate_Time+6,w
  6819  037A  00A1               	movwf	___wmul@multiplier
  6820  037B  083F               	movf	??_Calculate_Time+7,w
  6821  037C  00A2               	movwf	___wmul@multiplier+1
  6822  037D  303C               	movlw	60
  6823  037E  00A3               	movwf	___wmul@multiplicand
  6824  037F  3000               	movlw	0
  6825  0380  00A4               	movwf	___wmul@multiplicand+1
  6826  0381  3196  2647  3182   	fcall	___wmul
  6827  0384  0020               	movlb	0	; select bank0
  6828  0385  0821               	movf	?___wmul,w
  6829  0386  073C               	addwf	??_Calculate_Time+4,w
  6830  0387  00C0               	movwf	??_Calculate_Time+8
  6831  0388  0822               	movf	?___wmul+1,w
  6832  0389  3D3D               	addwfc	??_Calculate_Time+5,w
  6833  038A  00C1               	movwf	??_Calculate_Time+9
  6834  038B  0838               	movf	??_Calculate_Time,w
  6835  038C  0740               	addwf	??_Calculate_Time+8,w
  6836  038D  00C6               	movwf	Calculate_Time@temp1
  6837  038E  0839               	movf	??_Calculate_Time+1,w
  6838  038F  3D41               	addwfc	??_Calculate_Time+9,w
  6839  0390  00C7               	movwf	Calculate_Time@temp1+1
  6840  0391  01C8               	clrf	Calculate_Time@temp1+2
  6841  0392  1BC7               	btfsc	Calculate_Time@temp1+1,7
  6842  0393  03C8               	decf	Calculate_Time@temp1+2,f
  6843  0394  0848               	movf	Calculate_Time@temp1+2,w
  6844  0395  00C9               	movwf	Calculate_Time@temp1+3
  6845                           
  6846                           ;save.c: 209: temp2 = rtc_save_ch2.hours*3600+rtc_save_ch2.minutes*60+rtc_save_ch2.secon
      +                          ds;
  6847  0396  0021               	movlb	1	; select bank1
  6848  0397  085C               	movf	_rtc_save_ch2^(0+128),w
  6849  0398  0020               	movlb	0	; select bank0
  6850  0399  00B8               	movwf	??_Calculate_Time
  6851  039A  01B9               	clrf	??_Calculate_Time+1
  6852  039B  0021               	movlb	1	; select bank1
  6853  039C  085E               	movf	(_rtc_save_ch2^(0+128)+2),w
  6854  039D  0020               	movlb	0	; select bank0
  6855  039E  00BA               	movwf	??_Calculate_Time+2
  6856  039F  01BB               	clrf	??_Calculate_Time+3
  6857  03A0  083A               	movf	??_Calculate_Time+2,w
  6858  03A1  00A1               	movwf	___wmul@multiplier
  6859  03A2  083B               	movf	??_Calculate_Time+3,w
  6860  03A3  00A2               	movwf	___wmul@multiplier+1
  6861  03A4  3010               	movlw	16
  6862  03A5  00A3               	movwf	___wmul@multiplicand
  6863  03A6  300E               	movlw	14
  6864  03A7  00A4               	movwf	___wmul@multiplicand+1
  6865  03A8  3196  2647  3182   	fcall	___wmul
  6866  03AB  0020               	movlb	0	; select bank0
  6867  03AC  0821               	movf	?___wmul,w
  6868  03AD  00BC               	movwf	??_Calculate_Time+4
  6869  03AE  0822               	movf	?___wmul+1,w
  6870  03AF  00BD               	movwf	??_Calculate_Time+5
  6871  03B0  0021               	movlb	1	; select bank1
  6872  03B1  085D               	movf	(_rtc_save_ch2^(0+128)+1),w
  6873  03B2  0020               	movlb	0	; select bank0
  6874  03B3  00BE               	movwf	??_Calculate_Time+6
  6875  03B4  01BF               	clrf	??_Calculate_Time+7
  6876  03B5  083E               	movf	??_Calculate_Time+6,w
  6877  03B6  00A1               	movwf	___wmul@multiplier
  6878  03B7  083F               	movf	??_Calculate_Time+7,w
  6879  03B8  00A2               	movwf	___wmul@multiplier+1
  6880  03B9  303C               	movlw	60
  6881  03BA  00A3               	movwf	___wmul@multiplicand
  6882  03BB  3000               	movlw	0
  6883  03BC  00A4               	movwf	___wmul@multiplicand+1
  6884  03BD  3196  2647  3182   	fcall	___wmul
  6885  03C0  0020               	movlb	0	; select bank0
  6886  03C1  0821               	movf	?___wmul,w
  6887  03C2  073C               	addwf	??_Calculate_Time+4,w
  6888  03C3  00C0               	movwf	??_Calculate_Time+8
  6889  03C4  0822               	movf	?___wmul+1,w
  6890  03C5  3D3D               	addwfc	??_Calculate_Time+5,w
  6891  03C6  00C1               	movwf	??_Calculate_Time+9
  6892  03C7  0838               	movf	??_Calculate_Time,w
  6893  03C8  0740               	addwf	??_Calculate_Time+8,w
  6894  03C9  00CA               	movwf	Calculate_Time@temp2
  6895  03CA  0839               	movf	??_Calculate_Time+1,w
  6896  03CB  3D41               	addwfc	??_Calculate_Time+9,w
  6897  03CC  00CB               	movwf	Calculate_Time@temp2+1
  6898  03CD  01CC               	clrf	Calculate_Time@temp2+2
  6899  03CE  1BCB               	btfsc	Calculate_Time@temp2+1,7
  6900  03CF  03CC               	decf	Calculate_Time@temp2+2,f
  6901  03D0  084C               	movf	Calculate_Time@temp2+2,w
  6902  03D1  00CD               	movwf	Calculate_Time@temp2+3
  6903                           
  6904                           ;save.c: 210: temp = temp1 - temp2;
  6905  03D2  0846               	movf	Calculate_Time@temp1,w
  6906  03D3  00B8               	movwf	??_Calculate_Time
  6907  03D4  0847               	movf	Calculate_Time@temp1+1,w
  6908  03D5  00B9               	movwf	??_Calculate_Time+1
  6909  03D6  0848               	movf	Calculate_Time@temp1+2,w
  6910  03D7  00BA               	movwf	??_Calculate_Time+2
  6911  03D8  0849               	movf	Calculate_Time@temp1+3,w
  6912  03D9  00BB               	movwf	??_Calculate_Time+3
  6913  03DA  094A               	comf	Calculate_Time@temp2,w
  6914  03DB  00BC               	movwf	??_Calculate_Time+4
  6915  03DC  094B               	comf	Calculate_Time@temp2+1,w
  6916  03DD  00BD               	movwf	??_Calculate_Time+5
  6917  03DE  094C               	comf	Calculate_Time@temp2+2,w
  6918  03DF  00BE               	movwf	??_Calculate_Time+6
  6919  03E0  094D               	comf	Calculate_Time@temp2+3,w
  6920  03E1  00BF               	movwf	??_Calculate_Time+7
  6921  03E2  0ABC               	incf	??_Calculate_Time+4,f
  6922  03E3  1903               	skipnz
  6923  03E4  0ABD               	incf	??_Calculate_Time+5,f
  6924  03E5  1903               	skipnz
  6925  03E6  0ABE               	incf	??_Calculate_Time+6,f
  6926  03E7  1903               	skipnz
  6927  03E8  0ABF               	incf	??_Calculate_Time+7,f
  6928  03E9  083C               	movf	??_Calculate_Time+4,w
  6929  03EA  07B8               	addwf	??_Calculate_Time,f
  6930  03EB  083D               	movf	??_Calculate_Time+5,w
  6931  03EC  3DB9               	addwfc	??_Calculate_Time+1,f
  6932  03ED  083E               	movf	??_Calculate_Time+6,w
  6933  03EE  3DBA               	addwfc	??_Calculate_Time+2,f
  6934  03EF  083F               	movf	??_Calculate_Time+7,w
  6935  03F0  3DBB               	addwfc	??_Calculate_Time+3,f
  6936  03F1  083B               	movf	??_Calculate_Time+3,w
  6937  03F2  00C5               	movwf	Calculate_Time@temp+3
  6938  03F3  083A               	movf	??_Calculate_Time+2,w
  6939  03F4  00C4               	movwf	Calculate_Time@temp+2
  6940  03F5  0839               	movf	??_Calculate_Time+1,w
  6941  03F6  00C3               	movwf	Calculate_Time@temp+1
  6942  03F7  0838               	movf	??_Calculate_Time,w
  6943  03F8  00C2               	movwf	Calculate_Time@temp
  6944                           
  6945                           ;save.c: 211: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  6946  03F9  30DC               	movlw	low (_rtc_save_ch2| 0)
  6947  03FA  0086               	movwf	6
  6948  03FB  0187               	clrf	7
  6949  03FC  30E3               	movlw	low (_rtc_tm| 0)
  6950  03FD  0084               	movwf	4
  6951  03FE  0185               	clrf	5
  6952  03FF  3007               	movlw	7
  6953  0400  0020               	movlb	0	; select bank0
  6954  0401  00B8               	movwf	??_Calculate_Time
  6955  0402                     u464m0:	
  6956  0402  0012               	moviw fsr0++
  6957  0403  001E               	movwi fsr1++
  6958  0404  0BB8               	decfsz	??_Calculate_Time,f
  6959  0405  2C02               	goto	u464m0
  6960                           
  6961                           ;save.c: 212: return temp;
  6962  0406  0020               	movlb	0	; select bank0
  6963  0407  0842               	movf	Calculate_Time@temp,w
  6964  0408  0008               	return
  6965  0409                     l5410:	
  6966                           
  6967                           ;save.c: 213: }
  6968                           ;save.c: 214: }
  6969                           ;save.c: 215: return 0;
  6970  0409  3000               	movlw	0
  6971  040A  0008               	return
  6972  040B                     __end_of_Calculate_Time:	
  6973                           
  6974                           	psect	text19
  6975  1647                     __ptext19:	
  6976 ;; *************** function ___wmul *****************
  6977 ;; Defined at:
  6978 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6981 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;  product         2    5[BANK0 ] unsigned int 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  2    1[BANK0 ] unsigned int 
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, status,0
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6993 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;Total ram usage:        6 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    3
  7000 ;; This function calls:
  7001 ;;		Nothing
  7002 ;; This function is called by:
  7003 ;;		_Calculate_Time
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           
  7008                           ;psect for function ___wmul
  7009  1647                     ___wmul:	
  7010                           
  7011                           ;incstack = 0
  7012                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7013  1647  0020               	movlb	0	; select bank0
  7014  1648  01A5               	clrf	___wmul@product
  7015  1649  01A6               	clrf	___wmul@product+1
  7016  164A                     l5292:	
  7017  164A  1C21               	btfss	___wmul@multiplier,0
  7018  164B  2E50               	goto	l1252
  7019  164C  0823               	movf	___wmul@multiplicand,w
  7020  164D  07A5               	addwf	___wmul@product,f
  7021  164E  0824               	movf	___wmul@multiplicand+1,w
  7022  164F  3DA6               	addwfc	___wmul@product+1,f
  7023  1650                     l1252:	
  7024  1650  3001               	movlw	1
  7025  1651                     u4495:	
  7026  1651  35A3               	lslf	___wmul@multiplicand,f
  7027  1652  0DA4               	rlf	___wmul@multiplicand+1,f
  7028  1653  0B89               	decfsz	9,f
  7029  1654  2E51               	goto	u4495
  7030  1655  3001               	movlw	1
  7031  1656                     u4505:	
  7032  1656  36A2               	lsrf	___wmul@multiplier+1,f
  7033  1657  0CA1               	rrf	___wmul@multiplier,f
  7034  1658  0B89               	decfsz	9,f
  7035  1659  2E56               	goto	u4505
  7036  165A  0821               	movf	___wmul@multiplier,w
  7037  165B  0422               	iorwf	___wmul@multiplier+1,w
  7038  165C  1D03               	btfss	3,2
  7039  165D  2E4A               	goto	l5292
  7040  165E  0826               	movf	___wmul@product+1,w
  7041  165F  00A2               	movwf	?___wmul+1
  7042  1660  0825               	movf	___wmul@product,w
  7043  1661  00A1               	movwf	?___wmul
  7044  1662  0008               	return
  7045  1663                     __end_of___wmul:	
  7046                           
  7047                           	psect	text20
  7048  179A                     __ptext20:	
  7049 ;; *************** function _Write_Flash_head *****************
  7050 ;; Defined at:
  7051 ;;		line 92 in file "mcc_generated_files/save.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      void 
  7058 ;; Registers used:
  7059 ;;		wreg, status,2, status,0, pclath, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;Total ram usage:        0 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    4
  7072 ;; This function calls:
  7073 ;;		_FLASH_WriteWord
  7074 ;; This function is called by:
  7075 ;;		_Key_Process
  7076 ;;		_Calculate_Time
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           
  7081                           ;psect for function _Write_Flash_head
  7082  179A                     _Write_Flash_head:	
  7083                           
  7084                           ;save.c: 94: FLASH_WriteWord(Cur_Save_Index, 0xAAAA);
  7085                           
  7086                           ;incstack = 0
  7087                           ; Regs used in _Write_Flash_head: [wreg+status,2+status,0+pclath+cstack]
  7088  179A  0020               	movlb	0	; select bank0
  7089  179B  0865               	movf	_Cur_Save_Index+1,w
  7090  179C  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7091  179D  0864               	movf	_Cur_Save_Index,w
  7092  179E  00A1               	movwf	FLASH_WriteWord@flashAddr
  7093  179F  30AA               	movlw	170
  7094  17A0  00A3               	movwf	FLASH_WriteWord@word
  7095  17A1  30AA               	movlw	170
  7096  17A2  00A4               	movwf	FLASH_WriteWord@word+1
  7097  17A3  3188  2029  3197   	fcall	_FLASH_WriteWord
  7098                           
  7099                           ;save.c: 95: Cur_Save_Index++;
  7100  17A6  3001               	movlw	1
  7101  17A7  0020               	movlb	0	; select bank0
  7102  17A8  07E4               	addwf	_Cur_Save_Index,f
  7103  17A9  3000               	movlw	0
  7104  17AA  3DE5               	addwfc	_Cur_Save_Index+1,f
  7105                           
  7106                           ;save.c: 96: FLASH_WriteWord(Cur_Save_Index, 0xAAAA);
  7107  17AB  0865               	movf	_Cur_Save_Index+1,w
  7108  17AC  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7109  17AD  0864               	movf	_Cur_Save_Index,w
  7110  17AE  00A1               	movwf	FLASH_WriteWord@flashAddr
  7111  17AF  30AA               	movlw	170
  7112  17B0  00A3               	movwf	FLASH_WriteWord@word
  7113  17B1  30AA               	movlw	170
  7114  17B2  00A4               	movwf	FLASH_WriteWord@word+1
  7115  17B3  3188  2029         	fcall	_FLASH_WriteWord
  7116                           
  7117                           ;save.c: 97: Cur_Save_Index++;
  7118  17B5  3001               	movlw	1
  7119  17B6  0020               	movlb	0	; select bank0
  7120  17B7  07E4               	addwf	_Cur_Save_Index,f
  7121  17B8  3000               	movlw	0
  7122  17B9  3DE5               	addwfc	_Cur_Save_Index+1,f
  7123  17BA  0008               	return
  7124  17BB                     __end_of_Write_Flash_head:	
  7125                           
  7126                           	psect	text21
  7127  1779                     __ptext21:	
  7128 ;; *************** function _Write_Flash_finish *****************
  7129 ;; Defined at:
  7130 ;;		line 106 in file "mcc_generated_files/save.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;		None
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;		None
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  1    wreg      void 
  7137 ;; Registers used:
  7138 ;;		wreg, status,2, status,0, pclath, cstack
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;Total ram usage:        0 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; Hardware stack levels required when called:    4
  7151 ;; This function calls:
  7152 ;;		_FLASH_WriteWord
  7153 ;; This function is called by:
  7154 ;;		_Key_Process
  7155 ;;		_Serach_Flash_Head
  7156 ;;		_Calculate_Time
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           
  7161                           ;psect for function _Write_Flash_finish
  7162  1779                     _Write_Flash_finish:	
  7163                           
  7164                           ;save.c: 108: FLASH_WriteWord(Cur_Save_Index, 0x5555);
  7165                           
  7166                           ;incstack = 0
  7167                           ; Regs used in _Write_Flash_finish: [wreg+status,2+status,0+pclath+cstack]
  7168  1779  0020               	movlb	0	; select bank0
  7169  177A  0865               	movf	_Cur_Save_Index+1,w
  7170  177B  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7171  177C  0864               	movf	_Cur_Save_Index,w
  7172  177D  00A1               	movwf	FLASH_WriteWord@flashAddr
  7173  177E  3055               	movlw	85
  7174  177F  00A3               	movwf	FLASH_WriteWord@word
  7175  1780  3055               	movlw	85
  7176  1781  00A4               	movwf	FLASH_WriteWord@word+1
  7177  1782  3188  2029  3197   	fcall	_FLASH_WriteWord
  7178                           
  7179                           ;save.c: 109: Cur_Save_Index++;
  7180  1785  3001               	movlw	1
  7181  1786  0020               	movlb	0	; select bank0
  7182  1787  07E4               	addwf	_Cur_Save_Index,f
  7183  1788  3000               	movlw	0
  7184  1789  3DE5               	addwfc	_Cur_Save_Index+1,f
  7185                           
  7186                           ;save.c: 110: FLASH_WriteWord(Cur_Save_Index, 0x5555);
  7187  178A  0865               	movf	_Cur_Save_Index+1,w
  7188  178B  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7189  178C  0864               	movf	_Cur_Save_Index,w
  7190  178D  00A1               	movwf	FLASH_WriteWord@flashAddr
  7191  178E  3055               	movlw	85
  7192  178F  00A3               	movwf	FLASH_WriteWord@word
  7193  1790  3055               	movlw	85
  7194  1791  00A4               	movwf	FLASH_WriteWord@word+1
  7195  1792  3188  2029         	fcall	_FLASH_WriteWord
  7196                           
  7197                           ;save.c: 111: Cur_Save_Index++;
  7198  1794  3001               	movlw	1
  7199  1795  0020               	movlb	0	; select bank0
  7200  1796  07E4               	addwf	_Cur_Save_Index,f
  7201  1797  3000               	movlw	0
  7202  1798  3DE5               	addwfc	_Cur_Save_Index+1,f
  7203  1799  0008               	return
  7204  179A                     __end_of_Write_Flash_finish:	
  7205                           
  7206                           	psect	text22
  7207  0E9C                     __ptext22:	
  7208 ;; *************** function _Save_Write_time *****************
  7209 ;; Defined at:
  7210 ;;		line 254 in file "mcc_generated_files/save.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;		None
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  i               1    0        unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;Total ram usage:        2 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    6
  7231 ;; This function calls:
  7232 ;;		_Bq32k_Rtc_Read_Time
  7233 ;;		_Save_Write_word
  7234 ;; This function is called by:
  7235 ;;		_Key_Process
  7236 ;;		_Calculate_Time
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _Save_Write_time
  7242  0E9C                     _Save_Write_time:	
  7243                           
  7244                           ;save.c: 256: unsigned char i;
  7245                           ;save.c: 257: Bq32k_Rtc_Read_Time(&rtc_tm);
  7246                           
  7247                           ;incstack = 0
  7248                           ; Regs used in _Save_Write_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7249  0E9C  30E3               	movlw	(low (_rtc_tm| 0))& (0+255)
  7250  0E9D  318C  24F7  318E   	fcall	_Bq32k_Rtc_Read_Time
  7251                           
  7252                           ;save.c: 258: __builtin_memcpy(&rtc_save_ch1,&rtc_tm,7);
  7253  0EA0  30D5               	movlw	low (_rtc_save_ch1| 0)
  7254  0EA1  0086               	movwf	6
  7255  0EA2  0187               	clrf	7
  7256  0EA3  30E3               	movlw	low (_rtc_tm| 0)
  7257  0EA4  0084               	movwf	4
  7258  0EA5  0185               	clrf	5
  7259  0EA6  3007               	movlw	7
  7260  0EA7  0020               	movlb	0	; select bank0
  7261  0EA8  00B6               	movwf	??_Save_Write_time
  7262  0EA9                     u446m0:	
  7263  0EA9  0012               	moviw fsr0++
  7264  0EAA  001E               	movwi fsr1++
  7265  0EAB  0BB6               	decfsz	??_Save_Write_time,f
  7266  0EAC  2EA9               	goto	u446m0
  7267                           
  7268                           ;save.c: 259: __builtin_memcpy(&rtc_save_ch2,&rtc_tm,7);
  7269  0EAD  30DC               	movlw	low (_rtc_save_ch2| 0)
  7270  0EAE  0086               	movwf	6
  7271  0EAF  0187               	clrf	7
  7272  0EB0  30E3               	movlw	low (_rtc_tm| 0)
  7273  0EB1  0084               	movwf	4
  7274  0EB2  0185               	clrf	5
  7275  0EB3  3007               	movlw	7
  7276  0EB4  0020               	movlb	0	; select bank0
  7277  0EB5  00B6               	movwf	??_Save_Write_time
  7278  0EB6                     u447m0:	
  7279  0EB6  0012               	moviw fsr0++
  7280  0EB7  001E               	movwi fsr1++
  7281  0EB8  0BB6               	decfsz	??_Save_Write_time,f
  7282  0EB9  2EB6               	goto	u447m0
  7283                           
  7284                           ;save.c: 260: Save_Write_word( rtc_tm.years);
  7285  0EBA  0021               	movlb	1	; select bank1
  7286  0EBB  0869               	movf	(_rtc_tm^(0+128)+6),w
  7287  0EBC  0020               	movlb	0	; select bank0
  7288  0EBD  00B6               	movwf	??_Save_Write_time
  7289  0EBE  01B7               	clrf	??_Save_Write_time+1
  7290  0EBF  0836               	movf	??_Save_Write_time,w
  7291  0EC0  00A6               	movwf	Save_Write_word@data
  7292  0EC1  0837               	movf	??_Save_Write_time+1,w
  7293  0EC2  00A7               	movwf	Save_Write_word@data+1
  7294  0EC3  318B  23F4  318E   	fcall	_Save_Write_word
  7295                           
  7296                           ;save.c: 261: Save_Write_word( rtc_tm.month);
  7297  0EC6  0021               	movlb	1	; select bank1
  7298  0EC7  0868               	movf	(_rtc_tm^(0+128)+5),w
  7299  0EC8  0020               	movlb	0	; select bank0
  7300  0EC9  00B6               	movwf	??_Save_Write_time
  7301  0ECA  01B7               	clrf	??_Save_Write_time+1
  7302  0ECB  0836               	movf	??_Save_Write_time,w
  7303  0ECC  00A6               	movwf	Save_Write_word@data
  7304  0ECD  0837               	movf	??_Save_Write_time+1,w
  7305  0ECE  00A7               	movwf	Save_Write_word@data+1
  7306  0ECF  318B  23F4  318E   	fcall	_Save_Write_word
  7307                           
  7308                           ;save.c: 262: Save_Write_word( rtc_tm.date);
  7309  0ED2  0021               	movlb	1	; select bank1
  7310  0ED3  0867               	movf	(_rtc_tm^(0+128)+4),w
  7311  0ED4  0020               	movlb	0	; select bank0
  7312  0ED5  00B6               	movwf	??_Save_Write_time
  7313  0ED6  01B7               	clrf	??_Save_Write_time+1
  7314  0ED7  0836               	movf	??_Save_Write_time,w
  7315  0ED8  00A6               	movwf	Save_Write_word@data
  7316  0ED9  0837               	movf	??_Save_Write_time+1,w
  7317  0EDA  00A7               	movwf	Save_Write_word@data+1
  7318  0EDB  318B  23F4  318E   	fcall	_Save_Write_word
  7319                           
  7320                           ;save.c: 263: Save_Write_word( rtc_tm.hours);
  7321  0EDE  0021               	movlb	1	; select bank1
  7322  0EDF  0865               	movf	(_rtc_tm^(0+128)+2),w
  7323  0EE0  0020               	movlb	0	; select bank0
  7324  0EE1  00B6               	movwf	??_Save_Write_time
  7325  0EE2  01B7               	clrf	??_Save_Write_time+1
  7326  0EE3  0836               	movf	??_Save_Write_time,w
  7327  0EE4  00A6               	movwf	Save_Write_word@data
  7328  0EE5  0837               	movf	??_Save_Write_time+1,w
  7329  0EE6  00A7               	movwf	Save_Write_word@data+1
  7330  0EE7  318B  23F4  318E   	fcall	_Save_Write_word
  7331                           
  7332                           ;save.c: 264: Save_Write_word( rtc_tm.minutes);
  7333  0EEA  0021               	movlb	1	; select bank1
  7334  0EEB  0864               	movf	(_rtc_tm^(0+128)+1),w
  7335  0EEC  0020               	movlb	0	; select bank0
  7336  0EED  00B6               	movwf	??_Save_Write_time
  7337  0EEE  01B7               	clrf	??_Save_Write_time+1
  7338  0EEF  0836               	movf	??_Save_Write_time,w
  7339  0EF0  00A6               	movwf	Save_Write_word@data
  7340  0EF1  0837               	movf	??_Save_Write_time+1,w
  7341  0EF2  00A7               	movwf	Save_Write_word@data+1
  7342  0EF3  318B  23F4  318E   	fcall	_Save_Write_word
  7343                           
  7344                           ;save.c: 265: Save_Write_word( rtc_tm.seconds);
  7345  0EF6  0021               	movlb	1	; select bank1
  7346  0EF7  0863               	movf	_rtc_tm^(0+128),w
  7347  0EF8  0020               	movlb	0	; select bank0
  7348  0EF9  00B6               	movwf	??_Save_Write_time
  7349  0EFA  01B7               	clrf	??_Save_Write_time+1
  7350  0EFB  0836               	movf	??_Save_Write_time,w
  7351  0EFC  00A6               	movwf	Save_Write_word@data
  7352  0EFD  0837               	movf	??_Save_Write_time+1,w
  7353  0EFE  00A7               	movwf	Save_Write_word@data+1
  7354  0EFF  318B  23F4  318E   	fcall	_Save_Write_word
  7355                           
  7356                           ;save.c: 266: Save_Write_word( rtc_tm.wday);
  7357  0F02  0021               	movlb	1	; select bank1
  7358  0F03  0866               	movf	(_rtc_tm^(0+128)+3),w
  7359  0F04  0020               	movlb	0	; select bank0
  7360  0F05  00B6               	movwf	??_Save_Write_time
  7361  0F06  01B7               	clrf	??_Save_Write_time+1
  7362  0F07  0836               	movf	??_Save_Write_time,w
  7363  0F08  00A6               	movwf	Save_Write_word@data
  7364  0F09  0837               	movf	??_Save_Write_time+1,w
  7365  0F0A  00A7               	movwf	Save_Write_word@data+1
  7366  0F0B  318B  23F4         	fcall	_Save_Write_word
  7367  0F0D  0008               	return
  7368  0F0E                     __end_of_Save_Write_time:	
  7369                           
  7370                           	psect	text23
  7371  0BF4                     __ptext23:	
  7372 ;; *************** function _Save_Write_word *****************
  7373 ;; Defined at:
  7374 ;;		line 224 in file "mcc_generated_files/save.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;  data            2    6[BANK0 ] unsigned int 
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;		None
  7379 ;; Return value:  Size  Location     Type
  7380 ;;                  1    wreg      void 
  7381 ;; Registers used:
  7382 ;;		wreg, status,2, status,0, pclath, cstack
  7383 ;; Tracked objects:
  7384 ;;		On entry : 0/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7388 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;Total ram usage:        4 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; Hardware stack levels required when called:    4
  7395 ;; This function calls:
  7396 ;;		_FLASH_EraseBlock
  7397 ;;		_FLASH_WriteWord
  7398 ;; This function is called by:
  7399 ;;		_tc_temperature_trans
  7400 ;;		_Save_process
  7401 ;;		_Save_Write_time
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           
  7406                           ;psect for function _Save_Write_word
  7407  0BF4                     _Save_Write_word:	
  7408                           
  7409                           ;save.c: 226: if(Cur_Save_Index % 32 == 0)
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in _Save_Write_word: [wreg+status,2+status,0+pclath+cstack]
  7413  0BF4  301F               	movlw	31
  7414  0BF5  0020               	movlb	0	; select bank0
  7415  0BF6  0564               	andwf	_Cur_Save_Index,w
  7416  0BF7  00A8               	movwf	??_Save_Write_word
  7417  0BF8  3000               	movlw	0
  7418  0BF9  0565               	andwf	_Cur_Save_Index+1,w
  7419  0BFA  00A9               	movwf	??_Save_Write_word+1
  7420  0BFB  0828               	movf	??_Save_Write_word,w
  7421  0BFC  0429               	iorwf	??_Save_Write_word+1,w
  7422  0BFD  1D03               	btfss	3,2
  7423  0BFE  2C14               	goto	l5212
  7424                           
  7425                           ;save.c: 227: {
  7426                           ;save.c: 228: if(Cur_Save_Index == 16384 - 32)
  7427  0BFF  30E0               	movlw	224
  7428  0C00  0664               	xorwf	_Cur_Save_Index,w
  7429  0C01  303F               	movlw	63
  7430  0C02  1903               	skipnz
  7431  0C03  0665               	xorwf	_Cur_Save_Index+1,w
  7432  0C04  1D03               	btfss	3,2
  7433  0C05  2C0A               	goto	l5210
  7434                           
  7435                           ;save.c: 229: {
  7436                           ;save.c: 230: FLASH_EraseBlock(0x2000);
  7437  0C06  3000               	movlw	0
  7438  0C07  00A1               	movwf	FLASH_EraseBlock@startAddr
  7439  0C08  3020               	movlw	32
  7440  0C09  2C10               	goto	L8
  7441  0C0A                     l5210:	
  7442                           ;save.c: 231: }
  7443                           
  7444                           
  7445                           ;save.c: 232: else
  7446                           ;save.c: 233: {
  7447                           ;save.c: 234: FLASH_EraseBlock(Cur_Save_Index+32);
  7448  0C0A  0020               	movlb	0	; select bank0
  7449  0C0B  0864               	movf	_Cur_Save_Index,w
  7450  0C0C  3E20               	addlw	32
  7451  0C0D  00A1               	movwf	FLASH_EraseBlock@startAddr
  7452  0C0E  3000               	movlw	0
  7453  0C0F  3D65               	addwfc	_Cur_Save_Index+1,w
  7454  0C10                     L8:	
  7455  0C10  00A2               	movwf	FLASH_EraseBlock@startAddr+1
  7456  0C11  3197  2717  318B   	fcall	_FLASH_EraseBlock
  7457  0C14                     l5212:	
  7458                           
  7459                           ;save.c: 235: }
  7460                           ;save.c: 236: }
  7461                           ;save.c: 237: if( (data & 0x3fff) == 0x3fff)
  7462  0C14  30FF               	movlw	255
  7463  0C15  0020               	movlb	0	; select bank0
  7464  0C16  0526               	andwf	Save_Write_word@data,w
  7465  0C17  00A8               	movwf	??_Save_Write_word
  7466  0C18  303F               	movlw	63
  7467  0C19  0527               	andwf	Save_Write_word@data+1,w
  7468  0C1A  00A9               	movwf	??_Save_Write_word+1
  7469  0C1B  0A28               	incf	??_Save_Write_word,w
  7470  0C1C  303F               	movlw	63
  7471  0C1D  1903               	skipnz
  7472  0C1E  0629               	xorwf	??_Save_Write_word+1,w
  7473  0C1F  1D03               	btfss	3,2
  7474  0C20  2C2A               	goto	l5216
  7475                           
  7476                           ;save.c: 238: FLASH_WriteWord(Cur_Save_Index, 0x3ffe);
  7477  0C21  0865               	movf	_Cur_Save_Index+1,w
  7478  0C22  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7479  0C23  0864               	movf	_Cur_Save_Index,w
  7480  0C24  00A1               	movwf	FLASH_WriteWord@flashAddr
  7481  0C25  30FE               	movlw	254
  7482  0C26  00A3               	movwf	FLASH_WriteWord@word
  7483  0C27  303F               	movlw	63
  7484  0C28  00A4               	movwf	FLASH_WriteWord@word+1
  7485  0C29  2C33               	goto	L9
  7486  0C2A                     l5216:	
  7487                           
  7488                           ;save.c: 239: else
  7489                           ;save.c: 240: FLASH_WriteWord(Cur_Save_Index, data);
  7490  0C2A  0020               	movlb	0	; select bank0
  7491  0C2B  0865               	movf	_Cur_Save_Index+1,w
  7492  0C2C  00A2               	movwf	FLASH_WriteWord@flashAddr+1
  7493  0C2D  0864               	movf	_Cur_Save_Index,w
  7494  0C2E  00A1               	movwf	FLASH_WriteWord@flashAddr
  7495  0C2F  0827               	movf	Save_Write_word@data+1,w
  7496  0C30  00A4               	movwf	FLASH_WriteWord@word+1
  7497  0C31  0826               	movf	Save_Write_word@data,w
  7498  0C32  00A3               	movwf	FLASH_WriteWord@word
  7499  0C33                     L9:	
  7500  0C33  3188  2029  318B   	fcall	_FLASH_WriteWord
  7501                           
  7502                           ;save.c: 241: Cur_Save_Index++;
  7503  0C36  3001               	movlw	1
  7504  0C37  0020               	movlb	0	; select bank0
  7505  0C38  07E4               	addwf	_Cur_Save_Index,f
  7506  0C39  3000               	movlw	0
  7507  0C3A  3DE5               	addwfc	_Cur_Save_Index+1,f
  7508                           
  7509                           ;save.c: 242: if( Cur_Save_Index == 16384)
  7510  0C3B  3040               	movlw	64
  7511  0C3C  0665               	xorwf	_Cur_Save_Index+1,w
  7512  0C3D  0464               	iorwf	_Cur_Save_Index,w
  7513  0C3E  1D03               	btfss	3,2
  7514  0C3F  0008               	return
  7515                           
  7516                           ;save.c: 243: {
  7517                           ;save.c: 244: Cur_Save_Index = 0x2000;
  7518  0C40  3000               	movlw	0
  7519  0C41  00E4               	movwf	_Cur_Save_Index
  7520  0C42  3020               	movlw	32
  7521  0C43  00E5               	movwf	_Cur_Save_Index+1
  7522  0C44  0008               	return
  7523  0C45                     __end_of_Save_Write_word:	
  7524                           
  7525                           	psect	text24
  7526  1717                     __ptext24:	
  7527 ;; *************** function _FLASH_EraseBlock *****************
  7528 ;; Defined at:
  7529 ;;		line 178 in file "mcc_generated_files/memory.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;  startAddr       2    1[BANK0 ] unsigned int 
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7534 ;; Return value:  Size  Location     Type
  7535 ;;                  1    wreg      void 
  7536 ;; Registers used:
  7537 ;;		wreg, status,2, status,0
  7538 ;; Tracked objects:
  7539 ;;		On entry : 0/0
  7540 ;;		On exit  : 0/0
  7541 ;;		Unchanged: 0/0
  7542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7543 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;Total ram usage:        3 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    3
  7550 ;; This function calls:
  7551 ;;		Nothing
  7552 ;; This function is called by:
  7553 ;;		_Save_Write_word
  7554 ;;		_FLASH_WriteBlock
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           
  7559                           ;psect for function _FLASH_EraseBlock
  7560  1717                     _FLASH_EraseBlock:	
  7561                           
  7562                           ;memory.c: 179: uint8_t GIEBitValue = INTCONbits.GIE;
  7563                           
  7564                           ;incstack = 0
  7565                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  7566  1717  3000               	movlw	0
  7567  1718  1B8B               	btfsc	11,7	;volatile
  7568  1719  3001               	movlw	1
  7569  171A  0020               	movlb	0	; select bank0
  7570  171B  00A3               	movwf	FLASH_EraseBlock@GIEBitValue
  7571                           
  7572                           ;memory.c: 182: INTCONbits.GIE = 0;
  7573  171C  138B               	bcf	11,7	;volatile
  7574                           
  7575                           ;memory.c: 184: PMADRL = (startAddr & 0xFF);
  7576  171D  0821               	movf	FLASH_EraseBlock@startAddr,w
  7577  171E  0023               	movlb	3	; select bank3
  7578  171F  0091               	movwf	17	;volatile
  7579                           
  7580                           ;memory.c: 186: PMADRH = ((startAddr & 0xFF00) >> 8);
  7581  1720  0020               	movlb	0	; select bank0
  7582  1721  0822               	movf	FLASH_EraseBlock@startAddr+1,w
  7583  1722  0023               	movlb	3	; select bank3
  7584  1723  0092               	movwf	18	;volatile
  7585                           
  7586                           ;memory.c: 189: PMCON1bits.CFGS = 0;
  7587  1724  1315               	bcf	21,6	;volatile
  7588                           
  7589                           ;memory.c: 190: PMCON1bits.FREE = 1;
  7590  1725  1615               	bsf	21,4	;volatile
  7591                           
  7592                           ;memory.c: 191: PMCON1bits.WREN = 1;
  7593  1726  1515               	bsf	21,2	;volatile
  7594                           
  7595                           ;memory.c: 194: PMCON2 = 0x55;
  7596  1727  3055               	movlw	85
  7597  1728  0096               	movwf	22	;volsfr
  7598                           
  7599                           ;memory.c: 195: PMCON2 = 0xAA;
  7600  1729  30AA               	movlw	170
  7601  172A  0096               	movwf	22	;volsfr
  7602                           
  7603                           ;memory.c: 196: PMCON1bits.WR = 1;
  7604  172B  1495               	bsf	21,1	;volatile
  7605                           
  7606                           ;memory.c: 197: __nop();
  7607  172C  0000               	nop
  7608                           
  7609                           ;memory.c: 198: __nop();
  7610  172D  0000               	nop
  7611                           
  7612                           ;memory.c: 200: PMCON1bits.WREN = 0;
  7613  172E  0023               	movlb	3	; select bank3
  7614  172F  1115               	bcf	21,2	;volatile
  7615                           
  7616                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  7617  1730  0020               	movlb	0	; select bank0
  7618  1731  0C23               	rrf	FLASH_EraseBlock@GIEBitValue,w
  7619  1732  1C03               	skipc
  7620  1733  138B               	bcf	11,7	;volatile
  7621  1734  1803               	skipnc
  7622  1735  178B               	bsf	11,7	;volatile
  7623  1736  0008               	return
  7624  1737                     __end_of_FLASH_EraseBlock:	
  7625                           
  7626                           	psect	text25
  7627  154A                     __ptext25:	
  7628 ;; *************** function _maxim_clear_fault_status *****************
  7629 ;; Defined at:
  7630 ;;		line 155 in file "mcc_generated_files/max31856.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;		None
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;		None
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg, status,2, status,0, pclath, cstack
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;Total ram usage:        1 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:    5
  7651 ;; This function calls:
  7652 ;;		_maxim_31856_read_register
  7653 ;;		_maxim_31856_write_register
  7654 ;; This function is called by:
  7655 ;;		_temperature_display
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function _maxim_clear_fault_status
  7661  154A                     _maxim_clear_fault_status:	
  7662                           
  7663                           ;max31856.c: 157: uch_cr0= maxim_31856_read_register(0x00);
  7664                           
  7665                           ;incstack = 0
  7666                           ; Regs used in _maxim_clear_fault_status: [wreg+status,2+status,0+pclath+cstack]
  7667  154A  3000               	movlw	0
  7668  154B  3195  2582  3195   	fcall	_maxim_31856_read_register
  7669  154E  0020               	movlb	0	; select bank0
  7670  154F  00A5               	movwf	??_maxim_clear_fault_status
  7671  1550  0825               	movf	??_maxim_clear_fault_status,w
  7672  1551  00EA               	movwf	_uch_cr0
  7673                           
  7674                           ;max31856.c: 158: uch_cr0|= (uint8_t) 0x02 ;
  7675  1552  14EA               	bsf	_uch_cr0,1
  7676                           
  7677                           ;max31856.c: 159: maxim_31856_write_register(0x80, uch_cr0);
  7678  1553  086A               	movf	_uch_cr0,w
  7679  1554  00A5               	movwf	??_maxim_clear_fault_status
  7680  1555  0825               	movf	??_maxim_clear_fault_status,w
  7681  1556  00A2               	movwf	maxim_31856_write_register@uch_register_value
  7682  1557  3080               	movlw	128
  7683  1558  3195  252A         	fcall	_maxim_31856_write_register
  7684  155A  0008               	return
  7685  155B                     __end_of_maxim_clear_fault_status:	
  7686                           
  7687                           	psect	text26
  7688  0854                     __ptext26:	
  7689 ;; *************** function _err_Display *****************
  7690 ;; Defined at:
  7691 ;;		line 153 in file "mcc_generated_files/ht1621.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;		None
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;  num             4   12[BANK0 ] unsigned char [4]
  7696 ;; Return value:  Size  Location     Type
  7697 ;;                  1    wreg      void 
  7698 ;; Registers used:
  7699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;Total ram usage:        5 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:    5
  7712 ;; This function calls:
  7713 ;;		_WriteAll_1621
  7714 ;; This function is called by:
  7715 ;;		_temperature_display
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           
  7720                           ;psect for function _err_Display
  7721  0854                     _err_Display:	
  7722                           
  7723                           ;ht1621.c: 155: unsigned char num[4]={0};
  7724                           
  7725                           ;incstack = 0
  7726                           ; Regs used in _err_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7727  0854  0021               	movlb	1	; select bank1
  7728  0855  082B               	movf	(err_Display@F2135+3)^(0+128),w
  7729  0856  0020               	movlb	0	; select bank0
  7730  0857  00AF               	movwf	err_Display@num+3
  7731  0858  0021               	movlb	1	; select bank1
  7732  0859  082A               	movf	(err_Display@F2135+2)^(0+128),w
  7733  085A  0020               	movlb	0	; select bank0
  7734  085B  00AE               	movwf	err_Display@num+2
  7735  085C  0021               	movlb	1	; select bank1
  7736  085D  0829               	movf	(err_Display@F2135+1)^(0+128),w
  7737  085E  0020               	movlb	0	; select bank0
  7738  085F  00AD               	movwf	err_Display@num+1
  7739  0860  0021               	movlb	1	; select bank1
  7740  0861  0828               	movf	err_Display@F2135^(0+128),w
  7741  0862  0020               	movlb	0	; select bank0
  7742  0863  00AC               	movwf	err_Display@num
  7743                           
  7744                           ;ht1621.c: 156: num[1] = Dis_TAB[0x10];
  7745  0864  3010               	movlw	low ((_Dis_TAB+16)| (0+32768))
  7746  0865  0084               	movwf	4
  7747  0866  3098               	movlw	high ((_Dis_TAB+16)| (0+32768))
  7748  0867  0085               	movwf	5
  7749  0868  0800               	movf	0,w	;code access
  7750  0869  00AB               	movwf	??_err_Display
  7751  086A  082B               	movf	??_err_Display,w
  7752  086B  00AD               	movwf	err_Display@num+1
  7753                           
  7754                           ;ht1621.c: 157: num[2] = Dis_TAB[0x0c];
  7755  086C  300C               	movlw	low ((_Dis_TAB+12)| (0+32768))
  7756  086D  0084               	movwf	4
  7757  086E  3098               	movlw	high ((_Dis_TAB+12)| (0+32768))
  7758  086F  0085               	movwf	5
  7759  0870  0800               	movf	0,w	;code access
  7760  0871  00AB               	movwf	??_err_Display
  7761  0872  082B               	movf	??_err_Display,w
  7762  0873  00AE               	movwf	err_Display@num+2
  7763                           
  7764                           ;ht1621.c: 158: WriteAll_1621(0, num, 4);
  7765  0874  302C               	movlw	low err_Display@num
  7766  0875  00A5               	movwf	WriteAll_1621@p
  7767  0876  3000               	movlw	high err_Display@num
  7768  0877  00A6               	movwf	WriteAll_1621@p+1
  7769  0878  3004               	movlw	4
  7770  0879  00AB               	movwf	??_err_Display
  7771  087A  082B               	movf	??_err_Display,w
  7772  087B  00A7               	movwf	WriteAll_1621@cnt
  7773  087C  3000               	movlw	0
  7774  087D  3189  2170         	fcall	_WriteAll_1621
  7775  087F  0008               	return
  7776  0880                     __end_of_err_Display:	
  7777                           
  7778                           	psect	text27
  7779  04F1                     __ptext27:	
  7780 ;; *************** function _Tc_Display *****************
  7781 ;; Defined at:
  7782 ;;		line 110 in file "mcc_generated_files/ht1621.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;		None
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;  data            2   17[BANK0 ] unsigned int 
  7787 ;;  count           1   16[BANK0 ] unsigned char 
  7788 ;; Return value:  Size  Location     Type
  7789 ;;                  1    wreg      void 
  7790 ;; Registers used:
  7791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7792 ;; Tracked objects:
  7793 ;;		On entry : 0/0
  7794 ;;		On exit  : 0/0
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7798 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;Total ram usage:        4 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    5
  7804 ;; This function calls:
  7805 ;;		_WriteAll_1621
  7806 ;;		___lwdiv
  7807 ;;		___lwmod
  7808 ;;		_memset
  7809 ;; This function is called by:
  7810 ;;		_temperature_display
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           
  7815                           ;psect for function _Tc_Display
  7816  04F1                     _Tc_Display:	
  7817                           
  7818                           ;ht1621.c: 112: unsigned char count = 0;
  7819                           
  7820                           ;incstack = 0
  7821                           ; Regs used in _Tc_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7822  04F1  0020               	movlb	0	; select bank0
  7823  04F2  01B0               	clrf	Tc_Display@count
  7824                           
  7825                           ;ht1621.c: 113: unsigned int data = temperature_int;
  7826  04F3  0021               	movlb	1	; select bank1
  7827  04F4  0835               	movf	(_temperature_int+1)^(0+128),w
  7828  04F5  0020               	movlb	0	; select bank0
  7829  04F6  00B2               	movwf	Tc_Display@data+1
  7830  04F7  0021               	movlb	1	; select bank1
  7831  04F8  0834               	movf	_temperature_int^(0+128),w
  7832  04F9  0020               	movlb	0	; select bank0
  7833  04FA  00B1               	movwf	Tc_Display@data
  7834                           
  7835                           ;ht1621.c: 114: memset(display_buff,0,4);
  7836  04FB  3000               	movlw	0
  7837  04FC  00A1               	movwf	memset@c
  7838  04FD  00A2               	movwf	memset@c+1
  7839  04FE  3004               	movlw	4
  7840  04FF  00A3               	movwf	memset@n
  7841  0500  3000               	movlw	0
  7842  0501  00A4               	movwf	memset@n+1
  7843  0502  30EA               	movlw	(low (_display_buff| 0))& (0+255)
  7844  0503  3196  2611  3184   	fcall	_memset
  7845  0506                     l5730:	
  7846                           ;ht1621.c: 115: while(data)
  7847                           
  7848  0506  0020               	movlb	0	; select bank0
  7849  0507  0831               	movf	Tc_Display@data,w
  7850  0508  0432               	iorwf	Tc_Display@data+1,w
  7851  0509  1903               	btfsc	3,2
  7852  050A  2D8E               	goto	l5738
  7853                           
  7854                           ;ht1621.c: 116: {
  7855                           ;ht1621.c: 117: count++;
  7856  050B  3001               	movlw	1
  7857  050C  0020               	movlb	0	; select bank0
  7858  050D  00AF               	movwf	??_Tc_Display
  7859  050E  082F               	movf	??_Tc_Display,w
  7860  050F  07B0               	addwf	Tc_Display@count,f
  7861                           
  7862                           ;ht1621.c: 118: data /=10;
  7863  0510  300A               	movlw	10
  7864  0511  00A7               	movwf	___lwdiv@divisor
  7865  0512  3000               	movlw	0
  7866  0513  00A8               	movwf	___lwdiv@divisor+1
  7867  0514  0832               	movf	Tc_Display@data+1,w
  7868  0515  00AA               	movwf	___lwdiv@dividend+1
  7869  0516  0831               	movf	Tc_Display@data,w
  7870  0517  00A9               	movwf	___lwdiv@dividend
  7871  0518  3189  21A5  3184   	fcall	___lwdiv
  7872  051B  0020               	movlb	0	; select bank0
  7873  051C  0828               	movf	?___lwdiv+1,w
  7874  051D  00B2               	movwf	Tc_Display@data+1
  7875  051E  0827               	movf	?___lwdiv,w
  7876  051F  00B1               	movwf	Tc_Display@data
  7877  0520  2D06               	goto	l5730
  7878  0521                     l5732:	
  7879                           ;ht1621.c: 121: {
  7880                           ;ht1621.c: 122: case 3:display_buff[0] = Dis_TAB[temperature_int/100];
  7881                           
  7882                           ;ht1621.c: 119: }
  7883                           ;ht1621.c: 120: switch(count)
  7884                           
  7885  0521  3064               	movlw	100
  7886  0522  00A7               	movwf	___lwdiv@divisor
  7887  0523  3000               	movlw	0
  7888  0524  00A8               	movwf	___lwdiv@divisor+1
  7889  0525  0021               	movlb	1	; select bank1
  7890  0526  0835               	movf	(_temperature_int+1)^(0+128),w
  7891  0527  0020               	movlb	0	; select bank0
  7892  0528  00AA               	movwf	___lwdiv@dividend+1
  7893  0529  0021               	movlb	1	; select bank1
  7894  052A  0834               	movf	_temperature_int^(0+128),w
  7895  052B  0020               	movlb	0	; select bank0
  7896  052C  00A9               	movwf	___lwdiv@dividend
  7897  052D  3189  21A5  3184   	fcall	___lwdiv
  7898  0530  0020               	movlb	0	; select bank0
  7899  0531  0828               	movf	?___lwdiv+1,w
  7900  0532  0085               	movwf	5
  7901  0533  0827               	movf	?___lwdiv,w
  7902  0534  0084               	movwf	4
  7903  0535  3000               	movlw	low (_Dis_TAB| (0+32768))
  7904  0536  0784               	addwf	4,f
  7905  0537  3098               	movlw	high (_Dis_TAB| (0+32768))
  7906  0538  3D85               	addwfc	5,f
  7907  0539  0800               	movf	0,w	;code access
  7908  053A  00AF               	movwf	??_Tc_Display
  7909  053B  082F               	movf	??_Tc_Display,w
  7910  053C  0021               	movlb	1	; select bank1
  7911  053D  00EA               	movwf	_display_buff^(0+128)
  7912  053E                     l772:	
  7913                           ;ht1621.c: 123: case 2:display_buff[1] = Dis_TAB[temperature_int%100/10];
  7914                           
  7915  053E  300A               	movlw	10
  7916  053F  0020               	movlb	0	; select bank0
  7917  0540  00A7               	movwf	___lwdiv@divisor
  7918  0541  3000               	movlw	0
  7919  0542  00A8               	movwf	___lwdiv@divisor+1
  7920  0543  0021               	movlb	1	; select bank1
  7921  0544  0835               	movf	(_temperature_int+1)^(0+128),w
  7922  0545  0020               	movlb	0	; select bank0
  7923  0546  00A4               	movwf	___lwmod@dividend+1
  7924  0547  0021               	movlb	1	; select bank1
  7925  0548  0834               	movf	_temperature_int^(0+128),w
  7926  0549  0020               	movlb	0	; select bank0
  7927  054A  00A3               	movwf	___lwmod@dividend
  7928  054B  3064               	movlw	100
  7929  054C  00A1               	movwf	___lwmod@divisor
  7930  054D  3000               	movlw	0
  7931  054E  00A2               	movwf	___lwmod@divisor+1
  7932  054F  3188  2080  3184   	fcall	___lwmod
  7933  0552  0020               	movlb	0	; select bank0
  7934  0553  0822               	movf	?___lwmod+1,w
  7935  0554  00AA               	movwf	___lwdiv@dividend+1
  7936  0555  0821               	movf	?___lwmod,w
  7937  0556  00A9               	movwf	___lwdiv@dividend
  7938  0557  3189  21A5  3184   	fcall	___lwdiv
  7939  055A  0020               	movlb	0	; select bank0
  7940  055B  0828               	movf	?___lwdiv+1,w
  7941  055C  0085               	movwf	5
  7942  055D  0827               	movf	?___lwdiv,w
  7943  055E  0084               	movwf	4
  7944  055F  3000               	movlw	low (_Dis_TAB| (0+32768))
  7945  0560  0784               	addwf	4,f
  7946  0561  3098               	movlw	high (_Dis_TAB| (0+32768))
  7947  0562  3D85               	addwfc	5,f
  7948  0563  0800               	movf	0,w	;code access
  7949  0564  00AF               	movwf	??_Tc_Display
  7950  0565  082F               	movf	??_Tc_Display,w
  7951  0566  0021               	movlb	1	; select bank1
  7952  0567  00EB               	movwf	(_display_buff^(0+128)+1)
  7953  0568                     l773:	
  7954                           ;ht1621.c: 124: case 1:display_buff[2] = Dis_TAB[temperature_int%10]; break;
  7955                           
  7956  0568  300A               	movlw	10
  7957  0569  0020               	movlb	0	; select bank0
  7958  056A  00A1               	movwf	___lwmod@divisor
  7959  056B  3000               	movlw	0
  7960  056C  00A2               	movwf	___lwmod@divisor+1
  7961  056D  0021               	movlb	1	; select bank1
  7962  056E  0835               	movf	(_temperature_int+1)^(0+128),w
  7963  056F  0020               	movlb	0	; select bank0
  7964  0570  00A4               	movwf	___lwmod@dividend+1
  7965  0571  0021               	movlb	1	; select bank1
  7966  0572  0834               	movf	_temperature_int^(0+128),w
  7967  0573  0020               	movlb	0	; select bank0
  7968  0574  00A3               	movwf	___lwmod@dividend
  7969  0575  3188  2080  3184   	fcall	___lwmod
  7970  0578  0020               	movlb	0	; select bank0
  7971  0579  0822               	movf	?___lwmod+1,w
  7972  057A  0085               	movwf	5
  7973  057B  0821               	movf	?___lwmod,w
  7974  057C  0084               	movwf	4
  7975  057D  3000               	movlw	low (_Dis_TAB| (0+32768))
  7976  057E  0784               	addwf	4,f
  7977  057F  3098               	movlw	high (_Dis_TAB| (0+32768))
  7978  0580  3D85               	addwfc	5,f
  7979  0581  0800               	movf	0,w	;code access
  7980  0582  2D89               	goto	L10
  7981  0583                     l5734:	
  7982                           ;ht1621.c: 125: case 0:display_buff[2] = Dis_TAB[0];
  7983                           
  7984  0583  3000               	movlw	low (_Dis_TAB| (0+32768))
  7985  0584  0084               	movwf	4
  7986  0585  3098               	movlw	high (_Dis_TAB| (0+32768))
  7987  0586  0085               	movwf	5
  7988  0587  0800               	movf	0,w	;code access
  7989  0588  0020               	movlb	0	; select bank0
  7990  0589                     L10:	
  7991  0589  00AF               	movwf	??_Tc_Display
  7992  058A  082F               	movf	??_Tc_Display,w
  7993  058B  0021               	movlb	1	; select bank1
  7994  058C  00EC               	movwf	(_display_buff^(0+128)+2)
  7995                           
  7996                           ;ht1621.c: 127: }
  7997                           
  7998                           ;ht1621.c: 126: default:break;
  7999  058D  2D9D               	goto	l5740
  8000  058E                     l5738:	
  8001  058E  0020               	movlb	0	; select bank0
  8002  058F  0830               	movf	Tc_Display@count,w
  8003                           
  8004                           ; Switch size 1, requested type "space"
  8005                           ; Number of cases is 4, Range of values is 0 to 3
  8006                           ; switch strategies available:
  8007                           ; Name         Instructions Cycles
  8008                           ; simple_byte           13     7 (average)
  8009                           ; direct_byte           14     6 (fixed)
  8010                           ; jumptable            260     6 (fixed)
  8011                           ;	Chosen strategy is simple_byte
  8012  0590  3A00               	xorlw	0	; case 0
  8013  0591  1903               	skipnz
  8014  0592  2D83               	goto	l5734
  8015  0593  3A01               	xorlw	1	; case 1
  8016  0594  1903               	skipnz
  8017  0595  2D68               	goto	l773
  8018  0596  3A03               	xorlw	3	; case 2
  8019  0597  1903               	skipnz
  8020  0598  2D3E               	goto	l772
  8021  0599  3A01               	xorlw	1	; case 3
  8022  059A  1903               	skipnz
  8023  059B  2D21               	goto	l5732
  8024  059C  2D9D               	goto	l5740
  8025  059D                     l5740:	
  8026                           
  8027                           ;ht1621.c: 128: if(temperature_sign == 1) display_buff[0]=0x20;
  8028  059D  0021               	movlb	1	; select bank1
  8029  059E  0343               	decf	_temperature_sign^(0+128),w
  8030  059F  1D03               	btfss	3,2
  8031  05A0  2DA7               	goto	l5744
  8032  05A1  3020               	movlw	32
  8033  05A2  0020               	movlb	0	; select bank0
  8034  05A3  00AF               	movwf	??_Tc_Display
  8035  05A4  082F               	movf	??_Tc_Display,w
  8036  05A5  0021               	movlb	1	; select bank1
  8037  05A6  00EA               	movwf	_display_buff^(0+128)
  8038  05A7                     l5744:	
  8039                           
  8040                           ;ht1621.c: 129: display_buff[3] = Dis_TAB[temperature_decimal] | 0x08;
  8041  05A7  0020               	movlb	0	; select bank0
  8042  05A8  0868               	movf	_temperature_decimal,w
  8043  05A9  3E00               	addlw	low (_Dis_TAB| (0+32768))
  8044  05AA  0084               	movwf	4
  8045  05AB  3098               	movlw	high (_Dis_TAB| (0+32768))
  8046  05AC  1803               	skipnc
  8047  05AD  3E01               	addlw	1
  8048  05AE  0085               	movwf	5
  8049  05AF  0800               	movf	0,w	;code access
  8050  05B0  3808               	iorlw	8
  8051  05B1  00AF               	movwf	??_Tc_Display
  8052  05B2  082F               	movf	??_Tc_Display,w
  8053  05B3  0021               	movlb	1	; select bank1
  8054  05B4  00ED               	movwf	(_display_buff^(0+128)+3)
  8055                           
  8056                           ;ht1621.c: 130: WriteAll_1621(0,display_buff,4);
  8057  05B5  30EA               	movlw	low _display_buff
  8058  05B6  0020               	movlb	0	; select bank0
  8059  05B7  00A5               	movwf	WriteAll_1621@p
  8060  05B8  3000               	movlw	high _display_buff
  8061  05B9  00A6               	movwf	WriteAll_1621@p+1
  8062  05BA  3004               	movlw	4
  8063  05BB  00AF               	movwf	??_Tc_Display
  8064  05BC  082F               	movf	??_Tc_Display,w
  8065  05BD  00A7               	movwf	WriteAll_1621@cnt
  8066  05BE  3000               	movlw	0
  8067  05BF  3189  2170         	fcall	_WriteAll_1621
  8068  05C1  0008               	return
  8069  05C2                     __end_of_Tc_Display:	
  8070                           
  8071                           	psect	text28
  8072  1611                     __ptext28:	
  8073 ;; *************** function _memset *****************
  8074 ;; Defined at:
  8075 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  p1              1    wreg     PTR void 
  8078 ;;		 -> display_buff(4), 
  8079 ;;  c               2    1[BANK0 ] int 
  8080 ;;  n               2    3[BANK0 ] unsigned int 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  p1              1    6[BANK0 ] PTR void 
  8083 ;;		 -> display_buff(4), 
  8084 ;;  p               1    7[BANK0 ] PTR unsigned char 
  8085 ;;		 -> display_buff(4), 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      PTR void 
  8088 ;; Registers used:
  8089 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8095 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;Total ram usage:        7 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    3
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_Tc_Display
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           
  8110                           ;psect for function _memset
  8111  1611                     _memset:	
  8112                           
  8113                           ;incstack = 0
  8114                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8115                           ;memset@p1 stored from wreg
  8116  1611  0020               	movlb	0	; select bank0
  8117  1612  00A6               	movwf	memset@p1
  8118  1613  0826               	movf	memset@p1,w
  8119  1614  00A5               	movwf	??_memset
  8120  1615  0825               	movf	??_memset,w
  8121  1616  00A7               	movwf	memset@p
  8122  1617                     l5420:	
  8123  1617  3001               	movlw	1
  8124  1618  02A3               	subwf	memset@n,f
  8125  1619  3000               	movlw	0
  8126  161A  3BA4               	subwfb	memset@n+1,f
  8127  161B  0A23               	incf	memset@n,w
  8128  161C  1903               	btfsc	3,2
  8129  161D  0A24               	incf	memset@n+1,w
  8130  161E  1903               	btfsc	3,2
  8131  161F  0008               	return
  8132  1620  0821               	movf	memset@c,w
  8133  1621  00A5               	movwf	??_memset
  8134  1622  0827               	movf	memset@p,w
  8135  1623  0086               	movwf	6
  8136  1624  0187               	clrf	7
  8137  1625  0825               	movf	??_memset,w
  8138  1626  0081               	movwf	1
  8139  1627  3001               	movlw	1
  8140  1628  00A5               	movwf	??_memset
  8141  1629  0825               	movf	??_memset,w
  8142  162A  07A7               	addwf	memset@p,f
  8143  162B  2E17               	goto	l5420
  8144  162C                     __end_of_memset:	
  8145                           ;	Return value of _memset is never used
  8146                           
  8147                           
  8148                           	psect	text29
  8149  0880                     __ptext29:	
  8150 ;; *************** function ___lwmod *****************
  8151 ;; Defined at:
  8152 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  divisor         2    1[BANK0 ] unsigned int 
  8155 ;;  dividend        2    3[BANK0 ] unsigned int 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  counter         1    6[BANK0 ] unsigned char 
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  2    1[BANK0 ] unsigned int 
  8160 ;; Registers used:
  8161 ;;		wreg, status,2, status,0
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8167 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;Total ram usage:        6 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    3
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_Tc_Display
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function ___lwmod
  8183  0880                     ___lwmod:	
  8184                           
  8185                           ;incstack = 0
  8186                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8187  0880  0020               	movlb	0	; select bank0
  8188  0881  0821               	movf	___lwmod@divisor,w
  8189  0882  0422               	iorwf	___lwmod@divisor+1,w
  8190  0883  1903               	btfsc	3,2
  8191  0884  28A8               	goto	l5548
  8192  0885  01A6               	clrf	___lwmod@counter
  8193  0886  0AA6               	incf	___lwmod@counter,f
  8194  0887                     l5538:	
  8195  0887  1BA2               	btfsc	___lwmod@divisor+1,7
  8196  0888  2893               	goto	l5540
  8197  0889  3001               	movlw	1
  8198  088A                     u4935:	
  8199  088A  35A1               	lslf	___lwmod@divisor,f
  8200  088B  0DA2               	rlf	___lwmod@divisor+1,f
  8201  088C  0B89               	decfsz	9,f
  8202  088D  288A               	goto	u4935
  8203  088E  3001               	movlw	1
  8204  088F  00A5               	movwf	??___lwmod
  8205  0890  0825               	movf	??___lwmod,w
  8206  0891  07A6               	addwf	___lwmod@counter,f
  8207  0892  2887               	goto	l5538
  8208  0893                     l5540:	
  8209  0893  0822               	movf	___lwmod@divisor+1,w
  8210  0894  0224               	subwf	___lwmod@dividend+1,w
  8211  0895  1D03               	skipz
  8212  0896  2899               	goto	u4955
  8213  0897  0821               	movf	___lwmod@divisor,w
  8214  0898  0223               	subwf	___lwmod@dividend,w
  8215  0899                     u4955:	
  8216  0899  1C03               	skipc
  8217  089A  289F               	goto	l5544
  8218  089B  0821               	movf	___lwmod@divisor,w
  8219  089C  02A3               	subwf	___lwmod@dividend,f
  8220  089D  0822               	movf	___lwmod@divisor+1,w
  8221  089E  3BA4               	subwfb	___lwmod@dividend+1,f
  8222  089F                     l5544:	
  8223  089F  3001               	movlw	1
  8224  08A0                     u4965:	
  8225  08A0  36A2               	lsrf	___lwmod@divisor+1,f
  8226  08A1  0CA1               	rrf	___lwmod@divisor,f
  8227  08A2  0B89               	decfsz	9,f
  8228  08A3  28A0               	goto	u4965
  8229  08A4  3001               	movlw	1
  8230  08A5  02A6               	subwf	___lwmod@counter,f
  8231  08A6  1D03               	btfss	3,2
  8232  08A7  2893               	goto	l5540
  8233  08A8                     l5548:	
  8234  08A8  0824               	movf	___lwmod@dividend+1,w
  8235  08A9  00A2               	movwf	?___lwmod+1
  8236  08AA  0823               	movf	___lwmod@dividend,w
  8237  08AB  00A1               	movwf	?___lwmod
  8238  08AC  0008               	return
  8239  08AD                     __end_of___lwmod:	
  8240                           
  8241                           	psect	text30
  8242  09A5                     __ptext30:	
  8243 ;; *************** function ___lwdiv *****************
  8244 ;; Defined at:
  8245 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;  divisor         2    7[BANK0 ] unsigned int 
  8248 ;;  dividend        2    9[BANK0 ] unsigned int 
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;  quotient        2   13[BANK0 ] unsigned int 
  8251 ;;  counter         1   12[BANK0 ] unsigned char 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  2    7[BANK0 ] unsigned int 
  8254 ;; Registers used:
  8255 ;;		wreg, status,2, status,0
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8261 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;Total ram usage:        8 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    3
  8268 ;; This function calls:
  8269 ;;		Nothing
  8270 ;; This function is called by:
  8271 ;;		_Tc_Display
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           
  8276                           ;psect for function ___lwdiv
  8277  09A5                     ___lwdiv:	
  8278                           
  8279                           ;incstack = 0
  8280                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8281  09A5  0020               	movlb	0	; select bank0
  8282  09A6  01AD               	clrf	___lwdiv@quotient
  8283  09A7  01AE               	clrf	___lwdiv@quotient+1
  8284  09A8  0827               	movf	___lwdiv@divisor,w
  8285  09A9  0428               	iorwf	___lwdiv@divisor+1,w
  8286  09AA  1903               	btfsc	3,2
  8287  09AB  29D5               	goto	l5526
  8288  09AC  01AC               	clrf	___lwdiv@counter
  8289  09AD  0AAC               	incf	___lwdiv@counter,f
  8290  09AE                     l5514:	
  8291  09AE  1BA8               	btfsc	___lwdiv@divisor+1,7
  8292  09AF  29BA               	goto	l5516
  8293  09B0  3001               	movlw	1
  8294  09B1                     u4865:	
  8295  09B1  35A7               	lslf	___lwdiv@divisor,f
  8296  09B2  0DA8               	rlf	___lwdiv@divisor+1,f
  8297  09B3  0B89               	decfsz	9,f
  8298  09B4  29B1               	goto	u4865
  8299  09B5  3001               	movlw	1
  8300  09B6  00AB               	movwf	??___lwdiv
  8301  09B7  082B               	movf	??___lwdiv,w
  8302  09B8  07AC               	addwf	___lwdiv@counter,f
  8303  09B9  29AE               	goto	l5514
  8304  09BA                     l5516:	
  8305  09BA  3001               	movlw	1
  8306  09BB                     u4885:	
  8307  09BB  35AD               	lslf	___lwdiv@quotient,f
  8308  09BC  0DAE               	rlf	___lwdiv@quotient+1,f
  8309  09BD  0B89               	decfsz	9,f
  8310  09BE  29BB               	goto	u4885
  8311  09BF  0828               	movf	___lwdiv@divisor+1,w
  8312  09C0  022A               	subwf	___lwdiv@dividend+1,w
  8313  09C1  1D03               	skipz
  8314  09C2  29C5               	goto	u4895
  8315  09C3  0827               	movf	___lwdiv@divisor,w
  8316  09C4  0229               	subwf	___lwdiv@dividend,w
  8317  09C5                     u4895:	
  8318  09C5  1C03               	skipc
  8319  09C6  29CC               	goto	l5522
  8320  09C7  0827               	movf	___lwdiv@divisor,w
  8321  09C8  02A9               	subwf	___lwdiv@dividend,f
  8322  09C9  0828               	movf	___lwdiv@divisor+1,w
  8323  09CA  3BAA               	subwfb	___lwdiv@dividend+1,f
  8324  09CB  142D               	bsf	___lwdiv@quotient,0
  8325  09CC                     l5522:	
  8326  09CC  3001               	movlw	1
  8327  09CD                     u4905:	
  8328  09CD  36A8               	lsrf	___lwdiv@divisor+1,f
  8329  09CE  0CA7               	rrf	___lwdiv@divisor,f
  8330  09CF  0B89               	decfsz	9,f
  8331  09D0  29CD               	goto	u4905
  8332  09D1  3001               	movlw	1
  8333  09D2  02AC               	subwf	___lwdiv@counter,f
  8334  09D3  1D03               	btfss	3,2
  8335  09D4  29BA               	goto	l5516
  8336  09D5                     l5526:	
  8337  09D5  082E               	movf	___lwdiv@quotient+1,w
  8338  09D6  00A8               	movwf	?___lwdiv+1
  8339  09D7  082D               	movf	___lwdiv@quotient,w
  8340  09D8  00A7               	movwf	?___lwdiv
  8341  09D9  0008               	return
  8342  09DA                     __end_of___lwdiv:	
  8343                           
  8344                           	psect	text31
  8345  0B0C                     __ptext31:	
  8346 ;; *************** function _one_temperature_trans *****************
  8347 ;; Defined at:
  8348 ;;		line 292 in file "mcc_generated_files/max31856.c"
  8349 ;; Parameters:    Size  Location     Type
  8350 ;;		None
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;		None
  8353 ;; Return value:  Size  Location     Type
  8354 ;;                  1    wreg      void 
  8355 ;; Registers used:
  8356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8357 ;; Tracked objects:
  8358 ;;		On entry : 0/0
  8359 ;;		On exit  : 0/0
  8360 ;;		Unchanged: 0/0
  8361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;Total ram usage:        2 bytes
  8367 ;; Hardware stack levels used:    1
  8368 ;; Hardware stack levels required when called:    6
  8369 ;; This function calls:
  8370 ;;		_maxim_31856_read_nregisters
  8371 ;;		_maxim_start_conversion
  8372 ;; This function is called by:
  8373 ;;		_temperature_process
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           
  8378                           ;psect for function _one_temperature_trans
  8379  0B0C                     _one_temperature_trans:	
  8380                           
  8381                           ;max31856.c: 294: maxim_start_conversion((uint8_t) 0x40);
  8382                           
  8383                           ;incstack = 0
  8384                           ; Regs used in _one_temperature_trans: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8385  0B0C  3040               	movlw	64
  8386  0B0D  3195  25DC  318B   	fcall	_maxim_start_conversion
  8387                           
  8388                           ;max31856.c: 296: MAX31856Sec = 0;
  8389  0B10  0021               	movlb	1	; select bank1
  8390  0B11  01BB               	clrf	_MAX31856Sec^(0+128)
  8391                           
  8392                           ;max31856.c: 297: while( !(RB3 == 0 || MAX31856Sec > 30) ) asm("clrwdt");
  8393  0B12  2B14               	goto	l629
  8394  0B13                     l630:	
  8395  0B13  0064               	clrwdt	;# 
  8396  0B14                     l629:	
  8397  0B14  0020               	movlb	0	; select bank0
  8398  0B15  1D8D               	btfss	13,3	;volatile
  8399  0B16  2B1C               	goto	l5818
  8400  0B17  301F               	movlw	31
  8401  0B18  0021               	movlb	1	; select bank1
  8402  0B19  023B               	subwf	_MAX31856Sec^(0+128),w
  8403  0B1A  1C03               	skipc
  8404  0B1B  2B13               	goto	l630
  8405  0B1C                     l5818:	
  8406                           
  8407                           ;max31856.c: 298: if( MAX31856Sec > 30)
  8408  0B1C  301F               	movlw	31
  8409  0B1D  0021               	movlb	1	; select bank1
  8410  0B1E  023B               	subwf	_MAX31856Sec^(0+128),w
  8411  0B1F  1C03               	skipc
  8412  0B20  2B24               	goto	l5822
  8413                           
  8414                           ;max31856.c: 299: {
  8415                           ;max31856.c: 300: uch_sr = 0x01;
  8416  0B21  01CC               	clrf	_uch_sr^(0+128)
  8417  0B22  0ACC               	incf	_uch_sr^(0+128),f
  8418                           
  8419                           ;max31856.c: 301: }
  8420  0B23  0008               	return
  8421  0B24                     l5822:	
  8422                           
  8423                           ;max31856.c: 328: else
  8424                           ;max31856.c: 329: {
  8425                           ;max31856.c: 330: maxim_31856_read_nregisters(0x0A, uch_reg,6);
  8426  0B24  30CD               	movlw	(low (_uch_reg| 0))& (0+255)
  8427  0B25  0020               	movlb	0	; select bank0
  8428  0B26  00AE               	movwf	??_one_temperature_trans
  8429  0B27  082E               	movf	??_one_temperature_trans,w
  8430  0B28  00A9               	movwf	maxim_31856_read_nregisters@uch_buff
  8431  0B29  3006               	movlw	6
  8432  0B2A  00AF               	movwf	??_one_temperature_trans+1
  8433  0B2B  082F               	movf	??_one_temperature_trans+1,w
  8434  0B2C  00AA               	movwf	maxim_31856_read_nregisters@uch_nBytes
  8435  0B2D  300A               	movlw	10
  8436  0B2E  3195  25C4         	fcall	_maxim_31856_read_nregisters
  8437                           
  8438                           ;max31856.c: 331: uch_cjth=uch_reg[0];uch_cjtl=uch_reg[1];
  8439  0B30  0021               	movlb	1	; select bank1
  8440  0B31  084D               	movf	_uch_reg^(0+128),w
  8441  0B32  0020               	movlb	0	; select bank0
  8442  0B33  00AE               	movwf	??_one_temperature_trans
  8443  0B34  082E               	movf	??_one_temperature_trans,w
  8444  0B35  0021               	movlb	1	; select bank1
  8445  0B36  00C5               	movwf	_uch_cjth^(0+128)
  8446  0B37  084E               	movf	(_uch_reg^(0+128)+1),w
  8447  0B38  0020               	movlb	0	; select bank0
  8448  0B39  00AE               	movwf	??_one_temperature_trans
  8449  0B3A  082E               	movf	??_one_temperature_trans,w
  8450  0B3B  0021               	movlb	1	; select bank1
  8451  0B3C  00C6               	movwf	_uch_cjtl^(0+128)
  8452                           
  8453                           ;max31856.c: 332: uch_ltcbh=uch_reg[2];uch_ltcbm=uch_reg[3];uch_ltcbl=uch_reg[4];
  8454  0B3D  084F               	movf	(_uch_reg^(0+128)+2),w
  8455  0B3E  0020               	movlb	0	; select bank0
  8456  0B3F  00AE               	movwf	??_one_temperature_trans
  8457  0B40  082E               	movf	??_one_temperature_trans,w
  8458  0B41  0021               	movlb	1	; select bank1
  8459  0B42  00C8               	movwf	_uch_ltcbh^(0+128)
  8460  0B43  0850               	movf	(_uch_reg^(0+128)+3),w
  8461  0B44  0020               	movlb	0	; select bank0
  8462  0B45  00AE               	movwf	??_one_temperature_trans
  8463  0B46  082E               	movf	??_one_temperature_trans,w
  8464  0B47  0021               	movlb	1	; select bank1
  8465  0B48  00CA               	movwf	_uch_ltcbm^(0+128)
  8466  0B49  0851               	movf	(_uch_reg^(0+128)+4),w
  8467  0B4A  0020               	movlb	0	; select bank0
  8468  0B4B  00AE               	movwf	??_one_temperature_trans
  8469  0B4C  082E               	movf	??_one_temperature_trans,w
  8470  0B4D  0021               	movlb	1	; select bank1
  8471  0B4E  00C9               	movwf	_uch_ltcbl^(0+128)
  8472                           
  8473                           ;max31856.c: 333: uch_sr=uch_reg[5];
  8474  0B4F  0852               	movf	(_uch_reg^(0+128)+5),w
  8475  0B50  0020               	movlb	0	; select bank0
  8476  0B51  00AE               	movwf	??_one_temperature_trans
  8477  0B52  082E               	movf	??_one_temperature_trans,w
  8478  0B53  0021               	movlb	1	; select bank1
  8479  0B54  00CC               	movwf	_uch_sr^(0+128)
  8480  0B55  0008               	return
  8481  0B56                     __end_of_one_temperature_trans:	
  8482                           
  8483                           	psect	text32
  8484  15DC                     __ptext32:	
  8485 ;; *************** function _maxim_start_conversion *****************
  8486 ;; Defined at:
  8487 ;;		line 114 in file "mcc_generated_files/max31856.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;  uch_conversi    1    wreg     unsigned char 
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  uch_conversi    1    6[BANK0 ] unsigned char 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  1    wreg      void 
  8494 ;; Registers used:
  8495 ;;		wreg, status,2, status,0, pclath, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8505 ;;Total ram usage:        2 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    5
  8508 ;; This function calls:
  8509 ;;		_maxim_31856_read_register
  8510 ;;		_maxim_31856_write_register
  8511 ;; This function is called by:
  8512 ;;		_one_temperature_trans
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           
  8517                           ;psect for function _maxim_start_conversion
  8518  15DC                     _maxim_start_conversion:	
  8519                           
  8520                           ;incstack = 0
  8521                           ; Regs used in _maxim_start_conversion: [wreg+status,2+status,0+pclath+cstack]
  8522                           ;maxim_start_conversion@uch_conversion_mode stored from wreg
  8523  15DC  0020               	movlb	0	; select bank0
  8524  15DD  00A6               	movwf	maxim_start_conversion@uch_conversion_mode
  8525                           
  8526                           ;max31856.c: 116: uch_cr0=maxim_31856_read_register(0x00);
  8527  15DE  3000               	movlw	0
  8528  15DF  3195  2582  3195   	fcall	_maxim_31856_read_register
  8529  15E2  0020               	movlb	0	; select bank0
  8530  15E3  00A5               	movwf	??_maxim_start_conversion
  8531  15E4  0825               	movf	??_maxim_start_conversion,w
  8532  15E5  00EA               	movwf	_uch_cr0
  8533                           
  8534                           ;max31856.c: 117: uch_cr0&=(uint8_t) 0x3F;
  8535  15E6  303F               	movlw	63
  8536  15E7  00A5               	movwf	??_maxim_start_conversion
  8537  15E8  0825               	movf	??_maxim_start_conversion,w
  8538  15E9  05EA               	andwf	_uch_cr0,f
  8539                           
  8540                           ;max31856.c: 118: uch_cr0|=uch_conversion_mode;
  8541  15EA  0826               	movf	maxim_start_conversion@uch_conversion_mode,w
  8542  15EB  00A5               	movwf	??_maxim_start_conversion
  8543  15EC  0825               	movf	??_maxim_start_conversion,w
  8544  15ED  04EA               	iorwf	_uch_cr0,f
  8545                           
  8546                           ;max31856.c: 119: maxim_31856_write_register(0x80, uch_cr0);
  8547  15EE  086A               	movf	_uch_cr0,w
  8548  15EF  00A5               	movwf	??_maxim_start_conversion
  8549  15F0  0825               	movf	??_maxim_start_conversion,w
  8550  15F1  00A2               	movwf	maxim_31856_write_register@uch_register_value
  8551  15F2  3080               	movlw	128
  8552  15F3  3195  252A         	fcall	_maxim_31856_write_register
  8553  15F5  0008               	return
  8554  15F6                     __end_of_maxim_start_conversion:	
  8555                           
  8556                           	psect	text33
  8557  152A                     __ptext33:	
  8558 ;; *************** function _maxim_31856_write_register *****************
  8559 ;; Defined at:
  8560 ;;		line 20 in file "mcc_generated_files/max31856.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;  uch_register    1    wreg     unsigned char 
  8563 ;;  uch_register    1    2[BANK0 ] unsigned char 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      void 
  8568 ;; Registers used:
  8569 ;;		wreg, status,2, status,0, pclath, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;Total ram usage:        2 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    4
  8582 ;; This function calls:
  8583 ;;		_SPI_Exchange8bit
  8584 ;; This function is called by:
  8585 ;;		_maxim_start_conversion
  8586 ;;		_maxim_clear_fault_status
  8587 ;;		_temperature_display
  8588 ;;		_maxim_31856_init
  8589 ;;		_maxim_stop_conversion
  8590 ;;		_maxim_disable_oc_fault_detection
  8591 ;;		_maxim_set_oc_fault_detection
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _maxim_31856_write_register
  8597  152A                     _maxim_31856_write_register:	
  8598                           
  8599                           ;incstack = 0
  8600                           ; Regs used in _maxim_31856_write_register: [wreg+status,2+status,0+pclath+cstack]
  8601                           ;maxim_31856_write_register@uch_register_address stored from wreg
  8602  152A  0020               	movlb	0	; select bank0
  8603  152B  00A3               	movwf	maxim_31856_write_register@uch_register_address
  8604                           
  8605                           ;max31856.c: 22: do { LATA5 = 0; } while(0);
  8606  152C  0022               	movlb	2	; select bank2
  8607  152D  128C               	bcf	12,5	;volatile
  8608                           
  8609                           ;max31856.c: 23: SPI_Exchange8bit(uch_register_address);
  8610  152E  0020               	movlb	0	; select bank0
  8611  152F  0823               	movf	maxim_31856_write_register@uch_register_address,w
  8612  1530  3194  24FF  3195   	fcall	_SPI_Exchange8bit
  8613                           
  8614                           ;max31856.c: 24: SPI_Exchange8bit(uch_register_value);
  8615  1533  0020               	movlb	0	; select bank0
  8616  1534  0822               	movf	maxim_31856_write_register@uch_register_value,w
  8617  1535  3194  24FF         	fcall	_SPI_Exchange8bit
  8618                           
  8619                           ;max31856.c: 25: do { LATA5 = 1; } while(0);
  8620  1537  0022               	movlb	2	; select bank2
  8621  1538  168C               	bsf	12,5	;volatile
  8622  1539  0008               	return
  8623  153A                     __end_of_maxim_31856_write_register:	
  8624                           
  8625                           	psect	text34
  8626  1582                     __ptext34:	
  8627 ;; *************** function _maxim_31856_read_register *****************
  8628 ;; Defined at:
  8629 ;;		line 34 in file "mcc_generated_files/max31856.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;  uch_register    1    wreg     unsigned char 
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;  uch_register    1    3[BANK0 ] unsigned char 
  8634 ;;  uch_register    1    4[BANK0 ] unsigned char 
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  1    wreg      unsigned char 
  8637 ;; Registers used:
  8638 ;;		wreg, status,2, status,0, pclath, cstack
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;Total ram usage:        3 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    4
  8651 ;; This function calls:
  8652 ;;		_SPI_Exchange8bit
  8653 ;; This function is called by:
  8654 ;;		_maxim_start_conversion
  8655 ;;		_maxim_clear_fault_status
  8656 ;;		_maxim_stop_conversion
  8657 ;;		_maxim_disable_oc_fault_detection
  8658 ;;		_maxim_set_oc_fault_detection
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           
  8663                           ;psect for function _maxim_31856_read_register
  8664  1582                     _maxim_31856_read_register:	
  8665                           
  8666                           ;incstack = 0
  8667                           ; Regs used in _maxim_31856_read_register: [wreg+status,2+status,0+pclath+cstack]
  8668                           ;maxim_31856_read_register@uch_register_address stored from wreg
  8669  1582  0020               	movlb	0	; select bank0
  8670  1583  00A3               	movwf	maxim_31856_read_register@uch_register_address
  8671                           
  8672                           ;max31856.c: 36: uint8_t uch_register_data;
  8673                           ;max31856.c: 37: do { LATA5 = 0; } while(0);
  8674  1584  0022               	movlb	2	; select bank2
  8675  1585  128C               	bcf	12,5	;volatile
  8676                           
  8677                           ;max31856.c: 38: SPI_Exchange8bit(uch_register_address);
  8678  1586  0020               	movlb	0	; select bank0
  8679  1587  0823               	movf	maxim_31856_read_register@uch_register_address,w
  8680  1588  3194  24FF  3195   	fcall	_SPI_Exchange8bit
  8681                           
  8682                           ;max31856.c: 39: uch_register_data=SPI_Exchange8bit(0xff);
  8683  158B  30FF               	movlw	255
  8684  158C  3194  24FF         	fcall	_SPI_Exchange8bit
  8685  158E  0020               	movlb	0	; select bank0
  8686  158F  00A2               	movwf	??_maxim_31856_read_register
  8687  1590  0822               	movf	??_maxim_31856_read_register,w
  8688  1591  00A4               	movwf	maxim_31856_read_register@uch_register_data
  8689                           
  8690                           ;max31856.c: 40: do { LATA5 = 1; } while(0);
  8691  1592  0022               	movlb	2	; select bank2
  8692  1593  168C               	bsf	12,5	;volatile
  8693                           
  8694                           ;max31856.c: 41: return (uch_register_data);
  8695  1594  0020               	movlb	0	; select bank0
  8696  1595  0824               	movf	maxim_31856_read_register@uch_register_data,w
  8697  1596  0008               	return
  8698  1597                     __end_of_maxim_31856_read_register:	
  8699                           
  8700                           	psect	text35
  8701  15C4                     __ptext35:	
  8702 ;; *************** function _maxim_31856_read_nregisters *****************
  8703 ;; Defined at:
  8704 ;;		line 50 in file "mcc_generated_files/max31856.c"
  8705 ;; Parameters:    Size  Location     Type
  8706 ;;  uch_register    1    wreg     unsigned char 
  8707 ;;  uch_buff        1    9[BANK0 ] PTR unsigned char 
  8708 ;;		 -> uch_reg(8), 
  8709 ;;  uch_nBytes      1   10[BANK0 ] unsigned char 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;  uch_register    1   13[BANK0 ] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      void 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8721 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;Total ram usage:        5 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    5
  8728 ;; This function calls:
  8729 ;;		_SPI_Exchange8bit
  8730 ;;		_SPI_Exchange8bitBuffer
  8731 ;; This function is called by:
  8732 ;;		_one_temperature_trans
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           
  8737                           ;psect for function _maxim_31856_read_nregisters
  8738  15C4                     _maxim_31856_read_nregisters:	
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in _maxim_31856_read_nregisters: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8742                           ;maxim_31856_read_nregisters@uch_register_address stored from wreg
  8743  15C4  0020               	movlb	0	; select bank0
  8744  15C5  00AD               	movwf	maxim_31856_read_nregisters@uch_register_address
  8745                           
  8746                           ;max31856.c: 52: do { LATA5 = 0; } while(0);
  8747  15C6  0022               	movlb	2	; select bank2
  8748  15C7  128C               	bcf	12,5	;volatile
  8749                           
  8750                           ;max31856.c: 53: SPI_Exchange8bit(uch_register_address);
  8751  15C8  0020               	movlb	0	; select bank0
  8752  15C9  082D               	movf	maxim_31856_read_nregisters@uch_register_address,w
  8753  15CA  3194  24FF  3195   	fcall	_SPI_Exchange8bit
  8754                           
  8755                           ;max31856.c: 54: SPI_Exchange8bitBuffer((0), uch_nBytes, uch_buff);
  8756  15CD  0020               	movlb	0	; select bank0
  8757  15CE  082A               	movf	maxim_31856_read_nregisters@uch_nBytes,w
  8758  15CF  00AB               	movwf	??_maxim_31856_read_nregisters
  8759  15D0  082B               	movf	??_maxim_31856_read_nregisters,w
  8760  15D1  00A2               	movwf	SPI_Exchange8bitBuffer@bufLen
  8761  15D2  0829               	movf	maxim_31856_read_nregisters@uch_buff,w
  8762  15D3  00AC               	movwf	??_maxim_31856_read_nregisters+1
  8763  15D4  082C               	movf	??_maxim_31856_read_nregisters+1,w
  8764  15D5  00A3               	movwf	SPI_Exchange8bitBuffer@dataOut
  8765  15D6  3000               	movlw	0
  8766  15D7  318B  23A3         	fcall	_SPI_Exchange8bitBuffer
  8767                           
  8768                           ;max31856.c: 55: do { LATA5 = 1; } while(0);
  8769  15D9  0022               	movlb	2	; select bank2
  8770  15DA  168C               	bsf	12,5	;volatile
  8771  15DB  0008               	return
  8772  15DC                     __end_of_maxim_31856_read_nregisters:	
  8773                           
  8774                           	psect	text36
  8775  0BA3                     __ptext36:	
  8776 ;; *************** function _SPI_Exchange8bitBuffer *****************
  8777 ;; Defined at:
  8778 ;;		line 89 in file "mcc_generated_files/spi.c"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;  dataIn          1    wreg     PTR unsigned char 
  8781 ;;		 -> NULL(0), 
  8782 ;;  bufLen          1    2[BANK0 ] unsigned char 
  8783 ;;  dataOut         1    3[BANK0 ] PTR unsigned char 
  8784 ;;		 -> uch_reg(8), 
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;  dataIn          1    7[BANK0 ] PTR unsigned char 
  8787 ;;		 -> NULL(0), 
  8788 ;;  bytesWritten    1    8[BANK0 ] unsigned char 
  8789 ;; Return value:  Size  Location     Type
  8790 ;;                  1    wreg      unsigned char 
  8791 ;; Registers used:
  8792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8793 ;; Tracked objects:
  8794 ;;		On entry : 0/0
  8795 ;;		On exit  : 0/0
  8796 ;;		Unchanged: 0/0
  8797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8799 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;Total ram usage:        7 bytes
  8803 ;; Hardware stack levels used:    1
  8804 ;; Hardware stack levels required when called:    4
  8805 ;; This function calls:
  8806 ;;		_SPI_Exchange8bit
  8807 ;; This function is called by:
  8808 ;;		_maxim_31856_read_nregisters
  8809 ;; This function uses a non-reentrant model
  8810 ;;
  8811                           
  8812                           
  8813                           ;psect for function _SPI_Exchange8bitBuffer
  8814  0BA3                     _SPI_Exchange8bitBuffer:	
  8815                           
  8816                           ;incstack = 0
  8817                           ; Regs used in _SPI_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8818                           ;SPI_Exchange8bitBuffer@dataIn stored from wreg
  8819  0BA3  0020               	movlb	0	; select bank0
  8820  0BA4  00A7               	movwf	SPI_Exchange8bitBuffer@dataIn
  8821                           
  8822                           ;spi.c: 90: uint8_t bytesWritten = 0;
  8823  0BA5  01A8               	clrf	SPI_Exchange8bitBuffer@bytesWritten
  8824                           
  8825                           ;spi.c: 92: if (bufLen != 0) {
  8826  0BA6  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8827  0BA7  1903               	btfsc	3,2
  8828  0BA8  0008               	return
  8829                           
  8830                           ;spi.c: 93: if (dataIn != (0)) {
  8831  0BA9  0827               	movf	SPI_Exchange8bitBuffer@dataIn,w
  8832  0BAA  1D03               	btfss	3,2
  8833  0BAB  2BD5               	goto	l5320
  8834  0BAC  2BDA               	goto	l5322
  8835  0BAD                     l5312:	
  8836                           ;spi.c: 94: while (bytesWritten < bufLen) {
  8837                           
  8838                           
  8839                           ;spi.c: 95: if (dataOut == (0)) {
  8840  0BAD  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8841  0BAE  1D03               	btfss	3,2
  8842  0BAF  2BBB               	goto	l5316
  8843                           
  8844                           ;spi.c: 96: SPI_Exchange8bit(dataIn[bytesWritten]);
  8845  0BB0  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8846  0BB1  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8847  0BB2  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8848  0BB3  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8849  0BB4  0086               	movwf	6
  8850  0BB5  0187               	clrf	7
  8851  0BB6  0801               	movf	1,w
  8852  0BB7  3194  24FF  318B   	fcall	_SPI_Exchange8bit
  8853                           
  8854                           ;spi.c: 97: } else {
  8855  0BBA  2BD0               	goto	l5318
  8856  0BBB                     l5316:	
  8857                           
  8858                           ;spi.c: 98: dataOut[bytesWritten] = SPI_Exchange8bit(dataIn[bytesWritten]);
  8859  0BBB  0020               	movlb	0	; select bank0
  8860  0BBC  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8861  0BBD  0727               	addwf	SPI_Exchange8bitBuffer@dataIn,w
  8862  0BBE  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8863  0BBF  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8864  0BC0  0086               	movwf	6
  8865  0BC1  0187               	clrf	7
  8866  0BC2  0801               	movf	1,w
  8867  0BC3  3194  24FF  318B   	fcall	_SPI_Exchange8bit
  8868  0BC6  0020               	movlb	0	; select bank0
  8869  0BC7  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  8870  0BC8  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8871  0BC9  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8872  0BCA  00A6               	movwf	??_SPI_Exchange8bitBuffer+2
  8873  0BCB  0826               	movf	??_SPI_Exchange8bitBuffer+2,w
  8874  0BCC  0086               	movwf	6
  8875  0BCD  0187               	clrf	7
  8876  0BCE  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  8877  0BCF  0081               	movwf	1
  8878  0BD0                     l5318:	
  8879                           
  8880                           ;spi.c: 99: }
  8881                           ;spi.c: 101: bytesWritten++;
  8882  0BD0  3001               	movlw	1
  8883  0BD1  0020               	movlb	0	; select bank0
  8884  0BD2  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8885  0BD3  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8886  0BD4  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8887  0BD5                     l5320:	
  8888  0BD5  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8889  0BD6  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8890  0BD7  1803               	btfsc	3,0
  8891  0BD8  0008               	return
  8892  0BD9  2BAD               	goto	l5312
  8893  0BDA                     l5322:	
  8894                           ;spi.c: 102: }
  8895                           ;spi.c: 103: } else {
  8896                           
  8897                           
  8898                           ;spi.c: 104: if (dataOut != (0)) {
  8899  0BDA  0823               	movf	SPI_Exchange8bitBuffer@dataOut,w
  8900  0BDB  1903               	btfsc	3,2
  8901  0BDC  0008               	return
  8902  0BDD                     l5330:	
  8903  0BDD  0822               	movf	SPI_Exchange8bitBuffer@bufLen,w
  8904  0BDE  0228               	subwf	SPI_Exchange8bitBuffer@bytesWritten,w
  8905  0BDF  1803               	btfsc	3,0
  8906  0BE0  0008               	return
  8907                           
  8908                           ;spi.c: 106: dataOut[bytesWritten] = SPI_Exchange8bit(0x0);
  8909                           
  8910                           ;spi.c: 105: while (bytesWritten < bufLen) {
  8911  0BE1  3000               	movlw	0
  8912  0BE2  3194  24FF  318B   	fcall	_SPI_Exchange8bit
  8913  0BE5  0020               	movlb	0	; select bank0
  8914  0BE6  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8915  0BE7  0828               	movf	SPI_Exchange8bitBuffer@bytesWritten,w
  8916  0BE8  0723               	addwf	SPI_Exchange8bitBuffer@dataOut,w
  8917  0BE9  00A5               	movwf	??_SPI_Exchange8bitBuffer+1
  8918  0BEA  0825               	movf	??_SPI_Exchange8bitBuffer+1,w
  8919  0BEB  0086               	movwf	6
  8920  0BEC  0187               	clrf	7
  8921  0BED  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8922  0BEE  0081               	movwf	1
  8923                           
  8924                           ;spi.c: 108: bytesWritten++;
  8925  0BEF  3001               	movlw	1
  8926  0BF0  00A4               	movwf	??_SPI_Exchange8bitBuffer
  8927  0BF1  0824               	movf	??_SPI_Exchange8bitBuffer,w
  8928  0BF2  07A8               	addwf	SPI_Exchange8bitBuffer@bytesWritten,f
  8929  0BF3  2BDD               	goto	l5330
  8930  0BF4                     __end_of_SPI_Exchange8bitBuffer:	
  8931                           ;spi.c: 109: }
  8932                           ;spi.c: 110: }
  8933                           ;spi.c: 111: }
  8934                           ;spi.c: 112: }
  8935                           ;spi.c: 114: return bytesWritten;
  8936                           ;	Return value of _SPI_Exchange8bitBuffer is never used
  8937                           
  8938                           
  8939                           	psect	text37
  8940  14FF                     __ptext37:	
  8941 ;; *************** function _SPI_Exchange8bit *****************
  8942 ;; Defined at:
  8943 ;;		line 77 in file "mcc_generated_files/spi.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;  data            1    wreg     unsigned char 
  8946 ;; Auto vars:     Size  Location     Type
  8947 ;;  data            1    1[BANK0 ] unsigned char 
  8948 ;; Return value:  Size  Location     Type
  8949 ;;                  1    wreg      unsigned char 
  8950 ;; Registers used:
  8951 ;;		wreg
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;Total ram usage:        1 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    3
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_SPI_Exchange8bitBuffer
  8968 ;;		_maxim_31856_write_register
  8969 ;;		_maxim_31856_read_register
  8970 ;;		_maxim_31856_read_nregisters
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           
  8975                           ;psect for function _SPI_Exchange8bit
  8976  14FF                     _SPI_Exchange8bit:	
  8977                           
  8978                           ;incstack = 0
  8979                           ; Regs used in _SPI_Exchange8bit: [wreg]
  8980                           ;SPI_Exchange8bit@data stored from wreg
  8981  14FF  0020               	movlb	0	; select bank0
  8982  1500  00A1               	movwf	SPI_Exchange8bit@data
  8983                           
  8984                           ;spi.c: 79: SSP1CON1bits.WCOL = 0;
  8985  1501  0024               	movlb	4	; select bank4
  8986  1502  1395               	bcf	21,7	;volatile
  8987                           
  8988                           ;spi.c: 81: SSPBUF = data;
  8989  1503  0020               	movlb	0	; select bank0
  8990  1504  0821               	movf	SPI_Exchange8bit@data,w
  8991  1505  0024               	movlb	4	; select bank4
  8992  1506  0091               	movwf	17	;volatile
  8993  1507                     l71:	
  8994                           ;spi.c: 83: while (SSP1STATbits.BF == 0x0) {
  8995                           
  8996  1507  1C14               	btfss	20,0	;volatile
  8997  1508  2D07               	goto	l71
  8998                           
  8999                           ;spi.c: 84: }
  9000                           ;spi.c: 86: return (SSPBUF);
  9001  1509  0811               	movf	17,w	;volatile
  9002  150A  0008               	return
  9003  150B                     __end_of_SPI_Exchange8bit:	
  9004                           
  9005                           	psect	text38
  9006  090B                     __ptext38:	
  9007 ;; *************** function _Two_Display *****************
  9008 ;; Defined at:
  9009 ;;		line 139 in file "mcc_generated_files/ht1621.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;  number          1    wreg     unsigned char 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;  number          1   16[BANK0 ] unsigned char 
  9014 ;;  num             4   12[BANK0 ] unsigned char [4]
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;Total ram usage:        6 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    5
  9031 ;; This function calls:
  9032 ;;		_WriteAll_1621
  9033 ;; This function is called by:
  9034 ;;		_temperature_process
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           
  9039                           ;psect for function _Two_Display
  9040  090B                     _Two_Display:	
  9041                           
  9042                           ;incstack = 0
  9043                           ; Regs used in _Two_Display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9044                           ;Two_Display@number stored from wreg
  9045  090B  0020               	movlb	0	; select bank0
  9046  090C  00B0               	movwf	Two_Display@number
  9047                           
  9048                           ;ht1621.c: 141: unsigned char num[4]={0};
  9049  090D  0021               	movlb	1	; select bank1
  9050  090E  0823               	movf	(Two_Display@F2132+3)^(0+128),w
  9051  090F  0020               	movlb	0	; select bank0
  9052  0910  00AF               	movwf	Two_Display@num+3
  9053  0911  0021               	movlb	1	; select bank1
  9054  0912  0822               	movf	(Two_Display@F2132+2)^(0+128),w
  9055  0913  0020               	movlb	0	; select bank0
  9056  0914  00AE               	movwf	Two_Display@num+2
  9057  0915  0021               	movlb	1	; select bank1
  9058  0916  0821               	movf	(Two_Display@F2132+1)^(0+128),w
  9059  0917  0020               	movlb	0	; select bank0
  9060  0918  00AD               	movwf	Two_Display@num+1
  9061  0919  0021               	movlb	1	; select bank1
  9062  091A  0820               	movf	Two_Display@F2132^(0+128),w
  9063  091B  0020               	movlb	0	; select bank0
  9064  091C  00AC               	movwf	Two_Display@num
  9065                           
  9066                           ;ht1621.c: 142: num[1] = Dis_TAB[0];
  9067  091D  3000               	movlw	low (_Dis_TAB| (0+32768))
  9068  091E  0084               	movwf	4
  9069  091F  3098               	movlw	high (_Dis_TAB| (0+32768))
  9070  0920  0085               	movwf	5
  9071  0921  0800               	movf	0,w	;code access
  9072  0922  00AB               	movwf	??_Two_Display
  9073  0923  082B               	movf	??_Two_Display,w
  9074  0924  00AD               	movwf	Two_Display@num+1
  9075                           
  9076                           ;ht1621.c: 143: num[2] = Dis_TAB[number];
  9077  0925  0830               	movf	Two_Display@number,w
  9078  0926  3E00               	addlw	low (_Dis_TAB| (0+32768))
  9079  0927  0084               	movwf	4
  9080  0928  3098               	movlw	high (_Dis_TAB| (0+32768))
  9081  0929  1803               	skipnc
  9082  092A  3E01               	addlw	1
  9083  092B  0085               	movwf	5
  9084  092C  0800               	movf	0,w	;code access
  9085  092D  00AB               	movwf	??_Two_Display
  9086  092E  082B               	movf	??_Two_Display,w
  9087  092F  00AE               	movwf	Two_Display@num+2
  9088                           
  9089                           ;ht1621.c: 144: WriteAll_1621(0, num, 4);
  9090  0930  302C               	movlw	low Two_Display@num
  9091  0931  00A5               	movwf	WriteAll_1621@p
  9092  0932  3000               	movlw	high Two_Display@num
  9093  0933  00A6               	movwf	WriteAll_1621@p+1
  9094  0934  3004               	movlw	4
  9095  0935  00AB               	movwf	??_Two_Display
  9096  0936  082B               	movf	??_Two_Display,w
  9097  0937  00A7               	movwf	WriteAll_1621@cnt
  9098  0938  3000               	movlw	0
  9099  0939  3189  2170         	fcall	_WriteAll_1621
  9100  093B  0008               	return
  9101  093C                     __end_of_Two_Display:	
  9102                           
  9103                           	psect	text39
  9104  0970                     __ptext39:	
  9105 ;; *************** function _WriteAll_1621 *****************
  9106 ;; Defined at:
  9107 ;;		line 91 in file "mcc_generated_files/ht1621.c"
  9108 ;; Parameters:    Size  Location     Type
  9109 ;;  addr            1    wreg     unsigned char 
  9110 ;;  p               2    5[BANK0 ] PTR unsigned char 
  9111 ;;		 -> time_Display@num(4), err_Display@num(4), Two_Display@num(4), display_buff(4), 
  9112 ;;		 -> Dis_TAB(21), 
  9113 ;;  cnt             1    7[BANK0 ] unsigned char 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  addr            1    9[BANK0 ] unsigned char 
  9116 ;;  i               1   10[BANK0 ] unsigned char 
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  1    wreg      void 
  9119 ;; Registers used:
  9120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9126 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;Total ram usage:        6 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:    4
  9133 ;; This function calls:
  9134 ;;		_SendBit_1621
  9135 ;;		_SendDataBit_1621
  9136 ;; This function is called by:
  9137 ;;		_main
  9138 ;;		_Tc_Display
  9139 ;;		_Two_Display
  9140 ;;		_err_Display
  9141 ;;		_time_Display
  9142 ;; This function uses a non-reentrant model
  9143 ;;
  9144                           
  9145                           
  9146                           ;psect for function _WriteAll_1621
  9147  0970                     _WriteAll_1621:	
  9148                           
  9149                           ;incstack = 0
  9150                           ; Regs used in _WriteAll_1621: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9151                           ;WriteAll_1621@addr stored from wreg
  9152  0970  0020               	movlb	0	; select bank0
  9153  0971  00A9               	movwf	WriteAll_1621@addr
  9154                           
  9155                           ;ht1621.c: 93: unsigned char i;
  9156                           ;ht1621.c: 94: do { LATC0 = 0; } while(0);
  9157  0972  0022               	movlb	2	; select bank2
  9158  0973  100E               	bcf	14,0	;volatile
  9159                           
  9160                           ;ht1621.c: 95: SendBit_1621(0xa0,3);
  9161  0974  3003               	movlw	3
  9162  0975  0020               	movlb	0	; select bank0
  9163  0976  00A8               	movwf	??_WriteAll_1621
  9164  0977  0828               	movf	??_WriteAll_1621,w
  9165  0978  00A1               	movwf	SendBit_1621@cnt
  9166  0979  30A0               	movlw	160
  9167  097A  3197  2737  3189   	fcall	_SendBit_1621
  9168                           
  9169                           ;ht1621.c: 96: SendBit_1621(addr,6);
  9170  097D  3006               	movlw	6
  9171  097E  0020               	movlb	0	; select bank0
  9172  097F  00A8               	movwf	??_WriteAll_1621
  9173  0980  0828               	movf	??_WriteAll_1621,w
  9174  0981  00A1               	movwf	SendBit_1621@cnt
  9175  0982  0829               	movf	WriteAll_1621@addr,w
  9176  0983  3197  2737  3189   	fcall	_SendBit_1621
  9177                           
  9178                           ;ht1621.c: 97: for(i =0; i <cnt; i ++,p++)
  9179  0986  0020               	movlb	0	; select bank0
  9180  0987  01AA               	clrf	WriteAll_1621@i
  9181  0988                     l5342:	
  9182  0988  0827               	movf	WriteAll_1621@cnt,w
  9183  0989  022A               	subwf	WriteAll_1621@i,w
  9184  098A  1803               	btfsc	3,0
  9185  098B  29A2               	goto	l762
  9186                           
  9187                           ;ht1621.c: 98: {
  9188                           ;ht1621.c: 99: SendDataBit_1621(*p,8);
  9189  098C  3008               	movlw	8
  9190  098D  00A8               	movwf	??_WriteAll_1621
  9191  098E  0828               	movf	??_WriteAll_1621,w
  9192  098F  00A1               	movwf	SendDataBit_1621@cnt
  9193  0990  0825               	movf	WriteAll_1621@p,w
  9194  0991  0084               	movwf	4
  9195  0992  0826               	movf	WriteAll_1621@p+1,w
  9196  0993  0085               	movwf	5
  9197  0994  0800               	movf	0,w	;code access
  9198  0995  3197  2758  3189   	fcall	_SendDataBit_1621
  9199  0998  3001               	movlw	1
  9200  0999  0020               	movlb	0	; select bank0
  9201  099A  00A8               	movwf	??_WriteAll_1621
  9202  099B  0828               	movf	??_WriteAll_1621,w
  9203  099C  07AA               	addwf	WriteAll_1621@i,f
  9204  099D  3001               	movlw	1
  9205  099E  07A5               	addwf	WriteAll_1621@p,f
  9206  099F  3000               	movlw	0
  9207  09A0  3DA6               	addwfc	WriteAll_1621@p+1,f
  9208  09A1  2988               	goto	l5342
  9209  09A2                     l762:	
  9210                           ;ht1621.c: 100: }
  9211                           ;ht1621.c: 101: do { LATC0 = 1; } while(0);
  9212                           
  9213  09A2  0022               	movlb	2	; select bank2
  9214  09A3  140E               	bsf	14,0	;volatile
  9215  09A4  0008               	return
  9216  09A5                     __end_of_WriteAll_1621:	
  9217                           
  9218                           	psect	text40
  9219  1758                     __ptext40:	
  9220 ;; *************** function _SendDataBit_1621 *****************
  9221 ;; Defined at:
  9222 ;;		line 42 in file "mcc_generated_files/ht1621.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;  data            1    wreg     unsigned char 
  9225 ;;  cnt             1    1[BANK0 ] unsigned char 
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;  data            1    3[BANK0 ] unsigned char 
  9228 ;;  i               1    4[BANK0 ] unsigned char 
  9229 ;; Return value:  Size  Location     Type
  9230 ;;                  1    wreg      void 
  9231 ;; Registers used:
  9232 ;;		wreg, status,2, status,0
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9238 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;Total ram usage:        4 bytes
  9243 ;; Hardware stack levels used:    1
  9244 ;; Hardware stack levels required when called:    3
  9245 ;; This function calls:
  9246 ;;		Nothing
  9247 ;; This function is called by:
  9248 ;;		_WriteAll_1621
  9249 ;;		_Write_1621
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253                           
  9254                           ;psect for function _SendDataBit_1621
  9255  1758                     _SendDataBit_1621:	
  9256                           
  9257                           ;incstack = 0
  9258                           ; Regs used in _SendDataBit_1621: [wreg+status,2+status,0]
  9259                           ;SendDataBit_1621@data stored from wreg
  9260  1758  0020               	movlb	0	; select bank0
  9261  1759  00A3               	movwf	SendDataBit_1621@data
  9262                           
  9263                           ;ht1621.c: 44: unsigned char i;
  9264                           ;ht1621.c: 45: for(i =0; i <cnt; i ++)
  9265  175A  01A4               	clrf	SendDataBit_1621@i
  9266  175B                     l5256:	
  9267  175B  0821               	movf	SendDataBit_1621@cnt,w
  9268  175C  0224               	subwf	SendDataBit_1621@i,w
  9269  175D  1803               	btfsc	3,0
  9270  175E  0008               	return
  9271                           
  9272                           ;ht1621.c: 46: {
  9273                           ;ht1621.c: 47: if((data&0x01)==0) do { LATC2 = 0; } while(0);
  9274  175F  1823               	btfsc	SendDataBit_1621@data,0
  9275  1760  2F64               	goto	l733
  9276  1761  0022               	movlb	2	; select bank2
  9277  1762  110E               	bcf	14,2	;volatile
  9278  1763  2F66               	goto	l735
  9279  1764                     l733:	
  9280                           ;ht1621.c: 48: else do { LATC2 = 1; } while(0);
  9281                           
  9282  1764  0022               	movlb	2	; select bank2
  9283  1765  150E               	bsf	14,2	;volatile
  9284  1766                     l735:	
  9285                           ;ht1621.c: 49: do { LATC1 = 0; } while(0);
  9286                           
  9287  1766  108E               	bcf	14,1	;volatile
  9288                           
  9289                           ;ht1621.c: 50: _delay((unsigned long)((1)*(4000000/4000.0)));
  9290  1767  30F9               	movlw	249
  9291  1768  0020               	movlb	0	; select bank0
  9292  1769  00A2               	movwf	??_SendDataBit_1621
  9293  176A                     u6077:	
  9294  176A  0000               	nop
  9295  176B  0BA2               	decfsz	??_SendDataBit_1621,f
  9296  176C  2F6A               	goto	u6077
  9297  176D  3200               	nop2	;nop
  9298  176E  0000               	nop
  9299                           
  9300                           ;ht1621.c: 51: do { LATC1 = 1; } while(0);
  9301  176F  0022               	movlb	2	; select bank2
  9302  1770  148E               	bsf	14,1	;volatile
  9303                           
  9304                           ;ht1621.c: 52: data>>=1;
  9305  1771  1003               	clrc
  9306  1772  0020               	movlb	0	; select bank0
  9307  1773  0CA3               	rrf	SendDataBit_1621@data,f
  9308  1774  3001               	movlw	1
  9309  1775  00A2               	movwf	??_SendDataBit_1621
  9310  1776  0822               	movf	??_SendDataBit_1621,w
  9311  1777  07A4               	addwf	SendDataBit_1621@i,f
  9312  1778  2F5B               	goto	l5256
  9313  1779                     __end_of_SendDataBit_1621:	
  9314                           
  9315                           	psect	text41
  9316  14D8                     __ptext41:	
  9317 ;; *************** function _Set_start_flag *****************
  9318 ;; Defined at:
  9319 ;;		line 18 in file "mcc_generated_files/save.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;		None
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;		None
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  1    wreg      void 
  9326 ;; Registers used:
  9327 ;;		None
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;Total ram usage:        0 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    3
  9340 ;; This function calls:
  9341 ;;		Nothing
  9342 ;; This function is called by:
  9343 ;;		_Key_Process
  9344 ;; This function uses a non-reentrant model
  9345 ;;
  9346                           
  9347                           
  9348                           ;psect for function _Set_start_flag
  9349  14D8                     _Set_start_flag:	
  9350                           
  9351                           ;save.c: 20: Record_flag = 1;
  9352                           
  9353                           ;incstack = 0
  9354                           ; Regs used in _Set_start_flag: []
  9355  14D8  0020               	movlb	0	; select bank0
  9356  14D9  01E6               	clrf	_Record_flag
  9357  14DA  0AE6               	incf	_Record_flag,f
  9358                           
  9359                           ;save.c: 21: do { LATA4 = 0; } while(0);
  9360  14DB  0022               	movlb	2	; select bank2
  9361  14DC  120C               	bcf	12,4	;volatile
  9362  14DD  0008               	return
  9363  14DE                     __end_of_Set_start_flag:	
  9364                           
  9365                           	psect	text42
  9366  14CE                     __ptext42:	
  9367 ;; *************** function _Set_finish_flag *****************
  9368 ;; Defined at:
  9369 ;;		line 30 in file "mcc_generated_files/save.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;		None
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      void 
  9376 ;; Registers used:
  9377 ;;		status,2
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;Total ram usage:        0 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    3
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_Key_Process
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _Set_finish_flag
  9399  14CE                     _Set_finish_flag:	
  9400                           
  9401                           ;save.c: 32: Record_flag = 0;
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in _Set_finish_flag: [status,2]
  9405  14CE  0020               	movlb	0	; select bank0
  9406  14CF  01E6               	clrf	_Record_flag
  9407                           
  9408                           ;save.c: 33: do { LATA4 = 1; } while(0);
  9409  14D0  0022               	movlb	2	; select bank2
  9410  14D1  160C               	bsf	12,4	;volatile
  9411  14D2  0008               	return
  9412  14D3                     __end_of_Set_finish_flag:	
  9413                           
  9414                           	psect	text43
  9415  15AC                     __ptext43:	
  9416 ;; *************** function _SendCmd_1621 *****************
  9417 ;; Defined at:
  9418 ;;		line 62 in file "mcc_generated_files/ht1621.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;  command         1    wreg     unsigned char 
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;  command         1    6[BANK0 ] unsigned char 
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  1    wreg      void 
  9425 ;; Registers used:
  9426 ;;		wreg, status,2, status,0, pclath, cstack
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;Total ram usage:        2 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    4
  9439 ;; This function calls:
  9440 ;;		_SendBit_1621
  9441 ;; This function is called by:
  9442 ;;		_main
  9443 ;;		_Key_Process
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           
  9448                           ;psect for function _SendCmd_1621
  9449  15AC                     _SendCmd_1621:	
  9450                           
  9451                           ;incstack = 0
  9452                           ; Regs used in _SendCmd_1621: [wreg+status,2+status,0+pclath+cstack]
  9453                           ;SendCmd_1621@command stored from wreg
  9454  15AC  0020               	movlb	0	; select bank0
  9455  15AD  00A6               	movwf	SendCmd_1621@command
  9456                           
  9457                           ;ht1621.c: 64: do { LATC0 = 0; } while(0);
  9458  15AE  0022               	movlb	2	; select bank2
  9459  15AF  100E               	bcf	14,0	;volatile
  9460                           
  9461                           ;ht1621.c: 65: SendBit_1621(0x80,4);
  9462  15B0  3004               	movlw	4
  9463  15B1  0020               	movlb	0	; select bank0
  9464  15B2  00A5               	movwf	??_SendCmd_1621
  9465  15B3  0825               	movf	??_SendCmd_1621,w
  9466  15B4  00A1               	movwf	SendBit_1621@cnt
  9467  15B5  3080               	movlw	128
  9468  15B6  3197  2737  3195   	fcall	_SendBit_1621
  9469                           
  9470                           ;ht1621.c: 66: SendBit_1621(command,8);
  9471  15B9  3008               	movlw	8
  9472  15BA  0020               	movlb	0	; select bank0
  9473  15BB  00A5               	movwf	??_SendCmd_1621
  9474  15BC  0825               	movf	??_SendCmd_1621,w
  9475  15BD  00A1               	movwf	SendBit_1621@cnt
  9476  15BE  0826               	movf	SendCmd_1621@command,w
  9477  15BF  3197  2737         	fcall	_SendBit_1621
  9478                           
  9479                           ;ht1621.c: 67: do { LATC0 = 1; } while(0);
  9480  15C1  0022               	movlb	2	; select bank2
  9481  15C2  140E               	bsf	14,0	;volatile
  9482  15C3  0008               	return
  9483  15C4                     __end_of_SendCmd_1621:	
  9484                           
  9485                           	psect	text44
  9486  1737                     __ptext44:	
  9487 ;; *************** function _SendBit_1621 *****************
  9488 ;; Defined at:
  9489 ;;		line 22 in file "mcc_generated_files/ht1621.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  data            1    wreg     unsigned char 
  9492 ;;  cnt             1    1[BANK0 ] unsigned char 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  data            1    3[BANK0 ] unsigned char 
  9495 ;;  i               1    4[BANK0 ] unsigned char 
  9496 ;; Return value:  Size  Location     Type
  9497 ;;                  1    wreg      void 
  9498 ;; Registers used:
  9499 ;;		wreg, status,2, status,0
  9500 ;; Tracked objects:
  9501 ;;		On entry : 0/0
  9502 ;;		On exit  : 0/0
  9503 ;;		Unchanged: 0/0
  9504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9505 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;Total ram usage:        4 bytes
  9510 ;; Hardware stack levels used:    1
  9511 ;; Hardware stack levels required when called:    3
  9512 ;; This function calls:
  9513 ;;		Nothing
  9514 ;; This function is called by:
  9515 ;;		_SendCmd_1621
  9516 ;;		_WriteAll_1621
  9517 ;;		_Write_1621
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           
  9522                           ;psect for function _SendBit_1621
  9523  1737                     _SendBit_1621:	
  9524                           
  9525                           ;incstack = 0
  9526                           ; Regs used in _SendBit_1621: [wreg+status,2+status,0]
  9527                           ;SendBit_1621@data stored from wreg
  9528  1737  0020               	movlb	0	; select bank0
  9529  1738  00A3               	movwf	SendBit_1621@data
  9530                           
  9531                           ;ht1621.c: 24: unsigned char i;
  9532                           ;ht1621.c: 25: for(i =0; i <cnt; i ++)
  9533  1739  01A4               	clrf	SendBit_1621@i
  9534  173A                     l5244:	
  9535  173A  0821               	movf	SendBit_1621@cnt,w
  9536  173B  0224               	subwf	SendBit_1621@i,w
  9537  173C  1803               	btfsc	3,0
  9538  173D  0008               	return
  9539                           
  9540                           ;ht1621.c: 26: {
  9541                           ;ht1621.c: 27: if((data&0x80)==0) do { LATC2 = 0; } while(0);
  9542  173E  1BA3               	btfsc	SendBit_1621@data,7
  9543  173F  2F43               	goto	l717
  9544  1740  0022               	movlb	2	; select bank2
  9545  1741  110E               	bcf	14,2	;volatile
  9546  1742  2F45               	goto	l719
  9547  1743                     l717:	
  9548                           ;ht1621.c: 28: else do { LATC2 = 1; } while(0);
  9549                           
  9550  1743  0022               	movlb	2	; select bank2
  9551  1744  150E               	bsf	14,2	;volatile
  9552  1745                     l719:	
  9553                           ;ht1621.c: 29: do { LATC1 = 0; } while(0);
  9554                           
  9555  1745  108E               	bcf	14,1	;volatile
  9556                           
  9557                           ;ht1621.c: 30: _delay((unsigned long)((1)*(4000000/4000.0)));
  9558  1746  30F9               	movlw	249
  9559  1747  0020               	movlb	0	; select bank0
  9560  1748  00A2               	movwf	??_SendBit_1621
  9561  1749                     u6087:	
  9562  1749  0000               	nop
  9563  174A  0BA2               	decfsz	??_SendBit_1621,f
  9564  174B  2F49               	goto	u6087
  9565  174C  3200               	nop2	;nop
  9566  174D  0000               	nop
  9567                           
  9568                           ;ht1621.c: 31: do { LATC1 = 1; } while(0);
  9569  174E  0022               	movlb	2	; select bank2
  9570  174F  148E               	bsf	14,1	;volatile
  9571                           
  9572                           ;ht1621.c: 32: data<<=1;
  9573  1750  1003               	clrc
  9574  1751  0020               	movlb	0	; select bank0
  9575  1752  0DA3               	rlf	SendBit_1621@data,f
  9576  1753  3001               	movlw	1
  9577  1754  00A2               	movwf	??_SendBit_1621
  9578  1755  0822               	movf	??_SendBit_1621,w
  9579  1756  07A4               	addwf	SendBit_1621@i,f
  9580  1757  2F3A               	goto	l5244
  9581  1758                     __end_of_SendBit_1621:	
  9582                           
  9583                           	psect	text45
  9584  17DD                     __ptext45:	
  9585 ;; *************** function _Key_Scan *****************
  9586 ;; Defined at:
  9587 ;;		line 20 in file "mcc_generated_files/key.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  Key_val         1    3[BANK0 ] unsigned char 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      unsigned char 
  9594 ;; Registers used:
  9595 ;;		wreg
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;Total ram usage:        3 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    3
  9608 ;; This function calls:
  9609 ;;		Nothing
  9610 ;; This function is called by:
  9611 ;;		_Key_Process
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _Key_Scan
  9617  17DD                     _Key_Scan:	
  9618                           
  9619                           ;key.c: 22: unsigned char Key_val=0xff;
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _Key_Scan: [wreg]
  9623  17DD  30FF               	movlw	255
  9624  17DE  0020               	movlb	0	; select bank0
  9625  17DF  00A1               	movwf	??_Key_Scan
  9626  17E0  0821               	movf	??_Key_Scan,w
  9627  17E1  00A3               	movwf	Key_Scan@Key_val
  9628                           
  9629                           ;key.c: 23: if( RA7 == 0 || RB5 == 0 )
  9630  17E2  1F8C               	btfss	12,7	;volatile
  9631  17E3  2FE6               	goto	l6058
  9632  17E4  1A8D               	btfsc	13,5	;volatile
  9633  17E5  2FFE               	goto	l952
  9634  17E6                     l6058:	
  9635                           
  9636                           ;key.c: 24: {
  9637                           ;key.c: 25: _delay((unsigned long)((10)*(4000000/4000.0)));
  9638  17E6  300D               	movlw	13
  9639  17E7  00A2               	movwf	??_Key_Scan+1
  9640  17E8  30FB               	movlw	251
  9641  17E9  00A1               	movwf	??_Key_Scan
  9642  17EA                     u6097:	
  9643  17EA  0BA1               	decfsz	??_Key_Scan,f
  9644  17EB  2FEA               	goto	u6097
  9645  17EC  0BA2               	decfsz	??_Key_Scan+1,f
  9646  17ED  2FEA               	goto	u6097
  9647  17EE  3200               	nop2
  9648                           
  9649                           ;key.c: 26: if( RA7 == 0 || RB5 == 0)
  9650  17EF  0020               	movlb	0	; select bank0
  9651  17F0  1F8C               	btfss	12,7	;volatile
  9652  17F1  2FF4               	goto	l957
  9653  17F2  1A8D               	btfsc	13,5	;volatile
  9654  17F3  2FFE               	goto	l952
  9655  17F4                     l957:	
  9656                           
  9657                           ;key.c: 27: {
  9658                           ;key.c: 28: if(RB5 == 0 ) Key_val = 0x01;
  9659  17F4  1A8D               	btfsc	13,5	;volatile
  9660  17F5  2FF8               	goto	l958
  9661  17F6  01A3               	clrf	Key_Scan@Key_val
  9662  17F7  0AA3               	incf	Key_Scan@Key_val,f
  9663  17F8                     l958:	
  9664                           
  9665                           ;key.c: 29: if(RA7 == 0 ) Key_val = 0x02;
  9666  17F8  1B8C               	btfsc	12,7	;volatile
  9667  17F9  2FFE               	goto	l952
  9668  17FA  3002               	movlw	2
  9669  17FB  00A1               	movwf	??_Key_Scan
  9670  17FC  0821               	movf	??_Key_Scan,w
  9671  17FD  00A3               	movwf	Key_Scan@Key_val
  9672  17FE                     l952:	
  9673                           
  9674                           ;key.c: 30: }
  9675                           ;key.c: 31: }
  9676                           ;key.c: 32: return Key_val;
  9677  17FE  0823               	movf	Key_Scan@Key_val,w
  9678  17FF  0008               	return
  9679  1800                     __end_of_Key_Scan:	
  9680                           
  9681                           	psect	text46
  9682  14EC                     __ptext46:	
  9683 ;; *************** function _Com_Process *****************
  9684 ;; Defined at:
  9685 ;;		line 18 in file "mcc_generated_files/com.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;		None
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  2  374[None  ] int 
  9692 ;; Registers used:
  9693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;Total ram usage:        0 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:    7
  9706 ;; This function calls:
  9707 ;;		_Set_time_from_Com
  9708 ;; This function is called by:
  9709 ;;		_main
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           
  9714                           ;psect for function _Com_Process
  9715  14EC                     _Com_Process:	
  9716                           
  9717                           ;com.c: 20: if(Set_time_cmd_flag == 1)
  9718                           
  9719                           ;incstack = 0
  9720                           ; Regs used in _Com_Process: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9721  14EC  0021               	movlb	1	; select bank1
  9722  14ED  033C               	decf	_Set_time_cmd_flag^(0+128),w
  9723  14EE  1D03               	btfss	3,2
  9724  14EF  0008               	return
  9725                           
  9726                           ;com.c: 21: {
  9727                           ;com.c: 22: Set_time_from_Com();
  9728  14F0  318A  224C         	fcall	_Set_time_from_Com
  9729                           
  9730                           ;com.c: 23: Set_time_cmd_flag = 0;
  9731  14F2  0021               	movlb	1	; select bank1
  9732  14F3  01BC               	clrf	_Set_time_cmd_flag^(0+128)
  9733  14F4  0008               	return
  9734  14F5                     __end_of_Com_Process:	
  9735                           
  9736                           	psect	text47
  9737  0A4C                     __ptext47:	
  9738 ;; *************** function _Set_time_from_Com *****************
  9739 ;; Defined at:
  9740 ;;		line 33 in file "mcc_generated_files/com.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;		None
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;		None
  9745 ;; Return value:  Size  Location     Type
  9746 ;;                  1    wreg      void 
  9747 ;; Registers used:
  9748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;Total ram usage:        1 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    6
  9761 ;; This function calls:
  9762 ;;		_Bq32k_Rtc_Read_Time
  9763 ;;		_Bq32k_Rtc_Write_Time
  9764 ;;		_Read_time_to_Com
  9765 ;; This function is called by:
  9766 ;;		_Com_Process
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function _Set_time_from_Com
  9772  0A4C                     _Set_time_from_Com:	
  9773                           
  9774                           ;com.c: 35: rtc_tm.years = Usart_Rx_Buff[4];
  9775                           
  9776                           ;incstack = 0
  9777                           ; Regs used in _Set_time_from_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9778  0A4C  0022               	movlb	2	; select bank2
  9779  0A4D  0838               	movf	(_Usart_Rx_Buff^(0+256)+4),w
  9780  0A4E  0020               	movlb	0	; select bank0
  9781  0A4F  00BF               	movwf	??_Set_time_from_Com
  9782  0A50  083F               	movf	??_Set_time_from_Com,w
  9783  0A51  0021               	movlb	1	; select bank1
  9784  0A52  00E9               	movwf	(_rtc_tm^(0+128)+6)
  9785                           
  9786                           ;com.c: 36: rtc_tm.month= Usart_Rx_Buff[5];
  9787  0A53  0022               	movlb	2	; select bank2
  9788  0A54  0839               	movf	(_Usart_Rx_Buff^(0+256)+5),w
  9789  0A55  0020               	movlb	0	; select bank0
  9790  0A56  00BF               	movwf	??_Set_time_from_Com
  9791  0A57  083F               	movf	??_Set_time_from_Com,w
  9792  0A58  0021               	movlb	1	; select bank1
  9793  0A59  00E8               	movwf	(_rtc_tm^(0+128)+5)
  9794                           
  9795                           ;com.c: 37: rtc_tm.date= Usart_Rx_Buff[6];
  9796  0A5A  0022               	movlb	2	; select bank2
  9797  0A5B  083A               	movf	(_Usart_Rx_Buff^(0+256)+6),w
  9798  0A5C  0020               	movlb	0	; select bank0
  9799  0A5D  00BF               	movwf	??_Set_time_from_Com
  9800  0A5E  083F               	movf	??_Set_time_from_Com,w
  9801  0A5F  0021               	movlb	1	; select bank1
  9802  0A60  00E7               	movwf	(_rtc_tm^(0+128)+4)
  9803                           
  9804                           ;com.c: 38: rtc_tm.hours= Usart_Rx_Buff[7];
  9805  0A61  0022               	movlb	2	; select bank2
  9806  0A62  083B               	movf	(_Usart_Rx_Buff^(0+256)+7),w
  9807  0A63  0020               	movlb	0	; select bank0
  9808  0A64  00BF               	movwf	??_Set_time_from_Com
  9809  0A65  083F               	movf	??_Set_time_from_Com,w
  9810  0A66  0021               	movlb	1	; select bank1
  9811  0A67  00E5               	movwf	(_rtc_tm^(0+128)+2)
  9812                           
  9813                           ;com.c: 39: rtc_tm.minutes= Usart_Rx_Buff[8];
  9814  0A68  0022               	movlb	2	; select bank2
  9815  0A69  083C               	movf	(_Usart_Rx_Buff^(0+256)+8),w
  9816  0A6A  0020               	movlb	0	; select bank0
  9817  0A6B  00BF               	movwf	??_Set_time_from_Com
  9818  0A6C  083F               	movf	??_Set_time_from_Com,w
  9819  0A6D  0021               	movlb	1	; select bank1
  9820  0A6E  00E4               	movwf	(_rtc_tm^(0+128)+1)
  9821                           
  9822                           ;com.c: 40: rtc_tm.seconds= Usart_Rx_Buff[9];
  9823  0A6F  0022               	movlb	2	; select bank2
  9824  0A70  083D               	movf	(_Usart_Rx_Buff^(0+256)+9),w
  9825  0A71  0020               	movlb	0	; select bank0
  9826  0A72  00BF               	movwf	??_Set_time_from_Com
  9827  0A73  083F               	movf	??_Set_time_from_Com,w
  9828  0A74  0021               	movlb	1	; select bank1
  9829  0A75  00E3               	movwf	_rtc_tm^(0+128)
  9830                           
  9831                           ;com.c: 41: rtc_tm.wday= Usart_Rx_Buff[10];
  9832  0A76  0022               	movlb	2	; select bank2
  9833  0A77  083E               	movf	(_Usart_Rx_Buff^(0+256)+10),w
  9834  0A78  0020               	movlb	0	; select bank0
  9835  0A79  00BF               	movwf	??_Set_time_from_Com
  9836  0A7A  083F               	movf	??_Set_time_from_Com,w
  9837  0A7B  0021               	movlb	1	; select bank1
  9838  0A7C  00E6               	movwf	(_rtc_tm^(0+128)+3)
  9839                           
  9840                           ;com.c: 42: Bq32k_Rtc_Write_Time(&rtc_tm);
  9841  0A7D  30E3               	movlw	(low (_rtc_tm| 0))& (0+255)
  9842  0A7E  318C  2497  318A   	fcall	_Bq32k_Rtc_Write_Time
  9843                           
  9844                           ;com.c: 43: Bq32k_Rtc_Read_Time(&rtc_tm);
  9845  0A81  30E3               	movlw	(low (_rtc_tm| 0))& (0+255)
  9846  0A82  318C  24F7  318A   	fcall	_Bq32k_Rtc_Read_Time
  9847                           
  9848                           ;com.c: 44: Read_time_to_Com();
  9849  0A85  318D  255B         	fcall	_Read_time_to_Com
  9850  0A87  0008               	return
  9851  0A88                     __end_of_Set_time_from_Com:	
  9852                           
  9853                           	psect	text48
  9854  0D5B                     __ptext48:	
  9855 ;; *************** function _Read_time_to_Com *****************
  9856 ;; Defined at:
  9857 ;;		line 53 in file "mcc_generated_files/com.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;		None
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;  tmp_buf        16   12[BANK0 ] unsigned char [16]
  9862 ;;  crc_tmp         2   28[BANK0 ] unsigned int 
  9863 ;;  i               1   30[BANK0 ] unsigned char 
  9864 ;; Return value:  Size  Location     Type
  9865 ;;                  1    wreg      void 
  9866 ;; Registers used:
  9867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9868 ;; Tracked objects:
  9869 ;;		On entry : 0/0
  9870 ;;		On exit  : 0/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;Total ram usage:       20 bytes
  9878 ;; Hardware stack levels used:    1
  9879 ;; Hardware stack levels required when called:    4
  9880 ;; This function calls:
  9881 ;;		_CRC_cal
  9882 ;;		_EUSART_Write
  9883 ;; This function is called by:
  9884 ;;		_Set_time_from_Com
  9885 ;; This function uses a non-reentrant model
  9886 ;;
  9887                           
  9888                           
  9889                           ;psect for function _Read_time_to_Com
  9890  0D5B                     _Read_time_to_Com:	
  9891                           
  9892                           ;com.c: 55: unsigned int crc_tmp=0;
  9893                           
  9894                           ;incstack = 0
  9895                           ; Regs used in _Read_time_to_Com: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9896  0D5B  0020               	movlb	0	; select bank0
  9897  0D5C  01BC               	clrf	Read_time_to_Com@crc_tmp
  9898  0D5D  01BD               	clrf	Read_time_to_Com@crc_tmp+1
  9899                           
  9900                           ;com.c: 56: unsigned char tmp_buf[16];
  9901                           ;com.c: 57: unsigned char i;
  9902                           ;com.c: 58: tmp_buf[0] = 0xfe;
  9903  0D5E  30FE               	movlw	254
  9904  0D5F  00AB               	movwf	??_Read_time_to_Com
  9905  0D60  082B               	movf	??_Read_time_to_Com,w
  9906  0D61  00AC               	movwf	Read_time_to_Com@tmp_buf
  9907                           
  9908                           ;com.c: 59: tmp_buf[1] = 0xfe;
  9909  0D62  30FE               	movlw	254
  9910  0D63  00AB               	movwf	??_Read_time_to_Com
  9911  0D64  082B               	movf	??_Read_time_to_Com,w
  9912  0D65  00AD               	movwf	Read_time_to_Com@tmp_buf+1
  9913                           
  9914                           ;com.c: 60: tmp_buf[2] = 0X02;
  9915  0D66  3002               	movlw	2
  9916  0D67  00AB               	movwf	??_Read_time_to_Com
  9917  0D68  082B               	movf	??_Read_time_to_Com,w
  9918  0D69  00AE               	movwf	Read_time_to_Com@tmp_buf+2
  9919                           
  9920                           ;com.c: 61: tmp_buf[3] = 0x07;
  9921  0D6A  3007               	movlw	7
  9922  0D6B  00AB               	movwf	??_Read_time_to_Com
  9923  0D6C  082B               	movf	??_Read_time_to_Com,w
  9924  0D6D  00AF               	movwf	Read_time_to_Com@tmp_buf+3
  9925                           
  9926                           ;com.c: 62: tmp_buf[4] = rtc_tm.years;
  9927  0D6E  0021               	movlb	1	; select bank1
  9928  0D6F  0869               	movf	(_rtc_tm^(0+128)+6),w
  9929  0D70  0020               	movlb	0	; select bank0
  9930  0D71  00AB               	movwf	??_Read_time_to_Com
  9931  0D72  082B               	movf	??_Read_time_to_Com,w
  9932  0D73  00B0               	movwf	Read_time_to_Com@tmp_buf+4
  9933                           
  9934                           ;com.c: 63: tmp_buf[5] = rtc_tm.month;
  9935  0D74  0021               	movlb	1	; select bank1
  9936  0D75  0868               	movf	(_rtc_tm^(0+128)+5),w
  9937  0D76  0020               	movlb	0	; select bank0
  9938  0D77  00AB               	movwf	??_Read_time_to_Com
  9939  0D78  082B               	movf	??_Read_time_to_Com,w
  9940  0D79  00B1               	movwf	Read_time_to_Com@tmp_buf+5
  9941                           
  9942                           ;com.c: 64: tmp_buf[6] = rtc_tm.date;
  9943  0D7A  0021               	movlb	1	; select bank1
  9944  0D7B  0867               	movf	(_rtc_tm^(0+128)+4),w
  9945  0D7C  0020               	movlb	0	; select bank0
  9946  0D7D  00AB               	movwf	??_Read_time_to_Com
  9947  0D7E  082B               	movf	??_Read_time_to_Com,w
  9948  0D7F  00B2               	movwf	Read_time_to_Com@tmp_buf+6
  9949                           
  9950                           ;com.c: 65: tmp_buf[7] = rtc_tm.hours;
  9951  0D80  0021               	movlb	1	; select bank1
  9952  0D81  0865               	movf	(_rtc_tm^(0+128)+2),w
  9953  0D82  0020               	movlb	0	; select bank0
  9954  0D83  00AB               	movwf	??_Read_time_to_Com
  9955  0D84  082B               	movf	??_Read_time_to_Com,w
  9956  0D85  00B3               	movwf	Read_time_to_Com@tmp_buf+7
  9957                           
  9958                           ;com.c: 66: tmp_buf[8] = rtc_tm.minutes;
  9959  0D86  0021               	movlb	1	; select bank1
  9960  0D87  0864               	movf	(_rtc_tm^(0+128)+1),w
  9961  0D88  0020               	movlb	0	; select bank0
  9962  0D89  00AB               	movwf	??_Read_time_to_Com
  9963  0D8A  082B               	movf	??_Read_time_to_Com,w
  9964  0D8B  00B4               	movwf	Read_time_to_Com@tmp_buf+8
  9965                           
  9966                           ;com.c: 67: tmp_buf[9] = rtc_tm.seconds;
  9967  0D8C  0021               	movlb	1	; select bank1
  9968  0D8D  0863               	movf	_rtc_tm^(0+128),w
  9969  0D8E  0020               	movlb	0	; select bank0
  9970  0D8F  00AB               	movwf	??_Read_time_to_Com
  9971  0D90  082B               	movf	??_Read_time_to_Com,w
  9972  0D91  00B5               	movwf	Read_time_to_Com@tmp_buf+9
  9973                           
  9974                           ;com.c: 68: tmp_buf[10] = rtc_tm.wday;
  9975  0D92  0021               	movlb	1	; select bank1
  9976  0D93  0866               	movf	(_rtc_tm^(0+128)+3),w
  9977  0D94  0020               	movlb	0	; select bank0
  9978  0D95  00AB               	movwf	??_Read_time_to_Com
  9979  0D96  082B               	movf	??_Read_time_to_Com,w
  9980  0D97  00B6               	movwf	Read_time_to_Com@tmp_buf+10
  9981                           
  9982                           ;com.c: 69: crc_tmp = CRC_cal(tmp_buf,14);
  9983  0D98  300E               	movlw	14
  9984  0D99  00AB               	movwf	??_Read_time_to_Com
  9985  0D9A  082B               	movf	??_Read_time_to_Com,w
  9986  0D9B  00A1               	movwf	CRC_cal@frame_len
  9987  0D9C  302C               	movlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
  9988  0D9D  318F  2786  318D   	fcall	_CRC_cal
  9989  0DA0  0020               	movlb	0	; select bank0
  9990  0DA1  0822               	movf	?_CRC_cal+1,w
  9991  0DA2  00BD               	movwf	Read_time_to_Com@crc_tmp+1
  9992  0DA3  0821               	movf	?_CRC_cal,w
  9993  0DA4  00BC               	movwf	Read_time_to_Com@crc_tmp
  9994                           
  9995                           ;com.c: 70: tmp_buf[11] = crc_tmp >>8;
  9996  0DA5  083D               	movf	Read_time_to_Com@crc_tmp+1,w
  9997  0DA6  00AB               	movwf	??_Read_time_to_Com
  9998  0DA7  082B               	movf	??_Read_time_to_Com,w
  9999  0DA8  00B7               	movwf	Read_time_to_Com@tmp_buf+11
 10000                           
 10001                           ;com.c: 71: tmp_buf[12] = crc_tmp & 0xff;
 10002  0DA9  083C               	movf	Read_time_to_Com@crc_tmp,w
 10003  0DAA  00AB               	movwf	??_Read_time_to_Com
 10004  0DAB  082B               	movf	??_Read_time_to_Com,w
 10005  0DAC  00B8               	movwf	Read_time_to_Com@tmp_buf+12
 10006                           
 10007                           ;com.c: 72: tmp_buf[13] = 0xbb;
 10008  0DAD  30BB               	movlw	187
 10009  0DAE  00AB               	movwf	??_Read_time_to_Com
 10010  0DAF  082B               	movf	??_Read_time_to_Com,w
 10011  0DB0  00B9               	movwf	Read_time_to_Com@tmp_buf+13
 10012                           
 10013                           ;com.c: 73: for(i=0;i<14;i++)
 10014  0DB1  01BE               	clrf	Read_time_to_Com@i
 10015  0DB2                     L11:	
 10016  0DB2  300E               	movlw	14
 10017  0DB3  023E               	subwf	Read_time_to_Com@i,w
 10018  0DB4  1803               	btfsc	3,0
 10019  0DB5  0008               	return
 10020                           
 10021                           ;com.c: 74: {
 10022                           ;com.c: 75: EUSART_Write(tmp_buf[i]);
 10023  0DB6  083E               	movf	Read_time_to_Com@i,w
 10024  0DB7  3E2C               	addlw	(low (Read_time_to_Com@tmp_buf| 0))& (0+255)
 10025  0DB8  0086               	movwf	6
 10026  0DB9  0187               	clrf	7
 10027  0DBA  0801               	movf	1,w
 10028  0DBB  3195  251A  318D   	fcall	_EUSART_Write
 10029  0DBE  3001               	movlw	1
 10030  0DBF  0020               	movlb	0	; select bank0
 10031  0DC0  00AB               	movwf	??_Read_time_to_Com
 10032  0DC1  082B               	movf	??_Read_time_to_Com,w
 10033  0DC2  07BE               	addwf	Read_time_to_Com@i,f
 10034  0DC3  2DB2               	goto	L11
 10035  0DC4                     __end_of_Read_time_to_Com:	
 10036                           
 10037                           	psect	text49
 10038  151A                     __ptext49:	
 10039 ;; *************** function _EUSART_Write *****************
 10040 ;; Defined at:
 10041 ;;		line 132 in file "mcc_generated_files/eusart.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;  txData          1    wreg     unsigned char 
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;  txData          1    1[BANK0 ] unsigned char 
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      void 
 10048 ;; Registers used:
 10049 ;;		wreg
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;Total ram usage:        1 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:    3
 10062 ;; This function calls:
 10063 ;;		Nothing
 10064 ;; This function is called by:
 10065 ;;		_Key_Process
 10066 ;;		_Read_time_to_Com
 10067 ;;		_EUSART_SendString
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           
 10072                           ;psect for function _EUSART_Write
 10073  151A                     _EUSART_Write:	
 10074                           
 10075                           ;incstack = 0
 10076                           ; Regs used in _EUSART_Write: [wreg]
 10077                           ;EUSART_Write@txData stored from wreg
 10078  151A  0020               	movlb	0	; select bank0
 10079  151B  00A1               	movwf	EUSART_Write@txData
 10080                           
 10081                           ;eusart.c: 135: TXREG = txData;
 10082  151C  0821               	movf	EUSART_Write@txData,w
 10083  151D  0023               	movlb	3	; select bank3
 10084  151E  009A               	movwf	26	;volatile
 10085                           
 10086                           ;eusart.c: 136: PIR1bits.TXIF = 0;
 10087  151F  0020               	movlb	0	; select bank0
 10088  1520  1211               	bcf	17,4	;volatile
 10089                           
 10090                           ;eusart.c: 137: __nop();
 10091  1521  0000               	nop
 10092  1522                     l161:	
 10093                           ;eusart.c: 138: while(!PIR1bits.TXIF)
 10094                           
 10095  1522  0020               	movlb	0	; select bank0
 10096  1523  1A11               	btfsc	17,4	;volatile
 10097  1524  0008               	return
 10098                           
 10099                           ;eusart.c: 139: {__nop();__nop();__nop();__nop();}
 10100  1525  0000               	nop
 10101  1526  0000               	nop
 10102  1527  0000               	nop
 10103  1528  0000               	nop
 10104  1529  2D22               	goto	l161
 10105  152A                     __end_of_EUSART_Write:	
 10106                           
 10107                           	psect	text50
 10108  0F86                     __ptext50:	
 10109 ;; *************** function _CRC_cal *****************
 10110 ;; Defined at:
 10111 ;;		line 124 in file "mcc_generated_files/com.c"
 10112 ;; Parameters:    Size  Location     Type
 10113 ;;  rx_arr          1    wreg     PTR unsigned char 
 10114 ;;		 -> Read_time_to_Com@tmp_buf(16), 
 10115 ;;  frame_len       1    1[BANK0 ] unsigned char 
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;  rx_arr          1    7[BANK0 ] PTR unsigned char 
 10118 ;;		 -> Read_time_to_Com@tmp_buf(16), 
 10119 ;;  remainder       2    9[BANK0 ] unsigned int 
 10120 ;;  i               1    8[BANK0 ] unsigned char 
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  2    1[BANK0 ] unsigned int 
 10123 ;; Registers used:
 10124 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10130 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;Total ram usage:       10 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    3
 10137 ;; This function calls:
 10138 ;;		Nothing
 10139 ;; This function is called by:
 10140 ;;		_Read_time_to_Com
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           
 10145                           ;psect for function _CRC_cal
 10146  0F86                     _CRC_cal:	
 10147                           
 10148                           ;incstack = 0
 10149                           ; Regs used in _CRC_cal: [wreg+fsr1l+fsr1h+status,2+status,0]
 10150                           ;CRC_cal@rx_arr stored from wreg
 10151  0F86  0020               	movlb	0	; select bank0
 10152  0F87  00A7               	movwf	CRC_cal@rx_arr
 10153                           
 10154                           ;com.c: 126: unsigned char i = 0;
 10155  0F88  01A8               	clrf	CRC_cal@i
 10156                           
 10157                           ;com.c: 127: unsigned int remainder = 0;
 10158  0F89  01A9               	clrf	CRC_cal@remainder
 10159  0F8A  01AA               	clrf	CRC_cal@remainder+1
 10160                           
 10161                           ;com.c: 129: for(i = 2; i < frame_len - 3; i++)
 10162  0F8B  3002               	movlw	2
 10163  0F8C  00A3               	movwf	??_CRC_cal
 10164  0F8D  0823               	movf	??_CRC_cal,w
 10165  0F8E  00A8               	movwf	CRC_cal@i
 10166  0F8F                     l5806:	
 10167  0F8F  0821               	movf	CRC_cal@frame_len,w
 10168  0F90  3EFD               	addlw	253
 10169  0F91  00A3               	movwf	??_CRC_cal
 10170  0F92  30FF               	movlw	255
 10171  0F93  1803               	skipnc
 10172  0F94  3000               	movlw	0
 10173  0F95  00A4               	movwf	??_CRC_cal+1
 10174  0F96  0824               	movf	??_CRC_cal+1,w
 10175  0F97  3A80               	xorlw	128
 10176  0F98  3C80               	sublw	128
 10177  0F99  1D03               	skipz
 10178  0F9A  2F9D               	goto	u5395
 10179  0F9B  0823               	movf	??_CRC_cal,w
 10180  0F9C  0228               	subwf	CRC_cal@i,w
 10181  0F9D                     u5395:	
 10182  0F9D  1803               	btfsc	3,0
 10183  0F9E  2FFA               	goto	l5808
 10184                           
 10185                           ;com.c: 130: {
 10186                           ;com.c: 131: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 10187  0F9F  0020               	movlb	0	; select bank0
 10188  0FA0  0829               	movf	CRC_cal@remainder,w
 10189  0FA1  00A4               	movwf	??_CRC_cal+1
 10190  0FA2  01A3               	clrf	??_CRC_cal
 10191  0FA3  082A               	movf	CRC_cal@remainder+1,w
 10192  0FA4  00A6               	movwf	??_CRC_cal+3
 10193  0FA5  0829               	movf	CRC_cal@remainder,w
 10194  0FA6  00A5               	movwf	??_CRC_cal+2
 10195  0FA7  0826               	movf	??_CRC_cal+3,w
 10196  0FA8  00A5               	movwf	??_CRC_cal+2
 10197  0FA9  01A6               	clrf	??_CRC_cal+3
 10198  0FAA  0823               	movf	??_CRC_cal,w
 10199  0FAB  0425               	iorwf	??_CRC_cal+2,w
 10200  0FAC  00A9               	movwf	CRC_cal@remainder
 10201  0FAD  0824               	movf	??_CRC_cal+1,w
 10202  0FAE  0426               	iorwf	??_CRC_cal+3,w
 10203  0FAF  00AA               	movwf	CRC_cal@remainder+1
 10204                           
 10205                           ;com.c: 132: remainder ^= rx_arr[i];
 10206  0FB0  0828               	movf	CRC_cal@i,w
 10207  0FB1  0727               	addwf	CRC_cal@rx_arr,w
 10208  0FB2  00A3               	movwf	??_CRC_cal
 10209  0FB3  0823               	movf	??_CRC_cal,w
 10210  0FB4  0086               	movwf	6
 10211  0FB5  0187               	clrf	7
 10212  0FB6  0801               	movf	1,w
 10213  0FB7  00A4               	movwf	??_CRC_cal+1
 10214  0FB8  01A5               	clrf	??_CRC_cal+2
 10215  0FB9  0824               	movf	??_CRC_cal+1,w
 10216  0FBA  06A9               	xorwf	CRC_cal@remainder,f
 10217  0FBB  0825               	movf	??_CRC_cal+2,w
 10218  0FBC  06AA               	xorwf	CRC_cal@remainder+1,f
 10219                           
 10220                           ;com.c: 133: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 10221  0FBD  082A               	movf	CRC_cal@remainder+1,w
 10222  0FBE  00A4               	movwf	??_CRC_cal+1
 10223  0FBF  0829               	movf	CRC_cal@remainder,w
 10224  0FC0  00A3               	movwf	??_CRC_cal
 10225  0FC1  3004               	movlw	4
 10226  0FC2                     u5385:	
 10227  0FC2  36A4               	lsrf	??_CRC_cal+1,f
 10228  0FC3  0CA3               	rrf	??_CRC_cal,f
 10229  0FC4  0B89               	decfsz	9,f
 10230  0FC5  2FC2               	goto	u5385
 10231  0FC6  300F               	movlw	15
 10232  0FC7  0523               	andwf	??_CRC_cal,w
 10233  0FC8  00A5               	movwf	??_CRC_cal+2
 10234  0FC9  3000               	movlw	0
 10235  0FCA  0524               	andwf	??_CRC_cal+1,w
 10236  0FCB  00A6               	movwf	??_CRC_cal+3
 10237  0FCC  0825               	movf	??_CRC_cal+2,w
 10238  0FCD  06A9               	xorwf	CRC_cal@remainder,f
 10239  0FCE  0826               	movf	??_CRC_cal+3,w
 10240  0FCF  06AA               	xorwf	CRC_cal@remainder+1,f
 10241                           
 10242                           ;com.c: 134: remainder ^= (unsigned int)((remainder << 8) << 4);
 10243  0FD0  0829               	movf	CRC_cal@remainder,w
 10244  0FD1  00A4               	movwf	??_CRC_cal+1
 10245  0FD2  01A3               	clrf	??_CRC_cal
 10246  0FD3  0EA3               	swapf	??_CRC_cal,f
 10247  0FD4  0EA4               	swapf	??_CRC_cal+1,f
 10248  0FD5  30F0               	movlw	240
 10249  0FD6  05A4               	andwf	??_CRC_cal+1,f
 10250  0FD7  0823               	movf	??_CRC_cal,w
 10251  0FD8  390F               	andlw	15
 10252  0FD9  04A4               	iorwf	??_CRC_cal+1,f
 10253  0FDA  30F0               	movlw	240
 10254  0FDB  05A3               	andwf	??_CRC_cal,f
 10255  0FDC  0823               	movf	??_CRC_cal,w
 10256  0FDD  06A9               	xorwf	CRC_cal@remainder,f
 10257  0FDE  0824               	movf	??_CRC_cal+1,w
 10258  0FDF  06AA               	xorwf	CRC_cal@remainder+1,f
 10259                           
 10260                           ;com.c: 135: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 10261  0FE0  30FF               	movlw	255
 10262  0FE1  0529               	andwf	CRC_cal@remainder,w
 10263  0FE2  00A3               	movwf	??_CRC_cal
 10264  0FE3  3000               	movlw	0
 10265  0FE4  052A               	andwf	CRC_cal@remainder+1,w
 10266  0FE5  00A4               	movwf	??_CRC_cal+1
 10267  0FE6  0EA3               	swapf	??_CRC_cal,f
 10268  0FE7  0EA4               	swapf	??_CRC_cal+1,f
 10269  0FE8  30F0               	movlw	240
 10270  0FE9  05A4               	andwf	??_CRC_cal+1,f
 10271  0FEA  0823               	movf	??_CRC_cal,w
 10272  0FEB  390F               	andlw	15
 10273  0FEC  04A4               	iorwf	??_CRC_cal+1,f
 10274  0FED  30F0               	movlw	240
 10275  0FEE  05A3               	andwf	??_CRC_cal,f
 10276  0FEF  35A3               	lslf	??_CRC_cal,f
 10277  0FF0  0DA4               	rlf	??_CRC_cal+1,f
 10278  0FF1  0823               	movf	??_CRC_cal,w
 10279  0FF2  06A9               	xorwf	CRC_cal@remainder,f
 10280  0FF3  0824               	movf	??_CRC_cal+1,w
 10281  0FF4  06AA               	xorwf	CRC_cal@remainder+1,f
 10282  0FF5  3001               	movlw	1
 10283  0FF6  00A3               	movwf	??_CRC_cal
 10284  0FF7  0823               	movf	??_CRC_cal,w
 10285  0FF8  07A8               	addwf	CRC_cal@i,f
 10286  0FF9  2F8F               	goto	l5806
 10287  0FFA                     l5808:	
 10288                           
 10289                           ;com.c: 136: }
 10290                           ;com.c: 137: return remainder;
 10291  0FFA  0020               	movlb	0	; select bank0
 10292  0FFB  082A               	movf	CRC_cal@remainder+1,w
 10293  0FFC  00A2               	movwf	?_CRC_cal+1
 10294  0FFD  0829               	movf	CRC_cal@remainder,w
 10295  0FFE  00A1               	movwf	?_CRC_cal
 10296  0FFF  0008               	return
 10297  1000                     __end_of_CRC_cal:	
 10298                           
 10299                           	psect	text51
 10300  0C97                     __ptext51:	
 10301 ;; *************** function _Bq32k_Rtc_Write_Time *****************
 10302 ;; Defined at:
 10303 ;;		line 53 in file "mcc_generated_files/bq32k.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;  p               1    wreg     PTR struct bq32k_regs
 10306 ;;		 -> rtc_tm(7), 
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;  p               1   30[BANK0 ] PTR struct bq32k_regs
 10309 ;;		 -> rtc_tm(7), 
 10310 ;;  temp           10   20[BANK0 ] unsigned char [10]
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  1    wreg      void 
 10313 ;; Registers used:
 10314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:       13 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    5
 10327 ;; This function calls:
 10328 ;;		_I2C_Send_Buffer
 10329 ;;		_bin2bcd
 10330 ;; This function is called by:
 10331 ;;		_Set_time_from_Com
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function _Bq32k_Rtc_Write_Time
 10337  0C97                     _Bq32k_Rtc_Write_Time:	
 10338                           
 10339                           ;incstack = 0
 10340                           ; Regs used in _Bq32k_Rtc_Write_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10341                           ;Bq32k_Rtc_Write_Time@p stored from wreg
 10342  0C97  0020               	movlb	0	; select bank0
 10343  0C98  00BE               	movwf	Bq32k_Rtc_Write_Time@p
 10344                           
 10345                           ;bq32k.c: 55: unsigned char temp[10] ;
 10346                           ;bq32k.c: 56: temp[0] = bin2bcd(p->seconds);
 10347  0C99  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10348  0C9A  0086               	movwf	6
 10349  0C9B  0187               	clrf	7
 10350  0C9C  0801               	movf	1,w
 10351  0C9D  3188  20AD  318C   	fcall	_bin2bcd
 10352  0CA0  0020               	movlb	0	; select bank0
 10353  0CA1  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10354  0CA2  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10355  0CA3  00B4               	movwf	Bq32k_Rtc_Write_Time@temp
 10356                           
 10357                           ;bq32k.c: 57: temp[1] = bin2bcd(p->minutes);
 10358  0CA4  0A3E               	incf	Bq32k_Rtc_Write_Time@p,w
 10359  0CA5  0086               	movwf	6
 10360  0CA6  0187               	clrf	7
 10361  0CA7  0801               	movf	1,w
 10362  0CA8  3188  20AD  318C   	fcall	_bin2bcd
 10363  0CAB  0020               	movlb	0	; select bank0
 10364  0CAC  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10365  0CAD  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10366  0CAE  00B5               	movwf	Bq32k_Rtc_Write_Time@temp+1
 10367                           
 10368                           ;bq32k.c: 58: temp[2] = bin2bcd(p->hours);
 10369  0CAF  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10370  0CB0  3E02               	addlw	2
 10371  0CB1  0086               	movwf	6
 10372  0CB2  0187               	clrf	7
 10373  0CB3  0801               	movf	1,w
 10374  0CB4  3188  20AD  318C   	fcall	_bin2bcd
 10375  0CB7  0020               	movlb	0	; select bank0
 10376  0CB8  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10377  0CB9  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10378  0CBA  00B6               	movwf	Bq32k_Rtc_Write_Time@temp+2
 10379                           
 10380                           ;bq32k.c: 59: temp[3] = bin2bcd(p->wday);
 10381  0CBB  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10382  0CBC  3E03               	addlw	3
 10383  0CBD  0086               	movwf	6
 10384  0CBE  0187               	clrf	7
 10385  0CBF  0801               	movf	1,w
 10386  0CC0  3188  20AD  318C   	fcall	_bin2bcd
 10387  0CC3  0020               	movlb	0	; select bank0
 10388  0CC4  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10389  0CC5  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10390  0CC6  00B7               	movwf	Bq32k_Rtc_Write_Time@temp+3
 10391                           
 10392                           ;bq32k.c: 60: temp[4] = bin2bcd(p->date);
 10393  0CC7  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10394  0CC8  3E04               	addlw	4
 10395  0CC9  0086               	movwf	6
 10396  0CCA  0187               	clrf	7
 10397  0CCB  0801               	movf	1,w
 10398  0CCC  3188  20AD  318C   	fcall	_bin2bcd
 10399  0CCF  0020               	movlb	0	; select bank0
 10400  0CD0  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10401  0CD1  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10402  0CD2  00B8               	movwf	Bq32k_Rtc_Write_Time@temp+4
 10403                           
 10404                           ;bq32k.c: 61: temp[5] = bin2bcd(p->month);
 10405  0CD3  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10406  0CD4  3E05               	addlw	5
 10407  0CD5  0086               	movwf	6
 10408  0CD6  0187               	clrf	7
 10409  0CD7  0801               	movf	1,w
 10410  0CD8  3188  20AD  318C   	fcall	_bin2bcd
 10411  0CDB  0020               	movlb	0	; select bank0
 10412  0CDC  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10413  0CDD  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10414  0CDE  00B9               	movwf	Bq32k_Rtc_Write_Time@temp+5
 10415                           
 10416                           ;bq32k.c: 62: temp[6] = bin2bcd(p->years);
 10417  0CDF  083E               	movf	Bq32k_Rtc_Write_Time@p,w
 10418  0CE0  3E06               	addlw	6
 10419  0CE1  0086               	movwf	6
 10420  0CE2  0187               	clrf	7
 10421  0CE3  0801               	movf	1,w
 10422  0CE4  3188  20AD  318C   	fcall	_bin2bcd
 10423  0CE7  0020               	movlb	0	; select bank0
 10424  0CE8  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10425  0CE9  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10426  0CEA  00BA               	movwf	Bq32k_Rtc_Write_Time@temp+6
 10427                           
 10428                           ;bq32k.c: 63: I2C_Send_Buffer( 0 , temp , 7);
 10429  0CEB  3034               	movlw	(low (Bq32k_Rtc_Write_Time@temp| 0))& (0+255)
 10430  0CEC  00B2               	movwf	??_Bq32k_Rtc_Write_Time
 10431  0CED  0832               	movf	??_Bq32k_Rtc_Write_Time,w
 10432  0CEE  00A4               	movwf	I2C_Send_Buffer@buff
 10433  0CEF  3007               	movlw	7
 10434  0CF0  00B3               	movwf	??_Bq32k_Rtc_Write_Time+1
 10435  0CF1  0833               	movf	??_Bq32k_Rtc_Write_Time+1,w
 10436  0CF2  00A5               	movwf	I2C_Send_Buffer@Length
 10437  0CF3  3000               	movlw	0
 10438  0CF4  318A  2211         	fcall	_I2C_Send_Buffer
 10439  0CF6  0008               	return
 10440  0CF7                     __end_of_Bq32k_Rtc_Write_Time:	
 10441                           
 10442                           	psect	text52
 10443  08AD                     __ptext52:	
 10444 ;; *************** function _bin2bcd *****************
 10445 ;; Defined at:
 10446 ;;		line 83 in file "mcc_generated_files/bq32k.c"
 10447 ;; Parameters:    Size  Location     Type
 10448 ;;  val             1    wreg     unsigned char 
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;  val             1   17[BANK0 ] unsigned char 
 10451 ;; Return value:  Size  Location     Type
 10452 ;;                  1    wreg      unsigned char 
 10453 ;; Registers used:
 10454 ;;		wreg, status,2, status,0, pclath, cstack
 10455 ;; Tracked objects:
 10456 ;;		On entry : 0/0
 10457 ;;		On exit  : 0/0
 10458 ;;		Unchanged: 0/0
 10459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;Total ram usage:        8 bytes
 10465 ;; Hardware stack levels used:    1
 10466 ;; Hardware stack levels required when called:    4
 10467 ;; This function calls:
 10468 ;;		___awdiv
 10469 ;;		___awmod
 10470 ;; This function is called by:
 10471 ;;		_Bq32k_Rtc_Write_Time
 10472 ;; This function uses a non-reentrant model
 10473 ;;
 10474                           
 10475                           
 10476                           ;psect for function _bin2bcd
 10477  08AD                     _bin2bcd:	
 10478                           
 10479                           ;incstack = 0
 10480                           ; Regs used in _bin2bcd: [wreg+status,2+status,0+pclath+cstack]
 10481                           ;bin2bcd@val stored from wreg
 10482  08AD  0020               	movlb	0	; select bank0
 10483  08AE  00B1               	movwf	bin2bcd@val
 10484                           
 10485                           ;bq32k.c: 85: return ((val / 10) << 4) + val % 10;
 10486  08AF  300A               	movlw	10
 10487  08B0  00A1               	movwf	___awmod@divisor
 10488  08B1  3000               	movlw	0
 10489  08B2  00A2               	movwf	___awmod@divisor+1
 10490  08B3  0831               	movf	bin2bcd@val,w
 10491  08B4  00AA               	movwf	??_bin2bcd
 10492  08B5  01AB               	clrf	??_bin2bcd+1
 10493  08B6  082A               	movf	??_bin2bcd,w
 10494  08B7  00A3               	movwf	___awmod@dividend
 10495  08B8  082B               	movf	??_bin2bcd+1,w
 10496  08B9  00A4               	movwf	___awmod@dividend+1
 10497  08BA  318A  22C6  3188   	fcall	___awmod
 10498  08BD  0020               	movlb	0	; select bank0
 10499  08BE  0821               	movf	?___awmod,w
 10500  08BF  00AC               	movwf	??_bin2bcd+2
 10501  08C0  0822               	movf	?___awmod+1,w
 10502  08C1  00AD               	movwf	??_bin2bcd+3
 10503  08C2  300A               	movlw	10
 10504  08C3  00A1               	movwf	___awdiv@divisor
 10505  08C4  3000               	movlw	0
 10506  08C5  00A2               	movwf	___awdiv@divisor+1
 10507  08C6  0831               	movf	bin2bcd@val,w
 10508  08C7  00AE               	movwf	??_bin2bcd+4
 10509  08C8  01AF               	clrf	??_bin2bcd+5
 10510  08C9  082E               	movf	??_bin2bcd+4,w
 10511  08CA  00A3               	movwf	___awdiv@dividend
 10512  08CB  082F               	movf	??_bin2bcd+5,w
 10513  08CC  00A4               	movwf	___awdiv@dividend+1
 10514  08CD  318C  2445  3188   	fcall	___awdiv
 10515  08D0  0020               	movlb	0	; select bank0
 10516  08D1  0821               	movf	?___awdiv,w
 10517  08D2  00B0               	movwf	??_bin2bcd+6
 10518  08D3  3003               	movlw	3
 10519  08D4                     u5375:	
 10520  08D4  35B0               	lslf	??_bin2bcd+6,f
 10521  08D5  3EFF               	addlw	-1
 10522  08D6  1D03               	skipz
 10523  08D7  28D4               	goto	u5375
 10524  08D8  3530               	lslf	??_bin2bcd+6,w
 10525  08D9  072C               	addwf	??_bin2bcd+2,w
 10526  08DA  0008               	return
 10527  08DB                     __end_of_bin2bcd:	
 10528                           
 10529                           	psect	text53
 10530  0AC6                     __ptext53:	
 10531 ;; *************** function ___awmod *****************
 10532 ;; Defined at:
 10533 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;  divisor         2    1[BANK0 ] int 
 10536 ;;  dividend        2    3[BANK0 ] int 
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;  sign            1    7[BANK0 ] unsigned char 
 10539 ;;  counter         1    6[BANK0 ] unsigned char 
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  2    1[BANK0 ] int 
 10542 ;; Registers used:
 10543 ;;		wreg, status,2, status,0
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10549 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;Total ram usage:        7 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    3
 10556 ;; This function calls:
 10557 ;;		Nothing
 10558 ;; This function is called by:
 10559 ;;		_time_Display
 10560 ;;		_bin2bcd
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564                           
 10565                           ;psect for function ___awmod
 10566  0AC6                     ___awmod:	
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10570  0AC6  0020               	movlb	0	; select bank0
 10571  0AC7  01A7               	clrf	___awmod@sign
 10572  0AC8  1FA4               	btfss	___awmod@dividend+1,7
 10573  0AC9  2AD1               	goto	l5474
 10574  0ACA  09A3               	comf	___awmod@dividend,f
 10575  0ACB  09A4               	comf	___awmod@dividend+1,f
 10576  0ACC  0AA3               	incf	___awmod@dividend,f
 10577  0ACD  1903               	skipnz
 10578  0ACE  0AA4               	incf	___awmod@dividend+1,f
 10579  0ACF  01A7               	clrf	___awmod@sign
 10580  0AD0  0AA7               	incf	___awmod@sign,f
 10581  0AD1                     l5474:	
 10582  0AD1  1FA2               	btfss	___awmod@divisor+1,7
 10583  0AD2  2AD8               	goto	l5478
 10584  0AD3  09A1               	comf	___awmod@divisor,f
 10585  0AD4  09A2               	comf	___awmod@divisor+1,f
 10586  0AD5  0AA1               	incf	___awmod@divisor,f
 10587  0AD6  1903               	skipnz
 10588  0AD7  0AA2               	incf	___awmod@divisor+1,f
 10589  0AD8                     l5478:	
 10590  0AD8  0821               	movf	___awmod@divisor,w
 10591  0AD9  0422               	iorwf	___awmod@divisor+1,w
 10592  0ADA  1903               	btfsc	3,2
 10593  0ADB  2AFF               	goto	l5496
 10594  0ADC  01A6               	clrf	___awmod@counter
 10595  0ADD  0AA6               	incf	___awmod@counter,f
 10596  0ADE                     l5486:	
 10597  0ADE  1BA2               	btfsc	___awmod@divisor+1,7
 10598  0ADF  2AEA               	goto	l5488
 10599  0AE0  3001               	movlw	1
 10600  0AE1                     u4795:	
 10601  0AE1  35A1               	lslf	___awmod@divisor,f
 10602  0AE2  0DA2               	rlf	___awmod@divisor+1,f
 10603  0AE3  0B89               	decfsz	9,f
 10604  0AE4  2AE1               	goto	u4795
 10605  0AE5  3001               	movlw	1
 10606  0AE6  00A5               	movwf	??___awmod
 10607  0AE7  0825               	movf	??___awmod,w
 10608  0AE8  07A6               	addwf	___awmod@counter,f
 10609  0AE9  2ADE               	goto	l5486
 10610  0AEA                     l5488:	
 10611  0AEA  0822               	movf	___awmod@divisor+1,w
 10612  0AEB  0224               	subwf	___awmod@dividend+1,w
 10613  0AEC  1D03               	skipz
 10614  0AED  2AF0               	goto	u4815
 10615  0AEE  0821               	movf	___awmod@divisor,w
 10616  0AEF  0223               	subwf	___awmod@dividend,w
 10617  0AF0                     u4815:	
 10618  0AF0  1C03               	skipc
 10619  0AF1  2AF6               	goto	l5492
 10620  0AF2  0821               	movf	___awmod@divisor,w
 10621  0AF3  02A3               	subwf	___awmod@dividend,f
 10622  0AF4  0822               	movf	___awmod@divisor+1,w
 10623  0AF5  3BA4               	subwfb	___awmod@dividend+1,f
 10624  0AF6                     l5492:	
 10625  0AF6  3001               	movlw	1
 10626  0AF7                     u4825:	
 10627  0AF7  36A2               	lsrf	___awmod@divisor+1,f
 10628  0AF8  0CA1               	rrf	___awmod@divisor,f
 10629  0AF9  0B89               	decfsz	9,f
 10630  0AFA  2AF7               	goto	u4825
 10631  0AFB  3001               	movlw	1
 10632  0AFC  02A6               	subwf	___awmod@counter,f
 10633  0AFD  1D03               	btfss	3,2
 10634  0AFE  2AEA               	goto	l5488
 10635  0AFF                     l5496:	
 10636  0AFF  0827               	movf	___awmod@sign,w
 10637  0B00  1903               	btfsc	3,2
 10638  0B01  2B07               	goto	l5500
 10639  0B02  09A3               	comf	___awmod@dividend,f
 10640  0B03  09A4               	comf	___awmod@dividend+1,f
 10641  0B04  0AA3               	incf	___awmod@dividend,f
 10642  0B05  1903               	skipnz
 10643  0B06  0AA4               	incf	___awmod@dividend+1,f
 10644  0B07                     l5500:	
 10645  0B07  0824               	movf	___awmod@dividend+1,w
 10646  0B08  00A2               	movwf	?___awmod+1
 10647  0B09  0823               	movf	___awmod@dividend,w
 10648  0B0A  00A1               	movwf	?___awmod
 10649  0B0B  0008               	return
 10650  0B0C                     __end_of___awmod:	
 10651                           
 10652                           	psect	text54
 10653  0C45                     __ptext54:	
 10654 ;; *************** function ___awdiv *****************
 10655 ;; Defined at:
 10656 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 10657 ;; Parameters:    Size  Location     Type
 10658 ;;  divisor         2    1[BANK0 ] int 
 10659 ;;  dividend        2    3[BANK0 ] int 
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;  quotient        2    8[BANK0 ] int 
 10662 ;;  sign            1    7[BANK0 ] unsigned char 
 10663 ;;  counter         1    6[BANK0 ] unsigned char 
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  2    1[BANK0 ] int 
 10666 ;; Registers used:
 10667 ;;		wreg, status,2, status,0
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10673 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;Total ram usage:        9 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; Hardware stack levels required when called:    3
 10680 ;; This function calls:
 10681 ;;		Nothing
 10682 ;; This function is called by:
 10683 ;;		_time_Display
 10684 ;;		_bin2bcd
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           
 10689                           ;psect for function ___awdiv
 10690  0C45                     ___awdiv:	
 10691                           
 10692                           ;incstack = 0
 10693                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10694  0C45  0020               	movlb	0	; select bank0
 10695  0C46  01A7               	clrf	___awdiv@sign
 10696  0C47  1FA2               	btfss	___awdiv@divisor+1,7
 10697  0C48  2C50               	goto	l5430
 10698  0C49  09A1               	comf	___awdiv@divisor,f
 10699  0C4A  09A2               	comf	___awdiv@divisor+1,f
 10700  0C4B  0AA1               	incf	___awdiv@divisor,f
 10701  0C4C  1903               	skipnz
 10702  0C4D  0AA2               	incf	___awdiv@divisor+1,f
 10703  0C4E  01A7               	clrf	___awdiv@sign
 10704  0C4F  0AA7               	incf	___awdiv@sign,f
 10705  0C50                     l5430:	
 10706  0C50  1FA4               	btfss	___awdiv@dividend+1,7
 10707  0C51  2C5B               	goto	l5436
 10708  0C52  09A3               	comf	___awdiv@dividend,f
 10709  0C53  09A4               	comf	___awdiv@dividend+1,f
 10710  0C54  0AA3               	incf	___awdiv@dividend,f
 10711  0C55  1903               	skipnz
 10712  0C56  0AA4               	incf	___awdiv@dividend+1,f
 10713  0C57  3001               	movlw	1
 10714  0C58  00A5               	movwf	??___awdiv
 10715  0C59  0825               	movf	??___awdiv,w
 10716  0C5A  06A7               	xorwf	___awdiv@sign,f
 10717  0C5B                     l5436:	
 10718  0C5B  01A8               	clrf	___awdiv@quotient
 10719  0C5C  01A9               	clrf	___awdiv@quotient+1
 10720  0C5D  0821               	movf	___awdiv@divisor,w
 10721  0C5E  0422               	iorwf	___awdiv@divisor+1,w
 10722  0C5F  1903               	btfsc	3,2
 10723  0C60  2C8A               	goto	l5458
 10724  0C61  01A6               	clrf	___awdiv@counter
 10725  0C62  0AA6               	incf	___awdiv@counter,f
 10726  0C63                     l5446:	
 10727  0C63  1BA2               	btfsc	___awdiv@divisor+1,7
 10728  0C64  2C6F               	goto	l5448
 10729  0C65  3001               	movlw	1
 10730  0C66                     u4695:	
 10731  0C66  35A1               	lslf	___awdiv@divisor,f
 10732  0C67  0DA2               	rlf	___awdiv@divisor+1,f
 10733  0C68  0B89               	decfsz	9,f
 10734  0C69  2C66               	goto	u4695
 10735  0C6A  3001               	movlw	1
 10736  0C6B  00A5               	movwf	??___awdiv
 10737  0C6C  0825               	movf	??___awdiv,w
 10738  0C6D  07A6               	addwf	___awdiv@counter,f
 10739  0C6E  2C63               	goto	l5446
 10740  0C6F                     l5448:	
 10741  0C6F  3001               	movlw	1
 10742  0C70                     u4715:	
 10743  0C70  35A8               	lslf	___awdiv@quotient,f
 10744  0C71  0DA9               	rlf	___awdiv@quotient+1,f
 10745  0C72  0B89               	decfsz	9,f
 10746  0C73  2C70               	goto	u4715
 10747  0C74  0822               	movf	___awdiv@divisor+1,w
 10748  0C75  0224               	subwf	___awdiv@dividend+1,w
 10749  0C76  1D03               	skipz
 10750  0C77  2C7A               	goto	u4725
 10751  0C78  0821               	movf	___awdiv@divisor,w
 10752  0C79  0223               	subwf	___awdiv@dividend,w
 10753  0C7A                     u4725:	
 10754  0C7A  1C03               	skipc
 10755  0C7B  2C81               	goto	l5454
 10756  0C7C  0821               	movf	___awdiv@divisor,w
 10757  0C7D  02A3               	subwf	___awdiv@dividend,f
 10758  0C7E  0822               	movf	___awdiv@divisor+1,w
 10759  0C7F  3BA4               	subwfb	___awdiv@dividend+1,f
 10760  0C80  1428               	bsf	___awdiv@quotient,0
 10761  0C81                     l5454:	
 10762  0C81  3001               	movlw	1
 10763  0C82                     u4735:	
 10764  0C82  36A2               	lsrf	___awdiv@divisor+1,f
 10765  0C83  0CA1               	rrf	___awdiv@divisor,f
 10766  0C84  0B89               	decfsz	9,f
 10767  0C85  2C82               	goto	u4735
 10768  0C86  3001               	movlw	1
 10769  0C87  02A6               	subwf	___awdiv@counter,f
 10770  0C88  1D03               	btfss	3,2
 10771  0C89  2C6F               	goto	l5448
 10772  0C8A                     l5458:	
 10773  0C8A  0827               	movf	___awdiv@sign,w
 10774  0C8B  1903               	btfsc	3,2
 10775  0C8C  2C92               	goto	l5462
 10776  0C8D  09A8               	comf	___awdiv@quotient,f
 10777  0C8E  09A9               	comf	___awdiv@quotient+1,f
 10778  0C8F  0AA8               	incf	___awdiv@quotient,f
 10779  0C90  1903               	skipnz
 10780  0C91  0AA9               	incf	___awdiv@quotient+1,f
 10781  0C92                     l5462:	
 10782  0C92  0829               	movf	___awdiv@quotient+1,w
 10783  0C93  00A2               	movwf	?___awdiv+1
 10784  0C94  0828               	movf	___awdiv@quotient,w
 10785  0C95  00A1               	movwf	?___awdiv
 10786  0C96  0008               	return
 10787  0C97                     __end_of___awdiv:	
 10788                           
 10789                           	psect	text55
 10790  0CF7                     __ptext55:	
 10791 ;; *************** function _Bq32k_Rtc_Read_Time *****************
 10792 ;; Defined at:
 10793 ;;		line 34 in file "mcc_generated_files/bq32k.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;  p               1    wreg     PTR struct bq32k_regs
 10796 ;;		 -> rtc_tm(7), 
 10797 ;; Auto vars:     Size  Location     Type
 10798 ;;  p               1   21[BANK0 ] PTR struct bq32k_regs
 10799 ;;		 -> rtc_tm(7), 
 10800 ;;  temp           10   11[BANK0 ] unsigned char [10]
 10801 ;; Return value:  Size  Location     Type
 10802 ;;                  1    wreg      void 
 10803 ;; Registers used:
 10804 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10805 ;; Tracked objects:
 10806 ;;		On entry : 0/0
 10807 ;;		On exit  : 0/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;Total ram usage:       13 bytes
 10815 ;; Hardware stack levels used:    1
 10816 ;; Hardware stack levels required when called:    5
 10817 ;; This function calls:
 10818 ;;		_I2C_Read_Buffer
 10819 ;;		_bcd2bin
 10820 ;; This function is called by:
 10821 ;;		_time_Display
 10822 ;;		_Calculate_Time
 10823 ;;		_Save_Write_time
 10824 ;;		_Set_time_from_Com
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _Bq32k_Rtc_Read_Time
 10830  0CF7                     _Bq32k_Rtc_Read_Time:	
 10831                           
 10832                           ;incstack = 0
 10833                           ; Regs used in _Bq32k_Rtc_Read_Time: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10834                           ;Bq32k_Rtc_Read_Time@p stored from wreg
 10835  0CF7  0020               	movlb	0	; select bank0
 10836  0CF8  00B5               	movwf	Bq32k_Rtc_Read_Time@p
 10837                           
 10838                           ;bq32k.c: 36: unsigned char temp[10] ;
 10839                           ;bq32k.c: 37: I2C_Read_Buffer( 0 , temp , 7);
 10840  0CF9  302B               	movlw	(low (Bq32k_Rtc_Read_Time@temp| 0))& (0+255)
 10841  0CFA  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10842  0CFB  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10843  0CFC  00A4               	movwf	I2C_Read_Buffer@buff
 10844  0CFD  3007               	movlw	7
 10845  0CFE  00AA               	movwf	??_Bq32k_Rtc_Read_Time+1
 10846  0CFF  082A               	movf	??_Bq32k_Rtc_Read_Time+1,w
 10847  0D00  00A5               	movwf	I2C_Read_Buffer@Length
 10848  0D01  3000               	movlw	0
 10849  0D02  318F  270E  318C   	fcall	_I2C_Read_Buffer
 10850                           
 10851                           ;bq32k.c: 38: p->seconds = bcd2bin(temp[0] & 0x7F);
 10852  0D05  0020               	movlb	0	; select bank0
 10853  0D06  082B               	movf	Bq32k_Rtc_Read_Time@temp,w
 10854  0D07  397F               	andlw	127
 10855  0D08  3195  256D  318C   	fcall	_bcd2bin
 10856  0D0B  0020               	movlb	0	; select bank0
 10857  0D0C  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10858  0D0D  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10859  0D0E  0086               	movwf	6
 10860  0D0F  0187               	clrf	7
 10861  0D10  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10862  0D11  0081               	movwf	1
 10863                           
 10864                           ;bq32k.c: 39: p->minutes = bcd2bin(temp[1] & 0x7F);
 10865  0D12  082C               	movf	Bq32k_Rtc_Read_Time@temp+1,w
 10866  0D13  397F               	andlw	127
 10867  0D14  3195  256D  318C   	fcall	_bcd2bin
 10868  0D17  0020               	movlb	0	; select bank0
 10869  0D18  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10870  0D19  0A35               	incf	Bq32k_Rtc_Read_Time@p,w
 10871  0D1A  0086               	movwf	6
 10872  0D1B  0187               	clrf	7
 10873  0D1C  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10874  0D1D  0081               	movwf	1
 10875                           
 10876                           ;bq32k.c: 40: p->hours = bcd2bin(temp[2] & 0x3F);
 10877  0D1E  082D               	movf	Bq32k_Rtc_Read_Time@temp+2,w
 10878  0D1F  393F               	andlw	63
 10879  0D20  3195  256D  318C   	fcall	_bcd2bin
 10880  0D23  0020               	movlb	0	; select bank0
 10881  0D24  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10882  0D25  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10883  0D26  3E02               	addlw	2
 10884  0D27  0086               	movwf	6
 10885  0D28  0187               	clrf	7
 10886  0D29  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10887  0D2A  0081               	movwf	1
 10888                           
 10889                           ;bq32k.c: 41: p->wday = bcd2bin(temp[3]);
 10890  0D2B  082E               	movf	Bq32k_Rtc_Read_Time@temp+3,w
 10891  0D2C  3195  256D  318C   	fcall	_bcd2bin
 10892  0D2F  0020               	movlb	0	; select bank0
 10893  0D30  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10894  0D31  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10895  0D32  3E03               	addlw	3
 10896  0D33  0086               	movwf	6
 10897  0D34  0187               	clrf	7
 10898  0D35  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10899  0D36  0081               	movwf	1
 10900                           
 10901                           ;bq32k.c: 42: p->date = bcd2bin(temp[4]);
 10902  0D37  082F               	movf	Bq32k_Rtc_Read_Time@temp+4,w
 10903  0D38  3195  256D  318C   	fcall	_bcd2bin
 10904  0D3B  0020               	movlb	0	; select bank0
 10905  0D3C  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10906  0D3D  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10907  0D3E  3E04               	addlw	4
 10908  0D3F  0086               	movwf	6
 10909  0D40  0187               	clrf	7
 10910  0D41  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10911  0D42  0081               	movwf	1
 10912                           
 10913                           ;bq32k.c: 43: p->month = bcd2bin(temp[5]);
 10914  0D43  0830               	movf	Bq32k_Rtc_Read_Time@temp+5,w
 10915  0D44  3195  256D  318C   	fcall	_bcd2bin
 10916  0D47  0020               	movlb	0	; select bank0
 10917  0D48  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10918  0D49  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10919  0D4A  3E05               	addlw	5
 10920  0D4B  0086               	movwf	6
 10921  0D4C  0187               	clrf	7
 10922  0D4D  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10923  0D4E  0081               	movwf	1
 10924                           
 10925                           ;bq32k.c: 44: p->years= bcd2bin(temp[6]);
 10926  0D4F  0831               	movf	Bq32k_Rtc_Read_Time@temp+6,w
 10927  0D50  3195  256D         	fcall	_bcd2bin
 10928  0D52  0020               	movlb	0	; select bank0
 10929  0D53  00A9               	movwf	??_Bq32k_Rtc_Read_Time
 10930  0D54  0835               	movf	Bq32k_Rtc_Read_Time@p,w
 10931  0D55  3E06               	addlw	6
 10932  0D56  0086               	movwf	6
 10933  0D57  0187               	clrf	7
 10934  0D58  0829               	movf	??_Bq32k_Rtc_Read_Time,w
 10935  0D59  0081               	movwf	1
 10936  0D5A  0008               	return
 10937  0D5B                     __end_of_Bq32k_Rtc_Read_Time:	
 10938                           
 10939                           	psect	text56
 10940  156D                     __ptext56:	
 10941 ;; *************** function _bcd2bin *****************
 10942 ;; Defined at:
 10943 ;;		line 72 in file "mcc_generated_files/bq32k.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  val             1    wreg     unsigned char 
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;  val             1    8[BANK0 ] unsigned char 
 10948 ;; Return value:  Size  Location     Type
 10949 ;;                  1    wreg      unsigned char 
 10950 ;; Registers used:
 10951 ;;		wreg, status,2, status,0, pclath, cstack
 10952 ;; Tracked objects:
 10953 ;;		On entry : 0/0
 10954 ;;		On exit  : 0/0
 10955 ;;		Unchanged: 0/0
 10956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;Total ram usage:        4 bytes
 10962 ;; Hardware stack levels used:    1
 10963 ;; Hardware stack levels required when called:    4
 10964 ;; This function calls:
 10965 ;;		___bmul
 10966 ;; This function is called by:
 10967 ;;		_Bq32k_Rtc_Read_Time
 10968 ;; This function uses a non-reentrant model
 10969 ;;
 10970                           
 10971                           
 10972                           ;psect for function _bcd2bin
 10973  156D                     _bcd2bin:	
 10974                           
 10975                           ;incstack = 0
 10976                           ; Regs used in _bcd2bin: [wreg+status,2+status,0+pclath+cstack]
 10977                           ;bcd2bin@val stored from wreg
 10978  156D  0020               	movlb	0	; select bank0
 10979  156E  00A8               	movwf	bcd2bin@val
 10980                           
 10981                           ;bq32k.c: 74: return (val & 0x0f) + (val >> 4) * 10;
 10982  156F  300F               	movlw	15
 10983  1570  0528               	andwf	bcd2bin@val,w
 10984  1571  00A5               	movwf	??_bcd2bin
 10985  1572  300A               	movlw	10
 10986  1573  00A6               	movwf	??_bcd2bin+1
 10987  1574  0826               	movf	??_bcd2bin+1,w
 10988  1575  00A1               	movwf	___bmul@multiplicand
 10989  1576  0828               	movf	bcd2bin@val,w
 10990  1577  00A7               	movwf	??_bcd2bin+2
 10991  1578  3004               	movlw	4
 10992  1579                     u4365:	
 10993  1579  36A7               	lsrf	??_bcd2bin+2,f
 10994  157A  0B89               	decfsz	9,f
 10995  157B  2D79               	goto	u4365
 10996  157C  0827               	movf	??_bcd2bin+2,w
 10997  157D  3195  255B         	fcall	___bmul
 10998  157F  0020               	movlb	0	; select bank0
 10999  1580  0725               	addwf	??_bcd2bin,w
 11000  1581  0008               	return
 11001  1582                     __end_of_bcd2bin:	
 11002                           
 11003                           	psect	text57
 11004  155B                     __ptext57:	
 11005 ;; *************** function ___bmul *****************
 11006 ;; Defined at:
 11007 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 11008 ;; Parameters:    Size  Location     Type
 11009 ;;  multiplier      1    wreg     unsigned char 
 11010 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 11011 ;; Auto vars:     Size  Location     Type
 11012 ;;  multiplier      1    4[BANK0 ] unsigned char 
 11013 ;;  product         1    3[BANK0 ] unsigned char 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  1    wreg      unsigned char 
 11016 ;; Registers used:
 11017 ;;		wreg, status,2, status,0
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11023 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;Total ram usage:        4 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    3
 11030 ;; This function calls:
 11031 ;;		Nothing
 11032 ;; This function is called by:
 11033 ;;		_bcd2bin
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           
 11038                           ;psect for function ___bmul
 11039  155B                     ___bmul:	
 11040                           
 11041                           ;incstack = 0
 11042                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11043                           ;___bmul@multiplier stored from wreg
 11044  155B  0020               	movlb	0	; select bank0
 11045  155C  00A4               	movwf	___bmul@multiplier
 11046  155D  01A3               	clrf	___bmul@product
 11047  155E                     l5074:	
 11048  155E  1C24               	btfss	___bmul@multiplier,0
 11049  155F  2D64               	goto	l5078
 11050  1560  0821               	movf	___bmul@multiplicand,w
 11051  1561  00A2               	movwf	??___bmul
 11052  1562  0822               	movf	??___bmul,w
 11053  1563  07A3               	addwf	___bmul@product,f
 11054  1564                     l5078:	
 11055  1564  1003               	clrc
 11056  1565  0DA1               	rlf	___bmul@multiplicand,f
 11057  1566  1003               	clrc
 11058  1567  0CA4               	rrf	___bmul@multiplier,f
 11059  1568  0824               	movf	___bmul@multiplier,w
 11060  1569  1D03               	btfss	3,2
 11061  156A  2D5E               	goto	l5074
 11062  156B  0823               	movf	___bmul@product,w
 11063  156C  0008               	return
 11064  156D                     __end_of___bmul:	
 11065                           
 11066                           	psect	text58
 11067  0F0E                     __ptext58:	
 11068 ;; *************** function _I2C_Read_Buffer *****************
 11069 ;; Defined at:
 11070 ;;		line 120 in file "mcc_generated_files/i2c.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;  ADD             1    wreg     unsigned char 
 11073 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 11074 ;;		 -> Bq32k_Rtc_Read_Time@temp(10), 
 11075 ;;  Length          1    5[BANK0 ] unsigned char 
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;  ADD             1    7[BANK0 ] unsigned char 
 11078 ;;  Flag            1    8[BANK0 ] unsigned char 
 11079 ;; Return value:  Size  Location     Type
 11080 ;;                  1    wreg      unsigned char 
 11081 ;; Registers used:
 11082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11083 ;; Tracked objects:
 11084 ;;		On entry : 0/0
 11085 ;;		On exit  : 0/0
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11088 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;Total ram usage:        5 bytes
 11093 ;; Hardware stack levels used:    1
 11094 ;; Hardware stack levels required when called:    4
 11095 ;; This function calls:
 11096 ;;		_I2C_Receive_Byte
 11097 ;;		_I2C_Send_Byte
 11098 ;;		_I2C_Start
 11099 ;;		_I2C_Stop
 11100 ;; This function is called by:
 11101 ;;		_Bq32k_Rtc_Read_Time
 11102 ;; This function uses a non-reentrant model
 11103 ;;
 11104                           
 11105                           
 11106                           ;psect for function _I2C_Read_Buffer
 11107  0F0E                     _I2C_Read_Buffer:	
 11108                           
 11109                           ;incstack = 0
 11110                           ; Regs used in _I2C_Read_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11111                           ;I2C_Read_Buffer@ADD stored from wreg
 11112  0F0E  0020               	movlb	0	; select bank0
 11113  0F0F  00A7               	movwf	I2C_Read_Buffer@ADD
 11114                           
 11115                           ;i2c.c: 122: unsigned char Flag=1;
 11116  0F10  01A8               	clrf	I2C_Read_Buffer@Flag
 11117  0F11  0AA8               	incf	I2C_Read_Buffer@Flag,f
 11118                           
 11119                           ;i2c.c: 124: I2C_Start();
 11120  0F12  3196  2680  318F   	fcall	_I2C_Start
 11121                           
 11122                           ;i2c.c: 126: Flag=I2C_Send_Byte(0XD0);
 11123  0F15  30D0               	movlw	208
 11124  0F16  3187  27A3  318F   	fcall	_I2C_Send_Byte
 11125  0F19  0020               	movlb	0	; select bank0
 11126  0F1A  00A6               	movwf	??_I2C_Read_Buffer
 11127  0F1B  0826               	movf	??_I2C_Read_Buffer,w
 11128  0F1C  00A8               	movwf	I2C_Read_Buffer@Flag
 11129                           
 11130                           ;i2c.c: 127: if(Flag)
 11131  0F1D  0828               	movf	I2C_Read_Buffer@Flag,w
 11132  0F1E  1D03               	btfss	3,2
 11133  0F1F  0008               	return
 11134                           
 11135                           ;i2c.c: 130: Flag=I2C_Send_Byte(ADD);
 11136                           
 11137                           ;i2c.c: 128: return 0x01;
 11138                           ;	Return value of _I2C_Read_Buffer is never used
 11139  0F20  0827               	movf	I2C_Read_Buffer@ADD,w
 11140  0F21  3187  27A3  318F   	fcall	_I2C_Send_Byte
 11141  0F24  0020               	movlb	0	; select bank0
 11142  0F25  00A6               	movwf	??_I2C_Read_Buffer
 11143  0F26  0826               	movf	??_I2C_Read_Buffer,w
 11144  0F27  00A8               	movwf	I2C_Read_Buffer@Flag
 11145                           
 11146                           ;i2c.c: 131: if(Flag)
 11147  0F28  0828               	movf	I2C_Read_Buffer@Flag,w
 11148  0F29  1D03               	btfss	3,2
 11149  0F2A  0008               	return
 11150                           
 11151                           ;i2c.c: 134: I2C_Start();
 11152                           
 11153                           ;i2c.c: 132: return 0x01;
 11154                           ;	Return value of _I2C_Read_Buffer is never used
 11155  0F2B  3196  2680  318F   	fcall	_I2C_Start
 11156                           
 11157                           ;i2c.c: 135: Flag=I2C_Send_Byte(0XD0+1);
 11158  0F2E  30D1               	movlw	209
 11159  0F2F  3187  27A3  318F   	fcall	_I2C_Send_Byte
 11160  0F32  0020               	movlb	0	; select bank0
 11161  0F33  00A6               	movwf	??_I2C_Read_Buffer
 11162  0F34  0826               	movf	??_I2C_Read_Buffer,w
 11163  0F35  00A8               	movwf	I2C_Read_Buffer@Flag
 11164                           
 11165                           ;i2c.c: 136: if(Flag)
 11166  0F36  0828               	movf	I2C_Read_Buffer@Flag,w
 11167  0F37  1D03               	btfss	3,2
 11168  0F38  0008               	return
 11169  0F39                     l5180:	
 11170  0F39  3002               	movlw	2
 11171  0F3A  0225               	subwf	I2C_Read_Buffer@Length,w
 11172  0F3B  1C03               	btfss	3,0
 11173  0F3C  2F64               	goto	l5182
 11174                           
 11175                           ;i2c.c: 140: {
 11176                           ;i2c.c: 141: *buff = I2C_Receive_Byte();
 11177                           
 11178                           ;i2c.c: 139: while(Length>1)
 11179                           
 11180                           ;i2c.c: 137: return 0x01;
 11181                           ;	Return value of _I2C_Read_Buffer is never used
 11182  0F3D  3188  20DB  318F   	fcall	_I2C_Receive_Byte
 11183  0F40  0020               	movlb	0	; select bank0
 11184  0F41  00A6               	movwf	??_I2C_Read_Buffer
 11185  0F42  0824               	movf	I2C_Read_Buffer@buff,w
 11186  0F43  0086               	movwf	6
 11187  0F44  0187               	clrf	7
 11188  0F45  0826               	movf	??_I2C_Read_Buffer,w
 11189  0F46  0081               	movwf	1
 11190                           
 11191                           ;i2c.c: 143: do { LATB1 = 0; } while(0);
 11192  0F47  0022               	movlb	2	; select bank2
 11193  0F48  108D               	bcf	13,1	;volatile
 11194                           
 11195                           ;i2c.c: 144: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11196  0F49  3003               	movlw	3
 11197  0F4A  0020               	movlb	0	; select bank0
 11198  0F4B  00A6               	movwf	??_I2C_Read_Buffer
 11199  0F4C                     u6107:	
 11200  0F4C  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11201  0F4D  2F4C               	goto	u6107
 11202                           
 11203                           ;i2c.c: 145: do { LATB0 = 1; } while(0);
 11204  0F4E  0022               	movlb	2	; select bank2
 11205  0F4F  140D               	bsf	13,0	;volatile
 11206                           
 11207                           ;i2c.c: 146: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11208  0F50  3003               	movlw	3
 11209  0F51  0020               	movlb	0	; select bank0
 11210  0F52  00A6               	movwf	??_I2C_Read_Buffer
 11211  0F53                     u6117:	
 11212  0F53  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11213  0F54  2F53               	goto	u6117
 11214                           
 11215                           ;i2c.c: 147: do { LATB0 = 0; } while(0);
 11216  0F55  0022               	movlb	2	; select bank2
 11217  0F56  100D               	bcf	13,0	;volatile
 11218                           
 11219                           ;i2c.c: 148: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11220  0F57  3003               	movlw	3
 11221  0F58  0020               	movlb	0	; select bank0
 11222  0F59  00A6               	movwf	??_I2C_Read_Buffer
 11223  0F5A                     u6127:	
 11224  0F5A  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11225  0F5B  2F5A               	goto	u6127
 11226                           
 11227                           ;i2c.c: 150: buff++;
 11228  0F5C  3001               	movlw	1
 11229  0F5D  0020               	movlb	0	; select bank0
 11230  0F5E  00A6               	movwf	??_I2C_Read_Buffer
 11231  0F5F  0826               	movf	??_I2C_Read_Buffer,w
 11232  0F60  07A4               	addwf	I2C_Read_Buffer@buff,f
 11233                           
 11234                           ;i2c.c: 151: Length--;
 11235  0F61  3001               	movlw	1
 11236  0F62  02A5               	subwf	I2C_Read_Buffer@Length,f
 11237  0F63  2F39               	goto	l5180
 11238  0F64                     l5182:	
 11239                           
 11240                           ;i2c.c: 152: }
 11241                           ;i2c.c: 153: *buff = I2C_Receive_Byte();
 11242  0F64  3188  20DB  318F   	fcall	_I2C_Receive_Byte
 11243  0F67  0020               	movlb	0	; select bank0
 11244  0F68  00A6               	movwf	??_I2C_Read_Buffer
 11245  0F69  0824               	movf	I2C_Read_Buffer@buff,w
 11246  0F6A  0086               	movwf	6
 11247  0F6B  0187               	clrf	7
 11248  0F6C  0826               	movf	??_I2C_Read_Buffer,w
 11249  0F6D  0081               	movwf	1
 11250                           
 11251                           ;i2c.c: 155: do { LATB1 = 1; } while(0);
 11252  0F6E  0022               	movlb	2	; select bank2
 11253  0F6F  148D               	bsf	13,1	;volatile
 11254                           
 11255                           ;i2c.c: 156: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11256  0F70  3003               	movlw	3
 11257  0F71  0020               	movlb	0	; select bank0
 11258  0F72  00A6               	movwf	??_I2C_Read_Buffer
 11259  0F73                     u6137:	
 11260  0F73  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11261  0F74  2F73               	goto	u6137
 11262                           
 11263                           ;i2c.c: 157: do { LATB0 = 1; } while(0);
 11264  0F75  0022               	movlb	2	; select bank2
 11265  0F76  140D               	bsf	13,0	;volatile
 11266                           
 11267                           ;i2c.c: 158: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11268  0F77  3003               	movlw	3
 11269  0F78  0020               	movlb	0	; select bank0
 11270  0F79  00A6               	movwf	??_I2C_Read_Buffer
 11271  0F7A                     u6147:	
 11272  0F7A  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11273  0F7B  2F7A               	goto	u6147
 11274                           
 11275                           ;i2c.c: 159: do { LATB0 = 0; } while(0);
 11276  0F7C  0022               	movlb	2	; select bank2
 11277  0F7D  100D               	bcf	13,0	;volatile
 11278                           
 11279                           ;i2c.c: 160: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11280  0F7E  3003               	movlw	3
 11281  0F7F  0020               	movlb	0	; select bank0
 11282  0F80  00A6               	movwf	??_I2C_Read_Buffer
 11283  0F81                     u6157:	
 11284  0F81  0BA6               	decfsz	??_I2C_Read_Buffer,f
 11285  0F82  2F81               	goto	u6157
 11286                           
 11287                           ;i2c.c: 162: I2C_Stop();
 11288  0F83  3196  269D         	fcall	_I2C_Stop
 11289  0F85  0008               	return
 11290  0F86                     __end_of_I2C_Read_Buffer:	
 11291                           ;i2c.c: 164: return 0x00;
 11292                           ;	Return value of _I2C_Read_Buffer is never used
 11293                           
 11294                           
 11295                           	psect	text59
 11296  08DB                     __ptext59:	
 11297 ;; *************** function _I2C_Receive_Byte *****************
 11298 ;; Defined at:
 11299 ;;		line 74 in file "mcc_generated_files/i2c.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;		None
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;  i               1    3[BANK0 ] unsigned char 
 11304 ;;  Data            1    2[BANK0 ] unsigned char 
 11305 ;; Return value:  Size  Location     Type
 11306 ;;                  1    wreg      unsigned char 
 11307 ;; Registers used:
 11308 ;;		wreg, status,2, status,0
 11309 ;; Tracked objects:
 11310 ;;		On entry : 0/0
 11311 ;;		On exit  : 0/0
 11312 ;;		Unchanged: 0/0
 11313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;Total ram usage:        3 bytes
 11319 ;; Hardware stack levels used:    1
 11320 ;; Hardware stack levels required when called:    3
 11321 ;; This function calls:
 11322 ;;		Nothing
 11323 ;; This function is called by:
 11324 ;;		_I2C_Read_Buffer
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           
 11329                           ;psect for function _I2C_Receive_Byte
 11330  08DB                     _I2C_Receive_Byte:	
 11331                           
 11332                           ;i2c.c: 76: unsigned char i,Data=0;
 11333                           
 11334                           ;incstack = 0
 11335                           ; Regs used in _I2C_Receive_Byte: [wreg+status,2+status,0]
 11336  08DB  0020               	movlb	0	; select bank0
 11337  08DC  01A2               	clrf	I2C_Receive_Byte@Data
 11338                           
 11339                           ;i2c.c: 77: do { LATB1 = 1; } while(0);
 11340  08DD  0022               	movlb	2	; select bank2
 11341  08DE  148D               	bsf	13,1	;volatile
 11342                           
 11343                           ;i2c.c: 78: for(i=0;i<8;i++)
 11344  08DF  0020               	movlb	0	; select bank0
 11345  08E0  01A3               	clrf	I2C_Receive_Byte@i
 11346  08E1  3008               	movlw	8
 11347  08E2  0223               	subwf	I2C_Receive_Byte@i,w
 11348  08E3  1803               	btfsc	3,0
 11349  08E4  2909               	goto	l5060
 11350                           
 11351                           ;i2c.c: 79: {
 11352                           ;i2c.c: 80: Data <<= 1;
 11353  08E5  1003               	clrc
 11354  08E6                     L12:	
 11355  08E6  0DA2               	rlf	I2C_Receive_Byte@Data,f
 11356                           
 11357                           ;i2c.c: 81: do { LATB0 = 1; } while(0);
 11358  08E7  0022               	movlb	2	; select bank2
 11359  08E8  140D               	bsf	13,0	;volatile
 11360                           
 11361                           ;i2c.c: 82: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11362  08E9  3003               	movlw	3
 11363  08EA  0020               	movlb	0	; select bank0
 11364  08EB  00A1               	movwf	??_I2C_Receive_Byte
 11365  08EC                     u6167:	
 11366  08EC  0BA1               	decfsz	??_I2C_Receive_Byte,f
 11367  08ED  28EC               	goto	u6167
 11368                           
 11369                           ;i2c.c: 83: do { TRISB1 = 1; } while(0);
 11370  08EE  0021               	movlb	1	; select bank1
 11371  08EF  148D               	bsf	13,1	;volatile
 11372                           
 11373                           ;i2c.c: 84: if(RB1)
 11374  08F0  0020               	movlb	0	; select bank0
 11375  08F1  1C8D               	btfss	13,1	;volatile
 11376  08F2  28F7               	goto	l858
 11377                           
 11378                           ;i2c.c: 85: {
 11379                           ;i2c.c: 86: do { TRISB1 = 0; } while(0);
 11380  08F3  0021               	movlb	1	; select bank1
 11381  08F4  108D               	bcf	13,1	;volatile
 11382                           
 11383                           ;i2c.c: 87: Data |= 0x01;
 11384  08F5  0020               	movlb	0	; select bank0
 11385  08F6  1422               	bsf	I2C_Receive_Byte@Data,0
 11386  08F7                     l858:	
 11387                           ;i2c.c: 88: }
 11388                           ;i2c.c: 89: do { TRISB1 = 0; } while(0);
 11389                           
 11390  08F7  0021               	movlb	1	; select bank1
 11391  08F8  108D               	bcf	13,1	;volatile
 11392                           
 11393                           ;i2c.c: 90: do { LATB0 = 0; } while(0);
 11394  08F9  0022               	movlb	2	; select bank2
 11395  08FA  100D               	bcf	13,0	;volatile
 11396                           
 11397                           ;i2c.c: 91: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11398  08FB  3003               	movlw	3
 11399  08FC  0020               	movlb	0	; select bank0
 11400  08FD  00A1               	movwf	??_I2C_Receive_Byte
 11401  08FE                     u6177:	
 11402  08FE  0BA1               	decfsz	??_I2C_Receive_Byte,f
 11403  08FF  28FE               	goto	u6177
 11404  0900  3001               	movlw	1
 11405  0901  0020               	movlb	0	; select bank0
 11406  0902  00A1               	movwf	??_I2C_Receive_Byte
 11407  0903  0821               	movf	??_I2C_Receive_Byte,w
 11408  0904  07A3               	addwf	I2C_Receive_Byte@i,f
 11409  0905  3008               	movlw	8
 11410  0906  0223               	subwf	I2C_Receive_Byte@i,w
 11411  0907  1C03               	skipc
 11412  0908  28E6               	goto	L12
 11413  0909                     l5060:	
 11414                           
 11415                           ;i2c.c: 92: }
 11416                           ;i2c.c: 93: return Data;
 11417  0909  0822               	movf	I2C_Receive_Byte@Data,w
 11418  090A  0008               	return
 11419  090B                     __end_of_I2C_Receive_Byte:	
 11420                           
 11421                           	psect	text60
 11422  093C                     __ptext60:	
 11423 ;; *************** function _Bq32k_Time_Init *****************
 11424 ;; Defined at:
 11425 ;;		line 17 in file "mcc_generated_files/bq32k.c"
 11426 ;; Parameters:    Size  Location     Type
 11427 ;;		None
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;  temp           10   13[BANK0 ] unsigned char [10]
 11430 ;;  time            7    0        struct bq32k_regs
 11431 ;; Return value:  Size  Location     Type
 11432 ;;                  1    wreg      void 
 11433 ;; Registers used:
 11434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11435 ;; Tracked objects:
 11436 ;;		On entry : 0/0
 11437 ;;		On exit  : 0/0
 11438 ;;		Unchanged: 0/0
 11439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;Total ram usage:       12 bytes
 11445 ;; Hardware stack levels used:    1
 11446 ;; Hardware stack levels required when called:    5
 11447 ;; This function calls:
 11448 ;;		_FLASH_ReadWord
 11449 ;;		_FLASH_WriteWord
 11450 ;;		_I2C_Send_Buffer
 11451 ;; This function is called by:
 11452 ;;		_main
 11453 ;; This function uses a non-reentrant model
 11454 ;;
 11455                           
 11456                           
 11457                           ;psect for function _Bq32k_Time_Init
 11458  093C                     _Bq32k_Time_Init:	
 11459                           
 11460                           ;bq32k.c: 19: bq32k_t time;
 11461                           ;bq32k.c: 20: unsigned char temp[10] = { 0x01,0x44,0x10,0x02,0x18,0x07,0x16 };
 11462                           
 11463                           ;incstack = 0
 11464                           ; Regs used in _Bq32k_Time_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11465  093C  3054               	movlw	low Bq32k_Time_Init@F2027
 11466  093D  0086               	movwf	6
 11467  093E  3001               	movlw	high Bq32k_Time_Init@F2027
 11468  093F  0087               	movwf	7
 11469  0940  302D               	movlw	low Bq32k_Time_Init@temp
 11470  0941  0084               	movwf	4
 11471  0942  3000               	movlw	high Bq32k_Time_Init@temp
 11472  0943  0085               	movwf	5
 11473  0944  300A               	movlw	10
 11474  0945  0020               	movlb	0	; select bank0
 11475  0946  00AB               	movwf	??_Bq32k_Time_Init
 11476  0947                     u5610:	
 11477  0947  0016               	moviw fsr1++
 11478  0948  001A               	movwi fsr0++
 11479  0949  0BAB               	decfsz	??_Bq32k_Time_Init,f
 11480  094A  2947               	goto	u5610
 11481                           
 11482                           ;bq32k.c: 21: if( FLASH_ReadWord(0x1fff) == 0x3fff )
 11483  094B  30FF               	movlw	255
 11484  094C  00A1               	movwf	FLASH_ReadWord@flashAddr
 11485  094D  301F               	movlw	31
 11486  094E  00A2               	movwf	FLASH_ReadWord@flashAddr+1
 11487  094F  3196  26F7  3189   	fcall	_FLASH_ReadWord
 11488  0952  0020               	movlb	0	; select bank0
 11489  0953  0A21               	incf	?_FLASH_ReadWord,w
 11490  0954  303F               	movlw	63
 11491  0955  1903               	skipnz
 11492  0956  0622               	xorwf	?_FLASH_ReadWord+1,w
 11493  0957  1D03               	btfss	3,2
 11494  0958  0008               	return
 11495                           
 11496                           ;bq32k.c: 22: {
 11497                           ;bq32k.c: 23: I2C_Send_Buffer(0, temp, 7);
 11498  0959  302D               	movlw	(low (Bq32k_Time_Init@temp| 0))& (0+255)
 11499  095A  00AB               	movwf	??_Bq32k_Time_Init
 11500  095B  082B               	movf	??_Bq32k_Time_Init,w
 11501  095C  00A4               	movwf	I2C_Send_Buffer@buff
 11502  095D  3007               	movlw	7
 11503  095E  00AC               	movwf	??_Bq32k_Time_Init+1
 11504  095F  082C               	movf	??_Bq32k_Time_Init+1,w
 11505  0960  00A5               	movwf	I2C_Send_Buffer@Length
 11506  0961  3000               	movlw	0
 11507  0962  318A  2211  3189   	fcall	_I2C_Send_Buffer
 11508                           
 11509                           ;bq32k.c: 24: FLASH_WriteWord(0x1fff, 0x00);
 11510  0965  30FF               	movlw	255
 11511  0966  0020               	movlb	0	; select bank0
 11512  0967  00A1               	movwf	FLASH_WriteWord@flashAddr
 11513  0968  301F               	movlw	31
 11514  0969  00A2               	movwf	FLASH_WriteWord@flashAddr+1
 11515  096A  3000               	movlw	0
 11516  096B  00A3               	movwf	FLASH_WriteWord@word
 11517  096C  00A4               	movwf	FLASH_WriteWord@word+1
 11518  096D  3188  2029         	fcall	_FLASH_WriteWord
 11519  096F  0008               	return
 11520  0970                     __end_of_Bq32k_Time_Init:	
 11521                           
 11522                           	psect	text61
 11523  0A11                     __ptext61:	
 11524 ;; *************** function _I2C_Send_Buffer *****************
 11525 ;; Defined at:
 11526 ;;		line 173 in file "mcc_generated_files/i2c.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;  ADD             1    wreg     unsigned char 
 11529 ;;  buff            1    4[BANK0 ] PTR unsigned char 
 11530 ;;		 -> Bq32k_Rtc_Write_Time@temp(10), Bq32k_Time_Init@temp(10), 
 11531 ;;  Length          1    5[BANK0 ] unsigned char 
 11532 ;; Auto vars:     Size  Location     Type
 11533 ;;  ADD             1    8[BANK0 ] unsigned char 
 11534 ;;  Flag            1   10[BANK0 ] unsigned char 
 11535 ;;  i               1    9[BANK0 ] unsigned char 
 11536 ;; Return value:  Size  Location     Type
 11537 ;;                  1    wreg      unsigned char 
 11538 ;; Registers used:
 11539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11540 ;; Tracked objects:
 11541 ;;		On entry : 0/0
 11542 ;;		On exit  : 0/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11545 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;Total ram usage:        7 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; Hardware stack levels required when called:    4
 11552 ;; This function calls:
 11553 ;;		_I2C_Send_Byte
 11554 ;;		_I2C_Start
 11555 ;;		_I2C_Stop
 11556 ;; This function is called by:
 11557 ;;		_Bq32k_Time_Init
 11558 ;;		_Bq32k_Rtc_Write_Time
 11559 ;; This function uses a non-reentrant model
 11560 ;;
 11561                           
 11562                           
 11563                           ;psect for function _I2C_Send_Buffer
 11564  0A11                     _I2C_Send_Buffer:	
 11565                           
 11566                           ;incstack = 0
 11567                           ; Regs used in _I2C_Send_Buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11568                           ;I2C_Send_Buffer@ADD stored from wreg
 11569  0A11  0020               	movlb	0	; select bank0
 11570  0A12  00A8               	movwf	I2C_Send_Buffer@ADD
 11571                           
 11572                           ;i2c.c: 175: unsigned char Flag=1;
 11573  0A13  01AA               	clrf	I2C_Send_Buffer@Flag
 11574  0A14  0AAA               	incf	I2C_Send_Buffer@Flag,f
 11575                           
 11576                           ;i2c.c: 176: unsigned char i;
 11577                           ;i2c.c: 178: I2C_Start();
 11578  0A15  3196  2680  318A   	fcall	_I2C_Start
 11579                           
 11580                           ;i2c.c: 180: Flag=I2C_Send_Byte(0XD0);
 11581  0A18  30D0               	movlw	208
 11582  0A19  3187  27A3  318A   	fcall	_I2C_Send_Byte
 11583  0A1C  0020               	movlb	0	; select bank0
 11584  0A1D  00A6               	movwf	??_I2C_Send_Buffer
 11585  0A1E  0826               	movf	??_I2C_Send_Buffer,w
 11586  0A1F  00AA               	movwf	I2C_Send_Buffer@Flag
 11587                           
 11588                           ;i2c.c: 181: if(Flag)
 11589  0A20  082A               	movf	I2C_Send_Buffer@Flag,w
 11590  0A21  1D03               	btfss	3,2
 11591  0A22  0008               	return
 11592                           
 11593                           ;i2c.c: 184: Flag=I2C_Send_Byte( ADD );
 11594                           
 11595                           ;i2c.c: 182: return 0x01;
 11596                           ;	Return value of _I2C_Send_Buffer is never used
 11597  0A23  0828               	movf	I2C_Send_Buffer@ADD,w
 11598  0A24  3187  27A3  318A   	fcall	_I2C_Send_Byte
 11599  0A27  0020               	movlb	0	; select bank0
 11600  0A28  00A6               	movwf	??_I2C_Send_Buffer
 11601  0A29  0826               	movf	??_I2C_Send_Buffer,w
 11602  0A2A  00AA               	movwf	I2C_Send_Buffer@Flag
 11603                           
 11604                           ;i2c.c: 185: if(Flag)
 11605  0A2B  082A               	movf	I2C_Send_Buffer@Flag,w
 11606  0A2C  1D03               	btfss	3,2
 11607  0A2D  0008               	return
 11608                           
 11609                           ;i2c.c: 188: for (i = 0; i<Length; i++)
 11610                           
 11611                           ;i2c.c: 186: return 0x01;
 11612                           ;	Return value of _I2C_Send_Buffer is never used
 11613  0A2E  01A9               	clrf	I2C_Send_Buffer@i
 11614  0A2F                     l5780:	
 11615  0A2F  0825               	movf	I2C_Send_Buffer@Length,w
 11616  0A30  0229               	subwf	I2C_Send_Buffer@i,w
 11617  0A31  1803               	btfsc	3,0
 11618  0A32  2A49               	goto	l5782
 11619                           
 11620                           ;i2c.c: 189: {
 11621                           ;i2c.c: 190: Flag=I2C_Send_Byte(*(buff+i));
 11622  0A33  0829               	movf	I2C_Send_Buffer@i,w
 11623  0A34  0724               	addwf	I2C_Send_Buffer@buff,w
 11624  0A35  00A6               	movwf	??_I2C_Send_Buffer
 11625  0A36  0826               	movf	??_I2C_Send_Buffer,w
 11626  0A37  0086               	movwf	6
 11627  0A38  0187               	clrf	7
 11628  0A39  0801               	movf	1,w
 11629  0A3A  3187  27A3  318A   	fcall	_I2C_Send_Byte
 11630  0A3D  0020               	movlb	0	; select bank0
 11631  0A3E  00A7               	movwf	??_I2C_Send_Buffer+1
 11632  0A3F  0827               	movf	??_I2C_Send_Buffer+1,w
 11633  0A40  00AA               	movwf	I2C_Send_Buffer@Flag
 11634                           
 11635                           ;i2c.c: 191: if(Flag)
 11636  0A41  082A               	movf	I2C_Send_Buffer@Flag,w
 11637  0A42  1D03               	btfss	3,2
 11638  0A43  0008               	return
 11639                           
 11640                           ;i2c.c: 192: return 0x01;
 11641                           ;	Return value of _I2C_Send_Buffer is never used
 11642  0A44  3001               	movlw	1
 11643  0A45  00A6               	movwf	??_I2C_Send_Buffer
 11644  0A46  0826               	movf	??_I2C_Send_Buffer,w
 11645  0A47  07A9               	addwf	I2C_Send_Buffer@i,f
 11646  0A48  2A2F               	goto	l5780
 11647  0A49                     l5782:	
 11648                           
 11649                           ;i2c.c: 193: }
 11650                           ;i2c.c: 194: I2C_Stop();
 11651  0A49  3196  269D         	fcall	_I2C_Stop
 11652  0A4B  0008               	return
 11653  0A4C                     __end_of_I2C_Send_Buffer:	
 11654                           ;i2c.c: 195: return 0x00;
 11655                           ;	Return value of _I2C_Send_Buffer is never used
 11656                           
 11657                           
 11658                           	psect	text62
 11659  169D                     __ptext62:	
 11660 ;; *************** function _I2C_Stop *****************
 11661 ;; Defined at:
 11662 ;;		line 102 in file "mcc_generated_files/i2c.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;		None
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  1    wreg      void 
 11669 ;; Registers used:
 11670 ;;		wreg
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;Total ram usage:        1 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    3
 11683 ;; This function calls:
 11684 ;;		Nothing
 11685 ;; This function is called by:
 11686 ;;		_I2C_Read_Buffer
 11687 ;;		_I2C_Send_Buffer
 11688 ;; This function uses a non-reentrant model
 11689 ;;
 11690                           
 11691                           
 11692                           ;psect for function _I2C_Stop
 11693  169D                     _I2C_Stop:	
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in _I2C_Stop: [wreg]
 11697                           ;i2c.c: 104: do { LATB0 = 0; } while(0);
 11698  169D  0022               	movlb	2	; select bank2
 11699  169E  100D               	bcf	13,0	;volatile
 11700                           
 11701                           ;i2c.c: 105: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11702  169F  3003               	movlw	3
 11703  16A0  0020               	movlb	0	; select bank0
 11704  16A1  00A1               	movwf	??_I2C_Stop
 11705  16A2                     u6187:	
 11706  16A2  0BA1               	decfsz	??_I2C_Stop,f
 11707  16A3  2EA2               	goto	u6187
 11708                           
 11709                           ;i2c.c: 106: do { LATB1 = 0; } while(0);
 11710  16A4  0022               	movlb	2	; select bank2
 11711  16A5  108D               	bcf	13,1	;volatile
 11712                           
 11713                           ;i2c.c: 107: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11714  16A6  3003               	movlw	3
 11715  16A7  0020               	movlb	0	; select bank0
 11716  16A8  00A1               	movwf	??_I2C_Stop
 11717  16A9                     u6197:	
 11718  16A9  0BA1               	decfsz	??_I2C_Stop,f
 11719  16AA  2EA9               	goto	u6197
 11720                           
 11721                           ;i2c.c: 108: do { LATB0 = 1; } while(0);
 11722  16AB  0022               	movlb	2	; select bank2
 11723  16AC  140D               	bsf	13,0	;volatile
 11724                           
 11725                           ;i2c.c: 109: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11726  16AD  3003               	movlw	3
 11727  16AE  0020               	movlb	0	; select bank0
 11728  16AF  00A1               	movwf	??_I2C_Stop
 11729  16B0                     u6207:	
 11730  16B0  0BA1               	decfsz	??_I2C_Stop,f
 11731  16B1  2EB0               	goto	u6207
 11732                           
 11733                           ;i2c.c: 110: do { LATB1 = 1; } while(0);
 11734  16B2  0022               	movlb	2	; select bank2
 11735  16B3  148D               	bsf	13,1	;volatile
 11736                           
 11737                           ;i2c.c: 111: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11738  16B4  3003               	movlw	3
 11739  16B5  0020               	movlb	0	; select bank0
 11740  16B6  00A1               	movwf	??_I2C_Stop
 11741  16B7                     u6217:	
 11742  16B7  0BA1               	decfsz	??_I2C_Stop,f
 11743  16B8  2EB7               	goto	u6217
 11744  16B9  0008               	return
 11745  16BA                     __end_of_I2C_Stop:	
 11746                           
 11747                           	psect	text63
 11748  1680                     __ptext63:	
 11749 ;; *************** function _I2C_Start *****************
 11750 ;; Defined at:
 11751 ;;		line 16 in file "mcc_generated_files/i2c.c"
 11752 ;; Parameters:    Size  Location     Type
 11753 ;;		None
 11754 ;; Auto vars:     Size  Location     Type
 11755 ;;		None
 11756 ;; Return value:  Size  Location     Type
 11757 ;;                  1    wreg      void 
 11758 ;; Registers used:
 11759 ;;		wreg
 11760 ;; Tracked objects:
 11761 ;;		On entry : 0/0
 11762 ;;		On exit  : 0/0
 11763 ;;		Unchanged: 0/0
 11764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;Total ram usage:        1 bytes
 11770 ;; Hardware stack levels used:    1
 11771 ;; Hardware stack levels required when called:    3
 11772 ;; This function calls:
 11773 ;;		Nothing
 11774 ;; This function is called by:
 11775 ;;		_I2C_Read_Buffer
 11776 ;;		_I2C_Send_Buffer
 11777 ;; This function uses a non-reentrant model
 11778 ;;
 11779                           
 11780                           
 11781                           ;psect for function _I2C_Start
 11782  1680                     _I2C_Start:	
 11783                           
 11784                           ;incstack = 0
 11785                           ; Regs used in _I2C_Start: [wreg]
 11786                           ;i2c.c: 18: do { LATB1 = 1; } while(0);
 11787  1680  0022               	movlb	2	; select bank2
 11788  1681  148D               	bsf	13,1	;volatile
 11789                           
 11790                           ;i2c.c: 19: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11791  1682  3003               	movlw	3
 11792  1683  0020               	movlb	0	; select bank0
 11793  1684  00A1               	movwf	??_I2C_Start
 11794  1685                     u6227:	
 11795  1685  0BA1               	decfsz	??_I2C_Start,f
 11796  1686  2E85               	goto	u6227
 11797                           
 11798                           ;i2c.c: 20: do { LATB0 = 1; } while(0);
 11799  1687  0022               	movlb	2	; select bank2
 11800  1688  140D               	bsf	13,0	;volatile
 11801                           
 11802                           ;i2c.c: 21: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11803  1689  3003               	movlw	3
 11804  168A  0020               	movlb	0	; select bank0
 11805  168B  00A1               	movwf	??_I2C_Start
 11806  168C                     u6237:	
 11807  168C  0BA1               	decfsz	??_I2C_Start,f
 11808  168D  2E8C               	goto	u6237
 11809                           
 11810                           ;i2c.c: 22: do { LATB1 = 0; } while(0);
 11811  168E  0022               	movlb	2	; select bank2
 11812  168F  108D               	bcf	13,1	;volatile
 11813                           
 11814                           ;i2c.c: 23: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11815  1690  3003               	movlw	3
 11816  1691  0020               	movlb	0	; select bank0
 11817  1692  00A1               	movwf	??_I2C_Start
 11818  1693                     u6247:	
 11819  1693  0BA1               	decfsz	??_I2C_Start,f
 11820  1694  2E93               	goto	u6247
 11821                           
 11822                           ;i2c.c: 24: do { LATB0 = 0; } while(0);
 11823  1695  0022               	movlb	2	; select bank2
 11824  1696  100D               	bcf	13,0	;volatile
 11825                           
 11826                           ;i2c.c: 25: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11827  1697  3003               	movlw	3
 11828  1698  0020               	movlb	0	; select bank0
 11829  1699  00A1               	movwf	??_I2C_Start
 11830  169A                     u6257:	
 11831  169A  0BA1               	decfsz	??_I2C_Start,f
 11832  169B  2E9A               	goto	u6257
 11833  169C  0008               	return
 11834  169D                     __end_of_I2C_Start:	
 11835                           
 11836                           	psect	text64
 11837  07A3                     __ptext64:	
 11838 ;; *************** function _I2C_Send_Byte *****************
 11839 ;; Defined at:
 11840 ;;		line 34 in file "mcc_generated_files/i2c.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;  Data            1    wreg     unsigned char 
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;  Data            1    2[BANK0 ] unsigned char 
 11845 ;;  i               1    3[BANK0 ] unsigned char 
 11846 ;; Return value:  Size  Location     Type
 11847 ;;                  1    wreg      unsigned char 
 11848 ;; Registers used:
 11849 ;;		wreg, status,2, status,0
 11850 ;; Tracked objects:
 11851 ;;		On entry : 0/0
 11852 ;;		On exit  : 0/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;Total ram usage:        3 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; Hardware stack levels required when called:    3
 11862 ;; This function calls:
 11863 ;;		Nothing
 11864 ;; This function is called by:
 11865 ;;		_I2C_Read_Buffer
 11866 ;;		_I2C_Send_Buffer
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           
 11871                           ;psect for function _I2C_Send_Byte
 11872  07A3                     _I2C_Send_Byte:	
 11873                           
 11874                           ;incstack = 0
 11875                           ; Regs used in _I2C_Send_Byte: [wreg+status,2+status,0]
 11876                           ;I2C_Send_Byte@Data stored from wreg
 11877  07A3  0020               	movlb	0	; select bank0
 11878  07A4  00A2               	movwf	I2C_Send_Byte@Data
 11879                           
 11880                           ;i2c.c: 36: unsigned char i;
 11881                           ;i2c.c: 37: for(i=0;i<8;i++)
 11882  07A5  01A3               	clrf	I2C_Send_Byte@i
 11883  07A6  3008               	movlw	8
 11884  07A7  0223               	subwf	I2C_Send_Byte@i,w
 11885  07A8  1803               	btfsc	3,0
 11886  07A9  2FD0               	goto	l829
 11887  07AA                     l817:	
 11888                           
 11889                           ;i2c.c: 38: {
 11890                           ;i2c.c: 39: if(Data&0x80)
 11891  07AA  1FA2               	btfss	I2C_Send_Byte@Data,7
 11892  07AB  2FAF               	goto	l823
 11893                           
 11894                           ;i2c.c: 40: do { LATB1 = 1; } while(0);
 11895  07AC  0022               	movlb	2	; select bank2
 11896  07AD  148D               	bsf	13,1	;volatile
 11897  07AE  2FB1               	goto	l5010
 11898  07AF                     l823:	
 11899                           ;i2c.c: 41: else
 11900                           ;i2c.c: 42: do { LATB1 = 0; } while(0);
 11901                           
 11902  07AF  0022               	movlb	2	; select bank2
 11903  07B0  108D               	bcf	13,1	;volatile
 11904  07B1                     l5010:	
 11905                           
 11906                           ;i2c.c: 43: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11907  07B1  3003               	movlw	3
 11908  07B2  0020               	movlb	0	; select bank0
 11909  07B3  00A1               	movwf	??_I2C_Send_Byte
 11910  07B4                     u6267:	
 11911  07B4  0BA1               	decfsz	??_I2C_Send_Byte,f
 11912  07B5  2FB4               	goto	u6267
 11913                           
 11914                           ;i2c.c: 44: do { LATB0 = 1; } while(0);
 11915  07B6  0022               	movlb	2	; select bank2
 11916  07B7  140D               	bsf	13,0	;volatile
 11917                           
 11918                           ;i2c.c: 45: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11919  07B8  3003               	movlw	3
 11920  07B9  0020               	movlb	0	; select bank0
 11921  07BA  00A1               	movwf	??_I2C_Send_Byte
 11922  07BB                     u6277:	
 11923  07BB  0BA1               	decfsz	??_I2C_Send_Byte,f
 11924  07BC  2FBB               	goto	u6277
 11925                           
 11926                           ;i2c.c: 46: Data<<=1;
 11927  07BD  1003               	clrc
 11928  07BE  0020               	movlb	0	; select bank0
 11929  07BF  0DA2               	rlf	I2C_Send_Byte@Data,f
 11930                           
 11931                           ;i2c.c: 47: do { LATB0 = 0; } while(0);
 11932  07C0  0022               	movlb	2	; select bank2
 11933  07C1  100D               	bcf	13,0	;volatile
 11934                           
 11935                           ;i2c.c: 48: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11936  07C2  3003               	movlw	3
 11937  07C3  0020               	movlb	0	; select bank0
 11938  07C4  00A1               	movwf	??_I2C_Send_Byte
 11939  07C5                     u6287:	
 11940  07C5  0BA1               	decfsz	??_I2C_Send_Byte,f
 11941  07C6  2FC5               	goto	u6287
 11942  07C7  3001               	movlw	1
 11943  07C8  0020               	movlb	0	; select bank0
 11944  07C9  00A1               	movwf	??_I2C_Send_Byte
 11945  07CA  0821               	movf	??_I2C_Send_Byte,w
 11946  07CB  07A3               	addwf	I2C_Send_Byte@i,f
 11947  07CC  3008               	movlw	8
 11948  07CD  0223               	subwf	I2C_Send_Byte@i,w
 11949  07CE  1C03               	skipc
 11950  07CF  2FAA               	goto	l817
 11951  07D0                     l829:	
 11952                           ;i2c.c: 49: }
 11953                           ;i2c.c: 50: do { LATB1 = 1; } while(0);
 11954                           
 11955  07D0  0022               	movlb	2	; select bank2
 11956  07D1  148D               	bsf	13,1	;volatile
 11957                           
 11958                           ;i2c.c: 51: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11959  07D2  3003               	movlw	3
 11960  07D3  0020               	movlb	0	; select bank0
 11961  07D4  00A1               	movwf	??_I2C_Send_Byte
 11962  07D5                     u6297:	
 11963  07D5  0BA1               	decfsz	??_I2C_Send_Byte,f
 11964  07D6  2FD5               	goto	u6297
 11965                           
 11966                           ;i2c.c: 52: do { LATB0 = 1; } while(0);
 11967  07D7  0022               	movlb	2	; select bank2
 11968  07D8  140D               	bsf	13,0	;volatile
 11969                           
 11970                           ;i2c.c: 53: _delay((unsigned long)((10)*(4000000/4000000.0)));
 11971  07D9  3003               	movlw	3
 11972  07DA  0020               	movlb	0	; select bank0
 11973  07DB  00A1               	movwf	??_I2C_Send_Byte
 11974  07DC                     u6307:	
 11975  07DC  0BA1               	decfsz	??_I2C_Send_Byte,f
 11976  07DD  2FDC               	goto	u6307
 11977                           
 11978                           ;i2c.c: 54: do { TRISB1 = 1; } while(0);
 11979  07DE  0021               	movlb	1	; select bank1
 11980  07DF  148D               	bsf	13,1	;volatile
 11981                           
 11982                           ;i2c.c: 55: if(RB1)
 11983  07E0  0020               	movlb	0	; select bank0
 11984  07E1  1C8D               	btfss	13,1	;volatile
 11985  07E2  2FE7               	goto	l839
 11986                           
 11987                           ;i2c.c: 56: {
 11988                           ;i2c.c: 57: do { TRISB1 = 0; } while(0);
 11989  07E3  0021               	movlb	1	; select bank1
 11990  07E4  108D               	bcf	13,1	;volatile
 11991                           
 11992                           ;i2c.c: 58: return 0x01;
 11993  07E5  3001               	movlw	1
 11994  07E6  0008               	return
 11995  07E7                     l839:	
 11996                           ;i2c.c: 59: }
 11997                           ;i2c.c: 60: do { TRISB1 = 0; } while(0);
 11998                           
 11999  07E7  0021               	movlb	1	; select bank1
 12000  07E8  108D               	bcf	13,1	;volatile
 12001                           
 12002                           ;i2c.c: 61: do { LATB0 = 0; } while(0);
 12003  07E9  0022               	movlb	2	; select bank2
 12004  07EA  100D               	bcf	13,0	;volatile
 12005                           
 12006                           ;i2c.c: 62: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12007  07EB  3003               	movlw	3
 12008  07EC  0020               	movlb	0	; select bank0
 12009  07ED  00A1               	movwf	??_I2C_Send_Byte
 12010  07EE                     u6317:	
 12011  07EE  0BA1               	decfsz	??_I2C_Send_Byte,f
 12012  07EF  2FEE               	goto	u6317
 12013                           
 12014                           ;i2c.c: 63: do { LATB1 = 0; } while(0);
 12015  07F0  0022               	movlb	2	; select bank2
 12016  07F1  108D               	bcf	13,1	;volatile
 12017                           
 12018                           ;i2c.c: 64: _delay((unsigned long)((10)*(4000000/4000000.0)));
 12019  07F2  3003               	movlw	3
 12020  07F3  0020               	movlb	0	; select bank0
 12021  07F4  00A1               	movwf	??_I2C_Send_Byte
 12022  07F5                     u6327:	
 12023  07F5  0BA1               	decfsz	??_I2C_Send_Byte,f
 12024  07F6  2FF5               	goto	u6327
 12025                           
 12026                           ;i2c.c: 65: return 0x00;
 12027  07F7  3000               	movlw	0
 12028  07F8  0008               	return
 12029  07F9                     __end_of_I2C_Send_Byte:	
 12030                           
 12031                           	psect	text65
 12032  0829                     __ptext65:	
 12033 ;; *************** function _FLASH_WriteWord *****************
 12034 ;; Defined at:
 12035 ;;		line 93 in file "mcc_generated_files/memory.c"
 12036 ;; Parameters:    Size  Location     Type
 12037 ;;  flashAddr       2    1[BANK0 ] unsigned int 
 12038 ;;  word            2    3[BANK0 ] unsigned int 
 12039 ;; Auto vars:     Size  Location     Type
 12040 ;;  GIEBitValue     1    5[BANK0 ] unsigned char 
 12041 ;; Return value:  Size  Location     Type
 12042 ;;                  1    wreg      void 
 12043 ;; Registers used:
 12044 ;;		wreg, status,2, status,0
 12045 ;; Tracked objects:
 12046 ;;		On entry : 0/0
 12047 ;;		On exit  : 0/0
 12048 ;;		Unchanged: 0/0
 12049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;Total ram usage:        5 bytes
 12055 ;; Hardware stack levels used:    1
 12056 ;; Hardware stack levels required when called:    3
 12057 ;; This function calls:
 12058 ;;		Nothing
 12059 ;; This function is called by:
 12060 ;;		_Bq32k_Time_Init
 12061 ;;		_Write_Flash_head
 12062 ;;		_Write_Flash_finish
 12063 ;;		_Save_Write_word
 12064 ;; This function uses a non-reentrant model
 12065 ;;
 12066                           
 12067                           
 12068                           ;psect for function _FLASH_WriteWord
 12069  0829                     _FLASH_WriteWord:	
 12070                           
 12071                           ;memory.c: 95: uint8_t GIEBitValue = INTCONbits.GIE;
 12072                           
 12073                           ;incstack = 0
 12074                           ; Regs used in _FLASH_WriteWord: [wreg+status,2+status,0]
 12075  0829  3000               	movlw	0
 12076  082A  1B8B               	btfsc	11,7	;volatile
 12077  082B  3001               	movlw	1
 12078  082C  0020               	movlb	0	; select bank0
 12079  082D  00A5               	movwf	FLASH_WriteWord@GIEBitValue
 12080                           
 12081                           ;memory.c: 98: INTCONbits.GIE = 0;
 12082  082E  138B               	bcf	11,7	;volatile
 12083                           
 12084                           ;memory.c: 102: PMCON1bits.CFGS = 0;
 12085  082F  0023               	movlb	3	; select bank3
 12086  0830  1315               	bcf	21,6	;volatile
 12087                           
 12088                           ;memory.c: 103: PMCON1bits.WREN = 1;
 12089  0831  1515               	bsf	21,2	;volatile
 12090                           
 12091                           ;memory.c: 104: PMCON1bits.LWLO = 1;
 12092  0832  1695               	bsf	21,5	;volatile
 12093                           
 12094                           ;memory.c: 107: PMADRL = (flashAddr & 0xFF);
 12095  0833  0020               	movlb	0	; select bank0
 12096  0834  0821               	movf	FLASH_WriteWord@flashAddr,w
 12097  0835  0023               	movlb	3	; select bank3
 12098  0836  0091               	movwf	17	;volatile
 12099                           
 12100                           ;memory.c: 109: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12101  0837  0020               	movlb	0	; select bank0
 12102  0838  0822               	movf	FLASH_WriteWord@flashAddr+1,w
 12103  0839  0023               	movlb	3	; select bank3
 12104  083A  0092               	movwf	18	;volatile
 12105                           
 12106                           ;memory.c: 112: PMDATL = word;
 12107  083B  0020               	movlb	0	; select bank0
 12108  083C  0823               	movf	FLASH_WriteWord@word,w
 12109  083D  0023               	movlb	3	; select bank3
 12110  083E  0093               	movwf	19	;volatile
 12111                           
 12112                           ;memory.c: 113: PMDATH = ((word & 0xFF00) >> 8);
 12113  083F  0020               	movlb	0	; select bank0
 12114  0840  0824               	movf	FLASH_WriteWord@word+1,w
 12115  0841  0023               	movlb	3	; select bank3
 12116  0842  0094               	movwf	20	;volatile
 12117                           
 12118                           ;memory.c: 116: PMCON1bits.LWLO = 0;
 12119  0843  1295               	bcf	21,5	;volatile
 12120                           
 12121                           ;memory.c: 118: PMCON2 = 0x55;
 12122  0844  3055               	movlw	85
 12123  0845  0096               	movwf	22	;volsfr
 12124                           
 12125                           ;memory.c: 119: PMCON2 = 0xAA;
 12126  0846  30AA               	movlw	170
 12127  0847  0096               	movwf	22	;volsfr
 12128                           
 12129                           ;memory.c: 120: PMCON1bits.WR = 1;
 12130  0848  1495               	bsf	21,1	;volatile
 12131                           
 12132                           ;memory.c: 121: __nop();
 12133  0849  0000               	nop
 12134                           
 12135                           ;memory.c: 122: __nop();
 12136  084A  0000               	nop
 12137                           
 12138                           ;memory.c: 124: PMCON1bits.WREN = 0;
 12139  084B  0023               	movlb	3	; select bank3
 12140  084C  1115               	bcf	21,2	;volatile
 12141                           
 12142                           ;memory.c: 125: INTCONbits.GIE = GIEBitValue;
 12143  084D  0020               	movlb	0	; select bank0
 12144  084E  0C25               	rrf	FLASH_WriteWord@GIEBitValue,w
 12145  084F  1C03               	skipc
 12146  0850  138B               	bcf	11,7	;volatile
 12147  0851  1803               	skipnc
 12148  0852  178B               	bsf	11,7	;volatile
 12149  0853  0008               	return
 12150  0854                     __end_of_FLASH_WriteWord:	
 12151                           
 12152                           	psect	text66
 12153  16F7                     __ptext66:	
 12154 ;; *************** function _FLASH_ReadWord *****************
 12155 ;; Defined at:
 12156 ;;		line 58 in file "mcc_generated_files/memory.c"
 12157 ;; Parameters:    Size  Location     Type
 12158 ;;  flashAddr       2    1[BANK0 ] unsigned int 
 12159 ;; Auto vars:     Size  Location     Type
 12160 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
 12161 ;; Return value:  Size  Location     Type
 12162 ;;                  2    1[BANK0 ] unsigned int 
 12163 ;; Registers used:
 12164 ;;		wreg, status,2, status,0
 12165 ;; Tracked objects:
 12166 ;;		On entry : 0/0
 12167 ;;		On exit  : 0/0
 12168 ;;		Unchanged: 0/0
 12169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12170 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;Total ram usage:        3 bytes
 12175 ;; Hardware stack levels used:    1
 12176 ;; Hardware stack levels required when called:    3
 12177 ;; This function calls:
 12178 ;;		Nothing
 12179 ;; This function is called by:
 12180 ;;		_Key_Process
 12181 ;;		_Bq32k_Time_Init
 12182 ;;		_Serach_Flash_Head
 12183 ;; This function uses a non-reentrant model
 12184 ;;
 12185                           
 12186                           
 12187                           ;psect for function _FLASH_ReadWord
 12188  16F7                     _FLASH_ReadWord:	
 12189                           
 12190                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12191                           
 12192                           ;incstack = 0
 12193                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12194  16F7  3000               	movlw	0
 12195  16F8  1B8B               	btfsc	11,7	;volatile
 12196  16F9  3001               	movlw	1
 12197  16FA  0020               	movlb	0	; select bank0
 12198  16FB  00A3               	movwf	FLASH_ReadWord@GIEBitValue
 12199                           
 12200                           ;memory.c: 61: INTCONbits.GIE = 0;
 12201  16FC  138B               	bcf	11,7	;volatile
 12202                           
 12203                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12204  16FD  0821               	movf	FLASH_ReadWord@flashAddr,w
 12205  16FE  0023               	movlb	3	; select bank3
 12206  16FF  0091               	movwf	17	;volatile
 12207                           
 12208                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12209  1700  0020               	movlb	0	; select bank0
 12210  1701  0822               	movf	FLASH_ReadWord@flashAddr+1,w
 12211  1702  0023               	movlb	3	; select bank3
 12212  1703  0092               	movwf	18	;volatile
 12213                           
 12214                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12215  1704  1315               	bcf	21,6	;volatile
 12216                           
 12217                           ;memory.c: 66: PMCON1bits.RD = 1;
 12218  1705  1415               	bsf	21,0	;volatile
 12219                           
 12220                           ;memory.c: 67: __nop();
 12221  1706  0000               	nop
 12222                           
 12223                           ;memory.c: 68: __nop();
 12224  1707  0000               	nop
 12225                           
 12226                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12227  1708  0020               	movlb	0	; select bank0
 12228  1709  0C23               	rrf	FLASH_ReadWord@GIEBitValue,w
 12229  170A  1C03               	skipc
 12230  170B  138B               	bcf	11,7	;volatile
 12231  170C  1803               	skipnc
 12232  170D  178B               	bsf	11,7	;volatile
 12233                           
 12234                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12235  170E  0023               	movlb	3	; select bank3
 12236  170F  0814               	movf	20,w	;volatile
 12237  1710  0020               	movlb	0	; select bank0
 12238  1711  00A2               	movwf	?_FLASH_ReadWord+1
 12239  1712  0023               	movlb	3	; select bank3
 12240  1713  0813               	movf	19,w	;volatile
 12241  1714  0020               	movlb	0	; select bank0
 12242  1715  00A1               	movwf	?_FLASH_ReadWord
 12243  1716  0008               	return
 12244  1717                     __end_of_FLASH_ReadWord:	
 12245                           
 12246                           	psect	text67
 12247  16BA                     __ptext67:	
 12248 ;; *************** function _ADC_GetConversion *****************
 12249 ;; Defined at:
 12250 ;;		line 106 in file "mcc_generated_files/adc.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;  channel         1    wreg     enum E1850
 12253 ;; Auto vars:     Size  Location     Type
 12254 ;;  channel         1    4[BANK0 ] enum E1850
 12255 ;; Return value:  Size  Location     Type
 12256 ;;                  2    1[BANK0 ] unsigned int 
 12257 ;; Registers used:
 12258 ;;		wreg, status,2, status,0
 12259 ;; Tracked objects:
 12260 ;;		On entry : 0/0
 12261 ;;		On exit  : 0/0
 12262 ;;		Unchanged: 0/0
 12263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12264 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;Total ram usage:        4 bytes
 12269 ;; Hardware stack levels used:    1
 12270 ;; Hardware stack levels required when called:    3
 12271 ;; This function calls:
 12272 ;;		Nothing
 12273 ;; This function is called by:
 12274 ;;		_main
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           
 12279                           ;psect for function _ADC_GetConversion
 12280  16BA                     _ADC_GetConversion:	
 12281                           
 12282                           ;incstack = 0
 12283                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 12284                           ;ADC_GetConversion@channel stored from wreg
 12285  16BA  0020               	movlb	0	; select bank0
 12286  16BB  00A4               	movwf	ADC_GetConversion@channel
 12287                           
 12288                           ;adc.c: 108: ADCON0bits.CHS = channel;
 12289  16BC  0824               	movf	ADC_GetConversion@channel,w
 12290  16BD  00A3               	movwf	??_ADC_GetConversion
 12291  16BE  0DA3               	rlf	??_ADC_GetConversion,f
 12292  16BF  0DA3               	rlf	??_ADC_GetConversion,f
 12293  16C0  0021               	movlb	1	; select bank1
 12294  16C1  081D               	movf	29,w	;volatile
 12295  16C2  0020               	movlb	0	; select bank0
 12296  16C3  0623               	xorwf	??_ADC_GetConversion,w
 12297  16C4  3983               	andlw	-125
 12298  16C5  0623               	xorwf	??_ADC_GetConversion,w
 12299  16C6  0021               	movlb	1	; select bank1
 12300  16C7  009D               	movwf	29	;volatile
 12301                           
 12302                           ;adc.c: 111: ADCON0bits.ADON = 1;
 12303  16C8  141D               	bsf	29,0	;volatile
 12304                           
 12305                           ;adc.c: 114: _delay((unsigned long)((5)*(4000000/4000000.0)));
 12306  16C9  3200               	nop2	;2 cycle nop
 12307  16CA  3200               	nop2	;2 cycle nop
 12308  16CB  0000               	nop
 12309                           
 12310                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
 12311  16CC  0021               	movlb	1	; select bank1
 12312  16CD  149D               	bsf	29,1	;volatile
 12313  16CE                     l253:	
 12314                           ;adc.c: 120: while (ADCON0bits.GO_nDONE) {
 12315                           
 12316  16CE  189D               	btfsc	29,1	;volatile
 12317  16CF  2ECE               	goto	l253
 12318                           
 12319                           ;adc.c: 121: }
 12320                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
 12321  16D0  081C               	movf	28,w	;volatile
 12322  16D1  0020               	movlb	0	; select bank0
 12323  16D2  00A2               	movwf	?_ADC_GetConversion+1
 12324  16D3  0021               	movlb	1	; select bank1
 12325  16D4  081B               	movf	27,w	;volatile
 12326  16D5  0020               	movlb	0	; select bank0
 12327  16D6  00A1               	movwf	?_ADC_GetConversion
 12328  16D7  0008               	return
 12329  16D8                     __end_of_ADC_GetConversion:	
 12330                           
 12331                           	psect	intentry
 12332  0004                     __pintentry:	
 12333 ;; *************** function _INTERRUPT_InterruptManager *****************
 12334 ;; Defined at:
 12335 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;		None
 12338 ;; Auto vars:     Size  Location     Type
 12339 ;;		None
 12340 ;; Return value:  Size  Location     Type
 12341 ;;                  1    wreg      void 
 12342 ;; Registers used:
 12343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12344 ;; Tracked objects:
 12345 ;;		On entry : 0/0
 12346 ;;		On exit  : 0/0
 12347 ;;		Unchanged: 0/0
 12348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;Total ram usage:        1 bytes
 12354 ;; Hardware stack levels used:    1
 12355 ;; Hardware stack levels required when called:    2
 12356 ;; This function calls:
 12357 ;;		_EUSART_Receive_ISR
 12358 ;;		_EUSART_Transmit_ISR
 12359 ;;		_TMR0_ISR
 12360 ;; This function is called by:
 12361 ;;		Interrupt level 1
 12362 ;; This function uses a non-reentrant model
 12363 ;;
 12364                           
 12365  0004                     _INTERRUPT_InterruptManager:	
 12366                           
 12367                           ;incstack = 0
 12368                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12369  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12370  0005  3180               	pagesel	$
 12371  0006  0020               	movlb	0	; select bank0
 12372  0007  087F               	movf	127,w
 12373  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
 12374                           
 12375                           ;interrupt_manager.c: 54: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 12376  0009  1A8B               	btfsc	11,5	;volatile
 12377  000A  1D0B               	btfss	11,2	;volatile
 12378  000B  2810               	goto	i1l322
 12379                           
 12380                           ;interrupt_manager.c: 55: TMR0_ISR();
 12381  000C  3195  25F6  3180   	fcall	_TMR0_ISR
 12382                           
 12383                           ;interrupt_manager.c: 56: } else if (PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1) {
 12384  000F  2822               	goto	i1l328
 12385  0010                     i1l322:	
 12386  0010  0021               	movlb	1	; select bank1
 12387  0011  1E91               	btfss	17,5	;volatile
 12388  0012  281A               	goto	i1l324
 12389  0013  0020               	movlb	0	; select bank0
 12390  0014  1E91               	btfss	17,5	;volatile
 12391  0015  281A               	goto	i1l324
 12392                           
 12393                           ;interrupt_manager.c: 57: EUSART_Receive_ISR();
 12394  0016  318E  262D  3180   	fcall	_EUSART_Receive_ISR
 12395                           
 12396                           ;interrupt_manager.c: 58: } else if (PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1) {
 12397  0019  2822               	goto	i1l328
 12398  001A                     i1l324:	
 12399  001A  0021               	movlb	1	; select bank1
 12400  001B  1E11               	btfss	17,4	;volatile
 12401  001C  2822               	goto	i1l328
 12402  001D  0020               	movlb	0	; select bank0
 12403  001E  1E11               	btfss	17,4	;volatile
 12404  001F  2822               	goto	i1l328
 12405                           
 12406                           ;interrupt_manager.c: 59: EUSART_Transmit_ISR();
 12407  0020  3196  2663         	fcall	_EUSART_Transmit_ISR
 12408  0022                     i1l328:	
 12409                           ;interrupt_manager.c: 60: } else {
 12410                           
 12411  0022  0020               	movlb	0	; select bank0
 12412  0023  0820               	movf	??_INTERRUPT_InterruptManager,w
 12413  0024  00FF               	movwf	127
 12414  0025  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12415  0026  0009               	retfie
 12416  0027                     __end_of_INTERRUPT_InterruptManager:	
 12417                           
 12418                           	psect	text69
 12419  15F6                     __ptext69:	
 12420 ;; *************** function _TMR0_ISR *****************
 12421 ;; Defined at:
 12422 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 12423 ;; Parameters:    Size  Location     Type
 12424 ;;		None
 12425 ;; Auto vars:     Size  Location     Type
 12426 ;;		None
 12427 ;; Return value:  Size  Location     Type
 12428 ;;                  1    wreg      void 
 12429 ;; Registers used:
 12430 ;;		wreg, status,2, status,0, pclath, cstack
 12431 ;; Tracked objects:
 12432 ;;		On entry : 0/0
 12433 ;;		On exit  : 0/0
 12434 ;;		Unchanged: 0/0
 12435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;Total ram usage:        1 bytes
 12441 ;; Hardware stack levels used:    1
 12442 ;; Hardware stack levels required when called:    1
 12443 ;; This function calls:
 12444 ;;		_TMR0_CallBack
 12445 ;; This function is called by:
 12446 ;;		_INTERRUPT_InterruptManager
 12447 ;; This function uses a non-reentrant model
 12448 ;;
 12449                           
 12450                           
 12451                           ;psect for function _TMR0_ISR
 12452  15F6                     _TMR0_ISR:	
 12453                           
 12454                           ;tmr0.c: 104: static volatile unsigned int CountCallBack = 0;
 12455                           ;tmr0.c: 107: INTCONbits.TMR0IF = 0;
 12456                           
 12457                           ;incstack = 0
 12458                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 12459  15F6  110B               	bcf	11,2	;volatile
 12460                           
 12461                           ;tmr0.c: 109: TMR0 = timer0ReloadVal;
 12462  15F7  0021               	movlb	1	; select bank1
 12463  15F8  086F               	movf	_timer0ReloadVal^(0+128),w	;volatile
 12464  15F9  0020               	movlb	0	; select bank0
 12465  15FA  0095               	movwf	21	;volatile
 12466                           
 12467                           ;tmr0.c: 111: MAX31856Sec++;
 12468  15FB  3001               	movlw	1
 12469  15FC  00F1               	movwf	??_TMR0_ISR
 12470  15FD  0871               	movf	??_TMR0_ISR,w
 12471  15FE  0021               	movlb	1	; select bank1
 12472  15FF  07BB               	addwf	_MAX31856Sec^(0+128),f
 12473                           
 12474                           ;tmr0.c: 114: if (++CountCallBack >= 100) {
 12475  1600  3001               	movlw	1
 12476  1601  07AC               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
 12477  1602  3000               	movlw	0
 12478  1603  3DAD               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
 12479  1604  3000               	movlw	0
 12480  1605  022D               	subwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
 12481  1606  3064               	movlw	100
 12482  1607  1903               	skipnz
 12483  1608  022C               	subwf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
 12484  1609  1C03               	skipc
 12485  160A  0008               	return
 12486                           
 12487                           ;tmr0.c: 116: TMR0_CallBack();
 12488  160B  3195  250B         	fcall	_TMR0_CallBack
 12489                           
 12490                           ;tmr0.c: 119: CountCallBack = 0;
 12491  160D  0021               	movlb	1	; select bank1
 12492  160E  01AC               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
 12493  160F  01AD               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
 12494  1610  0008               	return
 12495  1611                     __end_of_TMR0_ISR:	
 12496                           
 12497                           	psect	text70
 12498  150B                     __ptext70:	
 12499 ;; *************** function _TMR0_CallBack *****************
 12500 ;; Defined at:
 12501 ;;		line 125 in file "mcc_generated_files/tmr0.c"
 12502 ;; Parameters:    Size  Location     Type
 12503 ;;		None
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;		None
 12506 ;; Return value:  Size  Location     Type
 12507 ;;                  1    wreg      void 
 12508 ;; Registers used:
 12509 ;;		wreg, status,2, status,0
 12510 ;; Tracked objects:
 12511 ;;		On entry : 0/0
 12512 ;;		On exit  : 0/0
 12513 ;;		Unchanged: 0/0
 12514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12519 ;;Total ram usage:        1 bytes
 12520 ;; Hardware stack levels used:    1
 12521 ;; This function calls:
 12522 ;;		Nothing
 12523 ;; This function is called by:
 12524 ;;		_TMR0_ISR
 12525 ;; This function uses a non-reentrant model
 12526 ;;
 12527                           
 12528                           
 12529                           ;psect for function _TMR0_CallBack
 12530  150B                     _TMR0_CallBack:	
 12531                           
 12532                           ;tmr0.c: 128: LongPressSec++;
 12533                           
 12534                           ;incstack = 0
 12535                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0]
 12536  150B  3001               	movlw	1
 12537  150C  00F0               	movwf	??_TMR0_CallBack
 12538  150D  0870               	movf	??_TMR0_CallBack,w
 12539  150E  0021               	movlb	1	; select bank1
 12540  150F  07BA               	addwf	_LongPressSec^(0+128),f
 12541                           
 12542                           ;tmr0.c: 129: if(Usart_Run_Flag > 0)
 12543  1510  083D               	movf	_Usart_Run_Flag^(0+128),w
 12544  1511  1903               	btfsc	3,2
 12545  1512  2D15               	goto	i1l305
 12546                           
 12547                           ;tmr0.c: 130: {
 12548                           ;tmr0.c: 131: Usart_Run_Flag--;
 12549  1513  3001               	movlw	1
 12550  1514  02BD               	subwf	_Usart_Run_Flag^(0+128),f
 12551  1515                     i1l305:	
 12552                           
 12553                           ;tmr0.c: 132: }
 12554                           ;tmr0.c: 134: if( Usart_Run_Flag == 0)
 12555  1515  083D               	movf	_Usart_Run_Flag^(0+128),w
 12556  1516  1D03               	btfss	3,2
 12557  1517  0008               	return
 12558                           
 12559                           ;tmr0.c: 135: {
 12560                           ;tmr0.c: 136: SWDTEN = 1;
 12561  1518  1417               	bsf	23,0	;volatile
 12562  1519  0008               	return
 12563  151A                     __end_of_TMR0_CallBack:	
 12564                           
 12565                           	psect	text71
 12566  1663                     __ptext71:	
 12567 ;; *************** function _EUSART_Transmit_ISR *****************
 12568 ;; Defined at:
 12569 ;;		line 155 in file "mcc_generated_files/eusart.c"
 12570 ;; Parameters:    Size  Location     Type
 12571 ;;		None
 12572 ;; Auto vars:     Size  Location     Type
 12573 ;;		None
 12574 ;; Return value:  Size  Location     Type
 12575 ;;                  1    wreg      void 
 12576 ;; Registers used:
 12577 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12578 ;; Tracked objects:
 12579 ;;		On entry : 0/0
 12580 ;;		On exit  : 0/0
 12581 ;;		Unchanged: 0/0
 12582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;Total ram usage:        1 bytes
 12588 ;; Hardware stack levels used:    1
 12589 ;; This function calls:
 12590 ;;		Nothing
 12591 ;; This function is called by:
 12592 ;;		_INTERRUPT_InterruptManager
 12593 ;; This function uses a non-reentrant model
 12594 ;;
 12595                           
 12596                           
 12597                           ;psect for function _EUSART_Transmit_ISR
 12598  1663                     _EUSART_Transmit_ISR:	
 12599                           
 12600                           ;eusart.c: 158: if (sizeof (eusartTxBuffer) > eusartTxBufferRemaining) {
 12601                           
 12602                           ;incstack = 0
 12603                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12604  1663  3008               	movlw	8
 12605  1664  0021               	movlb	1	; select bank1
 12606  1665  026E               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 12607  1666  1803               	skipnc
 12608  1667  2E7E               	goto	i1l167
 12609                           
 12610                           ;eusart.c: 159: TXREG = eusartTxBuffer[eusartTxTail++];
 12611  1668  0842               	movf	_eusartTxTail^(0+128),w
 12612  1669  3E28               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12613  166A  0086               	movwf	6
 12614  166B  3001               	movlw	1	; select bank2/3
 12615  166C  0087               	movwf	7
 12616  166D  0801               	movf	1,w
 12617  166E  0023               	movlb	3	; select bank3
 12618  166F  009A               	movwf	26	;volatile
 12619  1670  3001               	movlw	1
 12620  1671  00F0               	movwf	??_EUSART_Transmit_ISR
 12621  1672  0870               	movf	??_EUSART_Transmit_ISR,w
 12622  1673  0021               	movlb	1	; select bank1
 12623  1674  07C2               	addwf	_eusartTxTail^(0+128),f
 12624                           
 12625                           ;eusart.c: 160: if (sizeof (eusartTxBuffer) <= eusartTxTail) {
 12626  1675  3008               	movlw	8
 12627  1676  0242               	subwf	_eusartTxTail^(0+128),w
 12628  1677  1803               	btfsc	3,0
 12629                           
 12630                           ;eusart.c: 161: eusartTxTail = 0;
 12631  1678  01C2               	clrf	_eusartTxTail^(0+128)
 12632                           
 12633                           ;eusart.c: 162: }
 12634                           ;eusart.c: 163: eusartTxBufferRemaining++;
 12635  1679  3001               	movlw	1
 12636  167A  00F0               	movwf	??_EUSART_Transmit_ISR
 12637  167B  0870               	movf	??_EUSART_Transmit_ISR,w
 12638  167C  07EE               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 12639                           
 12640                           ;eusart.c: 164: } else {
 12641  167D  0008               	return
 12642  167E                     i1l167:	
 12643                           
 12644                           ;eusart.c: 165: PIE1bits.TXIE = 0;
 12645  167E  1211               	bcf	17,4	;volatile
 12646  167F  0008               	return
 12647  1680                     __end_of_EUSART_Transmit_ISR:	
 12648                           
 12649                           	psect	text72
 12650  0E2D                     __ptext72:	
 12651 ;; *************** function _EUSART_Receive_ISR *****************
 12652 ;; Defined at:
 12653 ;;		line 169 in file "mcc_generated_files/eusart.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;		None
 12656 ;; Auto vars:     Size  Location     Type
 12657 ;;  rx_tmp          1   13[COMMON] unsigned char 
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  1    wreg      void 
 12660 ;; Registers used:
 12661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;Total ram usage:        3 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    1
 12674 ;; This function calls:
 12675 ;;		_RxFrameCheck
 12676 ;; This function is called by:
 12677 ;;		_INTERRUPT_InterruptManager
 12678 ;; This function uses a non-reentrant model
 12679 ;;
 12680                           
 12681                           
 12682                           ;psect for function _EUSART_Receive_ISR
 12683  0E2D                     _EUSART_Receive_ISR:	
 12684                           
 12685                           ;eusart.c: 170: unsigned char rx_tmp;
 12686                           ;eusart.c: 171: if (1 == RCSTAbits.OERR) {
 12687                           
 12688                           ;incstack = 0
 12689                           ; Regs used in _EUSART_Receive_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12690  0E2D  0023               	movlb	3	; select bank3
 12691  0E2E  1C9D               	btfss	29,1	;volatile
 12692  0E2F  2E32               	goto	i1l4502
 12693                           
 12694                           ;eusart.c: 174: RCSTAbits.CREN = 0;
 12695  0E30  121D               	bcf	29,4	;volatile
 12696                           
 12697                           ;eusart.c: 175: RCSTAbits.CREN = 1;
 12698  0E31  161D               	bsf	29,4	;volatile
 12699  0E32                     i1l4502:	
 12700                           
 12701                           ;eusart.c: 176: }
 12702                           ;eusart.c: 177: rx_tmp = RCREG;
 12703  0E32  0819               	movf	25,w	;volatile
 12704  0E33  00FB               	movwf	??_EUSART_Receive_ISR
 12705  0E34  087B               	movf	??_EUSART_Receive_ISR,w
 12706  0E35  00FD               	movwf	EUSART_Receive_ISR@rx_tmp
 12707                           
 12708                           ;eusart.c: 178: Usart_Rx_Buff[Usart_Rx_Cnt] = rx_tmp ;
 12709  0E36  087D               	movf	EUSART_Receive_ISR@rx_tmp,w
 12710  0E37  00FB               	movwf	??_EUSART_Receive_ISR
 12711  0E38  0020               	movlb	0	; select bank0
 12712  0E39  0867               	movf	_Usart_Rx_Cnt,w
 12713  0E3A  3E34               	addlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 12714  0E3B  0086               	movwf	6
 12715  0E3C  3001               	movlw	1	; select bank2/3
 12716  0E3D  0087               	movwf	7
 12717  0E3E  087B               	movf	??_EUSART_Receive_ISR,w
 12718  0E3F  0081               	movwf	1
 12719                           
 12720                           ;eusart.c: 179: Usart_Rx_Cnt++;
 12721  0E40  3001               	movlw	1
 12722  0E41  00FB               	movwf	??_EUSART_Receive_ISR
 12723  0E42  087B               	movf	??_EUSART_Receive_ISR,w
 12724  0E43  07E7               	addwf	_Usart_Rx_Cnt,f
 12725                           
 12726                           ;eusart.c: 180: Usart_Run_Flag = 10;
 12727  0E44  300A               	movlw	10
 12728  0E45  00FB               	movwf	??_EUSART_Receive_ISR
 12729  0E46  087B               	movf	??_EUSART_Receive_ISR,w
 12730  0E47  0021               	movlb	1	; select bank1
 12731  0E48  00BD               	movwf	_Usart_Run_Flag^(0+128)
 12732                           
 12733                           ;eusart.c: 181: SWDTEN = 0;
 12734  0E49  1017               	bcf	23,0	;volatile
 12735                           
 12736                           ;eusart.c: 192: if( Usart_Rx_Cnt == 1)
 12737  0E4A  0020               	movlb	0	; select bank0
 12738  0E4B  0367               	decf	_Usart_Rx_Cnt,w
 12739  0E4C  1D03               	btfss	3,2
 12740  0E4D  2E54               	goto	i1l4518
 12741                           
 12742                           ;eusart.c: 193: {
 12743                           ;eusart.c: 194: if( rx_tmp != 0xfe)
 12744  0E4E  30FE               	movlw	254
 12745  0E4F  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 12746  0E50  1903               	btfsc	3,2
 12747  0E51  0008               	return
 12748                           
 12749                           ;eusart.c: 195: {
 12750                           ;eusart.c: 196: Usart_Rx_Cnt = 0;
 12751  0E52  01E7               	clrf	_Usart_Rx_Cnt
 12752                           
 12753                           ;eusart.c: 197: }
 12754                           ;eusart.c: 198: }
 12755  0E53  0008               	return
 12756  0E54                     i1l4518:	
 12757                           
 12758                           ;eusart.c: 199: else if( Usart_Rx_Cnt == 2)
 12759  0E54  3002               	movlw	2
 12760  0E55  0667               	xorwf	_Usart_Rx_Cnt,w
 12761  0E56  1D03               	btfss	3,2
 12762  0E57  2E5E               	goto	i1l4524
 12763                           
 12764                           ;eusart.c: 200: {
 12765                           ;eusart.c: 201: if( rx_tmp != 0xfe)
 12766  0E58  30FE               	movlw	254
 12767  0E59  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 12768  0E5A  1903               	btfsc	3,2
 12769  0E5B  0008               	return
 12770                           
 12771                           ;eusart.c: 202: {
 12772                           ;eusart.c: 203: Usart_Rx_Cnt = 0;
 12773  0E5C  01E7               	clrf	_Usart_Rx_Cnt
 12774                           
 12775                           ;eusart.c: 204: }
 12776                           ;eusart.c: 205: }
 12777  0E5D  0008               	return
 12778  0E5E                     i1l4524:	
 12779                           
 12780                           ;eusart.c: 206: else if( Usart_Rx_Cnt == 4)
 12781  0E5E  3004               	movlw	4
 12782  0E5F  0667               	xorwf	_Usart_Rx_Cnt,w
 12783  0E60  1D03               	btfss	3,2
 12784  0E61  2E68               	goto	i1l4530
 12785                           
 12786                           ;eusart.c: 207: {
 12787                           ;eusart.c: 208: if( rx_tmp > 7)
 12788  0E62  3008               	movlw	8
 12789  0E63  027D               	subwf	EUSART_Receive_ISR@rx_tmp,w
 12790  0E64  1C03               	skipc
 12791  0E65  0008               	return
 12792                           
 12793                           ;eusart.c: 209: {
 12794                           ;eusart.c: 210: Usart_Rx_Cnt = 0;
 12795  0E66  01E7               	clrf	_Usart_Rx_Cnt
 12796                           
 12797                           ;eusart.c: 211: }
 12798                           ;eusart.c: 212: }
 12799  0E67  0008               	return
 12800  0E68                     i1l4530:	
 12801                           
 12802                           ;eusart.c: 213: else if( Usart_Rx_Cnt > 14)
 12803  0E68  300F               	movlw	15
 12804  0E69  0267               	subwf	_Usart_Rx_Cnt,w
 12805  0E6A  1C03               	skipc
 12806  0E6B  2E6E               	goto	i1l4534
 12807                           
 12808                           ;eusart.c: 214: {
 12809                           ;eusart.c: 215: Usart_Rx_Cnt = 0;
 12810  0E6C  01E7               	clrf	_Usart_Rx_Cnt
 12811                           
 12812                           ;eusart.c: 216: }
 12813  0E6D  0008               	return
 12814  0E6E                     i1l4534:	
 12815                           
 12816                           ;eusart.c: 217: else if( (Usart_Rx_Cnt == (Usart_Rx_Buff[3]+7)) && ( rx_tmp == 0Xbb) )
 12817  0E6E  0022               	movlb	2	; select bank2
 12818  0E6F  0837               	movf	(_Usart_Rx_Buff^(0+256)+3),w
 12819  0E70  3E07               	addlw	7
 12820  0E71  00FB               	movwf	??_EUSART_Receive_ISR
 12821  0E72  3000               	movlw	0
 12822  0E73  1803               	skipnc
 12823  0E74  3001               	movlw	1
 12824  0E75  00FC               	movwf	??_EUSART_Receive_ISR+1
 12825  0E76  0020               	movlb	0	; select bank0
 12826  0E77  0867               	movf	_Usart_Rx_Cnt,w
 12827  0E78  067B               	xorwf	??_EUSART_Receive_ISR,w
 12828  0E79  047C               	iorwf	??_EUSART_Receive_ISR+1,w
 12829  0E7A  1D03               	skipz
 12830  0E7B  0008               	return
 12831  0E7C  30BB               	movlw	187
 12832  0E7D  067D               	xorwf	EUSART_Receive_ISR@rx_tmp,w
 12833  0E7E  1D03               	btfss	3,2
 12834  0E7F  0008               	return
 12835                           
 12836                           ;eusart.c: 218: {
 12837                           ;eusart.c: 219: if(RxFrameCheck(Usart_Rx_Buff,Usart_Rx_Cnt))
 12838  0E80  0867               	movf	_Usart_Rx_Cnt,w
 12839  0E81  00FB               	movwf	??_EUSART_Receive_ISR
 12840  0E82  087B               	movf	??_EUSART_Receive_ISR,w
 12841  0E83  00F0               	movwf	RxFrameCheck@frame_len
 12842  0E84  3034               	movlw	(low (_Usart_Rx_Buff| (0+256)))& (0+255)
 12843  0E85  3186  2669  318E   	fcall	_RxFrameCheck
 12844  0E88  3A00               	xorlw	0
 12845  0E89  1D03               	btfss	3,2
 12846  0E8A  2E90               	goto	i1l4544
 12847  0E8B  2E99               	goto	i1l4546
 12848  0E8C                     i1l190:	
 12849                           ;eusart.c: 225: case 0X02: Set_time_cmd_flag = 1;
 12850                           
 12851                           ;eusart.c: 224: break;
 12852                           
 12853                           ;eusart.c: 222: {
 12854                           ;eusart.c: 223: case 0x01:
 12855                           
 12856                           ;eusart.c: 220: {
 12857                           ;eusart.c: 221: switch( Usart_Rx_Buff[2] )
 12858                           
 12859  0E8C  0021               	movlb	1	; select bank1
 12860  0E8D  01BC               	clrf	_Set_time_cmd_flag^(0+128)
 12861  0E8E  0ABC               	incf	_Set_time_cmd_flag^(0+128),f
 12862                           
 12863                           ;eusart.c: 228: }
 12864                           
 12865                           ;eusart.c: 227: default:break;
 12866                           
 12867                           ;eusart.c: 226: break;
 12868  0E8F  2E99               	goto	i1l4546
 12869  0E90                     i1l4544:	
 12870  0E90  0022               	movlb	2	; select bank2
 12871  0E91  0836               	movf	(_Usart_Rx_Buff^(0+256)+2),w
 12872                           
 12873                           ; Switch size 1, requested type "space"
 12874                           ; Number of cases is 2, Range of values is 1 to 2
 12875                           ; switch strategies available:
 12876                           ; Name         Instructions Cycles
 12877                           ; simple_byte            7     4 (average)
 12878                           ; direct_byte           13     9 (fixed)
 12879                           ; jumptable            263     9 (fixed)
 12880                           ;	Chosen strategy is simple_byte
 12881  0E92  3A01               	xorlw	1	; case 1
 12882  0E93  1903               	skipnz
 12883  0E94  2E99               	goto	i1l4546
 12884  0E95  3A03               	xorlw	3	; case 2
 12885  0E96  1903               	skipnz
 12886  0E97  2E8C               	goto	i1l190
 12887  0E98  2E99               	goto	i1l4546
 12888  0E99                     i1l4546:	
 12889                           
 12890                           ;eusart.c: 229: }
 12891                           ;eusart.c: 230: Usart_Rx_Cnt = 0;
 12892  0E99  0020               	movlb	0	; select bank0
 12893  0E9A  01E7               	clrf	_Usart_Rx_Cnt
 12894  0E9B  0008               	return
 12895  0E9C                     __end_of_EUSART_Receive_ISR:	
 12896                           
 12897                           	psect	text73
 12898  0669                     __ptext73:	
 12899 ;; *************** function _RxFrameCheck *****************
 12900 ;; Defined at:
 12901 ;;		line 85 in file "mcc_generated_files/com.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;  rx_arr          1    wreg     PTR unsigned char 
 12904 ;;		 -> Usart_Rx_Buff(32), 
 12905 ;;  frame_len       1    0[COMMON] unsigned char 
 12906 ;; Auto vars:     Size  Location     Type
 12907 ;;  rx_arr          1    8[COMMON] PTR unsigned char 
 12908 ;;		 -> Usart_Rx_Buff(32), 
 12909 ;;  remainder       2    9[COMMON] unsigned int 
 12910 ;;  tmp_crc         2    5[COMMON] unsigned int 
 12911 ;;  i               1    7[COMMON] unsigned char 
 12912 ;; Return value:  Size  Location     Type
 12913 ;;                  1    wreg      unsigned char 
 12914 ;; Registers used:
 12915 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12916 ;; Tracked objects:
 12917 ;;		On entry : 0/0
 12918 ;;		On exit  : 0/0
 12919 ;;		Unchanged: 0/0
 12920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12921 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;Total ram usage:       11 bytes
 12926 ;; Hardware stack levels used:    1
 12927 ;; This function calls:
 12928 ;;		Nothing
 12929 ;; This function is called by:
 12930 ;;		_EUSART_Receive_ISR
 12931 ;; This function uses a non-reentrant model
 12932 ;;
 12933                           
 12934                           
 12935                           ;psect for function _RxFrameCheck
 12936  0669                     _RxFrameCheck:	
 12937                           
 12938                           ;incstack = 0
 12939                           ; Regs used in _RxFrameCheck: [wreg+fsr1l+fsr1h+status,2+status,0]
 12940                           ;RxFrameCheck@rx_arr stored from wreg
 12941  0669  00F8               	movwf	RxFrameCheck@rx_arr
 12942                           
 12943                           ;com.c: 87: unsigned char i = 0;
 12944  066A  01F7               	clrf	RxFrameCheck@i
 12945                           
 12946                           ;com.c: 88: unsigned int remainder = 0;
 12947  066B  01F9               	clrf	RxFrameCheck@remainder
 12948  066C  01FA               	clrf	RxFrameCheck@remainder+1
 12949                           
 12950                           ;com.c: 89: unsigned int tmp_crc = 0;
 12951  066D  01F5               	clrf	RxFrameCheck@tmp_crc
 12952  066E  01F6               	clrf	RxFrameCheck@tmp_crc+1
 12953                           
 12954                           ;com.c: 91: for(i = 2; i < frame_len - 3; i++)
 12955  066F  3002               	movlw	2
 12956  0670  00F1               	movwf	??_RxFrameCheck
 12957  0671  0871               	movf	??_RxFrameCheck,w
 12958  0672  00F7               	movwf	RxFrameCheck@i
 12959  0673                     i1l4348:	
 12960  0673  0870               	movf	RxFrameCheck@frame_len,w
 12961  0674  3EFD               	addlw	253
 12962  0675  00F1               	movwf	??_RxFrameCheck
 12963  0676  30FF               	movlw	255
 12964  0677  1803               	skipnc
 12965  0678  3000               	movlw	0
 12966  0679  00F2               	movwf	??_RxFrameCheck+1
 12967  067A  0872               	movf	??_RxFrameCheck+1,w
 12968  067B  3A80               	xorlw	128
 12969  067C  3C80               	sublw	128
 12970  067D  1D03               	skipz
 12971  067E  2E81               	goto	u340_25
 12972  067F  0871               	movf	??_RxFrameCheck,w
 12973  0680  0277               	subwf	RxFrameCheck@i,w
 12974  0681                     u340_25:	
 12975  0681  1803               	btfsc	3,0
 12976  0682  2EDE               	goto	i1l4350
 12977                           
 12978                           ;com.c: 92: {
 12979                           ;com.c: 93: remainder = (unsigned int)((remainder >> 8) | (remainder << 8));
 12980  0683  0879               	movf	RxFrameCheck@remainder,w
 12981  0684  00F2               	movwf	??_RxFrameCheck+1
 12982  0685  01F1               	clrf	??_RxFrameCheck
 12983  0686  087A               	movf	RxFrameCheck@remainder+1,w
 12984  0687  00F4               	movwf	??_RxFrameCheck+3
 12985  0688  0879               	movf	RxFrameCheck@remainder,w
 12986  0689  00F3               	movwf	??_RxFrameCheck+2
 12987  068A  0874               	movf	??_RxFrameCheck+3,w
 12988  068B  00F3               	movwf	??_RxFrameCheck+2
 12989  068C  01F4               	clrf	??_RxFrameCheck+3
 12990  068D  0871               	movf	??_RxFrameCheck,w
 12991  068E  0473               	iorwf	??_RxFrameCheck+2,w
 12992  068F  00F9               	movwf	RxFrameCheck@remainder
 12993  0690  0872               	movf	??_RxFrameCheck+1,w
 12994  0691  0474               	iorwf	??_RxFrameCheck+3,w
 12995  0692  00FA               	movwf	RxFrameCheck@remainder+1
 12996                           
 12997                           ;com.c: 94: remainder ^= rx_arr[i];
 12998  0693  0877               	movf	RxFrameCheck@i,w
 12999  0694  0778               	addwf	RxFrameCheck@rx_arr,w
 13000  0695  00F1               	movwf	??_RxFrameCheck
 13001  0696  0871               	movf	??_RxFrameCheck,w
 13002  0697  0086               	movwf	6
 13003  0698  3001               	movlw	1	; select bank2/3
 13004  0699  0087               	movwf	7
 13005  069A  0801               	movf	1,w
 13006  069B  00F2               	movwf	??_RxFrameCheck+1
 13007  069C  01F3               	clrf	??_RxFrameCheck+2
 13008  069D  0872               	movf	??_RxFrameCheck+1,w
 13009  069E  06F9               	xorwf	RxFrameCheck@remainder,f
 13010  069F  0873               	movf	??_RxFrameCheck+2,w
 13011  06A0  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13012                           
 13013                           ;com.c: 95: remainder ^= (unsigned int)((remainder & 0xFF) >> 4);
 13014  06A1  087A               	movf	RxFrameCheck@remainder+1,w
 13015  06A2  00F2               	movwf	??_RxFrameCheck+1
 13016  06A3  0879               	movf	RxFrameCheck@remainder,w
 13017  06A4  00F1               	movwf	??_RxFrameCheck
 13018  06A5  3004               	movlw	4
 13019  06A6                     u339_25:	
 13020  06A6  36F2               	lsrf	??_RxFrameCheck+1,f
 13021  06A7  0CF1               	rrf	??_RxFrameCheck,f
 13022  06A8  0B89               	decfsz	9,f
 13023  06A9  2EA6               	goto	u339_25
 13024  06AA  300F               	movlw	15
 13025  06AB  0571               	andwf	??_RxFrameCheck,w
 13026  06AC  00F3               	movwf	??_RxFrameCheck+2
 13027  06AD  3000               	movlw	0
 13028  06AE  0572               	andwf	??_RxFrameCheck+1,w
 13029  06AF  00F4               	movwf	??_RxFrameCheck+3
 13030  06B0  0873               	movf	??_RxFrameCheck+2,w
 13031  06B1  06F9               	xorwf	RxFrameCheck@remainder,f
 13032  06B2  0874               	movf	??_RxFrameCheck+3,w
 13033  06B3  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13034                           
 13035                           ;com.c: 96: remainder ^= (unsigned int)((remainder << 8) << 4);
 13036  06B4  0879               	movf	RxFrameCheck@remainder,w
 13037  06B5  00F2               	movwf	??_RxFrameCheck+1
 13038  06B6  01F1               	clrf	??_RxFrameCheck
 13039  06B7  0EF1               	swapf	??_RxFrameCheck,f
 13040  06B8  0EF2               	swapf	??_RxFrameCheck+1,f
 13041  06B9  30F0               	movlw	240
 13042  06BA  05F2               	andwf	??_RxFrameCheck+1,f
 13043  06BB  0871               	movf	??_RxFrameCheck,w
 13044  06BC  390F               	andlw	15
 13045  06BD  04F2               	iorwf	??_RxFrameCheck+1,f
 13046  06BE  30F0               	movlw	240
 13047  06BF  05F1               	andwf	??_RxFrameCheck,f
 13048  06C0  0871               	movf	??_RxFrameCheck,w
 13049  06C1  06F9               	xorwf	RxFrameCheck@remainder,f
 13050  06C2  0872               	movf	??_RxFrameCheck+1,w
 13051  06C3  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13052                           
 13053                           ;com.c: 97: remainder ^= (unsigned int)(((remainder & 0xFF) << 4) << 1);
 13054  06C4  30FF               	movlw	255
 13055  06C5  0579               	andwf	RxFrameCheck@remainder,w
 13056  06C6  00F1               	movwf	??_RxFrameCheck
 13057  06C7  3000               	movlw	0
 13058  06C8  057A               	andwf	RxFrameCheck@remainder+1,w
 13059  06C9  00F2               	movwf	??_RxFrameCheck+1
 13060  06CA  0EF1               	swapf	??_RxFrameCheck,f
 13061  06CB  0EF2               	swapf	??_RxFrameCheck+1,f
 13062  06CC  30F0               	movlw	240
 13063  06CD  05F2               	andwf	??_RxFrameCheck+1,f
 13064  06CE  0871               	movf	??_RxFrameCheck,w
 13065  06CF  390F               	andlw	15
 13066  06D0  04F2               	iorwf	??_RxFrameCheck+1,f
 13067  06D1  30F0               	movlw	240
 13068  06D2  05F1               	andwf	??_RxFrameCheck,f
 13069  06D3  35F1               	lslf	??_RxFrameCheck,f
 13070  06D4  0DF2               	rlf	??_RxFrameCheck+1,f
 13071  06D5  0871               	movf	??_RxFrameCheck,w
 13072  06D6  06F9               	xorwf	RxFrameCheck@remainder,f
 13073  06D7  0872               	movf	??_RxFrameCheck+1,w
 13074  06D8  06FA               	xorwf	RxFrameCheck@remainder+1,f
 13075  06D9  3001               	movlw	1
 13076  06DA  00F1               	movwf	??_RxFrameCheck
 13077  06DB  0871               	movf	??_RxFrameCheck,w
 13078  06DC  07F7               	addwf	RxFrameCheck@i,f
 13079  06DD  2E73               	goto	i1l4348
 13080  06DE                     i1l4350:	
 13081                           
 13082                           ;com.c: 98: }
 13083                           ;com.c: 100: tmp_crc = rx_arr[frame_len - 2];
 13084  06DE  0870               	movf	RxFrameCheck@frame_len,w
 13085  06DF  3EFE               	addlw	-2
 13086  06E0  0778               	addwf	RxFrameCheck@rx_arr,w
 13087  06E1  00F1               	movwf	??_RxFrameCheck
 13088  06E2  0871               	movf	??_RxFrameCheck,w
 13089  06E3  0086               	movwf	6
 13090  06E4  3001               	movlw	1	; select bank2/3
 13091  06E5  0087               	movwf	7
 13092  06E6  0801               	movf	1,w
 13093  06E7  00F2               	movwf	??_RxFrameCheck+1
 13094  06E8  01F3               	clrf	??_RxFrameCheck+2
 13095  06E9  0872               	movf	??_RxFrameCheck+1,w
 13096  06EA  00F5               	movwf	RxFrameCheck@tmp_crc
 13097  06EB  0873               	movf	??_RxFrameCheck+2,w
 13098  06EC  00F6               	movwf	RxFrameCheck@tmp_crc+1
 13099                           
 13100                           ;com.c: 101: tmp_crc<<=8;
 13101  06ED  3008               	movlw	8
 13102  06EE                     u341_25:	
 13103  06EE  35F5               	lslf	RxFrameCheck@tmp_crc,f
 13104  06EF  0DF6               	rlf	RxFrameCheck@tmp_crc+1,f
 13105  06F0  0B89               	decfsz	9,f
 13106  06F1  2EEE               	goto	u341_25
 13107                           
 13108                           ;com.c: 102: tmp_crc|=rx_arr[frame_len - 3];
 13109  06F2  0870               	movf	RxFrameCheck@frame_len,w
 13110  06F3  3EFD               	addlw	-3
 13111  06F4  0778               	addwf	RxFrameCheck@rx_arr,w
 13112  06F5  00F1               	movwf	??_RxFrameCheck
 13113  06F6  0871               	movf	??_RxFrameCheck,w
 13114  06F7  0086               	movwf	6
 13115  06F8  3001               	movlw	1	; select bank2/3
 13116  06F9  0087               	movwf	7
 13117  06FA  0801               	movf	1,w
 13118  06FB  00F2               	movwf	??_RxFrameCheck+1
 13119  06FC  01F3               	clrf	??_RxFrameCheck+2
 13120  06FD  0872               	movf	??_RxFrameCheck+1,w
 13121  06FE  04F5               	iorwf	RxFrameCheck@tmp_crc,f
 13122  06FF  0873               	movf	??_RxFrameCheck+2,w
 13123  0700  04F6               	iorwf	RxFrameCheck@tmp_crc+1,f
 13124                           
 13125                           ;com.c: 108: if(remainder == tmp_crc)
 13126  0701  0876               	movf	RxFrameCheck@tmp_crc+1,w
 13127  0702  067A               	xorwf	RxFrameCheck@remainder+1,w
 13128  0703  1D03               	skipz
 13129  0704  2F07               	goto	u342_25
 13130  0705  0875               	movf	RxFrameCheck@tmp_crc,w
 13131  0706  0679               	xorwf	RxFrameCheck@remainder,w
 13132  0707                     u342_25:	
 13133  0707  1D03               	skipz
 13134  0708  2F0B               	goto	i1l4362
 13135                           
 13136                           ;com.c: 109: {
 13137                           ;com.c: 110: return 1;
 13138  0709  3001               	movlw	1
 13139                           
 13140                           ;com.c: 111: }
 13141  070A  0008               	return
 13142  070B                     i1l4362:	
 13143                           
 13144                           ;com.c: 112: else
 13145                           ;com.c: 113: {
 13146                           ;com.c: 114: return 0;
 13147  070B  3000               	movlw	0
 13148  070C  0008               	return
 13149  070D                     __end_of_RxFrameCheck:	
 13150  007E                     btemp	set	126	;btemp
 13151  007E                     int$flags	set	126
 13152  007E                     wtemp	set	126
 13153  007E                     wtemp0	set	126
 13154  0080                     wtemp1	set	128
 13155  0082                     wtemp2	set	130
 13156  0084                     wtemp3	set	132
 13157  0086                     wtemp4	set	134
 13158  0088                     wtemp5	set	136
 13159  007F                     wtemp6	set	127
 13160  007E                     ttemp	set	126
 13161  007E                     ttemp0	set	126
 13162  0081                     ttemp1	set	129
 13163  0084                     ttemp2	set	132
 13164  0087                     ttemp3	set	135
 13165  007F                     ttemp4	set	127
 13166  007E                     ltemp	set	126
 13167  007E                     ltemp0	set	126
 13168  0082                     ltemp1	set	130
 13169  0086                     ltemp2	set	134
 13170  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    21
    Data        10
    BSS         201
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     68      75
    BANK1            80      0      80
    BANK2            80      5      67
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 7
		 -> rtc_save_ch2(BANK1[7]), rtc_save_ch1(BANK1[7]), 

    memset@p1	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    memset@p	PTR unsigned char  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    CRC_cal@rx_arr	PTR unsigned char  size(1) Largest target is 16
		 -> Read_time_to_Com@tmp_buf(BANK0[16]), 

    RxFrameCheck@rx_arr	PTR unsigned char  size(1) Largest target is 32
		 -> Usart_Rx_Buff(BANK2[32]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    Bq32k_Rtc_Write_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    Bq32k_Rtc_Read_Time@p	PTR struct bq32k_regs size(1) Largest target is 7
		 -> rtc_tm(BANK1[7]), 

    I2C_Send_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Write_Time@temp(BANK0[10]), Bq32k_Time_Init@temp(BANK0[10]), 

    I2C_Read_Buffer@buff	PTR unsigned char  size(1) Largest target is 10
		 -> Bq32k_Rtc_Read_Time@temp(BANK0[10]), 

    sp__memset	PTR void  size(1) Largest target is 4
		 -> display_buff(BANK1[4]), 

    WriteAll_1621@p	PTR unsigned char  size(2) Largest target is 21
		 -> time_Display@num(BANK0[4]), err_Display@num(BANK0[4]), Two_Display@num(BANK0[4]), display_buff(BANK1[4]), 
		 -> Dis_TAB(CODE[21]), 

    maxim_31856_read_nregisters@uch_buff	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    SPI_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 8
		 -> uch_reg(BANK1[8]), 

    SPI_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _TMR0_ISR->_TMR0_CallBack
    _EUSART_Receive_ISR->_RxFrameCheck

Critical Paths under _main in BANK0

    _main->_Key_Process
    _Sleep_process->_Step_control
    _Save_process->_Calculate_Time
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize
    _temperature_process->_temperature_display
    _time_Display->_Bq32k_Rtc_Read_Time
    _temperature_display->_tc_temperature_trans
    _tc_temperature_trans->_Calculate_Time
    _Calculate_Time->_Save_Write_time
    _Write_Flash_head->_FLASH_WriteWord
    _Write_Flash_finish->_FLASH_WriteWord
    _Save_Write_time->_Bq32k_Rtc_Read_Time
    _Save_Write_word->_FLASH_WriteWord
    _maxim_clear_fault_status->_maxim_31856_read_register
    _err_Display->_WriteAll_1621
    _Tc_Display->___lwdiv
    ___lwdiv->___lwmod
    _one_temperature_trans->_maxim_31856_read_nregisters
    _maxim_start_conversion->_maxim_31856_read_register
    _maxim_31856_write_register->_SPI_Exchange8bit
    _maxim_31856_read_register->_SPI_Exchange8bit
    _maxim_31856_read_nregisters->_SPI_Exchange8bitBuffer
    _SPI_Exchange8bitBuffer->_SPI_Exchange8bit
    _Two_Display->_WriteAll_1621
    _WriteAll_1621->_SendBit_1621
    _WriteAll_1621->_SendDataBit_1621
    _SendCmd_1621->_SendBit_1621
    _Com_Process->_Set_time_from_Com
    _Set_time_from_Com->_Bq32k_Rtc_Write_Time
    _Set_time_from_Com->_Read_time_to_Com
    _Read_time_to_Com->_CRC_cal
    _Bq32k_Rtc_Write_Time->_bin2bcd
    _bin2bcd->___awdiv
    _Bq32k_Rtc_Read_Time->_I2C_Read_Buffer
    _Bq32k_Rtc_Read_Time->_bcd2bin
    _bcd2bin->___bmul
    _I2C_Read_Buffer->_I2C_Receive_Byte
    _I2C_Read_Buffer->_I2C_Send_Byte
    _Bq32k_Time_Init->_I2C_Send_Buffer
    _I2C_Send_Buffer->_I2C_Send_Byte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   98733
                                             65 BANK0      3     3      0
                                              0 BANK2      5     5      0
                  _ADC_GetConversion
                    _Bq32k_Time_Init
                        _Com_Process
                        _Key_Process
                  _SYSTEM_Initialize
                       _Save_process
                       _SendCmd_1621
                  _Serach_Flash_Head
                      _Sleep_process
                      _WriteAll_1621
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _Sleep_process                                        0     0      0       0
                       _Step_control
 ---------------------------------------------------------------------------------
 (2) _Step_control                                         1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serach_Flash_Head                                    6     6      0    1866
                                              6 BANK0      6     6      0
                     _FLASH_ReadWord
                 _Write_Flash_finish
 ---------------------------------------------------------------------------------
 (1) _Save_process                                         4     4      0   13320
                                             46 BANK0      4     4      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Key_Process                                          6     6      0   40567
                                             59 BANK0      6     6      0
                       _EUSART_Write
                     _FLASH_ReadWord
                           _Key_Scan
                    _Save_Write_time
                       _SendCmd_1621
                    _Set_finish_flag
                     _Set_start_flag
                 _Write_Flash_finish
                   _Write_Flash_head
                _temperature_process
 ---------------------------------------------------------------------------------
 (1) _temperature_process                                  0     0      0   32281
                        _Two_Display
              _one_temperature_trans
                _temperature_display
                       _time_Display
 ---------------------------------------------------------------------------------
 (2) _time_Display                                         7     7      0    5180
                                             22 BANK0      7     7      0
                _Bq32k_Rtc_Read_Time
                      _WriteAll_1621
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _temperature_display                                  1     1      0   22536
                                             58 BANK0      1     1      0
                         _Tc_Display
                        _err_Display
         _maxim_31856_write_register
           _maxim_clear_fault_status
               _tc_temperature_trans
 ---------------------------------------------------------------------------------
 (3) _tc_temperature_trans                                12    12      0   14099
                                             46 BANK0     12    12      0
                     _Calculate_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Calculate_Time                                      22    22      0   10143
                                             24 BANK0     22    22      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_time
                 _Write_Flash_finish
                   _Write_Flash_head
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1368
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_head                                     0     0      0    1236
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Write_Flash_finish                                   0     0      0    1236
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _Save_Write_time                                      3     3      0    4589
                                             22 BANK0      2     2      0
                _Bq32k_Rtc_Read_Time
                    _Save_Write_word
 ---------------------------------------------------------------------------------
 (4) _Save_Write_word                                      4     2      2    3088
                                              6 BANK0      4     2      2
                   _FLASH_EraseBlock
                    _FLASH_WriteWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     327
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _maxim_clear_fault_status                             1     1      0    1652
                                              5 BANK0      1     1      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (3) _err_Display                                          5     5      0    1834
                                             11 BANK0      5     5      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _Tc_Display                                           4     4      0    3395
                                             15 BANK0      4     4      0
                      _WriteAll_1621
                            ___lwdiv
                            ___lwmod
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     324
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     540
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     703
                                              7 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _one_temperature_trans                                2     2      0    2700
                                             14 BANK0      2     2      0
        _maxim_31856_read_nregisters
             _maxim_start_conversion
 ---------------------------------------------------------------------------------
 (3) _maxim_start_conversion                               2     2      0    1683
                                              5 BANK0      2     2      0
          _maxim_31856_read_register
         _maxim_31856_write_register
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_write_register                           2     1      1    1556
                                              2 BANK0      2     1      1
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _maxim_31856_read_register                            3     3      0      96
                                              2 BANK0      3     3      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _maxim_31856_read_nregisters                          5     3      2    1017
                                              9 BANK0      5     3      2
                   _SPI_Exchange8bit
             _SPI_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (4) _SPI_Exchange8bitBuffer                               7     5      2     739
                                              2 BANK0      7     5      2
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI_Exchange8bit                                     1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Two_Display                                          6     6      0    1865
                                             11 BANK0      6     6      0
                      _WriteAll_1621
 ---------------------------------------------------------------------------------
 (3) _WriteAll_1621                                        6     3      3    1723
                                              5 BANK0      6     3      3
                       _SendBit_1621
                   _SendDataBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendDataBit_1621                                     4     3      1     256
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Set_start_flag                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_finish_flag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendCmd_1621                                         2     2      0     595
                                              5 BANK0      2     2      0
                       _SendBit_1621
 ---------------------------------------------------------------------------------
 (4) _SendBit_1621                                         4     3      1     564
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Key_Scan                                             3     3      0      40
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Com_Process                                          0     0      0    5747
                  _Set_time_from_Com
 ---------------------------------------------------------------------------------
 (2) _Set_time_from_Com                                    1     1      0    5747
                                             31 BANK0      1     1      0
                _Bq32k_Rtc_Read_Time
               _Bq32k_Rtc_Write_Time
                   _Read_time_to_Com
 ---------------------------------------------------------------------------------
 (3) _Read_time_to_Com                                    20    20      0    1197
                                             11 BANK0     20    20      0
                            _CRC_cal
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      31
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _CRC_cal                                             10     8      2     447
                                              1 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Write_Time                                13    13      0    3049
                                             18 BANK0     13    13      0
                    _I2C_Send_Buffer
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (4) _bin2bcd                                              8     8      0    1864
                                             10 BANK0      8     8      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     895
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     907
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _Bq32k_Rtc_Read_Time                                 13    13      0    1501
                                              9 BANK0     13    13      0
                    _I2C_Read_Buffer
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (4) _bcd2bin                                              4     4      0     275
                                              5 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     213
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Buffer                                      5     3      2     599
                                              4 BANK0      5     3      2
                   _I2C_Receive_Byte
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Receive_Byte                                     3     3      0     108
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Bq32k_Time_Init                                     19    19      0    2276
                                             11 BANK0     12    12      0
                     _FLASH_ReadWord
                    _FLASH_WriteWord
                    _I2C_Send_Buffer
 ---------------------------------------------------------------------------------
 (4) _I2C_Send_Buffer                                      7     5      2     676
                                              4 BANK0      7     5      2
                      _I2C_Send_Byte
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_Byte                                        3     3      0     102
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteWord                                      5     1      4    1236
                                              1 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              1 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      31
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0     548
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            1     1      0       0
                                              1 COMMON     1     1      0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  3     3      0     548
                                             11 COMMON     3     3      0
                       _RxFrameCheck
 ---------------------------------------------------------------------------------
 (12) _RxFrameCheck                                       11    10      1     437
                                              0 COMMON    11    10      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _Bq32k_Time_Init
     _FLASH_ReadWord
     _FLASH_WriteWord
     _I2C_Send_Buffer
       _I2C_Send_Byte
       _I2C_Start
       _I2C_Stop
   _Com_Process
     _Set_time_from_Com
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Bq32k_Rtc_Write_Time
         _I2C_Send_Buffer
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bin2bcd
           ___awdiv
           ___awmod
       _Read_time_to_Com
         _CRC_cal
         _EUSART_Write
   _Key_Process
     _EUSART_Write
     _FLASH_ReadWord
     _Key_Scan
     _Save_Write_time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_word
         _FLASH_EraseBlock
         _FLASH_WriteWord
     _SendCmd_1621
       _SendBit_1621
     _Set_finish_flag
     _Set_start_flag
     _Write_Flash_finish
       _FLASH_WriteWord
     _Write_Flash_head
       _FLASH_WriteWord
     _temperature_process
       _Two_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _one_temperature_trans
         _maxim_31856_read_nregisters
           _SPI_Exchange8bit
           _SPI_Exchange8bitBuffer
             _SPI_Exchange8bit
         _maxim_start_conversion
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
       _temperature_display
         _Tc_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
           _memset
         _err_Display
           _WriteAll_1621
             _SendBit_1621
             _SendDataBit_1621
         _maxim_31856_write_register
           _SPI_Exchange8bit
         _maxim_clear_fault_status
           _maxim_31856_read_register
             _SPI_Exchange8bit
           _maxim_31856_write_register
             _SPI_Exchange8bit
         _tc_temperature_trans
           _Calculate_Time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_time
               _Bq32k_Rtc_Read_Time
                 _I2C_Read_Buffer
                   _I2C_Receive_Byte
                   _I2C_Send_Byte
                   _I2C_Start
                   _I2C_Stop
                 _bcd2bin
                   ___bmul
               _Save_Write_word
                 _FLASH_EraseBlock
                 _FLASH_WriteWord
             _Write_Flash_finish
               _FLASH_WriteWord
             _Write_Flash_head
               _FLASH_WriteWord
             ___wmul
           _Save_Write_word
             _FLASH_EraseBlock
             _FLASH_WriteWord
       _time_Display
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___awdiv
         ___awmod
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR0_Initialize
   _Save_process
     _Calculate_Time
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _Save_Write_time
         _Bq32k_Rtc_Read_Time
           _I2C_Read_Buffer
             _I2C_Receive_Byte
             _I2C_Send_Byte
             _I2C_Start
             _I2C_Stop
           _bcd2bin
             ___bmul
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_WriteWord
       _Write_Flash_finish
         _FLASH_WriteWord
       _Write_Flash_head
         _FLASH_WriteWord
       ___wmul
     _Save_Write_word
       _FLASH_EraseBlock
       _FLASH_WriteWord
   _SendCmd_1621
     _SendBit_1621
   _Serach_Flash_Head
     _FLASH_ReadWord
     _Write_Flash_finish
       _FLASH_WriteWord
   _Sleep_process
     _Step_control
   _WriteAll_1621
     _SendBit_1621
     _SendDataBit_1621
   _temperature_process
     _Two_Display
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
     _one_temperature_trans
       _maxim_31856_read_nregisters
         _SPI_Exchange8bit
         _SPI_Exchange8bitBuffer
           _SPI_Exchange8bit
       _maxim_start_conversion
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
     _temperature_display
       _Tc_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         _memset
       _err_Display
         _WriteAll_1621
           _SendBit_1621
           _SendDataBit_1621
       _maxim_31856_write_register
         _SPI_Exchange8bit
       _maxim_clear_fault_status
         _maxim_31856_read_register
           _SPI_Exchange8bit
         _maxim_31856_write_register
           _SPI_Exchange8bit
       _tc_temperature_trans
         _Calculate_Time
           _Bq32k_Rtc_Read_Time
             _I2C_Read_Buffer
               _I2C_Receive_Byte
               _I2C_Send_Byte
               _I2C_Start
               _I2C_Stop
             _bcd2bin
               ___bmul
           _Save_Write_time
             _Bq32k_Rtc_Read_Time
               _I2C_Read_Buffer
                 _I2C_Receive_Byte
                 _I2C_Send_Byte
                 _I2C_Start
                 _I2C_Stop
               _bcd2bin
                 ___bmul
             _Save_Write_word
               _FLASH_EraseBlock
               _FLASH_WriteWord
           _Write_Flash_finish
             _FLASH_WriteWord
           _Write_Flash_head
             _FLASH_WriteWord
           ___wmul
         _Save_Write_word
           _FLASH_EraseBlock
           _FLASH_WriteWord
     _time_Display
       _Bq32k_Rtc_Read_Time
         _I2C_Read_Buffer
           _I2C_Receive_Byte
           _I2C_Send_Byte
           _I2C_Start
           _I2C_Stop
         _bcd2bin
           ___bmul
       _WriteAll_1621
         _SendBit_1621
         _SendDataBit_1621
       ___awdiv
       ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
     _RxFrameCheck
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      5      43       9       83.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Jul 20 15:49:48 2016

                        __end_of_I2C_Send_Buffer 0A4C                                   _SPI_Initialize 14DE  
                     ?_maxim_31856_read_register 0070                                     _Usart_Rx_Cnt 0067  
  maxim_31856_read_register@uch_register_address 0023                                   ___bmul@product 0023  
                             __size_of_I2C_Start 001D                       FLASH_WriteWord@GIEBitValue 0025  
                                    __CFG_CP$OFF 0000                                ?_Write_Flash_head 0070  
                                  _Usart_Rx_Buff 0134                                               l71 1507  
                                   ___awdiv@sign 0027                          ?_SPI_Exchange8bitBuffer 0022  
                         __end_of_FVR_Initialize 14CE                              ___wmul@multiplicand 0023  
                               ?_Save_Write_time 0070                                 ?_Save_Write_word 0026  
                                _timer0ReloadVal 00EF                               ??_Write_Flash_head 0026  
                           Bq32k_Rtc_Read_Time@p 0035                                              l161 1522  
                                            l253 16CE                                              l602 011A  
                                            l620 0231                                              l604 01EF  
                                            l630 0B13                                              l622 025C  
                                            l614 01CD                                              l455 0430  
                                            l464 0464                                              l625 0264  
                                            l617 0229                                              l457 0432  
                                            l474 04D8                                              l717 1743  
                                            l733 1764                                              l629 0B14  
                                            l823 07AF                                              l719 1745  
                                            l735 1766                                              l817 07AA  
                                            l762 09A2                                              l674 0A10  
                                            l772 053E                                              l829 07D0  
                                            l773 0568                                              l839 07E7  
                                            l952 17FE                                              l858 08F7  
                                            l972 05D9                                              l957 17F4  
                                            l958 17F8                                              l990 0625  
                                            l983 061D                                              l984 0620  
                                            l976 05EF                                              l998 0659  
                                            _RB1 0069                                              _RB3 006B  
                                            _RB5 006D                                              _RA7 0067  
                                   ?_err_Display 0070                                     ___awmod@sign 0027  
                                 _Usart_Run_Flag 00BD                               _Write_Flash_finish 1779  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000                                 ?_FLASH_WriteWord 0021  
                         _maxim_start_conversion 15DC                              __end_of_Com_Process 14F5  
                                __end_of_CRC_cal 1000                                     __CFG_LVP$OFF 0000  
                                           l1002 0668                                             l1112 0E17  
                                           l1108 0DE3                                             l1252 1650  
                                           l1191 16EC                                             l5010 07B1  
                                           l5210 0C0A                                             l5060 0909  
                                           l5212 0C14                                             l6030 09E8  
                                           l5312 0BAD                                             l5320 0BD5  
                                           l5216 0C2A                                             l5400 035A  
                                           l6032 09EB                                             l5074 155E  
                                           l5330 0BDD                                             l5322 0BDA  
                                           l5410 0409                                             l6018 09DB  
                                           l6050 09FE                                             l6210 064A  
                                           l5180 0F39                                             l5500 0B07  
                                           l5244 173A                                             l5316 0BBB  
                                           l5420 1617                                             l6044 09F8  
                                           l6220 065E                                             l5182 0F64  
                                           l5078 1564                                             l5430 0C50  
                                           l5342 0988                                             l5318 0BD0  
                                           l6046 09FB                                             l6214 0651  
                                           l5256 175B                                             l6080 0813  
                                           l6058 17E6                                             l5522 09CC  
                                           l5514 09AE                                             l5610 00C6  
                                           l6242 0DF9                                             l6154 0B9B  
                                           l6146 0B8E                                             l6138 0B7F  
                                           l6082 0814                                             l6410 04AD  
                                           l5436 0C5B                                             l5516 09BA  
                                           l5540 0893                                             l5292 164A  
                                           l6180 05FC                                             l6172 05E2  
                                           l6156 0B9D                                             l5462 0C92  
                                           l5454 0C81                                             l5446 0C63  
                                           l5526 09D5                                             l5390 034B  
                                           l5614 00D6                                             l6190 062E  
                                           l6422 04DA                                             l6350 043A  
                                           l5448 0C6F                                             l5544 089F  
                                           l6168 05DA                                             l6272 16F4  
                                           l6424 04DD                                             l6360 0466  
                                           l5458 0C8A                                             l5474 0AD1  
                                           l5538 0887                                             l5730 0506  
                                           l5386 0342                                             l5706 023A  
                                           l5618 00F0                                             l6186 0626  
                                           l5492 0AF6                                             l5548 08A8  
                                           l5740 059D                                             l5732 0521  
                                           l5636 0134                                             l6356 0453  
                                           l5486 0ADE                                             l5478 0AD8  
                                           l5806 0F8F                                             l5822 0B24  
                                           l5734 0583                                             l5670 01A3  
                                           l5662 0179                                             l5638 013D  
                                           l5488 0AEA                                             l5496 0AFF  
                                           l5808 0FFA                                             l5744 05A7  
                                           l5818 0B1C                                             l5738 058E  
                                           l5666 0189                                             l5780 0A2F  
                                           l5852 0AA9                                             l5844 0A99  
                                           l5782 0A49                                             l5688 01E7  
                                           l5856 0AB1                                             l5848 0AA1  
                            ?_Write_Flash_finish 0070                                             _LATA 010C  
                                           _LATB 010D                                             _LATC 010E  
                                           u5020 00A1                                             u5030 00A2  
                                           u5130 0154                                             u5140 0155  
                                           u4505 1656                                             u6107 0F4C  
                                           u6117 0F53                                             u4365 1579  
                                           u5085 00DF                                             u6207 16B0  
                                           u6127 0F5A                                             u6217 16B7  
                                           u6137 0F73                                             u5610 0947  
                                           u6307 07DC                                             u6227 1685  
                                           u6147 0F7A                                             u4715 0C70  
                                           u5195 0192                                             u6067 0423  
                                           u6317 07EE                                             u6237 168C  
                                           u6157 0F81                                             u4725 0C7A  
                                           u6077 176A                                             u6327 07F5  
                                           u6247 1693                                             u6167 08EC  
                                           u4735 0C82                                             u4815 0AF0  
                                           u5375 08D4                                             u6087 1749  
                                           u4495 1651                                             u6257 169A  
                                           u6177 08FE                                             u4825 0AF7  
                                           u5385 0FC2                                             u6097 17EA  
                                           u4905 09CD                                             u6267 07B4  
                                           u6187 16A2                                             u5395 0F9D  
                                           u6277 07BB                                             u6197 16A9  
                                           u6287 07C5                                             u4695 0C66  
                                           u4935 088A                                             u6297 07D5  
                                           u4865 09B1                                             u4795 0AE1  
                                           u4955 0899                                             u4885 09BB  
                                           u4965 08A0                                             u4895 09C5  
                                           _TMR0 0015                                             _WPUB 020D  
                                           _WPUE 0210                              RxFrameCheck@tmp_crc 0075  
                                   __CFG_WRT$OFF 0000                                    __CFG_FCMEN$ON 0000  
                        __size_of_Set_start_flag 0006                           __size_of_WriteAll_1621 0035  
                                  ??_Key_Process 005B                                             _main 040B  
                                           fsr0h 0005                                             fsr1h 0007  
                                           fsr0l 0004                                             indf0 0000  
                                           indf1 0001                                             fsr1l 0006  
                                           btemp 007E                                 __end_of_I2C_Stop 16BA  
                                  __CFG_BOREN$ON 0000                                             ltemp 007E  
                            SendCmd_1621@command 0026                                             start 0027  
                                           ttemp 007E                                             wtemp 007E  
                                __end_of_Dis_TAB 1815                                ?_Read_time_to_Com 0070  
                         __end_of_SPI_Initialize 14E4                                 ?_I2C_Read_Buffer 0024  
                              ___bmul@multiplier 0024                                    __CFG_MCLRE$ON 0000  
                                   main@bat_data 0161                               ??_Read_time_to_Com 002B  
                 __end_of_SPI_Exchange8bitBuffer 0BF4                                  time_Display@num 0039  
                           ??_Write_Flash_finish 0026                          __end_of_TMR0_Initialize 154A  
                                ?_FVR_Initialize 0070                                    ?_EUSART_Write 0070  
                 __size_of_OSCILLATOR_Initialize 0005                    __end_of_OSCILLATOR_Initialize 14D8  
                                __end_of_bcd2bin 1582                                            ?_main 0070  
                                __end_of___awdiv 0C97                                  __end_of___awmod 0B0C  
                                ___awdiv@divisor 0021                                            _LATA0 0860  
                                          _LATA1 0861                                            _LATB0 0868  
                                          _LATA2 0862                                  __end_of_bin2bcd 08DB  
                                          _LATB1 0869                                            _LATA3 0863  
                                          _LATC0 0870                                            _LATA4 0864  
                                          _LATC1 0871                                            _LATA5 0865  
                                          _LATC2 0872                                            _LATA6 0866  
                                __end_of___lwdiv 09DA                                            i1l305 1515  
                                          i1l322 0010                                            i1l324 001A  
                                          i1l190 0E8C                                            i1l167 167E  
                                          i1l328 0022                                  __end_of___lwmod 08AD  
                                ___awdiv@counter 0026                                            _RCREG 0199  
                                          _RCSTA 019D                                            u461m0 033B  
                                     _Flash_buff 01A0                                            u446m0 0EA9  
                                          u447m0 0EB6                                            u464m0 0402  
                        ??_one_temperature_trans 002E                                ?_SendDataBit_1621 0021  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                          _TXSTA 019E                                 __end_of_TMR0_ISR 1611  
                             ??_SendDataBit_1621 0022                     __end_of_tc_temperature_trans 026D  
                                          main@i 0160                                __end_of_I2C_Start 169D  
                            _Bq32k_Rtc_Read_Time 0CF7                                  Tc_Display@count 0030  
                              WriteAll_1621@addr 0029                                            ltemp0 007E  
                                          ltemp1 0082                                            ltemp2 0086  
                                          ltemp3 0080                                            ttemp0 007E  
                                          ttemp1 0081                                            ttemp2 0084  
                                          ttemp3 0087                                            ttemp4 007F  
                                          status 0003                                            wtemp0 007E  
                                          wtemp1 0080                                            wtemp2 0082  
                                          wtemp3 0084                                            wtemp4 0086  
                                          wtemp5 0088                                            wtemp6 007F  
                         __size_of_I2C_Send_Byte 0056                                  _Cur_temperature 00B2  
                                     _Tc_Display 04F1                                  ?_SPI_Initialize 0070  
                    __end_of_temperature_display 0AC6                                  __initialization 0029  
                            __end_of_Key_Process 0669                                 ?_I2C_Send_Buffer 0024  
                                   __end_of_main 04F1                            RxFrameCheck@frame_len 0070  
                                 WriteAll_1621@i 002A                                   WriteAll_1621@p 0025  
                               __end_of_Key_Scan 1800                                    main@data_temp 015E  
                                 ??_EUSART_Write 0021                             ?_Bq32k_Rtc_Read_Time 0070  
                    __end_of_temperature_process 0A11                            __end_of_Sleep_process 16F7  
                                 __CFG_LPBOR$OFF 0000     maxim_31856_write_register@uch_register_value 0022  
                    ?_INTERRUPT_InterruptManager 0070                                    _WriteAll_1621 0970  
                                         ??_main 0061                                      _Com_Process 14EC  
                                   Key_Process@i 005F   maxim_31856_write_register@uch_register_address 0023  
                                      ??_CRC_cal 0023                          __size_of_FLASH_ReadWord 0020  
                        Bq32k_Rtc_Read_Time@temp 002B                                I2C_Receive_Byte@i 0023  
                                  CRC_cal@rx_arr 0027                         __end_of_SPI_Exchange8bit 150B  
                          RxFrameCheck@remainder 0079                                           _ADCON0 009D  
                                         _ADCON1 009E                                           _ADRESH 009C  
                                         _ADRESL 009B                                 ___awdiv@dividend 0023  
                                         _APFCON 011D                                           _ANSELA 018C  
                                         _ANSELB 018D                                           _ANSELC 018E  
                                         i1l4350 06DE                                           i1l4502 0E32  
                                         i1l4362 070B                                           i1l4530 0E68  
                                         i1l4348 0673                                           i1l4524 0E5E  
                                         i1l4534 0E6E                                           i1l4518 0E54  
                                         i1l4544 0E90                                           i1l4546 0E99  
                                         _FVRCON 0117                                           u340_25 0681  
                                         u341_25 06EE                                           u342_25 0707  
                                         _PMADRH 0192                                           _PMADRL 0191  
                                         _PMDATH 0194                                           _PMDATL 0193  
                                         u339_25 06A6                                _temperature_value 00A4  
                                         _PMCON2 0196                        __size_of_FLASH_EraseBlock 0020  
                                         _OSCCON 0099                                           _SPBRGH 019C  
                                         _SPBRGL 019B                         _Cur_temperature_time_ch1 00B8  
                       _Cur_temperature_time_ch2 00B9                                           _WDTPS0 04B9  
                                         _WDTPS1 04BA                                           _WDTPS2 04BB  
                                         _WDTPS3 04BC                                           _WDTPS4 04BD  
                                         _TRISB1 0469                                           _TRISB3 046B  
                                         _SSPBUF 0211                                    ?_SendCmd_1621 0070  
                                         _SWDTEN 04B8                     __end_of_Bq32k_Rtc_Write_Time 0CF7  
                                  ?_SendBit_1621 0021                                   __CFG_PWRTE$OFF 0000  
                                _Bq32k_Time_Init 093C                                 SendBit_1621@data 0023  
                                         ___bmul 155B                                        ??_bcd2bin 0025  
                                  RxFrameCheck@i 0077                                           ___wmul 1647  
                                      ??___awdiv 0025                                   __CFG_STVREN$ON 0000  
                                      ??___awmod 0025                            ??_Bq32k_Rtc_Read_Time 0029  
                                      ??_bin2bcd 002A                                        ??___lwdiv 002B  
                                      ??___lwmod 0025                              _EUSART_Transmit_ISR 1663  
                   ?_maxim_31856_read_nregisters 0029                              FLASH_WriteWord@word 0023  
                                 ?_WriteAll_1621 0025                                 ?_TMR0_Initialize 0070  
                                         _memset 1611                                ?_I2C_Receive_Byte 0070  
                               ___awdiv@quotient 0028                                  ___awmod@divisor 0021  
                                         _uch_sr 00CC                                  ___awmod@counter 0026  
                                         _rtc_tm 00E3                                  _Set_finish_flag 14CE  
                                  _I2C_Send_Byte 07A3                               ??_I2C_Receive_Byte 0021  
                        FLASH_ReadWord@flashAddr 0021                                        ?_I2C_Stop 0070  
                   ??_maxim_31856_write_register 0023                            I2C_Read_Buffer@Length 0025  
                       ADC_GetConversion@channel 0024                             __size_of_err_Display 002C  
                          __end_of_TMR0_CallBack 151A                                       bcd2bin@val 0028  
                     ??_maxim_clear_fault_status 0025                             ?_EUSART_Transmit_ISR 0070  
                                 _Set_start_flag 14D8                                _SYSTEM_Initialize 1597  
                                 ??_SendCmd_1621 0025                          __end_of__initialization 0054  
                                 ??_SendBit_1621 0022                                      _Key_Process 05C2  
                             ?_SYSTEM_Initialize 0070                                 CRC_cal@frame_len 0021  
                                    ?_Tc_Display 0070                               Calculate_Time@temp 0042  
                            ___bmul@multiplicand 0021                                    ?_RxFrameCheck 0070  
                              time_Display@F2138 0130             tc_temperature_trans@temperature_back 0052  
                                 __pcstackCOMMON 0070             tc_temperature_trans@temperature_temp 0058  
                                   __pidataBANK2 14F5                              ??_SYSTEM_Initialize 0022  
                           _tc_temperature_trans 0058                                        ?_TMR0_ISR 0070  
                    ??_maxim_31856_read_register 0022              __size_of_maxim_31856_write_register 0010  
                                  ?_Save_process 0070                                   ?_I2C_Send_Byte 0070  
                  ??_maxim_31856_read_nregisters 002B                                 CRC_cal@remainder 0029  
                        ?_maxim_start_conversion 0070                                   _OPTION_REGbits 0095  
                          TMR0_ISR@CountCallBack 00AC                                  _temperature_int 00B4  
                                     ??_I2C_Stop 0021                                    ??_Two_Display 002B  
                               Two_Display@F2132 00A0                             I2C_Receive_Byte@Data 0022  
                         __end_of_Set_start_flag 14DE                              I2C_Read_Buffer@Flag 0028  
                      __end_of_SYSTEM_Initialize 15AC                        __size_of_Write_Flash_head 0021  
                          ??_EUSART_Transmit_ISR 0070                              I2C_Read_Buffer@buff 0024  
                        __end_of_Bq32k_Time_Init 0970                                       __pbssBANK0 0064  
                                     __pbssBANK1 00A0                                       __pbssBANK2 0120  
                                     __pbssBANK3 01A0                                        ?_Key_Scan 0070  
                           __end_of_EUSART_Write 152A                                  __CFG_VCAPEN$OFF 0000  
                    __size_of_EUSART_Receive_ISR 006F                                       bin2bcd@val 0031  
                                 ??_RxFrameCheck 0071                                 ??_FVR_Initialize 0021  
                                     __pmaintext 040B                                          ?___bmul 0021  
                        __end_of_Set_finish_flag 14D3                            ?_tc_temperature_trans 0070  
                                    _Record_flag 0066                                  ??_WriteAll_1621 0028  
                                        ?___wmul 0021                                       ??_TMR0_ISR 0071  
                                 ??_Save_process 004E                                       __pintentry 0004  
                                        _BAUDCON 019F                                          ?_memset 0021  
                 __end_of_maxim_start_conversion 15F6                          __size_of_ADC_Initialize 0008  
                                 _FLASH_ReadWord 16F7                                    _eusartRxCount 00BE  
                                        _CRC_cal 0F86                        __size_of_Read_time_to_Com 0069  
                           _Bq32k_Rtc_Write_Time 0C97                              __size_of_Tc_Display 00D1  
                 __size_of_one_temperature_trans 004A                    __end_of_one_temperature_trans 0B56  
                                        _OSCSTAT 009A                         __size_of_Save_Write_time 0072  
                                        _SSP1ADD 0212                         __size_of_Save_Write_word 0051  
                      _maxim_31856_read_register 1582                                  ?_Set_start_flag 0070  
           __size_of_maxim_31856_read_nregisters 0018                                       ??_Key_Scan 0021  
                                        _Dis_TAB 1800                                 _FLASH_EraseBlock 1717  
                               ??_SPI_Initialize 0021                         __size_of_FLASH_WriteWord 002B  
                        __size_of_Calculate_Time 019E                              __end_of_Two_Display 093C  
                      __size_of_SendDataBit_1621 0021                                        _I2C_Start 1680  
maxim_31856_read_nregisters@uch_register_address 002D                                        _CH1_state 00B6  
                                      _CH2_state 00B7                                          _bcd2bin 156D  
                                __size_of___bmul 0012                                    ?_time_Display 0070  
                                        ___awdiv 0C45                                          ___awmod 0AC6  
                                __size_of___wmul 001C                                          _bin2bcd 08AD  
                                        ___lwdiv 09A5                                          ___lwmod 0880  
                                ??_I2C_Send_Byte 0021                      __size_of_Write_Flash_finish 0021  
                              I2C_Send_Byte@Data 0022                           __end_of_FLASH_ReadWord 1717  
                                __size_of_memset 001B                         __size_of_I2C_Read_Buffer 0078  
                                        __ptext1 16D8                                          __ptext2 0806  
                                        __ptext3 0B56                                          __ptext4 0DC4  
                                        __ptext5 1597                                          __ptext6 153A  
                                        __ptext7 14DE                                          __ptext8 17BB  
                                        __ptext9 14D3                                     ?_Com_Process 0070  
                           __end_of_SendCmd_1621 15C4                          Read_time_to_Com@crc_tmp 003C  
                           SendDataBit_1621@data 0023                             __end_of_SendBit_1621 1758  
                          ?_Bq32k_Rtc_Write_Time 0070               __end_of_maxim_31856_write_register 153A  
                     _maxim_31856_write_register 152A                            _OSCILLATOR_Initialize 14D3  
                                 I2C_Send_Byte@i 0023                                 ___awmod@dividend 0023  
                                        _uch_cr0 006A                                          _uch_cr1 00C7  
                       ??_PIN_MANAGER_Initialize 0021                                          _uch_reg 00CD  
               __end_of_maxim_clear_fault_status 155B                                ?_SPI_Exchange8bit 0070  
                        Read_time_to_Com@tmp_buf 002C                            I2C_Send_Buffer@Length 0025  
                     __size_of_SYSTEM_Initialize 0015                                          clrloop0 07FA  
                           end_of_initialization 0054                               ??_SPI_Exchange8bit 0021  
                           SPI_Exchange8bit@data 0021                                 ?_Bq32k_Time_Init 0070  
                                        init_ram 0800                                          memset@c 0021  
                                        memset@n 0023                                          memset@p 0027  
                                        initloop 0801                                       ?_I2C_Start 0070  
                              _EUSART_Initialize 162C                           ??_tc_temperature_trans 004E  
                             ?_EUSART_Initialize 0070                                   ??_time_Display 0036  
                                      _RCSTAbits 019D                                 ?_Set_finish_flag 0070  
                          Serach_Flash_Head@data 0028                                     __pstringtext 1800  
                      FLASH_ReadWord@GIEBitValue 0023                                       _time_count 0069  
                                ?_FLASH_ReadWord 0021                     __size_of_temperature_display 003E  
                            ??_EUSART_Initialize 0021                                    ?_Step_control 0070  
                                   _display_buff 00EA                         __size_of_I2C_Send_Buffer 003B  
                               __CFG_FOSC$INTOSC 0000                     __size_of_temperature_process 0037  
                           __end_of_RxFrameCheck 070D                            __size_of_EUSART_Write 0010  
                                    _Two_Display 090B                                __size_of_I2C_Stop 001D  
                               _Write_Flash_head 179A                              Bq32k_Time_Init@temp 002D  
                           __end_of_Save_process 0E2D                        __size_of_I2C_Receive_Byte 0030  
                           Key_Process@gKeyValue 005E                           __size_of_Sleep_process 001F  
                      __end_of_EUSART_Initialize 1647                              Calculate_Time@temp1 0046  
                            Calculate_Time@temp2 004A                         EUSART_Receive_ISR@rx_tmp 007D  
                              ??_Save_Write_time 0036                                     ?_Key_Process 0070  
                              ??_Save_Write_word 0028                         ??_SPI_Exchange8bitBuffer 0024  
                                   ??_Tc_Display 002F                               RxFrameCheck@rx_arr 0078  
                    __end_of_Bq32k_Rtc_Read_Time 0D5B                                ??_FLASH_WriteWord 0025  
                   tc_temperature_trans@var_time 0056        maxim_start_conversion@uch_conversion_mode 0026  
                                 __end_of___bmul 156D                                   __end_of___wmul 1663  
                                   _EUSART_Write 151A                                __size_of_TMR0_ISR 001B  
                                 _ADC_Initialize 14E4                           ??_Bq32k_Rtc_Write_Time 0032  
                                 ??_Step_control 0021                             Key_Process@data_temp 005C  
                         ?_OSCILLATOR_Initialize 0070                                Read_time_to_Com@i 003E  
                                 __end_of_memset 162C                                   Tc_Display@data 0031  
                               WriteAll_1621@cnt 0027                                    ??_err_Display 002B  
                               _Read_time_to_Com 0D5B                              start_initialization 0029  
                       __size_of_TMR0_Initialize 0010                               __end_of_Tc_Display 05C2  
                __size_of_PIN_MANAGER_Initialize 0022                                ??_I2C_Read_Buffer 0026  
                          Bq32k_Rtc_Write_Time@p 003E                                   Two_Display@num 002C  
                                 _Calculate_Time 026D                                 _SendDataBit_1621 1758  
                                    ??_I2C_Start 0021                                __size_of_Key_Scan 0023  
                               _temperature_sign 00C3               __size_of_maxim_31856_read_register 0015  
                                SendBit_1621@cnt 0021                                         ??___bmul 0022  
              __size_of_maxim_clear_fault_status 0011                        ?_maxim_clear_fault_status 0070  
                                       ??___wmul 0025                            __size_of_SendCmd_1621 0018  
                          __size_of_SendBit_1621 0021                              I2C_Send_Buffer@Flag 002A  
                         __size_of_TMR0_CallBack 000F                           __end_of_ADC_Initialize 14EC  
                                    __pdataBANK2 0154                              I2C_Send_Buffer@buff 0024  
                                       ??_memset 0025                      FLASH_EraseBlock@GIEBitValue 0023  
                       __end_of_FLASH_EraseBlock 1737                                    _Sleep_process 16D8  
                                       ?_CRC_cal 0021                                 ??_Set_start_flag 0021  
                    __end_of_EUSART_Transmit_ISR 1680                             __size_of_Com_Process 0009  
                                       CRC_cal@i 0028                                  _CH1_temperature 00AE  
                                      ___latbits 0003                                    __pcstackBANK0 0020  
                                  __pcstackBANK2 015E                         Bq32k_Rtc_Write_Time@temp 0034  
                           __end_of_time_Display 07A3                    SPI_Exchange8bitBuffer@dataOut 0023  
                         __end_of_Calculate_Time 040B                                ??_I2C_Send_Buffer 0026  
                            __end_of_err_Display 0880                       __end_of_EUSART_Receive_ISR 0E9C  
                     __size_of_EUSART_Initialize 001B                               I2C_Read_Buffer@ADD 0027  
                                   _LongPressSec 00BA                                Two_Display@number 0030  
                                   _SendCmd_1621 15AC                                     _SendBit_1621 1737  
                                      __pnvBANK1 00EE                  __size_of_SPI_Exchange8bitBuffer 0051  
                               ___lwdiv@dividend 0029                           _PIN_MANAGER_Initialize 17BB  
                                    _MAX31856Sec 00BB                __end_of_maxim_31856_read_register 1597  
                                       ?_bcd2bin 0070                                         ?___awdiv 0021  
                                       ?___awmod 0021              __end_of_maxim_31856_read_nregisters 15DC  
                    _maxim_31856_read_nregisters 15C4                                         ?_bin2bcd 0070  
                                       ?___lwdiv 0027                                         ?___lwmod 0021  
                                ?_ADC_Initialize 0070                                SendDataBit_1621@i 0024  
                                   _eusartRxHead 00BF                                     _eusartTxHead 00C1  
                                 ?_Sleep_process 0070                            __end_of_WriteAll_1621 09A5  
                                   _eusartRxTail 00C0                                     _eusartTxTail 00C2  
                   ??_INTERRUPT_InterruptManager 0020                            __size_of_RxFrameCheck 00A4  
                        _eusartTxBufferRemaining 00EE                                _Set_time_cmd_flag 00BC  
                    ?_maxim_31856_write_register 0022                                         _I2C_Stop 169D  
                          __size_of_Save_process 0069                                  _CH2_temperature 00B0  
                               I2C_Send_Buffer@i 0029                                 __CFG_WDTE$SWDTEN 0000  
                               ___lwdiv@quotient 002D                                    _TMR0_CallBack 150B  
                                ?_Calculate_Time 0070                              _temperature_decimal 0068  
                          _one_temperature_trans 0B0C                                _Set_time_from_Com 0A4C  
                               _I2C_Receive_Byte 08DB                              SendDataBit_1621@cnt 0021  
                       FLASH_WriteWord@flashAddr 0021                                   err_Display@num 002C  
                                 _eusartRxBuffer 0120            maxim_31856_read_nregisters@uch_nBytes 002A  
                            _temperature_display 0A88                                ??_TMR0_Initialize 0021  
                                 _eusartTxBuffer 0128                               ?_Set_time_from_Com 0070  
                                 ___wmul@product 0025                             __end_of_Step_control 0829  
                                      clear_ram0 07F9                                         _PIE1bits 0091  
                                      _uch_ltcbh 00C8                                        _uch_ltcbl 00C9  
                                      _uch_ltcbm 00CA                             __size_of_Key_Process 00A7  
            __size_of_INTERRUPT_InterruptManager 0023                              _temperature_process 09DA  
                                       _PIR1bits 0011                        FLASH_EraseBlock@startAddr 0021  
                                   _RxFrameCheck 0669                              ??_Set_time_from_Com 003F  
                               ??_FLASH_ReadWord 0023                        __size_of_SPI_Exchange8bit 000C  
                     __end_of_Write_Flash_finish 179A                                         _SSP1CON1 0215  
                                       _TMR0_ISR 15F6                         __end_of_Write_Flash_head 17BB  
                                       _SSP1STAT 0214                                     _Save_process 0DC4  
                           ?_temperature_display 0070                            __end_of_I2C_Send_Byte 07F9  
                                     _ADCON0bits 009D                                ___wmul@multiplier 0021  
                        __size_of_FVR_Initialize 0004                           _SPI_Exchange8bitBuffer 0BA3  
                                 _Cur_Save_Index 0064                                      _err_Display 0854  
                            Save_Write_word@data 0026                             ?_temperature_process 0070  
                               __size_of_CRC_cal 007A                                  _Save_Write_time 0E9C  
                                _Save_Write_word 0BF4                                     ?_Two_Display 0070  
                      __end_of_Set_time_from_Com 0A88                                   ?_TMR0_CallBack 0070  
                                _FLASH_WriteWord 0829                                         _Key_Scan 17DD  
            maxim_31856_read_nregisters@uch_buff 0029                                _Serach_Flash_Head 0B56  
                       __end_of_Read_time_to_Com 0DC4                         __size_of_Bq32k_Time_Init 0034  
                             ?_Serach_Flash_Head 0070                                _ADC_GetConversion 16BA  
                       ??_maxim_start_conversion 0025                               I2C_Send_Buffer@ADD 0028  
                                ??_Sleep_process 0022                    __size_of_tc_temperature_trans 0215  
                        __size_of_SPI_Initialize 0006                                 __size_of_bcd2bin 0015  
                        ??_OSCILLATOR_Initialize 0021                               Serach_Flash_Head@i 002A  
                             ?_ADC_GetConversion 0021                                 __size_of___awdiv 0052  
                          ??_temperature_display 005A                                 __size_of___awmod 0046  
                                _I2C_Read_Buffer 0F0E                                 __size_of_bin2bcd 002E  
                               __size_of___lwdiv 0035                                 __size_of___lwmod 002D  
                            ??_Serach_Flash_Head 0026                     SPI_Exchange8bitBuffer@dataIn 0027  
                   SPI_Exchange8bitBuffer@bufLen 0022                                 err_Display@F2135 00A8  
                       __end_of_SendDataBit_1621 1779                         __size_of_Set_finish_flag 0005  
                          __size_of_time_Display 0096                              ??_ADC_GetConversion 0023  
                          ??_temperature_process 005B                                  ___lwdiv@divisor 0027  
                                ___lwdiv@counter 002C                                         __ptext10 14CA  
                                       __ptext11 162C                                         __ptext20 179A  
                                       __ptext12 14E4                                         __ptext21 1779  
                                       __ptext13 05C2                                         __ptext30 09A5  
                                       __ptext22 0E9C                                         __ptext14 09DA  
                                       __ptext31 0B0C                                         __ptext23 0BF4  
                                       __ptext15 070D                                         __ptext40 1758  
                                       __ptext32 15DC                                         __ptext24 1717  
                                       __ptext16 0A88                                         __ptext41 14D8  
                                       __ptext33 152A                                         __ptext25 154A  
                                       __ptext17 0058                                         __ptext50 0F86  
                                       __ptext42 14CE                                         __ptext34 1582  
                                       __ptext26 0854                                         __ptext18 026D  
                                       __ptext51 0C97                                         __ptext43 15AC  
                                       __ptext35 15C4                                         __ptext27 04F1  
                                       __ptext19 1647                                         __ptext60 093C  
                                       __ptext52 08AD                                         __ptext44 1737  
                                       __ptext36 0BA3                                         __ptext28 1611  
                                       __ptext61 0A11                                         __ptext53 0AC6  
                                       __ptext45 17DD                                         __ptext37 14FF  
                                       __ptext29 0880                                         __ptext70 150B  
                                       __ptext62 169D                                         __ptext54 0C45  
                                       __ptext46 14EC                                         __ptext38 090B  
                                       __ptext71 1663                                         __ptext63 1680  
                                       __ptext55 0CF7                                         __ptext47 0A4C  
                                       __ptext39 0970                                         __ptext72 0E2D  
                                       __ptext64 07A3                                         __ptext56 156D  
                                       __ptext48 0D5B                                         __ptext73 0669  
                                       __ptext65 0829                                         __ptext57 155B  
                                       __ptext49 151A                                         __ptext66 16F7  
                                       __ptext58 0F0E                                         __ptext67 16BA  
                                       __ptext59 08DB                                         __ptext69 15F6  
                         ?_one_temperature_trans 0070                                     _SSP1CON1bits 0215  
                      __end_of_Serach_Flash_Head 0BA3                                    __size_of_main 00E6  
     maxim_31856_read_register@uch_register_data 0024                        __end_of_ADC_GetConversion 16D8  
                                       _uch_cjth 00C5                                         _uch_cjtl 00C6  
                                       _uch_mask 00CB                             Save_process@var_time 0050  
                                       int$flags 007E                                     _time_Display 070D  
                                       _tmr_flag 00C4               __end_of_INTERRUPT_InterruptManager 0027  
                     _INTERRUPT_InterruptManager 0004                     __size_of_Bq32k_Rtc_Read_Time 0064  
                                   _SSP1STATbits 0214                          __end_of_Save_Write_time 0F0E  
                        __end_of_Save_Write_word 0C45                                  _I2C_Send_Buffer 0A11  
                              ?_FLASH_EraseBlock 0021                    __size_of_Bq32k_Rtc_Write_Time 0060  
                             ??_FLASH_EraseBlock 0023                                       _INTCONbits 000B  
                        __end_of_FLASH_WriteWord 0854                                  ??_TMR0_CallBack 0070  
                                     _FVRCONbits 0117                                  Key_Scan@Key_val 0023  
                                  SendBit_1621@i 0024                       __size_of_Set_time_from_Com 003C  
                                       memset@p1 0026                            __size_of_Step_control 0023  
                                       intlevel1 0000                                       _PMCON1bits 0195  
                               ___lwmod@dividend 0023                          ?_PIN_MANAGER_Initialize 0070  
                              __CFG_CLKOUTEN$OFF 0000               SPI_Exchange8bitBuffer@bytesWritten 0028  
                               ??_ADC_Initialize 0021                          __end_of_I2C_Read_Buffer 0F86  
                               _SPI_Exchange8bit 14FF                  __size_of_maxim_start_conversion 001A  
                             _EUSART_Receive_ISR 0E2D                         __end_of_I2C_Receive_Byte 090B  
                         Serach_Flash_Head@count 0027                                ??_Bq32k_Time_Init 002B  
                                  ??_Com_Process 0040                                   _FVR_Initialize 14CA  
                                   _rtc_save_ch1 00D5                                     _rtc_save_ch2 00DC  
                                     _OPTION_REG 0095                              ?_EUSART_Receive_ISR 0070  
                                   _Step_control 0806                                 ??_Calculate_Time 0038  
                                ___lwmod@divisor 0021                                  _TMR0_Initialize 153A  
                                ___lwmod@counter 0026         tc_temperature_trans@temperature_absolute 0054  
                              ??_Set_finish_flag 0021                               EUSART_Write@txData 0021  
                           __size_of_Two_Display 0031                     __size_of_EUSART_Transmit_ISR 001D  
                 __end_of_PIN_MANAGER_Initialize 17DD                       __size_of_Serach_Flash_Head 004D  
                           ??_EUSART_Receive_ISR 007B                             Bq32k_Time_Init@F2027 0154  
                     __size_of_ADC_GetConversion 001E                         _maxim_clear_fault_status 154A  
